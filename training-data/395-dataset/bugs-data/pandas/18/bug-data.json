{
    "pandas:18": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_18/pandas/core/window/common.py": {
            "buggy_functions": [
                {
                    "function_name": "validate_baseindexer_support",
                    "function_code": "def validate_baseindexer_support(func_name: Optional[str]) -> None:\n    # GH 32865: These functions work correctly with a BaseIndexer subclass\n    BASEINDEXER_WHITELIST = {\n        \"count\",\n        \"min\",\n        \"max\",\n        \"mean\",\n        \"sum\",\n        \"median\",\n        \"std\",\n        \"var\",\n        \"kurt\",\n        \"quantile\",\n    }\n    if isinstance(func_name, str) and func_name not in BASEINDEXER_WHITELIST:\n        raise NotImplementedError(\n            f\"{func_name} is not supported with using a BaseIndexer \"\n            f\"subclasses. You can use .apply() with {func_name}.\"\n        )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 329,
                    "variables": {
                        "Optional": [
                            329
                        ],
                        "str": [
                            329,
                            343
                        ],
                        "BASEINDEXER_WHITELIST": [
                            331,
                            343
                        ],
                        "isinstance": [
                            343
                        ],
                        "func_name": [
                            345,
                            346,
                            343
                        ],
                        "NotImplementedError": [
                            344
                        ]
                    },
                    "filtered_variables": {
                        "Optional": [
                            329
                        ],
                        "BASEINDEXER_WHITELIST": [
                            331,
                            343
                        ],
                        "func_name": [
                            345,
                            346,
                            343
                        ]
                    },
                    "diff_line_number": 339,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BASEINDEXER_WHITELIST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func_name": {
                                    "variable_value": "'skew'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BASEINDEXER_WHITELIST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func_name": {
                                    "variable_value": "'skew'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                }
                            },
                            {
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BASEINDEXER_WHITELIST": {
                                    "variable_value": "{'count', 'max', 'skew', 'kurt', 'quantile', 'min', 'sum', 'std', 'mean', 'var', 'median'}",
                                    "variable_type": "set",
                                    "variable_shape": "11"
                                },
                                "func_name": {
                                    "variable_value": "'skew'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                }
                            }
                        ],
                        [
                            {
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BASEINDEXER_WHITELIST": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func_name": {
                                    "variable_value": "'skew'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                }
                            },
                            {
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BASEINDEXER_WHITELIST": {
                                    "variable_value": "{'count', 'max', 'skew', 'kurt', 'quantile', 'min', 'sum', 'std', 'mean', 'var', 'median'}",
                                    "variable_type": "set",
                                    "variable_shape": "11"
                                },
                                "func_name": {
                                    "variable_value": "'skew'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _dispatch(name: str, *args, **kwargs):\n    \"\"\"\n    Dispatch to apply.\n    \"\"\"\n\n    def outer(self, *args, **kwargs):\n        def f(x):\n            x = self._shallow_copy(x, groupby=self._groupby)\n            return getattr(x, name)(*args, **kwargs)\n\n        return self._groupby.apply(f)\n\n    outer.__name__ = name\n    return outer",
                "def _flex_binary_moment(arg1, arg2, f, pairwise=False):\n\n    if not (\n        isinstance(arg1, (np.ndarray, ABCSeries, ABCDataFrame))\n        and isinstance(arg2, (np.ndarray, ABCSeries, ABCDataFrame))\n    ):\n        raise TypeError(\n            \"arguments to moment function must be of type np.ndarray/Series/DataFrame\"\n        )\n\n    if isinstance(arg1, (np.ndarray, ABCSeries)) and isinstance(\n        arg2, (np.ndarray, ABCSeries)\n    ):\n        X, Y = prep_binary(arg1, arg2)\n        return f(X, Y)\n\n    elif isinstance(arg1, ABCDataFrame):\n        from pandas import DataFrame\n\n        def dataframe_from_int_dict(data, frame_template):\n            result = DataFrame(data, index=frame_template.index)\n            if len(result.columns) > 0:\n                result.columns = frame_template.columns[result.columns]\n            return result\n\n        results = {}\n        if isinstance(arg2, ABCDataFrame):\n            if pairwise is False:\n                if arg1 is arg2:\n                    # special case in order to handle duplicate column names\n                    for i, col in enumerate(arg1.columns):\n                        results[i] = f(arg1.iloc[:, i], arg2.iloc[:, i])\n                    return dataframe_from_int_dict(results, arg1)\n                else:\n                    if not arg1.columns.is_unique:\n                        raise ValueError(\"'arg1' columns are not unique\")\n                    if not arg2.columns.is_unique:\n                        raise ValueError(\"'arg2' columns are not unique\")\n                    with warnings.catch_warnings(record=True):\n                        warnings.simplefilter(\"ignore\", RuntimeWarning)\n                        X, Y = arg1.align(arg2, join=\"outer\")\n                    X = X + 0 * Y\n                    Y = Y + 0 * X\n\n                    with warnings.catch_warnings(record=True):\n                        warnings.simplefilter(\"ignore\", RuntimeWarning)\n                        res_columns = arg1.columns.union(arg2.columns)\n                    for col in res_columns:\n                        if col in X and col in Y:\n                            results[col] = f(X[col], Y[col])\n                    return DataFrame(results, index=X.index, columns=res_columns)\n            elif pairwise is True:\n                results = defaultdict(dict)\n                for i, k1 in enumerate(arg1.columns):\n                    for j, k2 in enumerate(arg2.columns):\n                        if j < i and arg2 is arg1:\n                            # Symmetric case\n                            results[i][j] = results[j][i]\n                        else:\n                            results[i][j] = f(\n                                *prep_binary(arg1.iloc[:, i], arg2.iloc[:, j])\n                            )\n\n                from pandas import concat\n\n                result_index = arg1.index.union(arg2.index)\n                if len(result_index):\n\n                    # construct result frame\n                    result = concat(\n                        [\n                            concat(\n                                [results[i][j] for j, c in enumerate(arg2.columns)],\n                                ignore_index=True,\n                            )\n                            for i, c in enumerate(arg1.columns)\n                        ],\n                        ignore_index=True,\n                        axis=1,\n                    )\n                    result.columns = arg1.columns\n\n                    # set the index and reorder\n                    if arg2.columns.nlevels > 1:\n                        result.index = MultiIndex.from_product(\n                            arg2.columns.levels + [result_index]\n                        )\n                        result = result.reorder_levels([2, 0, 1]).sort_index()\n                    else:\n                        result.index = MultiIndex.from_product(\n                            [range(len(arg2.columns)), range(len(result_index))]\n                        )\n                        result = result.swaplevel(1, 0).sort_index()\n                        result.index = MultiIndex.from_product(\n                            [result_index] + [arg2.columns]\n                        )\n                else:\n\n                    # empty result\n                    result = DataFrame(\n                        index=MultiIndex(\n                            levels=[arg1.index, arg2.columns], codes=[[], []]\n                        ),\n                        columns=arg2.columns,\n                        dtype=\"float64\",\n                    )\n\n                # reset our index names to arg1 names\n                # reset our column names to arg2 names\n                # careful not to mutate the original names\n                result.columns = result.columns.set_names(arg1.columns.names)\n                result.index = result.index.set_names(\n                    result_index.names + arg2.columns.names\n                )\n\n                return result\n\n            else:\n                raise ValueError(\"'pairwise' is not True/False\")\n        else:\n            results = {\n                i: f(*prep_binary(arg1.iloc[:, i], arg2))\n                for i, col in enumerate(arg1.columns)\n            }\n            return dataframe_from_int_dict(results, arg1)\n\n    else:\n        return _flex_binary_moment(arg2, arg1, f)",
                "def _get_center_of_mass(comass, span, halflife, alpha):\n    valid_count = com.count_not_none(comass, span, halflife, alpha)\n    if valid_count > 1:\n        raise ValueError(\"comass, span, halflife, and alpha are mutually exclusive\")\n\n    # Convert to center of mass; domain checks ensure 0 < alpha <= 1\n    if comass is not None:\n        if comass < 0:\n            raise ValueError(\"comass must satisfy: comass >= 0\")\n    elif span is not None:\n        if span < 1:\n            raise ValueError(\"span must satisfy: span >= 1\")\n        comass = (span - 1) / 2.0\n    elif halflife is not None:\n        if halflife <= 0:\n            raise ValueError(\"halflife must satisfy: halflife > 0\")\n        decay = 1 - np.exp(np.log(0.5) / halflife)\n        comass = 1 / decay - 1\n    elif alpha is not None:\n        if alpha <= 0 or alpha > 1:\n            raise ValueError(\"alpha must satisfy: 0 < alpha <= 1\")\n        comass = (1.0 - alpha) / alpha\n    else:\n        raise ValueError(\"Must pass one of comass, span, halflife, or alpha\")\n\n    return float(comass)",
                "def calculate_center_offset(window):\n    if not is_integer(window):\n        window = len(window)\n    return int((window - 1) / 2.0)",
                "def calculate_min_periods(\n    window: int,\n    min_periods: Optional[int],\n    num_values: int,\n    required_min_periods: int,\n    floor: int,\n) -> int:\n    \"\"\"\n    Calculates final minimum periods value for rolling aggregations.\n\n    Parameters\n    ----------\n    window : passed window value\n    min_periods : passed min periods value\n    num_values : total number of values\n    required_min_periods : required min periods per aggregation function\n    floor : required min periods per aggregation function\n\n    Returns\n    -------\n    min_periods : int\n    \"\"\"\n    if min_periods is None:\n        min_periods = window\n    else:\n        min_periods = max(required_min_periods, min_periods)\n    if min_periods > window:\n        raise ValueError(f\"min_periods {min_periods} must be <= window {window}\")\n    elif min_periods > num_values:\n        min_periods = num_values + 1\n    elif min_periods < 0:\n        raise ValueError(\"min_periods must be >= 0\")\n    return max(min_periods, floor)",
                "def zsqrt(x):\n    with np.errstate(all=\"ignore\"):\n        result = np.sqrt(x)\n        mask = x < 0\n\n    if isinstance(x, ABCDataFrame):\n        if mask._values.any():\n            result[mask] = 0\n    else:\n        if mask.any():\n            result[mask] = 0\n\n    return result",
                "def prep_binary(arg1, arg2):\n    if not isinstance(arg2, type(arg1)):\n        raise Exception(\"Input arrays must be of the same type!\")\n\n    # mask out values, this also makes a common index...\n    X = arg1 + 0 * arg2\n    Y = arg2 + 0 * arg1\n\n    return X, Y",
                "def get_weighted_roll_func(cfunc: Callable) -> Callable:\n    def func(arg, window, min_periods=None):\n        if min_periods is None:\n            min_periods = len(window)\n        return cfunc(arg, window, min_periods)\n\n    return func",
                "def validate_baseindexer_support(func_name: Optional[str]) -> None:\n    # GH 32865: These functions work correctly with a BaseIndexer subclass\n    BASEINDEXER_WHITELIST = {\n        \"count\",\n        \"min\",\n        \"max\",\n        \"mean\",\n        \"sum\",\n        \"median\",\n        \"std\",\n        \"var\",\n        \"kurt\",\n        \"quantile\",\n    }\n    if isinstance(func_name, str) and func_name not in BASEINDEXER_WHITELIST:\n        raise NotImplementedError(\n            f\"{func_name} is not supported with using a BaseIndexer \"\n            f\"subclasses. You can use .apply() with {func_name}.\"\n        )",
                "def outer(self, *args, **kwargs):\n    def f(x):\n        x = self._shallow_copy(x, groupby=self._groupby)\n        return getattr(x, name)(*args, **kwargs)\n\n    return self._groupby.apply(f)",
                "def __init__(self, obj, *args, **kwargs):\n    kwargs.pop(\"parent\", None)\n    groupby = kwargs.pop(\"groupby\", None)\n    if groupby is None:\n        groupby, obj = obj, obj.obj\n    self._groupby = groupby\n    self._groupby.mutated = True\n    self._groupby.grouper.mutated = True\n    super().__init__(obj, *args, **kwargs)",
                "def _apply(\n    self,\n    func: Callable,\n    center: bool,\n    require_min_periods: int = 0,\n    floor: int = 1,\n    is_weighted: bool = False,\n    name: Optional[str] = None,\n    use_numba_cache: bool = False,\n    **kwargs,\n):\n    \"\"\"\n    Dispatch to apply; we are stripping all of the _apply kwargs and\n    performing the original function call on the grouped object.\n    \"\"\"\n    kwargs.pop(\"floor\", None)\n    kwargs.pop(\"original_func\", None)\n\n    # TODO: can we de-duplicate with _dispatch?\n    def f(x, name=name, *args):\n        x = self._shallow_copy(x)\n\n        if isinstance(name, str):\n            return getattr(x, name)(*args, **kwargs)\n\n        return x.apply(name, *args, **kwargs)\n\n    return self._groupby.apply(f)",
                "def func(arg, window, min_periods=None):\n    if min_periods is None:\n        min_periods = len(window)\n    return cfunc(arg, window, min_periods)",
                "def f(x):\n    x = self._shallow_copy(x, groupby=self._groupby)\n    return getattr(x, name)(*args, **kwargs)",
                "def f(x, name=name, *args):\n    x = self._shallow_copy(x)\n\n    if isinstance(name, str):\n        return getattr(x, name)(*args, **kwargs)\n\n    return x.apply(name, *args, **kwargs)",
                "def dataframe_from_int_dict(data, frame_template):\n    result = DataFrame(data, index=frame_template.index)\n    if len(result.columns) > 0:\n        result.columns = frame_template.columns[result.columns]\n    return result"
            ],
            "inscope_function_signatures": [
                "_dispatch(name: str, *args, **kwargs)",
                "_flex_binary_moment(arg1, arg2, f, pairwise=False)",
                "_get_center_of_mass(comass, span, halflife, alpha)",
                "calculate_center_offset(window)",
                "calculate_min_periods(window: int, min_periods: Optional[int], num_values: int, required_min_periods: int, floor: int) -> int",
                "zsqrt(x)",
                "prep_binary(arg1, arg2)",
                "get_weighted_roll_func(cfunc: Callable) -> Callable",
                "validate_baseindexer_support(func_name: Optional[str]) -> None",
                "outer(self, *args, **kwargs)",
                "__init__(self, obj, *args, **kwargs)",
                "_apply(self, func: Callable, center: bool, require_min_periods: int=0, floor: int=1, is_weighted: bool=False, name: Optional[str]=None, use_numba_cache: bool=False, **kwargs)",
                "func(arg, window, min_periods=None)",
                "f(x)",
                "f(x, name=name, *args)",
                "dataframe_from_int_dict(data, frame_template)"
            ],
            "variables_in_file": {
                "_shared_docs": [
                    16
                ],
                "dict": [
                    16,
                    147
                ],
                "_doc_template": [
                    17
                ],
                "str": [
                    72,
                    329,
                    87,
                    343,
                    30
                ],
                "x": [
                    37,
                    38,
                    296,
                    297,
                    299,
                    85,
                    88,
                    90
                ],
                "self._shallow_copy": [
                    85,
                    37
                ],
                "self": [
                    37,
                    40,
                    85,
                    56,
                    57,
                    58,
                    92
                ],
                "self._groupby": [
                    37,
                    40,
                    56,
                    57,
                    58,
                    92
                ],
                "getattr": [
                    88,
                    38
                ],
                "name": [
                    38,
                    42,
                    84,
                    87,
                    88,
                    90
                ],
                "args": [
                    88,
                    90,
                    59,
                    38
                ],
                "kwargs": [
                    38,
                    80,
                    81,
                    52,
                    53,
                    88,
                    90,
                    59
                ],
                "self._groupby.apply": [
                    40,
                    92
                ],
                "f": [
                    40,
                    109,
                    144,
                    216,
                    154,
                    92,
                    222,
                    126
                ],
                "outer.__name__": [
                    42
                ],
                "outer": [
                    42,
                    43
                ],
                "GroupByMixin": [
                    46
                ],
                "kwargs.pop": [
                    80,
                    81,
                    52,
                    53
                ],
                "groupby": [
                    56,
                    53,
                    54,
                    55
                ],
                "obj": [
                    59,
                    55
                ],
                "obj.obj": [
                    55
                ],
                "self._groupby.mutated": [
                    57
                ],
                "self._groupby.grouper.mutated": [
                    58
                ],
                "self._groupby.grouper": [
                    58
                ],
                "__init__": [
                    59
                ],
                "super": [
                    59
                ],
                "count": [
                    61
                ],
                "_dispatch": [
                    61,
                    62,
                    63
                ],
                "corr": [
                    62
                ],
                "cov": [
                    63
                ],
                "Callable": [
                    320,
                    67
                ],
                "bool": [
                    73,
                    68,
                    71
                ],
                "int": [
                    256,
                    260,
                    261,
                    69,
                    70,
                    262,
                    263,
                    264,
                    265
                ],
                "Optional": [
                    72,
                    329,
                    261
                ],
                "isinstance": [
                    98,
                    99,
                    105,
                    299,
                    111,
                    310,
                    87,
                    121,
                    343
                ],
                "x.apply": [
                    90
                ],
                "arg1": [
                    129,
                    135,
                    141,
                    148,
                    150,
                    155,
                    160,
                    170,
                    175,
                    310,
                    314,
                    315,
                    196,
                    205,
                    216,
                    217,
                    219,
                    222,
                    98,
                    105,
                    108,
                    111,
                    123,
                    125,
                    126,
                    127
                ],
                "np.ndarray": [
                    105,
                    98,
                    99,
                    106
                ],
                "np": [
                    98,
                    99,
                    295,
                    296,
                    105,
                    106,
                    241
                ],
                "ABCSeries": [
                    105,
                    98,
                    99,
                    106
                ],
                "ABCDataFrame": [
                    98,
                    99,
                    299,
                    111,
                    121
                ],
                "arg2": [
                    131,
                    135,
                    141,
                    149,
                    150,
                    155,
                    160,
                    167,
                    178,
                    180,
                    310,
                    185,
                    314,
                    315,
                    189,
                    196,
                    198,
                    207,
                    216,
                    222,
                    99,
                    106,
                    108,
                    121,
                    123,
                    126
                ],
                "TypeError": [
                    101
                ],
                "X": [
                    135,
                    136,
                    137,
                    108,
                    109,
                    143,
                    144,
                    145,
                    314,
                    317
                ],
                "Y": [
                    135,
                    136,
                    137,
                    108,
                    109,
                    143,
                    144,
                    315,
                    317
                ],
                "prep_binary": [
                    216,
                    155,
                    108
                ],
                "result": [
                    164,
                    296,
                    301,
                    175,
                    304,
                    306,
                    179,
                    182,
                    184,
                    187,
                    188,
                    194,
                    205,
                    206,
                    210,
                    115,
                    116,
                    117,
                    118
                ],
                "DataFrame": [
                    145,
                    194,
                    115
                ],
                "data": [
                    115
                ],
                "frame_template.index": [
                    115
                ],
                "frame_template": [
                    115,
                    117
                ],
                "len": [
                    161,
                    323,
                    116,
                    185,
                    255
                ],
                "result.columns": [
                    205,
                    116,
                    117,
                    175
                ],
                "frame_template.columns": [
                    117
                ],
                "results": [
                    167,
                    144,
                    145,
                    147,
                    215,
                    120,
                    154,
                    219,
                    152,
                    126,
                    127
                ],
                "pairwise": [
                    122,
                    146
                ],
                "i": [
                    167,
                    170,
                    148,
                    150,
                    152,
                    217,
                    154,
                    155,
                    125,
                    126,
                    216
                ],
                "col": [
                    142,
                    143,
                    144,
                    217,
                    125
                ],
                "enumerate": [
                    167,
                    170,
                    148,
                    149,
                    217,
                    125
                ],
                "arg1.columns": [
                    129,
                    170,
                    141,
                    205,
                    175,
                    148,
                    217,
                    125
                ],
                "arg1.iloc": [
                    216,
                    155,
                    126
                ],
                "arg2.iloc": [
                    155,
                    126
                ],
                "dataframe_from_int_dict": [
                    219,
                    127
                ],
                "arg1.columns.is_unique": [
                    129
                ],
                "ValueError": [
                    130,
                    290,
                    228,
                    132,
                    233,
                    236,
                    240,
                    213,
                    245,
                    248,
                    286
                ],
                "arg2.columns.is_unique": [
                    131
                ],
                "arg2.columns": [
                    131,
                    196,
                    198,
                    167,
                    141,
                    207,
                    178,
                    180,
                    149,
                    185,
                    189
                ],
                "warnings.catch_warnings": [
                    139,
                    133
                ],
                "warnings": [
                    139,
                    140,
                    133,
                    134
                ],
                "warnings.simplefilter": [
                    140,
                    134
                ],
                "RuntimeWarning": [
                    140,
                    134
                ],
                "arg1.align": [
                    135
                ],
                "res_columns": [
                    145,
                    141,
                    142
                ],
                "arg1.columns.union": [
                    141
                ],
                "X.index": [
                    145
                ],
                "defaultdict": [
                    147
                ],
                "k1": [
                    148
                ],
                "j": [
                    167,
                    149,
                    150,
                    152,
                    154,
                    155
                ],
                "k2": [
                    149
                ],
                "result_index": [
                    160,
                    161,
                    207,
                    180,
                    185,
                    189
                ],
                "arg1.index.union": [
                    160
                ],
                "arg1.index": [
                    160,
                    196
                ],
                "arg2.index": [
                    160
                ],
                "concat": [
                    164,
                    166
                ],
                "c": [
                    170,
                    167
                ],
                "arg2.columns.nlevels": [
                    178
                ],
                "result.index": [
                    184,
                    179,
                    188,
                    206
                ],
                "MultiIndex.from_product": [
                    184,
                    179,
                    188
                ],
                "MultiIndex": [
                    184,
                    179,
                    188,
                    195
                ],
                "arg2.columns.levels": [
                    180
                ],
                "sort_index": [
                    187,
                    182
                ],
                "result.reorder_levels": [
                    182
                ],
                "range": [
                    185
                ],
                "result.swaplevel": [
                    187
                ],
                "result.columns.set_names": [
                    205
                ],
                "arg1.columns.names": [
                    205
                ],
                "result.index.set_names": [
                    206
                ],
                "result_index.names": [
                    207
                ],
                "arg2.columns.names": [
                    207
                ],
                "_flex_binary_moment": [
                    222
                ],
                "valid_count": [
                    226,
                    227
                ],
                "com.count_not_none": [
                    226
                ],
                "com": [
                    226
                ],
                "comass": [
                    226,
                    231,
                    232,
                    237,
                    242,
                    246,
                    250
                ],
                "span": [
                    226,
                    234,
                    237,
                    235
                ],
                "halflife": [
                    241,
                    226,
                    238,
                    239
                ],
                "alpha": [
                    226,
                    243,
                    244,
                    246
                ],
                "decay": [
                    241,
                    242
                ],
                "np.exp": [
                    241
                ],
                "np.log": [
                    241
                ],
                "float": [
                    250
                ],
                "is_integer": [
                    254
                ],
                "window": [
                    256,
                    323,
                    324,
                    282,
                    286,
                    285,
                    254,
                    255
                ],
                "min_periods": [
                    288,
                    289,
                    322,
                    291,
                    323,
                    324,
                    281,
                    282,
                    284,
                    285,
                    286,
                    287
                ],
                "max": [
                    291,
                    284
                ],
                "required_min_periods": [
                    284
                ],
                "num_values": [
                    288,
                    287
                ],
                "floor": [
                    291
                ],
                "np.errstate": [
                    295
                ],
                "np.sqrt": [
                    296
                ],
                "mask": [
                    297,
                    300,
                    301,
                    303,
                    304
                ],
                "mask._values.any": [
                    300
                ],
                "mask._values": [
                    300
                ],
                "mask.any": [
                    303
                ],
                "type": [
                    310
                ],
                "Exception": [
                    311
                ],
                "cfunc": [
                    324
                ],
                "arg": [
                    324
                ],
                "func": [
                    326
                ],
                "BASEINDEXER_WHITELIST": [
                    331,
                    343
                ],
                "func_name": [
                    345,
                    346,
                    343
                ],
                "NotImplementedError": [
                    344
                ]
            },
            "filtered_variables_in_file": {
                "_shared_docs": [
                    16
                ],
                "_doc_template": [
                    17
                ],
                "x": [
                    37,
                    38,
                    296,
                    297,
                    299,
                    85,
                    88,
                    90
                ],
                "self._shallow_copy": [
                    85,
                    37
                ],
                "self": [
                    37,
                    40,
                    85,
                    56,
                    57,
                    58,
                    92
                ],
                "self._groupby": [
                    37,
                    40,
                    56,
                    57,
                    58,
                    92
                ],
                "name": [
                    38,
                    42,
                    84,
                    87,
                    88,
                    90
                ],
                "args": [
                    88,
                    90,
                    59,
                    38
                ],
                "kwargs": [
                    38,
                    80,
                    81,
                    52,
                    53,
                    88,
                    90,
                    59
                ],
                "self._groupby.apply": [
                    40,
                    92
                ],
                "f": [
                    40,
                    109,
                    144,
                    216,
                    154,
                    92,
                    222,
                    126
                ],
                "outer.__name__": [
                    42
                ],
                "outer": [
                    42,
                    43
                ],
                "GroupByMixin": [
                    46
                ],
                "kwargs.pop": [
                    80,
                    81,
                    52,
                    53
                ],
                "groupby": [
                    56,
                    53,
                    54,
                    55
                ],
                "obj": [
                    59,
                    55
                ],
                "obj.obj": [
                    55
                ],
                "self._groupby.mutated": [
                    57
                ],
                "self._groupby.grouper.mutated": [
                    58
                ],
                "self._groupby.grouper": [
                    58
                ],
                "__init__": [
                    59
                ],
                "count": [
                    61
                ],
                "_dispatch": [
                    61,
                    62,
                    63
                ],
                "corr": [
                    62
                ],
                "cov": [
                    63
                ],
                "Callable": [
                    320,
                    67
                ],
                "Optional": [
                    72,
                    329,
                    261
                ],
                "x.apply": [
                    90
                ],
                "arg1": [
                    129,
                    135,
                    141,
                    148,
                    150,
                    155,
                    160,
                    170,
                    175,
                    310,
                    314,
                    315,
                    196,
                    205,
                    216,
                    217,
                    219,
                    222,
                    98,
                    105,
                    108,
                    111,
                    123,
                    125,
                    126,
                    127
                ],
                "np.ndarray": [
                    105,
                    98,
                    99,
                    106
                ],
                "np": [
                    98,
                    99,
                    295,
                    296,
                    105,
                    106,
                    241
                ],
                "ABCSeries": [
                    105,
                    98,
                    99,
                    106
                ],
                "ABCDataFrame": [
                    98,
                    99,
                    299,
                    111,
                    121
                ],
                "arg2": [
                    131,
                    135,
                    141,
                    149,
                    150,
                    155,
                    160,
                    167,
                    178,
                    180,
                    310,
                    185,
                    314,
                    315,
                    189,
                    196,
                    198,
                    207,
                    216,
                    222,
                    99,
                    106,
                    108,
                    121,
                    123,
                    126
                ],
                "X": [
                    135,
                    136,
                    137,
                    108,
                    109,
                    143,
                    144,
                    145,
                    314,
                    317
                ],
                "Y": [
                    135,
                    136,
                    137,
                    108,
                    109,
                    143,
                    144,
                    315,
                    317
                ],
                "prep_binary": [
                    216,
                    155,
                    108
                ],
                "result": [
                    164,
                    296,
                    301,
                    175,
                    304,
                    306,
                    179,
                    182,
                    184,
                    187,
                    188,
                    194,
                    205,
                    206,
                    210,
                    115,
                    116,
                    117,
                    118
                ],
                "DataFrame": [
                    145,
                    194,
                    115
                ],
                "data": [
                    115
                ],
                "frame_template.index": [
                    115
                ],
                "frame_template": [
                    115,
                    117
                ],
                "result.columns": [
                    205,
                    116,
                    117,
                    175
                ],
                "frame_template.columns": [
                    117
                ],
                "results": [
                    167,
                    144,
                    145,
                    147,
                    215,
                    120,
                    154,
                    219,
                    152,
                    126,
                    127
                ],
                "pairwise": [
                    122,
                    146
                ],
                "i": [
                    167,
                    170,
                    148,
                    150,
                    152,
                    217,
                    154,
                    155,
                    125,
                    126,
                    216
                ],
                "col": [
                    142,
                    143,
                    144,
                    217,
                    125
                ],
                "arg1.columns": [
                    129,
                    170,
                    141,
                    205,
                    175,
                    148,
                    217,
                    125
                ],
                "arg1.iloc": [
                    216,
                    155,
                    126
                ],
                "arg2.iloc": [
                    155,
                    126
                ],
                "dataframe_from_int_dict": [
                    219,
                    127
                ],
                "arg1.columns.is_unique": [
                    129
                ],
                "arg2.columns.is_unique": [
                    131
                ],
                "arg2.columns": [
                    131,
                    196,
                    198,
                    167,
                    141,
                    207,
                    178,
                    180,
                    149,
                    185,
                    189
                ],
                "warnings.catch_warnings": [
                    139,
                    133
                ],
                "warnings": [
                    139,
                    140,
                    133,
                    134
                ],
                "warnings.simplefilter": [
                    140,
                    134
                ],
                "arg1.align": [
                    135
                ],
                "res_columns": [
                    145,
                    141,
                    142
                ],
                "arg1.columns.union": [
                    141
                ],
                "X.index": [
                    145
                ],
                "defaultdict": [
                    147
                ],
                "k1": [
                    148
                ],
                "j": [
                    167,
                    149,
                    150,
                    152,
                    154,
                    155
                ],
                "k2": [
                    149
                ],
                "result_index": [
                    160,
                    161,
                    207,
                    180,
                    185,
                    189
                ],
                "arg1.index.union": [
                    160
                ],
                "arg1.index": [
                    160,
                    196
                ],
                "arg2.index": [
                    160
                ],
                "concat": [
                    164,
                    166
                ],
                "c": [
                    170,
                    167
                ],
                "arg2.columns.nlevels": [
                    178
                ],
                "result.index": [
                    184,
                    179,
                    188,
                    206
                ],
                "MultiIndex.from_product": [
                    184,
                    179,
                    188
                ],
                "MultiIndex": [
                    184,
                    179,
                    188,
                    195
                ],
                "arg2.columns.levels": [
                    180
                ],
                "sort_index": [
                    187,
                    182
                ],
                "result.reorder_levels": [
                    182
                ],
                "result.swaplevel": [
                    187
                ],
                "result.columns.set_names": [
                    205
                ],
                "arg1.columns.names": [
                    205
                ],
                "result.index.set_names": [
                    206
                ],
                "result_index.names": [
                    207
                ],
                "arg2.columns.names": [
                    207
                ],
                "_flex_binary_moment": [
                    222
                ],
                "valid_count": [
                    226,
                    227
                ],
                "com.count_not_none": [
                    226
                ],
                "com": [
                    226
                ],
                "comass": [
                    226,
                    231,
                    232,
                    237,
                    242,
                    246,
                    250
                ],
                "span": [
                    226,
                    234,
                    237,
                    235
                ],
                "halflife": [
                    241,
                    226,
                    238,
                    239
                ],
                "alpha": [
                    226,
                    243,
                    244,
                    246
                ],
                "decay": [
                    241,
                    242
                ],
                "np.exp": [
                    241
                ],
                "np.log": [
                    241
                ],
                "is_integer": [
                    254
                ],
                "window": [
                    256,
                    323,
                    324,
                    282,
                    286,
                    285,
                    254,
                    255
                ],
                "min_periods": [
                    288,
                    289,
                    322,
                    291,
                    323,
                    324,
                    281,
                    282,
                    284,
                    285,
                    286,
                    287
                ],
                "required_min_periods": [
                    284
                ],
                "num_values": [
                    288,
                    287
                ],
                "floor": [
                    291
                ],
                "np.errstate": [
                    295
                ],
                "np.sqrt": [
                    296
                ],
                "mask": [
                    297,
                    300,
                    301,
                    303,
                    304
                ],
                "mask._values.any": [
                    300
                ],
                "mask._values": [
                    300
                ],
                "mask.any": [
                    303
                ],
                "cfunc": [
                    324
                ],
                "arg": [
                    324
                ],
                "func": [
                    326
                ],
                "BASEINDEXER_WHITELIST": [
                    331,
                    343
                ],
                "func_name": [
                    345,
                    346,
                    343
                ]
            }
        },
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_18/pandas/core/window/rolling.py": {
            "buggy_functions": [
                {
                    "function_name": "_apply",
                    "function_code": "def _apply(\n    self,\n    func: Callable,\n    center: bool,\n    require_min_periods: int = 0,\n    floor: int = 1,\n    is_weighted: bool = False,\n    name: Optional[str] = None,\n    use_numba_cache: bool = False,\n    **kwargs,\n):\n    \"\"\"\n    Rolling statistical measure using supplied function.\n\n    Designed to be used with passed-in Cython array-based functions.\n\n    Parameters\n    ----------\n    func : callable function to apply\n    center : bool\n    require_min_periods : int\n    floor : int\n    is_weighted : bool\n    name : str,\n        compatibility with groupby.rolling\n    use_numba_cache : bool\n        whether to cache a numba compiled function. Only available for numba\n        enabled methods (so far only apply)\n    **kwargs\n        additional arguments for rolling function and window function\n\n    Returns\n    -------\n    y : type of input\n    \"\"\"\n    win_type = self._get_win_type(kwargs)\n    window = self._get_window(win_type=win_type)\n\n    blocks, obj = self._create_blocks()\n    block_list = list(blocks)\n    window_indexer = self._get_window_indexer(window, name)\n\n    results = []\n    exclude: List[Scalar] = []\n    for i, b in enumerate(blocks):\n        try:\n            values = self._prep_values(b.values)\n\n        except (TypeError, NotImplementedError) as err:\n            if isinstance(obj, ABCDataFrame):\n                exclude.extend(b.columns)\n                del block_list[i]\n                continue\n            else:\n                raise DataError(\"No numeric types to aggregate\") from err\n\n        if values.size == 0:\n            results.append(values.copy())\n            continue\n\n        # calculation function\n        offset = calculate_center_offset(window) if center else 0\n        additional_nans = np.array([np.nan] * offset)\n\n        if not is_weighted:\n\n            def calc(x):\n                x = np.concatenate((x, additional_nans))\n                if not isinstance(window, BaseIndexer):\n                    min_periods = calculate_min_periods(\n                        window, self.min_periods, len(x), require_min_periods, floor\n                    )\n                else:\n                    min_periods = calculate_min_periods(\n                        self.min_periods or 1,\n                        self.min_periods,\n                        len(x),\n                        require_min_periods,\n                        floor,\n                    )\n                start, end = window_indexer.get_window_bounds(\n                    num_values=len(x),\n                    min_periods=self.min_periods,\n                    center=self.center,\n                    closed=self.closed,\n                )\n                return func(x, start, end, min_periods)\n\n        else:\n\n            def calc(x):\n                x = np.concatenate((x, additional_nans))\n                return func(x, window, self.min_periods)\n\n        with np.errstate(all=\"ignore\"):\n            if values.ndim > 1:\n                result = np.apply_along_axis(calc, self.axis, values)\n            else:\n                result = calc(values)\n                result = np.asarray(result)\n\n        if use_numba_cache:\n            NUMBA_FUNC_CACHE[(kwargs[\"original_func\"], \"rolling_apply\")] = func\n\n        if center:\n            result = self._center_window(result, window)\n\n        results.append(result)\n\n    return self._wrap_results(results, block_list, obj, exclude)\n",
                    "decorators": [],
                    "docstring": "Rolling statistical measure using supplied function.\n\nDesigned to be used with passed-in Cython array-based functions.\n\nParameters\n----------\nfunc : callable function to apply\ncenter : bool\nrequire_min_periods : int\nfloor : int\nis_weighted : bool\nname : str,\n    compatibility with groupby.rolling\nuse_numba_cache : bool\n    whether to cache a numba compiled function. Only available for numba\n    enabled methods (so far only apply)\n**kwargs\n    additional arguments for rolling function and window function\n\nReturns\n-------\ny : type of input",
                    "start_line": 407,
                    "variables": {
                        "Callable": [
                            409
                        ],
                        "bool": [
                            410,
                            413,
                            415
                        ],
                        "int": [
                            411,
                            412
                        ],
                        "Optional": [
                            414
                        ],
                        "str": [
                            414
                        ],
                        "win_type": [
                            442,
                            443
                        ],
                        "self._get_win_type": [
                            442
                        ],
                        "self": [
                            477,
                            481,
                            482,
                            512,
                            516,
                            453,
                            489,
                            490,
                            491,
                            499,
                            503,
                            442,
                            443,
                            445,
                            447
                        ],
                        "kwargs": [
                            442,
                            509
                        ],
                        "window": [
                            512,
                            499,
                            468,
                            475,
                            443,
                            477,
                            447
                        ],
                        "self._get_window": [
                            443
                        ],
                        "blocks": [
                            451,
                            445,
                            446
                        ],
                        "obj": [
                            456,
                            516,
                            445
                        ],
                        "self._create_blocks": [
                            445
                        ],
                        "block_list": [
                            458,
                            516,
                            446
                        ],
                        "list": [
                            446
                        ],
                        "window_indexer": [
                            487,
                            447
                        ],
                        "self._get_window_indexer": [
                            447
                        ],
                        "name": [
                            447
                        ],
                        "results": [
                            464,
                            449,
                            514,
                            516
                        ],
                        "exclude": [
                            457,
                            450,
                            516
                        ],
                        "List": [
                            450
                        ],
                        "Scalar": [
                            450
                        ],
                        "i": [
                            458,
                            451
                        ],
                        "b": [
                            457,
                            451,
                            453
                        ],
                        "enumerate": [
                            451
                        ],
                        "values": [
                            453,
                            463,
                            464,
                            502,
                            503,
                            505
                        ],
                        "self._prep_values": [
                            453
                        ],
                        "b.values": [
                            453
                        ],
                        "TypeError": [
                            455
                        ],
                        "NotImplementedError": [
                            455
                        ],
                        "isinstance": [
                            456,
                            475
                        ],
                        "ABCDataFrame": [
                            456
                        ],
                        "exclude.extend": [
                            457
                        ],
                        "b.columns": [
                            457
                        ],
                        "DataError": [
                            461
                        ],
                        "err": [
                            461
                        ],
                        "values.size": [
                            463
                        ],
                        "results.append": [
                            464,
                            514
                        ],
                        "values.copy": [
                            464
                        ],
                        "offset": [
                            468,
                            469
                        ],
                        "center": [
                            468,
                            511
                        ],
                        "calculate_center_offset": [
                            468
                        ],
                        "additional_nans": [
                            474,
                            498,
                            469
                        ],
                        "np.array": [
                            469
                        ],
                        "np": [
                            498,
                            506,
                            501,
                            469,
                            503,
                            474
                        ],
                        "np.nan": [
                            469
                        ],
                        "is_weighted": [
                            471
                        ],
                        "x": [
                            483,
                            488,
                            493,
                            498,
                            499,
                            474,
                            477
                        ],
                        "np.concatenate": [
                            474,
                            498
                        ],
                        "BaseIndexer": [
                            475
                        ],
                        "min_periods": [
                            480,
                            476,
                            493
                        ],
                        "calculate_min_periods": [
                            480,
                            476
                        ],
                        "self.min_periods": [
                            481,
                            482,
                            489,
                            499,
                            477
                        ],
                        "len": [
                            488,
                            483,
                            477
                        ],
                        "require_min_periods": [
                            484,
                            477
                        ],
                        "floor": [
                            485,
                            477
                        ],
                        "start": [
                            493,
                            487
                        ],
                        "end": [
                            493,
                            487
                        ],
                        "window_indexer.get_window_bounds": [
                            487
                        ],
                        "self.center": [
                            490
                        ],
                        "self.closed": [
                            491
                        ],
                        "func": [
                            509,
                            499,
                            493
                        ],
                        "np.errstate": [
                            501
                        ],
                        "values.ndim": [
                            502
                        ],
                        "result": [
                            512,
                            514,
                            503,
                            505,
                            506
                        ],
                        "np.apply_along_axis": [
                            503
                        ],
                        "calc": [
                            505,
                            503
                        ],
                        "self.axis": [
                            503
                        ],
                        "np.asarray": [
                            506
                        ],
                        "use_numba_cache": [
                            508
                        ],
                        "NUMBA_FUNC_CACHE": [
                            509
                        ],
                        "self._center_window": [
                            512
                        ],
                        "self._wrap_results": [
                            516
                        ]
                    },
                    "filtered_variables": {
                        "Callable": [
                            409
                        ],
                        "Optional": [
                            414
                        ],
                        "win_type": [
                            442,
                            443
                        ],
                        "self._get_win_type": [
                            442
                        ],
                        "self": [
                            477,
                            481,
                            482,
                            512,
                            516,
                            453,
                            489,
                            490,
                            491,
                            499,
                            503,
                            442,
                            443,
                            445,
                            447
                        ],
                        "kwargs": [
                            442,
                            509
                        ],
                        "window": [
                            512,
                            499,
                            468,
                            475,
                            443,
                            477,
                            447
                        ],
                        "self._get_window": [
                            443
                        ],
                        "blocks": [
                            451,
                            445,
                            446
                        ],
                        "obj": [
                            456,
                            516,
                            445
                        ],
                        "self._create_blocks": [
                            445
                        ],
                        "block_list": [
                            458,
                            516,
                            446
                        ],
                        "window_indexer": [
                            487,
                            447
                        ],
                        "self._get_window_indexer": [
                            447
                        ],
                        "name": [
                            447
                        ],
                        "results": [
                            464,
                            449,
                            514,
                            516
                        ],
                        "exclude": [
                            457,
                            450,
                            516
                        ],
                        "List": [
                            450
                        ],
                        "Scalar": [
                            450
                        ],
                        "i": [
                            458,
                            451
                        ],
                        "b": [
                            457,
                            451,
                            453
                        ],
                        "values": [
                            453,
                            463,
                            464,
                            502,
                            503,
                            505
                        ],
                        "self._prep_values": [
                            453
                        ],
                        "b.values": [
                            453
                        ],
                        "ABCDataFrame": [
                            456
                        ],
                        "exclude.extend": [
                            457
                        ],
                        "b.columns": [
                            457
                        ],
                        "DataError": [
                            461
                        ],
                        "err": [
                            461
                        ],
                        "values.size": [
                            463
                        ],
                        "results.append": [
                            464,
                            514
                        ],
                        "values.copy": [
                            464
                        ],
                        "offset": [
                            468,
                            469
                        ],
                        "center": [
                            468,
                            511
                        ],
                        "calculate_center_offset": [
                            468
                        ],
                        "additional_nans": [
                            474,
                            498,
                            469
                        ],
                        "np.array": [
                            469
                        ],
                        "np": [
                            498,
                            506,
                            501,
                            469,
                            503,
                            474
                        ],
                        "np.nan": [
                            469
                        ],
                        "is_weighted": [
                            471
                        ],
                        "x": [
                            483,
                            488,
                            493,
                            498,
                            499,
                            474,
                            477
                        ],
                        "np.concatenate": [
                            474,
                            498
                        ],
                        "BaseIndexer": [
                            475
                        ],
                        "min_periods": [
                            480,
                            476,
                            493
                        ],
                        "calculate_min_periods": [
                            480,
                            476
                        ],
                        "self.min_periods": [
                            481,
                            482,
                            489,
                            499,
                            477
                        ],
                        "require_min_periods": [
                            484,
                            477
                        ],
                        "floor": [
                            485,
                            477
                        ],
                        "start": [
                            493,
                            487
                        ],
                        "end": [
                            493,
                            487
                        ],
                        "window_indexer.get_window_bounds": [
                            487
                        ],
                        "self.center": [
                            490
                        ],
                        "self.closed": [
                            491
                        ],
                        "func": [
                            509,
                            499,
                            493
                        ],
                        "np.errstate": [
                            501
                        ],
                        "values.ndim": [
                            502
                        ],
                        "result": [
                            512,
                            514,
                            503,
                            505,
                            506
                        ],
                        "np.apply_along_axis": [
                            503
                        ],
                        "calc": [
                            505,
                            503
                        ],
                        "self.axis": [
                            503
                        ],
                        "np.asarray": [
                            506
                        ],
                        "use_numba_cache": [
                            508
                        ],
                        "NUMBA_FUNC_CACHE": [
                            509
                        ],
                        "self._center_window": [
                            512
                        ],
                        "self._wrap_results": [
                            516
                        ]
                    },
                    "diff_line_number": 475,
                    "class_data": {
                        "signature": "class _Window(PandasObject, ShallowMixin, SelectionMixin)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, obj, window=None, min_periods: Optional[int]=None, center: Optional[bool]=False, win_type: Optional[str]=None, axis: Axis=0, on: Optional[Union[str, Index]]=None, closed: Optional[str]=None, **kwargs):\n    self.__dict__.update(kwargs)\n    self.obj = obj\n    self.on = on\n    self.closed = closed\n    self.window = window\n    self.min_periods = min_periods\n    self.center = center\n    self.win_type = win_type\n    self.win_freq = None\n    self.axis = obj._get_axis_number(axis) if axis is not None else None\n    self.validate()",
                            "@property\ndef _constructor(self):\n    return Window",
                            "@property\ndef is_datetimelike(self) -> Optional[bool]:\n    return None",
                            "@property\ndef _on(self):\n    return None",
                            "@property\ndef is_freq_type(self) -> bool:\n    return self.win_type == 'freq'",
                            "def validate(self) -> None:\n    if self.center is not None and (not is_bool(self.center)):\n        raise ValueError('center must be a boolean')\n    if self.min_periods is not None and (not is_integer(self.min_periods)):\n        raise ValueError('min_periods must be an integer')\n    if self.closed is not None and self.closed not in ['right', 'both', 'left', 'neither']:\n        raise ValueError(\"closed must be 'right', 'left', 'both' or 'neither'\")\n    if not isinstance(self.obj, (ABCSeries, ABCDataFrame)):\n        raise TypeError(f'invalid type: {type(self)}')\n    if isinstance(self.window, BaseIndexer):\n        self._validate_get_window_bounds_signature(self.window)",
                            "@staticmethod\ndef _validate_get_window_bounds_signature(window: BaseIndexer) -> None:\n    \"\"\"\n    Validate that the passed BaseIndexer subclass has\n    a get_window_bounds with the correct signature.\n    \"\"\"\n    get_window_bounds_signature = inspect.signature(window.get_window_bounds).parameters.keys()\n    expected_signature = inspect.signature(BaseIndexer().get_window_bounds).parameters.keys()\n    if get_window_bounds_signature != expected_signature:\n        raise ValueError(f'{type(window).__name__} does not implement the correct signature for get_window_bounds')",
                            "def _create_blocks(self):\n    \"\"\"\n    Split data into blocks & return conformed data.\n    \"\"\"\n    obj = self._selected_obj\n    if self.on is not None and (not isinstance(self.on, Index)):\n        if obj.ndim == 2:\n            obj = obj.reindex(columns=obj.columns.difference([self.on]), copy=False)\n    blocks = obj._to_dict_of_blocks(copy=False).values()\n    return (blocks, obj)",
                            "def _gotitem(self, key, ndim, subset=None):\n    \"\"\"\n    Sub-classes to define. Return a sliced object.\n\n    Parameters\n    ----------\n    key : str / list of selections\n    ndim : 1,2\n        requested ndim of result\n    subset : object, default None\n        subset to act on\n    \"\"\"\n    if subset is None:\n        subset = self.obj\n    self = self._shallow_copy(subset)\n    self._reset_cache()\n    if subset.ndim == 2:\n        if is_scalar(key) and key in subset or is_list_like(key):\n            self._selection = key\n    return self",
                            "def __getattr__(self, attr: str):\n    if attr in self._internal_names_set:\n        return object.__getattribute__(self, attr)\n    if attr in self.obj:\n        return self[attr]\n    raise AttributeError(f\"'{type(self).__name__}' object has no attribute '{attr}'\")",
                            "def _dir_additions(self):\n    return self.obj._dir_additions()",
                            "def _get_win_type(self, kwargs: Dict):\n    \"\"\"\n    Exists for compatibility, overridden by subclass Window.\n\n    Parameters\n    ----------\n    kwargs : dict\n        ignored, exists for compatibility\n\n    Returns\n    -------\n    None\n    \"\"\"\n    return None",
                            "def _get_window(self, other=None, win_type: Optional[str]=None) -> int:\n    \"\"\"\n    Return window length.\n\n    Parameters\n    ----------\n    other :\n        ignored, exists for compatibility\n    win_type :\n        ignored, exists for compatibility\n\n    Returns\n    -------\n    window : int\n    \"\"\"\n    if isinstance(self.window, BaseIndexer):\n        return self.min_periods or 0\n    return self.window",
                            "@property\ndef _window_type(self) -> str:\n    return type(self).__name__",
                            "def __repr__(self) -> str:\n    \"\"\"\n    Provide a nice str repr of our rolling object.\n    \"\"\"\n    attrs_list = (f'{attr_name}={getattr(self, attr_name)}' for attr_name in self._attributes if getattr(self, attr_name, None) is not None)\n    attrs = ','.join(attrs_list)\n    return f'{self._window_type} [{attrs}]'",
                            "def __iter__(self):\n    url = 'https://github.com/pandas-dev/pandas/issues/11704'\n    raise NotImplementedError(f'See issue #11704 {url}')",
                            "def _prep_values(self, values: Optional[np.ndarray]=None) -> np.ndarray:\n    \"\"\"Convert input to numpy arrays for Cython routines\"\"\"\n    if values is None:\n        values = extract_array(self._selected_obj, extract_numpy=True)\n    if is_float_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif is_integer_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif needs_i8_conversion(values.dtype):\n        raise NotImplementedError(f'ops for {self._window_type} for this dtype {values.dtype} are not implemented')\n    else:\n        try:\n            values = ensure_float64(values)\n        except (ValueError, TypeError) as err:\n            raise TypeError(f'cannot handle this type -> {values.dtype}') from err\n    inf = np.isinf(values)\n    if inf.any():\n        values = np.where(inf, np.nan, values)\n    return values",
                            "def _wrap_result(self, result, block=None, obj=None):\n    \"\"\"\n    Wrap a single result.\n    \"\"\"\n    if obj is None:\n        obj = self._selected_obj\n    index = obj.index\n    if isinstance(result, np.ndarray):\n        if result.ndim == 1:\n            from pandas import Series\n            return Series(result, index, name=obj.name)\n        return type(obj)(result, index=index, columns=block.columns)\n    return result",
                            "def _wrap_results(self, results, blocks, obj, exclude=None) -> FrameOrSeries:\n    \"\"\"\n    Wrap the results.\n\n    Parameters\n    ----------\n    results : list of ndarrays\n    blocks : list of blocks\n    obj : conformed data (may be resampled)\n    exclude: list of columns to exclude, default to None\n    \"\"\"\n    from pandas import Series, concat\n    final = []\n    for result, block in zip(results, blocks):\n        result = self._wrap_result(result, block=block, obj=obj)\n        if result.ndim == 1:\n            return result\n        final.append(result)\n    columns = self._selected_obj.columns\n    if self.on is not None and (not self._on.equals(obj.index)):\n        name = self._on.name\n        final.append(Series(self._on, index=obj.index, name=name))\n        if self._selection is not None:\n            selection = ensure_index(self._selection)\n            if name not in selection:\n                columns = self.obj.columns\n                indexer = columns.get_indexer(selection.tolist() + [name])\n                columns = columns.take(sorted(indexer))\n    if exclude is not None and exclude:\n        columns = [c for c in columns if c not in exclude]\n        if not columns:\n            raise DataError('No numeric types to aggregate')\n    if not len(final):\n        return obj.astype('float64')\n    return concat(final, axis=1).reindex(columns=columns, copy=False)",
                            "def _center_window(self, result, window) -> np.ndarray:\n    \"\"\"\n    Center the result in the window.\n    \"\"\"\n    if self.axis > result.ndim - 1:\n        raise ValueError('Requested axis is larger then no. of argument dimensions')\n    offset = calculate_center_offset(window)\n    if offset > 0:\n        lead_indexer = [slice(None)] * result.ndim\n        lead_indexer[self.axis] = slice(offset, None)\n        result = np.copy(result[tuple(lead_indexer)])\n    return result",
                            "def _get_roll_func(self, func_name: str) -> Callable:\n    \"\"\"\n    Wrap rolling function to check values passed.\n\n    Parameters\n    ----------\n    func_name : str\n        Cython function used to calculate rolling statistics\n\n    Returns\n    -------\n    func : callable\n    \"\"\"\n    window_func = getattr(window_aggregations, func_name, None)\n    if window_func is None:\n        raise ValueError(f'we do not support this function in window_aggregations.{func_name}')\n    return window_func",
                            "def _get_cython_func_type(self, func: str) -> Callable:\n    \"\"\"\n    Return a variable or fixed cython function type.\n\n    Variable algorithms do not use window while fixed do.\n    \"\"\"\n    if self.is_freq_type or isinstance(self.window, BaseIndexer):\n        return self._get_roll_func(f'{func}_variable')\n    return partial(self._get_roll_func(f'{func}_fixed'), win=self._get_window())",
                            "def _get_window_indexer(self, window: int, func_name: Optional[str]) -> BaseIndexer:\n    \"\"\"\n    Return an indexer class that will compute the window start and end bounds\n    \"\"\"\n    if isinstance(self.window, BaseIndexer):\n        validate_baseindexer_support(func_name)\n        return self.window\n    if self.is_freq_type:\n        return VariableWindowIndexer(index_array=self._on.asi8, window_size=window)\n    return FixedWindowIndexer(window_size=window)",
                            "def _apply(self, func: Callable, center: bool, require_min_periods: int=0, floor: int=1, is_weighted: bool=False, name: Optional[str]=None, use_numba_cache: bool=False, **kwargs):\n    \"\"\"\n    Rolling statistical measure using supplied function.\n\n    Designed to be used with passed-in Cython array-based functions.\n\n    Parameters\n    ----------\n    func : callable function to apply\n    center : bool\n    require_min_periods : int\n    floor : int\n    is_weighted : bool\n    name : str,\n        compatibility with groupby.rolling\n    use_numba_cache : bool\n        whether to cache a numba compiled function. Only available for numba\n        enabled methods (so far only apply)\n    **kwargs\n        additional arguments for rolling function and window function\n\n    Returns\n    -------\n    y : type of input\n    \"\"\"\n    win_type = self._get_win_type(kwargs)\n    window = self._get_window(win_type=win_type)\n    blocks, obj = self._create_blocks()\n    block_list = list(blocks)\n    window_indexer = self._get_window_indexer(window, name)\n    results = []\n    exclude: List[Scalar] = []\n    for i, b in enumerate(blocks):\n        try:\n            values = self._prep_values(b.values)\n        except (TypeError, NotImplementedError) as err:\n            if isinstance(obj, ABCDataFrame):\n                exclude.extend(b.columns)\n                del block_list[i]\n                continue\n            else:\n                raise DataError('No numeric types to aggregate') from err\n        if values.size == 0:\n            results.append(values.copy())\n            continue\n        offset = calculate_center_offset(window) if center else 0\n        additional_nans = np.array([np.nan] * offset)\n        if not is_weighted:\n\n            def calc(x):\n                x = np.concatenate((x, additional_nans))\n                if not isinstance(window, BaseIndexer):\n                    min_periods = calculate_min_periods(window, self.min_periods, len(x), require_min_periods, floor)\n                else:\n                    min_periods = calculate_min_periods(self.min_periods or 1, self.min_periods, len(x), require_min_periods, floor)\n                start, end = window_indexer.get_window_bounds(num_values=len(x), min_periods=self.min_periods, center=self.center, closed=self.closed)\n                return func(x, start, end, min_periods)\n        else:\n\n            def calc(x):\n                x = np.concatenate((x, additional_nans))\n                return func(x, window, self.min_periods)\n        with np.errstate(all='ignore'):\n            if values.ndim > 1:\n                result = np.apply_along_axis(calc, self.axis, values)\n            else:\n                result = calc(values)\n                result = np.asarray(result)\n        if use_numba_cache:\n            NUMBA_FUNC_CACHE[kwargs['original_func'], 'rolling_apply'] = func\n        if center:\n            result = self._center_window(result, window)\n        results.append(result)\n    return self._wrap_results(results, block_list, obj, exclude)",
                            "def aggregate(self, func, *args, **kwargs):\n    result, how = self._aggregate(func, *args, **kwargs)\n    if result is None:\n        return self.apply(func, raw=False, args=args, kwargs=kwargs)\n    return result",
                            "def calc(x):\n    x = np.concatenate((x, additional_nans))\n    if not isinstance(window, BaseIndexer):\n        min_periods = calculate_min_periods(window, self.min_periods, len(x), require_min_periods, floor)\n    else:\n        min_periods = calculate_min_periods(self.min_periods or 1, self.min_periods, len(x), require_min_periods, floor)\n    start, end = window_indexer.get_window_bounds(num_values=len(x), min_periods=self.min_periods, center=self.center, closed=self.closed)\n    return func(x, start, end, min_periods)",
                            "def calc(x):\n    x = np.concatenate((x, additional_nans))\n    return func(x, window, self.min_periods)"
                        ],
                        "constructor_variables": [
                            "axis",
                            "win_freq",
                            "win_type",
                            "min_periods",
                            "closed",
                            "obj",
                            "window",
                            "on",
                            "center"
                        ],
                        "class_level_variables": [
                            "_attributes",
                            "exclusions",
                            "agg"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, obj, window=None, min_periods: Optional[int]=None, center: Optional[bool]=False, win_type: Optional[str]=None, axis: Axis=0, on: Optional[Union[str, Index]]=None, closed: Optional[str]=None, **kwargs)",
                            "_constructor(self)",
                            "is_datetimelike(self) -> Optional[bool]",
                            "_on(self)",
                            "is_freq_type(self) -> bool",
                            "validate(self) -> None",
                            "_validate_get_window_bounds_signature(window: BaseIndexer) -> None",
                            "_create_blocks(self)",
                            "_gotitem(self, key, ndim, subset=None)",
                            "__getattr__(self, attr: str)",
                            "_dir_additions(self)",
                            "_get_win_type(self, kwargs: Dict)",
                            "_get_window(self, other=None, win_type: Optional[str]=None) -> int",
                            "_window_type(self) -> str",
                            "__repr__(self) -> str",
                            "__iter__(self)",
                            "_prep_values(self, values: Optional[np.ndarray]=None) -> np.ndarray",
                            "_wrap_result(self, result, block=None, obj=None)",
                            "_wrap_results(self, results, blocks, obj, exclude=None) -> FrameOrSeries",
                            "_center_window(self, result, window) -> np.ndarray",
                            "_get_roll_func(self, func_name: str) -> Callable",
                            "_get_cython_func_type(self, func: str) -> Callable",
                            "_get_window_indexer(self, window: int, func_name: Optional[str]) -> BaseIndexer",
                            "_apply(self, func: Callable, center: bool, require_min_periods: int=0, floor: int=1, is_weighted: bool=False, name: Optional[str]=None, use_numba_cache: bool=False, **kwargs)",
                            "aggregate(self, func, *args, **kwargs)",
                            "calc(x)",
                            "calc(x)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "Callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "win_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_win_type": {
                                    "variable_value": "<bound method _Window._get_win_type of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x116551550>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x116551550>,min_periods=3,center=False,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "window": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_window": {
                                    "variable_value": "<bound method _Window._get_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x116551550>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._create_blocks": {
                                    "variable_value": "<bound method _Window._create_blocks of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x116551550>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "block_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "window_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_window_indexer": {
                                    "variable_value": "<bound method _Window._get_window_indexer of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x116551550>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'skew'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exclude": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._prep_values": {
                                    "variable_value": "<bound method _Window._prep_values of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x116551550>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "b.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exclude.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "offset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "calculate_center_offset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "additional_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_weighted": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BaseIndexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "min_periods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "calculate_min_periods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "require_min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "floor": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "window_indexer.get_window_bounds": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": "<built-in function roll_skew_variable>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.ndim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.apply_along_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "calc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_numba_cache": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "NUMBA_FUNC_CACHE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._center_window": {
                                    "variable_value": "<bound method _Window._center_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x116551550>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._wrap_results": {
                                    "variable_value": "<bound method _Window._wrap_results of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x116551550>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "Callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "win_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_win_type": {
                                    "variable_value": "<bound method _Window._get_win_type of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "window": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_window": {
                                    "variable_value": "<bound method _Window._get_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._create_blocks": {
                                    "variable_value": "<bound method _Window._create_blocks of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "block_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "window_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_window_indexer": {
                                    "variable_value": "<bound method _Window._get_window_indexer of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'skew'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exclude": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._prep_values": {
                                    "variable_value": "<bound method _Window._prep_values of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "b.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exclude.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "offset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "calculate_center_offset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "additional_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_weighted": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.window": {
                                    "variable_value": "<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>",
                                    "variable_type": "FixedForwardWindowIndexer",
                                    "variable_shape": null
                                },
                                "BaseIndexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "min_periods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "calculate_min_periods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "require_min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "floor": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "window_indexer.window_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "window_indexer.get_window_bounds": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": "<built-in function roll_skew_variable>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.ndim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.apply_along_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "calc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_numba_cache": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "NUMBA_FUNC_CACHE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._center_window": {
                                    "variable_value": "<bound method _Window._center_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._wrap_results": {
                                    "variable_value": "<bound method _Window._wrap_results of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "win_type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_win_type": {
                                    "variable_value": "<bound method _Window._get_win_type of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "window": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_window": {
                                    "variable_value": "<bound method _Window._get_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "blocks": {
                                    "variable_value": "dict_values([0      0\n1      1\n2      2\n3      3\n4      4\n5    100\n6      6\n7      7\n8      8\n9      9\ndtype: int64])",
                                    "variable_type": "dict_values",
                                    "variable_shape": "1"
                                },
                                "obj": {
                                    "variable_value": "0      0\n1      1\n2      2\n3      3\n4      4\n5    100\n6      6\n7      7\n8      8\n9      9\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "10"
                                },
                                "self._create_blocks": {
                                    "variable_value": "<bound method _Window._create_blocks of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "block_list": {
                                    "variable_value": "[0      0\n1      1\n2      2\n3      3\n4      4\n5    100\n6      6\n7      7\n8      8\n9      9\ndtype: int64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "window_indexer": {
                                    "variable_value": "<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>",
                                    "variable_type": "FixedForwardWindowIndexer",
                                    "variable_shape": null
                                },
                                "self._get_window_indexer": {
                                    "variable_value": "<bound method _Window._get_window_indexer of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'skew'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "results": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "exclude": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": "0      0\n1      1\n2      2\n3      3\n4      4\n5    100\n6      6\n7      7\n8      8\n9      9\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "10"
                                },
                                "values": {
                                    "variable_value": "array([  0.,   1.,   2.,   3.,   4., 100.,   6.,   7.,   8.,   9.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "self._prep_values": {
                                    "variable_value": "<bound method _Window._prep_values of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "b.values": {
                                    "variable_value": "array([  0,   1,   2,   3,   4, 100,   6,   7,   8,   9])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exclude.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x11209e640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "b.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DataError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "results.append": {
                                    "variable_value": "<built-in method append of list object at 0x11209d380>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "values.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x1120967b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "offset": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "calculate_center_offset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "additional_nans": {
                                    "variable_value": "array([], dtype=float64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "0"
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_weighted": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([  0.,   1.,   2.,   3.,   4., 100.,   6.,   7.,   8.,   9.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.window": {
                                    "variable_value": "<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>",
                                    "variable_type": "FixedForwardWindowIndexer",
                                    "variable_shape": null
                                },
                                "BaseIndexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "calculate_min_periods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "require_min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "floor": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "window_indexer.window_size": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "end": {
                                    "variable_value": "array([ 5,  6,  7,  8,  9, 10, 10, 10, 10, 10])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "window_indexer.get_window_bounds": {
                                    "variable_value": "<bound method FixedForwardWindowIndexer.get_window_bounds of <pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": "<built-in function roll_skew_variable>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.apply_along_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "calc": {
                                    "variable_value": "<function _Window._apply.<locals>.calc at 0x1120b5310>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_numba_cache": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "NUMBA_FUNC_CACHE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._center_window": {
                                    "variable_value": "<bound method _Window._center_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._wrap_results": {
                                    "variable_value": "<bound method _Window._wrap_results of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "win_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_win_type": {
                                    "variable_value": "<bound method _Window._get_win_type of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "window": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_window": {
                                    "variable_value": "<bound method _Window._get_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._create_blocks": {
                                    "variable_value": "<bound method _Window._create_blocks of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "block_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "window_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_window_indexer": {
                                    "variable_value": "<bound method _Window._get_window_indexer of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'skew'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exclude": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._prep_values": {
                                    "variable_value": "<bound method _Window._prep_values of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "b.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exclude.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "offset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "calculate_center_offset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "additional_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_weighted": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.window": {
                                    "variable_value": "<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>",
                                    "variable_type": "FixedForwardWindowIndexer",
                                    "variable_shape": null
                                },
                                "BaseIndexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "min_periods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "calculate_min_periods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "require_min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "floor": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "window_indexer.window_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "window_indexer.get_window_bounds": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": "<built-in function roll_skew_variable>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.ndim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.apply_along_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "calc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_numba_cache": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "NUMBA_FUNC_CACHE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._center_window": {
                                    "variable_value": "<bound method _Window._center_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._wrap_results": {
                                    "variable_value": "<bound method _Window._wrap_results of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "win_type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_win_type": {
                                    "variable_value": "<bound method _Window._get_win_type of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "window": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_window": {
                                    "variable_value": "<bound method _Window._get_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "blocks": {
                                    "variable_value": "dict_values([0      0\n1      1\n2      2\n3      3\n4      4\n5    100\n6      6\n7      7\n8      8\n9      9\ndtype: int64])",
                                    "variable_type": "dict_values",
                                    "variable_shape": "1"
                                },
                                "obj": {
                                    "variable_value": "0      0\n1      1\n2      2\n3      3\n4      4\n5    100\n6      6\n7      7\n8      8\n9      9\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "10"
                                },
                                "self._create_blocks": {
                                    "variable_value": "<bound method _Window._create_blocks of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "block_list": {
                                    "variable_value": "[0      0\n1      1\n2      2\n3      3\n4      4\n5    100\n6      6\n7      7\n8      8\n9      9\ndtype: int64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "window_indexer": {
                                    "variable_value": "<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>",
                                    "variable_type": "FixedForwardWindowIndexer",
                                    "variable_shape": null
                                },
                                "self._get_window_indexer": {
                                    "variable_value": "<bound method _Window._get_window_indexer of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'skew'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "results": {
                                    "variable_value": "[array([ 0.00000000e+00,  2.23239591e+00,  2.22950785e+00,  2.22833981e+00,\n        2.22909125e+00,  2.23198860e+00,  0.00000000e+00, -5.11590770e-13,\n                   nan,             nan])]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "exclude": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": "0      0\n1      1\n2      2\n3      3\n4      4\n5    100\n6      6\n7      7\n8      8\n9      9\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "10"
                                },
                                "values": {
                                    "variable_value": "array([  0.,   1.,   2.,   3.,   4., 100.,   6.,   7.,   8.,   9.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "self._prep_values": {
                                    "variable_value": "<bound method _Window._prep_values of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "b.values": {
                                    "variable_value": "array([  0,   1,   2,   3,   4, 100,   6,   7,   8,   9])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exclude.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x11209e640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "b.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DataError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "results.append": {
                                    "variable_value": "<built-in method append of list object at 0x11209d380>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "values.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x1120967b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "offset": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "calculate_center_offset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "additional_nans": {
                                    "variable_value": "array([], dtype=float64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "0"
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_weighted": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.window": {
                                    "variable_value": "<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>",
                                    "variable_type": "FixedForwardWindowIndexer",
                                    "variable_shape": null
                                },
                                "BaseIndexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "min_periods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "calculate_min_periods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "require_min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "floor": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "window_indexer.window_size": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "window_indexer.get_window_bounds": {
                                    "variable_value": "<bound method FixedForwardWindowIndexer.get_window_bounds of <pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": "<built-in function roll_skew_variable>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "array([ 0.00000000e+00,  2.23239591e+00,  2.22950785e+00,  2.22833981e+00,\n        2.22909125e+00,  2.23198860e+00,  0.00000000e+00, -5.11590770e-13,\n                   nan,             nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "np.apply_along_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "calc": {
                                    "variable_value": "<function _Window._apply.<locals>.calc at 0x1120b5310>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_numba_cache": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "NUMBA_FUNC_CACHE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._center_window": {
                                    "variable_value": "<bound method _Window._center_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._wrap_results": {
                                    "variable_value": "<bound method _Window._wrap_results of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x112007fa0>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "win_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_win_type": {
                                    "variable_value": "<bound method _Window._get_win_type of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "window": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_window": {
                                    "variable_value": "<bound method _Window._get_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._create_blocks": {
                                    "variable_value": "<bound method _Window._create_blocks of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "block_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "window_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_window_indexer": {
                                    "variable_value": "<bound method _Window._get_window_indexer of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'skew'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exclude": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._prep_values": {
                                    "variable_value": "<bound method _Window._prep_values of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "b.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exclude.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "offset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "calculate_center_offset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "additional_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_weighted": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.window": {
                                    "variable_value": "<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>",
                                    "variable_type": "FixedForwardWindowIndexer",
                                    "variable_shape": null
                                },
                                "BaseIndexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "min_periods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "calculate_min_periods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "require_min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "floor": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "window_indexer.window_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "window_indexer.get_window_bounds": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": "<built-in function roll_skew_variable>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.ndim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.apply_along_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "calc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_numba_cache": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "NUMBA_FUNC_CACHE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._center_window": {
                                    "variable_value": "<bound method _Window._center_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._wrap_results": {
                                    "variable_value": "<bound method _Window._wrap_results of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "win_type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_win_type": {
                                    "variable_value": "<bound method _Window._get_win_type of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "window": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_window": {
                                    "variable_value": "<bound method _Window._get_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "blocks": {
                                    "variable_value": "dict_values([     0\n0    0\n1    1\n2    2\n3    3\n4    4\n5  100\n6    6\n7    7\n8    8\n9    9])",
                                    "variable_type": "dict_values",
                                    "variable_shape": "1"
                                },
                                "obj": {
                                    "variable_value": "     0\n0    0\n1    1\n2    2\n3    3\n4    4\n5  100\n6    6\n7    7\n8    8\n9    9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "10"
                                },
                                "self._create_blocks": {
                                    "variable_value": "<bound method _Window._create_blocks of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "block_list": {
                                    "variable_value": "[     0\n0    0\n1    1\n2    2\n3    3\n4    4\n5  100\n6    6\n7    7\n8    8\n9    9]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "window_indexer": {
                                    "variable_value": "<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>",
                                    "variable_type": "FixedForwardWindowIndexer",
                                    "variable_shape": null
                                },
                                "self._get_window_indexer": {
                                    "variable_value": "<bound method _Window._get_window_indexer of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'skew'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "results": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "exclude": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": "     0\n0    0\n1    1\n2    2\n3    3\n4    4\n5  100\n6    6\n7    7\n8    8\n9    9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "10"
                                },
                                "values": {
                                    "variable_value": "array([[  0.],\n       [  1.],\n       [  2.],\n       [  3.],\n       [  4.],\n       [100.],\n       [  6.],\n       [  7.],\n       [  8.],\n       [  9.]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "self._prep_values": {
                                    "variable_value": "<bound method _Window._prep_values of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "b.values": {
                                    "variable_value": "array([[  0],\n       [  1],\n       [  2],\n       [  3],\n       [  4],\n       [100],\n       [  6],\n       [  7],\n       [  8],\n       [  9]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exclude.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x11209d6c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "b.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "DataError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "results.append": {
                                    "variable_value": "<built-in method append of list object at 0x1120903c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "values.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x1120a2df0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "offset": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "calculate_center_offset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "additional_nans": {
                                    "variable_value": "array([], dtype=float64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "0"
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_weighted": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([  0.,   1.,   2.,   3.,   4., 100.,   6.,   7.,   8.,   9.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.window": {
                                    "variable_value": "<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>",
                                    "variable_type": "FixedForwardWindowIndexer",
                                    "variable_shape": null
                                },
                                "BaseIndexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "calculate_min_periods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "require_min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "floor": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "window_indexer.window_size": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "end": {
                                    "variable_value": "array([ 5,  6,  7,  8,  9, 10, 10, 10, 10, 10])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "window_indexer.get_window_bounds": {
                                    "variable_value": "<bound method FixedForwardWindowIndexer.get_window_bounds of <pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": "<built-in function roll_skew_variable>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.apply_along_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "calc": {
                                    "variable_value": "<function _Window._apply.<locals>.calc at 0x1120dd0d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_numba_cache": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "NUMBA_FUNC_CACHE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._center_window": {
                                    "variable_value": "<bound method _Window._center_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._wrap_results": {
                                    "variable_value": "<bound method _Window._wrap_results of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "win_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_win_type": {
                                    "variable_value": "<bound method _Window._get_win_type of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "window": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_window": {
                                    "variable_value": "<bound method _Window._get_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._create_blocks": {
                                    "variable_value": "<bound method _Window._create_blocks of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "block_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "window_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_window_indexer": {
                                    "variable_value": "<bound method _Window._get_window_indexer of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'skew'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exclude": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._prep_values": {
                                    "variable_value": "<bound method _Window._prep_values of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "b.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exclude.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "results.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "offset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "calculate_center_offset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "additional_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_weighted": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.window": {
                                    "variable_value": "<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>",
                                    "variable_type": "FixedForwardWindowIndexer",
                                    "variable_shape": null
                                },
                                "BaseIndexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "min_periods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "calculate_min_periods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "require_min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "floor": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "window_indexer.window_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "window_indexer.get_window_bounds": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": "<built-in function roll_skew_variable>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.ndim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.apply_along_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "calc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_numba_cache": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "NUMBA_FUNC_CACHE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._center_window": {
                                    "variable_value": "<bound method _Window._center_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._wrap_results": {
                                    "variable_value": "<bound method _Window._wrap_results of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "win_type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_win_type": {
                                    "variable_value": "<bound method _Window._get_win_type of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "window": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_window": {
                                    "variable_value": "<bound method _Window._get_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "blocks": {
                                    "variable_value": "dict_values([     0\n0    0\n1    1\n2    2\n3    3\n4    4\n5  100\n6    6\n7    7\n8    8\n9    9])",
                                    "variable_type": "dict_values",
                                    "variable_shape": "1"
                                },
                                "obj": {
                                    "variable_value": "     0\n0    0\n1    1\n2    2\n3    3\n4    4\n5  100\n6    6\n7    7\n8    8\n9    9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "10"
                                },
                                "self._create_blocks": {
                                    "variable_value": "<bound method _Window._create_blocks of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "block_list": {
                                    "variable_value": "[     0\n0    0\n1    1\n2    2\n3    3\n4    4\n5  100\n6    6\n7    7\n8    8\n9    9]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "window_indexer": {
                                    "variable_value": "<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>",
                                    "variable_type": "FixedForwardWindowIndexer",
                                    "variable_shape": null
                                },
                                "self._get_window_indexer": {
                                    "variable_value": "<bound method _Window._get_window_indexer of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'skew'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "results": {
                                    "variable_value": "[array([[ 0.00000000e+00],\n       [ 2.23239591e+00],\n       [ 2.22950785e+00],\n       [ 2.22833981e+00],\n       [ 2.22909125e+00],\n       [ 2.23198860e+00],\n       [ 0.00000000e+00],\n       [-5.11590770e-13],\n       [            nan],\n       [            nan]])]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "exclude": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": "     0\n0    0\n1    1\n2    2\n3    3\n4    4\n5  100\n6    6\n7    7\n8    8\n9    9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "10"
                                },
                                "values": {
                                    "variable_value": "array([[  0.],\n       [  1.],\n       [  2.],\n       [  3.],\n       [  4.],\n       [100.],\n       [  6.],\n       [  7.],\n       [  8.],\n       [  9.]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "self._prep_values": {
                                    "variable_value": "<bound method _Window._prep_values of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "b.values": {
                                    "variable_value": "array([[  0],\n       [  1],\n       [  2],\n       [  3],\n       [  4],\n       [100],\n       [  6],\n       [  7],\n       [  8],\n       [  9]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exclude.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x11209d6c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "b.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "DataError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "results.append": {
                                    "variable_value": "<built-in method append of list object at 0x1120903c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "values.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x1120a2df0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "offset": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "calculate_center_offset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "additional_nans": {
                                    "variable_value": "array([], dtype=float64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "0"
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_weighted": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.window": {
                                    "variable_value": "<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>",
                                    "variable_type": "FixedForwardWindowIndexer",
                                    "variable_shape": null
                                },
                                "BaseIndexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "min_periods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "calculate_min_periods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "require_min_periods": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "floor": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "window_indexer.window_size": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "window_indexer.get_window_bounds": {
                                    "variable_value": "<bound method FixedForwardWindowIndexer.get_window_bounds of <pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": "<built-in function roll_skew_variable>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "array([[ 0.00000000e+00],\n       [ 2.23239591e+00],\n       [ 2.22950785e+00],\n       [ 2.22833981e+00],\n       [ 2.22909125e+00],\n       [ 2.23198860e+00],\n       [ 0.00000000e+00],\n       [-5.11590770e-13],\n       [            nan],\n       [            nan]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "np.apply_along_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "calc": {
                                    "variable_value": "<function _Window._apply.<locals>.calc at 0x1120dd0d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_numba_cache": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "NUMBA_FUNC_CACHE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._center_window": {
                                    "variable_value": "<bound method _Window._center_window of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._wrap_results": {
                                    "variable_value": "<bound method _Window._wrap_results of Rolling [window=<pandas.core.window.indexers.FixedForwardWindowIndexer object at 0x1120a0250>,min_periods=3,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def __init__(\n    self,\n    obj,\n    window=None,\n    min_periods: Optional[int] = None,\n    center: Optional[bool] = False,\n    win_type: Optional[str] = None,\n    axis: Axis = 0,\n    on: Optional[Union[str, Index]] = None,\n    closed: Optional[str] = None,\n    **kwargs,\n):\n\n    self.__dict__.update(kwargs)\n    self.obj = obj\n    self.on = on\n    self.closed = closed\n    self.window = window\n    self.min_periods = min_periods\n    self.center = center\n    self.win_type = win_type\n    self.win_freq = None\n    self.axis = obj._get_axis_number(axis) if axis is not None else None\n    self.validate()",
                "@property\ndef _constructor(self):\n    return Window",
                "@property\ndef is_datetimelike(self) -> Optional[bool]:\n    return None",
                "@property\ndef _on(self):\n    return None",
                "@property\ndef is_freq_type(self) -> bool:\n    return self.win_type == \"freq\"",
                "def validate(self) -> None:\n    if self.center is not None and not is_bool(self.center):\n        raise ValueError(\"center must be a boolean\")\n    if self.min_periods is not None and not is_integer(self.min_periods):\n        raise ValueError(\"min_periods must be an integer\")\n    if self.closed is not None and self.closed not in [\n        \"right\",\n        \"both\",\n        \"left\",\n        \"neither\",\n    ]:\n        raise ValueError(\"closed must be 'right', 'left', 'both' or 'neither'\")\n    if not isinstance(self.obj, (ABCSeries, ABCDataFrame)):\n        raise TypeError(f\"invalid type: {type(self)}\")\n    if isinstance(self.window, BaseIndexer):\n        self._validate_get_window_bounds_signature(self.window)",
                "@staticmethod\ndef _validate_get_window_bounds_signature(window: BaseIndexer) -> None:\n    \"\"\"\n    Validate that the passed BaseIndexer subclass has\n    a get_window_bounds with the correct signature.\n    \"\"\"\n    get_window_bounds_signature = inspect.signature(\n        window.get_window_bounds\n    ).parameters.keys()\n    expected_signature = inspect.signature(\n        BaseIndexer().get_window_bounds\n    ).parameters.keys()\n    if get_window_bounds_signature != expected_signature:\n        raise ValueError(\n            f\"{type(window).__name__} does not implement the correct signature for \"\n            f\"get_window_bounds\"\n        )",
                "def _create_blocks(self):\n    \"\"\"\n    Split data into blocks & return conformed data.\n    \"\"\"\n    obj = self._selected_obj\n\n    # filter out the on from the object\n    if self.on is not None and not isinstance(self.on, Index):\n        if obj.ndim == 2:\n            obj = obj.reindex(columns=obj.columns.difference([self.on]), copy=False)\n    blocks = obj._to_dict_of_blocks(copy=False).values()\n\n    return blocks, obj",
                "def _gotitem(self, key, ndim, subset=None):\n    \"\"\"\n    Sub-classes to define. Return a sliced object.\n\n    Parameters\n    ----------\n    key : str / list of selections\n    ndim : 1,2\n        requested ndim of result\n    subset : object, default None\n        subset to act on\n    \"\"\"\n    # create a new object to prevent aliasing\n    if subset is None:\n        subset = self.obj\n    self = self._shallow_copy(subset)\n    self._reset_cache()\n    if subset.ndim == 2:\n        if is_scalar(key) and key in subset or is_list_like(key):\n            self._selection = key\n    return self",
                "def __getattr__(self, attr: str):\n    if attr in self._internal_names_set:\n        return object.__getattribute__(self, attr)\n    if attr in self.obj:\n        return self[attr]\n\n    raise AttributeError(\n        f\"'{type(self).__name__}' object has no attribute '{attr}'\"\n    )",
                "def _dir_additions(self):\n    return self.obj._dir_additions()",
                "def _get_win_type(self, kwargs: Dict):\n    \"\"\"\n    Exists for compatibility, overridden by subclass Window.\n\n    Parameters\n    ----------\n    kwargs : dict\n        ignored, exists for compatibility\n\n    Returns\n    -------\n    None\n    \"\"\"\n    return None",
                "def _get_window(self, other=None, win_type: Optional[str] = None) -> int:\n    \"\"\"\n    Return window length.\n\n    Parameters\n    ----------\n    other :\n        ignored, exists for compatibility\n    win_type :\n        ignored, exists for compatibility\n\n    Returns\n    -------\n    window : int\n    \"\"\"\n    if isinstance(self.window, BaseIndexer):\n        return self.min_periods or 0\n    return self.window",
                "@property\ndef _window_type(self) -> str:\n    return type(self).__name__",
                "def __repr__(self) -> str:\n    \"\"\"\n    Provide a nice str repr of our rolling object.\n    \"\"\"\n    attrs_list = (\n        f\"{attr_name}={getattr(self, attr_name)}\"\n        for attr_name in self._attributes\n        if getattr(self, attr_name, None) is not None\n    )\n    attrs = \",\".join(attrs_list)\n    return f\"{self._window_type} [{attrs}]\"",
                "def __iter__(self):\n    url = \"https://github.com/pandas-dev/pandas/issues/11704\"\n    raise NotImplementedError(f\"See issue #11704 {url}\")",
                "def _prep_values(self, values: Optional[np.ndarray] = None) -> np.ndarray:\n    \"\"\"Convert input to numpy arrays for Cython routines\"\"\"\n    if values is None:\n        values = extract_array(self._selected_obj, extract_numpy=True)\n\n    # GH #12373 : rolling functions error on float32 data\n    # make sure the data is coerced to float64\n    if is_float_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif is_integer_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif needs_i8_conversion(values.dtype):\n        raise NotImplementedError(\n            f\"ops for {self._window_type} for this \"\n            f\"dtype {values.dtype} are not implemented\"\n        )\n    else:\n        try:\n            values = ensure_float64(values)\n        except (ValueError, TypeError) as err:\n            raise TypeError(f\"cannot handle this type -> {values.dtype}\") from err\n\n    # Convert inf to nan for C funcs\n    inf = np.isinf(values)\n    if inf.any():\n        values = np.where(inf, np.nan, values)\n\n    return values",
                "def _wrap_result(self, result, block=None, obj=None):\n    \"\"\"\n    Wrap a single result.\n    \"\"\"\n    if obj is None:\n        obj = self._selected_obj\n    index = obj.index\n\n    if isinstance(result, np.ndarray):\n\n        if result.ndim == 1:\n            from pandas import Series\n\n            return Series(result, index, name=obj.name)\n\n        return type(obj)(result, index=index, columns=block.columns)\n    return result",
                "def _wrap_results(self, results, blocks, obj, exclude=None) -> FrameOrSeries:\n    \"\"\"\n    Wrap the results.\n\n    Parameters\n    ----------\n    results : list of ndarrays\n    blocks : list of blocks\n    obj : conformed data (may be resampled)\n    exclude: list of columns to exclude, default to None\n    \"\"\"\n    from pandas import Series, concat\n\n    final = []\n    for result, block in zip(results, blocks):\n\n        result = self._wrap_result(result, block=block, obj=obj)\n        if result.ndim == 1:\n            return result\n        final.append(result)\n\n    # if we have an 'on' column\n    # we want to put it back into the results\n    # in the same location\n    columns = self._selected_obj.columns\n    if self.on is not None and not self._on.equals(obj.index):\n\n        name = self._on.name\n        final.append(Series(self._on, index=obj.index, name=name))\n\n        if self._selection is not None:\n\n            selection = ensure_index(self._selection)\n\n            # need to reorder to include original location of\n            # the on column (if its not already there)\n            if name not in selection:\n                columns = self.obj.columns\n                indexer = columns.get_indexer(selection.tolist() + [name])\n                columns = columns.take(sorted(indexer))\n\n    # exclude nuisance columns so that they are not reindexed\n    if exclude is not None and exclude:\n        columns = [c for c in columns if c not in exclude]\n\n        if not columns:\n            raise DataError(\"No numeric types to aggregate\")\n\n    if not len(final):\n        return obj.astype(\"float64\")\n    return concat(final, axis=1).reindex(columns=columns, copy=False)",
                "def _center_window(self, result, window) -> np.ndarray:\n    \"\"\"\n    Center the result in the window.\n    \"\"\"\n    if self.axis > result.ndim - 1:\n        raise ValueError(\"Requested axis is larger then no. of argument dimensions\")\n\n    offset = calculate_center_offset(window)\n    if offset > 0:\n        lead_indexer = [slice(None)] * result.ndim\n        lead_indexer[self.axis] = slice(offset, None)\n        result = np.copy(result[tuple(lead_indexer)])\n    return result",
                "def _get_roll_func(self, func_name: str) -> Callable:\n    \"\"\"\n    Wrap rolling function to check values passed.\n\n    Parameters\n    ----------\n    func_name : str\n        Cython function used to calculate rolling statistics\n\n    Returns\n    -------\n    func : callable\n    \"\"\"\n    window_func = getattr(window_aggregations, func_name, None)\n    if window_func is None:\n        raise ValueError(\n            f\"we do not support this function in window_aggregations.{func_name}\"\n        )\n    return window_func",
                "def _get_cython_func_type(self, func: str) -> Callable:\n    \"\"\"\n    Return a variable or fixed cython function type.\n\n    Variable algorithms do not use window while fixed do.\n    \"\"\"\n    if self.is_freq_type or isinstance(self.window, BaseIndexer):\n        return self._get_roll_func(f\"{func}_variable\")\n    return partial(self._get_roll_func(f\"{func}_fixed\"), win=self._get_window())",
                "def _get_window_indexer(self, window: int, func_name: Optional[str]) -> BaseIndexer:\n    \"\"\"\n    Return an indexer class that will compute the window start and end bounds\n    \"\"\"\n    if isinstance(self.window, BaseIndexer):\n        validate_baseindexer_support(func_name)\n        return self.window\n    if self.is_freq_type:\n        return VariableWindowIndexer(index_array=self._on.asi8, window_size=window)\n    return FixedWindowIndexer(window_size=window)",
                "def _apply(\n    self,\n    func: Callable,\n    center: bool,\n    require_min_periods: int = 0,\n    floor: int = 1,\n    is_weighted: bool = False,\n    name: Optional[str] = None,\n    use_numba_cache: bool = False,\n    **kwargs,\n):\n    \"\"\"\n    Rolling statistical measure using supplied function.\n\n    Designed to be used with passed-in Cython array-based functions.\n\n    Parameters\n    ----------\n    func : callable function to apply\n    center : bool\n    require_min_periods : int\n    floor : int\n    is_weighted : bool\n    name : str,\n        compatibility with groupby.rolling\n    use_numba_cache : bool\n        whether to cache a numba compiled function. Only available for numba\n        enabled methods (so far only apply)\n    **kwargs\n        additional arguments for rolling function and window function\n\n    Returns\n    -------\n    y : type of input\n    \"\"\"\n    win_type = self._get_win_type(kwargs)\n    window = self._get_window(win_type=win_type)\n\n    blocks, obj = self._create_blocks()\n    block_list = list(blocks)\n    window_indexer = self._get_window_indexer(window, name)\n\n    results = []\n    exclude: List[Scalar] = []\n    for i, b in enumerate(blocks):\n        try:\n            values = self._prep_values(b.values)\n\n        except (TypeError, NotImplementedError) as err:\n            if isinstance(obj, ABCDataFrame):\n                exclude.extend(b.columns)\n                del block_list[i]\n                continue\n            else:\n                raise DataError(\"No numeric types to aggregate\") from err\n\n        if values.size == 0:\n            results.append(values.copy())\n            continue\n\n        # calculation function\n        offset = calculate_center_offset(window) if center else 0\n        additional_nans = np.array([np.nan] * offset)\n\n        if not is_weighted:\n\n            def calc(x):\n                x = np.concatenate((x, additional_nans))\n                if not isinstance(window, BaseIndexer):\n                    min_periods = calculate_min_periods(\n                        window, self.min_periods, len(x), require_min_periods, floor\n                    )\n                else:\n                    min_periods = calculate_min_periods(\n                        self.min_periods or 1,\n                        self.min_periods,\n                        len(x),\n                        require_min_periods,\n                        floor,\n                    )\n                start, end = window_indexer.get_window_bounds(\n                    num_values=len(x),\n                    min_periods=self.min_periods,\n                    center=self.center,\n                    closed=self.closed,\n                )\n                return func(x, start, end, min_periods)\n\n        else:\n\n            def calc(x):\n                x = np.concatenate((x, additional_nans))\n                return func(x, window, self.min_periods)\n\n        with np.errstate(all=\"ignore\"):\n            if values.ndim > 1:\n                result = np.apply_along_axis(calc, self.axis, values)\n            else:\n                result = calc(values)\n                result = np.asarray(result)\n\n        if use_numba_cache:\n            NUMBA_FUNC_CACHE[(kwargs[\"original_func\"], \"rolling_apply\")] = func\n\n        if center:\n            result = self._center_window(result, window)\n\n        results.append(result)\n\n    return self._wrap_results(results, block_list, obj, exclude)",
                "def aggregate(self, func, *args, **kwargs):\n    result, how = self._aggregate(func, *args, **kwargs)\n    if result is None:\n        return self.apply(func, raw=False, args=args, kwargs=kwargs)\n    return result",
                "def validate(self):\n    super().validate()\n\n    window = self.window\n    if isinstance(window, BaseIndexer):\n        raise NotImplementedError(\n            \"BaseIndexer subclasses not implemented with win_types.\"\n        )\n    elif isinstance(window, (list, tuple, np.ndarray)):\n        pass\n    elif is_integer(window):\n        if window <= 0:\n            raise ValueError(\"window must be > 0 \")\n        import_optional_dependency(\n            \"scipy\", extra=\"Scipy is required to generate window weight.\"\n        )\n        import scipy.signal as sig\n\n        if not isinstance(self.win_type, str):\n            raise ValueError(f\"Invalid win_type {self.win_type}\")\n        if getattr(sig, self.win_type, None) is None:\n            raise ValueError(f\"Invalid win_type {self.win_type}\")\n    else:\n        raise ValueError(f\"Invalid window {window}\")",
                "def _get_win_type(self, kwargs: Dict) -> Union[str, Tuple]:\n    \"\"\"\n    Extract arguments for the window type, provide validation for it\n    and return the validated window type.\n\n    Parameters\n    ----------\n    kwargs : dict\n\n    Returns\n    -------\n    win_type : str, or tuple\n    \"\"\"\n    # the below may pop from kwargs\n    def _validate_win_type(win_type, kwargs):\n        arg_map = {\n            \"kaiser\": [\"beta\"],\n            \"gaussian\": [\"std\"],\n            \"general_gaussian\": [\"power\", \"width\"],\n            \"slepian\": [\"width\"],\n            \"exponential\": [\"tau\"],\n        }\n\n        if win_type in arg_map:\n            win_args = _pop_args(win_type, arg_map[win_type], kwargs)\n            if win_type == \"exponential\":\n                # exponential window requires the first arg (center)\n                # to be set to None (necessary for symmetric window)\n                win_args.insert(0, None)\n\n            return tuple([win_type] + win_args)\n\n        return win_type\n\n    def _pop_args(win_type, arg_names, kwargs):\n        all_args = []\n        for n in arg_names:\n            if n not in kwargs:\n                raise ValueError(f\"{win_type} window requires {n}\")\n            all_args.append(kwargs.pop(n))\n        return all_args\n\n    return _validate_win_type(self.win_type, kwargs)",
                "def _get_window(\n    self, other=None, win_type: Optional[Union[str, Tuple]] = None\n) -> np.ndarray:\n    \"\"\"\n    Get the window, weights.\n\n    Parameters\n    ----------\n    other :\n        ignored, exists for compatibility\n    win_type : str, or tuple\n        type of window to create\n\n    Returns\n    -------\n    window : ndarray\n        the window, weights\n    \"\"\"\n    window = self.window\n    if isinstance(window, (list, tuple, np.ndarray)):\n        return com.asarray_tuplesafe(window).astype(float)\n    elif is_integer(window):\n        import scipy.signal as sig\n\n        # GH #15662. `False` makes symmetric window, rather than periodic.\n        return sig.get_window(win_type, window, False).astype(float)",
                "@Substitution(\n    see_also=_agg_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\",\n    klass=\"Series/DataFrame\",\n    axis=\"\",\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, func, *args, **kwargs):\n    result, how = self._aggregate(func, *args, **kwargs)\n    if result is None:\n\n        # these must apply directly\n        result = func(self)\n\n    return result",
                "@Substitution(name=\"window\")\n@Appender(_shared_docs[\"sum\"])\ndef sum(self, *args, **kwargs):\n    nv.validate_window_func(\"sum\", args, kwargs)\n    window_func = self._get_roll_func(\"roll_weighted_sum\")\n    window_func = get_weighted_roll_func(window_func)\n    return self._apply(\n        window_func, center=self.center, is_weighted=True, name=\"sum\", **kwargs\n    )",
                "@Substitution(name=\"window\")\n@Appender(_shared_docs[\"mean\"])\ndef mean(self, *args, **kwargs):\n    nv.validate_window_func(\"mean\", args, kwargs)\n    window_func = self._get_roll_func(\"roll_weighted_mean\")\n    window_func = get_weighted_roll_func(window_func)\n    return self._apply(\n        window_func, center=self.center, is_weighted=True, name=\"mean\", **kwargs\n    )",
                "@Substitution(name=\"window\", versionadded=\"\\n.. versionadded:: 1.0.0\\n\")\n@Appender(_shared_docs[\"var\"])\ndef var(self, ddof=1, *args, **kwargs):\n    nv.validate_window_func(\"var\", args, kwargs)\n    window_func = partial(self._get_roll_func(\"roll_weighted_var\"), ddof=ddof)\n    window_func = get_weighted_roll_func(window_func)\n    kwargs.pop(\"name\", None)\n    return self._apply(\n        window_func, center=self.center, is_weighted=True, name=\"var\", **kwargs\n    )",
                "@Substitution(name=\"window\", versionadded=\"\\n.. versionadded:: 1.0.0\\n\")\n@Appender(_shared_docs[\"std\"])\ndef std(self, ddof=1, *args, **kwargs):\n    nv.validate_window_func(\"std\", args, kwargs)\n    return zsqrt(self.var(ddof=ddof, name=\"std\", **kwargs))",
                "@property\ndef _constructor(self):\n    return Rolling",
                "def count(self):\n    # GH 32865. Using count with custom BaseIndexer subclass\n    # implementations shouldn't end up here\n    assert not isinstance(self.window, BaseIndexer)\n\n    blocks, obj = self._create_blocks()\n    results = []\n    for b in blocks:\n        result = b.notna().astype(int)\n        result = self._constructor(\n            result,\n            window=self._get_window(),\n            min_periods=self.min_periods or 0,\n            center=self.center,\n            axis=self.axis,\n            closed=self.closed,\n        ).sum()\n        results.append(result)\n\n    return self._wrap_results(results, blocks, obj)",
                "def apply(\n    self,\n    func,\n    raw: bool = False,\n    engine: str = \"cython\",\n    engine_kwargs: Optional[Dict] = None,\n    args: Optional[Tuple] = None,\n    kwargs: Optional[Dict] = None,\n):\n    if args is None:\n        args = ()\n    if kwargs is None:\n        kwargs = {}\n    kwargs.pop(\"_level\", None)\n    kwargs.pop(\"floor\", None)\n    window = self._get_window()\n    offset = calculate_center_offset(window) if self.center else 0\n    if not is_bool(raw):\n        raise ValueError(\"raw parameter must be `True` or `False`\")\n\n    if engine == \"cython\":\n        if engine_kwargs is not None:\n            raise ValueError(\"cython engine does not accept engine_kwargs\")\n        apply_func = self._generate_cython_apply_func(\n            args, kwargs, raw, offset, func\n        )\n    elif engine == \"numba\":\n        if raw is False:\n            raise ValueError(\"raw must be `True` when using the numba engine\")\n        cache_key = (func, \"rolling_apply\")\n        if cache_key in NUMBA_FUNC_CACHE:\n            # Return an already compiled version of roll_apply if available\n            apply_func = NUMBA_FUNC_CACHE[cache_key]\n        else:\n            apply_func = generate_numba_apply_func(\n                args, kwargs, func, engine_kwargs\n            )\n    else:\n        raise ValueError(\"engine must be either 'numba' or 'cython'\")\n\n    # TODO: Why do we always pass center=False?\n    # name=func & raw=raw for WindowGroupByMixin._apply\n    return self._apply(\n        apply_func,\n        center=False,\n        floor=0,\n        name=func,\n        use_numba_cache=engine == \"numba\",\n        raw=raw,\n        original_func=func,\n    )",
                "def _generate_cython_apply_func(self, args, kwargs, raw, offset, func):\n    from pandas import Series\n\n    window_func = partial(\n        self._get_cython_func_type(\"roll_generic\"),\n        args=args,\n        kwargs=kwargs,\n        raw=raw,\n        offset=offset,\n        func=func,\n    )\n\n    def apply_func(values, begin, end, min_periods, raw=raw):\n        if not raw:\n            values = Series(values, index=self.obj.index)\n        return window_func(values, begin, end, min_periods)\n\n    return apply_func",
                "def sum(self, *args, **kwargs):\n    nv.validate_window_func(\"sum\", args, kwargs)\n    window_func = self._get_cython_func_type(\"roll_sum\")\n    kwargs.pop(\"floor\", None)\n    return self._apply(\n        window_func, center=self.center, floor=0, name=\"sum\", **kwargs\n    )",
                "def max(self, *args, **kwargs):\n    nv.validate_window_func(\"max\", args, kwargs)\n    window_func = self._get_cython_func_type(\"roll_max\")\n    return self._apply(window_func, center=self.center, name=\"max\", **kwargs)",
                "def min(self, *args, **kwargs):\n    nv.validate_window_func(\"min\", args, kwargs)\n    window_func = self._get_cython_func_type(\"roll_min\")\n    return self._apply(window_func, center=self.center, name=\"min\", **kwargs)",
                "def mean(self, *args, **kwargs):\n    nv.validate_window_func(\"mean\", args, kwargs)\n    window_func = self._get_cython_func_type(\"roll_mean\")\n    return self._apply(window_func, center=self.center, name=\"mean\", **kwargs)",
                "def median(self, **kwargs):\n    window_func = self._get_roll_func(\"roll_median_c\")\n    # GH 32865. Move max window size calculation to\n    # the median function implementation\n    return self._apply(window_func, center=self.center, name=\"median\", **kwargs)",
                "def std(self, ddof=1, *args, **kwargs):\n    nv.validate_window_func(\"std\", args, kwargs)\n    kwargs.pop(\"require_min_periods\", None)\n    window_func = self._get_cython_func_type(\"roll_var\")\n\n    def zsqrt_func(values, begin, end, min_periods):\n        return zsqrt(window_func(values, begin, end, min_periods, ddof=ddof))\n\n    # ddof passed again for compat with groupby.rolling\n    return self._apply(\n        zsqrt_func,\n        center=self.center,\n        require_min_periods=1,\n        name=\"std\",\n        ddof=ddof,\n        **kwargs,\n    )",
                "def var(self, ddof=1, *args, **kwargs):\n    nv.validate_window_func(\"var\", args, kwargs)\n    kwargs.pop(\"require_min_periods\", None)\n    window_func = partial(self._get_cython_func_type(\"roll_var\"), ddof=ddof)\n    # ddof passed again for compat with groupby.rolling\n    return self._apply(\n        window_func,\n        center=self.center,\n        require_min_periods=1,\n        name=\"var\",\n        ddof=ddof,\n        **kwargs,\n    )",
                "def skew(self, **kwargs):\n    window_func = self._get_cython_func_type(\"roll_skew\")\n    kwargs.pop(\"require_min_periods\", None)\n    return self._apply(\n        window_func,\n        center=self.center,\n        require_min_periods=3,\n        name=\"skew\",\n        **kwargs,\n    )",
                "def kurt(self, **kwargs):\n    window_func = self._get_cython_func_type(\"roll_kurt\")\n    kwargs.pop(\"require_min_periods\", None)\n    return self._apply(\n        window_func,\n        center=self.center,\n        require_min_periods=4,\n        name=\"kurt\",\n        **kwargs,\n    )",
                "def quantile(self, quantile, interpolation=\"linear\", **kwargs):\n    if quantile == 1.0:\n        window_func = self._get_cython_func_type(\"roll_max\")\n    elif quantile == 0.0:\n        window_func = self._get_cython_func_type(\"roll_min\")\n    else:\n        window_func = partial(\n            self._get_roll_func(\"roll_quantile\"),\n            win=self._get_window(),\n            quantile=quantile,\n            interpolation=interpolation,\n        )\n\n    # Pass through for groupby.rolling\n    kwargs[\"quantile\"] = quantile\n    kwargs[\"interpolation\"] = interpolation\n    return self._apply(window_func, center=self.center, name=\"quantile\", **kwargs)",
                "def cov(self, other=None, pairwise=None, ddof=1, **kwargs):\n    if isinstance(self.window, BaseIndexer):\n        validate_baseindexer_support(\"cov\")\n\n    if other is None:\n        other = self._selected_obj\n        # only default unset\n        pairwise = True if pairwise is None else pairwise\n    other = self._shallow_copy(other)\n\n    # GH 16058: offset window\n    if self.is_freq_type:\n        window = self.win_freq\n    else:\n        window = self._get_window(other)\n\n    def _get_cov(X, Y):\n        # GH #12373 : rolling functions error on float32 data\n        # to avoid potential overflow, cast the data to float64\n        X = X.astype(\"float64\")\n        Y = Y.astype(\"float64\")\n        mean = lambda x: x.rolling(\n            window, self.min_periods, center=self.center\n        ).mean(**kwargs)\n        count = (\n            (X + Y)\n            .rolling(window=window, min_periods=0, center=self.center)\n            .count(**kwargs)\n        )\n        bias_adj = count / (count - ddof)\n        return (mean(X * Y) - mean(X) * mean(Y)) * bias_adj\n\n    return _flex_binary_moment(\n        self._selected_obj, other._selected_obj, _get_cov, pairwise=bool(pairwise)\n    )",
                "def corr(self, other=None, pairwise=None, **kwargs):\n    if isinstance(self.window, BaseIndexer):\n        validate_baseindexer_support(\"corr\")\n\n    if other is None:\n        other = self._selected_obj\n        # only default unset\n        pairwise = True if pairwise is None else pairwise\n    other = self._shallow_copy(other)\n    window = self._get_window(other) if not self.is_freq_type else self.win_freq\n\n    def _get_corr(a, b):\n        a = a.rolling(\n            window=window, min_periods=self.min_periods, center=self.center\n        )\n        b = b.rolling(\n            window=window, min_periods=self.min_periods, center=self.center\n        )\n\n        return a.cov(b, **kwargs) / (a.std(**kwargs) * b.std(**kwargs))\n\n    return _flex_binary_moment(\n        self._selected_obj, other._selected_obj, _get_corr, pairwise=bool(pairwise)\n    )",
                "@cache_readonly\ndef is_datetimelike(self) -> bool:\n    return isinstance(\n        self._on, (ABCDatetimeIndex, ABCTimedeltaIndex, ABCPeriodIndex)\n    )",
                "@cache_readonly\ndef _on(self) -> Index:\n    if self.on is None:\n        if self.axis == 0:\n            return self.obj.index\n        else:\n            # i.e. self.axis == 1\n            return self.obj.columns\n    elif isinstance(self.on, Index):\n        return self.on\n    elif isinstance(self.obj, ABCDataFrame) and self.on in self.obj.columns:\n        return Index(self.obj[self.on])\n    else:\n        raise ValueError(\n            f\"invalid on specified as {self.on}, \"\n            \"must be a column (of DataFrame), an Index or None\"\n        )",
                "def validate(self):\n    super().validate()\n\n    # we allow rolling on a datetimelike index\n    if (self.obj.empty or self.is_datetimelike) and isinstance(\n        self.window, (str, ABCDateOffset, timedelta)\n    ):\n\n        self._validate_monotonic()\n        freq = self._validate_freq()\n\n        # we don't allow center\n        if self.center:\n            raise NotImplementedError(\n                \"center is not implemented for \"\n                \"datetimelike and offset based windows\"\n            )\n\n        # this will raise ValueError on non-fixed freqs\n        self.win_freq = self.window\n        self.window = freq.nanos\n        self.win_type = \"freq\"\n\n        # min_periods must be an integer\n        if self.min_periods is None:\n            self.min_periods = 1\n\n    elif isinstance(self.window, BaseIndexer):\n        # Passed BaseIndexer subclass should handle all other rolling kwargs\n        return\n    elif not is_integer(self.window):\n        raise ValueError(\"window must be an integer\")\n    elif self.window < 0:\n        raise ValueError(\"window must be non-negative\")\n\n    if not self.is_datetimelike and self.closed is not None:\n        raise ValueError(\n            \"closed only implemented for datetimelike and offset based windows\"\n        )",
                "def _validate_monotonic(self):\n    \"\"\"\n    Validate monotonic (increasing or decreasing).\n    \"\"\"\n    if not (self._on.is_monotonic_increasing or self._on.is_monotonic_decreasing):\n        formatted = self.on\n        if self.on is None:\n            formatted = \"index\"\n        raise ValueError(f\"{formatted} must be monotonic\")",
                "def _validate_freq(self):\n    \"\"\"\n    Validate & return window frequency.\n    \"\"\"\n    from pandas.tseries.frequencies import to_offset\n\n    try:\n        return to_offset(self.window)\n    except (TypeError, ValueError) as err:\n        raise ValueError(\n            f\"passed window {self.window} is not \"\n            \"compatible with a datetimelike index\"\n        ) from err",
                "@Substitution(\n    see_also=_agg_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\",\n    klass=\"Series/Dataframe\",\n    axis=\"\",\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, func, *args, **kwargs):\n    return super().aggregate(func, *args, **kwargs)",
                "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"count\"])\ndef count(self):\n\n    # different impl for freq counting\n    # GH 32865. Use a custom count function implementation\n    # when using a BaseIndexer subclass as a window\n    if self.is_freq_type or isinstance(self.window, BaseIndexer):\n        window_func = self._get_roll_func(\"roll_count\")\n        return self._apply(window_func, center=self.center, name=\"count\")\n\n    return super().count()",
                "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"apply\"])\ndef apply(\n    self,\n    func,\n    raw=False,\n    engine=\"cython\",\n    engine_kwargs=None,\n    args=None,\n    kwargs=None,\n):\n    return super().apply(\n        func,\n        raw=raw,\n        engine=engine,\n        engine_kwargs=engine_kwargs,\n        args=args,\n        kwargs=kwargs,\n    )",
                "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"sum\"])\ndef sum(self, *args, **kwargs):\n    nv.validate_rolling_func(\"sum\", args, kwargs)\n    return super().sum(*args, **kwargs)",
                "@Substitution(name=\"rolling\")\n@Appender(_doc_template)\n@Appender(_shared_docs[\"max\"])\ndef max(self, *args, **kwargs):\n    nv.validate_rolling_func(\"max\", args, kwargs)\n    return super().max(*args, **kwargs)",
                "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"min\"])\ndef min(self, *args, **kwargs):\n    nv.validate_rolling_func(\"min\", args, kwargs)\n    return super().min(*args, **kwargs)",
                "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"mean\"])\ndef mean(self, *args, **kwargs):\n    nv.validate_rolling_func(\"mean\", args, kwargs)\n    return super().mean(*args, **kwargs)",
                "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"median\"])\ndef median(self, **kwargs):\n    return super().median(**kwargs)",
                "@Substitution(name=\"rolling\", versionadded=\"\")\n@Appender(_shared_docs[\"std\"])\ndef std(self, ddof=1, *args, **kwargs):\n    nv.validate_rolling_func(\"std\", args, kwargs)\n    return super().std(ddof=ddof, **kwargs)",
                "@Substitution(name=\"rolling\", versionadded=\"\")\n@Appender(_shared_docs[\"var\"])\ndef var(self, ddof=1, *args, **kwargs):\n    nv.validate_rolling_func(\"var\", args, kwargs)\n    return super().var(ddof=ddof, **kwargs)",
                "@Substitution(name=\"rolling\")\n@Appender(_doc_template)\n@Appender(_shared_docs[\"skew\"])\ndef skew(self, **kwargs):\n    return super().skew(**kwargs)",
                "@Appender(_agg_doc)\n@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"kurt\"])\ndef kurt(self, **kwargs):\n    return super().kurt(**kwargs)",
                "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"quantile\"])\ndef quantile(self, quantile, interpolation=\"linear\", **kwargs):\n    return super().quantile(\n        quantile=quantile, interpolation=interpolation, **kwargs\n    )",
                "@Substitution(name=\"rolling\")\n@Appender(_doc_template)\n@Appender(_shared_docs[\"cov\"])\ndef cov(self, other=None, pairwise=None, ddof=1, **kwargs):\n    return super().cov(other=other, pairwise=pairwise, ddof=ddof, **kwargs)",
                "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"corr\"])\ndef corr(self, other=None, pairwise=None, **kwargs):\n    return super().corr(other=other, pairwise=pairwise, **kwargs)",
                "@property\ndef _constructor(self):\n    return Rolling",
                "def _gotitem(self, key, ndim, subset=None):\n\n    # we are setting the index on the actual object\n    # here so our index is carried thru to the selected obj\n    # when we do the splitting for the groupby\n    if self.on is not None:\n        self._groupby.obj = self._groupby.obj.set_index(self._on)\n        self.on = None\n    return super()._gotitem(key, ndim, subset=subset)",
                "def _validate_monotonic(self):\n    \"\"\"\n    Validate that on is monotonic;\n    we don't care for groupby.rolling\n    because we have already validated at a higher\n    level.\n    \"\"\"\n    pass",
                "def _validate_win_type(win_type, kwargs):\n    arg_map = {\n        \"kaiser\": [\"beta\"],\n        \"gaussian\": [\"std\"],\n        \"general_gaussian\": [\"power\", \"width\"],\n        \"slepian\": [\"width\"],\n        \"exponential\": [\"tau\"],\n    }\n\n    if win_type in arg_map:\n        win_args = _pop_args(win_type, arg_map[win_type], kwargs)\n        if win_type == \"exponential\":\n            # exponential window requires the first arg (center)\n            # to be set to None (necessary for symmetric window)\n            win_args.insert(0, None)\n\n        return tuple([win_type] + win_args)\n\n    return win_type",
                "def _pop_args(win_type, arg_names, kwargs):\n    all_args = []\n    for n in arg_names:\n        if n not in kwargs:\n            raise ValueError(f\"{win_type} window requires {n}\")\n        all_args.append(kwargs.pop(n))\n    return all_args",
                "def apply_func(values, begin, end, min_periods, raw=raw):\n    if not raw:\n        values = Series(values, index=self.obj.index)\n    return window_func(values, begin, end, min_periods)",
                "def zsqrt_func(values, begin, end, min_periods):\n    return zsqrt(window_func(values, begin, end, min_periods, ddof=ddof))",
                "def _get_cov(X, Y):\n    # GH #12373 : rolling functions error on float32 data\n    # to avoid potential overflow, cast the data to float64\n    X = X.astype(\"float64\")\n    Y = Y.astype(\"float64\")\n    mean = lambda x: x.rolling(\n        window, self.min_periods, center=self.center\n    ).mean(**kwargs)\n    count = (\n        (X + Y)\n        .rolling(window=window, min_periods=0, center=self.center)\n        .count(**kwargs)\n    )\n    bias_adj = count / (count - ddof)\n    return (mean(X * Y) - mean(X) * mean(Y)) * bias_adj",
                "def _get_corr(a, b):\n    a = a.rolling(\n        window=window, min_periods=self.min_periods, center=self.center\n    )\n    b = b.rolling(\n        window=window, min_periods=self.min_periods, center=self.center\n    )\n\n    return a.cov(b, **kwargs) / (a.std(**kwargs) * b.std(**kwargs))",
                "def calc(x):\n    x = np.concatenate((x, additional_nans))\n    if not isinstance(window, BaseIndexer):\n        min_periods = calculate_min_periods(\n            window, self.min_periods, len(x), require_min_periods, floor\n        )\n    else:\n        min_periods = calculate_min_periods(\n            self.min_periods or 1,\n            self.min_periods,\n            len(x),\n            require_min_periods,\n            floor,\n        )\n    start, end = window_indexer.get_window_bounds(\n        num_values=len(x),\n        min_periods=self.min_periods,\n        center=self.center,\n        closed=self.closed,\n    )\n    return func(x, start, end, min_periods)",
                "def calc(x):\n    x = np.concatenate((x, additional_nans))\n    return func(x, window, self.min_periods)"
            ],
            "inscope_function_signatures": [
                "__init__(self, obj, window=None, min_periods: Optional[int]=None, center: Optional[bool]=False, win_type: Optional[str]=None, axis: Axis=0, on: Optional[Union[str, Index]]=None, closed: Optional[str]=None, **kwargs)",
                "_constructor(self)",
                "is_datetimelike(self) -> Optional[bool]",
                "_on(self)",
                "is_freq_type(self) -> bool",
                "validate(self) -> None",
                "_validate_get_window_bounds_signature(window: BaseIndexer) -> None",
                "_create_blocks(self)",
                "_gotitem(self, key, ndim, subset=None)",
                "__getattr__(self, attr: str)",
                "_dir_additions(self)",
                "_get_win_type(self, kwargs: Dict)",
                "_get_window(self, other=None, win_type: Optional[str]=None) -> int",
                "_window_type(self) -> str",
                "__repr__(self) -> str",
                "__iter__(self)",
                "_prep_values(self, values: Optional[np.ndarray]=None) -> np.ndarray",
                "_wrap_result(self, result, block=None, obj=None)",
                "_wrap_results(self, results, blocks, obj, exclude=None) -> FrameOrSeries",
                "_center_window(self, result, window) -> np.ndarray",
                "_get_roll_func(self, func_name: str) -> Callable",
                "_get_cython_func_type(self, func: str) -> Callable",
                "_get_window_indexer(self, window: int, func_name: Optional[str]) -> BaseIndexer",
                "_apply(self, func: Callable, center: bool, require_min_periods: int=0, floor: int=1, is_weighted: bool=False, name: Optional[str]=None, use_numba_cache: bool=False, **kwargs)",
                "aggregate(self, func, *args, **kwargs)",
                "validate(self)",
                "_get_win_type(self, kwargs: Dict) -> Union[str, Tuple]",
                "_get_window(self, other=None, win_type: Optional[Union[str, Tuple]]=None) -> np.ndarray",
                "aggregate(self, func, *args, **kwargs)",
                "sum(self, *args, **kwargs)",
                "mean(self, *args, **kwargs)",
                "var(self, ddof=1, *args, **kwargs)",
                "std(self, ddof=1, *args, **kwargs)",
                "_constructor(self)",
                "count(self)",
                "apply(self, func, raw: bool=False, engine: str='cython', engine_kwargs: Optional[Dict]=None, args: Optional[Tuple]=None, kwargs: Optional[Dict]=None)",
                "_generate_cython_apply_func(self, args, kwargs, raw, offset, func)",
                "sum(self, *args, **kwargs)",
                "max(self, *args, **kwargs)",
                "min(self, *args, **kwargs)",
                "mean(self, *args, **kwargs)",
                "median(self, **kwargs)",
                "std(self, ddof=1, *args, **kwargs)",
                "var(self, ddof=1, *args, **kwargs)",
                "skew(self, **kwargs)",
                "kurt(self, **kwargs)",
                "quantile(self, quantile, interpolation='linear', **kwargs)",
                "cov(self, other=None, pairwise=None, ddof=1, **kwargs)",
                "corr(self, other=None, pairwise=None, **kwargs)",
                "is_datetimelike(self) -> bool",
                "_on(self) -> Index",
                "validate(self)",
                "_validate_monotonic(self)",
                "_validate_freq(self)",
                "aggregate(self, func, *args, **kwargs)",
                "count(self)",
                "apply(self, func, raw=False, engine='cython', engine_kwargs=None, args=None, kwargs=None)",
                "sum(self, *args, **kwargs)",
                "max(self, *args, **kwargs)",
                "min(self, *args, **kwargs)",
                "mean(self, *args, **kwargs)",
                "median(self, **kwargs)",
                "std(self, ddof=1, *args, **kwargs)",
                "var(self, ddof=1, *args, **kwargs)",
                "skew(self, **kwargs)",
                "kurt(self, **kwargs)",
                "quantile(self, quantile, interpolation='linear', **kwargs)",
                "cov(self, other=None, pairwise=None, ddof=1, **kwargs)",
                "corr(self, other=None, pairwise=None, **kwargs)",
                "_constructor(self)",
                "_gotitem(self, key, ndim, subset=None)",
                "_validate_monotonic(self)",
                "_validate_win_type(win_type, kwargs)",
                "_pop_args(win_type, arg_names, kwargs)",
                "apply_func(values, begin, end, min_periods, raw=raw)",
                "zsqrt_func(values, begin, end, min_periods)",
                "_get_cov(X, Y)",
                "_get_corr(a, b)",
                "calc(x)",
                "calc(x)"
            ],
            "variables_in_file": {
                "PandasObject": [
                    62
                ],
                "ShallowMixin": [
                    62
                ],
                "SelectionMixin": [
                    62
                ],
                "_attributes": [
                    63
                ],
                "List": [
                    450,
                    63
                ],
                "str": [
                    386,
                    963,
                    72,
                    234,
                    970,
                    396,
                    237,
                    366,
                    1258,
                    80,
                    1836,
                    82,
                    83,
                    214,
                    1015,
                    186,
                    414,
                    63
                ],
                "exclusions": [
                    72
                ],
                "Set": [
                    72
                ],
                "set": [
                    72
                ],
                "Optional": [
                    104,
                    1259,
                    396,
                    1260,
                    78,
                    79,
                    80,
                    1261,
                    82,
                    83,
                    214,
                    1015,
                    253,
                    414
                ],
                "int": [
                    396,
                    78,
                    214,
                    411,
                    412,
                    1182
                ],
                "bool": [
                    1667,
                    104,
                    1257,
                    1802,
                    79,
                    112,
                    1808,
                    410,
                    413,
                    415
                ],
                "Axis": [
                    81
                ],
                "Union": [
                    970,
                    82,
                    1015
                ],
                "Index": [
                    1824,
                    82,
                    157,
                    1814,
                    1821
                ],
                "self.__dict__.update": [
                    87
                ],
                "self.__dict__": [
                    87
                ],
                "self": [
                    512,
                    516,
                    519,
                    1032,
                    521,
                    2090,
                    2091,
                    2092,
                    1078,
                    1082,
                    1594,
                    1596,
                    1599,
                    1600,
                    1092,
                    1094,
                    1095,
                    1608,
                    1102,
                    1104,
                    1105,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    1115,
                    1116,
                    1123,
                    1635,
                    1639,
                    1642,
                    1645,
                    1646,
                    1648,
                    113,
                    116,
                    118,
                    120,
                    1656,
                    1660,
                    127,
                    128,
                    129,
                    130,
                    1667,
                    1177,
                    154,
                    1179,
                    157,
                    159,
                    1183,
                    1185,
                    1186,
                    1187,
                    1188,
                    1189,
                    1193,
                    178,
                    179,
                    180,
                    183,
                    184,
                    187,
                    188,
                    189,
                    190,
                    193,
                    197,
                    229,
                    230,
                    231,
                    235,
                    242,
                    243,
                    244,
                    1269,
                    1270,
                    247,
                    1781,
                    1785,
                    1788,
                    1277,
                    1789,
                    256,
                    1793,
                    1796,
                    266,
                    1802,
                    1296,
                    1810,
                    1815,
                    1816,
                    1817,
                    1820,
                    1821,
                    1310,
                    287,
                    1822,
                    1823,
                    1824,
                    1827,
                    1320,
                    1835,
                    1836,
                    1327,
                    1839,
                    1329,
                    1330,
                    1840,
                    1843,
                    1850,
                    1851,
                    316,
                    1852,
                    1855,
                    1856,
                    1346,
                    1347,
                    324,
                    325,
                    1858,
                    327,
                    328,
                    1861,
                    330,
                    1863,
                    332,
                    1866,
                    337,
                    1875,
                    1876,
                    1877,
                    1888,
                    1891,
                    356,
                    362,
                    1388,
                    1389,
                    1393,
                    1394,
                    392,
                    393,
                    394,
                    400,
                    402,
                    403,
                    404,
                    1434,
                    1437,
                    1949,
                    1950,
                    1951,
                    1442,
                    1448,
                    1450,
                    948,
                    1460,
                    1462,
                    1464,
                    442,
                    443,
                    445,
                    447,
                    963,
                    964,
                    453,
                    965,
                    966,
                    1483,
                    1485,
                    1487,
                    1112,
                    477,
                    481,
                    482,
                    489,
                    490,
                    491,
                    499,
                    1012,
                    1526,
                    503,
                    1528,
                    1530
                ],
                "kwargs": [
                    1527,
                    2052,
                    519,
                    1799,
                    521,
                    1289,
                    2058,
                    2065,
                    1938,
                    2070,
                    1437,
                    1312,
                    1440,
                    1441,
                    1533,
                    1661,
                    1326,
                    1454,
                    1328,
                    1330,
                    1458,
                    1459,
                    1972,
                    1078,
                    442,
                    1978,
                    1468,
                    1979,
                    1345,
                    1985,
                    1091,
                    1347,
                    1986,
                    1606,
                    1095,
                    1607,
                    1608,
                    1991,
                    1992,
                    1484,
                    1101,
                    1997,
                    1998,
                    1105,
                    1490,
                    2003,
                    87,
                    1111,
                    2008,
                    1114,
                    2009,
                    1116,
                    2014,
                    2015,
                    994,
                    1122,
                    1123,
                    2021,
                    1387,
                    1389,
                    1007,
                    1392,
                    1009,
                    1265,
                    1266,
                    1012,
                    1267,
                    1268,
                    1394,
                    1657,
                    509,
                    1278
                ],
                "self.obj": [
                    1824,
                    197,
                    1320,
                    1835,
                    337,
                    178,
                    1823,
                    88,
                    1817,
                    1820,
                    189,
                    127
                ],
                "obj": [
                    516,
                    154,
                    1179,
                    286,
                    287,
                    160,
                    288,
                    162,
                    158,
                    159,
                    295,
                    297,
                    1193,
                    316,
                    445,
                    325,
                    328,
                    456,
                    88,
                    349,
                    96
                ],
                "self.on": [
                    1824,
                    1827,
                    325,
                    1821,
                    2090,
                    2092,
                    1823,
                    1876,
                    1877,
                    1815,
                    89,
                    157,
                    1822,
                    159
                ],
                "on": [
                    89
                ],
                "self.closed": [
                    1189,
                    1866,
                    491,
                    120,
                    90
                ],
                "closed": [
                    90
                ],
                "self.window": [
                    129,
                    130,
                    392,
                    1032,
                    400,
                    402,
                    1177,
                    1949,
                    1836,
                    948,
                    1850,
                    1851,
                    1858,
                    1861,
                    1863,
                    91,
                    1888,
                    1635,
                    1891,
                    229,
                    231,
                    1781
                ],
                "window": [
                    512,
                    1793,
                    1796,
                    1032,
                    1033,
                    1034,
                    139,
                    1035,
                    1039,
                    146,
                    404,
                    405,
                    948,
                    949,
                    953,
                    955,
                    443,
                    956,
                    447,
                    968,
                    468,
                    475,
                    91,
                    477,
                    359,
                    1646,
                    1648,
                    499,
                    1269,
                    1270,
                    1656,
                    1660,
                    1789
                ],
                "self.min_periods": [
                    1856,
                    481,
                    482,
                    1186,
                    1793,
                    1796,
                    230,
                    489,
                    499,
                    118,
                    1656,
                    92,
                    477,
                    1855
                ],
                "min_periods": [
                    480,
                    1445,
                    1321,
                    493,
                    92,
                    476
                ],
                "self.center": [
                    1793,
                    1796,
                    1437,
                    1951,
                    1187,
                    1450,
                    1330,
                    1843,
                    1464,
                    1347,
                    1095,
                    1608,
                    1487,
                    1105,
                    1116,
                    93,
                    490,
                    1389,
                    1394,
                    116,
                    1270,
                    1656,
                    1530,
                    1660
                ],
                "center": [
                    468,
                    93,
                    511
                ],
                "self.win_type": [
                    963,
                    964,
                    965,
                    966,
                    113,
                    1012,
                    1852,
                    94
                ],
                "win_type": [
                    993,
                    994,
                    995,
                    1000,
                    1002,
                    1039,
                    1008,
                    442,
                    443,
                    94
                ],
                "self.win_freq": [
                    1850,
                    1789,
                    1646,
                    95
                ],
                "self.axis": [
                    96,
                    356,
                    1188,
                    362,
                    503,
                    1816
                ],
                "axis": [
                    96
                ],
                "obj._get_axis_number": [
                    96
                ],
                "self.validate": [
                    97
                ],
                "Window": [
                    2073,
                    101
                ],
                "property": [
                    2081,
                    99,
                    103,
                    1127,
                    233,
                    107,
                    111
                ],
                "is_bool": [
                    116,
                    1271
                ],
                "ValueError": [
                    1282,
                    1292,
                    272,
                    145,
                    1826,
                    957,
                    964,
                    966,
                    1862,
                    968,
                    1864,
                    1867,
                    1879,
                    1889,
                    1890,
                    357,
                    1008,
                    117,
                    119,
                    1272,
                    1276,
                    381,
                    126
                ],
                "is_integer": [
                    1035,
                    955,
                    1861,
                    118
                ],
                "isinstance": [
                    129,
                    392,
                    1033,
                    400,
                    1809,
                    1177,
                    1821,
                    157,
                    1823,
                    1949,
                    290,
                    1835,
                    949,
                    953,
                    1858,
                    963,
                    456,
                    475,
                    1635,
                    229,
                    1781,
                    127
                ],
                "ABCSeries": [
                    127
                ],
                "ABCDataFrame": [
                    456,
                    1823,
                    127
                ],
                "TypeError": [
                    128,
                    1889,
                    455,
                    272,
                    273
                ],
                "type": [
                    128,
                    193,
                    297,
                    235,
                    146
                ],
                "BaseIndexer": [
                    129,
                    1858,
                    1635,
                    133,
                    229,
                    392,
                    396,
                    142,
                    400,
                    949,
                    1781,
                    1177,
                    475,
                    1949
                ],
                "self._validate_get_window_bounds_signature": [
                    130
                ],
                "get_window_bounds_signature": [
                    144,
                    138
                ],
                "parameters.keys": [
                    138,
                    141
                ],
                "parameters": [
                    138,
                    141
                ],
                "inspect.signature": [
                    138,
                    141
                ],
                "inspect": [
                    138,
                    141
                ],
                "window.get_window_bounds": [
                    139
                ],
                "expected_signature": [
                    144,
                    141
                ],
                "get_window_bounds": [
                    142
                ],
                "__name__": [
                    193,
                    146,
                    235
                ],
                "staticmethod": [
                    132
                ],
                "self._selected_obj": [
                    256,
                    1667,
                    324,
                    1639,
                    1802,
                    1785,
                    154,
                    287
                ],
                "obj.ndim": [
                    158
                ],
                "obj.reindex": [
                    159
                ],
                "obj.columns.difference": [
                    159
                ],
                "obj.columns": [
                    159
                ],
                "blocks": [
                    160,
                    162,
                    451,
                    1193,
                    1181,
                    314,
                    1179,
                    445,
                    446
                ],
                "values": [
                    256,
                    260,
                    261,
                    262,
                    263,
                    264,
                    267,
                    271,
                    273,
                    276,
                    278,
                    280,
                    160,
                    1445,
                    1320,
                    1321,
                    453,
                    463,
                    464,
                    502,
                    503,
                    505,
                    255
                ],
                "obj._to_dict_of_blocks": [
                    160
                ],
                "subset": [
                    2093,
                    177,
                    178,
                    179,
                    181,
                    182
                ],
                "self._shallow_copy": [
                    1642,
                    179,
                    1788
                ],
                "self._reset_cache": [
                    180
                ],
                "subset.ndim": [
                    181
                ],
                "is_scalar": [
                    182
                ],
                "key": [
                    2093,
                    182,
                    183
                ],
                "is_list_like": [
                    182
                ],
                "self._selection": [
                    330,
                    332,
                    183
                ],
                "attr": [
                    193,
                    187,
                    188,
                    189,
                    190
                ],
                "self._internal_names_set": [
                    187
                ],
                "object.__getattribute__": [
                    188
                ],
                "object": [
                    188
                ],
                "AttributeError": [
                    192
                ],
                "self.obj._dir_additions": [
                    197
                ],
                "Dict": [
                    970,
                    1259,
                    1261,
                    199
                ],
                "attrs_list": [
                    241,
                    246
                ],
                "attr_name": [
                    242,
                    243,
                    244
                ],
                "getattr": [
                    242,
                    379,
                    244,
                    965
                ],
                "self._attributes": [
                    243
                ],
                "attrs": [
                    246,
                    247
                ],
                "join": [
                    246
                ],
                "self._window_type": [
                    266,
                    247
                ],
                "url": [
                    250,
                    251
                ],
                "NotImplementedError": [
                    455,
                    265,
                    1844,
                    950,
                    251
                ],
                "np.ndarray": [
                    352,
                    290,
                    1033,
                    1016,
                    953,
                    253
                ],
                "np": [
                    352,
                    290,
                    503,
                    1033,
                    363,
                    498,
                    506,
                    276,
                    469,
                    278,
                    501,
                    1016,
                    953,
                    474,
                    253
                ],
                "extract_array": [
                    256
                ],
                "is_float_dtype": [
                    260
                ],
                "values.dtype": [
                    260,
                    262,
                    264,
                    267,
                    273
                ],
                "ensure_float64": [
                    271,
                    261,
                    263
                ],
                "is_integer_dtype": [
                    262
                ],
                "needs_i8_conversion": [
                    264
                ],
                "err": [
                    273,
                    1893,
                    461
                ],
                "inf": [
                    276,
                    277,
                    278
                ],
                "np.isinf": [
                    276
                ],
                "inf.any": [
                    277
                ],
                "np.where": [
                    278
                ],
                "np.nan": [
                    469,
                    278
                ],
                "index": [
                    288,
                    297,
                    295
                ],
                "obj.index": [
                    288,
                    328,
                    325
                ],
                "result": [
                    512,
                    514,
                    519,
                    520,
                    522,
                    1182,
                    1183,
                    1184,
                    290,
                    292,
                    295,
                    1191,
                    297,
                    298,
                    1078,
                    1079,
                    314,
                    1082,
                    316,
                    317,
                    318,
                    319,
                    1084,
                    356,
                    361,
                    363,
                    364,
                    503,
                    505,
                    506
                ],
                "result.ndim": [
                    356,
                    361,
                    292,
                    317
                ],
                "Series": [
                    328,
                    1320,
                    295
                ],
                "obj.name": [
                    295
                ],
                "block.columns": [
                    297
                ],
                "block": [
                    297,
                    314,
                    316
                ],
                "final": [
                    328,
                    313,
                    348,
                    350,
                    319
                ],
                "zip": [
                    314
                ],
                "results": [
                    449,
                    514,
                    516,
                    1191,
                    1193,
                    464,
                    314,
                    1180
                ],
                "self._wrap_result": [
                    316
                ],
                "final.append": [
                    328,
                    319
                ],
                "columns": [
                    324,
                    337,
                    338,
                    339,
                    343,
                    345,
                    350
                ],
                "self._selected_obj.columns": [
                    324
                ],
                "self._on.equals": [
                    325
                ],
                "self._on": [
                    325,
                    327,
                    328,
                    2091,
                    1810,
                    1875,
                    404
                ],
                "name": [
                    327,
                    328,
                    336,
                    338,
                    447
                ],
                "self._on.name": [
                    327
                ],
                "selection": [
                    336,
                    338,
                    332
                ],
                "ensure_index": [
                    332
                ],
                "self.obj.columns": [
                    337,
                    1820,
                    1823
                ],
                "indexer": [
                    338,
                    339
                ],
                "columns.get_indexer": [
                    338
                ],
                "selection.tolist": [
                    338
                ],
                "columns.take": [
                    339
                ],
                "sorted": [
                    339
                ],
                "exclude": [
                    450,
                    516,
                    457,
                    342,
                    343
                ],
                "c": [
                    343
                ],
                "DataError": [
                    346,
                    461
                ],
                "len": [
                    488,
                    483,
                    348,
                    477
                ],
                "obj.astype": [
                    349
                ],
                "reindex": [
                    350
                ],
                "concat": [
                    350
                ],
                "FrameOrSeries": [
                    300
                ],
                "offset": [
                    1314,
                    359,
                    360,
                    362,
                    468,
                    469,
                    1270,
                    1278
                ],
                "calculate_center_offset": [
                    468,
                    1270,
                    359
                ],
                "lead_indexer": [
                    361,
                    362,
                    363
                ],
                "slice": [
                    361,
                    362
                ],
                "np.copy": [
                    363
                ],
                "tuple": [
                    1000,
                    953,
                    363,
                    1033
                ],
                "window_func": [
                    384,
                    1434,
                    1309,
                    1437,
                    1950,
                    1951,
                    1442,
                    1445,
                    1321,
                    1327,
                    1330,
                    1460,
                    1463,
                    1594,
                    1596,
                    1598,
                    1346,
                    1347,
                    1092,
                    1093,
                    1095,
                    1608,
                    1483,
                    1102,
                    1103,
                    1486,
                    1105,
                    1112,
                    1113,
                    1116,
                    1388,
                    1389,
                    1393,
                    1394,
                    1526,
                    1529,
                    379,
                    380
                ],
                "window_aggregations": [
                    379
                ],
                "func_name": [
                    401,
                    379,
                    382
                ],
                "Callable": [
                    409,
                    386,
                    366
                ],
                "self.is_freq_type": [
                    392,
                    1645,
                    1949,
                    403,
                    1789
                ],
                "self._get_roll_func": [
                    1092,
                    393,
                    394,
                    1102,
                    1112,
                    1434,
                    1950,
                    1599
                ],
                "func": [
                    1283,
                    1315,
                    519,
                    393,
                    394,
                    521,
                    1289,
                    493,
                    1967,
                    1938,
                    499,
                    1300,
                    1078,
                    1303,
                    1082,
                    509,
                    1278
                ],
                "partial": [
                    394,
                    1460,
                    1112,
                    1309,
                    1598
                ],
                "self._get_window": [
                    1600,
                    1185,
                    394,
                    1648,
                    1269,
                    443,
                    1789
                ],
                "validate_baseindexer_support": [
                    401,
                    1636,
                    1782
                ],
                "VariableWindowIndexer": [
                    404
                ],
                "self._on.asi8": [
                    404
                ],
                "FixedWindowIndexer": [
                    405
                ],
                "self._get_win_type": [
                    442
                ],
                "self._create_blocks": [
                    1179,
                    445
                ],
                "block_list": [
                    458,
                    516,
                    446
                ],
                "list": [
                    1033,
                    953,
                    446
                ],
                "window_indexer": [
                    487,
                    447
                ],
                "self._get_window_indexer": [
                    447
                ],
                "Scalar": [
                    450
                ],
                "i": [
                    458,
                    451
                ],
                "b": [
                    451,
                    1795,
                    453,
                    1799,
                    457,
                    1181,
                    1182
                ],
                "enumerate": [
                    451
                ],
                "self._prep_values": [
                    453
                ],
                "b.values": [
                    453
                ],
                "exclude.extend": [
                    457
                ],
                "b.columns": [
                    457
                ],
                "values.size": [
                    463
                ],
                "results.append": [
                    464,
                    514,
                    1191
                ],
                "values.copy": [
                    464
                ],
                "additional_nans": [
                    474,
                    498,
                    469
                ],
                "np.array": [
                    469
                ],
                "is_weighted": [
                    471
                ],
                "x": [
                    483,
                    488,
                    493,
                    498,
                    499,
                    1655,
                    474,
                    477
                ],
                "np.concatenate": [
                    474,
                    498
                ],
                "calculate_min_periods": [
                    480,
                    476
                ],
                "require_min_periods": [
                    484,
                    477
                ],
                "floor": [
                    485,
                    477
                ],
                "start": [
                    493,
                    487
                ],
                "end": [
                    1321,
                    1445,
                    493,
                    487
                ],
                "window_indexer.get_window_bounds": [
                    487
                ],
                "np.errstate": [
                    501
                ],
                "values.ndim": [
                    502
                ],
                "np.apply_along_axis": [
                    503
                ],
                "calc": [
                    505,
                    503
                ],
                "np.asarray": [
                    506
                ],
                "use_numba_cache": [
                    508
                ],
                "NUMBA_FUNC_CACHE": [
                    1284,
                    509,
                    1286
                ],
                "self._center_window": [
                    512
                ],
                "self._wrap_results": [
                    1193,
                    516
                ],
                "how": [
                    1078,
                    519
                ],
                "self._aggregate": [
                    1078,
                    519
                ],
                "args": [
                    519,
                    521,
                    1289,
                    1938,
                    1311,
                    1440,
                    1326,
                    1458,
                    1971,
                    1078,
                    1978,
                    1979,
                    1345,
                    1985,
                    1091,
                    1986,
                    1991,
                    1992,
                    1101,
                    1997,
                    1998,
                    1111,
                    2008,
                    2014,
                    1122,
                    1387,
                    1263,
                    1264,
                    1392,
                    1278
                ],
                "self.apply": [
                    521
                ],
                "agg": [
                    1940,
                    524,
                    1086
                ],
                "aggregate": [
                    1940,
                    1938,
                    524,
                    1086
                ],
                "_shared_docs": [
                    1536,
                    2050,
                    1670,
                    2055,
                    649,
                    526,
                    2063,
                    1936,
                    2068,
                    1943,
                    1956,
                    1195,
                    1076,
                    1333,
                    1976,
                    1471,
                    1983,
                    1089,
                    709,
                    1349,
                    1989,
                    1610,
                    1099,
                    1995,
                    2001,
                    1109,
                    1493,
                    2006,
                    603,
                    2012,
                    1120,
                    2019,
                    1134,
                    1396
                ],
                "dedent": [
                    1536,
                    709,
                    1349,
                    1670,
                    1895,
                    649,
                    2023,
                    1195,
                    526,
                    1134,
                    1904,
                    1041,
                    1396,
                    1333,
                    1493,
                    1050,
                    603
                ],
                "_Window": [
                    770,
                    1126
                ],
                "validate": [
                    1832,
                    946
                ],
                "super": [
                    1953,
                    1986,
                    2052,
                    2021,
                    1832,
                    1992,
                    2057,
                    2093,
                    1966,
                    1998,
                    2065,
                    946,
                    1938,
                    2003,
                    2070,
                    2009,
                    1979,
                    2015
                ],
                "import_optional_dependency": [
                    958
                ],
                "sig": [
                    965,
                    1039
                ],
                "arg_map": [
                    985,
                    994,
                    993
                ],
                "win_args": [
                    1000,
                    994,
                    998
                ],
                "_pop_args": [
                    994
                ],
                "win_args.insert": [
                    998
                ],
                "all_args": [
                    1009,
                    1010,
                    1005
                ],
                "n": [
                    1008,
                    1009,
                    1006,
                    1007
                ],
                "arg_names": [
                    1006
                ],
                "all_args.append": [
                    1009
                ],
                "kwargs.pop": [
                    1441,
                    1484,
                    1328,
                    1009,
                    1267,
                    1268,
                    1459,
                    1527,
                    1114
                ],
                "_validate_win_type": [
                    1012
                ],
                "Tuple": [
                    970,
                    1260,
                    1015
                ],
                "astype": [
                    1034,
                    1182,
                    1039
                ],
                "com.asarray_tuplesafe": [
                    1034
                ],
                "com": [
                    1034
                ],
                "float": [
                    1034,
                    1039
                ],
                "sig.get_window": [
                    1039
                ],
                "_agg_see_also_doc": [
                    1041,
                    1930,
                    1070,
                    1895
                ],
                "_agg_examples_doc": [
                    1904,
                    1050,
                    1931,
                    1071
                ],
                "Substitution": [
                    2049,
                    2054,
                    1929,
                    2061,
                    2067,
                    1942,
                    1955,
                    1069,
                    1975,
                    1981,
                    1088,
                    1988,
                    1098,
                    1994,
                    2000,
                    1108,
                    2005,
                    2011,
                    1119,
                    2017
                ],
                "Appender": [
                    2048,
                    2050,
                    2055,
                    2062,
                    2063,
                    1936,
                    2068,
                    1943,
                    1956,
                    1076,
                    1976,
                    1982,
                    1983,
                    1089,
                    1989,
                    1099,
                    1995,
                    2001,
                    1109,
                    2006,
                    2012,
                    1120,
                    2018,
                    2019
                ],
                "nv.validate_window_func": [
                    1440,
                    1345,
                    1122,
                    1091,
                    1387,
                    1101,
                    1326,
                    1392,
                    1458,
                    1111
                ],
                "nv": [
                    1440,
                    1345,
                    1122,
                    1091,
                    1985,
                    1991,
                    1387,
                    1101,
                    1326,
                    1997,
                    1392,
                    1458,
                    1111,
                    2008,
                    1978,
                    2014
                ],
                "get_weighted_roll_func": [
                    1113,
                    1093,
                    1103
                ],
                "self._apply": [
                    1347,
                    1094,
                    1448,
                    1608,
                    1389,
                    1485,
                    1104,
                    1296,
                    1329,
                    1394,
                    1462,
                    1528,
                    1115,
                    1437,
                    1951
                ],
                "ddof": [
                    1123,
                    1445,
                    1453,
                    2065,
                    1460,
                    1112,
                    2009,
                    2015,
                    1467,
                    1663
                ],
                "zsqrt": [
                    1123,
                    1445
                ],
                "self.var": [
                    1123
                ],
                "Rolling": [
                    1129,
                    2083,
                    2076,
                    2073
                ],
                "_Rolling": [
                    1132
                ],
                "b.notna": [
                    1182
                ],
                "sum": [
                    1979,
                    1183
                ],
                "self._constructor": [
                    1183
                ],
                "raw": [
                    1281,
                    1313,
                    1318,
                    1319,
                    1968,
                    1302,
                    1271,
                    1278
                ],
                "engine": [
                    1280,
                    1969,
                    1274,
                    1301
                ],
                "engine_kwargs": [
                    1289,
                    1970,
                    1275
                ],
                "apply_func": [
                    1286,
                    1288,
                    1323,
                    1297,
                    1277
                ],
                "self._generate_cython_apply_func": [
                    1277
                ],
                "cache_key": [
                    1283,
                    1284,
                    1286
                ],
                "generate_numba_apply_func": [
                    1288
                ],
                "self._get_cython_func_type": [
                    1346,
                    1442,
                    1483,
                    1388,
                    1327,
                    1393,
                    1460,
                    1526,
                    1594,
                    1596,
                    1310
                ],
                "self.obj.index": [
                    1320,
                    1817
                ],
                "begin": [
                    1321,
                    1445
                ],
                "zsqrt_func": [
                    1449
                ],
                "quantile": [
                    1601,
                    1606,
                    2057,
                    2058,
                    1593,
                    1595
                ],
                "interpolation": [
                    1602,
                    2058,
                    1607
                ],
                "other": [
                    1667,
                    1638,
                    1639,
                    1642,
                    1802,
                    1648,
                    2065,
                    2070,
                    1784,
                    1785,
                    1788,
                    1789
                ],
                "pairwise": [
                    1667,
                    1641,
                    1802,
                    2065,
                    2070,
                    1787
                ],
                "X": [
                    1664,
                    1659,
                    1653
                ],
                "X.astype": [
                    1653
                ],
                "Y": [
                    1664,
                    1659,
                    1654
                ],
                "Y.astype": [
                    1654
                ],
                "mean": [
                    1664,
                    1998,
                    1655
                ],
                "x.rolling": [
                    1655
                ],
                "count": [
                    1953,
                    1658,
                    1659,
                    1663
                ],
                "rolling": [
                    1659
                ],
                "bias_adj": [
                    1664,
                    1663
                ],
                "_flex_binary_moment": [
                    1801,
                    1666
                ],
                "other._selected_obj": [
                    1802,
                    1667
                ],
                "_get_cov": [
                    1667
                ],
                "a": [
                    1792,
                    1799
                ],
                "a.rolling": [
                    1792
                ],
                "b.rolling": [
                    1795
                ],
                "a.cov": [
                    1799
                ],
                "a.std": [
                    1799
                ],
                "b.std": [
                    1799
                ],
                "_get_corr": [
                    1802
                ],
                "_Rolling_and_Expanding": [
                    1806
                ],
                "ABCDatetimeIndex": [
                    1810
                ],
                "ABCTimedeltaIndex": [
                    1810
                ],
                "ABCPeriodIndex": [
                    1810
                ],
                "cache_readonly": [
                    1813,
                    1807
                ],
                "self.obj.empty": [
                    1835
                ],
                "self.is_datetimelike": [
                    1866,
                    1835
                ],
                "ABCDateOffset": [
                    1836
                ],
                "timedelta": [
                    1836
                ],
                "self._validate_monotonic": [
                    1839
                ],
                "freq": [
                    1840,
                    1851
                ],
                "self._validate_freq": [
                    1840
                ],
                "freq.nanos": [
                    1851
                ],
                "self._on.is_monotonic_increasing": [
                    1875
                ],
                "self._on.is_monotonic_decreasing": [
                    1875
                ],
                "formatted": [
                    1876,
                    1878,
                    1879
                ],
                "to_offset": [
                    1888
                ],
                "apply": [
                    1966
                ],
                "nv.validate_rolling_func": [
                    1985,
                    1991,
                    1997,
                    2008,
                    1978,
                    2014
                ],
                "max": [
                    1986
                ],
                "_doc_template": [
                    2018,
                    1982,
                    2062
                ],
                "min": [
                    1992
                ],
                "median": [
                    2003
                ],
                "std": [
                    2009
                ],
                "var": [
                    2015
                ],
                "skew": [
                    2021
                ],
                "_agg_doc": [
                    2048,
                    2023
                ],
                "kurt": [
                    2052
                ],
                "cov": [
                    2065
                ],
                "corr": [
                    2070
                ],
                "Rolling.__doc__": [
                    2073
                ],
                "Window.__doc__": [
                    2073
                ],
                "WindowGroupByMixin": [
                    2076
                ],
                "self._groupby.obj": [
                    2091
                ],
                "self._groupby": [
                    2091
                ],
                "self._groupby.obj.set_index": [
                    2091
                ],
                "_gotitem": [
                    2093
                ],
                "ndim": [
                    2093
                ]
            },
            "filtered_variables_in_file": {
                "PandasObject": [
                    62
                ],
                "ShallowMixin": [
                    62
                ],
                "SelectionMixin": [
                    62
                ],
                "_attributes": [
                    63
                ],
                "List": [
                    450,
                    63
                ],
                "exclusions": [
                    72
                ],
                "Set": [
                    72
                ],
                "Optional": [
                    104,
                    1259,
                    396,
                    1260,
                    78,
                    79,
                    80,
                    1261,
                    82,
                    83,
                    214,
                    1015,
                    253,
                    414
                ],
                "Axis": [
                    81
                ],
                "Union": [
                    970,
                    82,
                    1015
                ],
                "Index": [
                    1824,
                    82,
                    157,
                    1814,
                    1821
                ],
                "self.__dict__.update": [
                    87
                ],
                "self.__dict__": [
                    87
                ],
                "self": [
                    512,
                    516,
                    519,
                    1032,
                    521,
                    2090,
                    2091,
                    2092,
                    1078,
                    1082,
                    1594,
                    1596,
                    1599,
                    1600,
                    1092,
                    1094,
                    1095,
                    1608,
                    1102,
                    1104,
                    1105,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    1115,
                    1116,
                    1123,
                    1635,
                    1639,
                    1642,
                    1645,
                    1646,
                    1648,
                    113,
                    116,
                    118,
                    120,
                    1656,
                    1660,
                    127,
                    128,
                    129,
                    130,
                    1667,
                    1177,
                    154,
                    1179,
                    157,
                    159,
                    1183,
                    1185,
                    1186,
                    1187,
                    1188,
                    1189,
                    1193,
                    178,
                    179,
                    180,
                    183,
                    184,
                    187,
                    188,
                    189,
                    190,
                    193,
                    197,
                    229,
                    230,
                    231,
                    235,
                    242,
                    243,
                    244,
                    1269,
                    1270,
                    247,
                    1781,
                    1785,
                    1788,
                    1277,
                    1789,
                    256,
                    1793,
                    1796,
                    266,
                    1802,
                    1296,
                    1810,
                    1815,
                    1816,
                    1817,
                    1820,
                    1821,
                    1310,
                    287,
                    1822,
                    1823,
                    1824,
                    1827,
                    1320,
                    1835,
                    1836,
                    1327,
                    1839,
                    1329,
                    1330,
                    1840,
                    1843,
                    1850,
                    1851,
                    316,
                    1852,
                    1855,
                    1856,
                    1346,
                    1347,
                    324,
                    325,
                    1858,
                    327,
                    328,
                    1861,
                    330,
                    1863,
                    332,
                    1866,
                    337,
                    1875,
                    1876,
                    1877,
                    1888,
                    1891,
                    356,
                    362,
                    1388,
                    1389,
                    1393,
                    1394,
                    392,
                    393,
                    394,
                    400,
                    402,
                    403,
                    404,
                    1434,
                    1437,
                    1949,
                    1950,
                    1951,
                    1442,
                    1448,
                    1450,
                    948,
                    1460,
                    1462,
                    1464,
                    442,
                    443,
                    445,
                    447,
                    963,
                    964,
                    453,
                    965,
                    966,
                    1483,
                    1485,
                    1487,
                    1112,
                    477,
                    481,
                    482,
                    489,
                    490,
                    491,
                    499,
                    1012,
                    1526,
                    503,
                    1528,
                    1530
                ],
                "kwargs": [
                    1527,
                    2052,
                    519,
                    1799,
                    521,
                    1289,
                    2058,
                    2065,
                    1938,
                    2070,
                    1437,
                    1312,
                    1440,
                    1441,
                    1533,
                    1661,
                    1326,
                    1454,
                    1328,
                    1330,
                    1458,
                    1459,
                    1972,
                    1078,
                    442,
                    1978,
                    1468,
                    1979,
                    1345,
                    1985,
                    1091,
                    1347,
                    1986,
                    1606,
                    1095,
                    1607,
                    1608,
                    1991,
                    1992,
                    1484,
                    1101,
                    1997,
                    1998,
                    1105,
                    1490,
                    2003,
                    87,
                    1111,
                    2008,
                    1114,
                    2009,
                    1116,
                    2014,
                    2015,
                    994,
                    1122,
                    1123,
                    2021,
                    1387,
                    1389,
                    1007,
                    1392,
                    1009,
                    1265,
                    1266,
                    1012,
                    1267,
                    1268,
                    1394,
                    1657,
                    509,
                    1278
                ],
                "self.obj": [
                    1824,
                    197,
                    1320,
                    1835,
                    337,
                    178,
                    1823,
                    88,
                    1817,
                    1820,
                    189,
                    127
                ],
                "obj": [
                    516,
                    154,
                    1179,
                    286,
                    287,
                    160,
                    288,
                    162,
                    158,
                    159,
                    295,
                    297,
                    1193,
                    316,
                    445,
                    325,
                    328,
                    456,
                    88,
                    349,
                    96
                ],
                "self.on": [
                    1824,
                    1827,
                    325,
                    1821,
                    2090,
                    2092,
                    1823,
                    1876,
                    1877,
                    1815,
                    89,
                    157,
                    1822,
                    159
                ],
                "on": [
                    89
                ],
                "self.closed": [
                    1189,
                    1866,
                    491,
                    120,
                    90
                ],
                "closed": [
                    90
                ],
                "self.window": [
                    129,
                    130,
                    392,
                    1032,
                    400,
                    402,
                    1177,
                    1949,
                    1836,
                    948,
                    1850,
                    1851,
                    1858,
                    1861,
                    1863,
                    91,
                    1888,
                    1635,
                    1891,
                    229,
                    231,
                    1781
                ],
                "window": [
                    512,
                    1793,
                    1796,
                    1032,
                    1033,
                    1034,
                    139,
                    1035,
                    1039,
                    146,
                    404,
                    405,
                    948,
                    949,
                    953,
                    955,
                    443,
                    956,
                    447,
                    968,
                    468,
                    475,
                    91,
                    477,
                    359,
                    1646,
                    1648,
                    499,
                    1269,
                    1270,
                    1656,
                    1660,
                    1789
                ],
                "self.min_periods": [
                    1856,
                    481,
                    482,
                    1186,
                    1793,
                    1796,
                    230,
                    489,
                    499,
                    118,
                    1656,
                    92,
                    477,
                    1855
                ],
                "min_periods": [
                    480,
                    1445,
                    1321,
                    493,
                    92,
                    476
                ],
                "self.center": [
                    1793,
                    1796,
                    1437,
                    1951,
                    1187,
                    1450,
                    1330,
                    1843,
                    1464,
                    1347,
                    1095,
                    1608,
                    1487,
                    1105,
                    1116,
                    93,
                    490,
                    1389,
                    1394,
                    116,
                    1270,
                    1656,
                    1530,
                    1660
                ],
                "center": [
                    468,
                    93,
                    511
                ],
                "self.win_type": [
                    963,
                    964,
                    965,
                    966,
                    113,
                    1012,
                    1852,
                    94
                ],
                "win_type": [
                    993,
                    994,
                    995,
                    1000,
                    1002,
                    1039,
                    1008,
                    442,
                    443,
                    94
                ],
                "self.win_freq": [
                    1850,
                    1789,
                    1646,
                    95
                ],
                "self.axis": [
                    96,
                    356,
                    1188,
                    362,
                    503,
                    1816
                ],
                "axis": [
                    96
                ],
                "obj._get_axis_number": [
                    96
                ],
                "self.validate": [
                    97
                ],
                "Window": [
                    2073,
                    101
                ],
                "is_bool": [
                    116,
                    1271
                ],
                "is_integer": [
                    1035,
                    955,
                    1861,
                    118
                ],
                "ABCSeries": [
                    127
                ],
                "ABCDataFrame": [
                    456,
                    1823,
                    127
                ],
                "BaseIndexer": [
                    129,
                    1858,
                    1635,
                    133,
                    229,
                    392,
                    396,
                    142,
                    400,
                    949,
                    1781,
                    1177,
                    475,
                    1949
                ],
                "self._validate_get_window_bounds_signature": [
                    130
                ],
                "get_window_bounds_signature": [
                    144,
                    138
                ],
                "parameters.keys": [
                    138,
                    141
                ],
                "parameters": [
                    138,
                    141
                ],
                "inspect.signature": [
                    138,
                    141
                ],
                "inspect": [
                    138,
                    141
                ],
                "window.get_window_bounds": [
                    139
                ],
                "expected_signature": [
                    144,
                    141
                ],
                "get_window_bounds": [
                    142
                ],
                "self._selected_obj": [
                    256,
                    1667,
                    324,
                    1639,
                    1802,
                    1785,
                    154,
                    287
                ],
                "obj.ndim": [
                    158
                ],
                "obj.reindex": [
                    159
                ],
                "obj.columns.difference": [
                    159
                ],
                "obj.columns": [
                    159
                ],
                "blocks": [
                    160,
                    162,
                    451,
                    1193,
                    1181,
                    314,
                    1179,
                    445,
                    446
                ],
                "values": [
                    256,
                    260,
                    261,
                    262,
                    263,
                    264,
                    267,
                    271,
                    273,
                    276,
                    278,
                    280,
                    160,
                    1445,
                    1320,
                    1321,
                    453,
                    463,
                    464,
                    502,
                    503,
                    505,
                    255
                ],
                "obj._to_dict_of_blocks": [
                    160
                ],
                "subset": [
                    2093,
                    177,
                    178,
                    179,
                    181,
                    182
                ],
                "self._shallow_copy": [
                    1642,
                    179,
                    1788
                ],
                "self._reset_cache": [
                    180
                ],
                "subset.ndim": [
                    181
                ],
                "is_scalar": [
                    182
                ],
                "key": [
                    2093,
                    182,
                    183
                ],
                "is_list_like": [
                    182
                ],
                "self._selection": [
                    330,
                    332,
                    183
                ],
                "attr": [
                    193,
                    187,
                    188,
                    189,
                    190
                ],
                "self._internal_names_set": [
                    187
                ],
                "object.__getattribute__": [
                    188
                ],
                "self.obj._dir_additions": [
                    197
                ],
                "Dict": [
                    970,
                    1259,
                    1261,
                    199
                ],
                "attrs_list": [
                    241,
                    246
                ],
                "attr_name": [
                    242,
                    243,
                    244
                ],
                "self._attributes": [
                    243
                ],
                "attrs": [
                    246,
                    247
                ],
                "join": [
                    246
                ],
                "self._window_type": [
                    266,
                    247
                ],
                "url": [
                    250,
                    251
                ],
                "np.ndarray": [
                    352,
                    290,
                    1033,
                    1016,
                    953,
                    253
                ],
                "np": [
                    352,
                    290,
                    503,
                    1033,
                    363,
                    498,
                    506,
                    276,
                    469,
                    278,
                    501,
                    1016,
                    953,
                    474,
                    253
                ],
                "extract_array": [
                    256
                ],
                "is_float_dtype": [
                    260
                ],
                "values.dtype": [
                    260,
                    262,
                    264,
                    267,
                    273
                ],
                "ensure_float64": [
                    271,
                    261,
                    263
                ],
                "is_integer_dtype": [
                    262
                ],
                "needs_i8_conversion": [
                    264
                ],
                "err": [
                    273,
                    1893,
                    461
                ],
                "inf": [
                    276,
                    277,
                    278
                ],
                "np.isinf": [
                    276
                ],
                "inf.any": [
                    277
                ],
                "np.where": [
                    278
                ],
                "np.nan": [
                    469,
                    278
                ],
                "index": [
                    288,
                    297,
                    295
                ],
                "obj.index": [
                    288,
                    328,
                    325
                ],
                "result": [
                    512,
                    514,
                    519,
                    520,
                    522,
                    1182,
                    1183,
                    1184,
                    290,
                    292,
                    295,
                    1191,
                    297,
                    298,
                    1078,
                    1079,
                    314,
                    1082,
                    316,
                    317,
                    318,
                    319,
                    1084,
                    356,
                    361,
                    363,
                    364,
                    503,
                    505,
                    506
                ],
                "result.ndim": [
                    356,
                    361,
                    292,
                    317
                ],
                "Series": [
                    328,
                    1320,
                    295
                ],
                "obj.name": [
                    295
                ],
                "block.columns": [
                    297
                ],
                "block": [
                    297,
                    314,
                    316
                ],
                "final": [
                    328,
                    313,
                    348,
                    350,
                    319
                ],
                "results": [
                    449,
                    514,
                    516,
                    1191,
                    1193,
                    464,
                    314,
                    1180
                ],
                "self._wrap_result": [
                    316
                ],
                "final.append": [
                    328,
                    319
                ],
                "columns": [
                    324,
                    337,
                    338,
                    339,
                    343,
                    345,
                    350
                ],
                "self._selected_obj.columns": [
                    324
                ],
                "self._on.equals": [
                    325
                ],
                "self._on": [
                    325,
                    327,
                    328,
                    2091,
                    1810,
                    1875,
                    404
                ],
                "name": [
                    327,
                    328,
                    336,
                    338,
                    447
                ],
                "self._on.name": [
                    327
                ],
                "selection": [
                    336,
                    338,
                    332
                ],
                "ensure_index": [
                    332
                ],
                "self.obj.columns": [
                    337,
                    1820,
                    1823
                ],
                "indexer": [
                    338,
                    339
                ],
                "columns.get_indexer": [
                    338
                ],
                "selection.tolist": [
                    338
                ],
                "columns.take": [
                    339
                ],
                "exclude": [
                    450,
                    516,
                    457,
                    342,
                    343
                ],
                "c": [
                    343
                ],
                "DataError": [
                    346,
                    461
                ],
                "obj.astype": [
                    349
                ],
                "reindex": [
                    350
                ],
                "concat": [
                    350
                ],
                "FrameOrSeries": [
                    300
                ],
                "offset": [
                    1314,
                    359,
                    360,
                    362,
                    468,
                    469,
                    1270,
                    1278
                ],
                "calculate_center_offset": [
                    468,
                    1270,
                    359
                ],
                "lead_indexer": [
                    361,
                    362,
                    363
                ],
                "np.copy": [
                    363
                ],
                "window_func": [
                    384,
                    1434,
                    1309,
                    1437,
                    1950,
                    1951,
                    1442,
                    1445,
                    1321,
                    1327,
                    1330,
                    1460,
                    1463,
                    1594,
                    1596,
                    1598,
                    1346,
                    1347,
                    1092,
                    1093,
                    1095,
                    1608,
                    1483,
                    1102,
                    1103,
                    1486,
                    1105,
                    1112,
                    1113,
                    1116,
                    1388,
                    1389,
                    1393,
                    1394,
                    1526,
                    1529,
                    379,
                    380
                ],
                "window_aggregations": [
                    379
                ],
                "func_name": [
                    401,
                    379,
                    382
                ],
                "Callable": [
                    409,
                    386,
                    366
                ],
                "self.is_freq_type": [
                    392,
                    1645,
                    1949,
                    403,
                    1789
                ],
                "self._get_roll_func": [
                    1092,
                    393,
                    394,
                    1102,
                    1112,
                    1434,
                    1950,
                    1599
                ],
                "func": [
                    1283,
                    1315,
                    519,
                    393,
                    394,
                    521,
                    1289,
                    493,
                    1967,
                    1938,
                    499,
                    1300,
                    1078,
                    1303,
                    1082,
                    509,
                    1278
                ],
                "partial": [
                    394,
                    1460,
                    1112,
                    1309,
                    1598
                ],
                "self._get_window": [
                    1600,
                    1185,
                    394,
                    1648,
                    1269,
                    443,
                    1789
                ],
                "validate_baseindexer_support": [
                    401,
                    1636,
                    1782
                ],
                "VariableWindowIndexer": [
                    404
                ],
                "self._on.asi8": [
                    404
                ],
                "FixedWindowIndexer": [
                    405
                ],
                "self._get_win_type": [
                    442
                ],
                "self._create_blocks": [
                    1179,
                    445
                ],
                "block_list": [
                    458,
                    516,
                    446
                ],
                "window_indexer": [
                    487,
                    447
                ],
                "self._get_window_indexer": [
                    447
                ],
                "Scalar": [
                    450
                ],
                "i": [
                    458,
                    451
                ],
                "b": [
                    451,
                    1795,
                    453,
                    1799,
                    457,
                    1181,
                    1182
                ],
                "self._prep_values": [
                    453
                ],
                "b.values": [
                    453
                ],
                "exclude.extend": [
                    457
                ],
                "b.columns": [
                    457
                ],
                "values.size": [
                    463
                ],
                "results.append": [
                    464,
                    514,
                    1191
                ],
                "values.copy": [
                    464
                ],
                "additional_nans": [
                    474,
                    498,
                    469
                ],
                "np.array": [
                    469
                ],
                "is_weighted": [
                    471
                ],
                "x": [
                    483,
                    488,
                    493,
                    498,
                    499,
                    1655,
                    474,
                    477
                ],
                "np.concatenate": [
                    474,
                    498
                ],
                "calculate_min_periods": [
                    480,
                    476
                ],
                "require_min_periods": [
                    484,
                    477
                ],
                "floor": [
                    485,
                    477
                ],
                "start": [
                    493,
                    487
                ],
                "end": [
                    1321,
                    1445,
                    493,
                    487
                ],
                "window_indexer.get_window_bounds": [
                    487
                ],
                "np.errstate": [
                    501
                ],
                "values.ndim": [
                    502
                ],
                "np.apply_along_axis": [
                    503
                ],
                "calc": [
                    505,
                    503
                ],
                "np.asarray": [
                    506
                ],
                "use_numba_cache": [
                    508
                ],
                "NUMBA_FUNC_CACHE": [
                    1284,
                    509,
                    1286
                ],
                "self._center_window": [
                    512
                ],
                "self._wrap_results": [
                    1193,
                    516
                ],
                "how": [
                    1078,
                    519
                ],
                "self._aggregate": [
                    1078,
                    519
                ],
                "args": [
                    519,
                    521,
                    1289,
                    1938,
                    1311,
                    1440,
                    1326,
                    1458,
                    1971,
                    1078,
                    1978,
                    1979,
                    1345,
                    1985,
                    1091,
                    1986,
                    1991,
                    1992,
                    1101,
                    1997,
                    1998,
                    1111,
                    2008,
                    2014,
                    1122,
                    1387,
                    1263,
                    1264,
                    1392,
                    1278
                ],
                "self.apply": [
                    521
                ],
                "agg": [
                    1940,
                    524,
                    1086
                ],
                "aggregate": [
                    1940,
                    1938,
                    524,
                    1086
                ],
                "_shared_docs": [
                    1536,
                    2050,
                    1670,
                    2055,
                    649,
                    526,
                    2063,
                    1936,
                    2068,
                    1943,
                    1956,
                    1195,
                    1076,
                    1333,
                    1976,
                    1471,
                    1983,
                    1089,
                    709,
                    1349,
                    1989,
                    1610,
                    1099,
                    1995,
                    2001,
                    1109,
                    1493,
                    2006,
                    603,
                    2012,
                    1120,
                    2019,
                    1134,
                    1396
                ],
                "dedent": [
                    1536,
                    709,
                    1349,
                    1670,
                    1895,
                    649,
                    2023,
                    1195,
                    526,
                    1134,
                    1904,
                    1041,
                    1396,
                    1333,
                    1493,
                    1050,
                    603
                ],
                "_Window": [
                    770,
                    1126
                ],
                "validate": [
                    1832,
                    946
                ],
                "import_optional_dependency": [
                    958
                ],
                "sig": [
                    965,
                    1039
                ],
                "arg_map": [
                    985,
                    994,
                    993
                ],
                "win_args": [
                    1000,
                    994,
                    998
                ],
                "_pop_args": [
                    994
                ],
                "win_args.insert": [
                    998
                ],
                "all_args": [
                    1009,
                    1010,
                    1005
                ],
                "n": [
                    1008,
                    1009,
                    1006,
                    1007
                ],
                "arg_names": [
                    1006
                ],
                "all_args.append": [
                    1009
                ],
                "kwargs.pop": [
                    1441,
                    1484,
                    1328,
                    1009,
                    1267,
                    1268,
                    1459,
                    1527,
                    1114
                ],
                "_validate_win_type": [
                    1012
                ],
                "Tuple": [
                    970,
                    1260,
                    1015
                ],
                "astype": [
                    1034,
                    1182,
                    1039
                ],
                "com.asarray_tuplesafe": [
                    1034
                ],
                "com": [
                    1034
                ],
                "sig.get_window": [
                    1039
                ],
                "_agg_see_also_doc": [
                    1041,
                    1930,
                    1070,
                    1895
                ],
                "_agg_examples_doc": [
                    1904,
                    1050,
                    1931,
                    1071
                ],
                "Substitution": [
                    2049,
                    2054,
                    1929,
                    2061,
                    2067,
                    1942,
                    1955,
                    1069,
                    1975,
                    1981,
                    1088,
                    1988,
                    1098,
                    1994,
                    2000,
                    1108,
                    2005,
                    2011,
                    1119,
                    2017
                ],
                "Appender": [
                    2048,
                    2050,
                    2055,
                    2062,
                    2063,
                    1936,
                    2068,
                    1943,
                    1956,
                    1076,
                    1976,
                    1982,
                    1983,
                    1089,
                    1989,
                    1099,
                    1995,
                    2001,
                    1109,
                    2006,
                    2012,
                    1120,
                    2018,
                    2019
                ],
                "nv.validate_window_func": [
                    1440,
                    1345,
                    1122,
                    1091,
                    1387,
                    1101,
                    1326,
                    1392,
                    1458,
                    1111
                ],
                "nv": [
                    1440,
                    1345,
                    1122,
                    1091,
                    1985,
                    1991,
                    1387,
                    1101,
                    1326,
                    1997,
                    1392,
                    1458,
                    1111,
                    2008,
                    1978,
                    2014
                ],
                "get_weighted_roll_func": [
                    1113,
                    1093,
                    1103
                ],
                "self._apply": [
                    1347,
                    1094,
                    1448,
                    1608,
                    1389,
                    1485,
                    1104,
                    1296,
                    1329,
                    1394,
                    1462,
                    1528,
                    1115,
                    1437,
                    1951
                ],
                "ddof": [
                    1123,
                    1445,
                    1453,
                    2065,
                    1460,
                    1112,
                    2009,
                    2015,
                    1467,
                    1663
                ],
                "zsqrt": [
                    1123,
                    1445
                ],
                "self.var": [
                    1123
                ],
                "Rolling": [
                    1129,
                    2083,
                    2076,
                    2073
                ],
                "_Rolling": [
                    1132
                ],
                "b.notna": [
                    1182
                ],
                "self._constructor": [
                    1183
                ],
                "raw": [
                    1281,
                    1313,
                    1318,
                    1319,
                    1968,
                    1302,
                    1271,
                    1278
                ],
                "engine": [
                    1280,
                    1969,
                    1274,
                    1301
                ],
                "engine_kwargs": [
                    1289,
                    1970,
                    1275
                ],
                "apply_func": [
                    1286,
                    1288,
                    1323,
                    1297,
                    1277
                ],
                "self._generate_cython_apply_func": [
                    1277
                ],
                "cache_key": [
                    1283,
                    1284,
                    1286
                ],
                "generate_numba_apply_func": [
                    1288
                ],
                "self._get_cython_func_type": [
                    1346,
                    1442,
                    1483,
                    1388,
                    1327,
                    1393,
                    1460,
                    1526,
                    1594,
                    1596,
                    1310
                ],
                "self.obj.index": [
                    1320,
                    1817
                ],
                "begin": [
                    1321,
                    1445
                ],
                "zsqrt_func": [
                    1449
                ],
                "quantile": [
                    1601,
                    1606,
                    2057,
                    2058,
                    1593,
                    1595
                ],
                "interpolation": [
                    1602,
                    2058,
                    1607
                ],
                "other": [
                    1667,
                    1638,
                    1639,
                    1642,
                    1802,
                    1648,
                    2065,
                    2070,
                    1784,
                    1785,
                    1788,
                    1789
                ],
                "pairwise": [
                    1667,
                    1641,
                    1802,
                    2065,
                    2070,
                    1787
                ],
                "X": [
                    1664,
                    1659,
                    1653
                ],
                "X.astype": [
                    1653
                ],
                "Y": [
                    1664,
                    1659,
                    1654
                ],
                "Y.astype": [
                    1654
                ],
                "mean": [
                    1664,
                    1998,
                    1655
                ],
                "x.rolling": [
                    1655
                ],
                "count": [
                    1953,
                    1658,
                    1659,
                    1663
                ],
                "rolling": [
                    1659
                ],
                "bias_adj": [
                    1664,
                    1663
                ],
                "_flex_binary_moment": [
                    1801,
                    1666
                ],
                "other._selected_obj": [
                    1802,
                    1667
                ],
                "_get_cov": [
                    1667
                ],
                "a": [
                    1792,
                    1799
                ],
                "a.rolling": [
                    1792
                ],
                "b.rolling": [
                    1795
                ],
                "a.cov": [
                    1799
                ],
                "a.std": [
                    1799
                ],
                "b.std": [
                    1799
                ],
                "_get_corr": [
                    1802
                ],
                "_Rolling_and_Expanding": [
                    1806
                ],
                "ABCDatetimeIndex": [
                    1810
                ],
                "ABCTimedeltaIndex": [
                    1810
                ],
                "ABCPeriodIndex": [
                    1810
                ],
                "cache_readonly": [
                    1813,
                    1807
                ],
                "self.obj.empty": [
                    1835
                ],
                "self.is_datetimelike": [
                    1866,
                    1835
                ],
                "ABCDateOffset": [
                    1836
                ],
                "timedelta": [
                    1836
                ],
                "self._validate_monotonic": [
                    1839
                ],
                "freq": [
                    1840,
                    1851
                ],
                "self._validate_freq": [
                    1840
                ],
                "freq.nanos": [
                    1851
                ],
                "self._on.is_monotonic_increasing": [
                    1875
                ],
                "self._on.is_monotonic_decreasing": [
                    1875
                ],
                "formatted": [
                    1876,
                    1878,
                    1879
                ],
                "to_offset": [
                    1888
                ],
                "apply": [
                    1966
                ],
                "nv.validate_rolling_func": [
                    1985,
                    1991,
                    1997,
                    2008,
                    1978,
                    2014
                ],
                "_doc_template": [
                    2018,
                    1982,
                    2062
                ],
                "median": [
                    2003
                ],
                "std": [
                    2009
                ],
                "var": [
                    2015
                ],
                "skew": [
                    2021
                ],
                "_agg_doc": [
                    2048,
                    2023
                ],
                "kurt": [
                    2052
                ],
                "cov": [
                    2065
                ],
                "corr": [
                    2070
                ],
                "Rolling.__doc__": [
                    2073
                ],
                "Window.__doc__": [
                    2073
                ],
                "WindowGroupByMixin": [
                    2076
                ],
                "self._groupby.obj": [
                    2091
                ],
                "self._groupby": [
                    2091
                ],
                "self._groupby.obj.set_index": [
                    2091
                ],
                "_gotitem": [
                    2093
                ],
                "ndim": [
                    2093
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_18/pandas/tests/window/test_base_indexer.py",
                "test_function": "test_rolling_forward_skewness",
                "test_function_code": "@pytest.mark.parametrize(\"constructor\", [Series, DataFrame])\ndef test_rolling_forward_skewness(constructor):\n    values = np.arange(10)\n    values[5] = 100.0\n\n    indexer = FixedForwardWindowIndexer(window_size=5)\n    rolling = constructor(values).rolling(window=indexer, min_periods=3)\n    result = rolling.skew()\n\n    expected = constructor(\n        [\n            0.0,\n            2.232396,\n            2.229508,\n            2.228340,\n            2.229091,\n            2.231989,\n            0.0,\n            0.0,\n            np.nan,\n            np.nan,\n        ]\n    )\n    tm.assert_equal(result, expected)",
                "test_error": "NotImplementedError: skew is not supported with using a BaseIndexer subclasses. You can use .apply() with skew.",
                "full_test_error": "constructor = <class 'pandas.core.series.Series'>\n\n    @pytest.mark.parametrize(\"constructor\", [Series, DataFrame])\n    def test_rolling_forward_skewness(constructor):\n        values = np.arange(10)\n        values[5] = 100.0\n    \n        indexer = FixedForwardWindowIndexer(window_size=5)\n        rolling = constructor(values).rolling(window=indexer, min_periods=3)\n>       result = rolling.skew()\n\npandas/tests/window/test_base_indexer.py:196: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/window/rolling.py:2021: in skew\n    return super().skew(**kwargs)\npandas/core/window/rolling.py:1485: in skew\n    return self._apply(\npandas/core/window/rolling.py:447: in _apply\n    window_indexer = self._get_window_indexer(window, name)\npandas/core/window/rolling.py:401: in _get_window_indexer\n    validate_baseindexer_support(func_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfunc_name = 'skew'\n\n    def validate_baseindexer_support(func_name: Optional[str]) -> None:\n        # GH 32865: These functions work correctly with a BaseIndexer subclass\n        BASEINDEXER_WHITELIST = {\n            \"count\",\n            \"min\",\n            \"max\",\n            \"mean\",\n            \"sum\",\n            \"median\",\n            \"std\",\n            \"var\",\n            \"kurt\",\n            \"quantile\",\n        }\n        if isinstance(func_name, str) and func_name not in BASEINDEXER_WHITELIST:\n>           raise NotImplementedError(\n                f\"{func_name} is not supported with using a BaseIndexer \"\n                f\"subclasses. You can use .apply() with {func_name}.\"\n            )\nE           NotImplementedError: skew is not supported with using a BaseIndexer subclasses. You can use .apply() with skew.\n\npandas/core/window/common.py:344: NotImplementedError",
                "traceback": "pandas/core/window/rolling.py:2021: in skew\n    return super().skew(**kwargs)\npandas/core/window/rolling.py:1485: in skew\n    return self._apply(\npandas/core/window/rolling.py:447: in _apply\n    window_indexer = self._get_window_indexer(window, name)\npandas/core/window/rolling.py:401: in _get_window_indexer\n    validate_baseindexer_support(func_name)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfunc_name = 'skew'\n\n    def validate_baseindexer_support(func_name: Optional[str]) -> None:\n        # GH 32865: These functions work correctly with a BaseIndexer subclass\n        BASEINDEXER_WHITELIST = {\n            \"count\",\n            \"min\",\n            \"max\",\n            \"mean\",\n            \"sum\",\n            \"median\",\n            \"std\",\n            \"var\",\n            \"kurt\",\n            \"quantile\",\n        }\n        if isinstance(func_name, str) and func_name not in BASEINDEXER_WHITELIST:\n>           raise NotImplementedError(\n                f\"{func_name} is not supported with using a BaseIndexer \"\n                f\"subclasses. You can use .apply() with {func_name}.\"\n            )\nE           NotImplementedError: skew is not supported with using a BaseIndexer subclasses. You can use .apply() with skew.\n\npandas/core/window/common.py:344: NotImplementedError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('constructor', [Series, DataFrame])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_18/pandas/tests/window/test_base_indexer.py",
                "test_function": "test_rolling_forward_skewness",
                "test_function_code": "@pytest.mark.parametrize(\"constructor\", [Series, DataFrame])\ndef test_rolling_forward_skewness(constructor):\n    values = np.arange(10)\n    values[5] = 100.0\n\n    indexer = FixedForwardWindowIndexer(window_size=5)\n    rolling = constructor(values).rolling(window=indexer, min_periods=3)\n    result = rolling.skew()\n\n    expected = constructor(\n        [\n            0.0,\n            2.232396,\n            2.229508,\n            2.228340,\n            2.229091,\n            2.231989,\n            0.0,\n            0.0,\n            np.nan,\n            np.nan,\n        ]\n    )\n    tm.assert_equal(result, expected)",
                "test_error": "NotImplementedError: skew is not supported with using a BaseIndexer subclasses. You can use .apply() with skew.",
                "full_test_error": "constructor = <class 'pandas.core.frame.DataFrame'>\n\n    @pytest.mark.parametrize(\"constructor\", [Series, DataFrame])\n    def test_rolling_forward_skewness(constructor):\n        values = np.arange(10)\n        values[5] = 100.0\n    \n        indexer = FixedForwardWindowIndexer(window_size=5)\n        rolling = constructor(values).rolling(window=indexer, min_periods=3)\n>       result = rolling.skew()\n\npandas/tests/window/test_base_indexer.py:196: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/window/rolling.py:2021: in skew\n    return super().skew(**kwargs)\npandas/core/window/rolling.py:1485: in skew\n    return self._apply(\npandas/core/window/rolling.py:447: in _apply\n    window_indexer = self._get_window_indexer(window, name)\npandas/core/window/rolling.py:401: in _get_window_indexer\n    validate_baseindexer_support(func_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfunc_name = 'skew'\n\n    def validate_baseindexer_support(func_name: Optional[str]) -> None:\n        # GH 32865: These functions work correctly with a BaseIndexer subclass\n        BASEINDEXER_WHITELIST = {\n            \"count\",\n            \"min\",\n            \"max\",\n            \"mean\",\n            \"sum\",\n            \"median\",\n            \"std\",\n            \"var\",\n            \"kurt\",\n            \"quantile\",\n        }\n        if isinstance(func_name, str) and func_name not in BASEINDEXER_WHITELIST:\n>           raise NotImplementedError(\n                f\"{func_name} is not supported with using a BaseIndexer \"\n                f\"subclasses. You can use .apply() with {func_name}.\"\n            )\nE           NotImplementedError: skew is not supported with using a BaseIndexer subclasses. You can use .apply() with skew.\n\npandas/core/window/common.py:344: NotImplementedError",
                "traceback": "pandas/core/window/rolling.py:2021: in skew\n    return super().skew(**kwargs)\npandas/core/window/rolling.py:1485: in skew\n    return self._apply(\npandas/core/window/rolling.py:447: in _apply\n    window_indexer = self._get_window_indexer(window, name)\npandas/core/window/rolling.py:401: in _get_window_indexer\n    validate_baseindexer_support(func_name)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfunc_name = 'skew'\n\n    def validate_baseindexer_support(func_name: Optional[str]) -> None:\n        # GH 32865: These functions work correctly with a BaseIndexer subclass\n        BASEINDEXER_WHITELIST = {\n            \"count\",\n            \"min\",\n            \"max\",\n            \"mean\",\n            \"sum\",\n            \"median\",\n            \"std\",\n            \"var\",\n            \"kurt\",\n            \"quantile\",\n        }\n        if isinstance(func_name, str) and func_name not in BASEINDEXER_WHITELIST:\n>           raise NotImplementedError(\n                f\"{func_name} is not supported with using a BaseIndexer \"\n                f\"subclasses. You can use .apply() with {func_name}.\"\n            )\nE           NotImplementedError: skew is not supported with using a BaseIndexer subclasses. You can use .apply() with skew.\n\npandas/core/window/common.py:344: NotImplementedError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('constructor', [Series, DataFrame])"
                ]
            }
        ]
    }
}