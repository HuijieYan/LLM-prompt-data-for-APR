{
    "1.1.1": "def append(self, other, ignore_index=False, verify_integrity=False, sort=None):\n    \n    if isinstance(other, (Series, dict)):\n        if isinstance(other, dict):\n            other = Series(other)\n        if other.name is None and not ignore_index:\n            raise TypeError(\n                \"Can only append a Series if ignore_index=True\"\n                \" or if the Series has a name\"\n            )\n\n        if other.name is None:\n            index = None\n        else:\n            # other must have the same index name as self, otherwise\n            # index name will be reset\n            index = Index([other.name], name=self.index.name)\n\n        idx_diff = other.index.difference(self.columns)\n        try:\n            combined_columns = self.columns.append(idx_diff)\n        except TypeError:\n            combined_columns = self.columns.astype(object).append(idx_diff)\n        other = other.reindex(combined_columns, copy=False)\n        other = DataFrame(\n            other.values.reshape((1, len(other))),\n            index=index,\n            columns=combined_columns,\n        )\n        other = other._convert(datetime=True, timedelta=True)\n        if not self.columns.equals(combined_columns):\n            self = self.reindex(columns=combined_columns)\n    elif isinstance(other, list) and not isinstance(other[0], DataFrame):\n        other = DataFrame(other)\n        if (self.columns.get_indexer(other.columns) >= 0).all():\n            other = other.reindex(columns=self.columns)\n\n    from pandas.core.reshape.concat import concat\n\n    if isinstance(other, (list, tuple)):\n        to_concat = [self] + other\n    else:\n        to_concat = [self, other]\n    return concat(\n        to_concat,\n        ignore_index=ignore_index,\n        verify_integrity=verify_integrity,\n        sort=sort,\n    )\n",
    "1.1.2": "Append rows of `other` to the end of caller, returning a new object.\n\nColumns in `other` that are not in the caller are added as new columns.\n\nParameters\n----------\nother : DataFrame or Series/dict-like object, or list of these\n    The data to append.\nignore_index : bool, default False\n    If True, do not use the index labels.\nverify_integrity : bool, default False\n    If True, raise ValueError on creating index with duplicates.\nsort : bool, default None\n    Sort columns if the columns of `self` and `other` are not aligned.\n    The default sorting is deprecated and will change to not-sorting\n    in a future version of pandas. Explicitly pass ``sort=True`` to\n    silence the warning and sort. Explicitly pass ``sort=False`` to\n    silence the warning and not sort.\n\n    .. versionadded:: 0.23.0\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nconcat : General function to concatenate DataFrame or Series objects.\n\nNotes\n-----\nIf a list of dict/series is passed and the keys are all contained in\nthe DataFrame's index, the order of the columns in the resulting\nDataFrame will be unchanged.\n\nIteratively appending rows to a DataFrame can be more computationally\nintensive than a single concatenate. A better solution is to append\nthose rows to a list and then concatenate the list with the original\nDataFrame all at once.\n\nExamples\n--------\n\n>>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n>>> df\n   A  B\n0  1  2\n1  3  4\n>>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n>>> df.append(df2)\n   A  B\n0  1  2\n1  3  4\n0  5  6\n1  7  8\n\nWith `ignore_index` set to True:\n\n>>> df.append(df2, ignore_index=True)\n   A  B\n0  1  2\n1  3  4\n2  5  6\n3  7  8\n\nThe following, while not recommended methods for generating DataFrames,\nshow two ways to generate a DataFrame from multiple data sources.\n\nLess efficient:\n\n>>> df = pd.DataFrame(columns=['A'])\n>>> for i in range(5):\n...     df = df.append({'A': i}, ignore_index=True)\n>>> df\n   A\n0  0\n1  1\n2  2\n3  3\n4  4\n\nMore efficient:\n\n>>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n...           ignore_index=True)\n   A\n0  0\n1  1\n2  2\n3  3\n4  4",
    "1.2.1": "class DataFrame(NDFrame)",
    "1.2.2": "Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n\nData structure also contains labeled axes (rows and columns).\nArithmetic operations align on both row and column labels. Can be\nthought of as a dict-like container for Series objects. The primary\npandas data structure.\n\nParameters\n----------\ndata : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n    Dict can contain Series, arrays, constants, or list-like objects.\n\n    .. versionchanged:: 0.23.0\n       If data is a dict, column order follows insertion-order for\n       Python 3.6 and later.\n\n    .. versionchanged:: 0.25.0\n       If data is a list of dicts, column order follows insertion-order\n       for Python 3.6 and later.\n\nindex : Index or array-like\n    Index to use for resulting frame. Will default to RangeIndex if\n    no indexing information part of input data and no index provided.\ncolumns : Index or array-like\n    Column labels to use for resulting frame. Will default to\n    RangeIndex (0, 1, 2, ..., n) if no column labels are provided.\ndtype : dtype, default None\n    Data type to force. Only a single dtype is allowed. If None, infer.\ncopy : bool, default False\n    Copy data from inputs. Only affects DataFrame / 2d ndarray input.\n\nSee Also\n--------\nDataFrame.from_records : Constructor from tuples, also record arrays.\nDataFrame.from_dict : From dicts of Series, arrays, or dicts.\nDataFrame.from_items : From sequence of (key, value) pairs\n    read_csv, pandas.read_table, pandas.read_clipboard.\n\nExamples\n--------\nConstructing DataFrame from a dictionary.\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n\nNotice that the inferred dtype is int64.\n\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nTo enforce a single dtype:\n\n>>> df = pd.DataFrame(data=d, dtype=np.int8)\n>>> df.dtypes\ncol1    int8\ncol2    int8\ndtype: object\n\nConstructing DataFrame from numpy ndarray:\n\n>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n...                    columns=['a', 'b', 'c'])\n>>> df2\n   a  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9",
    "1.2.3": [
        "reindex(self, *args, **kwargs)",
        "append(self, other, ignore_index=False, verify_integrity=False, sort=None)"
    ],
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_126/pandas/core/frame.py",
    "1.3.2": [
        "reindex(self, *args, **kwargs)",
        "append(self, other, ignore_index=False, verify_integrity=False, sort=None)"
    ],
    "1.4.1": [
        "    def test_append_empty_list(self):\n        # GH 28769\n        df = DataFrame()\n        result = df.append([])\n        expected = df\n        tm.assert_frame_equal(result, expected)\n        assert result is not df\n\n        df = DataFrame(np.random.randn(5, 4), columns=[\"foo\", \"bar\", \"baz\", \"qux\"])\n        result = df.append([])\n        expected = df\n        tm.assert_frame_equal(result, expected)\n        assert result is not df  # .append() should return a new object"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_126/pandas/tests/frame/test_combine_concat.py"
    ],
    "2.1.1": [
        [
            "E       IndexError: list index out of range"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11d2a53a0>\n\n    def test_append_empty_list(self):\n        # GH 28769\n        df = DataFrame()\n>       result = df.append([])\n\npandas/tests/frame/test_combine_concat.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Empty DataFrame\nColumns: []\nIndex: [], other = [], ignore_index = False\nverify_integrity = False, sort = None\n\n    def append(self, other, ignore_index=False, verify_integrity=False, sort=None):\n        \"\"\"\n        Append rows of `other` to the end of caller, returning a new object.\n    \n        Columns in `other` that are not in the caller are added as new columns.\n    \n        Parameters\n        ----------\n        other : DataFrame or Series/dict-like object, or list of these\n            The data to append.\n        ignore_index : bool, default False\n            If True, do not use the index labels.\n        verify_integrity : bool, default False\n            If True, raise ValueError on creating index with duplicates.\n        sort : bool, default None\n            Sort columns if the columns of `self` and `other` are not aligned.\n            The default sorting is deprecated and will change to not-sorting\n            in a future version of pandas. Explicitly pass ``sort=True`` to\n            silence the warning and sort. Explicitly pass ``sort=False`` to\n            silence the warning and not sort.\n    \n            .. versionadded:: 0.23.0\n    \n        Returns\n        -------\n        DataFrame\n    \n        See Also\n        --------\n        concat : General function to concatenate DataFrame or Series objects.\n    \n        Notes\n        -----\n        If a list of dict/series is passed and the keys are all contained in\n        the DataFrame's index, the order of the columns in the resulting\n        DataFrame will be unchanged.\n    \n        Iteratively appending rows to a DataFrame can be more computationally\n        intensive than a single concatenate. A better solution is to append\n        those rows to a list and then concatenate the list with the original\n        DataFrame all at once.\n    \n        Examples\n        --------\n    \n        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n        >>> df\n           A  B\n        0  1  2\n        1  3  4\n        >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n        >>> df.append(df2)\n           A  B\n        0  1  2\n        1  3  4\n        0  5  6\n        1  7  8\n    \n        With `ignore_index` set to True:\n    \n        >>> df.append(df2, ignore_index=True)\n           A  B\n        0  1  2\n        1  3  4\n        2  5  6\n        3  7  8\n    \n        The following, while not recommended methods for generating DataFrames,\n        show two ways to generate a DataFrame from multiple data sources.\n    \n        Less efficient:\n    \n        >>> df = pd.DataFrame(columns=['A'])\n        >>> for i in range(5):\n        ...     df = df.append({'A': i}, ignore_index=True)\n        >>> df\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n    \n        More efficient:\n    \n        >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n        ...           ignore_index=True)\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n        \"\"\"\n        if isinstance(other, (Series, dict)):\n            if isinstance(other, dict):\n                other = Series(other)\n            if other.name is None and not ignore_index:\n                raise TypeError(\n                    \"Can only append a Series if ignore_index=True\"\n                    \" or if the Series has a name\"\n                )\n    \n            if other.name is None:\n                index = None\n            else:\n                # other must have the same index name as self, otherwise\n                # index name will be reset\n                index = Index([other.name], name=self.index.name)\n    \n            idx_diff = other.index.difference(self.columns)\n            try:\n                combined_columns = self.columns.append(idx_diff)\n            except TypeError:\n                combined_columns = self.columns.astype(object).append(idx_diff)\n            other = other.reindex(combined_columns, copy=False)\n            other = DataFrame(\n                other.values.reshape((1, len(other))),\n                index=index,\n                columns=combined_columns,\n            )\n            other = other._convert(datetime=True, timedelta=True)\n            if not self.columns.equals(combined_columns):\n                self = self.reindex(columns=combined_columns)\n>       elif isinstance(other, list) and not isinstance(other[0], DataFrame):",
            "\npandas/core/frame.py:6946: IndexError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "other": "[]",
                "ignore_index": "False",
                "self.index": "Index([], dtype='object')",
                "self": "Empty DataFrame\nColumns: []\nIndex: []",
                "self.columns": "Index([], dtype='object')",
                "self.reindex": "<bound method DataFrame.reindex of Empty DataFrame\nColumns: []\nIndex: []>",
                "verify_integrity": "False"
            },
            {
                "to_concat": "[Empty DataFrame\nColumns: []\nIndex: []]"
            }
        ],
        [
            {
                "other": "[]",
                "ignore_index": "False",
                "self.index": "RangeIndex(start=0, stop=5, step=1)",
                "self": "        foo       bar       baz       qux\n0  0.314703  0.101233 -0.854464  0.477936\n1  0.459469  0.164615 -1.064718  0.291803\n2 -1.045542 -0.085013 -0.656155  0.301212\n3  0.380916  1.682778 -0.870650 -0.039800\n4  0.770321 -0.350882 -1.119406  1.091009",
                "self.columns": "Index(['foo', 'bar', 'baz', 'qux'], dtype='object')",
                "self.reindex": "<bound method DataFrame.reindex of         foo       bar       baz       qux\n0  0.314703  0.101233 -0.854464  0.477936\n1  0.459469  0.164615 -1.064718  0.291803\n2 -1.045542 -0.085013 -0.656155  0.301212\n3  0.380916  1.682778 -0.870650 -0.039800\n4  0.770321 -0.350882 -1.119406  1.091009>",
                "verify_integrity": "False"
            },
            {
                "to_concat": "[        foo       bar       baz       qux\n0  0.314703  0.101233 -0.854464  0.477936\n1  0.459469  0.164615 -1.064718  0.291803\n2 -1.045542 -0.085013 -0.656155  0.301212\n3  0.380916  1.682778 -0.870650 -0.039800\n4  0.770321 -0.350882 -1.119406  1.091009]"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "other": "list",
                "ignore_index": "bool",
                "self.index": "Index",
                "self": "DataFrame",
                "self.columns": "Index",
                "self.reindex": "method",
                "verify_integrity": "bool"
            },
            {
                "to_concat": "list"
            }
        ],
        [
            {
                "other": "list",
                "ignore_index": "bool",
                "self.index": "RangeIndex",
                "self": "DataFrame",
                "self.columns": "Index",
                "self.reindex": "method",
                "verify_integrity": "bool"
            },
            {
                "to_concat": "list"
            }
        ]
    ],
    "3.1.1": [
        "DataFrame.append with empty list raises IndexError\n"
    ],
    "3.1.2": [
        "Code Sample\n>>> import pandas\n>>> pandas.DataFrame().append([])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \".env\\lib\\site-packages\\pandas\\core\\frame.py\", line 7108, in append\n    elif isinstance(other, list) and not isinstance(other[0], DataFrame):\nIndexError: list index out of range\n>>> pandas.__version__\n'0.25.1'\nProblem description\nCrash when passing empty sequence to DataFrame.append\n\nExpected Output\nNo crash.\nThe source DataFrame is returned intact.\n\nVersion\nVersion 0.25.1. Happens in master.\nProblem line\nhttps://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L7014\n"
    ]
}