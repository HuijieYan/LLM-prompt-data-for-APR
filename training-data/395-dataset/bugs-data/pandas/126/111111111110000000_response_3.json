{
    "pandas": [
        {
            "bugID": 126,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 6822,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def append(self, other, ignore_index=False, verify_integrity=False, sort=None, copy=True):\n    from pandas.core.reshape.concat import concat\n    \"\"\"\n    Append rows of `other` to the end of caller, returning a new object.\n    \n    Columns in `other` that are not in the caller are added as new columns.\n    \n    Parameters\n    ----------\n    other : DataFrame or Series/dict-like object, or list of these\n        The data to append.\n    ignore_index : bool, default False\n        If True, do not use the index labels.\n    verify_integrity : bool, default False\n        If True, raise ValueError on creating index with duplicates.\n    sort : bool, default None\n        Sort columns if the columns of `self` and `other` are not aligned.\n        The default sorting is deprecated and will change to not-sorting\n        in a future version of pandas. Explicitly pass ``sort=True`` to\n        silence the warning and sort. Explicitly pass ``sort=False`` to\n        silence the warning and not sort.\n    \n        .. versionadded:: 0.23.0\n    \n    copy : bool, default True\n        Whether to copy the `DataFrame` before performing the append operation.\n        Deprecated at 1.0.0.\n    \n    Returns\n    -------\n    DataFrame\n    \n    See Also\n    --------\n    concat : General function to concatenate DataFrame or Series objects.\n    \n    Notes\n    -----\n    If a list of dict/series is passed and the keys are all contained in\n    the DataFrame's index, the order of the columns in the resulting\n    DataFrame will be unchanged.\n    \n    Iteratively appending rows to a DataFrame can be more computationally\n    intensive than a single concatenate. A better solution is to append\n    those rows to a list and then concatenate the list with the original\n    DataFrame all at once.\n    \n    Examples\n    --------\n    \n    >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n    >>> df\n       A  B\n    0  1  2\n    1  3  4\n    >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n    >>> df.append(df2)\n       A  B\n    0  1  2\n    1  3  4\n    0  5  6\n    1  7  8\n    \n    With `ignore_index` set to True:\n    \n    >>> df.append(df2, ignore_index=True)\n       A  B\n    0  1  2\n    1  3  4\n    2  5  6\n    3  7  8\n    \n    The following, while not recommended methods for generating DataFrames,\n    show two ways to generate a DataFrame from multiple data sources.\n    \n    Less efficient:\n    \n    >>> df = pd.DataFrame(columns=['A'])\n    >>> for i in range(5):\n    ...     df = df.append({'A': i}, ignore_index=True)\n    >>> df\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n    \n    More efficient:\n    \n    >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n    ...           ignore_index=True)\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n    \"\"\"\n    if not isinstance(other, list):\n        other = [other]\n    if len(other) == 0:\n        return self.copy()\n    \n    if isinstance(other[0], DataFrame):\n        from pandas.core.reshape.concat import concat\n        to_concat = [self] + other\n        return concat(\n            to_concat,\n            ignore_index=ignore_index,\n            verify_integrity=verify_integrity,\n            sort=sort,\n        )\n    \n    other = DataFrame(other)\n    if (self.columns.get_indexer(other.columns) >= 0).all():\n        other = other.reindex(columns=self.columns)\n    df = self.copy()\n    \n    if ignore_index:\n        if verify_integrity:\n            if df.index.intersection(other.index).any():\n                raise ValueError(\n                    \"Indices have overlapping values. \"\n                    \"Either use ignore_index=True or verify_integrity=True\"\n                )\n            index = False\n        else:\n            index = False\n    else:\n        index = None\n    \n    resulting_data = [\n        df, other\n    ]\n    \n    # index may not be DataFrame, so check before try to append to\n    # other\n    if isinstance(other, (DataFrame, Series, np.ndarray)):\n        if isinstance(other, (Series, np.ndarray)):\n            # We must specify the index, because DataFrame other\n            # can have multiple indexes/hashtag/51723. We guarantee here\n            # that the resulting frame has one index hashtag/51725\n            other = other.reshape((1, len(other)))\n    \n        try:\n            other = other.reindex_like(df, method=\"pad\")\n        except ValueError:\n            other.index = df.index.copy()\n    \n        # The length check is invalid after reindex_like, and we rely on\n        # __finalize__ to validate the other's index matching ours\n    key_checked_columns = self.columns.union(other.columns.difference(df.columns))\n    result = concat(\n        resulting_data, axis=0, join=\"outer\", verify_integrity=verify_integrity\n    )\n    \n    if inplace:\n        return self._update_inplace(result)\n    \n    return self._constructor(result).__finalize__(self)"
        }
    ]
}