{
    "pandas": [
        {
            "bugID": 31,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1827,
            "file_name": "pandas/core/groupby/groupby.py",
            "replace_code": "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n    from pandas import concat\n    from pandas import concat\n    \n    def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[str]]:\n        if is_object_dtype(vals):\n            raise TypeError(\"'quantile' cannot be performed against 'object' dtypes!\")\n    \n        inference = None\n        if is_integer_dtype(vals):\n            inference = \"int64\"\n        elif is_datetime64_any_dtype(vals):\n            inference = \"datetime64[ns]\"\n            vals = np.asarray(vals).astype(np.float64)\n    \n        return vals, inference\n    \n    def post_processor(vals: np.ndarray, inference: Optional[str]) -> np.ndarray:\n        if inference:\n            # Check for edge case\n            if not (inference == 'int64' and interpolation in {\"linear\", \"midpoint\"}):\n                vals = vals.astype(inference)\n    \n        return vals\n    \n    results = [\n        self._get_cythonized_result(\n            \"group_quantile\",\n            needs_values=True,\n            needs_mask=True,\n            needs_ngroups=True,\n            cython_dtype=np.dtype(np.float64),\n            aggregate=True,\n            result_is_index=False,\n            pre_processing=pre_processor,\n            post_processing=post_processor,\n            q=qi,\n            interpolation=interpolation,\n        )\n        for qi in np.atleast_1d(q)\n    ]\n    \n    if not isinstance(q, list):\n        return results[0]\n    \n    result = concat(results, axis=0, keys=q)\n    \n    index_names = np.array(result.index.names)\n    result.index.names = np.arange(len(index_names))\n    result = result.reorder_levels(list(range(1, result.index.nlevels)) + [0])\n    result.index.names = index_names[np.concatenate((np.arange(1, result.index.nlevels), [0]))]\n    \n    indices = np.arange(len(result)).reshape([len(q), self.ngroups]).T.flatten()\n    return result.take(indices)"
        }
    ]
}