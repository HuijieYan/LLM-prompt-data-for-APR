{
    "pandas": [
        {
            "bugID": 31,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 1827,
            "file_name": "pandas/core/groupby/groupby.py",
            "replace_code": "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n    from pandas import concat\n    from pandas.core.dtypes.missing import isna\n    from pandas.core.dtypes.dtypes import (\n        is_dtype_equal,\n        is_object_dtype,\n        is_integer_dtype,\n        is_datetime64_dtype,\n    )\n    \"\"\"\n    Return group values at the given quantile, a la numpy.percentile.\n    \n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value(s) between 0 and 1 providing the quantile(s) to compute.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        Method to use when the desired quantile falls between two points.\n    \n    Returns\n    -------\n    Series or DataFrame\n        Return type determined by caller of GroupBy object.\n    \n    See Also\n    --------\n    Series.quantile : Similar method for Series.\n    DataFrame.quantile : Similar method for DataFrame.\n    numpy.percentile : NumPy method to compute qth percentile.\n    \n    Examples\n    --------\n    >>> df = pd.DataFrame([\n    ...     ['a', 1], ['a', 2], ['a', 3],\n    ...     ['b', 1], ['b', 3], ['b', 5]\n    ... ], columns=['key', 'val'])\n    >>> df.groupby('key')['val'].quantile()\n        key\n        a    2.0\n        b    3.0\n    \"\"\"\n    from pandas import concat\n    from pandas.core.dtypes.missing import isna\n    from pandas.core.dtypes.dtypes import (\n        is_dtype_equal,\n        is_object_dtype,\n        is_integer_dtype,\n        is_datetime64_dtype,\n    )\n    \n    def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, str]:\n        if is_object_dtype(vals):\n            raise TypeError(\n                \"'quantile' cannot be performed against 'object' dtypes!\"\n            )\n    \n        inference = \"integer\" if is_integer_dtype(vals) else \"float\"\n        if isna(vals).any():\n            inference = np.dtype(\"f8\") if is_dtype_equal(inference, \"float\") else np.dtype(\"O\")\n        return vals, inference\n    \n    def post_processor(vals: np.ndarray, inference: str) -> np.ndarray:\n        return vals.astype(inference)\n    \n    if not isinstance(q, (list, np.ndarray)):\n        q = [q]\n    \n    results = [\n        self._get_cythonized_result(\n            \"group_quantile\",\n            cython_dtype=np.dtype(np.float64),\n            needs_values=True,\n            q=qi,\n            interpolation=interpolation,\n            pre_processing=pre_processor,\n            post_processing=post_processor,\n        )\n        for qi in q\n    ]\n    result = concat(results, axis=0)\n    if len(q) == 1:\n        result = result.unstack(level=0)\n    elif isinstance(result.columns, pd.MultiIndex) and len(result.columns) == len(q):\n        result = result.T\n    else:\n        result.index = result.index.set_names(\"q\")\n        result.columns.names = [\"\"] * (result.columns.nlevels - 1) + [\"q\"]\n    \n    result = self._set_group_index(result)\n    return result"
        }
    ]
}