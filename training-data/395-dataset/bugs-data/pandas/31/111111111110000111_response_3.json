{
    "pandas": [
        {
            "bugID": 31,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 1827,
            "file_name": "pandas/core/groupby/groupby.py",
            "replace_code": "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n    from pandas import concat\n    from pandas import concat\n    ...\n    \n    # Existing code for pre_processor and post_processor\n    \n    func_kwargs = {\n        \"how\": \"group_quantile\",\n        \"cython_dtype\": np.dtype(np.float64),\n        \"aggregate\": True,\n        \"needs_values\": True,\n        \"needs_mask\": True,\n        \"pre_processing\": pre_processor,\n        \"post_processing\": post_processor,\n        \"q\": q,\n        \"interpolation\": interpolation,\n    }\n    \n    if is_scalar(q):\n        result = self._get_cythonized_result(**func_kwargs)\n    else:\n        results = [self._get_cythonized_result(q=qi, **func_kwargs) for qi in q]\n        result = concat(results, axis=0, keys=q)\n        order = list(range(1, result.index.nlevels)) + [0]\n        index_names = np.array(result.index.names)\n        result.index.names = np.arange(len(index_names))\n        result = result.reorder_levels(order)\n        result.index.names = index_names[order]\n        indices = np.arange(len(result)).reshape([len(q), self.ngroups]).T.flatten()\n        return result.take(indices)"
        }
    ]
}