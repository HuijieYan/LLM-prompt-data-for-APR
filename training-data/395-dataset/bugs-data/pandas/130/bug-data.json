{
    "pandas:130": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_130/pandas/core/groupby/ops.py": {
            "buggy_functions": [],
            "snippets": [
                {
                    "snippet_code": "@cache_readonly",
                    "start_line": 769,
                    "end_line": 770
                }
            ],
            "inscope_functions": [
                "def _get_axes(group):\n    if isinstance(group, Series):\n        return [group.index]\n    else:\n        return group.axes",
                "def _is_indexed_like(obj, axes) -> bool:\n    if isinstance(obj, Series):\n        if len(axes) > 1:\n            return False\n        return obj.index.equals(axes[0])\n    elif isinstance(obj, DataFrame):\n        return obj.index.equals(axes[0])\n\n    return False",
                "def get_splitter(data: NDFrame, *args, **kwargs):\n    if isinstance(data, Series):\n        klass = SeriesSplitter  # type: Type[DataSplitter]\n    else:\n        # i.e. DataFrame\n        klass = FrameSplitter\n\n    return klass(data, *args, **kwargs)",
                "def __init__(\n    self,\n    axis: Index,\n    groupings: \"Sequence[grouper.Grouping]\",\n    sort: bool = True,\n    group_keys: bool = True,\n    mutated: bool = False,\n    indexer: Optional[np.ndarray] = None,\n):\n    assert isinstance(axis, Index), axis\n\n    self._filter_empty_groups = self.compressed = len(groupings) != 1\n    self.axis = axis\n    self.groupings = groupings  # type: Sequence[grouper.Grouping]\n    self.sort = sort\n    self.group_keys = group_keys\n    self.mutated = mutated\n    self.indexer = indexer",
                "@property\ndef shape(self):\n    return tuple(ping.ngroups for ping in self.groupings)",
                "def __iter__(self):\n    return iter(self.indices)",
                "@property\ndef nkeys(self) -> int:\n    return len(self.groupings)",
                "def get_iterator(self, data, axis=0):\n    \"\"\"\n    Groupby iterator\n\n    Returns\n    -------\n    Generator yielding sequence of (name, subsetted object)\n    for each group\n    \"\"\"\n    splitter = self._get_splitter(data, axis=axis)\n    keys = self._get_group_keys()\n    for key, (i, group) in zip(keys, splitter):\n        yield key, group",
                "def _get_splitter(self, data, axis=0):\n    comp_ids, _, ngroups = self.group_info\n    return get_splitter(data, comp_ids, ngroups, axis=axis)",
                "def _get_grouper(self):\n    \"\"\"\n    We are a grouper as part of another's groupings.\n\n    We have a specific method of grouping, so cannot\n    convert to a Index for our grouper.\n    \"\"\"\n    return self.groupings[0].grouper",
                "def _get_group_keys(self):\n    if len(self.groupings) == 1:\n        return self.levels[0]\n    else:\n        comp_ids, _, ngroups = self.group_info\n\n        # provide \"flattened\" iterator for multi-group setting\n        return get_flattened_iterator(comp_ids, ngroups, self.levels, self.codes)",
                "def apply(self, f, data, axis: int = 0):\n    mutated = self.mutated\n    splitter = self._get_splitter(data, axis=axis)\n    group_keys = self._get_group_keys()\n    result_values = None\n\n    sdata = splitter._get_sorted_data()\n    if sdata.ndim == 2 and np.any(sdata.dtypes.apply(is_extension_array_dtype)):\n        # calling splitter.fast_apply will raise TypeError via apply_frame_axis0\n        #  if we pass EA instead of ndarray\n        #  TODO: can we have a workaround for EAs backed by ndarray?\n        pass\n\n    elif (\n        com.get_callable_name(f) not in base.plotting_methods\n        and hasattr(splitter, \"fast_apply\")\n        and axis == 0\n        # with MultiIndex, apply_frame_axis0 would raise InvalidApply\n        # TODO: can we make this check prettier?\n        and not sdata.index._has_complex_internals\n    ):\n        try:\n            result_values, mutated = splitter.fast_apply(f, group_keys)\n\n            # If the fast apply path could be used we can return here.\n            # Otherwise we need to fall back to the slow implementation.\n            if len(result_values) == len(group_keys):\n                return group_keys, result_values, mutated\n\n        except libreduction.InvalidApply as err:\n            # Cannot fast apply on MultiIndex (_has_complex_internals).\n            # This Exception is also raised if `f` triggers an exception\n            # but it is preferable to raise the exception in Python.\n            if \"Let this error raise above us\" not in str(err):\n                # TODO: can we infer anything about whether this is\n                #  worth-retrying in pure-python?\n                raise\n\n    for key, (i, group) in zip(group_keys, splitter):\n        object.__setattr__(group, \"name\", key)\n\n        # result_values is None if fast apply path wasn't taken\n        # or fast apply aborted with an unexpected exception.\n        # In either case, initialize the result list and perform\n        # the slow iteration.\n        if result_values is None:\n            result_values = []\n\n        # If result_values is not None we're in the case that the\n        # fast apply loop was broken prematurely but we have\n        # already the result for the first group which we can reuse.\n        elif i == 0:\n            continue\n\n        # group might be modified\n        group_axes = _get_axes(group)\n        res = f(group)\n        if not _is_indexed_like(res, group_axes):\n            mutated = True\n        result_values.append(res)\n\n    return group_keys, result_values, mutated",
                "@cache_readonly\ndef indices(self):\n    \"\"\" dict {group name -> group indices} \"\"\"\n    if len(self.groupings) == 1:\n        return self.groupings[0].indices\n    else:\n        codes_list = [ping.codes for ping in self.groupings]\n        keys = [com.values_from_object(ping.group_index) for ping in self.groupings]\n        return get_indexer_dict(codes_list, keys)",
                "@property\ndef codes(self):\n    return [ping.codes for ping in self.groupings]",
                "@property\ndef levels(self):\n    return [ping.group_index for ping in self.groupings]",
                "@property\ndef names(self):\n    return [ping.name for ping in self.groupings]",
                "def size(self) -> Series:\n    \"\"\"\n    Compute group sizes\n\n    \"\"\"\n    ids, _, ngroup = self.group_info\n    ids = ensure_platform_int(ids)\n    if ngroup:\n        out = np.bincount(ids[ids != -1], minlength=ngroup)\n    else:\n        out = []\n    return Series(out, index=self.result_index, dtype=\"int64\")",
                "@cache_readonly\ndef groups(self):\n    \"\"\" dict {group name -> group labels} \"\"\"\n    if len(self.groupings) == 1:\n        return self.groupings[0].groups\n    else:\n        to_groupby = zip(*(ping.grouper for ping in self.groupings))\n        to_groupby = Index(to_groupby)\n        return self.axis.groupby(to_groupby)",
                "@cache_readonly\ndef is_monotonic(self) -> bool:\n    # return if my group orderings are monotonic\n    return Index(self.group_info[0]).is_monotonic",
                "@cache_readonly\ndef group_info(self):\n    comp_ids, obs_group_ids = self._get_compressed_codes()\n\n    ngroups = len(obs_group_ids)\n    comp_ids = ensure_int64(comp_ids)\n    return comp_ids, obs_group_ids, ngroups",
                "@cache_readonly\ndef codes_info(self):\n    # return the codes of items in original grouped axis\n    codes, _, _ = self.group_info\n    if self.indexer is not None:\n        sorter = np.lexsort((codes, self.indexer))\n        codes = codes[sorter]\n    return codes",
                "def _get_compressed_codes(self):\n    all_codes = [ping.codes for ping in self.groupings]\n    if len(all_codes) > 1:\n        group_index = get_group_index(all_codes, self.shape, sort=True, xnull=True)\n        return compress_group_index(group_index, sort=self.sort)\n\n    ping = self.groupings[0]\n    return ping.codes, np.arange(len(ping.group_index))",
                "@cache_readonly\ndef ngroups(self) -> int:\n    return len(self.result_index)",
                "@property\ndef recons_codes(self):\n    comp_ids, obs_ids, _ = self.group_info\n    codes = (ping.codes for ping in self.groupings)\n    return decons_obs_group_ids(comp_ids, obs_ids, self.shape, codes, xnull=True)",
                "@cache_readonly\ndef result_index(self):\n    if not self.compressed and len(self.groupings) == 1:\n        return self.groupings[0].result_index.rename(self.names[0])\n\n    codes = self.recons_codes\n    levels = [ping.result_index for ping in self.groupings]\n    result = MultiIndex(\n        levels=levels, codes=codes, verify_integrity=False, names=self.names\n    )\n    return result",
                "def get_group_levels(self):\n    if not self.compressed and len(self.groupings) == 1:\n        return [self.groupings[0].result_index]\n\n    name_list = []\n    for ping, codes in zip(self.groupings, self.recons_codes):\n        codes = ensure_platform_int(codes)\n        levels = ping.result_index.take(codes)\n\n        name_list.append(levels)\n\n    return name_list",
                "def _is_builtin_func(self, arg):\n    \"\"\"\n    if we define an builtin function for this argument, return it,\n    otherwise return the arg\n    \"\"\"\n    return SelectionMixin._builtin_table.get(arg, arg)",
                "def _get_cython_function(self, kind: str, how: str, values, is_numeric: bool):\n\n    dtype_str = values.dtype.name\n\n    def get_func(fname):\n        # see if there is a fused-type version of function\n        # only valid for numeric\n        f = getattr(libgroupby, fname, None)\n        if f is not None and is_numeric:\n            return f\n\n        # otherwise find dtype-specific version, falling back to object\n        for dt in [dtype_str, \"object\"]:\n            f2 = getattr(\n                libgroupby,\n                \"{fname}_{dtype_str}\".format(fname=fname, dtype_str=dt),\n                None,\n            )\n            if f2 is not None:\n                return f2\n\n        if hasattr(f, \"__signatures__\"):\n            # inspect what fused types are implemented\n            if dtype_str == \"object\" and \"object\" not in f.__signatures__:\n                # return None so we get a NotImplementedError below\n                #  instead of a TypeError at runtime\n                return None\n        return f\n\n    ftype = self._cython_functions[kind][how]\n\n    func = get_func(ftype)\n\n    if func is None:\n        raise NotImplementedError(\n            \"function is not implemented for this dtype: \"\n            \"[how->{how},dtype->{dtype_str}]\".format(how=how, dtype_str=dtype_str)\n        )\n\n    return func",
                "def _cython_operation(\n    self, kind: str, values, how: str, axis: int, min_count: int = -1, **kwargs\n):\n    assert kind in [\"transform\", \"aggregate\"]\n    orig_values = values\n\n    # can we do this operation with our cython functions\n    # if not raise NotImplementedError\n\n    # we raise NotImplemented if this is an invalid operation\n    # entirely, e.g. adding datetimes\n\n    # categoricals are only 1d, so we\n    # are not setup for dim transforming\n    if is_categorical_dtype(values) or is_sparse(values):\n        raise NotImplementedError(\n            \"{dtype} dtype not supported\".format(dtype=values.dtype)\n        )\n    elif is_datetime64_any_dtype(values):\n        if how in [\"add\", \"prod\", \"cumsum\", \"cumprod\"]:\n            raise NotImplementedError(\n                \"datetime64 type does not support {how} operations\".format(how=how)\n            )\n    elif is_timedelta64_dtype(values):\n        if how in [\"prod\", \"cumprod\"]:\n            raise NotImplementedError(\n                \"timedelta64 type does not support {how} operations\".format(how=how)\n            )\n\n    if is_datetime64tz_dtype(values.dtype):\n        # Cast to naive; we'll cast back at the end of the function\n        # TODO: possible need to reshape?  kludge can be avoided when\n        #  2D EA is allowed.\n        values = values.view(\"M8[ns]\")\n\n    is_datetimelike = needs_i8_conversion(values.dtype)\n    is_numeric = is_numeric_dtype(values.dtype)\n\n    if is_datetimelike:\n        values = values.view(\"int64\")\n        is_numeric = True\n    elif is_bool_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif is_integer_dtype(values):\n        # we use iNaT for the missing value on ints\n        # so pre-convert to guard this condition\n        if (values == iNaT).any():\n            values = ensure_float64(values)\n        else:\n            values = ensure_int_or_float(values)\n    elif is_numeric and not is_complex_dtype(values):\n        values = ensure_float64(values)\n    else:\n        values = values.astype(object)\n\n    arity = self._cython_arity.get(how, 1)\n\n    vdim = values.ndim\n    swapped = False\n    if vdim == 1:\n        values = values[:, None]\n        out_shape = (self.ngroups, arity)\n    else:\n        if axis > 0:\n            swapped = True\n            assert axis == 1, axis\n            values = values.T\n        if arity > 1:\n            raise NotImplementedError(\n                \"arity of more than 1 is not supported for the 'how' argument\"\n            )\n        out_shape = (self.ngroups,) + values.shape[1:]\n\n    try:\n        func = self._get_cython_function(kind, how, values, is_numeric)\n    except NotImplementedError:\n        if is_numeric:\n            try:\n                values = ensure_float64(values)\n            except TypeError:\n                if lib.infer_dtype(values, skipna=False) == \"complex\":\n                    values = values.astype(complex)\n                else:\n                    raise\n            func = self._get_cython_function(kind, how, values, is_numeric)\n        else:\n            raise\n\n    if how == \"rank\":\n        out_dtype = \"float\"\n    else:\n        if is_numeric:\n            out_dtype = \"{kind}{itemsize}\".format(\n                kind=values.dtype.kind, itemsize=values.dtype.itemsize\n            )\n        else:\n            out_dtype = \"object\"\n\n    codes, _, _ = self.group_info\n\n    if kind == \"aggregate\":\n        result = _maybe_fill(\n            np.empty(out_shape, dtype=out_dtype), fill_value=np.nan\n        )\n        counts = np.zeros(self.ngroups, dtype=np.int64)\n        result = self._aggregate(\n            result, counts, values, codes, func, is_datetimelike, min_count\n        )\n    elif kind == \"transform\":\n        result = _maybe_fill(\n            np.empty_like(values, dtype=out_dtype), fill_value=np.nan\n        )\n\n        # TODO: min_count\n        result = self._transform(\n            result, values, codes, func, is_datetimelike, **kwargs\n        )\n\n    if is_integer_dtype(result) and not is_datetimelike:\n        mask = result == iNaT\n        if mask.any():\n            result = result.astype(\"float64\")\n            result[mask] = np.nan\n\n    if kind == \"aggregate\" and self._filter_empty_groups and not counts.all():\n        assert result.ndim != 2\n        result = result[counts > 0]\n\n    if vdim == 1 and arity == 1:\n        result = result[:, 0]\n\n    if how in self._name_functions:\n        names = self._name_functions[how]()  # type: Optional[List[str]]\n    else:\n        names = None\n\n    if swapped:\n        result = result.swapaxes(0, axis)\n\n    if is_datetime64tz_dtype(orig_values.dtype):\n        result = type(orig_values)(result.astype(np.int64), dtype=orig_values.dtype)\n    elif is_datetimelike and kind == \"aggregate\":\n        result = result.astype(orig_values.dtype)\n\n    return result, names",
                "def aggregate(self, values, how: str, axis: int = 0, min_count: int = -1):\n    return self._cython_operation(\n        \"aggregate\", values, how, axis, min_count=min_count\n    )",
                "def transform(self, values, how: str, axis: int = 0, **kwargs):\n    return self._cython_operation(\"transform\", values, how, axis, **kwargs)",
                "def _aggregate(\n    self,\n    result,\n    counts,\n    values,\n    comp_ids,\n    agg_func,\n    is_datetimelike: bool,\n    min_count: int = -1,\n):\n    if values.ndim > 2:\n        # punting for now\n        raise NotImplementedError(\"number of dimensions is currently limited to 2\")\n    elif agg_func is libgroupby.group_nth:\n        # different signature from the others\n        # TODO: should we be using min_count instead of hard-coding it?\n        agg_func(result, counts, values, comp_ids, rank=1, min_count=-1)\n    else:\n        agg_func(result, counts, values, comp_ids, min_count)\n\n    return result",
                "def _transform(\n    self, result, values, comp_ids, transform_func, is_datetimelike: bool, **kwargs\n):\n\n    comp_ids, _, ngroups = self.group_info\n    if values.ndim > 2:\n        # punting for now\n        raise NotImplementedError(\"number of dimensions is currently limited to 2\")\n    else:\n        transform_func(result, values, comp_ids, ngroups, is_datetimelike, **kwargs)\n\n    return result",
                "def agg_series(self, obj: Series, func):\n    if is_extension_array_dtype(obj.dtype) and obj.dtype.kind != \"M\":\n        # _aggregate_series_fast would raise TypeError when\n        #  calling libreduction.Slider\n        # TODO: can we get a performant workaround for EAs backed by ndarray?\n        # TODO: is the datetime64tz case supposed to go through here?\n        return self._aggregate_series_pure_python(obj, func)\n\n    elif obj.index._has_complex_internals:\n        # MultiIndex; Pre-empt TypeError in _aggregate_series_fast\n        return self._aggregate_series_pure_python(obj, func)\n\n    try:\n        return self._aggregate_series_fast(obj, func)\n    except ValueError as err:\n        if \"No result.\" in str(err):\n            # raised in libreduction\n            pass\n        elif \"Function does not reduce\" in str(err):\n            # raised in libreduction\n            pass\n        else:\n            raise\n    return self._aggregate_series_pure_python(obj, func)",
                "def _aggregate_series_fast(self, obj, func):\n    # At this point we have already checked that obj.index is not a MultiIndex\n    #  and that obj is backed by an ndarray, not ExtensionArray\n    func = self._is_builtin_func(func)\n\n    group_index, _, ngroups = self.group_info\n\n    # avoids object / Series creation overhead\n    dummy = obj._get_values(slice(None, 0))\n    indexer = get_group_index_sorter(group_index, ngroups)\n    obj = obj.take(indexer)\n    group_index = algorithms.take_nd(group_index, indexer, allow_fill=False)\n    grouper = libreduction.SeriesGrouper(obj, func, group_index, ngroups, dummy)\n    result, counts = grouper.get_result()\n    return result, counts",
                "def _aggregate_series_pure_python(self, obj, func):\n\n    group_index, _, ngroups = self.group_info\n\n    counts = np.zeros(ngroups, dtype=int)\n    result = None\n\n    splitter = get_splitter(obj, group_index, ngroups, axis=0)\n\n    for label, group in splitter:\n        res = func(group)\n        if result is None:\n            if isinstance(res, (Series, Index, np.ndarray)):\n                raise ValueError(\"Function does not reduce\")\n            result = np.empty(ngroups, dtype=\"O\")\n\n        counts[label] = group.shape[0]\n        result[label] = res\n\n    if result is not None:\n        # if splitter is empty, result can be None, in which case\n        #  maybe_convert_objects would raise TypeError\n        result = lib.maybe_convert_objects(result, try_float=0)\n        # TODO: try_cast back to EA?\n\n    return result, counts",
                "def __init__(\n    self, bins, binlabels, filter_empty=False, mutated=False, indexer=None\n):\n    self.bins = ensure_int64(bins)\n    self.binlabels = ensure_index(binlabels)\n    self._filter_empty_groups = filter_empty\n    self.mutated = mutated\n    self.indexer = indexer",
                "@cache_readonly\ndef groups(self):\n    \"\"\" dict {group name -> group labels} \"\"\"\n\n    # this is mainly for compat\n    # GH 3881\n    result = {\n        key: value\n        for key, value in zip(self.binlabels, self.bins)\n        if key is not NaT\n    }\n    return result",
                "@property\ndef nkeys(self) -> int:\n    return 1",
                "def _get_grouper(self):\n    \"\"\"\n    We are a grouper as part of another's groupings.\n\n    We have a specific method of grouping, so cannot\n    convert to a Index for our grouper.\n    \"\"\"\n    return self",
                "def get_iterator(self, data: NDFrame, axis: int = 0):\n    \"\"\"\n    Groupby iterator\n\n    Returns\n    -------\n    Generator yielding sequence of (name, subsetted object)\n    for each group\n    \"\"\"\n    slicer = lambda start, edge: data._slice(slice(start, edge), axis=axis)\n    length = len(data.axes[axis])\n\n    start = 0\n    for edge, label in zip(self.bins, self.binlabels):\n        if label is not NaT:\n            yield label, slicer(start, edge)\n        start = edge\n\n    if start < length:\n        yield self.binlabels[-1], slicer(start, None)",
                "@cache_readonly\ndef indices(self):\n    indices = collections.defaultdict(list)\n\n    i = 0\n    for label, bin in zip(self.binlabels, self.bins):\n        if i < bin:\n            if label is not NaT:\n                indices[label] = list(range(i, bin))\n            i = bin\n    return indices",
                "@cache_readonly\ndef group_info(self):\n    ngroups = self.ngroups\n    obs_group_ids = np.arange(ngroups)\n    rep = np.diff(np.r_[0, self.bins])\n\n    rep = ensure_platform_int(rep)\n    if ngroups == len(self.bins):\n        comp_ids = np.repeat(np.arange(ngroups), rep)\n    else:\n        comp_ids = np.repeat(np.r_[-1, np.arange(ngroups)], rep)\n\n    return (\n        comp_ids.astype(\"int64\", copy=False),\n        obs_group_ids.astype(\"int64\", copy=False),\n        ngroups,\n    )",
                "@cache_readonly\ndef result_index(self):\n    if len(self.binlabels) != 0 and isna(self.binlabels[0]):\n        return self.binlabels[1:]\n\n    return self.binlabels",
                "@property\ndef levels(self):\n    return [self.binlabels]",
                "@property\ndef names(self):\n    return [self.binlabels.name]",
                "@property\ndef groupings(self):\n    from pandas.core.groupby.grouper import Grouping\n\n    return [\n        Grouping(lvl, lvl, in_axis=False, level=None, name=name)\n        for lvl, name in zip(self.levels, self.names)\n    ]",
                "def agg_series(self, obj: Series, func):\n    if is_extension_array_dtype(obj.dtype):\n        # pre-empty SeriesBinGrouper from raising TypeError\n        # TODO: watch out, this can return None\n        return self._aggregate_series_pure_python(obj, func)\n\n    dummy = obj[:0]\n    grouper = libreduction.SeriesBinGrouper(obj, func, self.bins, dummy)\n    return grouper.get_result()",
                "def __init__(self, data, labels, ngroups, axis: int = 0):\n    self.data = data\n    self.labels = ensure_int64(labels)\n    self.ngroups = ngroups\n\n    self.axis = axis\n    assert isinstance(axis, int), axis",
                "@cache_readonly\ndef slabels(self):\n    # Sorted labels\n    return algorithms.take_nd(self.labels, self.sort_idx, allow_fill=False)",
                "@cache_readonly\ndef sort_idx(self):\n    # Counting sort indexer\n    return get_group_index_sorter(self.labels, self.ngroups)",
                "def __iter__(self):\n    sdata = self._get_sorted_data()\n\n    if self.ngroups == 0:\n        # we are inside a generator, rather than raise StopIteration\n        # we merely return signal the end\n        return\n\n    starts, ends = lib.generate_slices(self.slabels, self.ngroups)\n\n    for i, (start, end) in enumerate(zip(starts, ends)):\n        yield i, self._chop(sdata, slice(start, end))",
                "def _get_sorted_data(self):\n    return self.data.take(self.sort_idx, axis=self.axis)",
                "def _chop(self, sdata, slice_obj: slice):\n    raise AbstractMethodError(self)",
                "def _chop(self, sdata, slice_obj: slice):\n    return sdata._get_values(slice_obj)",
                "def fast_apply(self, f, names):\n    # must return keys::list, values::list, mutated::bool\n    starts, ends = lib.generate_slices(self.slabels, self.ngroups)\n\n    sdata = self._get_sorted_data()\n    return libreduction.apply_frame_axis0(sdata, f, names, starts, ends)",
                "def _chop(self, sdata, slice_obj: slice):\n    if self.axis == 0:\n        return sdata.iloc[slice_obj]\n    else:\n        return sdata._slice(slice_obj, axis=1)",
                "def get_func(fname):\n    # see if there is a fused-type version of function\n    # only valid for numeric\n    f = getattr(libgroupby, fname, None)\n    if f is not None and is_numeric:\n        return f\n\n    # otherwise find dtype-specific version, falling back to object\n    for dt in [dtype_str, \"object\"]:\n        f2 = getattr(\n            libgroupby,\n            \"{fname}_{dtype_str}\".format(fname=fname, dtype_str=dt),\n            None,\n        )\n        if f2 is not None:\n            return f2\n\n    if hasattr(f, \"__signatures__\"):\n        # inspect what fused types are implemented\n        if dtype_str == \"object\" and \"object\" not in f.__signatures__:\n            # return None so we get a NotImplementedError below\n            #  instead of a TypeError at runtime\n            return None\n    return f"
            ],
            "inscope_function_signatures": [
                "_get_axes(group)",
                "_is_indexed_like(obj, axes) -> bool",
                "get_splitter(data: NDFrame, *args, **kwargs)",
                "__init__(self, axis: Index, groupings: 'Sequence[grouper.Grouping]', sort: bool=True, group_keys: bool=True, mutated: bool=False, indexer: Optional[np.ndarray]=None)",
                "shape(self)",
                "__iter__(self)",
                "nkeys(self) -> int",
                "get_iterator(self, data, axis=0)",
                "_get_splitter(self, data, axis=0)",
                "_get_grouper(self)",
                "_get_group_keys(self)",
                "apply(self, f, data, axis: int=0)",
                "indices(self)",
                "codes(self)",
                "levels(self)",
                "names(self)",
                "size(self) -> Series",
                "groups(self)",
                "is_monotonic(self) -> bool",
                "group_info(self)",
                "codes_info(self)",
                "_get_compressed_codes(self)",
                "ngroups(self) -> int",
                "recons_codes(self)",
                "result_index(self)",
                "get_group_levels(self)",
                "_is_builtin_func(self, arg)",
                "_get_cython_function(self, kind: str, how: str, values, is_numeric: bool)",
                "_cython_operation(self, kind: str, values, how: str, axis: int, min_count: int=-1, **kwargs)",
                "aggregate(self, values, how: str, axis: int=0, min_count: int=-1)",
                "transform(self, values, how: str, axis: int=0, **kwargs)",
                "_aggregate(self, result, counts, values, comp_ids, agg_func, is_datetimelike: bool, min_count: int=-1)",
                "_transform(self, result, values, comp_ids, transform_func, is_datetimelike: bool, **kwargs)",
                "agg_series(self, obj: Series, func)",
                "_aggregate_series_fast(self, obj, func)",
                "_aggregate_series_pure_python(self, obj, func)",
                "__init__(self, bins, binlabels, filter_empty=False, mutated=False, indexer=None)",
                "groups(self)",
                "nkeys(self) -> int",
                "_get_grouper(self)",
                "get_iterator(self, data: NDFrame, axis: int=0)",
                "indices(self)",
                "group_info(self)",
                "result_index(self)",
                "levels(self)",
                "names(self)",
                "groupings(self)",
                "agg_series(self, obj: Series, func)",
                "__init__(self, data, labels, ngroups, axis: int=0)",
                "slabels(self)",
                "sort_idx(self)",
                "__iter__(self)",
                "_get_sorted_data(self)",
                "_chop(self, sdata, slice_obj: slice)",
                "_chop(self, sdata, slice_obj: slice)",
                "fast_apply(self, f, names)",
                "_chop(self, sdata, slice_obj: slice)",
                "get_func(fname)"
            ],
            "variables_in_file": {
                "Index": [
                    256,
                    81,
                    88,
                    250,
                    638
                ],
                "bool": [
                    355,
                    812,
                    557,
                    83,
                    84,
                    85,
                    573,
                    254
                ],
                "Optional": [
                    86
                ],
                "np.ndarray": [
                    638,
                    86
                ],
                "np": [
                    640,
                    762,
                    518,
                    536,
                    238,
                    271,
                    760,
                    498,
                    506,
                    500,
                    755,
                    86,
                    630,
                    152,
                    756,
                    282,
                    638
                ],
                "isinstance": [
                    834,
                    806,
                    813,
                    817,
                    887,
                    88,
                    638
                ],
                "axis": [
                    544,
                    161,
                    833,
                    834,
                    548,
                    459,
                    461,
                    728,
                    147,
                    533,
                    118,
                    88,
                    729,
                    91,
                    125
                ],
                "self._filter_empty_groups": [
                    520,
                    689,
                    90
                ],
                "self": [
                    520,
                    527,
                    528,
                    543,
                    548,
                    576,
                    591,
                    595,
                    598,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    608,
                    100,
                    613,
                    103,
                    615,
                    107,
                    628,
                    118,
                    119,
                    124,
                    134,
                    137,
                    138,
                    140,
                    143,
                    146,
                    147,
                    148,
                    687,
                    688,
                    689,
                    690,
                    691,
                    701,
                    717,
                    211,
                    212,
                    214,
                    215,
                    220,
                    732,
                    224,
                    738,
                    228,
                    745,
                    235,
                    241,
                    754,
                    756,
                    246,
                    247,
                    759,
                    249,
                    251,
                    256,
                    260,
                    772,
                    773,
                    775,
                    779,
                    269,
                    270,
                    271,
                    783,
                    276,
                    278,
                    279,
                    791,
                    281,
                    286,
                    798,
                    801,
                    290,
                    291,
                    292,
                    296,
                    297,
                    299,
                    300,
                    302,
                    307,
                    308,
                    311,
                    829,
                    830,
                    831,
                    833,
                    839,
                    844,
                    847,
                    849,
                    854,
                    857,
                    860,
                    863,
                    874,
                    876,
                    880,
                    384,
                    451,
                    457,
                    467,
                    470,
                    480,
                    494,
                    500,
                    501,
                    510
                ],
                "self.compressed": [
                    296,
                    90,
                    307
                ],
                "len": [
                    772,
                    262,
                    296,
                    137,
                    107,
                    171,
                    282,
                    814,
                    211,
                    307,
                    277,
                    246,
                    759,
                    729,
                    90,
                    286
                ],
                "groupings": [
                    90,
                    92
                ],
                "self.axis": [
                    833,
                    251,
                    880,
                    91,
                    860
                ],
                "self.groupings": [
                    134,
                    137,
                    276,
                    281,
                    291,
                    296,
                    297,
                    300,
                    307,
                    308,
                    311,
                    211,
                    212,
                    214,
                    215,
                    220,
                    92,
                    224,
                    100,
                    228,
                    107,
                    246,
                    247,
                    249
                ],
                "self.sort": [
                    93,
                    279
                ],
                "sort": [
                    93
                ],
                "self.group_keys": [
                    94
                ],
                "group_keys": [
                    167,
                    171,
                    172,
                    206,
                    148,
                    183,
                    94
                ],
                "self.mutated": [
                    690,
                    146,
                    95
                ],
                "mutated": [
                    167,
                    203,
                    172,
                    206,
                    146,
                    690,
                    95
                ],
                "self.indexer": [
                    96,
                    691,
                    270,
                    271
                ],
                "indexer": [
                    96,
                    619,
                    620,
                    621,
                    691
                ],
                "tuple": [
                    100
                ],
                "ping.ngroups": [
                    100
                ],
                "ping": [
                    224,
                    291,
                    100,
                    228,
                    281,
                    313,
                    300,
                    276,
                    214,
                    215,
                    249,
                    282,
                    220,
                    311
                ],
                "property": [
                    288,
                    98,
                    226,
                    706,
                    105,
                    777,
                    781,
                    785,
                    218,
                    222
                ],
                "iter": [
                    103
                ],
                "self.indices": [
                    103
                ],
                "int": [
                    834,
                    547,
                    707,
                    106,
                    397,
                    558,
                    719,
                    145,
                    630,
                    828,
                    285,
                    542
                ],
                "splitter": [
                    160,
                    167,
                    633,
                    147,
                    118,
                    151,
                    120,
                    183,
                    635
                ],
                "self._get_splitter": [
                    147,
                    118
                ],
                "data": [
                    829,
                    893,
                    147,
                    118,
                    887,
                    728,
                    729,
                    125
                ],
                "keys": [
                    120,
                    215,
                    216,
                    119
                ],
                "self._get_group_keys": [
                    148,
                    119
                ],
                "key": [
                    702,
                    183,
                    120,
                    121,
                    700,
                    701,
                    184
                ],
                "i": [
                    196,
                    744,
                    746,
                    748,
                    749,
                    856,
                    183,
                    120,
                    857
                ],
                "group": [
                    642,
                    806,
                    807,
                    200,
                    201,
                    809,
                    183,
                    120,
                    121,
                    635,
                    636,
                    184
                ],
                "zip": [
                    745,
                    791,
                    856,
                    311,
                    120,
                    249,
                    732,
                    701,
                    183
                ],
                "comp_ids": [
                    576,
                    290,
                    260,
                    292,
                    581,
                    263,
                    264,
                    765,
                    140,
                    143,
                    760,
                    566,
                    568,
                    762,
                    124,
                    125
                ],
                "_": [
                    576,
                    290,
                    615,
                    235,
                    140,
                    269,
                    494,
                    628,
                    124
                ],
                "ngroups": [
                    640,
                    262,
                    264,
                    140,
                    143,
                    831,
                    576,
                    581,
                    615,
                    619,
                    622,
                    754,
                    755,
                    628,
                    630,
                    759,
                    760,
                    633,
                    762,
                    124,
                    125,
                    767
                ],
                "self.group_info": [
                    256,
                    576,
                    290,
                    615,
                    235,
                    140,
                    269,
                    494,
                    628,
                    124
                ],
                "get_splitter": [
                    633,
                    125
                ],
                "grouper": [
                    801,
                    802,
                    134,
                    622,
                    623
                ],
                "self.levels": [
                    138,
                    791,
                    143
                ],
                "get_flattened_iterator": [
                    143
                ],
                "self.codes": [
                    143
                ],
                "result_values": [
                    167,
                    171,
                    172,
                    204,
                    206,
                    149,
                    190,
                    191
                ],
                "sdata": [
                    164,
                    868,
                    876,
                    877,
                    847,
                    881,
                    883,
                    151,
                    152,
                    857
                ],
                "splitter._get_sorted_data": [
                    151
                ],
                "sdata.ndim": [
                    152
                ],
                "np.any": [
                    152
                ],
                "sdata.dtypes.apply": [
                    152
                ],
                "sdata.dtypes": [
                    152
                ],
                "is_extension_array_dtype": [
                    152,
                    586,
                    795
                ],
                "com.get_callable_name": [
                    159
                ],
                "com": [
                    215,
                    159
                ],
                "f": [
                    167,
                    201,
                    362,
                    363,
                    364,
                    877,
                    376,
                    378,
                    382,
                    159
                ],
                "base.plotting_methods": [
                    159
                ],
                "base": [
                    159
                ],
                "hasattr": [
                    160,
                    376
                ],
                "sdata.index._has_complex_internals": [
                    164
                ],
                "sdata.index": [
                    164
                ],
                "splitter.fast_apply": [
                    167
                ],
                "libreduction.InvalidApply": [
                    174
                ],
                "libreduction": [
                    801,
                    622,
                    877,
                    174
                ],
                "str": [
                    547,
                    355,
                    397,
                    178,
                    600,
                    603,
                    542
                ],
                "err": [
                    600,
                    178,
                    603
                ],
                "object.__setattr__": [
                    184
                ],
                "object": [
                    184,
                    449
                ],
                "group_axes": [
                    200,
                    202
                ],
                "_get_axes": [
                    200
                ],
                "res": [
                    643,
                    201,
                    202,
                    204,
                    636,
                    638
                ],
                "_is_indexed_like": [
                    202
                ],
                "result_values.append": [
                    204
                ],
                "indices": [
                    212,
                    748,
                    742,
                    750
                ],
                "codes_list": [
                    216,
                    214
                ],
                "ping.codes": [
                    291,
                    276,
                    214,
                    282,
                    220
                ],
                "com.values_from_object": [
                    215
                ],
                "ping.group_index": [
                    224,
                    282,
                    215
                ],
                "get_indexer_dict": [
                    216
                ],
                "cache_readonly": [
                    258,
                    770,
                    740,
                    836,
                    294,
                    841,
                    266,
                    208,
                    752,
                    243,
                    693,
                    284,
                    253
                ],
                "ping.name": [
                    228
                ],
                "ids": [
                    235,
                    236,
                    238
                ],
                "ngroup": [
                    235,
                    237,
                    238
                ],
                "ensure_platform_int": [
                    312,
                    236,
                    758
                ],
                "out": [
                    240,
                    241,
                    238
                ],
                "np.bincount": [
                    238
                ],
                "Series": [
                    230,
                    806,
                    585,
                    813,
                    241,
                    887,
                    794,
                    638
                ],
                "self.result_index": [
                    241,
                    286
                ],
                "groups": [
                    247
                ],
                "to_groupby": [
                    249,
                    250,
                    251
                ],
                "ping.grouper": [
                    249
                ],
                "self.axis.groupby": [
                    251
                ],
                "is_monotonic": [
                    256
                ],
                "obs_group_ids": [
                    260,
                    262,
                    264,
                    755,
                    766
                ],
                "self._get_compressed_codes": [
                    260
                ],
                "ensure_int64": [
                    687,
                    830,
                    263
                ],
                "codes": [
                    291,
                    292,
                    299,
                    269,
                    302,
                    271,
                    272,
                    273,
                    494,
                    502,
                    311,
                    312,
                    313,
                    511
                ],
                "sorter": [
                    272,
                    271
                ],
                "np.lexsort": [
                    271
                ],
                "all_codes": [
                    276,
                    277,
                    278
                ],
                "group_index": [
                    615,
                    619,
                    621,
                    622,
                    628,
                    278,
                    279,
                    633
                ],
                "get_group_index": [
                    278
                ],
                "self.shape": [
                    292,
                    278
                ],
                "compress_group_index": [
                    279
                ],
                "np.arange": [
                    760,
                    762,
                    282,
                    755
                ],
                "obs_ids": [
                    290,
                    292
                ],
                "decons_obs_group_ids": [
                    292
                ],
                "result_index.rename": [
                    297
                ],
                "result_index": [
                    297,
                    308
                ],
                "self.names": [
                    297,
                    302,
                    791
                ],
                "self.recons_codes": [
                    299,
                    311
                ],
                "levels": [
                    313,
                    315,
                    300,
                    302
                ],
                "ping.result_index": [
                    313,
                    300
                ],
                "result": [
                    640,
                    514,
                    515,
                    643,
                    517,
                    518,
                    645,
                    648,
                    521,
                    522,
                    651,
                    525,
                    533,
                    536,
                    538,
                    540,
                    301,
                    304,
                    566,
                    568,
                    570,
                    699,
                    704,
                    581,
                    583,
                    623,
                    624,
                    497,
                    501,
                    502,
                    631,
                    505,
                    637,
                    510,
                    511
                ],
                "MultiIndex": [
                    301
                ],
                "name_list": [
                    315,
                    317,
                    310
                ],
                "ping.result_index.take": [
                    313
                ],
                "name_list.append": [
                    315
                ],
                "_cython_functions": [
                    322
                ],
                "_cython_arity": [
                    344
                ],
                "_name_functions": [
                    346
                ],
                "SelectionMixin._builtin_table.get": [
                    353
                ],
                "SelectionMixin._builtin_table": [
                    353
                ],
                "SelectionMixin": [
                    353
                ],
                "arg": [
                    353
                ],
                "dtype_str": [
                    391,
                    378,
                    357,
                    367
                ],
                "values.dtype.name": [
                    357
                ],
                "values.dtype": [
                    357,
                    425,
                    489,
                    431,
                    432,
                    437,
                    412
                ],
                "values": [
                    400,
                    410,
                    412,
                    414,
                    544,
                    419,
                    548,
                    425,
                    429,
                    431,
                    432,
                    560,
                    435,
                    437,
                    438,
                    439,
                    566,
                    568,
                    442,
                    443,
                    445,
                    446,
                    447,
                    449,
                    577,
                    453,
                    581,
                    456,
                    462,
                    467,
                    470,
                    474,
                    476,
                    477,
                    480,
                    357,
                    489,
                    502,
                    506,
                    511
                ],
                "getattr": [
                    368,
                    362
                ],
                "libgroupby": [
                    369,
                    362,
                    563
                ],
                "fname": [
                    362,
                    370
                ],
                "is_numeric": [
                    480,
                    487,
                    363,
                    432,
                    436,
                    470,
                    472,
                    446
                ],
                "dt": [
                    370,
                    367
                ],
                "f2": [
                    368,
                    373,
                    374
                ],
                "format": [
                    417,
                    422,
                    390,
                    488,
                    370,
                    412
                ],
                "f.__signatures__": [
                    378
                ],
                "ftype": [
                    384,
                    386
                ],
                "self._cython_functions": [
                    384
                ],
                "kind": [
                    384,
                    480,
                    520,
                    399,
                    496,
                    470,
                    504,
                    537
                ],
                "how": [
                    384,
                    417,
                    480,
                    451,
                    420,
                    484,
                    422,
                    391,
                    544,
                    548,
                    527,
                    528,
                    470,
                    415
                ],
                "func": [
                    480,
                    608,
                    386,
                    801,
                    388,
                    613,
                    394,
                    622,
                    591,
                    595,
                    470,
                    502,
                    598,
                    636,
                    798,
                    511
                ],
                "get_func": [
                    386
                ],
                "NotImplementedError": [
                    416,
                    579,
                    389,
                    421,
                    464,
                    562,
                    471,
                    411
                ],
                "orig_values": [
                    400,
                    536,
                    538,
                    535
                ],
                "is_categorical_dtype": [
                    410
                ],
                "is_sparse": [
                    410
                ],
                "is_datetime64_any_dtype": [
                    414
                ],
                "is_timedelta64_dtype": [
                    419
                ],
                "is_datetime64tz_dtype": [
                    425,
                    535
                ],
                "values.view": [
                    435,
                    429
                ],
                "is_datetimelike": [
                    514,
                    581,
                    431,
                    434,
                    502,
                    537,
                    511
                ],
                "needs_i8_conversion": [
                    431
                ],
                "is_numeric_dtype": [
                    432
                ],
                "is_bool_dtype": [
                    437
                ],
                "ensure_float64": [
                    474,
                    443,
                    438,
                    447
                ],
                "is_integer_dtype": [
                    514,
                    439
                ],
                "any": [
                    442
                ],
                "iNaT": [
                    442,
                    515
                ],
                "ensure_int_or_float": [
                    445
                ],
                "is_complex_dtype": [
                    446
                ],
                "values.astype": [
                    449,
                    477
                ],
                "arity": [
                    457,
                    451,
                    524,
                    463
                ],
                "self._cython_arity.get": [
                    451
                ],
                "self._cython_arity": [
                    451
                ],
                "vdim": [
                    524,
                    453,
                    455
                ],
                "values.ndim": [
                    560,
                    577,
                    453
                ],
                "swapped": [
                    460,
                    532,
                    454
                ],
                "out_shape": [
                    457,
                    498,
                    467
                ],
                "self.ngroups": [
                    457,
                    874,
                    844,
                    849,
                    754,
                    467,
                    500,
                    854,
                    831
                ],
                "values.T": [
                    462
                ],
                "values.shape": [
                    467
                ],
                "self._get_cython_function": [
                    480,
                    470
                ],
                "TypeError": [
                    475
                ],
                "lib.infer_dtype": [
                    476
                ],
                "lib": [
                    648,
                    874,
                    476,
                    854
                ],
                "complex": [
                    477
                ],
                "out_dtype": [
                    485,
                    488,
                    492,
                    498,
                    506
                ],
                "values.dtype.kind": [
                    489
                ],
                "values.dtype.itemsize": [
                    489
                ],
                "_maybe_fill": [
                    497,
                    505
                ],
                "np.empty": [
                    640,
                    498
                ],
                "np.nan": [
                    498,
                    506,
                    518
                ],
                "counts": [
                    642,
                    520,
                    522,
                    651,
                    623,
                    624,
                    500,
                    566,
                    502,
                    568,
                    630
                ],
                "np.zeros": [
                    500,
                    630
                ],
                "np.int64": [
                    536,
                    500
                ],
                "self._aggregate": [
                    501
                ],
                "min_count": [
                    544,
                    568,
                    502
                ],
                "np.empty_like": [
                    506
                ],
                "self._transform": [
                    510
                ],
                "kwargs": [
                    893,
                    548,
                    581,
                    511
                ],
                "mask": [
                    515,
                    516,
                    518
                ],
                "mask.any": [
                    516
                ],
                "result.astype": [
                    536,
                    538,
                    517
                ],
                "counts.all": [
                    520
                ],
                "result.ndim": [
                    521
                ],
                "self._name_functions": [
                    528,
                    527
                ],
                "names": [
                    528,
                    530,
                    540,
                    877
                ],
                "result.swapaxes": [
                    533
                ],
                "orig_values.dtype": [
                    536,
                    538,
                    535
                ],
                "type": [
                    536
                ],
                "self._cython_operation": [
                    548,
                    543
                ],
                "agg_func": [
                    568,
                    563,
                    566
                ],
                "libgroupby.group_nth": [
                    563
                ],
                "transform_func": [
                    581
                ],
                "obj.dtype": [
                    586,
                    795
                ],
                "obj": [
                    608,
                    800,
                    801,
                    586,
                    618,
                    620,
                    813,
                    622,
                    591,
                    816,
                    593,
                    817,
                    595,
                    818,
                    598,
                    633,
                    795,
                    798
                ],
                "obj.dtype.kind": [
                    586
                ],
                "self._aggregate_series_pure_python": [
                    608,
                    595,
                    798,
                    591
                ],
                "obj.index._has_complex_internals": [
                    593
                ],
                "obj.index": [
                    816,
                    593,
                    818
                ],
                "self._aggregate_series_fast": [
                    598
                ],
                "ValueError": [
                    639,
                    599
                ],
                "self._is_builtin_func": [
                    613
                ],
                "dummy": [
                    800,
                    801,
                    618,
                    622
                ],
                "obj._get_values": [
                    618
                ],
                "slice": [
                    867,
                    618,
                    879,
                    728,
                    857,
                    862
                ],
                "get_group_index_sorter": [
                    619,
                    844
                ],
                "obj.take": [
                    620
                ],
                "algorithms.take_nd": [
                    621,
                    839
                ],
                "algorithms": [
                    621,
                    839
                ],
                "libreduction.SeriesGrouper": [
                    622
                ],
                "grouper.get_result": [
                    802,
                    623
                ],
                "label": [
                    642,
                    643,
                    745,
                    747,
                    748,
                    635,
                    732,
                    733,
                    734
                ],
                "group.shape": [
                    642
                ],
                "lib.maybe_convert_objects": [
                    648
                ],
                "BaseGrouper": [
                    654
                ],
                "self.bins": [
                    801,
                    745,
                    687,
                    756,
                    759,
                    732,
                    701
                ],
                "bins": [
                    687
                ],
                "self.binlabels": [
                    738,
                    772,
                    773,
                    775,
                    745,
                    779,
                    783,
                    688,
                    732,
                    701
                ],
                "ensure_index": [
                    688
                ],
                "binlabels": [
                    688
                ],
                "filter_empty": [
                    689
                ],
                "value": [
                    700,
                    701
                ],
                "NaT": [
                    747,
                    733,
                    702
                ],
                "NDFrame": [
                    886,
                    719
                ],
                "slicer": [
                    728,
                    738,
                    734
                ],
                "data._slice": [
                    728
                ],
                "start": [
                    737,
                    738,
                    856,
                    728,
                    857,
                    731,
                    734,
                    735
                ],
                "edge": [
                    728,
                    732,
                    734,
                    735
                ],
                "length": [
                    729,
                    737
                ],
                "data.axes": [
                    729
                ],
                "collections.defaultdict": [
                    742
                ],
                "collections": [
                    742
                ],
                "list": [
                    748,
                    742
                ],
                "bin": [
                    745,
                    746,
                    748,
                    749
                ],
                "range": [
                    748
                ],
                "rep": [
                    760,
                    762,
                    756,
                    758
                ],
                "np.diff": [
                    756
                ],
                "np.r_": [
                    762,
                    756
                ],
                "np.repeat": [
                    760,
                    762
                ],
                "comp_ids.astype": [
                    765
                ],
                "obs_group_ids.astype": [
                    766
                ],
                "isna": [
                    772
                ],
                "self.binlabels.name": [
                    783
                ],
                "Grouping": [
                    790
                ],
                "lvl": [
                    790,
                    791
                ],
                "name": [
                    790,
                    791
                ],
                "libreduction.SeriesBinGrouper": [
                    801
                ],
                "group.index": [
                    807
                ],
                "group.axes": [
                    809
                ],
                "axes": [
                    816,
                    818,
                    814
                ],
                "obj.index.equals": [
                    816,
                    818
                ],
                "DataFrame": [
                    817
                ],
                "self.data": [
                    860,
                    829
                ],
                "self.labels": [
                    844,
                    830,
                    839
                ],
                "labels": [
                    830
                ],
                "self.sort_idx": [
                    860,
                    839
                ],
                "self._get_sorted_data": [
                    876,
                    847
                ],
                "starts": [
                    856,
                    874,
                    877,
                    854
                ],
                "ends": [
                    856,
                    874,
                    877,
                    854
                ],
                "lib.generate_slices": [
                    874,
                    854
                ],
                "self.slabels": [
                    874,
                    854
                ],
                "end": [
                    856,
                    857
                ],
                "enumerate": [
                    856
                ],
                "self._chop": [
                    857
                ],
                "self.data.take": [
                    860
                ],
                "AbstractMethodError": [
                    863
                ],
                "DataSplitter": [
                    866,
                    871
                ],
                "sdata._get_values": [
                    868
                ],
                "slice_obj": [
                    881,
                    883,
                    868
                ],
                "libreduction.apply_frame_axis0": [
                    877
                ],
                "sdata.iloc": [
                    881
                ],
                "sdata._slice": [
                    883
                ],
                "klass": [
                    888,
                    891,
                    893
                ],
                "SeriesSplitter": [
                    888
                ],
                "FrameSplitter": [
                    891
                ],
                "args": [
                    893
                ]
            },
            "filtered_variables_in_file": {
                "Index": [
                    256,
                    81,
                    88,
                    250,
                    638
                ],
                "Optional": [
                    86
                ],
                "np.ndarray": [
                    638,
                    86
                ],
                "np": [
                    640,
                    762,
                    518,
                    536,
                    238,
                    271,
                    760,
                    498,
                    506,
                    500,
                    755,
                    86,
                    630,
                    152,
                    756,
                    282,
                    638
                ],
                "axis": [
                    544,
                    161,
                    833,
                    834,
                    548,
                    459,
                    461,
                    728,
                    147,
                    533,
                    118,
                    88,
                    729,
                    91,
                    125
                ],
                "self._filter_empty_groups": [
                    520,
                    689,
                    90
                ],
                "self": [
                    520,
                    527,
                    528,
                    543,
                    548,
                    576,
                    591,
                    595,
                    598,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    608,
                    100,
                    613,
                    103,
                    615,
                    107,
                    628,
                    118,
                    119,
                    124,
                    134,
                    137,
                    138,
                    140,
                    143,
                    146,
                    147,
                    148,
                    687,
                    688,
                    689,
                    690,
                    691,
                    701,
                    717,
                    211,
                    212,
                    214,
                    215,
                    220,
                    732,
                    224,
                    738,
                    228,
                    745,
                    235,
                    241,
                    754,
                    756,
                    246,
                    247,
                    759,
                    249,
                    251,
                    256,
                    260,
                    772,
                    773,
                    775,
                    779,
                    269,
                    270,
                    271,
                    783,
                    276,
                    278,
                    279,
                    791,
                    281,
                    286,
                    798,
                    801,
                    290,
                    291,
                    292,
                    296,
                    297,
                    299,
                    300,
                    302,
                    307,
                    308,
                    311,
                    829,
                    830,
                    831,
                    833,
                    839,
                    844,
                    847,
                    849,
                    854,
                    857,
                    860,
                    863,
                    874,
                    876,
                    880,
                    384,
                    451,
                    457,
                    467,
                    470,
                    480,
                    494,
                    500,
                    501,
                    510
                ],
                "self.compressed": [
                    296,
                    90,
                    307
                ],
                "groupings": [
                    90,
                    92
                ],
                "self.axis": [
                    833,
                    251,
                    880,
                    91,
                    860
                ],
                "self.groupings": [
                    134,
                    137,
                    276,
                    281,
                    291,
                    296,
                    297,
                    300,
                    307,
                    308,
                    311,
                    211,
                    212,
                    214,
                    215,
                    220,
                    92,
                    224,
                    100,
                    228,
                    107,
                    246,
                    247,
                    249
                ],
                "self.sort": [
                    93,
                    279
                ],
                "sort": [
                    93
                ],
                "self.group_keys": [
                    94
                ],
                "group_keys": [
                    167,
                    171,
                    172,
                    206,
                    148,
                    183,
                    94
                ],
                "self.mutated": [
                    690,
                    146,
                    95
                ],
                "mutated": [
                    167,
                    203,
                    172,
                    206,
                    146,
                    690,
                    95
                ],
                "self.indexer": [
                    96,
                    691,
                    270,
                    271
                ],
                "indexer": [
                    96,
                    619,
                    620,
                    621,
                    691
                ],
                "ping.ngroups": [
                    100
                ],
                "ping": [
                    224,
                    291,
                    100,
                    228,
                    281,
                    313,
                    300,
                    276,
                    214,
                    215,
                    249,
                    282,
                    220,
                    311
                ],
                "self.indices": [
                    103
                ],
                "splitter": [
                    160,
                    167,
                    633,
                    147,
                    118,
                    151,
                    120,
                    183,
                    635
                ],
                "self._get_splitter": [
                    147,
                    118
                ],
                "data": [
                    829,
                    893,
                    147,
                    118,
                    887,
                    728,
                    729,
                    125
                ],
                "keys": [
                    120,
                    215,
                    216,
                    119
                ],
                "self._get_group_keys": [
                    148,
                    119
                ],
                "key": [
                    702,
                    183,
                    120,
                    121,
                    700,
                    701,
                    184
                ],
                "i": [
                    196,
                    744,
                    746,
                    748,
                    749,
                    856,
                    183,
                    120,
                    857
                ],
                "group": [
                    642,
                    806,
                    807,
                    200,
                    201,
                    809,
                    183,
                    120,
                    121,
                    635,
                    636,
                    184
                ],
                "comp_ids": [
                    576,
                    290,
                    260,
                    292,
                    581,
                    263,
                    264,
                    765,
                    140,
                    143,
                    760,
                    566,
                    568,
                    762,
                    124,
                    125
                ],
                "_": [
                    576,
                    290,
                    615,
                    235,
                    140,
                    269,
                    494,
                    628,
                    124
                ],
                "ngroups": [
                    640,
                    262,
                    264,
                    140,
                    143,
                    831,
                    576,
                    581,
                    615,
                    619,
                    622,
                    754,
                    755,
                    628,
                    630,
                    759,
                    760,
                    633,
                    762,
                    124,
                    125,
                    767
                ],
                "self.group_info": [
                    256,
                    576,
                    290,
                    615,
                    235,
                    140,
                    269,
                    494,
                    628,
                    124
                ],
                "get_splitter": [
                    633,
                    125
                ],
                "grouper": [
                    801,
                    802,
                    134,
                    622,
                    623
                ],
                "self.levels": [
                    138,
                    791,
                    143
                ],
                "get_flattened_iterator": [
                    143
                ],
                "self.codes": [
                    143
                ],
                "result_values": [
                    167,
                    171,
                    172,
                    204,
                    206,
                    149,
                    190,
                    191
                ],
                "sdata": [
                    164,
                    868,
                    876,
                    877,
                    847,
                    881,
                    883,
                    151,
                    152,
                    857
                ],
                "splitter._get_sorted_data": [
                    151
                ],
                "sdata.ndim": [
                    152
                ],
                "np.any": [
                    152
                ],
                "sdata.dtypes.apply": [
                    152
                ],
                "sdata.dtypes": [
                    152
                ],
                "is_extension_array_dtype": [
                    152,
                    586,
                    795
                ],
                "com.get_callable_name": [
                    159
                ],
                "com": [
                    215,
                    159
                ],
                "f": [
                    167,
                    201,
                    362,
                    363,
                    364,
                    877,
                    376,
                    378,
                    382,
                    159
                ],
                "base.plotting_methods": [
                    159
                ],
                "base": [
                    159
                ],
                "sdata.index._has_complex_internals": [
                    164
                ],
                "sdata.index": [
                    164
                ],
                "splitter.fast_apply": [
                    167
                ],
                "libreduction.InvalidApply": [
                    174
                ],
                "libreduction": [
                    801,
                    622,
                    877,
                    174
                ],
                "err": [
                    600,
                    178,
                    603
                ],
                "object.__setattr__": [
                    184
                ],
                "group_axes": [
                    200,
                    202
                ],
                "_get_axes": [
                    200
                ],
                "res": [
                    643,
                    201,
                    202,
                    204,
                    636,
                    638
                ],
                "_is_indexed_like": [
                    202
                ],
                "result_values.append": [
                    204
                ],
                "indices": [
                    212,
                    748,
                    742,
                    750
                ],
                "codes_list": [
                    216,
                    214
                ],
                "ping.codes": [
                    291,
                    276,
                    214,
                    282,
                    220
                ],
                "com.values_from_object": [
                    215
                ],
                "ping.group_index": [
                    224,
                    282,
                    215
                ],
                "get_indexer_dict": [
                    216
                ],
                "cache_readonly": [
                    258,
                    770,
                    740,
                    836,
                    294,
                    841,
                    266,
                    208,
                    752,
                    243,
                    693,
                    284,
                    253
                ],
                "ping.name": [
                    228
                ],
                "ids": [
                    235,
                    236,
                    238
                ],
                "ngroup": [
                    235,
                    237,
                    238
                ],
                "ensure_platform_int": [
                    312,
                    236,
                    758
                ],
                "out": [
                    240,
                    241,
                    238
                ],
                "np.bincount": [
                    238
                ],
                "Series": [
                    230,
                    806,
                    585,
                    813,
                    241,
                    887,
                    794,
                    638
                ],
                "self.result_index": [
                    241,
                    286
                ],
                "groups": [
                    247
                ],
                "to_groupby": [
                    249,
                    250,
                    251
                ],
                "ping.grouper": [
                    249
                ],
                "self.axis.groupby": [
                    251
                ],
                "is_monotonic": [
                    256
                ],
                "obs_group_ids": [
                    260,
                    262,
                    264,
                    755,
                    766
                ],
                "self._get_compressed_codes": [
                    260
                ],
                "ensure_int64": [
                    687,
                    830,
                    263
                ],
                "codes": [
                    291,
                    292,
                    299,
                    269,
                    302,
                    271,
                    272,
                    273,
                    494,
                    502,
                    311,
                    312,
                    313,
                    511
                ],
                "sorter": [
                    272,
                    271
                ],
                "np.lexsort": [
                    271
                ],
                "all_codes": [
                    276,
                    277,
                    278
                ],
                "group_index": [
                    615,
                    619,
                    621,
                    622,
                    628,
                    278,
                    279,
                    633
                ],
                "get_group_index": [
                    278
                ],
                "self.shape": [
                    292,
                    278
                ],
                "compress_group_index": [
                    279
                ],
                "np.arange": [
                    760,
                    762,
                    282,
                    755
                ],
                "obs_ids": [
                    290,
                    292
                ],
                "decons_obs_group_ids": [
                    292
                ],
                "result_index.rename": [
                    297
                ],
                "result_index": [
                    297,
                    308
                ],
                "self.names": [
                    297,
                    302,
                    791
                ],
                "self.recons_codes": [
                    299,
                    311
                ],
                "levels": [
                    313,
                    315,
                    300,
                    302
                ],
                "ping.result_index": [
                    313,
                    300
                ],
                "result": [
                    640,
                    514,
                    515,
                    643,
                    517,
                    518,
                    645,
                    648,
                    521,
                    522,
                    651,
                    525,
                    533,
                    536,
                    538,
                    540,
                    301,
                    304,
                    566,
                    568,
                    570,
                    699,
                    704,
                    581,
                    583,
                    623,
                    624,
                    497,
                    501,
                    502,
                    631,
                    505,
                    637,
                    510,
                    511
                ],
                "MultiIndex": [
                    301
                ],
                "name_list": [
                    315,
                    317,
                    310
                ],
                "ping.result_index.take": [
                    313
                ],
                "name_list.append": [
                    315
                ],
                "_cython_functions": [
                    322
                ],
                "_cython_arity": [
                    344
                ],
                "_name_functions": [
                    346
                ],
                "SelectionMixin._builtin_table.get": [
                    353
                ],
                "SelectionMixin._builtin_table": [
                    353
                ],
                "SelectionMixin": [
                    353
                ],
                "arg": [
                    353
                ],
                "dtype_str": [
                    391,
                    378,
                    357,
                    367
                ],
                "values.dtype.name": [
                    357
                ],
                "values.dtype": [
                    357,
                    425,
                    489,
                    431,
                    432,
                    437,
                    412
                ],
                "values": [
                    400,
                    410,
                    412,
                    414,
                    544,
                    419,
                    548,
                    425,
                    429,
                    431,
                    432,
                    560,
                    435,
                    437,
                    438,
                    439,
                    566,
                    568,
                    442,
                    443,
                    445,
                    446,
                    447,
                    449,
                    577,
                    453,
                    581,
                    456,
                    462,
                    467,
                    470,
                    474,
                    476,
                    477,
                    480,
                    357,
                    489,
                    502,
                    506,
                    511
                ],
                "libgroupby": [
                    369,
                    362,
                    563
                ],
                "fname": [
                    362,
                    370
                ],
                "is_numeric": [
                    480,
                    487,
                    363,
                    432,
                    436,
                    470,
                    472,
                    446
                ],
                "dt": [
                    370,
                    367
                ],
                "f2": [
                    368,
                    373,
                    374
                ],
                "f.__signatures__": [
                    378
                ],
                "ftype": [
                    384,
                    386
                ],
                "self._cython_functions": [
                    384
                ],
                "kind": [
                    384,
                    480,
                    520,
                    399,
                    496,
                    470,
                    504,
                    537
                ],
                "how": [
                    384,
                    417,
                    480,
                    451,
                    420,
                    484,
                    422,
                    391,
                    544,
                    548,
                    527,
                    528,
                    470,
                    415
                ],
                "func": [
                    480,
                    608,
                    386,
                    801,
                    388,
                    613,
                    394,
                    622,
                    591,
                    595,
                    470,
                    502,
                    598,
                    636,
                    798,
                    511
                ],
                "get_func": [
                    386
                ],
                "orig_values": [
                    400,
                    536,
                    538,
                    535
                ],
                "is_categorical_dtype": [
                    410
                ],
                "is_sparse": [
                    410
                ],
                "is_datetime64_any_dtype": [
                    414
                ],
                "is_timedelta64_dtype": [
                    419
                ],
                "is_datetime64tz_dtype": [
                    425,
                    535
                ],
                "values.view": [
                    435,
                    429
                ],
                "is_datetimelike": [
                    514,
                    581,
                    431,
                    434,
                    502,
                    537,
                    511
                ],
                "needs_i8_conversion": [
                    431
                ],
                "is_numeric_dtype": [
                    432
                ],
                "is_bool_dtype": [
                    437
                ],
                "ensure_float64": [
                    474,
                    443,
                    438,
                    447
                ],
                "is_integer_dtype": [
                    514,
                    439
                ],
                "iNaT": [
                    442,
                    515
                ],
                "ensure_int_or_float": [
                    445
                ],
                "is_complex_dtype": [
                    446
                ],
                "values.astype": [
                    449,
                    477
                ],
                "arity": [
                    457,
                    451,
                    524,
                    463
                ],
                "self._cython_arity.get": [
                    451
                ],
                "self._cython_arity": [
                    451
                ],
                "vdim": [
                    524,
                    453,
                    455
                ],
                "values.ndim": [
                    560,
                    577,
                    453
                ],
                "swapped": [
                    460,
                    532,
                    454
                ],
                "out_shape": [
                    457,
                    498,
                    467
                ],
                "self.ngroups": [
                    457,
                    874,
                    844,
                    849,
                    754,
                    467,
                    500,
                    854,
                    831
                ],
                "values.T": [
                    462
                ],
                "values.shape": [
                    467
                ],
                "self._get_cython_function": [
                    480,
                    470
                ],
                "lib.infer_dtype": [
                    476
                ],
                "lib": [
                    648,
                    874,
                    476,
                    854
                ],
                "out_dtype": [
                    485,
                    488,
                    492,
                    498,
                    506
                ],
                "values.dtype.kind": [
                    489
                ],
                "values.dtype.itemsize": [
                    489
                ],
                "_maybe_fill": [
                    497,
                    505
                ],
                "np.empty": [
                    640,
                    498
                ],
                "np.nan": [
                    498,
                    506,
                    518
                ],
                "counts": [
                    642,
                    520,
                    522,
                    651,
                    623,
                    624,
                    500,
                    566,
                    502,
                    568,
                    630
                ],
                "np.zeros": [
                    500,
                    630
                ],
                "np.int64": [
                    536,
                    500
                ],
                "self._aggregate": [
                    501
                ],
                "min_count": [
                    544,
                    568,
                    502
                ],
                "np.empty_like": [
                    506
                ],
                "self._transform": [
                    510
                ],
                "kwargs": [
                    893,
                    548,
                    581,
                    511
                ],
                "mask": [
                    515,
                    516,
                    518
                ],
                "mask.any": [
                    516
                ],
                "result.astype": [
                    536,
                    538,
                    517
                ],
                "counts.all": [
                    520
                ],
                "result.ndim": [
                    521
                ],
                "self._name_functions": [
                    528,
                    527
                ],
                "names": [
                    528,
                    530,
                    540,
                    877
                ],
                "result.swapaxes": [
                    533
                ],
                "orig_values.dtype": [
                    536,
                    538,
                    535
                ],
                "self._cython_operation": [
                    548,
                    543
                ],
                "agg_func": [
                    568,
                    563,
                    566
                ],
                "libgroupby.group_nth": [
                    563
                ],
                "transform_func": [
                    581
                ],
                "obj.dtype": [
                    586,
                    795
                ],
                "obj": [
                    608,
                    800,
                    801,
                    586,
                    618,
                    620,
                    813,
                    622,
                    591,
                    816,
                    593,
                    817,
                    595,
                    818,
                    598,
                    633,
                    795,
                    798
                ],
                "obj.dtype.kind": [
                    586
                ],
                "self._aggregate_series_pure_python": [
                    608,
                    595,
                    798,
                    591
                ],
                "obj.index._has_complex_internals": [
                    593
                ],
                "obj.index": [
                    816,
                    593,
                    818
                ],
                "self._aggregate_series_fast": [
                    598
                ],
                "self._is_builtin_func": [
                    613
                ],
                "dummy": [
                    800,
                    801,
                    618,
                    622
                ],
                "obj._get_values": [
                    618
                ],
                "get_group_index_sorter": [
                    619,
                    844
                ],
                "obj.take": [
                    620
                ],
                "algorithms.take_nd": [
                    621,
                    839
                ],
                "algorithms": [
                    621,
                    839
                ],
                "libreduction.SeriesGrouper": [
                    622
                ],
                "grouper.get_result": [
                    802,
                    623
                ],
                "label": [
                    642,
                    643,
                    745,
                    747,
                    748,
                    635,
                    732,
                    733,
                    734
                ],
                "group.shape": [
                    642
                ],
                "lib.maybe_convert_objects": [
                    648
                ],
                "BaseGrouper": [
                    654
                ],
                "self.bins": [
                    801,
                    745,
                    687,
                    756,
                    759,
                    732,
                    701
                ],
                "bins": [
                    687
                ],
                "self.binlabels": [
                    738,
                    772,
                    773,
                    775,
                    745,
                    779,
                    783,
                    688,
                    732,
                    701
                ],
                "ensure_index": [
                    688
                ],
                "binlabels": [
                    688
                ],
                "filter_empty": [
                    689
                ],
                "value": [
                    700,
                    701
                ],
                "NaT": [
                    747,
                    733,
                    702
                ],
                "NDFrame": [
                    886,
                    719
                ],
                "slicer": [
                    728,
                    738,
                    734
                ],
                "data._slice": [
                    728
                ],
                "start": [
                    737,
                    738,
                    856,
                    728,
                    857,
                    731,
                    734,
                    735
                ],
                "edge": [
                    728,
                    732,
                    734,
                    735
                ],
                "length": [
                    729,
                    737
                ],
                "data.axes": [
                    729
                ],
                "collections.defaultdict": [
                    742
                ],
                "collections": [
                    742
                ],
                "rep": [
                    760,
                    762,
                    756,
                    758
                ],
                "np.diff": [
                    756
                ],
                "np.r_": [
                    762,
                    756
                ],
                "np.repeat": [
                    760,
                    762
                ],
                "comp_ids.astype": [
                    765
                ],
                "obs_group_ids.astype": [
                    766
                ],
                "isna": [
                    772
                ],
                "self.binlabels.name": [
                    783
                ],
                "Grouping": [
                    790
                ],
                "lvl": [
                    790,
                    791
                ],
                "name": [
                    790,
                    791
                ],
                "libreduction.SeriesBinGrouper": [
                    801
                ],
                "group.index": [
                    807
                ],
                "group.axes": [
                    809
                ],
                "axes": [
                    816,
                    818,
                    814
                ],
                "obj.index.equals": [
                    816,
                    818
                ],
                "DataFrame": [
                    817
                ],
                "self.data": [
                    860,
                    829
                ],
                "self.labels": [
                    844,
                    830,
                    839
                ],
                "labels": [
                    830
                ],
                "self.sort_idx": [
                    860,
                    839
                ],
                "self._get_sorted_data": [
                    876,
                    847
                ],
                "starts": [
                    856,
                    874,
                    877,
                    854
                ],
                "ends": [
                    856,
                    874,
                    877,
                    854
                ],
                "lib.generate_slices": [
                    874,
                    854
                ],
                "self.slabels": [
                    874,
                    854
                ],
                "end": [
                    856,
                    857
                ],
                "self._chop": [
                    857
                ],
                "self.data.take": [
                    860
                ],
                "AbstractMethodError": [
                    863
                ],
                "DataSplitter": [
                    866,
                    871
                ],
                "sdata._get_values": [
                    868
                ],
                "slice_obj": [
                    881,
                    883,
                    868
                ],
                "libreduction.apply_frame_axis0": [
                    877
                ],
                "sdata.iloc": [
                    881
                ],
                "sdata._slice": [
                    883
                ],
                "klass": [
                    888,
                    891,
                    893
                ],
                "SeriesSplitter": [
                    888
                ],
                "FrameSplitter": [
                    891
                ],
                "args": [
                    893
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_130/pandas/tests/groupby/test_value_counts.py",
                "test_function": "test_series_groupby_value_counts_with_grouper",
                "test_function_code": "def test_series_groupby_value_counts_with_grouper():\n    # GH28479\n    df = DataFrame(\n        {\n            \"Timestamp\": [\n                1565083561,\n                1565083561 + 86400,\n                1565083561 + 86500,\n                1565083561 + 86400 * 2,\n                1565083561 + 86400 * 3,\n                1565083561 + 86500 * 3,\n                1565083561 + 86400 * 4,\n            ],\n            \"Food\": [\"apple\", \"apple\", \"banana\", \"banana\", \"orange\", \"orange\", \"pear\"],\n        }\n    ).drop([3])\n\n    df[\"Datetime\"] = to_datetime(df[\"Timestamp\"].apply(lambda t: str(t)), unit=\"s\")\n    dfg = df.groupby(Grouper(freq=\"1D\", key=\"Datetime\"))\n\n    # have to sort on index because of unstable sort on values xref GH9212\n    result = dfg[\"Food\"].value_counts().sort_index()\n    expected = dfg[\"Food\"].apply(Series.value_counts).sort_index()\n    expected.index.names = result.index.names\n\n    tm.assert_series_equal(result, expected)",
                "test_error": "ValueError: operands could not be broadcast together with shape (5,) (4,)",
                "full_test_error": "def test_series_groupby_value_counts_with_grouper():\n        # GH28479\n        df = DataFrame(\n            {\n                \"Timestamp\": [\n                    1565083561,\n                    1565083561 + 86400,\n                    1565083561 + 86500,\n                    1565083561 + 86400 * 2,\n                    1565083561 + 86400 * 3,\n                    1565083561 + 86500 * 3,\n                    1565083561 + 86400 * 4,\n                ],\n                \"Food\": [\"apple\", \"apple\", \"banana\", \"banana\", \"orange\", \"orange\", \"pear\"],\n            }\n        ).drop([3])\n    \n        df[\"Datetime\"] = to_datetime(df[\"Timestamp\"].apply(lambda t: str(t)), unit=\"s\")\n        dfg = df.groupby(Grouper(freq=\"1D\", key=\"Datetime\"))\n    \n        # have to sort on index because of unstable sort on values xref GH9212\n>       result = dfg[\"Food\"].value_counts().sort_index()\n\npandas/tests/groupby/test_value_counts.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/generic.py:659: in value_counts\n    codes = [rep(level_codes) for level_codes in codes] + [llab(lab, inc)]\npandas/core/groupby/generic.py:659: in <listcomp>\n    codes = [rep(level_codes) for level_codes in codes] + [llab(lab, inc)]\n<__array_function__ internals>:5: in repeat\n    ???\n../../envs/pandas_130/lib/python3.8/site-packages/numpy/core/fromnumeric.py:482: in repeat\n    return _wrapfunc(a, 'repeat', repeats, axis=axis)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = array([0, 1, 2, 3, 4]), method = 'repeat', args = (array([1, 2, 1, 1]),)\nkwds = {'axis': None}\nbound = <built-in method repeat of numpy.ndarray object at 0x12b9bac10>\n\n    def _wrapfunc(obj, method, *args, **kwds):\n        bound = getattr(obj, method, None)\n        if bound is None:\n            return _wrapit(obj, method, *args, **kwds)\n    \n        try:\n>           return bound(*args, **kwds)\nE           ValueError: operands could not be broadcast together with shape (5,) (4,)\n\n../../envs/pandas_130/lib/python3.8/site-packages/numpy/core/fromnumeric.py:61: ValueError",
                "traceback": "pandas/core/groupby/generic.py:659: in value_counts\n    codes = [rep(level_codes) for level_codes in codes] + [llab(lab, inc)]\npandas/core/groupby/generic.py:659: in <listcomp>\n    codes = [rep(level_codes) for level_codes in codes] + [llab(lab, inc)]\n<__array_function__ internals>:5: in repeat\n    ???\n../../envs/pandas_130/lib/python3.8/site-packages/numpy/core/fromnumeric.py:482: in repeat\n    return _wrapfunc(a, 'repeat', repeats, axis=axis)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = array([0, 1, 2, 3, 4]), method = 'repeat', args = (array([1, 2, 1, 1]),)\nkwds = {'axis': None}\nbound = <built-in method repeat of numpy.ndarray object at 0x12b9bac10>\n\n    def _wrapfunc(obj, method, *args, **kwds):\n        bound = getattr(obj, method, None)\n        if bound is None:\n            return _wrapit(obj, method, *args, **kwds)\n    \n        try:\n>           return bound(*args, **kwds)\nE           ValueError: operands could not be broadcast together with shape (5,) (4,)\n\n../../envs/pandas_130/lib/python3.8/site-packages/numpy/core/fromnumeric.py:61: ValueError",
                "test_function_decorators": []
            }
        ]
    }
}