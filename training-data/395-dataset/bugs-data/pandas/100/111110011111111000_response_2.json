{
    "pandas": [
        {
            "bugID": 100,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 9850,
            "file_name": "pandas/core/generic.py",
            "replace_code": "def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None, **kwargs):\n\n    \"\"\"\n    Percentage change between the current and a prior element.\n    \n    Percentage change of the current element is computed with the previous element.\n    This function acts similar to `pct_change` function in DataFrame, but the results\n    are similar to how in `Series` this is just `diff` divided by the original\n    element.\n    \n    Parameters\n    ----------\n    periods : int, default 1\n        Periods to shift for forming percent change.\n    fill_method : str, default 'pad' (ffill)\n        How to handle NAs before computing percent changes. The default is 'pad'.\n    limit : int, default None\n        The number of consecutive NAs to fill before stopping. The default is None,\n        but this may result in unexpected changes.\n    freq : DateOffset, timedelta, or offset alias string, optional\n        increment to shift the data one period. This is useful when using filling\n        method and forward/backward fills are required. The default is None.\n    kwargs : dict\n        Additional keyword arguments to be passed to `DataFrame.shift` method.\n    \n    Returns\n    -------\n    DataFrame\n        Percentage change.\n    \n    \"\"\"\n    \n    axis = self._get_axis_number(kwargs.get(\"axis\", self._stat_axis_name))\n    \n    if fill_method is not None:\n        data = self.fillna(method=fill_method, limit=limit, axis=axis)\n    else:\n        data = self.copy()\n    \n    shifted_data = data.shift(periods=periods, freq=freq, axis=axis, **kwargs)\n    rs = data.div(shifted_data) - 1\n    \n    rs = rs.loc[~rs.index.duplicated()]\n    rs = rs.reindex_like(data)\n    \n    if fill_method is None:\n        mask = rs.isna()\n        rs.values[mask] = np.nan\n    \n    return rs"
        }
    ]
}