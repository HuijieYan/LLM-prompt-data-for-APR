{
    "1.1.1": "@Appender(_shared_docs[\"pct_change\"] % _shared_doc_kwargs)\ndef pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None, **kwargs):\n    # TODO: Not sure if above is correct - need someone to confirm.\n    axis = self._get_axis_number(kwargs.pop(\"axis\", self._stat_axis_name))\n    if fill_method is None:\n        data = self\n    else:\n        data = self.fillna(method=fill_method, limit=limit, axis=axis)\n\n    rs = data.div(data.shift(periods=periods, freq=freq, axis=axis, **kwargs)) - 1\n    rs = rs.loc[~rs.index.duplicated()]\n    rs = rs.reindex_like(data)\n    if freq is None:\n        mask = isna(com.values_from_object(data))\n        np.putmask(rs.values, mask, np.nan)\n    return rs\n",
    "1.1.2": null,
    "1.2.1": "class NDFrame(PandasObject, SelectionMixin)",
    "1.2.2": "N-dimensional analogue of DataFrame. Store multi-dimensional in a\nsize-mutable, labeled data structure\n\nParameters\n----------\ndata : BlockManager\naxes : list\ncopy : bool, default False",
    "1.2.3": [
        "_get_axis_number(cls, axis)",
        "pop(self, item)",
        "reindex_like(self, other, method: Optional[str]=None, copy: bool_t=True, limit=None, tolerance=None)",
        "values(self)",
        "fillna(self: FrameOrSeries, value=None, method=None, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]",
        "isna(self)",
        "mask(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
        "shift(self, periods=1, freq=None, axis=0, fill_value=None)"
    ],
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_100/pandas/core/generic.py",
    "1.3.2": [
        "_get_axis_number(cls, axis)",
        "pop(self, item)",
        "reindex_like(self, other, method: Optional[str]=None, copy: bool_t=True, limit=None, tolerance=None)",
        "values(self)",
        "fillna(self: FrameOrSeries, value=None, method=None, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]",
        "isna(self)",
        "mask(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
        "shift(self, periods=1, freq=None, axis=0, fill_value=None)"
    ],
    "1.4.1": [
        "@pytest.mark.parametrize(\"fill_method\", [\"pad\", \"ffill\", None])\ndef test_pct_change_with_duplicated_indices(fill_method):\n    # GH30463\n    data = DataFrame(\n        {0: [np.nan, 1, 2, 3, 9, 18], 1: [0, 1, np.nan, 3, 9, 18]}, index=[\"a\", \"b\"] * 3\n    )\n    result = data.pct_change(fill_method=fill_method)\n    if fill_method is None:\n        second_column = [np.nan, np.inf, np.nan, np.nan, 2.0, 1.0]\n    else:\n        second_column = [np.nan, np.inf, 0.0, 2.0, 2.0, 1.0]\n    expected = DataFrame(\n        {0: [np.nan, np.nan, 1.0, 0.5, 2.0, 1.0], 1: second_column},\n        index=[\"a\", \"b\"] * 3,\n    )\n    tm.assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\"fill_method\", [\"pad\", \"ffill\", None])\ndef test_pct_change_with_duplicated_indices(fill_method):\n    # GH30463\n    data = DataFrame(\n        {0: [np.nan, 1, 2, 3, 9, 18], 1: [0, 1, np.nan, 3, 9, 18]}, index=[\"a\", \"b\"] * 3\n    )\n    result = data.pct_change(fill_method=fill_method)\n    if fill_method is None:\n        second_column = [np.nan, np.inf, np.nan, np.nan, 2.0, 1.0]\n    else:\n        second_column = [np.nan, np.inf, 0.0, 2.0, 2.0, 1.0]\n    expected = DataFrame(\n        {0: [np.nan, np.nan, 1.0, 0.5, 2.0, 1.0], 1: second_column},\n        index=[\"a\", \"b\"] * 3,\n    )\n    tm.assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\"fill_method\", [\"pad\", \"ffill\", None])\ndef test_pct_change_with_duplicated_indices(fill_method):\n    # GH30463\n    data = DataFrame(\n        {0: [np.nan, 1, 2, 3, 9, 18], 1: [0, 1, np.nan, 3, 9, 18]}, index=[\"a\", \"b\"] * 3\n    )\n    result = data.pct_change(fill_method=fill_method)\n    if fill_method is None:\n        second_column = [np.nan, np.inf, np.nan, np.nan, 2.0, 1.0]\n    else:\n        second_column = [np.nan, np.inf, 0.0, 2.0, 2.0, 1.0]\n    expected = DataFrame(\n        {0: [np.nan, np.nan, 1.0, 0.5, 2.0, 1.0], 1: second_column},\n        index=[\"a\", \"b\"] * 3,\n    )\n    tm.assert_frame_equal(result, expected)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_100/pandas/tests/frame/methods/test_pct_change.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_100/pandas/tests/frame/methods/test_pct_change.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_100/pandas/tests/frame/methods/test_pct_change.py"
    ],
    "2.1.1": [
        [
            "E   AssertionError: DataFrame.iloc[:, 0] are different\nE   \nE   DataFrame.iloc[:, 0] values are different (66.66667 %)\nE   [left]:  [nan, nan, nan, nan, nan, nan]\nE   [right]: [nan, nan, 1.0, 0.5, 2.0, 1.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 0] are different\nE   \nE   DataFrame.iloc[:, 0] values are different (66.66667 %)\nE   [left]:  [nan, nan, nan, nan, nan, nan]\nE   [right]: [nan, nan, 1.0, 0.5, 2.0, 1.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 0] are different\nE   \nE   DataFrame.iloc[:, 0] values are different (66.66667 %)\nE   [left]:  [nan, nan, nan, nan, nan, nan]\nE   [right]: [nan, nan, 1.0, 0.5, 2.0, 1.0]"
        ]
    ],
    "2.1.2": [
        [
            "fill_method = 'pad'\n\n    @pytest.mark.parametrize(\"fill_method\", [\"pad\", \"ffill\", None])\n    def test_pct_change_with_duplicated_indices(fill_method):\n        # GH30463\n        data = DataFrame(\n            {0: [np.nan, 1, 2, 3, 9, 18], 1: [0, 1, np.nan, 3, 9, 18]}, index=[\"a\", \"b\"] * 3\n        )\n        result = data.pct_change(fill_method=fill_method)\n        if fill_method is None:\n            second_column = [np.nan, np.inf, np.nan, np.nan, 2.0, 1.0]\n        else:\n            second_column = [np.nan, np.inf, 0.0, 2.0, 2.0, 1.0]\n        expected = DataFrame(\n            {0: [np.nan, np.nan, 1.0, 0.5, 2.0, 1.0], 1: second_column},\n            index=[\"a\", \"b\"] * 3,\n        )\n>       tm.assert_frame_equal(result, expected)\n\npandas/tests/frame/methods/test_pct_change.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "fill_method = 'ffill'\n\n    @pytest.mark.parametrize(\"fill_method\", [\"pad\", \"ffill\", None])\n    def test_pct_change_with_duplicated_indices(fill_method):\n        # GH30463\n        data = DataFrame(\n            {0: [np.nan, 1, 2, 3, 9, 18], 1: [0, 1, np.nan, 3, 9, 18]}, index=[\"a\", \"b\"] * 3\n        )\n        result = data.pct_change(fill_method=fill_method)\n        if fill_method is None:\n            second_column = [np.nan, np.inf, np.nan, np.nan, 2.0, 1.0]\n        else:\n            second_column = [np.nan, np.inf, 0.0, 2.0, 2.0, 1.0]\n        expected = DataFrame(\n            {0: [np.nan, np.nan, 1.0, 0.5, 2.0, 1.0], 1: second_column},\n            index=[\"a\", \"b\"] * 3,\n        )\n>       tm.assert_frame_equal(result, expected)\n\npandas/tests/frame/methods/test_pct_change.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "fill_method = None\n\n    @pytest.mark.parametrize(\"fill_method\", [\"pad\", \"ffill\", None])\n    def test_pct_change_with_duplicated_indices(fill_method):\n        # GH30463\n        data = DataFrame(\n            {0: [np.nan, 1, 2, 3, 9, 18], 1: [0, 1, np.nan, 3, 9, 18]}, index=[\"a\", \"b\"] * 3\n        )\n        result = data.pct_change(fill_method=fill_method)\n        if fill_method is None:\n            second_column = [np.nan, np.inf, np.nan, np.nan, 2.0, 1.0]\n        else:\n            second_column = [np.nan, np.inf, 0.0, 2.0, 2.0, 1.0]\n        expected = DataFrame(\n            {0: [np.nan, np.nan, 1.0, 0.5, 2.0, 1.0], 1: second_column},\n            index=[\"a\", \"b\"] * 3,\n        )\n>       tm.assert_frame_equal(result, expected)\n\npandas/tests/frame/methods/test_pct_change.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self._get_axis_number": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                "self": "      0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0",
                "kwargs": "{}",
                "self._stat_axis_name": "'index'",
                "fill_method": "'pad'",
                "self.fillna": "<bound method DataFrame.fillna of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "periods": "1"
            },
            {
                "axis": "0",
                "data": "      0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   1.0\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0",
                "rs": "    0    1\na NaN  NaN\nb NaN  inf\na NaN  NaN\nb NaN  inf\na NaN  NaN\nb NaN  inf",
                "data.div": "<bound method _arith_method_FRAME.<locals>.f of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   1.0\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "data.shift": "<bound method DataFrame.shift of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   1.0\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "rs.loc": "<pandas.core.indexing._LocIndexer object at 0x11eadd7c0>",
                "rs.index": "Index(['a', 'b', 'a', 'b', 'a', 'b'], dtype='object')",
                "rs.reindex_like": "<bound method NDFrame.reindex_like of     0    1\na NaN  NaN\nb NaN  inf\na NaN  NaN\nb NaN  inf\na NaN  NaN\nb NaN  inf>",
                "mask": "array([[ True, False],\n       [False, False],\n       [False, False],\n       [False, False],\n       [False, False],\n       [False, False]])",
                "rs.values": "array([[nan, nan],\n       [nan, inf],\n       [nan, nan],\n       [nan, inf],\n       [nan, nan],\n       [nan, inf]])"
            }
        ],
        [
            {
                "self._get_axis_number": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                "self": "      0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0",
                "kwargs": "{}",
                "self._stat_axis_name": "'index'",
                "fill_method": "'ffill'",
                "self.fillna": "<bound method DataFrame.fillna of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "periods": "1"
            },
            {
                "axis": "0",
                "data": "      0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   1.0\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0",
                "rs": "    0    1\na NaN  NaN\nb NaN  inf\na NaN  NaN\nb NaN  inf\na NaN  NaN\nb NaN  inf",
                "data.div": "<bound method _arith_method_FRAME.<locals>.f of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   1.0\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "data.shift": "<bound method DataFrame.shift of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   1.0\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "rs.loc": "<pandas.core.indexing._LocIndexer object at 0x11eb32770>",
                "rs.index": "Index(['a', 'b', 'a', 'b', 'a', 'b'], dtype='object')",
                "rs.reindex_like": "<bound method NDFrame.reindex_like of     0    1\na NaN  NaN\nb NaN  inf\na NaN  NaN\nb NaN  inf\na NaN  NaN\nb NaN  inf>",
                "mask": "array([[ True, False],\n       [False, False],\n       [False, False],\n       [False, False],\n       [False, False],\n       [False, False]])",
                "rs.values": "array([[nan, nan],\n       [nan, inf],\n       [nan, nan],\n       [nan, inf],\n       [nan, nan],\n       [nan, inf]])"
            }
        ],
        [
            {
                "self._get_axis_number": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                "self": "      0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0",
                "kwargs": "{}",
                "self._stat_axis_name": "'index'",
                "self.fillna": "<bound method DataFrame.fillna of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "periods": "1"
            },
            {
                "axis": "0",
                "data": "      0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0",
                "rs": "    0    1\na NaN  NaN\nb NaN  inf\na NaN  NaN\nb NaN  inf\na NaN  NaN\nb NaN  inf",
                "data.div": "<bound method _arith_method_FRAME.<locals>.f of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "data.shift": "<bound method DataFrame.shift of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "rs.loc": "<pandas.core.indexing._LocIndexer object at 0x11eb329a0>",
                "rs.index": "Index(['a', 'b', 'a', 'b', 'a', 'b'], dtype='object')",
                "rs.reindex_like": "<bound method NDFrame.reindex_like of     0    1\na NaN  NaN\nb NaN  inf\na NaN  NaN\nb NaN  inf\na NaN  NaN\nb NaN  inf>",
                "mask": "array([[ True, False],\n       [False, False],\n       [False,  True],\n       [False, False],\n       [False, False],\n       [False, False]])",
                "rs.values": "array([[nan, nan],\n       [nan, inf],\n       [nan, nan],\n       [nan, inf],\n       [nan, nan],\n       [nan, inf]])"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self._get_axis_number": "method",
                "self": "DataFrame",
                "kwargs": "dict",
                "self._stat_axis_name": "str",
                "fill_method": "str",
                "self.fillna": "method",
                "periods": "int"
            },
            {
                "axis": "int",
                "data": "DataFrame",
                "rs": "DataFrame",
                "data.div": "method",
                "data.shift": "method",
                "rs.loc": "_LocIndexer",
                "rs.index": "Index",
                "rs.reindex_like": "method",
                "mask": "ndarray",
                "rs.values": "ndarray"
            }
        ],
        [
            {
                "self._get_axis_number": "method",
                "self": "DataFrame",
                "kwargs": "dict",
                "self._stat_axis_name": "str",
                "fill_method": "str",
                "self.fillna": "method",
                "periods": "int"
            },
            {
                "axis": "int",
                "data": "DataFrame",
                "rs": "DataFrame",
                "data.div": "method",
                "data.shift": "method",
                "rs.loc": "_LocIndexer",
                "rs.index": "Index",
                "rs.reindex_like": "method",
                "mask": "ndarray",
                "rs.values": "ndarray"
            }
        ],
        [
            {
                "self._get_axis_number": "method",
                "self": "DataFrame",
                "kwargs": "dict",
                "self._stat_axis_name": "str",
                "self.fillna": "method",
                "periods": "int"
            },
            {
                "axis": "int",
                "data": "DataFrame",
                "rs": "DataFrame",
                "data.div": "method",
                "data.shift": "method",
                "rs.loc": "_LocIndexer",
                "rs.index": "Index",
                "rs.reindex_like": "method",
                "mask": "ndarray",
                "rs.values": "ndarray"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self._get_axis_number": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                "self": "      0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0",
                "kwargs": "{}",
                "self._stat_axis_name": "'index'",
                "fill_method": "'pad'",
                "self.fillna": "<bound method DataFrame.fillna of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "periods": "1"
            },
            {
                "axis": "0",
                "data": "      0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   1.0\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0",
                "rs": "     0    1\na  NaN  NaN\nb  NaN  inf\na  1.0  0.0\nb  0.5  2.0\na  2.0  2.0\nb  1.0  1.0",
                "data.div": "<bound method _arith_method_FRAME.<locals>.f of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   1.0\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "data.shift": "<bound method DataFrame.shift of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   1.0\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "rs.loc": "<pandas.core.indexing._LocIndexer object at 0x1194cca90>",
                "rs.index": "Index(['a', 'b', 'a', 'b', 'a', 'b'], dtype='object')",
                "rs.reindex_like": "<bound method NDFrame.reindex_like of      0    1\na  NaN  NaN\nb  NaN  inf\na  1.0  0.0\nb  0.5  2.0\na  2.0  2.0\nb  1.0  1.0>"
            }
        ],
        [
            {
                "self._get_axis_number": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                "self": "      0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0",
                "kwargs": "{}",
                "self._stat_axis_name": "'index'",
                "fill_method": "'ffill'",
                "self.fillna": "<bound method DataFrame.fillna of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "periods": "1"
            },
            {
                "axis": "0",
                "data": "      0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   1.0\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0",
                "rs": "     0    1\na  NaN  NaN\nb  NaN  inf\na  1.0  0.0\nb  0.5  2.0\na  2.0  2.0\nb  1.0  1.0",
                "data.div": "<bound method _arith_method_FRAME.<locals>.f of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   1.0\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "data.shift": "<bound method DataFrame.shift of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   1.0\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "rs.loc": "<pandas.core.indexing._LocIndexer object at 0x1194d9d10>",
                "rs.index": "Index(['a', 'b', 'a', 'b', 'a', 'b'], dtype='object')",
                "rs.reindex_like": "<bound method NDFrame.reindex_like of      0    1\na  NaN  NaN\nb  NaN  inf\na  1.0  0.0\nb  0.5  2.0\na  2.0  2.0\nb  1.0  1.0>"
            }
        ],
        [
            {
                "self._get_axis_number": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                "self": "      0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0",
                "kwargs": "{}",
                "self._stat_axis_name": "'index'",
                "self.fillna": "<bound method DataFrame.fillna of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "periods": "1"
            },
            {
                "axis": "0",
                "data": "      0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0",
                "rs": "     0    1\na  NaN  NaN\nb  NaN  inf\na  1.0  NaN\nb  0.5  NaN\na  2.0  2.0\nb  1.0  1.0",
                "data.div": "<bound method _arith_method_FRAME.<locals>.f of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "data.shift": "<bound method DataFrame.shift of       0     1\na   NaN   0.0\nb   1.0   1.0\na   2.0   NaN\nb   3.0   3.0\na   9.0   9.0\nb  18.0  18.0>",
                "rs.loc": "<pandas.core.indexing._LocIndexer object at 0x119483770>",
                "rs.index": "Index(['a', 'b', 'a', 'b', 'a', 'b'], dtype='object')",
                "rs.reindex_like": "<bound method NDFrame.reindex_like of      0    1\na  NaN  NaN\nb  NaN  inf\na  1.0  NaN\nb  0.5  NaN\na  2.0  2.0\nb  1.0  1.0>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self._get_axis_number": "method",
                "self": "DataFrame",
                "kwargs": "dict",
                "self._stat_axis_name": "str",
                "fill_method": "str",
                "self.fillna": "method",
                "periods": "int"
            },
            {
                "axis": "int",
                "data": "DataFrame",
                "rs": "DataFrame",
                "data.div": "method",
                "data.shift": "method",
                "rs.loc": "_LocIndexer",
                "rs.index": "Index",
                "rs.reindex_like": "method"
            }
        ],
        [
            {
                "self._get_axis_number": "method",
                "self": "DataFrame",
                "kwargs": "dict",
                "self._stat_axis_name": "str",
                "fill_method": "str",
                "self.fillna": "method",
                "periods": "int"
            },
            {
                "axis": "int",
                "data": "DataFrame",
                "rs": "DataFrame",
                "data.div": "method",
                "data.shift": "method",
                "rs.loc": "_LocIndexer",
                "rs.index": "Index",
                "rs.reindex_like": "method"
            }
        ],
        [
            {
                "self._get_axis_number": "method",
                "self": "DataFrame",
                "kwargs": "dict",
                "self._stat_axis_name": "str",
                "self.fillna": "method",
                "periods": "int"
            },
            {
                "axis": "int",
                "data": "DataFrame",
                "rs": "DataFrame",
                "data.div": "method",
                "data.shift": "method",
                "rs.loc": "_LocIndexer",
                "rs.index": "Index",
                "rs.reindex_like": "method"
            }
        ]
    ],
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}