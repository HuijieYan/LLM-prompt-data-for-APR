{
    "pandas:53": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_53/pandas/core/indexes/base.py": {
            "buggy_functions": [
                {
                    "function_name": "_convert_scalar_indexer",
                    "function_code": "def _convert_scalar_indexer(self, key, kind: str_t):\n    \"\"\"\n    Convert a scalar indexer.\n\n    Parameters\n    ----------\n    key : label of the slice bound\n    kind : {'loc', 'getitem'}\n    \"\"\"\n    assert kind in [\"loc\", \"getitem\"]\n\n    if len(self) and not isinstance(self, ABCMultiIndex):\n\n        # we can raise here if we are definitive that this\n        # is positional indexing (eg. .loc on with a float)\n        # or label indexing if we are using a type able\n        # to be represented in the index\n\n        if kind == \"getitem\" and is_float(key):\n            if not self.is_floating():\n                self._invalid_indexer(\"label\", key)\n\n        elif kind == \"loc\" and is_float(key):\n\n            # we want to raise KeyError on string/mixed here\n            # technically we *could* raise a TypeError\n            # on anything but mixed though\n            if self.inferred_type not in [\n                \"floating\",\n                \"mixed-integer-float\",\n                \"integer-na\",\n                \"string\",\n                \"mixed\",\n            ]:\n                self._invalid_indexer(\"label\", key)\n\n        elif kind == \"loc\" and is_integer(key):\n            if not self.holds_integer():\n                self._invalid_indexer(\"label\", key)\n\n    return key\n",
                    "decorators": [],
                    "docstring": "Convert a scalar indexer.\n\nParameters\n----------\nkey : label of the slice bound\nkind : {'loc', 'getitem'}",
                    "start_line": 3077,
                    "variables": {
                        "str_t": [
                            3077
                        ],
                        "kind": [
                            3113,
                            3099,
                            3086,
                            3095
                        ],
                        "len": [
                            3088
                        ],
                        "self": [
                            3104,
                            3111,
                            3114,
                            3115,
                            3088,
                            3096,
                            3097
                        ],
                        "isinstance": [
                            3088
                        ],
                        "ABCMultiIndex": [
                            3088
                        ],
                        "is_float": [
                            3099,
                            3095
                        ],
                        "key": [
                            3111,
                            3113,
                            3115,
                            3117,
                            3095,
                            3097,
                            3099
                        ],
                        "self.is_floating": [
                            3096
                        ],
                        "self._invalid_indexer": [
                            3097,
                            3115,
                            3111
                        ],
                        "self.inferred_type": [
                            3104
                        ],
                        "is_integer": [
                            3113
                        ],
                        "self.holds_integer": [
                            3114
                        ]
                    },
                    "filtered_variables": {
                        "str_t": [
                            3077
                        ],
                        "kind": [
                            3113,
                            3099,
                            3086,
                            3095
                        ],
                        "self": [
                            3104,
                            3111,
                            3114,
                            3115,
                            3088,
                            3096,
                            3097
                        ],
                        "ABCMultiIndex": [
                            3088
                        ],
                        "is_float": [
                            3099,
                            3095
                        ],
                        "key": [
                            3111,
                            3113,
                            3115,
                            3117,
                            3095,
                            3097,
                            3099
                        ],
                        "self.is_floating": [
                            3096
                        ],
                        "self._invalid_indexer": [
                            3097,
                            3115,
                            3111
                        ],
                        "self.inferred_type": [
                            3104
                        ],
                        "is_integer": [
                            3113
                        ],
                        "self.holds_integer": [
                            3114
                        ]
                    },
                    "diff_line_number": 3114,
                    "class_data": {
                        "signature": "class Index(IndexOpsMixin, PandasObject)",
                        "docstring": "Immutable ndarray implementing an ordered, sliceable set. The basic object\nstoring axis labels for all pandas objects.\n\nParameters\n----------\ndata : array-like (1-dimensional)\ndtype : NumPy dtype (default: object)\n    If dtype is None, we find the dtype that best fits the data.\n    If an actual dtype is provided, we coerce to that dtype if it's safe.\n    Otherwise, an error will be raised.\ncopy : bool\n    Make a copy of input ndarray.\nname : object\n    Name to be stored in the index.\ntupleize_cols : bool (default: True)\n    When True, attempt to create a MultiIndex if possible.\n\nSee Also\n--------\nRangeIndex : Index implementing a monotonic integer range.\nCategoricalIndex : Index of :class:`Categorical` s.\nMultiIndex : A multi-level, or hierarchical, Index.\nIntervalIndex : An Index of :class:`Interval` s.\nDatetimeIndex, TimedeltaIndex, PeriodIndex\nInt64Index, UInt64Index,  Float64Index\n\nNotes\n-----\nAn Index instance can **only** contain hashable objects\n\nExamples\n--------\n>>> pd.Index([1, 2, 3])\nInt64Index([1, 2, 3], dtype='int64')\n\n>>> pd.Index(list('abc'))\nIndex(['a', 'b', 'c'], dtype='object')",
                        "constructor_docstring": null,
                        "functions": [
                            "def _left_indexer_unique(self, left, right):\n    return libjoin.left_join_indexer_unique(left, right)",
                            "def _left_indexer(self, left, right):\n    return libjoin.left_join_indexer(left, right)",
                            "def _inner_indexer(self, left, right):\n    return libjoin.inner_join_indexer(left, right)",
                            "def _outer_indexer(self, left, right):\n    return libjoin.outer_join_indexer(left, right)",
                            "def __new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs) -> 'Index':\n    from pandas.core.indexes.range import RangeIndex\n    name = maybe_extract_name(name, data, cls)\n    if isinstance(data, ABCPandasArray):\n        data = data.to_numpy()\n    if isinstance(data, RangeIndex):\n        return RangeIndex(start=data, copy=copy, dtype=dtype, name=name)\n    elif isinstance(data, range):\n        return RangeIndex.from_range(data, dtype=dtype, name=name)\n    elif is_categorical_dtype(data) or is_categorical_dtype(dtype):\n        from pandas.core.indexes.category import CategoricalIndex\n        return CategoricalIndex(data, dtype=dtype, copy=copy, name=name, **kwargs)\n    elif is_interval_dtype(data) or is_interval_dtype(dtype):\n        from pandas.core.indexes.interval import IntervalIndex\n        return _maybe_asobject(dtype, IntervalIndex, data, copy, name, **kwargs)\n    elif is_datetime64_any_dtype(data) or is_datetime64_any_dtype(dtype) or 'tz' in kwargs:\n        from pandas import DatetimeIndex\n        return _maybe_asobject(dtype, DatetimeIndex, data, copy, name, **kwargs)\n    elif is_timedelta64_dtype(data) or is_timedelta64_dtype(dtype):\n        from pandas import TimedeltaIndex\n        return _maybe_asobject(dtype, TimedeltaIndex, data, copy, name, **kwargs)\n    elif is_period_dtype(data) or is_period_dtype(dtype):\n        from pandas import PeriodIndex\n        return _maybe_asobject(dtype, PeriodIndex, data, copy, name, **kwargs)\n    elif is_extension_array_dtype(data) or is_extension_array_dtype(dtype):\n        if not (dtype is None or is_object_dtype(dtype)):\n            ea_cls = dtype.construct_array_type()\n            data = ea_cls._from_sequence(data, dtype=dtype, copy=False)\n        else:\n            data = np.asarray(data, dtype=object)\n        data = data.astype(object)\n        return Index(data, dtype=object, copy=copy, name=name, **kwargs)\n    elif isinstance(data, (np.ndarray, Index, ABCSeries)):\n        from pandas.core.indexes.numeric import Float64Index, Int64Index, UInt64Index\n        if dtype is not None:\n            data = _maybe_cast_with_dtype(data, dtype, copy)\n            dtype = data.dtype\n        if is_signed_integer_dtype(data.dtype):\n            return Int64Index(data, copy=copy, dtype=dtype, name=name)\n        elif is_unsigned_integer_dtype(data.dtype):\n            return UInt64Index(data, copy=copy, dtype=dtype, name=name)\n        elif is_float_dtype(data.dtype):\n            return Float64Index(data, copy=copy, dtype=dtype, name=name)\n        elif issubclass(data.dtype.type, np.bool) or is_bool_dtype(data):\n            subarr = data.astype('object')\n        else:\n            subarr = com.asarray_tuplesafe(data, dtype=object)\n        if copy:\n            subarr = subarr.copy()\n        if dtype is None:\n            new_data, new_dtype = _maybe_cast_data_without_dtype(subarr)\n            if new_dtype is not None:\n                return cls(new_data, dtype=new_dtype, copy=False, name=name, **kwargs)\n        if kwargs:\n            raise TypeError(f'Unexpected keyword arguments {repr(set(kwargs))}')\n        if subarr.ndim > 1:\n            raise ValueError('Index data must be 1-dimensional')\n        return cls._simple_new(subarr, name)\n    elif hasattr(data, '__array__'):\n        return Index(np.asarray(data), dtype=dtype, copy=copy, name=name, **kwargs)\n    elif data is None or is_scalar(data):\n        raise cls._scalar_data_error(data)\n    else:\n        if tupleize_cols and is_list_like(data):\n            if is_iterator(data):\n                data = list(data)\n            if data and all((isinstance(e, tuple) for e in data)):\n                from pandas.core.indexes.multi import MultiIndex\n                return MultiIndex.from_tuples(data, names=name or kwargs.get('names'))\n        subarr = com.asarray_tuplesafe(data, dtype=object)\n        return Index(subarr, dtype=dtype, copy=copy, name=name, **kwargs)",
                            "@property\ndef asi8(self):\n    \"\"\"\n    Integer representation of the values.\n\n    Returns\n    -------\n    ndarray\n        An ndarray with int64 dtype.\n    \"\"\"\n    return None",
                            "@classmethod\ndef _simple_new(cls, values, name=None, dtype=None):\n    \"\"\"\n    We require that we have a dtype compat for the values. If we are passed\n    a non-dtype compat, then coerce using the constructor.\n\n    Must be careful not to recurse.\n    \"\"\"\n    assert isinstance(values, np.ndarray), type(values)\n    result = object.__new__(cls)\n    result._data = values\n    result._index_data = values\n    result._name = name\n    return result._reset_identity()",
                            "@cache_readonly\ndef _constructor(self):\n    return type(self)",
                            "def _get_attributes_dict(self):\n    \"\"\"\n    Return an attributes dict for my class.\n    \"\"\"\n    return {k: getattr(self, k, None) for k in self._attributes}",
                            "def _shallow_copy(self, values=None, **kwargs):\n    \"\"\"\n    Create a new Index with the same class as the caller, don't copy the\n    data, use the same object attributes with passed in attributes taking\n    precedence.\n\n    *this is an internal non-public method*\n\n    Parameters\n    ----------\n    values : the values to create the new Index, optional\n    kwargs : updates the default attributes for this Index\n    \"\"\"\n    if values is None:\n        values = self.values\n    attributes = self._get_attributes_dict()\n    attributes.update(kwargs)\n    return self._simple_new(values, **attributes)",
                            "def _shallow_copy_with_infer(self, values, **kwargs):\n    \"\"\"\n    Create a new Index inferring the class with passed value, don't copy\n    the data, use the same object attributes with passed in attributes\n    taking precedence.\n\n    *this is an internal non-public method*\n\n    Parameters\n    ----------\n    values : the values to create the new Index, optional\n    kwargs : updates the default attributes for this Index\n    \"\"\"\n    attributes = self._get_attributes_dict()\n    attributes.update(kwargs)\n    attributes['copy'] = False\n    if not len(values) and 'dtype' not in kwargs:\n        attributes['dtype'] = self.dtype\n    if self._infer_as_myclass:\n        try:\n            return self._constructor(values, **attributes)\n        except (TypeError, ValueError):\n            pass\n    return Index(values, **attributes)",
                            "def _update_inplace(self, result, **kwargs):\n    raise TypeError(\"Index can't be updated inplace\")",
                            "def is_(self, other) -> bool:\n    \"\"\"\n    More flexible, faster check like ``is`` but that works through views.\n\n    Note: this is *not* the same as ``Index.identical()``, which checks\n    that metadata is also the same.\n\n    Parameters\n    ----------\n    other : object\n        other object to compare against.\n\n    Returns\n    -------\n    True if both have same underlying data, False otherwise : bool\n    \"\"\"\n    return self._id is getattr(other, '_id', Ellipsis) and self._id is not None",
                            "def _reset_identity(self):\n    \"\"\"\n    Initializes or resets ``_id`` attribute with new object.\n    \"\"\"\n    self._id = _Identity()\n    return self",
                            "def _cleanup(self):\n    self._engine.clear_mapping()",
                            "@cache_readonly\ndef _engine(self):\n    _ndarray_values = self._ndarray_values\n    return self._engine_type(lambda: _ndarray_values, len(self))",
                            "def __len__(self) -> int:\n    \"\"\"\n    Return the length of the Index.\n    \"\"\"\n    return len(self._data)",
                            "def __array__(self, dtype=None) -> np.ndarray:\n    \"\"\"\n    The array interface, return my values.\n    \"\"\"\n    return np.asarray(self._data, dtype=dtype)",
                            "def __array_wrap__(self, result, context=None):\n    \"\"\"\n    Gets called after a ufunc.\n    \"\"\"\n    result = lib.item_from_zerodim(result)\n    if is_bool_dtype(result) or lib.is_scalar(result) or np.ndim(result) > 1:\n        return result\n    attrs = self._get_attributes_dict()\n    return Index(result, **attrs)",
                            "@cache_readonly\ndef dtype(self):\n    \"\"\"\n    Return the dtype object of the underlying data.\n    \"\"\"\n    return self._data.dtype",
                            "def ravel(self, order='C'):\n    \"\"\"\n    Return an ndarray of the flattened values of the underlying data.\n\n    Returns\n    -------\n    numpy.ndarray\n        Flattened array.\n\n    See Also\n    --------\n    numpy.ndarray.ravel\n    \"\"\"\n    return self._ndarray_values.ravel(order=order)",
                            "def view(self, cls=None):\n    if cls is not None and (not hasattr(cls, '_typ')):\n        result = self._data.view(cls)\n    else:\n        result = self._shallow_copy()\n    if isinstance(result, Index):\n        result._id = self._id\n    return result",
                            "def astype(self, dtype, copy=True):\n    \"\"\"\n    Create an Index with values cast to dtypes. The class of a new Index\n    is determined by dtype. When conversion is impossible, a ValueError\n    exception is raised.\n\n    Parameters\n    ----------\n    dtype : numpy dtype or pandas type\n        Note that any signed integer `dtype` is treated as ``'int64'``,\n        and any unsigned integer `dtype` is treated as ``'uint64'``,\n        regardless of the size.\n    copy : bool, default True\n        By default, astype always returns a newly allocated object.\n        If copy is set to False and internal requirements on dtype are\n        satisfied, the original data is used to create a new Index\n        or the original Index is returned.\n\n    Returns\n    -------\n    Index\n        Index with values cast to specified dtype.\n    \"\"\"\n    if is_dtype_equal(self.dtype, dtype):\n        return self.copy() if copy else self\n    elif is_categorical_dtype(dtype):\n        from pandas.core.indexes.category import CategoricalIndex\n        return CategoricalIndex(self.values, name=self.name, dtype=dtype, copy=copy)\n    elif is_extension_array_dtype(dtype):\n        return Index(np.asarray(self), dtype=dtype, copy=copy)\n    try:\n        casted = self.values.astype(dtype, copy=copy)\n    except (TypeError, ValueError):\n        raise TypeError(f'Cannot cast {type(self).__name__} to dtype {dtype}')\n    return Index(casted, name=self.name, dtype=dtype)",
                            "@Appender(_index_shared_docs['take'] % _index_doc_kwargs)\ndef take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n    if kwargs:\n        nv.validate_take(tuple(), kwargs)\n    indices = ensure_platform_int(indices)\n    if self._can_hold_na:\n        taken = self._assert_take_fillable(self.values, indices, allow_fill=allow_fill, fill_value=fill_value, na_value=self._na_value)\n    else:\n        if allow_fill and fill_value is not None:\n            cls_name = type(self).__name__\n            raise ValueError(f'Unable to fill values because {cls_name} cannot contain NA')\n        taken = self.values.take(indices)\n    return self._shallow_copy(taken)",
                            "def _assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan):\n    \"\"\"\n    Internal method to handle NA filling of take.\n    \"\"\"\n    indices = ensure_platform_int(indices)\n    if allow_fill and fill_value is not None:\n        if (indices < -1).any():\n            raise ValueError('When allow_fill=True and fill_value is not None, all indices must be >= -1')\n        taken = algos.take(values, indices, allow_fill=allow_fill, fill_value=na_value)\n    else:\n        taken = values.take(indices)\n    return taken",
                            "@Appender(_index_shared_docs['repeat'] % _index_doc_kwargs)\ndef repeat(self, repeats, axis=None):\n    repeats = ensure_platform_int(repeats)\n    nv.validate_repeat(tuple(), dict(axis=axis))\n    return self._shallow_copy(self._values.repeat(repeats))",
                            "def copy(self, name=None, deep=False, dtype=None, names=None):\n    \"\"\"\n    Make a copy of this object.  Name and dtype sets those attributes on\n    the new object.\n\n    Parameters\n    ----------\n    name : Label\n    deep : bool, default False\n    dtype : numpy dtype or pandas type, optional\n    names : list-like, optional\n        Kept for compatibility with MultiIndex. Should not be used.\n\n    Returns\n    -------\n    Index\n\n    Notes\n    -----\n    In most cases, there should be no functional difference from using\n    ``deep``, but if ``deep`` is passed it will attempt to deepcopy.\n    \"\"\"\n    if deep:\n        new_index = self._shallow_copy(self._data.copy())\n    else:\n        new_index = self._shallow_copy()\n    names = self._validate_names(name=name, names=names, deep=deep)\n    new_index = new_index.set_names(names)\n    if dtype:\n        new_index = new_index.astype(dtype)\n    return new_index",
                            "def __copy__(self, **kwargs):\n    return self.copy(**kwargs)",
                            "def __deepcopy__(self, memo=None):\n    \"\"\"\n    Parameters\n    ----------\n    memo, default None\n        Standard signature. Unused\n    \"\"\"\n    return self.copy(deep=True)",
                            "def __repr__(self) -> str_t:\n    \"\"\"\n    Return a string representation for this object.\n    \"\"\"\n    klass_name = type(self).__name__\n    data = self._format_data()\n    attrs = self._format_attrs()\n    space = self._format_space()\n    attrs_str = [f'{k}={v}' for k, v in attrs]\n    prepr = f',{space}'.join(attrs_str)\n    if data is None:\n        data = ''\n    res = f'{klass_name}({data}{prepr})'\n    return res",
                            "def _format_space(self) -> str_t:\n    return ' '",
                            "@property\ndef _formatter_func(self):\n    \"\"\"\n    Return the formatter function.\n    \"\"\"\n    return default_pprint",
                            "def _format_data(self, name=None) -> str_t:\n    \"\"\"\n    Return the formatted data as a unicode string.\n    \"\"\"\n    is_justify = True\n    if self.inferred_type == 'string':\n        is_justify = False\n    elif self.inferred_type == 'categorical':\n        if is_object_dtype(self.categories):\n            is_justify = False\n    return format_object_summary(self, self._formatter_func, is_justify=is_justify, name=name)",
                            "def _format_attrs(self):\n    \"\"\"\n    Return a list of tuples of the (attr,formatted_value).\n    \"\"\"\n    return format_object_attrs(self)",
                            "def _mpl_repr(self):\n    return self.values",
                            "def format(self, name: bool=False, formatter=None, **kwargs):\n    \"\"\"\n    Render a string representation of the Index.\n    \"\"\"\n    header = []\n    if name:\n        header.append(pprint_thing(self.name, escape_chars=('\\t', '\\r', '\\n')) if self.name is not None else '')\n    if formatter is not None:\n        return header + list(self.map(formatter))\n    return self._format_with_header(header, **kwargs)",
                            "def _format_with_header(self, header, na_rep='NaN', **kwargs):\n    values = self.values\n    from pandas.io.formats.format import format_array\n    if is_categorical_dtype(values.dtype):\n        values = np.array(values)\n    elif is_object_dtype(values.dtype):\n        values = lib.maybe_convert_objects(values, safe=1)\n    if is_object_dtype(values.dtype):\n        result = [pprint_thing(x, escape_chars=('\\t', '\\r', '\\n')) for x in values]\n        mask = isna(values)\n        if mask.any():\n            result = np.array(result)\n            result[mask] = na_rep\n            result = result.tolist()\n    else:\n        result = _trim_front(format_array(values, None, justify='left'))\n    return header + result",
                            "def to_native_types(self, slicer=None, **kwargs):\n    \"\"\"\n    Format specified values of `self` and return them.\n\n    Parameters\n    ----------\n    slicer : int, array-like\n        An indexer into `self` that specifies which values\n        are used in the formatting process.\n    kwargs : dict\n        Options for specifying how the values should be formatted.\n        These options include the following:\n\n        1) na_rep : str\n            The value that serves as a placeholder for NULL values\n        2) quoting : bool or None\n            Whether or not there are quoted values in `self`\n        3) date_format : str\n            The format used to represent date-like values.\n\n    Returns\n    -------\n    numpy.ndarray\n        Formatted values.\n    \"\"\"\n    values = self\n    if slicer is not None:\n        values = values[slicer]\n    return values._format_native_types(**kwargs)",
                            "def _format_native_types(self, na_rep='', quoting=None, **kwargs):\n    \"\"\"\n    Actually format specific types of the index.\n    \"\"\"\n    mask = isna(self)\n    if not self.is_object() and (not quoting):\n        values = np.asarray(self).astype(str)\n    else:\n        values = np.array(self, dtype=object, copy=True)\n    values[mask] = na_rep\n    return values",
                            "def _summary(self, name=None) -> str_t:\n    \"\"\"\n    Return a summarized representation.\n\n    Parameters\n    ----------\n    name : str\n        name to use in the summary representation\n\n    Returns\n    -------\n    String with a summarized representation of the index\n    \"\"\"\n    if len(self) > 0:\n        head = self[0]\n        if hasattr(head, 'format') and (not isinstance(head, str)):\n            head = head.format()\n        tail = self[-1]\n        if hasattr(tail, 'format') and (not isinstance(tail, str)):\n            tail = tail.format()\n        index_summary = f', {head} to {tail}'\n    else:\n        index_summary = ''\n    if name is None:\n        name = type(self).__name__\n    return f'{name}: {len(self)} entries{index_summary}'",
                            "def to_flat_index(self):\n    \"\"\"\n    Identity method.\n\n    .. versionadded:: 0.24.0\n\n    This is implemented for compatibility with subclass implementations\n    when chaining.\n\n    Returns\n    -------\n    pd.Index\n        Caller.\n\n    See Also\n    --------\n    MultiIndex.to_flat_index : Subclass implementation.\n    \"\"\"\n    return self",
                            "def to_series(self, index=None, name=None):\n    \"\"\"\n    Create a Series with both index and values equal to the index keys.\n\n    Useful with map for returning an indexer based on an index.\n\n    Parameters\n    ----------\n    index : Index, optional\n        Index of resulting Series. If None, defaults to original index.\n    name : str, optional\n        Dame of resulting Series. If None, defaults to name of original\n        index.\n\n    Returns\n    -------\n    Series\n        The dtype will be based on the type of the Index values.\n    \"\"\"\n    from pandas import Series\n    if index is None:\n        index = self._shallow_copy()\n    if name is None:\n        name = self.name\n    return Series(self.values.copy(), index=index, name=name)",
                            "def to_frame(self, index: bool=True, name=None):\n    \"\"\"\n    Create a DataFrame with a column containing the Index.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    index : bool, default True\n        Set the index of the returned DataFrame as the original Index.\n\n    name : object, default None\n        The passed name should substitute for the index name (if it has\n        one).\n\n    Returns\n    -------\n    DataFrame\n        DataFrame containing the original Index data.\n\n    See Also\n    --------\n    Index.to_series : Convert an Index to a Series.\n    Series.to_frame : Convert Series to DataFrame.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\n    >>> idx.to_frame()\n           animal\n    animal\n    Ant       Ant\n    Bear     Bear\n    Cow       Cow\n\n    By default, the original Index is reused. To enforce a new Index:\n\n    >>> idx.to_frame(index=False)\n        animal\n    0   Ant\n    1  Bear\n    2   Cow\n\n    To override the name of the resulting column, specify `name`:\n\n    >>> idx.to_frame(index=False, name='zoo')\n        zoo\n    0   Ant\n    1  Bear\n    2   Cow\n    \"\"\"\n    from pandas import DataFrame\n    if name is None:\n        name = self.name or 0\n    result = DataFrame({name: self._values.copy()})\n    if index:\n        result.index = self\n    return result",
                            "@property\ndef name(self):\n    \"\"\"\n    Return Index or MultiIndex name.\n    \"\"\"\n    return self._name",
                            "@name.setter\ndef name(self, value):\n    if self._no_setting_name:\n        raise RuntimeError(\"Cannot set name on a level of a MultiIndex. Use 'MultiIndex.set_names' instead.\")\n    maybe_extract_name(value, None, type(self))\n    self._name = value",
                            "def _validate_names(self, name=None, names=None, deep: bool=False):\n    \"\"\"\n    Handles the quirks of having a singular 'name' parameter for general\n    Index and plural 'names' parameter for MultiIndex.\n    \"\"\"\n    from copy import deepcopy\n    if names is not None and name is not None:\n        raise TypeError('Can only provide one of `names` and `name`')\n    elif names is None and name is None:\n        return deepcopy(self.names) if deep else self.names\n    elif names is not None:\n        if not is_list_like(names):\n            raise TypeError('Must pass list-like as `names`.')\n        return names\n    else:\n        if not is_list_like(name):\n            return [name]\n        return name",
                            "def _get_names(self):\n    return FrozenList((self.name,))",
                            "def _set_names(self, values, level=None):\n    \"\"\"\n    Set new names on index. Each name has to be a hashable type.\n\n    Parameters\n    ----------\n    values : str or sequence\n        name(s) to set\n    level : int, level name, or sequence of int/level names (default None)\n        If the index is a MultiIndex (hierarchical), level(s) to set (None\n        for all levels).  Otherwise level must be None\n\n    Raises\n    ------\n    TypeError if each name is not hashable.\n    \"\"\"\n    if not is_list_like(values):\n        raise ValueError('Names must be a list-like')\n    if len(values) != 1:\n        raise ValueError(f'Length of new names must be 1, got {len(values)}')\n    for name in values:\n        if not is_hashable(name):\n            raise TypeError(f'{type(self).__name__}.name must be a hashable type')\n    self._name = values[0]",
                            "def set_names(self, names, level=None, inplace: bool=False):\n    \"\"\"\n    Set Index or MultiIndex name.\n\n    Able to set new names partially and by level.\n\n    Parameters\n    ----------\n    names : label or list of label\n        Name(s) to set.\n    level : int, label or list of int or label, optional\n        If the index is a MultiIndex, level(s) to set (None for all\n        levels). Otherwise level must be None.\n    inplace : bool, default False\n        Modifies the object directly, instead of creating a new Index or\n        MultiIndex.\n\n    Returns\n    -------\n    Index\n        The same type as the caller or None if inplace is True.\n\n    See Also\n    --------\n    Index.rename : Able to set new names without level.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx\n    Int64Index([1, 2, 3, 4], dtype='int64')\n    >>> idx.set_names('quarter')\n    Int64Index([1, 2, 3, 4], dtype='int64', name='quarter')\n\n    >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n    ...                                   [2018, 2019]])\n    >>> idx\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               )\n    >>> idx.set_names(['kind', 'year'], inplace=True)\n    >>> idx\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               names=['kind', 'year'])\n    >>> idx.set_names('species', level=0)\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               names=['species', 'year'])\n    \"\"\"\n    if level is not None and (not isinstance(self, ABCMultiIndex)):\n        raise ValueError('Level must be None for non-MultiIndex')\n    if level is not None and (not is_list_like(level)) and is_list_like(names):\n        raise TypeError('Names must be a string when a single level is provided.')\n    if not is_list_like(names) and level is None and (self.nlevels > 1):\n        raise TypeError('Must pass list-like as `names`.')\n    if not is_list_like(names):\n        names = [names]\n    if level is not None and (not is_list_like(level)):\n        level = [level]\n    if inplace:\n        idx = self\n    else:\n        idx = self._shallow_copy()\n    idx._set_names(names, level=level)\n    if not inplace:\n        return idx",
                            "def rename(self, name, inplace=False):\n    \"\"\"\n    Alter Index or MultiIndex name.\n\n    Able to set new names without level. Defaults to returning new index.\n    Length of names must match number of levels in MultiIndex.\n\n    Parameters\n    ----------\n    name : label or list of labels\n        Name(s) to set.\n    inplace : bool, default False\n        Modifies the object directly, instead of creating a new Index or\n        MultiIndex.\n\n    Returns\n    -------\n    Index\n        The same type as the caller or None if inplace is True.\n\n    See Also\n    --------\n    Index.set_names : Able to set new names partially and by level.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['A', 'C', 'A', 'B'], name='score')\n    >>> idx.rename('grade')\n    Index(['A', 'C', 'A', 'B'], dtype='object', name='grade')\n\n    >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n    ...                                   [2018, 2019]],\n    ...                                   names=['kind', 'year'])\n    >>> idx\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               names=['kind', 'year'])\n    >>> idx.rename(['species', 'year'])\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               names=['species', 'year'])\n    >>> idx.rename('species')\n    Traceback (most recent call last):\n    TypeError: Must pass list-like as `names`.\n    \"\"\"\n    return self.set_names([name], inplace=inplace)",
                            "@property\ndef nlevels(self) -> int:\n    \"\"\"\n    Number of levels.\n    \"\"\"\n    return 1",
                            "def _sort_levels_monotonic(self):\n    \"\"\"\n    Compat with MultiIndex.\n    \"\"\"\n    return self",
                            "def _validate_index_level(self, level):\n    \"\"\"\n    Validate index level.\n\n    For single-level Index getting level number is a no-op, but some\n    verification must be done like in MultiIndex.\n\n    \"\"\"\n    if isinstance(level, int):\n        if level < 0 and level != -1:\n            raise IndexError(f'Too many levels: Index has only 1 level, {level} is not a valid level number')\n        elif level > 0:\n            raise IndexError(f'Too many levels: Index has only 1 level, not {level + 1}')\n    elif level != self.name:\n        raise KeyError(f'Requested level ({level}) does not match index name ({self.name})')",
                            "def _get_level_number(self, level) -> int:\n    self._validate_index_level(level)\n    return 0",
                            "def sortlevel(self, level=None, ascending=True, sort_remaining=None):\n    \"\"\"\n    For internal compatibility with with the Index API.\n\n    Sort the Index. This is for compat with MultiIndex\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        False to sort in descending order\n\n    level, sort_remaining are compat parameters\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    return self.sort_values(return_indexer=True, ascending=ascending)",
                            "def _get_level_values(self, level):\n    \"\"\"\n    Return an Index of values for requested level.\n\n    This is primarily useful to get an individual level of values from a\n    MultiIndex, but is provided on Index as well for compatibility.\n\n    Parameters\n    ----------\n    level : int or str\n        It is either the integer position or the name of the level.\n\n    Returns\n    -------\n    Index\n        Calling object, as there is only one level in the Index.\n\n    See Also\n    --------\n    MultiIndex.get_level_values : Get values for a level of a MultiIndex.\n\n    Notes\n    -----\n    For Index, level should be 0, since there are no multiple levels.\n\n    Examples\n    --------\n    >>> idx = pd.Index(list('abc'))\n    >>> idx\n    Index(['a', 'b', 'c'], dtype='object')\n\n    Get level values by supplying `level` as integer:\n\n    >>> idx.get_level_values(0)\n    Index(['a', 'b', 'c'], dtype='object')\n    \"\"\"\n    self._validate_index_level(level)\n    return self",
                            "def droplevel(self, level=0):\n    \"\"\"\n    Return index with requested level(s) removed.\n\n    If resulting index has only 1 level left, the result will be\n    of Index type, not MultiIndex.\n\n    .. versionadded:: 0.23.1 (support for non-MultiIndex)\n\n    Parameters\n    ----------\n    level : int, str, or list-like, default 0\n        If a string is given, must be the name of a level\n        If list-like, elements must be names or indexes of levels.\n\n    Returns\n    -------\n    Index or MultiIndex\n    \"\"\"\n    if not isinstance(level, (tuple, list)):\n        level = [level]\n    levnums = sorted((self._get_level_number(lev) for lev in level))[::-1]\n    if len(level) == 0:\n        return self\n    if len(level) >= self.nlevels:\n        raise ValueError(f'Cannot remove {len(level)} levels from an index with {self.nlevels} levels: at least one level must be left.')\n    new_levels = list(self.levels)\n    new_codes = list(self.codes)\n    new_names = list(self.names)\n    for i in levnums:\n        new_levels.pop(i)\n        new_codes.pop(i)\n        new_names.pop(i)\n    if len(new_levels) == 1:\n        mask = new_codes[0] == -1\n        result = new_levels[0].take(new_codes[0])\n        if mask.any():\n            result = result.putmask(mask, np.nan)\n        result._name = new_names[0]\n        return result\n    else:\n        from pandas.core.indexes.multi import MultiIndex\n        return MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)",
                            "def _get_grouper_for_level(self, mapper, level=None):\n    \"\"\"\n    Get index grouper corresponding to an index level\n\n    Parameters\n    ----------\n    mapper: Group mapping function or None\n        Function mapping index values to groups\n    level : int or None\n        Index level\n\n    Returns\n    -------\n    grouper : Index\n        Index of values to group on.\n    labels : ndarray of int or None\n        Array of locations in level_index.\n    uniques : Index or None\n        Index of unique values for level.\n    \"\"\"\n    assert level is None or level == 0\n    if mapper is None:\n        grouper = self\n    else:\n        grouper = self.map(mapper)\n    return (grouper, None, None)",
                            "@property\ndef is_monotonic(self) -> bool:\n    \"\"\"\n    Alias for is_monotonic_increasing.\n    \"\"\"\n    return self.is_monotonic_increasing",
                            "@property\ndef is_monotonic_increasing(self) -> bool:\n    \"\"\"\n    Return if the index is monotonic increasing (only equal or\n    increasing) values.\n\n    Examples\n    --------\n    >>> Index([1, 2, 3]).is_monotonic_increasing\n    True\n    >>> Index([1, 2, 2]).is_monotonic_increasing\n    True\n    >>> Index([1, 3, 2]).is_monotonic_increasing\n    False\n    \"\"\"\n    return self._engine.is_monotonic_increasing",
                            "@property\ndef is_monotonic_decreasing(self) -> bool:\n    \"\"\"\n    Return if the index is monotonic decreasing (only equal or\n    decreasing) values.\n\n    Examples\n    --------\n    >>> Index([3, 2, 1]).is_monotonic_decreasing\n    True\n    >>> Index([3, 2, 2]).is_monotonic_decreasing\n    True\n    >>> Index([3, 1, 2]).is_monotonic_decreasing\n    False\n    \"\"\"\n    return self._engine.is_monotonic_decreasing",
                            "@property\ndef _is_strictly_monotonic_increasing(self) -> bool:\n    \"\"\"\n    Return if the index is strictly monotonic increasing\n    (only increasing) values.\n\n    Examples\n    --------\n    >>> Index([1, 2, 3])._is_strictly_monotonic_increasing\n    True\n    >>> Index([1, 2, 2])._is_strictly_monotonic_increasing\n    False\n    >>> Index([1, 3, 2])._is_strictly_monotonic_increasing\n    False\n    \"\"\"\n    return self.is_unique and self.is_monotonic_increasing",
                            "@property\ndef _is_strictly_monotonic_decreasing(self) -> bool:\n    \"\"\"\n    Return if the index is strictly monotonic decreasing\n    (only decreasing) values.\n\n    Examples\n    --------\n    >>> Index([3, 2, 1])._is_strictly_monotonic_decreasing\n    True\n    >>> Index([3, 2, 2])._is_strictly_monotonic_decreasing\n    False\n    >>> Index([3, 1, 2])._is_strictly_monotonic_decreasing\n    False\n    \"\"\"\n    return self.is_unique and self.is_monotonic_decreasing",
                            "@cache_readonly\ndef is_unique(self) -> bool:\n    \"\"\"\n    Return if the index has unique values.\n    \"\"\"\n    return self._engine.is_unique",
                            "@property\ndef has_duplicates(self) -> bool:\n    \"\"\"\n    Check if the Index has duplicate values.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index has duplicate values.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1, 5, 7, 7])\n    >>> idx.has_duplicates\n    True\n\n    >>> idx = pd.Index([1, 5, 7])\n    >>> idx.has_duplicates\n    False\n\n    >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n    ...                 \"Watermelon\"]).astype(\"category\")\n    >>> idx.has_duplicates\n    True\n\n    >>> idx = pd.Index([\"Orange\", \"Apple\",\n    ...                 \"Watermelon\"]).astype(\"category\")\n    >>> idx.has_duplicates\n    False\n    \"\"\"\n    return not self.is_unique",
                            "def is_boolean(self) -> bool:\n    \"\"\"\n    Check if the Index only consists of booleans.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index only consists of booleans.\n\n    See Also\n    --------\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([True, False, True])\n    >>> idx.is_boolean()\n    True\n\n    >>> idx = pd.Index([\"True\", \"False\", \"True\"])\n    >>> idx.is_boolean()\n    False\n\n    >>> idx = pd.Index([True, False, \"True\"])\n    >>> idx.is_boolean()\n    False\n    \"\"\"\n    return self.inferred_type in ['boolean']",
                            "def is_integer(self) -> bool:\n    \"\"\"\n    Check if the Index only consists of integers.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index only consists of integers.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx.is_integer()\n    True\n\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n    >>> idx.is_integer()\n    False\n\n    >>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n    >>> idx.is_integer()\n    False\n    \"\"\"\n    return self.inferred_type in ['integer']",
                            "def is_floating(self) -> bool:\n    \"\"\"\n    Check if the Index is a floating type.\n\n    The Index may consist of only floats, NaNs, or a mix of floats,\n    integers, or NaNs.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index only consists of only consists of floats, NaNs, or\n        a mix of floats, integers, or NaNs.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n    >>> idx.is_floating()\n    True\n\n    >>> idx = pd.Index([1.0, 2.0, np.nan, 4.0])\n    >>> idx.is_floating()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4, np.nan])\n    >>> idx.is_floating()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx.is_floating()\n    False\n    \"\"\"\n    return self.inferred_type in ['floating', 'mixed-integer-float', 'integer-na']",
                            "def is_numeric(self) -> bool:\n    \"\"\"\n    Check if the Index only consists of numeric data.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index only consists of numeric data.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n    >>> idx.is_numeric()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4.0])\n    >>> idx.is_numeric()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx.is_numeric()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4.0, np.nan])\n    >>> idx.is_numeric()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4.0, np.nan, \"Apple\"])\n    >>> idx.is_numeric()\n    False\n    \"\"\"\n    return self.inferred_type in ['integer', 'floating']",
                            "def is_object(self) -> bool:\n    \"\"\"\n    Check if the Index is of the object dtype.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index is of the object dtype.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n    >>> idx.is_object()\n    True\n\n    >>> idx = pd.Index([\"Apple\", \"Mango\", 2.0])\n    >>> idx.is_object()\n    True\n\n    >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n    ...                 \"Watermelon\"]).astype(\"category\")\n    >>> idx.object()\n    False\n\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n    >>> idx.is_object()\n    False\n    \"\"\"\n    return is_object_dtype(self.dtype)",
                            "def is_categorical(self) -> bool:\n    \"\"\"\n    Check if the Index holds categorical data.\n\n    Returns\n    -------\n    bool\n        True if the Index is categorical.\n\n    See Also\n    --------\n    CategoricalIndex : Index for categorical data.\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n    ...                 \"Watermelon\"]).astype(\"category\")\n    >>> idx.is_categorical()\n    True\n\n    >>> idx = pd.Index([1, 3, 5, 7])\n    >>> idx.is_categorical()\n    False\n\n    >>> s = pd.Series([\"Peter\", \"Victor\", \"Elisabeth\", \"Mar\"])\n    >>> s\n    0        Peter\n    1       Victor\n    2    Elisabeth\n    3          Mar\n    dtype: object\n    >>> s.index.is_categorical()\n    False\n    \"\"\"\n    return self.inferred_type in ['categorical']",
                            "def is_interval(self) -> bool:\n    \"\"\"\n    Check if the Index holds Interval objects.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index holds Interval objects.\n\n    See Also\n    --------\n    IntervalIndex : Index for Interval objects.\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([pd.Interval(left=0, right=5),\n    ...                 pd.Interval(left=5, right=10)])\n    >>> idx.is_interval()\n    True\n\n    >>> idx = pd.Index([1, 3, 5, 7])\n    >>> idx.is_interval()\n    False\n    \"\"\"\n    return self.inferred_type in ['interval']",
                            "def is_mixed(self) -> bool:\n    \"\"\"\n    Check if the Index holds data with mixed data types.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index holds data with mixed data types.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['a', np.nan, 'b'])\n    >>> idx.is_mixed()\n    True\n\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 5.0])\n    >>> idx.is_mixed()\n    False\n    \"\"\"\n    return self.inferred_type in ['mixed']",
                            "def holds_integer(self) -> bool:\n    \"\"\"\n    Whether the type is an integer type.\n    \"\"\"\n    return self.inferred_type in ['integer', 'mixed-integer']",
                            "@cache_readonly\ndef inferred_type(self) -> str_t:\n    \"\"\"\n    Return a string of the type inferred from the values.\n    \"\"\"\n    return lib.infer_dtype(self, skipna=False)",
                            "@cache_readonly\ndef is_all_dates(self) -> bool:\n    \"\"\"\n    Whether or not the index values only consist of dates.\n    \"\"\"\n    return is_datetime_array(ensure_object(self.values))",
                            "def __reduce__(self):\n    d = dict(data=self._data)\n    d.update(self._get_attributes_dict())\n    return (_new_Index, (type(self), d), None)",
                            "@cache_readonly\ndef _isnan(self):\n    \"\"\"\n    Return if each value is NaN.\n    \"\"\"\n    if self._can_hold_na:\n        return isna(self)\n    else:\n        values = np.empty(len(self), dtype=np.bool_)\n        values.fill(False)\n        return values",
                            "@cache_readonly\ndef _nan_idxs(self):\n    if self._can_hold_na:\n        return self._isnan.nonzero()[0]\n    else:\n        return np.array([], dtype=np.int64)",
                            "@cache_readonly\ndef hasnans(self) -> bool:\n    \"\"\"\n    Return if I have any nans; enables various perf speedups.\n    \"\"\"\n    if self._can_hold_na:\n        return bool(self._isnan.any())\n    else:\n        return False",
                            "def isna(self):\n    \"\"\"\n    Detect missing values.\n\n    Return a boolean same-sized object indicating if the values are NA.\n    NA values, such as ``None``, :attr:`numpy.NaN` or :attr:`pd.NaT`, get\n    mapped to ``True`` values.\n    Everything else get mapped to ``False`` values. Characters such as\n    empty strings `''` or :attr:`numpy.inf` are not considered NA values\n    (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\n    Returns\n    -------\n    numpy.ndarray\n        A boolean array of whether my values are NA.\n\n    See Also\n    --------\n    Index.notna : Boolean inverse of isna.\n    Index.dropna : Omit entries with missing values.\n    isna : Top-level isna.\n    Series.isna : Detect missing values in Series object.\n\n    Examples\n    --------\n    Show which entries in a pandas.Index are NA. The result is an\n    array.\n\n    >>> idx = pd.Index([5.2, 6.0, np.NaN])\n    >>> idx\n    Float64Index([5.2, 6.0, nan], dtype='float64')\n    >>> idx.isna()\n    array([False, False,  True], dtype=bool)\n\n    Empty strings are not considered NA values. None is considered an NA\n    value.\n\n    >>> idx = pd.Index(['black', '', 'red', None])\n    >>> idx\n    Index(['black', '', 'red', None], dtype='object')\n    >>> idx.isna()\n    array([False, False, False,  True], dtype=bool)\n\n    For datetimes, `NaT` (Not a Time) is considered as an NA value.\n\n    >>> idx = pd.DatetimeIndex([pd.Timestamp('1940-04-25'),\n    ...                         pd.Timestamp(''), None, pd.NaT])\n    >>> idx\n    DatetimeIndex(['1940-04-25', 'NaT', 'NaT', 'NaT'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> idx.isna()\n    array([False,  True,  True,  True], dtype=bool)\n    \"\"\"\n    return self._isnan",
                            "def notna(self):\n    \"\"\"\n    Detect existing (non-missing) values.\n\n    Return a boolean same-sized object indicating if the values are not NA.\n    Non-missing values get mapped to ``True``. Characters such as empty\n    strings ``''`` or :attr:`numpy.inf` are not considered NA values\n    (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n    NA values, such as None or :attr:`numpy.NaN`, get mapped to ``False``\n    values.\n\n    Returns\n    -------\n    numpy.ndarray\n        Boolean array to indicate which entries are not NA.\n\n    See Also\n    --------\n    Index.notnull : Alias of notna.\n    Index.isna: Inverse of notna.\n    notna : Top-level notna.\n\n    Examples\n    --------\n    Show which entries in an Index are not NA. The result is an\n    array.\n\n    >>> idx = pd.Index([5.2, 6.0, np.NaN])\n    >>> idx\n    Float64Index([5.2, 6.0, nan], dtype='float64')\n    >>> idx.notna()\n    array([ True,  True, False])\n\n    Empty strings are not considered NA values. None is considered a NA\n    value.\n\n    >>> idx = pd.Index(['black', '', 'red', None])\n    >>> idx\n    Index(['black', '', 'red', None], dtype='object')\n    >>> idx.notna()\n    array([ True,  True,  True, False])\n    \"\"\"\n    return ~self.isna()",
                            "def fillna(self, value=None, downcast=None):\n    \"\"\"\n    Fill NA/NaN values with the specified value.\n\n    Parameters\n    ----------\n    value : scalar\n        Scalar value to use to fill holes (e.g. 0).\n        This value cannot be a list-likes.\n    downcast : dict, default is None\n        a dict of item->dtype of what to downcast if possible,\n        or the string 'infer' which will try to downcast to an appropriate\n        equal type (e.g. float64 to int64 if possible).\n\n    Returns\n    -------\n    filled : Index\n    \"\"\"\n    self._assert_can_do_op(value)\n    if self.hasnans:\n        result = self.putmask(self._isnan, value)\n        if downcast is None:\n            return Index(result, name=self.name)\n    return self._shallow_copy()",
                            "def dropna(self, how='any'):\n    \"\"\"\n    Return Index without NA/NaN values.\n\n    Parameters\n    ----------\n    how : {'any', 'all'}, default 'any'\n        If the Index is a MultiIndex, drop the value when any or all levels\n        are NaN.\n\n    Returns\n    -------\n    valid : Index\n    \"\"\"\n    if how not in ('any', 'all'):\n        raise ValueError(f'invalid how option: {how}')\n    if self.hasnans:\n        return self._shallow_copy(self._values[~self._isnan])\n    return self._shallow_copy()",
                            "def unique(self, level=None):\n    \"\"\"\n    Return unique values in the index. Uniques are returned in order\n    of appearance, this does NOT sort.\n\n    Parameters\n    ----------\n    level : int or str, optional, default None\n        Only return values from specified level (for MultiIndex).\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    Index without duplicates\n\n    See Also\n    --------\n    unique\n    Series.unique\n    \"\"\"\n    if level is not None:\n        self._validate_index_level(level)\n    result = super().unique()\n    return self._shallow_copy(result)",
                            "def drop_duplicates(self, keep='first'):\n    \"\"\"\n    Return Index with duplicate values removed.\n\n    Parameters\n    ----------\n    keep : {'first', 'last', ``False``}, default 'first'\n        - 'first' : Drop duplicates except for the first occurrence.\n        - 'last' : Drop duplicates except for the last occurrence.\n        - ``False`` : Drop all duplicates.\n\n    Returns\n    -------\n    deduplicated : Index\n\n    See Also\n    --------\n    Series.drop_duplicates : Equivalent method on Series.\n    DataFrame.drop_duplicates : Equivalent method on DataFrame.\n    Index.duplicated : Related method on Index, indicating duplicate\n        Index values.\n\n    Examples\n    --------\n    Generate an pandas.Index with duplicate values.\n\n    >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo'])\n\n    The `keep` parameter controls  which duplicate values are removed.\n    The value 'first' keeps the first occurrence for each\n    set of duplicated entries. The default value of keep is 'first'.\n\n    >>> idx.drop_duplicates(keep='first')\n    Index(['lama', 'cow', 'beetle', 'hippo'], dtype='object')\n\n    The value 'last' keeps the last occurrence for each set of duplicated\n    entries.\n\n    >>> idx.drop_duplicates(keep='last')\n    Index(['cow', 'beetle', 'lama', 'hippo'], dtype='object')\n\n    The value ``False`` discards all sets of duplicated entries.\n\n    >>> idx.drop_duplicates(keep=False)\n    Index(['cow', 'beetle', 'hippo'], dtype='object')\n    \"\"\"\n    return super().drop_duplicates(keep=keep)",
                            "def duplicated(self, keep='first'):\n    \"\"\"\n    Indicate duplicate index values.\n\n    Duplicated values are indicated as ``True`` values in the resulting\n    array. Either all duplicates, all except the first, or all except the\n    last occurrence of duplicates can be indicated.\n\n    Parameters\n    ----------\n    keep : {'first', 'last', False}, default 'first'\n        The value or values in a set of duplicates to mark as missing.\n\n        - 'first' : Mark duplicates as ``True`` except for the first\n          occurrence.\n        - 'last' : Mark duplicates as ``True`` except for the last\n          occurrence.\n        - ``False`` : Mark all duplicates as ``True``.\n\n    Returns\n    -------\n    numpy.ndarray\n\n    See Also\n    --------\n    Series.duplicated : Equivalent method on pandas.Series.\n    DataFrame.duplicated : Equivalent method on pandas.DataFrame.\n    Index.drop_duplicates : Remove duplicate values from Index.\n\n    Examples\n    --------\n    By default, for each set of duplicated values, the first occurrence is\n    set to False and all others to True:\n\n    >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama'])\n    >>> idx.duplicated()\n    array([False, False,  True, False,  True])\n\n    which is equivalent to\n\n    >>> idx.duplicated(keep='first')\n    array([False, False,  True, False,  True])\n\n    By using 'last', the last occurrence of each set of duplicated values\n    is set on False and all others on True:\n\n    >>> idx.duplicated(keep='last')\n    array([ True, False,  True, False, False])\n\n    By setting keep on ``False``, all duplicates are True:\n\n    >>> idx.duplicated(keep=False)\n    array([ True, False,  True, False,  True])\n    \"\"\"\n    return super().duplicated(keep=keep)",
                            "def _get_unique_index(self, dropna: bool=False):\n    \"\"\"\n    Returns an index containing unique values.\n\n    Parameters\n    ----------\n    dropna : bool, default False\n        If True, NaN values are dropped.\n\n    Returns\n    -------\n    uniques : index\n    \"\"\"\n    if self.is_unique and (not dropna):\n        return self\n    values = self.values\n    if not self.is_unique:\n        values = self.unique()\n        if not isinstance(self, ABCMultiIndex):\n            values = values._data\n    if dropna:\n        try:\n            if self.hasnans:\n                values = values[~isna(values)]\n        except NotImplementedError:\n            pass\n    return self._shallow_copy(values)",
                            "def __add__(self, other):\n    if isinstance(other, (ABCSeries, ABCDataFrame)):\n        return NotImplemented\n    from pandas import Series\n    return Index(Series(self) + other)",
                            "def __radd__(self, other):\n    from pandas import Series\n    return Index(other + Series(self))",
                            "def __iadd__(self, other):\n    return self + other",
                            "def __sub__(self, other):\n    return Index(np.array(self) - other)",
                            "def __rsub__(self, other):\n    from pandas import Series\n    return Index(other - Series(self))",
                            "def __and__(self, other):\n    return self.intersection(other)",
                            "def __or__(self, other):\n    return self.union(other)",
                            "def __xor__(self, other):\n    return self.symmetric_difference(other)",
                            "def __nonzero__(self):\n    raise ValueError(f'The truth value of a {type(self).__name__} is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().')",
                            "def _get_reconciled_name_object(self, other):\n    \"\"\"\n    If the result of a set operation will be self,\n    return self, unless the name changes, in which\n    case make a shallow copy of self.\n    \"\"\"\n    name = get_op_result_name(self, other)\n    if self.name != name:\n        return self._shallow_copy(name=name)\n    return self",
                            "def _union_incompatible_dtypes(self, other, sort):\n    \"\"\"\n    Casts this and other index to object dtype to allow the formation\n    of a union between incompatible types.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default False\n        Whether to sort the resulting index.\n\n        * False : do not sort the result.\n        * None : sort the result, except when `self` and `other` are equal\n          or when the values cannot be compared.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    this = self.astype(object, copy=False)\n    other = Index(other).astype(object, copy=False)\n    return Index.union(this, other, sort=sort).astype(object, copy=False)",
                            "def _is_compatible_with_other(self, other) -> bool:\n    \"\"\"\n    Check whether this and the other dtype are compatible with each other.\n    Meaning a union can be formed between them without needing to be cast\n    to dtype object.\n\n    Parameters\n    ----------\n    other : Index or array-like\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return type(self) is type(other) and is_dtype_equal(self.dtype, other.dtype)",
                            "def _validate_sort_keyword(self, sort):\n    if sort not in [None, False]:\n        raise ValueError(f\"The 'sort' keyword only takes the values of None or False; {sort} was passed.\")",
                            "def union(self, other, sort=None):\n    \"\"\"\n    Form the union of two Index objects.\n\n    If the Index objects are incompatible, both Index objects will be\n    cast to dtype('object') first.\n\n        .. versionchanged:: 0.25.0\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : bool or None, default None\n        Whether to sort the resulting Index.\n\n        * None : Sort the result, except when\n\n          1. `self` and `other` are equal.\n          2. `self` or `other` has length 0.\n          3. Some values in `self` or `other` cannot be compared.\n             A RuntimeWarning is issued in this case.\n\n        * False : do not sort the result.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default value from ``True`` to ``None``\n           (without change in behaviour).\n\n    Returns\n    -------\n    union : Index\n\n    Examples\n    --------\n    Union matching dtypes\n\n    >>> idx1 = pd.Index([1, 2, 3, 4])\n    >>> idx2 = pd.Index([3, 4, 5, 6])\n    >>> idx1.union(idx2)\n    Int64Index([1, 2, 3, 4, 5, 6], dtype='int64')\n\n    Union mismatched dtypes\n\n    >>> idx1 = pd.Index(['a', 'b', 'c', 'd'])\n    >>> idx2 = pd.Index([1, 2, 3, 4])\n    >>> idx1.union(idx2)\n    Index(['a', 'b', 'c', 'd', 1, 2, 3, 4], dtype='object')\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    if not self._is_compatible_with_other(other):\n        return self._union_incompatible_dtypes(other, sort=sort)\n    return self._union(other, sort=sort)",
                            "def _union(self, other, sort):\n    \"\"\"\n    Specific union logic should go here. In subclasses, union behavior\n    should be overwritten here rather than in `self.union`.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default False\n        Whether to sort the resulting index.\n\n        * False : do not sort the result.\n        * None : sort the result, except when `self` and `other` are equal\n          or when the values cannot be compared.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    if not len(other) or self.equals(other):\n        return self._get_reconciled_name_object(other)\n    if not len(self):\n        return other._get_reconciled_name_object(self)\n    if is_datetime64tz_dtype(self):\n        lvals = self._ndarray_values\n    else:\n        lvals = self._values\n    if is_datetime64tz_dtype(other):\n        rvals = other._ndarray_values\n    else:\n        rvals = other._values\n    if sort is None and self.is_monotonic and other.is_monotonic:\n        try:\n            result = self._outer_indexer(lvals, rvals)[0]\n        except TypeError:\n            result = list(lvals)\n            value_set = set(lvals)\n            result.extend([x for x in rvals if x not in value_set])\n            result = Index(result)._values\n    else:\n        if self.is_unique:\n            indexer = self.get_indexer(other)\n            indexer = (indexer == -1).nonzero()[0]\n        else:\n            indexer = algos.unique1d(self.get_indexer_non_unique(other)[1])\n        if len(indexer) > 0:\n            other_diff = algos.take_nd(rvals, indexer, allow_fill=False)\n            result = concat_compat((lvals, other_diff))\n        else:\n            result = lvals\n        if sort is None:\n            try:\n                result = algos.safe_sort(result)\n            except TypeError as err:\n                warnings.warn(f'{err}, sort order is undefined for incomparable objects', RuntimeWarning, stacklevel=3)\n    return self._wrap_setop_result(other, result)",
                            "def _wrap_setop_result(self, other, result):\n    name = get_op_result_name(self, other)\n    return self._shallow_copy(result, name=name)",
                            "def intersection(self, other, sort=False):\n    \"\"\"\n    Form the intersection of two Index objects.\n\n    This returns a new Index with elements common to the index and `other`.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default False\n        Whether to sort the resulting index.\n\n        * False : do not sort the result.\n        * None : sort the result, except when `self` and `other` are equal\n          or when the values cannot be compared.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default from ``True`` to ``False``, to match\n           the behaviour of 0.23.4 and earlier.\n\n    Returns\n    -------\n    intersection : Index\n\n    Examples\n    --------\n    >>> idx1 = pd.Index([1, 2, 3, 4])\n    >>> idx2 = pd.Index([3, 4, 5, 6])\n    >>> idx1.intersection(idx2)\n    Int64Index([3, 4], dtype='int64')\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    other = ensure_index(other)\n    if self.equals(other):\n        return self._get_reconciled_name_object(other)\n    if not is_dtype_equal(self.dtype, other.dtype):\n        this = self.astype('O')\n        other = other.astype('O')\n        return this.intersection(other, sort=sort)\n    lvals = self._values\n    rvals = other._values\n    if self.is_monotonic and other.is_monotonic:\n        try:\n            result = self._inner_indexer(lvals, rvals)[0]\n        except TypeError:\n            pass\n        else:\n            return self._wrap_setop_result(other, result)\n    try:\n        indexer = Index(rvals).get_indexer(lvals)\n        indexer = indexer.take((indexer != -1).nonzero()[0])\n    except (InvalidIndexError, IncompatibleFrequency):\n        indexer = algos.unique1d(Index(rvals).get_indexer_non_unique(lvals)[0])\n        indexer = indexer[indexer != -1]\n    taken = other.take(indexer)\n    res_name = get_op_result_name(self, other)\n    if sort is None:\n        taken = algos.safe_sort(taken.values)\n        return self._shallow_copy(taken, name=res_name)\n    taken.name = res_name\n    return taken",
                            "def difference(self, other, sort=None):\n    \"\"\"\n    Return a new Index with elements from the index that are not in\n    `other`.\n\n    This is the set difference of two Index objects.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default None\n        Whether to sort the resulting index. By default, the\n        values are attempted to be sorted, but any TypeError from\n        incomparable elements is caught by pandas.\n\n        * None : Attempt to sort the result, but catch any TypeErrors\n          from comparing incomparable elements.\n        * False : Do not sort the result.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default value from ``True`` to ``None``\n           (without change in behaviour).\n\n    Returns\n    -------\n    difference : Index\n\n    Examples\n    --------\n    >>> idx1 = pd.Index([2, 1, 3, 4])\n    >>> idx2 = pd.Index([3, 4, 5, 6])\n    >>> idx1.difference(idx2)\n    Int64Index([1, 2], dtype='int64')\n    >>> idx1.difference(idx2, sort=False)\n    Int64Index([2, 1], dtype='int64')\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    if self.equals(other):\n        return self._shallow_copy(self._data[:0])\n    other, result_name = self._convert_can_do_setop(other)\n    this = self._get_unique_index()\n    indexer = this.get_indexer(other)\n    indexer = indexer.take((indexer != -1).nonzero()[0])\n    label_diff = np.setdiff1d(np.arange(this.size), indexer, assume_unique=True)\n    the_diff = this.values.take(label_diff)\n    if sort is None:\n        try:\n            the_diff = algos.safe_sort(the_diff)\n        except TypeError:\n            pass\n    return this._shallow_copy(the_diff, name=result_name)",
                            "def symmetric_difference(self, other, result_name=None, sort=None):\n    \"\"\"\n    Compute the symmetric difference of two Index objects.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    result_name : str\n    sort : False or None, default None\n        Whether to sort the resulting index. By default, the\n        values are attempted to be sorted, but any TypeError from\n        incomparable elements is caught by pandas.\n\n        * None : Attempt to sort the result, but catch any TypeErrors\n          from comparing incomparable elements.\n        * False : Do not sort the result.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default value from ``True`` to ``None``\n           (without change in behaviour).\n\n    Returns\n    -------\n    symmetric_difference : Index\n\n    Notes\n    -----\n    ``symmetric_difference`` contains elements that appear in either\n    ``idx1`` or ``idx2`` but not both. Equivalent to the Index created by\n    ``idx1.difference(idx2) | idx2.difference(idx1)`` with duplicates\n    dropped.\n\n    Examples\n    --------\n    >>> idx1 = pd.Index([1, 2, 3, 4])\n    >>> idx2 = pd.Index([2, 3, 4, 5])\n    >>> idx1.symmetric_difference(idx2)\n    Int64Index([1, 5], dtype='int64')\n\n    You can also use the ``^`` operator:\n\n    >>> idx1 ^ idx2\n    Int64Index([1, 5], dtype='int64')\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    other, result_name_update = self._convert_can_do_setop(other)\n    if result_name is None:\n        result_name = result_name_update\n    this = self._get_unique_index()\n    other = other._get_unique_index()\n    indexer = this.get_indexer(other)\n    common_indexer = indexer.take((indexer != -1).nonzero()[0])\n    left_indexer = np.setdiff1d(np.arange(this.size), common_indexer, assume_unique=True)\n    left_diff = this._values.take(left_indexer)\n    right_indexer = (indexer == -1).nonzero()[0]\n    right_diff = other._values.take(right_indexer)\n    the_diff = concat_compat([left_diff, right_diff])\n    if sort is None:\n        try:\n            the_diff = algos.safe_sort(the_diff)\n        except TypeError:\n            pass\n    attribs = self._get_attributes_dict()\n    attribs['name'] = result_name\n    if 'freq' in attribs:\n        attribs['freq'] = None\n    return self._shallow_copy_with_infer(the_diff, **attribs)",
                            "def _assert_can_do_setop(self, other):\n    if not is_list_like(other):\n        raise TypeError('Input must be Index or array-like')\n    return True",
                            "def _convert_can_do_setop(self, other):\n    if not isinstance(other, Index):\n        other = Index(other, name=self.name)\n        result_name = self.name\n    else:\n        result_name = get_op_result_name(self, other)\n    return (other, result_name)",
                            "def get_loc(self, key, method=None, tolerance=None):\n    \"\"\"\n    Get integer location, slice or boolean mask for requested label.\n\n    Parameters\n    ----------\n    key : label\n    method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n        * default: exact matches only.\n        * pad / ffill: find the PREVIOUS index value if no exact match.\n        * backfill / bfill: use NEXT index value if no exact match\n        * nearest: use the NEAREST index value if no exact match. Tied\n          distances are broken by preferring the larger index value.\n    tolerance : int or float, optional\n        Maximum distance from index value for inexact matches. The value of\n        the index at the matching location most satisfy the equation\n        ``abs(index[loc] - key) <= tolerance``.\n\n        .. versionadded:: 0.21.0 (list-like tolerance)\n\n    Returns\n    -------\n    loc : int if unique index, slice if monotonic index, else mask\n\n    Examples\n    --------\n    >>> unique_index = pd.Index(list('abc'))\n    >>> unique_index.get_loc('b')\n    1\n\n    >>> monotonic_index = pd.Index(list('abbc'))\n    >>> monotonic_index.get_loc('b')\n    slice(1, 3, None)\n\n    >>> non_monotonic_index = pd.Index(list('abcb'))\n    >>> non_monotonic_index.get_loc('b')\n    array([False,  True, False,  True], dtype=bool)\n    \"\"\"\n    if method is None:\n        if tolerance is not None:\n            raise ValueError('tolerance argument only valid if using pad, backfill or nearest lookups')\n        casted_key = self._maybe_cast_indexer(key)\n        try:\n            return self._engine.get_loc(casted_key)\n        except KeyError:\n            raise KeyError(key)\n    if tolerance is not None:\n        tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n    indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n    if indexer.ndim > 1 or indexer.size > 1:\n        raise TypeError('get_loc requires scalar valued input')\n    loc = indexer.item()\n    if loc == -1:\n        raise KeyError(key)\n    return loc",
                            "@Appender(_index_shared_docs['get_indexer'] % _index_doc_kwargs)\ndef get_indexer(self, target, method=None, limit=None, tolerance=None) -> np.ndarray:\n    method = missing.clean_reindex_fill_method(method)\n    target = ensure_index(target)\n    if tolerance is not None:\n        tolerance = self._convert_tolerance(tolerance, target)\n    if target.is_boolean() and self.is_numeric():\n        return ensure_platform_int(np.repeat(-1, target.size))\n    pself, ptarget = self._maybe_promote(target)\n    if pself is not self or ptarget is not target:\n        return pself.get_indexer(ptarget, method=method, limit=limit, tolerance=tolerance)\n    if not is_dtype_equal(self.dtype, target.dtype):\n        this = self.astype(object)\n        target = target.astype(object)\n        return this.get_indexer(target, method=method, limit=limit, tolerance=tolerance)\n    if not self.is_unique:\n        raise InvalidIndexError('Reindexing only valid with uniquely valued Index objects')\n    if method == 'pad' or method == 'backfill':\n        indexer = self._get_fill_indexer(target, method, limit, tolerance)\n    elif method == 'nearest':\n        indexer = self._get_nearest_indexer(target, limit, tolerance)\n    else:\n        if tolerance is not None:\n            raise ValueError('tolerance argument only valid if doing pad, backfill or nearest reindexing')\n        if limit is not None:\n            raise ValueError('limit argument only valid if doing pad, backfill or nearest reindexing')\n        indexer = self._engine.get_indexer(target._ndarray_values)\n    return ensure_platform_int(indexer)",
                            "def _convert_tolerance(self, tolerance, target):\n    tolerance = np.asarray(tolerance)\n    if target.size != tolerance.size and tolerance.size > 1:\n        raise ValueError('list-like tolerance size must match target index size')\n    return tolerance",
                            "def _get_fill_indexer(self, target: 'Index', method: str_t, limit=None, tolerance=None) -> np.ndarray:\n    if self.is_monotonic_increasing and target.is_monotonic_increasing:\n        engine_method = self._engine.get_pad_indexer if method == 'pad' else self._engine.get_backfill_indexer\n        indexer = engine_method(target._ndarray_values, limit)\n    else:\n        indexer = self._get_fill_indexer_searchsorted(target, method, limit)\n    if tolerance is not None:\n        indexer = self._filter_indexer_tolerance(target._ndarray_values, indexer, tolerance)\n    return indexer",
                            "def _get_fill_indexer_searchsorted(self, target: 'Index', method: str_t, limit=None) -> np.ndarray:\n    \"\"\"\n    Fallback pad/backfill get_indexer that works for monotonic decreasing\n    indexes and non-monotonic targets.\n    \"\"\"\n    if limit is not None:\n        raise ValueError(f'limit argument for {repr(method)} method only well-defined if index and target are monotonic')\n    side = 'left' if method == 'pad' else 'right'\n    indexer = self.get_indexer(target)\n    nonexact = indexer == -1\n    indexer[nonexact] = self._searchsorted_monotonic(target[nonexact], side)\n    if side == 'left':\n        indexer[nonexact] -= 1\n    else:\n        indexer[indexer == len(self)] = -1\n    return indexer",
                            "def _get_nearest_indexer(self, target: 'Index', limit, tolerance) -> np.ndarray:\n    \"\"\"\n    Get the indexer for the nearest index labels; requires an index with\n    values that can be subtracted from each other (e.g., not strings or\n    tuples).\n    \"\"\"\n    left_indexer = self.get_indexer(target, 'pad', limit=limit)\n    right_indexer = self.get_indexer(target, 'backfill', limit=limit)\n    left_distances = np.abs(self[left_indexer] - target)\n    right_distances = np.abs(self[right_indexer] - target)\n    op = operator.lt if self.is_monotonic_increasing else operator.le\n    indexer = np.where(op(left_distances, right_distances) | (right_indexer == -1), left_indexer, right_indexer)\n    if tolerance is not None:\n        indexer = self._filter_indexer_tolerance(target, indexer, tolerance)\n    return indexer",
                            "def _filter_indexer_tolerance(self, target: 'Index', indexer: np.ndarray, tolerance) -> np.ndarray:\n    distance = abs(self.values[indexer] - target)\n    indexer = np.where(distance <= tolerance, indexer, -1)\n    return indexer",
                            "def _get_partial_string_timestamp_match_key(self, key):\n    \"\"\"\n    Translate any partial string timestamp matches in key, returning the\n    new key.\n\n    Only relevant for MultiIndex.\n    \"\"\"\n    return key",
                            "def _convert_scalar_indexer(self, key, kind: str_t):\n    \"\"\"\n    Convert a scalar indexer.\n\n    Parameters\n    ----------\n    key : label of the slice bound\n    kind : {'loc', 'getitem'}\n    \"\"\"\n    assert kind in ['loc', 'getitem']\n    if len(self) and (not isinstance(self, ABCMultiIndex)):\n        if kind == 'getitem' and is_float(key):\n            if not self.is_floating():\n                self._invalid_indexer('label', key)\n        elif kind == 'loc' and is_float(key):\n            if self.inferred_type not in ['floating', 'mixed-integer-float', 'integer-na', 'string', 'mixed']:\n                self._invalid_indexer('label', key)\n        elif kind == 'loc' and is_integer(key):\n            if not self.holds_integer():\n                self._invalid_indexer('label', key)\n    return key",
                            "def _validate_positional_slice(self, key: slice):\n    \"\"\"\n    For positional indexing, a slice must have either int or None\n    for each of start, stop, and step.\n    \"\"\"\n    self._validate_indexer('positional', key.start, 'iloc')\n    self._validate_indexer('positional', key.stop, 'iloc')\n    self._validate_indexer('positional', key.step, 'iloc')",
                            "def _convert_slice_indexer(self, key: slice, kind: str_t):\n    \"\"\"\n    Convert a slice indexer.\n\n    By definition, these are labels unless 'iloc' is passed in.\n    Floats are not allowed as the start, step, or stop of the slice.\n\n    Parameters\n    ----------\n    key : label of the slice bound\n    kind : {'loc', 'getitem'}\n    \"\"\"\n    assert kind in ['loc', 'getitem'], kind\n    start, stop, step = (key.start, key.stop, key.step)\n\n    def is_int(v):\n        return v is None or is_integer(v)\n    is_null_slicer = start is None and stop is None\n    is_index_slice = is_int(start) and is_int(stop)\n    is_positional = is_index_slice and (not (self.is_integer() or self.is_categorical()))\n    if kind == 'getitem':\n        '\\n            called from the getitem slicers, validate that we are in fact\\n            integers\\n            '\n        if self.is_integer() or is_index_slice:\n            self._validate_indexer('slice', key.start, 'getitem')\n            self._validate_indexer('slice', key.stop, 'getitem')\n            self._validate_indexer('slice', key.step, 'getitem')\n            return key\n    if is_positional and self.is_mixed():\n        try:\n            if start is not None:\n                self.get_loc(start)\n            if stop is not None:\n                self.get_loc(stop)\n            is_positional = False\n        except KeyError:\n            pass\n    if is_null_slicer:\n        indexer = key\n    elif is_positional:\n        indexer = key\n    else:\n        indexer = self.slice_indexer(start, stop, step, kind=kind)\n    return indexer",
                            "def _convert_listlike_indexer(self, keyarr):\n    \"\"\"\n    Parameters\n    ----------\n    keyarr : list-like\n        Indexer to convert.\n\n    Returns\n    -------\n    indexer : numpy.ndarray or None\n        Return an ndarray or None if cannot convert.\n    keyarr : numpy.ndarray\n        Return tuple-safe keys.\n    \"\"\"\n    if isinstance(keyarr, Index):\n        keyarr = self._convert_index_indexer(keyarr)\n    else:\n        keyarr = self._convert_arr_indexer(keyarr)\n    indexer = self._convert_list_indexer(keyarr)\n    return (indexer, keyarr)",
                            "def _convert_arr_indexer(self, keyarr):\n    \"\"\"\n    Convert an array-like indexer to the appropriate dtype.\n\n    Parameters\n    ----------\n    keyarr : array-like\n        Indexer to convert.\n\n    Returns\n    -------\n    converted_keyarr : array-like\n    \"\"\"\n    keyarr = com.asarray_tuplesafe(keyarr)\n    return keyarr",
                            "def _convert_index_indexer(self, keyarr):\n    \"\"\"\n    Convert an Index indexer to the appropriate dtype.\n\n    Parameters\n    ----------\n    keyarr : Index (or sub-class)\n        Indexer to convert.\n\n    Returns\n    -------\n    converted_keyarr : Index (or sub-class)\n    \"\"\"\n    return keyarr",
                            "def _convert_list_indexer(self, keyarr):\n    \"\"\"\n    Convert a list-like indexer to the appropriate dtype.\n\n    Parameters\n    ----------\n    keyarr : Index (or sub-class)\n        Indexer to convert.\n    kind : iloc, loc, optional\n\n    Returns\n    -------\n    positional indexer or None\n    \"\"\"\n    return None",
                            "def _invalid_indexer(self, form: str_t, key):\n    \"\"\"\n    Consistent invalid indexer message.\n    \"\"\"\n    raise TypeError(f'cannot do {form} indexing on {type(self).__name__} with these indexers [{key}] of type {type(key).__name__}')",
                            "def _can_reindex(self, indexer):\n    \"\"\"\n    Check if we are allowing reindexing with this particular indexer.\n\n    Parameters\n    ----------\n    indexer : an integer indexer\n\n    Raises\n    ------\n    ValueError if its a duplicate axis\n    \"\"\"\n    if not self.is_unique and len(indexer):\n        raise ValueError('cannot reindex from a duplicate axis')",
                            "def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n    \"\"\"\n    Create index with target's values (move/add/delete values\n    as necessary).\n\n    Parameters\n    ----------\n    target : an iterable\n\n    Returns\n    -------\n    new_index : pd.Index\n        Resulting index.\n    indexer : np.ndarray or None\n        Indices of output values in original index.\n    \"\"\"\n    preserve_names = not hasattr(target, 'name')\n    target = _ensure_has_len(target)\n    if not isinstance(target, Index) and len(target) == 0:\n        attrs = self._get_attributes_dict()\n        attrs.pop('freq', None)\n        if isinstance(self, ABCRangeIndex):\n            values = range(0)\n        else:\n            values = self._data[:0]\n        target = self._simple_new(values, dtype=self.dtype, **attrs)\n    else:\n        target = ensure_index(target)\n    if level is not None:\n        if method is not None:\n            raise TypeError('Fill method not supported if level passed')\n        _, indexer, _ = self._join_level(target, level, how='right', return_indexers=True)\n    elif self.equals(target):\n        indexer = None\n    elif self.is_unique and (not getattr(self, 'is_overlapping', False)):\n        indexer = self.get_indexer(target, method=method, limit=limit, tolerance=tolerance)\n    else:\n        if method is not None or limit is not None:\n            raise ValueError('cannot reindex a non-unique index with a method or limit')\n        indexer, missing = self.get_indexer_non_unique(target)\n    if preserve_names and target.nlevels == 1 and (target.name != self.name):\n        target = target.copy()\n        target.name = self.name\n    return (target, indexer)",
                            "def _reindex_non_unique(self, target):\n    \"\"\"\n    Create a new index with target's values (move/add/delete values as\n    necessary) use with non-unique Index and a possibly non-unique target.\n\n    Parameters\n    ----------\n    target : an iterable\n\n    Returns\n    -------\n    new_index : pd.Index\n        Resulting index.\n    indexer : np.ndarray or None\n        Indices of output values in original index.\n\n    \"\"\"\n    target = ensure_index(target)\n    indexer, missing = self.get_indexer_non_unique(target)\n    check = indexer != -1\n    new_labels = self.take(indexer[check])\n    new_indexer = None\n    if len(missing):\n        length = np.arange(len(indexer))\n        missing = ensure_platform_int(missing)\n        missing_labels = target.take(missing)\n        missing_indexer = ensure_int64(length[~check])\n        cur_labels = self.take(indexer[check]).values\n        cur_indexer = ensure_int64(length[check])\n        new_labels = np.empty(tuple([len(indexer)]), dtype=object)\n        new_labels[cur_indexer] = cur_labels\n        new_labels[missing_indexer] = missing_labels\n        if target.is_unique:\n            new_indexer = np.arange(len(indexer))\n            new_indexer[cur_indexer] = np.arange(len(cur_labels))\n            new_indexer[missing_indexer] = -1\n        else:\n            indexer[~check] = -1\n            new_indexer = np.arange(len(self.take(indexer)))\n            new_indexer[~check] = -1\n    new_index = self._shallow_copy_with_infer(new_labels)\n    return (new_index, indexer, new_indexer)",
                            "def join(self, other, how='left', level=None, return_indexers=False, sort=False):\n    \"\"\"\n    Compute join_index and indexers to conform data\n    structures to the new index.\n\n    Parameters\n    ----------\n    other : Index\n    how : {'left', 'right', 'inner', 'outer'}\n    level : int or level name, default None\n    return_indexers : bool, default False\n    sort : bool, default False\n        Sort the join keys lexicographically in the result Index. If False,\n        the order of the join keys depends on the join type (how keyword).\n\n    Returns\n    -------\n    join_index, (left_indexer, right_indexer)\n    \"\"\"\n    self_is_mi = isinstance(self, ABCMultiIndex)\n    other_is_mi = isinstance(other, ABCMultiIndex)\n    if level is None and (self_is_mi or other_is_mi):\n        if self.names == other.names:\n            pass\n        else:\n            return self._join_multi(other, how=how, return_indexers=return_indexers)\n    if level is not None and (self_is_mi or other_is_mi):\n        return self._join_level(other, level, how=how, return_indexers=return_indexers)\n    other = ensure_index(other)\n    if len(other) == 0 and how in ('left', 'outer'):\n        join_index = self._shallow_copy()\n        if return_indexers:\n            rindexer = np.repeat(-1, len(join_index))\n            return (join_index, None, rindexer)\n        else:\n            return join_index\n    if len(self) == 0 and how in ('right', 'outer'):\n        join_index = other._shallow_copy()\n        if return_indexers:\n            lindexer = np.repeat(-1, len(join_index))\n            return (join_index, lindexer, None)\n        else:\n            return join_index\n    if self._join_precedence < other._join_precedence:\n        how = {'right': 'left', 'left': 'right'}.get(how, how)\n        result = other.join(self, how=how, level=level, return_indexers=return_indexers)\n        if return_indexers:\n            x, y, z = result\n            result = (x, z, y)\n        return result\n    if not is_dtype_equal(self.dtype, other.dtype):\n        this = self.astype('O')\n        other = other.astype('O')\n        return this.join(other, how=how, return_indexers=return_indexers)\n    _validate_join_method(how)\n    if not self.is_unique and (not other.is_unique):\n        return self._join_non_unique(other, how=how, return_indexers=return_indexers)\n    elif not self.is_unique or not other.is_unique:\n        if self.is_monotonic and other.is_monotonic:\n            return self._join_monotonic(other, how=how, return_indexers=return_indexers)\n        else:\n            return self._join_non_unique(other, how=how, return_indexers=return_indexers)\n    elif self.is_monotonic and other.is_monotonic:\n        try:\n            return self._join_monotonic(other, how=how, return_indexers=return_indexers)\n        except TypeError:\n            pass\n    if how == 'left':\n        join_index = self\n    elif how == 'right':\n        join_index = other\n    elif how == 'inner':\n        join_index = self.intersection(other, sort=False)\n    elif how == 'outer':\n        join_index = self.union(other)\n    if sort:\n        join_index = join_index.sort_values()\n    if return_indexers:\n        if join_index is self:\n            lindexer = None\n        else:\n            lindexer = self.get_indexer(join_index)\n        if join_index is other:\n            rindexer = None\n        else:\n            rindexer = other.get_indexer(join_index)\n        return (join_index, lindexer, rindexer)\n    else:\n        return join_index",
                            "def _join_multi(self, other, how, return_indexers=True):\n    from pandas.core.indexes.multi import MultiIndex\n    from pandas.core.reshape.merge import _restore_dropped_levels_multijoin\n    self_names = set(com.not_none(*self.names))\n    other_names = set(com.not_none(*other.names))\n    overlap = self_names & other_names\n    if not overlap:\n        raise ValueError('cannot join with no overlapping index names')\n    self_is_mi = isinstance(self, ABCMultiIndex)\n    other_is_mi = isinstance(other, ABCMultiIndex)\n    if self_is_mi and other_is_mi:\n        ldrop_names = list(self_names - overlap)\n        rdrop_names = list(other_names - overlap)\n        if not len(ldrop_names + rdrop_names):\n            self_jnlevels = self\n            other_jnlevels = other.reorder_levels(self.names)\n        else:\n            self_jnlevels = self.droplevel(ldrop_names)\n            other_jnlevels = other.droplevel(rdrop_names)\n        join_idx, lidx, ridx = self_jnlevels.join(other_jnlevels, how, return_indexers=True)\n        dropped_names = ldrop_names + rdrop_names\n        levels, codes, names = _restore_dropped_levels_multijoin(self, other, dropped_names, join_idx, lidx, ridx)\n        multi_join_idx = MultiIndex(levels=levels, codes=codes, names=names, verify_integrity=False)\n        multi_join_idx = multi_join_idx.remove_unused_levels()\n        return (multi_join_idx, lidx, ridx)\n    jl = list(overlap)[0]\n    flip_order = False\n    if self_is_mi:\n        self, other = (other, self)\n        flip_order = True\n        how = {'right': 'left', 'left': 'right'}.get(how, how)\n    level = other.names.index(jl)\n    result = self._join_level(other, level, how=how, return_indexers=return_indexers)\n    if flip_order:\n        if isinstance(result, tuple):\n            return (result[0], result[2], result[1])\n    return result",
                            "def _join_non_unique(self, other, how='left', return_indexers=False):\n    from pandas.core.reshape.merge import _get_join_indexers\n    left_idx, right_idx = _get_join_indexers([self._ndarray_values], [other._ndarray_values], how=how, sort=True)\n    left_idx = ensure_platform_int(left_idx)\n    right_idx = ensure_platform_int(right_idx)\n    join_index = np.asarray(self._ndarray_values.take(left_idx))\n    mask = left_idx == -1\n    np.putmask(join_index, mask, other._ndarray_values.take(right_idx))\n    join_index = self._wrap_joined_index(join_index, other)\n    if return_indexers:\n        return (join_index, left_idx, right_idx)\n    else:\n        return join_index",
                            "def _join_level(self, other, level, how='left', return_indexers=False, keep_order=True):\n    \"\"\"\n    The join method *only* affects the level of the resulting\n    MultiIndex. Otherwise it just exactly aligns the Index data to the\n    labels of the level in the MultiIndex.\n\n    If ```keep_order == True```, the order of the data indexed by the\n    MultiIndex will not be changed; otherwise, it will tie out\n    with `other`.\n    \"\"\"\n    from pandas.core.indexes.multi import MultiIndex\n\n    def _get_leaf_sorter(labels):\n        \"\"\"\n        Returns sorter for the inner most level while preserving the\n        order of higher levels.\n        \"\"\"\n        if labels[0].size == 0:\n            return np.empty(0, dtype='int64')\n        if len(labels) == 1:\n            lab = ensure_int64(labels[0])\n            sorter, _ = libalgos.groupsort_indexer(lab, 1 + lab.max())\n            return sorter\n        tic = labels[0][:-1] != labels[0][1:]\n        for lab in labels[1:-1]:\n            tic |= lab[:-1] != lab[1:]\n        starts = np.hstack(([True], tic, [True])).nonzero()[0]\n        lab = ensure_int64(labels[-1])\n        return lib.get_level_sorter(lab, ensure_int64(starts))\n    if isinstance(self, MultiIndex) and isinstance(other, MultiIndex):\n        raise TypeError('Join on level between two MultiIndex objects is ambiguous')\n    left, right = (self, other)\n    flip_order = not isinstance(self, MultiIndex)\n    if flip_order:\n        left, right = (right, left)\n        how = {'right': 'left', 'left': 'right'}.get(how, how)\n    level = left._get_level_number(level)\n    old_level = left.levels[level]\n    if not right.is_unique:\n        raise NotImplementedError('Index._join_level on non-unique index is not implemented')\n    new_level, left_lev_indexer, right_lev_indexer = old_level.join(right, how=how, return_indexers=True)\n    if left_lev_indexer is None:\n        if keep_order or len(left) == 0:\n            left_indexer = None\n            join_index = left\n        else:\n            left_indexer = _get_leaf_sorter(left.codes[:level + 1])\n            join_index = left[left_indexer]\n    else:\n        left_lev_indexer = ensure_int64(left_lev_indexer)\n        rev_indexer = lib.get_reverse_indexer(left_lev_indexer, len(old_level))\n        new_lev_codes = algos.take_nd(rev_indexer, left.codes[level], allow_fill=False)\n        new_codes = list(left.codes)\n        new_codes[level] = new_lev_codes\n        new_levels = list(left.levels)\n        new_levels[level] = new_level\n        if keep_order:\n            left_indexer = np.arange(len(left), dtype=np.intp)\n            mask = new_lev_codes != -1\n            if not mask.all():\n                new_codes = [lab[mask] for lab in new_codes]\n                left_indexer = left_indexer[mask]\n        elif level == 0:\n            ngroups = 1 + new_lev_codes.max()\n            left_indexer, counts = libalgos.groupsort_indexer(new_lev_codes, ngroups)\n            left_indexer = left_indexer[counts[0]:]\n            new_codes = [lab[left_indexer] for lab in new_codes]\n        else:\n            mask = new_lev_codes != -1\n            mask_all = mask.all()\n            if not mask_all:\n                new_codes = [lab[mask] for lab in new_codes]\n            left_indexer = _get_leaf_sorter(new_codes[:level + 1])\n            new_codes = [lab[left_indexer] for lab in new_codes]\n            if not mask_all:\n                left_indexer = mask.nonzero()[0][left_indexer]\n        join_index = MultiIndex(levels=new_levels, codes=new_codes, names=left.names, verify_integrity=False)\n    if right_lev_indexer is not None:\n        right_indexer = algos.take_nd(right_lev_indexer, join_index.codes[level], allow_fill=False)\n    else:\n        right_indexer = join_index.codes[level]\n    if flip_order:\n        left_indexer, right_indexer = (right_indexer, left_indexer)\n    if return_indexers:\n        left_indexer = None if left_indexer is None else ensure_platform_int(left_indexer)\n        right_indexer = None if right_indexer is None else ensure_platform_int(right_indexer)\n        return (join_index, left_indexer, right_indexer)\n    else:\n        return join_index",
                            "def _join_monotonic(self, other, how='left', return_indexers=False):\n    if self.equals(other):\n        ret_index = other if how == 'right' else self\n        if return_indexers:\n            return (ret_index, None, None)\n        else:\n            return ret_index\n    sv = self._ndarray_values\n    ov = other._ndarray_values\n    if self.is_unique and other.is_unique:\n        if how == 'left':\n            join_index = self\n            lidx = None\n            ridx = self._left_indexer_unique(sv, ov)\n        elif how == 'right':\n            join_index = other\n            lidx = self._left_indexer_unique(ov, sv)\n            ridx = None\n        elif how == 'inner':\n            join_index, lidx, ridx = self._inner_indexer(sv, ov)\n            join_index = self._wrap_joined_index(join_index, other)\n        elif how == 'outer':\n            join_index, lidx, ridx = self._outer_indexer(sv, ov)\n            join_index = self._wrap_joined_index(join_index, other)\n    else:\n        if how == 'left':\n            join_index, lidx, ridx = self._left_indexer(sv, ov)\n        elif how == 'right':\n            join_index, ridx, lidx = self._left_indexer(ov, sv)\n        elif how == 'inner':\n            join_index, lidx, ridx = self._inner_indexer(sv, ov)\n        elif how == 'outer':\n            join_index, lidx, ridx = self._outer_indexer(sv, ov)\n        join_index = self._wrap_joined_index(join_index, other)\n    if return_indexers:\n        lidx = None if lidx is None else ensure_platform_int(lidx)\n        ridx = None if ridx is None else ensure_platform_int(ridx)\n        return (join_index, lidx, ridx)\n    else:\n        return join_index",
                            "def _wrap_joined_index(self, joined, other):\n    name = get_op_result_name(self, other)\n    return Index(joined, name=name)",
                            "@property\ndef values(self) -> np.ndarray:\n    \"\"\"\n    Return an array representing the data in the Index.\n\n    .. warning::\n\n       We recommend using :attr:`Index.array` or\n       :meth:`Index.to_numpy`, depending on whether you need\n       a reference to the underlying data or a NumPy array.\n\n    Returns\n    -------\n    array: numpy.ndarray or ExtensionArray\n\n    See Also\n    --------\n    Index.array : Reference to the underlying data.\n    Index.to_numpy : A NumPy array representing the underlying data.\n    \"\"\"\n    return self._data.view(np.ndarray)",
                            "@cache_readonly\n@Appender(IndexOpsMixin.array.__doc__)\ndef array(self) -> ExtensionArray:\n    array = self._data\n    if isinstance(array, np.ndarray):\n        from pandas.core.arrays.numpy_ import PandasArray\n        array = PandasArray(array)\n    return array",
                            "@property\ndef _values(self) -> Union[ExtensionArray, np.ndarray]:\n    \"\"\"\n    The best array representation.\n\n    This is an ndarray or ExtensionArray. This differs from\n    ``_ndarray_values``, which always returns an ndarray.\n\n    Both ``_values`` and ``_ndarray_values`` are consistent between\n    ``Series`` and ``Index`` (except for datetime64[ns], which returns\n    a DatetimeArray for _values on the Index, but ndarray[M8ns] on the\n    Series).\n\n    It may differ from the public '.values' method.\n\n    index             | values          | _values       | _ndarray_values |\n    ----------------- | --------------- | ------------- | --------------- |\n    Index             | ndarray         | ndarray       | ndarray         |\n    CategoricalIndex  | Categorical     | Categorical   | ndarray[int]    |\n    DatetimeIndex     | ndarray[M8ns]   | DatetimeArray | ndarray[M8ns]   |\n    DatetimeIndex[tz] | ndarray[M8ns]   | DatetimeArray | ndarray[M8ns]   |\n    PeriodIndex       | ndarray[object] | PeriodArray   | ndarray[int]    |\n    IntervalIndex     | IntervalArray   | IntervalArray | ndarray[object] |\n\n    See Also\n    --------\n    values\n    _ndarray_values\n    \"\"\"\n    return self._data",
                            "def _internal_get_values(self) -> np.ndarray:\n    \"\"\"\n    Return `Index` data as an `numpy.ndarray`.\n\n    Returns\n    -------\n    numpy.ndarray\n        A one-dimensional numpy array of the `Index` values.\n\n    See Also\n    --------\n    Index.values : The attribute that _internal_get_values wraps.\n\n    Examples\n    --------\n    Getting the `Index` values of a `DataFrame`:\n\n    >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    ...                    index=['a', 'b', 'c'], columns=['A', 'B', 'C'])\n    >>> df\n       A  B  C\n    a  1  2  3\n    b  4  5  6\n    c  7  8  9\n    >>> df.index._internal_get_values()\n    array(['a', 'b', 'c'], dtype=object)\n\n    Standalone `Index` values:\n\n    >>> idx = pd.Index(['1', '2', '3'])\n    >>> idx._internal_get_values()\n    array(['1', '2', '3'], dtype=object)\n\n    `MultiIndex` arrays also have only one dimension:\n\n    >>> midx = pd.MultiIndex.from_arrays([[1, 2, 3], ['a', 'b', 'c']],\n    ...                                  names=('number', 'letter'))\n    >>> midx._internal_get_values()\n    array([(1, 'a'), (2, 'b'), (3, 'c')], dtype=object)\n    >>> midx._internal_get_values().ndim\n    1\n    \"\"\"\n    return self.values",
                            "@Appender(IndexOpsMixin.memory_usage.__doc__)\ndef memory_usage(self, deep: bool=False) -> int:\n    result = super().memory_usage(deep=deep)\n    result += self._engine.sizeof(deep=deep)\n    return result",
                            "def where(self, cond, other=None):\n    \"\"\"\n    Return an Index of same shape as self and whose corresponding\n    entries are from self where cond is True and otherwise are from\n    other.\n\n    Parameters\n    ----------\n    cond : bool array-like with the same length as self\n    other : scalar, or array-like\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    if other is None:\n        other = self._na_value\n    dtype = self.dtype\n    values = self.values\n    if is_bool(other) or is_bool_dtype(other):\n        values = values.astype(object)\n        dtype = None\n    values = np.where(cond, values, other)\n    if self._is_numeric_dtype and np.any(isna(values)):\n        dtype = None\n    return self._shallow_copy_with_infer(values, dtype=dtype)",
                            "@classmethod\ndef _scalar_data_error(cls, data):\n    return TypeError(f'{cls.__name__}(...) must be called with a collection of some kind, {repr(data)} was passed')",
                            "@classmethod\ndef _string_data_error(cls, data):\n    raise TypeError('String dtype not supported, you may need to explicitly cast to a numeric type')",
                            "def _coerce_scalar_to_index(self, item):\n    \"\"\"\n    We need to coerce a scalar to a compat for our index type.\n\n    Parameters\n    ----------\n    item : scalar item to coerce\n    \"\"\"\n    dtype = self.dtype\n    if self._is_numeric_dtype and isna(item):\n        dtype = None\n    return Index([item], dtype=dtype, **self._get_attributes_dict())",
                            "def _to_safe_for_reshape(self):\n    \"\"\"\n    Convert to object if we are a categorical.\n    \"\"\"\n    return self",
                            "def _convert_for_op(self, value):\n    \"\"\"\n    Convert value to be insertable to ndarray.\n    \"\"\"\n    return value",
                            "def _assert_can_do_op(self, value):\n    \"\"\"\n    Check value is valid for scalar op.\n    \"\"\"\n    if not is_scalar(value):\n        raise TypeError(f\"'value' must be a scalar, passed: {type(value).__name__}\")",
                            "@property\ndef _has_complex_internals(self) -> bool:\n    \"\"\"\n    Indicates if an index is not directly backed by a numpy array\n    \"\"\"\n    return False",
                            "def _is_memory_usage_qualified(self) -> bool:\n    \"\"\"\n    Return a boolean if we need a qualified .info display.\n    \"\"\"\n    return self.is_object()",
                            "def is_type_compatible(self, kind) -> bool:\n    \"\"\"\n    Whether the index type is compatible with the provided type.\n    \"\"\"\n    return kind == self.inferred_type",
                            "def __contains__(self, key: Any) -> bool:\n    \"\"\"\n    Return a boolean indicating whether the provided key is in the index.\n\n    Parameters\n    ----------\n    key : label\n        The key to check if it is present in the index.\n\n    Returns\n    -------\n    bool\n        Whether the key search is in the index.\n\n    Raises\n    ------\n    TypeError\n        If the key is not hashable.\n\n    See Also\n    --------\n    Index.isin : Returns an ndarray of boolean dtype indicating whether the\n        list-like key is in the index.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx\n    Int64Index([1, 2, 3, 4], dtype='int64')\n\n    >>> 2 in idx\n    True\n    >>> 6 in idx\n    False\n    \"\"\"\n    hash(key)\n    try:\n        return key in self._engine\n    except (OverflowError, TypeError, ValueError):\n        return False",
                            "def __hash__(self):\n    raise TypeError(f'unhashable type: {repr(type(self).__name__)}')",
                            "def __setitem__(self, key, value):\n    raise TypeError('Index does not support mutable operations')",
                            "def __getitem__(self, key):\n    \"\"\"\n    Override numpy.ndarray's __getitem__ method to work as desired.\n\n    This function adds lists and Series as valid boolean indexers\n    (ndarrays only supports ndarray with dtype=bool).\n\n    If resulting ndim != 1, plain ndarray is returned instead of\n    corresponding `Index` subclass.\n\n    \"\"\"\n    getitem = self._data.__getitem__\n    promote = self._shallow_copy\n    if is_scalar(key):\n        key = com.cast_scalar_indexer(key)\n        return getitem(key)\n    if isinstance(key, slice):\n        return promote(getitem(key))\n    if com.is_bool_indexer(key):\n        key = np.asarray(key, dtype=bool)\n    key = com.values_from_object(key)\n    result = getitem(key)\n    if not is_scalar(result):\n        if np.ndim(result) > 1:\n            deprecate_ndim_indexing(result)\n            return result\n        return promote(result)\n    else:\n        return result",
                            "def _can_hold_identifiers_and_holds_name(self, name) -> bool:\n    \"\"\"\n    Faster check for ``name in self`` when we know `name` is a Python\n    identifier (e.g. in NDFrame.__getattr__, which hits this to support\n    . key lookup). For indexes that can't hold identifiers (everything\n    but object & categorical) we just return False.\n\n    https://github.com/pandas-dev/pandas/issues/19764\n    \"\"\"\n    if self.is_object() or self.is_categorical():\n        return name in self\n    return False",
                            "def append(self, other):\n    \"\"\"\n    Append a collection of Index options together.\n\n    Parameters\n    ----------\n    other : Index or list/tuple of indices\n\n    Returns\n    -------\n    appended : Index\n    \"\"\"\n    to_concat = [self]\n    if isinstance(other, (list, tuple)):\n        to_concat = to_concat + list(other)\n    else:\n        to_concat.append(other)\n    for obj in to_concat:\n        if not isinstance(obj, Index):\n            raise TypeError('all inputs must be Index')\n    names = {obj.name for obj in to_concat}\n    name = None if len(names) > 1 else self.name\n    return self._concat(to_concat, name)",
                            "def _concat(self, to_concat, name):\n    typs = _concat.get_dtype_kinds(to_concat)\n    if len(typs) == 1:\n        return self._concat_same_dtype(to_concat, name=name)\n    return Index._concat_same_dtype(self, to_concat, name=name)",
                            "def _concat_same_dtype(self, to_concat, name):\n    \"\"\"\n    Concatenate to_concat which has the same class.\n    \"\"\"\n    klasses = (ABCDatetimeIndex, ABCTimedeltaIndex, ABCPeriodIndex, ExtensionArray, ABCIntervalIndex)\n    to_concat = [x.astype(object) if isinstance(x, klasses) else x for x in to_concat]\n    self = to_concat[0]\n    attribs = self._get_attributes_dict()\n    attribs['name'] = name\n    to_concat = [x._values if isinstance(x, Index) else x for x in to_concat]\n    return self._shallow_copy_with_infer(np.concatenate(to_concat), **attribs)",
                            "def putmask(self, mask, value):\n    \"\"\"\n    Return a new Index of the values set with the mask.\n\n    Returns\n    -------\n    Index\n\n    See Also\n    --------\n    numpy.ndarray.putmask\n    \"\"\"\n    values = self.values.copy()\n    try:\n        np.putmask(values, mask, self._convert_for_op(value))\n        return self._shallow_copy(values)\n    except (ValueError, TypeError) as err:\n        if is_object_dtype(self):\n            raise err\n        return self.astype(object).putmask(mask, value)",
                            "def equals(self, other) -> bool:\n    \"\"\"\n    Determine if two Index objects contain the same elements.\n\n    Returns\n    -------\n    bool\n        True if \"other\" is an Index and it has the same elements as calling\n        index; False otherwise.\n    \"\"\"\n    if self.is_(other):\n        return True\n    if not isinstance(other, Index):\n        return False\n    if is_object_dtype(self) and (not is_object_dtype(other)):\n        return other.equals(self)\n    if isinstance(other, ABCMultiIndex):\n        if not is_object_dtype(self.dtype):\n            if self.nlevels != other.nlevels:\n                return False\n    return array_equivalent(com.values_from_object(self), com.values_from_object(other))",
                            "def identical(self, other) -> bool:\n    \"\"\"\n    Similar to equals, but check that other comparable attributes are\n    also equal.\n\n    Returns\n    -------\n    bool\n        If two Index objects have equal elements and same type True,\n        otherwise False.\n    \"\"\"\n    return self.equals(other) and all((getattr(self, c, None) == getattr(other, c, None) for c in self._comparables)) and (type(self) == type(other))",
                            "def asof(self, label):\n    \"\"\"\n    Return the label from the index, or, if not present, the previous one.\n\n    Assuming that the index is sorted, return the passed index label if it\n    is in the index, or return the previous index label if the passed one\n    is not in the index.\n\n    Parameters\n    ----------\n    label : object\n        The label up to which the method returns the latest index label.\n\n    Returns\n    -------\n    object\n        The passed label if it is in the index. The previous label if the\n        passed label is not in the sorted index or `NaN` if there is no\n        such label.\n\n    See Also\n    --------\n    Series.asof : Return the latest value in a Series up to the\n        passed index.\n    merge_asof : Perform an asof merge (similar to left join but it\n        matches on nearest key rather than equal key).\n    Index.get_loc : An `asof` is a thin wrapper around `get_loc`\n        with method='pad'.\n\n    Examples\n    --------\n    `Index.asof` returns the latest index label up to the passed label.\n\n    >>> idx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])\n    >>> idx.asof('2014-01-01')\n    '2013-12-31'\n\n    If the label is in the index, the method returns the passed label.\n\n    >>> idx.asof('2014-01-02')\n    '2014-01-02'\n\n    If all of the labels in the index are later than the passed label,\n    NaN is returned.\n\n    >>> idx.asof('1999-01-02')\n    nan\n\n    If the index is not sorted, an error is raised.\n\n    >>> idx_not_sorted = pd.Index(['2013-12-31', '2015-01-02',\n    ...                            '2014-01-03'])\n    >>> idx_not_sorted.asof('2013-12-31')\n    Traceback (most recent call last):\n    ValueError: index must be monotonic increasing or decreasing\n    \"\"\"\n    try:\n        loc = self.get_loc(label, method='pad')\n    except KeyError:\n        return self._na_value\n    else:\n        if isinstance(loc, slice):\n            loc = loc.indices(len(self))[-1]\n        return self[loc]",
                            "def asof_locs(self, where, mask):\n    \"\"\"\n    Find the locations (indices) of the labels from the index for\n    every entry in the `where` argument.\n\n    As in the `asof` function, if the label (a particular entry in\n    `where`) is not in the index, the latest index label up to the\n    passed label is chosen and its index returned.\n\n    If all of the labels in the index are later than a label in `where`,\n    -1 is returned.\n\n    `mask` is used to ignore NA values in the index during calculation.\n\n    Parameters\n    ----------\n    where : Index\n        An Index consisting of an array of timestamps.\n    mask : array-like\n        Array of booleans denoting where values in the original\n        data are not NA.\n\n    Returns\n    -------\n    numpy.ndarray\n        An array of locations (indices) of the labels from the Index\n        which correspond to the return values of the `asof` function\n        for every element in `where`.\n    \"\"\"\n    locs = self.values[mask].searchsorted(where.values, side='right')\n    locs = np.where(locs > 0, locs - 1, 0)\n    result = np.arange(len(self))[mask].take(locs)\n    first = mask.argmax()\n    result[(locs == 0) & (where.values < self.values[first])] = -1\n    return result",
                            "def sort_values(self, return_indexer: bool=False, ascending: bool=True):\n    \"\"\"\n    Return a sorted copy of the index.\n\n    Return a sorted copy of the index, and optionally return the indices\n    that sorted the index itself.\n\n    Parameters\n    ----------\n    return_indexer : bool, default False\n        Should the indices that would sort the index be returned.\n    ascending : bool, default True\n        Should the index values be sorted in an ascending order.\n\n    Returns\n    -------\n    sorted_index : pandas.Index\n        Sorted copy of the index.\n    indexer : numpy.ndarray, optional\n        The indices that the index itself was sorted by.\n\n    See Also\n    --------\n    Series.sort_values : Sort values of a Series.\n    DataFrame.sort_values : Sort values in a DataFrame.\n\n    Examples\n    --------\n    >>> idx = pd.Index([10, 100, 1, 1000])\n    >>> idx\n    Int64Index([10, 100, 1, 1000], dtype='int64')\n\n    Sort values in ascending order (default behavior).\n\n    >>> idx.sort_values()\n    Int64Index([1, 10, 100, 1000], dtype='int64')\n\n    Sort values in descending order, and also get the indices `idx` was\n    sorted by.\n\n    >>> idx.sort_values(ascending=False, return_indexer=True)\n    (Int64Index([1000, 100, 10, 1], dtype='int64'), array([3, 1, 0, 2]))\n    \"\"\"\n    _as = self.argsort()\n    if not ascending:\n        _as = _as[::-1]\n    sorted_index = self.take(_as)\n    if return_indexer:\n        return (sorted_index, _as)\n    else:\n        return sorted_index",
                            "def sort(self, *args, **kwargs):\n    \"\"\"\n    Use sort_values instead.\n    \"\"\"\n    raise TypeError('cannot sort an Index object in-place, use sort_values instead')",
                            "def shift(self, periods=1, freq=None):\n    \"\"\"\n    Shift index by desired number of time frequency increments.\n\n    This method is for shifting the values of datetime-like indexes\n    by a specified time increment a given number of times.\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Number of periods (or increments) to shift by,\n        can be positive or negative.\n    freq : pandas.DateOffset, pandas.Timedelta or str, optional\n        Frequency increment to shift by.\n        If None, the index is shifted by its own `freq` attribute.\n        Offset aliases are valid strings, e.g., 'D', 'W', 'M' etc.\n\n    Returns\n    -------\n    pandas.Index\n        Shifted index.\n\n    See Also\n    --------\n    Series.shift : Shift values of Series.\n\n    Notes\n    -----\n    This method is only implemented for datetime-like index classes,\n    i.e., DatetimeIndex, PeriodIndex and TimedeltaIndex.\n\n    Examples\n    --------\n    Put the first 5 month starts of 2011 into an index.\n\n    >>> month_starts = pd.date_range('1/1/2011', periods=5, freq='MS')\n    >>> month_starts\n    DatetimeIndex(['2011-01-01', '2011-02-01', '2011-03-01', '2011-04-01',\n                   '2011-05-01'],\n                  dtype='datetime64[ns]', freq='MS')\n\n    Shift the index by 10 days.\n\n    >>> month_starts.shift(10, freq='D')\n    DatetimeIndex(['2011-01-11', '2011-02-11', '2011-03-11', '2011-04-11',\n                   '2011-05-11'],\n                  dtype='datetime64[ns]', freq=None)\n\n    The default value of `freq` is the `freq` attribute of the index,\n    which is 'MS' (month start) in this example.\n\n    >>> month_starts.shift(10)\n    DatetimeIndex(['2011-11-01', '2011-12-01', '2012-01-01', '2012-02-01',\n                   '2012-03-01'],\n                  dtype='datetime64[ns]', freq='MS')\n    \"\"\"\n    raise NotImplementedError(f'Not supported for type {type(self).__name__}')",
                            "def argsort(self, *args, **kwargs) -> np.ndarray:\n    \"\"\"\n    Return the integer indices that would sort the index.\n\n    Parameters\n    ----------\n    *args\n        Passed to `numpy.ndarray.argsort`.\n    **kwargs\n        Passed to `numpy.ndarray.argsort`.\n\n    Returns\n    -------\n    numpy.ndarray\n        Integer indices that would sort the index if used as\n        an indexer.\n\n    See Also\n    --------\n    numpy.argsort : Similar method for NumPy arrays.\n    Index.sort_values : Return sorted copy of Index.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['b', 'a', 'd', 'c'])\n    >>> idx\n    Index(['b', 'a', 'd', 'c'], dtype='object')\n\n    >>> order = idx.argsort()\n    >>> order\n    array([1, 0, 3, 2])\n\n    >>> idx[order]\n    Index(['a', 'b', 'c', 'd'], dtype='object')\n    \"\"\"\n    result = self.asi8\n    if result is None:\n        result = np.array(self)\n    return result.argsort(*args, **kwargs)",
                            "def get_value(self, series: 'Series', key):\n    \"\"\"\n    Fast lookup of value from 1-dimensional ndarray. Only use this if you\n    know what you're doing.\n\n    Returns\n    -------\n    scalar or Series\n    \"\"\"\n    if not is_scalar(key):\n        raise InvalidIndexError(key)\n    try:\n        loc = self.get_loc(key)\n    except KeyError:\n        if not self._should_fallback_to_positional():\n            raise\n        elif is_integer(key):\n            loc = key\n        else:\n            raise\n    return self._get_values_for_loc(series, loc, key)",
                            "def _should_fallback_to_positional(self) -> bool:\n    \"\"\"\n    If an integer key is not found, should we fall back to positional indexing?\n    \"\"\"\n    if len(self) > 0 and (self.holds_integer() or self.is_boolean()):\n        return False\n    return True",
                            "def _get_values_for_loc(self, series: 'Series', loc, key):\n    \"\"\"\n    Do a positional lookup on the given Series, returning either a scalar\n    or a Series.\n\n    Assumes that `series.index is self`\n\n    key is included for MultiIndex compat.\n    \"\"\"\n    if is_integer(loc):\n        return series._values[loc]\n    return series.iloc[loc]",
                            "def set_value(self, arr, key, value):\n    \"\"\"\n    Fast lookup of value from 1-dimensional ndarray.\n\n    .. deprecated:: 1.0\n\n    Notes\n    -----\n    Only use this if you know what you're doing.\n    \"\"\"\n    warnings.warn(\"The 'set_value' method is deprecated, and will be removed in a future version.\", FutureWarning, stacklevel=2)\n    loc = self._engine.get_loc(key)\n    validate_numeric_casting(arr.dtype, value)\n    arr[loc] = value",
                            "@Appender(_index_shared_docs['get_indexer_non_unique'] % _index_doc_kwargs)\ndef get_indexer_non_unique(self, target):\n    target = ensure_index(target)\n    pself, ptarget = self._maybe_promote(target)\n    if pself is not self or ptarget is not target:\n        return pself.get_indexer_non_unique(ptarget)\n    if is_categorical(target):\n        tgt_values = np.asarray(target)\n    elif self.is_all_dates and target.is_all_dates:\n        tgt_values = target.asi8\n    else:\n        tgt_values = target._ndarray_values\n    indexer, missing = self._engine.get_indexer_non_unique(tgt_values)\n    return (ensure_platform_int(indexer), missing)",
                            "def get_indexer_for(self, target, **kwargs):\n    \"\"\"\n    Guaranteed return of an indexer even when non-unique.\n\n    This dispatches to get_indexer or get_indexer_non_unique\n    as appropriate.\n\n    Returns\n    -------\n    numpy.ndarray\n        List of indices.\n    \"\"\"\n    if self.is_unique:\n        return self.get_indexer(target, **kwargs)\n    indexer, _ = self.get_indexer_non_unique(target, **kwargs)\n    return indexer",
                            "def _maybe_promote(self, other):\n    if self.inferred_type == 'date' and isinstance(other, ABCDatetimeIndex):\n        return (type(other)(self), other)\n    elif self.inferred_type == 'boolean':\n        if not is_object_dtype(self.dtype):\n            return (self.astype('object'), other.astype('object'))\n    return (self, other)",
                            "def groupby(self, values) -> PrettyDict[Hashable, np.ndarray]:\n    \"\"\"\n    Group the index labels by a given array of values.\n\n    Parameters\n    ----------\n    values : array\n        Values used to determine the groups.\n\n    Returns\n    -------\n    dict\n        {group name -> group labels}\n    \"\"\"\n    if isinstance(values, ABCMultiIndex):\n        values = values.values\n    values = ensure_categorical(values)\n    result = values._reverse_indexer()\n    result = {k: self.take(v) for k, v in result.items()}\n    return PrettyDict(result)",
                            "def map(self, mapper, na_action=None):\n    \"\"\"\n    Map values using input correspondence (a dict, Series, or function).\n\n    Parameters\n    ----------\n    mapper : function, dict, or Series\n        Mapping correspondence.\n    na_action : {None, 'ignore'}\n        If 'ignore', propagate NA values, without passing them to the\n        mapping correspondence.\n\n    Returns\n    -------\n    applied : Union[Index, MultiIndex], inferred\n        The output of the mapping function applied to the index.\n        If the function returns a tuple with more than one element\n        a MultiIndex will be returned.\n    \"\"\"\n    from pandas.core.indexes.multi import MultiIndex\n    new_values = super()._map_values(mapper, na_action=na_action)\n    attributes = self._get_attributes_dict()\n    if new_values.size and isinstance(new_values[0], tuple):\n        if isinstance(self, MultiIndex):\n            names = self.names\n        elif attributes.get('name'):\n            names = [attributes.get('name')] * len(new_values[0])\n        else:\n            names = None\n        return MultiIndex.from_tuples(new_values, names=names)\n    attributes['copy'] = False\n    if not new_values.size:\n        attributes['dtype'] = self.dtype\n    return Index(new_values, **attributes)",
                            "def isin(self, values, level=None):\n    \"\"\"\n    Return a boolean array where the index values are in `values`.\n\n    Compute boolean array of whether each index value is found in the\n    passed set of values. The length of the returned boolean array matches\n    the length of the index.\n\n    Parameters\n    ----------\n    values : set or list-like\n        Sought values.\n    level : str or int, optional\n        Name or position of the index level to use (if the index is a\n        `MultiIndex`).\n\n    Returns\n    -------\n    is_contained : ndarray\n        NumPy array of boolean values.\n\n    See Also\n    --------\n    Series.isin : Same for Series.\n    DataFrame.isin : Same method for DataFrames.\n\n    Notes\n    -----\n    In the case of `MultiIndex` you must either specify `values` as a\n    list-like object containing tuples that are the same length as the\n    number of levels, or specify `level`. Otherwise it will raise a\n    ``ValueError``.\n\n    If `level` is specified:\n\n    - if it is the name of one *and only one* index level, use that level;\n    - otherwise it should be a number indicating level position.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1,2,3])\n    >>> idx\n    Int64Index([1, 2, 3], dtype='int64')\n\n    Check whether each index value in a list of values.\n    >>> idx.isin([1, 4])\n    array([ True, False, False])\n\n    >>> midx = pd.MultiIndex.from_arrays([[1,2,3],\n    ...                                  ['red', 'blue', 'green']],\n    ...                                  names=('number', 'color'))\n    >>> midx\n    MultiIndex(levels=[[1, 2, 3], ['blue', 'green', 'red']],\n               codes=[[0, 1, 2], [2, 0, 1]],\n               names=['number', 'color'])\n\n    Check whether the strings in the 'color' level of the MultiIndex\n    are in a list of colors.\n\n    >>> midx.isin(['red', 'orange', 'yellow'], level='color')\n    array([ True, False, False])\n\n    To check across the levels of a MultiIndex, pass a list of tuples:\n\n    >>> midx.isin([(1, 'red'), (3, 'red')])\n    array([ True, False, False])\n\n    For a DatetimeIndex, string values in `values` are converted to\n    Timestamps.\n\n    >>> dates = ['2000-03-11', '2000-03-12', '2000-03-13']\n    >>> dti = pd.to_datetime(dates)\n    >>> dti\n    DatetimeIndex(['2000-03-11', '2000-03-12', '2000-03-13'],\n    dtype='datetime64[ns]', freq=None)\n\n    >>> dti.isin(['2000-03-11'])\n    array([ True, False, False])\n    \"\"\"\n    if level is not None:\n        self._validate_index_level(level)\n    return algos.isin(self, values)",
                            "def _get_string_slice(self, key: str_t, use_lhs: bool=True, use_rhs: bool=True):\n    raise NotImplementedError",
                            "def slice_indexer(self, start=None, end=None, step=None, kind=None):\n    \"\"\"\n    For an ordered or unique index, compute the slice indexer for input\n    labels and step.\n\n    Parameters\n    ----------\n    start : label, default None\n        If None, defaults to the beginning.\n    end : label, default None\n        If None, defaults to the end.\n    step : int, default None\n    kind : str, default None\n\n    Returns\n    -------\n    indexer : slice\n\n    Raises\n    ------\n    KeyError : If key does not exist, or key is not unique and index is\n        not ordered.\n\n    Notes\n    -----\n    This function assumes that the data is sorted, so use at your own peril\n\n    Examples\n    --------\n    This is a method on all index types. For example you can do:\n\n    >>> idx = pd.Index(list('abcd'))\n    >>> idx.slice_indexer(start='b', end='c')\n    slice(1, 3)\n\n    >>> idx = pd.MultiIndex.from_arrays([list('abcd'), list('efgh')])\n    >>> idx.slice_indexer(start='b', end=('c', 'g'))\n    slice(1, 3)\n    \"\"\"\n    start_slice, end_slice = self.slice_locs(start, end, step=step, kind=kind)\n    if not is_scalar(start_slice):\n        raise AssertionError('Start slice bound is non-scalar')\n    if not is_scalar(end_slice):\n        raise AssertionError('End slice bound is non-scalar')\n    return slice(start_slice, end_slice, step)",
                            "def _maybe_cast_indexer(self, key):\n    \"\"\"\n    If we have a float key and are not a floating index, then try to cast\n    to an int if equivalent.\n    \"\"\"\n    if not self.is_floating():\n        return com.cast_scalar_indexer(key)\n    return key",
                            "def _validate_indexer(self, form: str_t, key, kind: str_t):\n    \"\"\"\n    If we are positional indexer, validate that we have appropriate\n    typed bounds must be an integer.\n    \"\"\"\n    assert kind in ['getitem', 'iloc']\n    if key is None:\n        pass\n    elif is_integer(key):\n        pass\n    else:\n        self._invalid_indexer(form, key)",
                            "def _maybe_cast_slice_bound(self, label, side: str_t, kind):\n    \"\"\"\n    This function should be overloaded in subclasses that allow non-trivial\n    casting on label-slice bounds, e.g. datetime-like indices allowing\n    strings containing formatted datetimes.\n\n    Parameters\n    ----------\n    label : object\n    side : {'left', 'right'}\n    kind : {'loc', 'getitem'} or None\n\n    Returns\n    -------\n    label : object\n\n    Notes\n    -----\n    Value of `side` parameter should be validated in caller.\n    \"\"\"\n    assert kind in ['loc', 'getitem', None]\n    if is_float(label):\n        self._invalid_indexer('slice', label)\n    elif is_integer(label):\n        self._invalid_indexer('slice', label)\n    return label",
                            "def _searchsorted_monotonic(self, label, side='left'):\n    if self.is_monotonic_increasing:\n        return self.searchsorted(label, side=side)\n    elif self.is_monotonic_decreasing:\n        pos = self[::-1].searchsorted(label, side='right' if side == 'left' else 'left')\n        return len(self) - pos\n    raise ValueError('index must be monotonic increasing or decreasing')",
                            "def get_slice_bound(self, label, side: str_t, kind) -> int:\n    \"\"\"\n    Calculate slice bound that corresponds to given label.\n\n    Returns leftmost (one-past-the-rightmost if ``side=='right'``) position\n    of given label.\n\n    Parameters\n    ----------\n    label : object\n    side : {'left', 'right'}\n    kind : {'loc', 'getitem'} or None\n\n    Returns\n    -------\n    int\n        Index of label.\n    \"\"\"\n    assert kind in ['loc', 'getitem', None]\n    if side not in ('left', 'right'):\n        raise ValueError(f\"Invalid value for side kwarg, must be either 'left' or 'right': {side}\")\n    original_label = label\n    label = self._maybe_cast_slice_bound(label, side, kind)\n    try:\n        slc = self.get_loc(label)\n    except KeyError as err:\n        try:\n            return self._searchsorted_monotonic(label, side)\n        except ValueError:\n            raise err\n    if isinstance(slc, np.ndarray):\n        if is_bool_dtype(slc):\n            slc = lib.maybe_booleans_to_slice(slc.view('u1'))\n        else:\n            slc = lib.maybe_indices_to_slice(slc.astype('i8'), len(self))\n        if isinstance(slc, np.ndarray):\n            raise KeyError(f'Cannot get {side} slice bound for non-unique label: {repr(original_label)}')\n    if isinstance(slc, slice):\n        if side == 'left':\n            return slc.start\n        else:\n            return slc.stop\n    elif side == 'right':\n        return slc + 1\n    else:\n        return slc",
                            "def slice_locs(self, start=None, end=None, step=None, kind=None):\n    \"\"\"\n    Compute slice locations for input labels.\n\n    Parameters\n    ----------\n    start : label, default None\n        If None, defaults to the beginning.\n    end : label, default None\n        If None, defaults to the end.\n    step : int, defaults None\n        If None, defaults to 1.\n    kind : {'loc', 'getitem'} or None\n\n    Returns\n    -------\n    start, end : int\n\n    See Also\n    --------\n    Index.get_loc : Get location for a single label.\n\n    Notes\n    -----\n    This method only works if the index is monotonic or unique.\n\n    Examples\n    --------\n    >>> idx = pd.Index(list('abcd'))\n    >>> idx.slice_locs(start='b', end='c')\n    (1, 3)\n    \"\"\"\n    inc = step is None or step >= 0\n    if not inc:\n        start, end = (end, start)\n    if isinstance(start, (str, datetime)) and isinstance(end, (str, datetime)):\n        try:\n            ts_start = Timestamp(start)\n            ts_end = Timestamp(end)\n        except (ValueError, TypeError):\n            pass\n        else:\n            if not tz_compare(ts_start.tzinfo, ts_end.tzinfo):\n                raise ValueError('Both dates must have the same UTC offset')\n    start_slice = None\n    if start is not None:\n        start_slice = self.get_slice_bound(start, 'left', kind)\n    if start_slice is None:\n        start_slice = 0\n    end_slice = None\n    if end is not None:\n        end_slice = self.get_slice_bound(end, 'right', kind)\n    if end_slice is None:\n        end_slice = len(self)\n    if not inc:\n        end_slice, start_slice = (start_slice - 1, end_slice - 1)\n        if end_slice == -1:\n            end_slice -= len(self)\n        if start_slice == -1:\n            start_slice -= len(self)\n    return (start_slice, end_slice)",
                            "def delete(self, loc):\n    \"\"\"\n    Make new Index with passed location(-s) deleted.\n\n    Parameters\n    ----------\n    loc : int or list of int\n        Location of item(-s) which will be deleted.\n        Use a list of locations to delete more than one value at the same time.\n\n    Returns\n    -------\n    Index\n        New Index with passed location(-s) deleted.\n\n    See Also\n    --------\n    numpy.delete : Delete any rows and column from NumPy array (ndarray).\n\n    Examples\n    --------\n    >>> idx = pd.Index(['a', 'b', 'c'])\n    >>> idx.delete(1)\n    Index(['a', 'c'], dtype='object')\n\n    >>> idx = pd.Index(['a', 'b', 'c'])\n    >>> idx.delete([0, 2])\n    Index(['b'], dtype='object')\n    \"\"\"\n    return self._shallow_copy(np.delete(self._data, loc))",
                            "def insert(self, loc: int, item):\n    \"\"\"\n    Make new Index inserting new item at location.\n\n    Follows Python list.append semantics for negative values.\n\n    Parameters\n    ----------\n    loc : int\n    item : object\n\n    Returns\n    -------\n    new_index : Index\n    \"\"\"\n    _self = np.asarray(self)\n    item = self._coerce_scalar_to_index(item)._ndarray_values\n    idx = np.concatenate((_self[:loc], item, _self[loc:]))\n    return self._shallow_copy_with_infer(idx)",
                            "def drop(self, labels, errors: str_t='raise'):\n    \"\"\"\n    Make new Index with passed list of labels deleted.\n\n    Parameters\n    ----------\n    labels : array-like\n    errors : {'ignore', 'raise'}, default 'raise'\n        If 'ignore', suppress error and existing labels are dropped.\n\n    Returns\n    -------\n    dropped : Index\n\n    Raises\n    ------\n    KeyError\n        If not all of the labels are found in the selected axis\n    \"\"\"\n    arr_dtype = 'object' if self.dtype == 'object' else None\n    labels = com.index_labels_to_array(labels, dtype=arr_dtype)\n    indexer = self.get_indexer(labels)\n    mask = indexer == -1\n    if mask.any():\n        if errors != 'ignore':\n            raise KeyError(f'{labels[mask]} not found in axis')\n        indexer = indexer[~mask]\n    return self.delete(indexer)",
                            "@classmethod\ndef _add_comparison_methods(cls):\n    \"\"\"\n    Add in comparison methods.\n    \"\"\"\n    cls.__eq__ = _make_comparison_op(operator.eq, cls)\n    cls.__ne__ = _make_comparison_op(operator.ne, cls)\n    cls.__lt__ = _make_comparison_op(operator.lt, cls)\n    cls.__gt__ = _make_comparison_op(operator.gt, cls)\n    cls.__le__ = _make_comparison_op(operator.le, cls)\n    cls.__ge__ = _make_comparison_op(operator.ge, cls)",
                            "@classmethod\ndef _add_numeric_methods_add_sub_disabled(cls):\n    \"\"\"\n    Add in the numeric add/sub methods to disable.\n    \"\"\"\n    cls.__add__ = make_invalid_op('__add__')\n    cls.__radd__ = make_invalid_op('__radd__')\n    cls.__iadd__ = make_invalid_op('__iadd__')\n    cls.__sub__ = make_invalid_op('__sub__')\n    cls.__rsub__ = make_invalid_op('__rsub__')\n    cls.__isub__ = make_invalid_op('__isub__')",
                            "@classmethod\ndef _add_numeric_methods_disabled(cls):\n    \"\"\"\n    Add in numeric methods to disable other than add/sub.\n    \"\"\"\n    cls.__pow__ = make_invalid_op('__pow__')\n    cls.__rpow__ = make_invalid_op('__rpow__')\n    cls.__mul__ = make_invalid_op('__mul__')\n    cls.__rmul__ = make_invalid_op('__rmul__')\n    cls.__floordiv__ = make_invalid_op('__floordiv__')\n    cls.__rfloordiv__ = make_invalid_op('__rfloordiv__')\n    cls.__truediv__ = make_invalid_op('__truediv__')\n    cls.__rtruediv__ = make_invalid_op('__rtruediv__')\n    cls.__mod__ = make_invalid_op('__mod__')\n    cls.__divmod__ = make_invalid_op('__divmod__')\n    cls.__neg__ = make_invalid_op('__neg__')\n    cls.__pos__ = make_invalid_op('__pos__')\n    cls.__abs__ = make_invalid_op('__abs__')\n    cls.__inv__ = make_invalid_op('__inv__')",
                            "@classmethod\ndef _add_numeric_methods_binary(cls):\n    \"\"\"\n    Add in numeric methods.\n    \"\"\"\n    cls.__add__ = _make_arithmetic_op(operator.add, cls)\n    cls.__radd__ = _make_arithmetic_op(ops.radd, cls)\n    cls.__sub__ = _make_arithmetic_op(operator.sub, cls)\n    cls.__rsub__ = _make_arithmetic_op(ops.rsub, cls)\n    cls.__rpow__ = _make_arithmetic_op(ops.rpow, cls)\n    cls.__pow__ = _make_arithmetic_op(operator.pow, cls)\n    cls.__truediv__ = _make_arithmetic_op(operator.truediv, cls)\n    cls.__rtruediv__ = _make_arithmetic_op(ops.rtruediv, cls)\n    cls.__mod__ = _make_arithmetic_op(operator.mod, cls)\n    cls.__floordiv__ = _make_arithmetic_op(operator.floordiv, cls)\n    cls.__rfloordiv__ = _make_arithmetic_op(ops.rfloordiv, cls)\n    cls.__divmod__ = _make_arithmetic_op(divmod, cls)\n    cls.__mul__ = _make_arithmetic_op(operator.mul, cls)\n    cls.__rmul__ = _make_arithmetic_op(ops.rmul, cls)",
                            "@classmethod\ndef _add_numeric_methods_unary(cls):\n    \"\"\"\n    Add in numeric unary methods.\n    \"\"\"\n\n    def _make_evaluate_unary(op, opstr):\n\n        def _evaluate_numeric_unary(self):\n            attrs = self._get_attributes_dict()\n            return Index(op(self.values), **attrs)\n        _evaluate_numeric_unary.__name__ = opstr\n        return _evaluate_numeric_unary\n    cls.__neg__ = _make_evaluate_unary(operator.neg, '__neg__')\n    cls.__pos__ = _make_evaluate_unary(operator.pos, '__pos__')\n    cls.__abs__ = _make_evaluate_unary(np.abs, '__abs__')\n    cls.__inv__ = _make_evaluate_unary(lambda x: -x, '__inv__')",
                            "@classmethod\ndef _add_numeric_methods(cls):\n    cls._add_numeric_methods_unary()\n    cls._add_numeric_methods_binary()",
                            "@classmethod\ndef _add_logical_methods(cls):\n    \"\"\"\n    Add in logical methods.\n    \"\"\"\n    _doc = '\\n        %(desc)s\\n\\n        Parameters\\n        ----------\\n        *args\\n            These parameters will be passed to numpy.%(outname)s.\\n        **kwargs\\n            These parameters will be passed to numpy.%(outname)s.\\n\\n        Returns\\n        -------\\n        %(outname)s : bool or array_like (if axis is specified)\\n            A single element array_like may be converted to bool.'\n    _index_shared_docs['index_all'] = dedent('\\n\\n        See Also\\n        --------\\n        Index.any : Return whether any element in an Index is True.\\n        Series.any : Return whether any element in a Series is True.\\n        Series.all : Return whether all elements in a Series are True.\\n\\n        Notes\\n        -----\\n        Not a Number (NaN), positive infinity and negative infinity\\n        evaluate to True because these are not equal to zero.\\n\\n        Examples\\n        --------\\n        **all**\\n\\n        True, because nonzero integers are considered True.\\n\\n        >>> pd.Index([1, 2, 3]).all()\\n        True\\n\\n        False, because ``0`` is considered False.\\n\\n        >>> pd.Index([0, 1, 2]).all()\\n        False\\n\\n        **any**\\n\\n        True, because ``1`` is considered True.\\n\\n        >>> pd.Index([0, 0, 1]).any()\\n        True\\n\\n        False, because ``0`` is considered False.\\n\\n        >>> pd.Index([0, 0, 0]).any()\\n        False\\n        ')\n    _index_shared_docs['index_any'] = dedent('\\n\\n        See Also\\n        --------\\n        Index.all : Return whether all elements are True.\\n        Series.all : Return whether all elements are True.\\n\\n        Notes\\n        -----\\n        Not a Number (NaN), positive infinity and negative infinity\\n        evaluate to True because these are not equal to zero.\\n\\n        Examples\\n        --------\\n        >>> index = pd.Index([0, 1, 2])\\n        >>> index.any()\\n        True\\n\\n        >>> index = pd.Index([0, 0, 0])\\n        >>> index.any()\\n        False\\n        ')\n\n    def _make_logical_function(name, desc, f):\n\n        @Substitution(outname=name, desc=desc)\n        @Appender(_index_shared_docs['index_' + name])\n        @Appender(_doc)\n        def logical_func(self, *args, **kwargs):\n            result = f(self.values)\n            if isinstance(result, (np.ndarray, ABCSeries, Index)) and result.ndim == 0:\n                return result.dtype.type(result.item())\n            else:\n                return result\n        logical_func.__name__ = name\n        return logical_func\n    cls.all = _make_logical_function('all', 'Return whether all elements are True.', np.all)\n    cls.any = _make_logical_function('any', 'Return whether any element is True.', np.any)",
                            "@classmethod\ndef _add_logical_methods_disabled(cls):\n    \"\"\"\n    Add in logical methods to disable.\n    \"\"\"\n    cls.all = make_invalid_op('all')\n    cls.any = make_invalid_op('any')",
                            "@property\ndef shape(self):\n    \"\"\"\n    Return a tuple of the shape of the underlying data.\n    \"\"\"\n    return self._values.shape",
                            "def is_int(v):\n    return v is None or is_integer(v)",
                            "def _get_leaf_sorter(labels):\n    \"\"\"\n    Returns sorter for the inner most level while preserving the\n    order of higher levels.\n    \"\"\"\n    if labels[0].size == 0:\n        return np.empty(0, dtype='int64')\n    if len(labels) == 1:\n        lab = ensure_int64(labels[0])\n        sorter, _ = libalgos.groupsort_indexer(lab, 1 + lab.max())\n        return sorter\n    tic = labels[0][:-1] != labels[0][1:]\n    for lab in labels[1:-1]:\n        tic |= lab[:-1] != lab[1:]\n    starts = np.hstack(([True], tic, [True])).nonzero()[0]\n    lab = ensure_int64(labels[-1])\n    return lib.get_level_sorter(lab, ensure_int64(starts))",
                            "def _make_evaluate_unary(op, opstr):\n\n    def _evaluate_numeric_unary(self):\n        attrs = self._get_attributes_dict()\n        return Index(op(self.values), **attrs)\n    _evaluate_numeric_unary.__name__ = opstr\n    return _evaluate_numeric_unary",
                            "def _make_logical_function(name, desc, f):\n\n    @Substitution(outname=name, desc=desc)\n    @Appender(_index_shared_docs['index_' + name])\n    @Appender(_doc)\n    def logical_func(self, *args, **kwargs):\n        result = f(self.values)\n        if isinstance(result, (np.ndarray, ABCSeries, Index)) and result.ndim == 0:\n            return result.dtype.type(result.item())\n        else:\n            return result\n    logical_func.__name__ = name\n    return logical_func",
                            "def _evaluate_numeric_unary(self):\n    attrs = self._get_attributes_dict()\n    return Index(op(self.values), **attrs)",
                            "@Substitution(outname=name, desc=desc)\n@Appender(_index_shared_docs['index_' + name])\n@Appender(_doc)\ndef logical_func(self, *args, **kwargs):\n    result = f(self.values)\n    if isinstance(result, (np.ndarray, ABCSeries, Index)) and result.ndim == 0:\n        return result.dtype.type(result.item())\n    else:\n        return result"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_deprecations",
                            "_join_precedence",
                            "_typ",
                            "_data",
                            "_id",
                            "_name",
                            "_no_setting_name",
                            "_comparables",
                            "_attributes",
                            "_is_numeric_dtype",
                            "_can_hold_na",
                            "_defer_to_indexing",
                            "_infer_as_myclass",
                            "_engine_type",
                            "_supports_partial_string_indexing",
                            "_accessors",
                            "str",
                            "names",
                            "get_level_values",
                            "_na_value",
                            "isnull",
                            "notnull",
                            "__bool__"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "_left_indexer_unique(self, left, right)",
                            "_left_indexer(self, left, right)",
                            "_inner_indexer(self, left, right)",
                            "_outer_indexer(self, left, right)",
                            "__new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs) -> 'Index'",
                            "asi8(self)",
                            "_simple_new(cls, values, name=None, dtype=None)",
                            "_constructor(self)",
                            "_get_attributes_dict(self)",
                            "_shallow_copy(self, values=None, **kwargs)",
                            "_shallow_copy_with_infer(self, values, **kwargs)",
                            "_update_inplace(self, result, **kwargs)",
                            "is_(self, other) -> bool",
                            "_reset_identity(self)",
                            "_cleanup(self)",
                            "_engine(self)",
                            "__len__(self) -> int",
                            "__array__(self, dtype=None) -> np.ndarray",
                            "__array_wrap__(self, result, context=None)",
                            "dtype(self)",
                            "ravel(self, order='C')",
                            "view(self, cls=None)",
                            "astype(self, dtype, copy=True)",
                            "take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
                            "_assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan)",
                            "repeat(self, repeats, axis=None)",
                            "copy(self, name=None, deep=False, dtype=None, names=None)",
                            "__copy__(self, **kwargs)",
                            "__deepcopy__(self, memo=None)",
                            "__repr__(self) -> str_t",
                            "_format_space(self) -> str_t",
                            "_formatter_func(self)",
                            "_format_data(self, name=None) -> str_t",
                            "_format_attrs(self)",
                            "_mpl_repr(self)",
                            "format(self, name: bool=False, formatter=None, **kwargs)",
                            "_format_with_header(self, header, na_rep='NaN', **kwargs)",
                            "to_native_types(self, slicer=None, **kwargs)",
                            "_format_native_types(self, na_rep='', quoting=None, **kwargs)",
                            "_summary(self, name=None) -> str_t",
                            "to_flat_index(self)",
                            "to_series(self, index=None, name=None)",
                            "to_frame(self, index: bool=True, name=None)",
                            "name(self)",
                            "name(self, value)",
                            "_validate_names(self, name=None, names=None, deep: bool=False)",
                            "_get_names(self)",
                            "_set_names(self, values, level=None)",
                            "set_names(self, names, level=None, inplace: bool=False)",
                            "rename(self, name, inplace=False)",
                            "nlevels(self) -> int",
                            "_sort_levels_monotonic(self)",
                            "_validate_index_level(self, level)",
                            "_get_level_number(self, level) -> int",
                            "sortlevel(self, level=None, ascending=True, sort_remaining=None)",
                            "_get_level_values(self, level)",
                            "droplevel(self, level=0)",
                            "_get_grouper_for_level(self, mapper, level=None)",
                            "is_monotonic(self) -> bool",
                            "is_monotonic_increasing(self) -> bool",
                            "is_monotonic_decreasing(self) -> bool",
                            "_is_strictly_monotonic_increasing(self) -> bool",
                            "_is_strictly_monotonic_decreasing(self) -> bool",
                            "is_unique(self) -> bool",
                            "has_duplicates(self) -> bool",
                            "is_boolean(self) -> bool",
                            "is_integer(self) -> bool",
                            "is_floating(self) -> bool",
                            "is_numeric(self) -> bool",
                            "is_object(self) -> bool",
                            "is_categorical(self) -> bool",
                            "is_interval(self) -> bool",
                            "is_mixed(self) -> bool",
                            "holds_integer(self) -> bool",
                            "inferred_type(self) -> str_t",
                            "is_all_dates(self) -> bool",
                            "__reduce__(self)",
                            "_isnan(self)",
                            "_nan_idxs(self)",
                            "hasnans(self) -> bool",
                            "isna(self)",
                            "notna(self)",
                            "fillna(self, value=None, downcast=None)",
                            "dropna(self, how='any')",
                            "unique(self, level=None)",
                            "drop_duplicates(self, keep='first')",
                            "duplicated(self, keep='first')",
                            "_get_unique_index(self, dropna: bool=False)",
                            "__add__(self, other)",
                            "__radd__(self, other)",
                            "__iadd__(self, other)",
                            "__sub__(self, other)",
                            "__rsub__(self, other)",
                            "__and__(self, other)",
                            "__or__(self, other)",
                            "__xor__(self, other)",
                            "__nonzero__(self)",
                            "_get_reconciled_name_object(self, other)",
                            "_union_incompatible_dtypes(self, other, sort)",
                            "_is_compatible_with_other(self, other) -> bool",
                            "_validate_sort_keyword(self, sort)",
                            "union(self, other, sort=None)",
                            "_union(self, other, sort)",
                            "_wrap_setop_result(self, other, result)",
                            "intersection(self, other, sort=False)",
                            "difference(self, other, sort=None)",
                            "symmetric_difference(self, other, result_name=None, sort=None)",
                            "_assert_can_do_setop(self, other)",
                            "_convert_can_do_setop(self, other)",
                            "get_loc(self, key, method=None, tolerance=None)",
                            "get_indexer(self, target, method=None, limit=None, tolerance=None) -> np.ndarray",
                            "_convert_tolerance(self, tolerance, target)",
                            "_get_fill_indexer(self, target: 'Index', method: str_t, limit=None, tolerance=None) -> np.ndarray",
                            "_get_fill_indexer_searchsorted(self, target: 'Index', method: str_t, limit=None) -> np.ndarray",
                            "_get_nearest_indexer(self, target: 'Index', limit, tolerance) -> np.ndarray",
                            "_filter_indexer_tolerance(self, target: 'Index', indexer: np.ndarray, tolerance) -> np.ndarray",
                            "_get_partial_string_timestamp_match_key(self, key)",
                            "_convert_scalar_indexer(self, key, kind: str_t)",
                            "_validate_positional_slice(self, key: slice)",
                            "_convert_slice_indexer(self, key: slice, kind: str_t)",
                            "_convert_listlike_indexer(self, keyarr)",
                            "_convert_arr_indexer(self, keyarr)",
                            "_convert_index_indexer(self, keyarr)",
                            "_convert_list_indexer(self, keyarr)",
                            "_invalid_indexer(self, form: str_t, key)",
                            "_can_reindex(self, indexer)",
                            "reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
                            "_reindex_non_unique(self, target)",
                            "join(self, other, how='left', level=None, return_indexers=False, sort=False)",
                            "_join_multi(self, other, how, return_indexers=True)",
                            "_join_non_unique(self, other, how='left', return_indexers=False)",
                            "_join_level(self, other, level, how='left', return_indexers=False, keep_order=True)",
                            "_join_monotonic(self, other, how='left', return_indexers=False)",
                            "_wrap_joined_index(self, joined, other)",
                            "values(self) -> np.ndarray",
                            "array(self) -> ExtensionArray",
                            "_values(self) -> Union[ExtensionArray, np.ndarray]",
                            "_internal_get_values(self) -> np.ndarray",
                            "memory_usage(self, deep: bool=False) -> int",
                            "where(self, cond, other=None)",
                            "_scalar_data_error(cls, data)",
                            "_string_data_error(cls, data)",
                            "_coerce_scalar_to_index(self, item)",
                            "_to_safe_for_reshape(self)",
                            "_convert_for_op(self, value)",
                            "_assert_can_do_op(self, value)",
                            "_has_complex_internals(self) -> bool",
                            "_is_memory_usage_qualified(self) -> bool",
                            "is_type_compatible(self, kind) -> bool",
                            "__contains__(self, key: Any) -> bool",
                            "__hash__(self)",
                            "__setitem__(self, key, value)",
                            "__getitem__(self, key)",
                            "_can_hold_identifiers_and_holds_name(self, name) -> bool",
                            "append(self, other)",
                            "_concat(self, to_concat, name)",
                            "_concat_same_dtype(self, to_concat, name)",
                            "putmask(self, mask, value)",
                            "equals(self, other) -> bool",
                            "identical(self, other) -> bool",
                            "asof(self, label)",
                            "asof_locs(self, where, mask)",
                            "sort_values(self, return_indexer: bool=False, ascending: bool=True)",
                            "sort(self, *args, **kwargs)",
                            "shift(self, periods=1, freq=None)",
                            "argsort(self, *args, **kwargs) -> np.ndarray",
                            "get_value(self, series: 'Series', key)",
                            "_should_fallback_to_positional(self) -> bool",
                            "_get_values_for_loc(self, series: 'Series', loc, key)",
                            "set_value(self, arr, key, value)",
                            "get_indexer_non_unique(self, target)",
                            "get_indexer_for(self, target, **kwargs)",
                            "_maybe_promote(self, other)",
                            "groupby(self, values) -> PrettyDict[Hashable, np.ndarray]",
                            "map(self, mapper, na_action=None)",
                            "isin(self, values, level=None)",
                            "_get_string_slice(self, key: str_t, use_lhs: bool=True, use_rhs: bool=True)",
                            "slice_indexer(self, start=None, end=None, step=None, kind=None)",
                            "_maybe_cast_indexer(self, key)",
                            "_validate_indexer(self, form: str_t, key, kind: str_t)",
                            "_maybe_cast_slice_bound(self, label, side: str_t, kind)",
                            "_searchsorted_monotonic(self, label, side='left')",
                            "get_slice_bound(self, label, side: str_t, kind) -> int",
                            "slice_locs(self, start=None, end=None, step=None, kind=None)",
                            "delete(self, loc)",
                            "insert(self, loc: int, item)",
                            "drop(self, labels, errors: str_t='raise')",
                            "_add_comparison_methods(cls)",
                            "_add_numeric_methods_add_sub_disabled(cls)",
                            "_add_numeric_methods_disabled(cls)",
                            "_add_numeric_methods_binary(cls)",
                            "_add_numeric_methods_unary(cls)",
                            "_add_numeric_methods(cls)",
                            "_add_logical_methods(cls)",
                            "_add_logical_methods_disabled(cls)",
                            "shape(self)",
                            "is_int(v)",
                            "_get_leaf_sorter(labels)",
                            "_make_evaluate_unary(op, opstr)",
                            "_make_logical_function(name, desc, f)",
                            "_evaluate_numeric_unary(self)",
                            "logical_func(self, *args, **kwargs)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'d'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'d'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'d'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'d'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'d'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'d'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['A'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "1"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['A'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "1"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'d'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'d'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['A'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "1"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'C'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['A'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "1"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'C'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'d'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'d'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'d'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'d'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'d'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'d'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['A'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "1"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['A'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "1"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'d'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'d'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['A'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "1"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'C'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['A'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "1"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'C'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['A'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['c', 'a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['c', 'a', 'b'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "4"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['a', 'b', 'c', 'd'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['a', 'b', 'c', 'd'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "4"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['a', 'b', 'c', 'd'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['a', 'b', 'c', 'd'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "4"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['a', 'b', 'c', 'd'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['a', 'b', 'c', 'd'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "4"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['a', 'b', 'c', 'd'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['a', 'b', 'c', 'd'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['A', 'B', 'C', 'D'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "4"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['A', 'B', 'C', 'D'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['A', 'B', 'C', 'D'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index(['A', 'B', 'C', 'D'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "4"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index(['A', 'B', 'C', 'D'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index(['A', 'B', 'C', 'D'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'string'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index([1, 2.0], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index([1, 2.0], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index([1, 2.0], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'mixed-integer-float'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "str_t": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kind": {
                                    "variable_value": "'loc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "Index([1, 2.0], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Index([1, 2.0], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._invalid_indexer": {
                                    "variable_value": "<bound method Index._invalid_indexer of Index([1, 2.0], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inferred_type": {
                                    "variable_value": "'mixed-integer-float'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _make_comparison_op(op, cls):\n    def cmp_method(self, other):\n        if isinstance(other, (np.ndarray, Index, ABCSeries, ExtensionArray)):\n            if other.ndim > 0 and len(self) != len(other):\n                raise ValueError(\"Lengths must match to compare\")\n\n        if is_object_dtype(self) and isinstance(other, ABCCategorical):\n            left = type(other)(self._values, dtype=other.dtype)\n            return op(left, other)\n        elif is_object_dtype(self) and isinstance(other, ExtensionArray):\n            # e.g. PeriodArray\n            with np.errstate(all=\"ignore\"):\n                result = op(self.values, other)\n\n        elif is_object_dtype(self) and not isinstance(self, ABCMultiIndex):\n            # don't pass MultiIndex\n            with np.errstate(all=\"ignore\"):\n                result = ops.comp_method_OBJECT_ARRAY(op, self.values, other)\n\n        else:\n            with np.errstate(all=\"ignore\"):\n                result = op(self.values, np.asarray(other))\n\n        if is_bool_dtype(result):\n            return result\n        return ops.invalid_comparison(self, other, op)\n\n    name = f\"__{op.__name__}__\"\n    return set_function_name(cmp_method, name, cls)",
                "def _make_arithmetic_op(op, cls):\n    def index_arithmetic_method(self, other):\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCTimedeltaIndex)):\n            return NotImplemented\n\n        from pandas import Series\n\n        result = op(Series(self), other)\n        if isinstance(result, tuple):\n            return (Index(result[0]), Index(result[1]))\n        return Index(result)\n\n    name = f\"__{op.__name__}__\"\n    # TODO: docstring?\n    return set_function_name(index_arithmetic_method, name, cls)",
                "def _new_Index(cls, d):\n    \"\"\"\n    This is called upon unpickling, rather than the default which doesn't\n    have arguments and breaks __new__.\n    \"\"\"\n    # required for backward compat, because PI can't be instantiated with\n    # ordinals through __new__ GH #13277\n    if issubclass(cls, ABCPeriodIndex):\n        from pandas.core.indexes.period import _new_PeriodIndex\n\n        return _new_PeriodIndex(cls, **d)\n\n    if issubclass(cls, ABCMultiIndex):\n        if \"labels\" in d and \"codes\" not in d:\n            # GH#23752 \"labels\" kwarg has been replaced with \"codes\"\n            d[\"codes\"] = d.pop(\"labels\")\n\n    return cls.__new__(cls, **d)",
                "def ensure_index_from_sequences(sequences, names=None):\n    \"\"\"\n    Construct an index from sequences of data.\n\n    A single sequence returns an Index. Many sequences returns a\n    MultiIndex.\n\n    Parameters\n    ----------\n    sequences : sequence of sequences\n    names : sequence of str\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    Examples\n    --------\n    >>> ensure_index_from_sequences([[1, 2, 3]], names=['name'])\n    Int64Index([1, 2, 3], dtype='int64', name='name')\n\n    >>> ensure_index_from_sequences([['a', 'a'], ['a', 'b']],\n                                    names=['L1', 'L2'])\n    MultiIndex([('a', 'a'),\n                ('a', 'b')],\n               names=['L1', 'L2'])\n\n    See Also\n    --------\n    ensure_index\n    \"\"\"\n    from pandas.core.indexes.multi import MultiIndex\n\n    if len(sequences) == 1:\n        if names is not None:\n            names = names[0]\n        return Index(sequences[0], name=names)\n    else:\n        return MultiIndex.from_arrays(sequences, names=names)",
                "def ensure_index(index_like, copy=False):\n    \"\"\"\n    Ensure that we have an index from some index-like object.\n\n    Parameters\n    ----------\n    index : sequence\n        An Index or other sequence\n    copy : bool\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    Examples\n    --------\n    >>> ensure_index(['a', 'b'])\n    Index(['a', 'b'], dtype='object')\n\n    >>> ensure_index([('a', 'a'),  ('b', 'c')])\n    Index([('a', 'a'), ('b', 'c')], dtype='object')\n\n    >>> ensure_index([['a', 'a'], ['b', 'c']])\n    MultiIndex([('a', 'b'),\n                ('a', 'c')],\n               dtype='object')\n               )\n\n    See Also\n    --------\n    ensure_index_from_sequences\n    \"\"\"\n    if isinstance(index_like, Index):\n        if copy:\n            index_like = index_like.copy()\n        return index_like\n    if hasattr(index_like, \"name\"):\n        return Index(index_like, name=index_like.name, copy=copy)\n\n    if is_iterator(index_like):\n        index_like = list(index_like)\n\n    # must check for exactly list here because of strict type\n    # check in clean_index_list\n    if isinstance(index_like, list):\n        if type(index_like) != list:\n            index_like = list(index_like)\n\n        converted, all_arrays = lib.clean_index_list(index_like)\n\n        if len(converted) > 0 and all_arrays:\n            from pandas.core.indexes.multi import MultiIndex\n\n            return MultiIndex.from_arrays(converted)\n        else:\n            index_like = converted\n    else:\n        # clean_index_list does the equivalent of copying\n        # so only need to do this if not list instance\n        if copy:\n            from copy import copy\n\n            index_like = copy(index_like)\n\n    return Index(index_like)",
                "def _ensure_has_len(seq):\n    \"\"\"\n    If seq is an iterator, put its values into a list.\n    \"\"\"\n    try:\n        len(seq)\n    except TypeError:\n        return list(seq)\n    else:\n        return seq",
                "def _trim_front(strings):\n    \"\"\"\n    Trims zeros and decimal points.\n    \"\"\"\n    trimmed = strings\n    while len(strings) > 0 and all(x[0] == \" \" for x in trimmed):\n        trimmed = [x[1:] for x in trimmed]\n    return trimmed",
                "def _validate_join_method(method):\n    if method not in [\"left\", \"right\", \"inner\", \"outer\"]:\n        raise ValueError(f\"do not recognize join method {method}\")",
                "def default_index(n):\n    from pandas.core.indexes.range import RangeIndex\n\n    return RangeIndex(0, n, name=None)",
                "def maybe_extract_name(name, obj, cls) -> Optional[Hashable]:\n    \"\"\"\n    If no name is passed, then extract it from data, validating hashability.\n    \"\"\"\n    if name is None and isinstance(obj, (Index, ABCSeries)):\n        # Note we don't just check for \"name\" attribute since that would\n        #  pick up e.g. dtype.name\n        name = obj.name\n\n    # GH#29069\n    if not is_hashable(name):\n        raise TypeError(f\"{cls.__name__}.name must be a hashable type\")\n\n    return name",
                "def _maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool) -> np.ndarray:\n    \"\"\"\n    If a dtype is passed, cast to the closest matching dtype that is supported\n    by Index.\n\n    Parameters\n    ----------\n    data : np.ndarray\n    dtype : np.dtype\n    copy : bool\n\n    Returns\n    -------\n    np.ndarray\n    \"\"\"\n    # we need to avoid having numpy coerce\n    # things that look like ints/floats to ints unless\n    # they are actually ints, e.g. '0' and 0.0\n    # should not be coerced\n    # GH 11836\n    if is_integer_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred == \"integer\":\n            data = maybe_cast_to_integer_array(data, dtype, copy=copy)\n        elif inferred in [\"floating\", \"mixed-integer-float\"]:\n            if isna(data).any():\n                raise ValueError(\"cannot convert float NaN to integer\")\n\n            if inferred == \"mixed-integer-float\":\n                data = maybe_cast_to_integer_array(data, dtype)\n\n            # If we are actually all equal to integers,\n            # then coerce to integer.\n            try:\n                data = _try_convert_to_int_array(data, copy, dtype)\n            except ValueError:\n                data = np.array(data, dtype=np.float64, copy=copy)\n\n        elif inferred == \"string\":\n            pass\n        else:\n            data = data.astype(dtype)\n    elif is_float_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred == \"string\":\n            pass\n        else:\n            data = data.astype(dtype)\n    else:\n        data = np.array(data, dtype=dtype, copy=copy)\n\n    return data",
                "def _maybe_cast_data_without_dtype(subarr):\n    \"\"\"\n    If we have an arraylike input but no passed dtype, try to infer\n    a supported dtype.\n\n    Parameters\n    ----------\n    subarr : np.ndarray, Index, or Series\n\n    Returns\n    -------\n    converted : np.ndarray or ExtensionArray\n    dtype : np.dtype or ExtensionDtype\n    \"\"\"\n    # Runtime import needed bc IntervalArray imports Index\n    from pandas.core.arrays import (\n        IntervalArray,\n        PeriodArray,\n        DatetimeArray,\n        TimedeltaArray,\n    )\n\n    inferred = lib.infer_dtype(subarr, skipna=False)\n\n    if inferred == \"integer\":\n        try:\n            data = _try_convert_to_int_array(subarr, False, None)\n            return data, data.dtype\n        except ValueError:\n            pass\n\n        return subarr, object\n\n    elif inferred in [\"floating\", \"mixed-integer-float\", \"integer-na\"]:\n        # TODO: Returns IntegerArray for integer-na case in the future\n        return subarr, np.float64\n\n    elif inferred == \"interval\":\n        try:\n            data = IntervalArray._from_sequence(subarr, copy=False)\n            return data, data.dtype\n        except ValueError:\n            # GH27172: mixed closed Intervals --> object dtype\n            pass\n    elif inferred == \"boolean\":\n        # don't support boolean explicitly ATM\n        pass\n    elif inferred != \"string\":\n        if inferred.startswith(\"datetime\"):\n            try:\n                data = DatetimeArray._from_sequence(subarr, copy=False)\n                return data, data.dtype\n            except (ValueError, OutOfBoundsDatetime):\n                # GH 27011\n                # If we have mixed timezones, just send it\n                # down the base constructor\n                pass\n\n        elif inferred.startswith(\"timedelta\"):\n            data = TimedeltaArray._from_sequence(subarr, copy=False)\n            return data, data.dtype\n        elif inferred == \"period\":\n            try:\n                data = PeriodArray._from_sequence(subarr)\n                return data, data.dtype\n            except IncompatibleFrequency:\n                pass\n\n    return subarr, subarr.dtype",
                "def _try_convert_to_int_array(\n    data: np.ndarray, copy: bool, dtype: np.dtype\n) -> np.ndarray:\n    \"\"\"\n    Attempt to convert an array of data into an integer array.\n\n    Parameters\n    ----------\n    data : The data to convert.\n    copy : bool\n        Whether to copy the data or not.\n    dtype : np.dtype\n\n    Returns\n    -------\n    int_array : data converted to either an ndarray[int64] or ndarray[uint64]\n\n    Raises\n    ------\n    ValueError if the conversion was not successful.\n    \"\"\"\n    if not is_unsigned_integer_dtype(dtype):\n        # skip int64 conversion attempt if uint-like dtype is passed, as\n        # this could return Int64Index when UInt64Index is what's desired\n        try:\n            res = data.astype(\"i8\", copy=False)\n            if (res == data).all():\n                return res  # TODO: might still need to copy\n        except (OverflowError, TypeError, ValueError):\n            pass\n\n    # Conversion to int64 failed (possibly due to overflow) or was skipped,\n    # so let's try now with uint64.\n    try:\n        res = data.astype(\"u8\", copy=False)\n        if (res == data).all():\n            return res  # TODO: might still need to copy\n    except (OverflowError, TypeError, ValueError):\n        pass\n\n    raise ValueError",
                "def _maybe_asobject(dtype, klass, data, copy: bool, name: Label, **kwargs):\n    \"\"\"\n    If an object dtype was specified, create the non-object Index\n    and then convert it to object.\n\n    Parameters\n    ----------\n    dtype : np.dtype, ExtensionDtype, str\n    klass : Index subclass\n    data : list-like\n    copy : bool\n    name : hashable\n    **kwargs\n\n    Returns\n    -------\n    Index\n\n    Notes\n    -----\n    We assume that calling .astype(object) on this klass will make a copy.\n    \"\"\"\n\n    # GH#23524 passing `dtype=object` to DatetimeIndex is invalid,\n    #  will raise in the where `data` is already tz-aware.  So\n    #  we leave it out of this step and cast to object-dtype after\n    #  the DatetimeIndex construction.\n\n    if is_dtype_equal(_o_dtype, dtype):\n        # Note we can pass copy=False because the .astype below\n        #  will always make a copy\n        index = klass(data, copy=False, name=name, **kwargs)\n        return index.astype(object)\n\n    return klass(data, dtype=dtype, copy=copy, name=name, **kwargs)",
                "def cmp_method(self, other):\n    if isinstance(other, (np.ndarray, Index, ABCSeries, ExtensionArray)):\n        if other.ndim > 0 and len(self) != len(other):\n            raise ValueError(\"Lengths must match to compare\")\n\n    if is_object_dtype(self) and isinstance(other, ABCCategorical):\n        left = type(other)(self._values, dtype=other.dtype)\n        return op(left, other)\n    elif is_object_dtype(self) and isinstance(other, ExtensionArray):\n        # e.g. PeriodArray\n        with np.errstate(all=\"ignore\"):\n            result = op(self.values, other)\n\n    elif is_object_dtype(self) and not isinstance(self, ABCMultiIndex):\n        # don't pass MultiIndex\n        with np.errstate(all=\"ignore\"):\n            result = ops.comp_method_OBJECT_ARRAY(op, self.values, other)\n\n    else:\n        with np.errstate(all=\"ignore\"):\n            result = op(self.values, np.asarray(other))\n\n    if is_bool_dtype(result):\n        return result\n    return ops.invalid_comparison(self, other, op)",
                "def index_arithmetic_method(self, other):\n    if isinstance(other, (ABCSeries, ABCDataFrame, ABCTimedeltaIndex)):\n        return NotImplemented\n\n    from pandas import Series\n\n    result = op(Series(self), other)\n    if isinstance(result, tuple):\n        return (Index(result[0]), Index(result[1]))\n    return Index(result)",
                "def _left_indexer_unique(self, left, right):\n    return libjoin.left_join_indexer_unique(left, right)",
                "def _left_indexer(self, left, right):\n    return libjoin.left_join_indexer(left, right)",
                "def _inner_indexer(self, left, right):\n    return libjoin.inner_join_indexer(left, right)",
                "def _outer_indexer(self, left, right):\n    return libjoin.outer_join_indexer(left, right)",
                "def __new__(\n    cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs,\n) -> \"Index\":\n\n    from pandas.core.indexes.range import RangeIndex\n\n    name = maybe_extract_name(name, data, cls)\n\n    if isinstance(data, ABCPandasArray):\n        # ensure users don't accidentally put a PandasArray in an index.\n        data = data.to_numpy()\n\n    # range\n    if isinstance(data, RangeIndex):\n        return RangeIndex(start=data, copy=copy, dtype=dtype, name=name)\n    elif isinstance(data, range):\n        return RangeIndex.from_range(data, dtype=dtype, name=name)\n\n    # categorical\n    elif is_categorical_dtype(data) or is_categorical_dtype(dtype):\n        # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n        from pandas.core.indexes.category import CategoricalIndex\n\n        return CategoricalIndex(data, dtype=dtype, copy=copy, name=name, **kwargs)\n\n    # interval\n    elif is_interval_dtype(data) or is_interval_dtype(dtype):\n        # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n        from pandas.core.indexes.interval import IntervalIndex\n\n        return _maybe_asobject(dtype, IntervalIndex, data, copy, name, **kwargs)\n\n    elif (\n        is_datetime64_any_dtype(data)\n        or is_datetime64_any_dtype(dtype)\n        or \"tz\" in kwargs\n    ):\n        # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n        from pandas import DatetimeIndex\n\n        return _maybe_asobject(dtype, DatetimeIndex, data, copy, name, **kwargs)\n\n    elif is_timedelta64_dtype(data) or is_timedelta64_dtype(dtype):\n        # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n        from pandas import TimedeltaIndex\n\n        return _maybe_asobject(dtype, TimedeltaIndex, data, copy, name, **kwargs)\n\n    elif is_period_dtype(data) or is_period_dtype(dtype):\n        # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n        from pandas import PeriodIndex\n\n        return _maybe_asobject(dtype, PeriodIndex, data, copy, name, **kwargs)\n\n    # extension dtype\n    elif is_extension_array_dtype(data) or is_extension_array_dtype(dtype):\n        if not (dtype is None or is_object_dtype(dtype)):\n            # coerce to the provided dtype\n            ea_cls = dtype.construct_array_type()\n            data = ea_cls._from_sequence(data, dtype=dtype, copy=False)\n        else:\n            data = np.asarray(data, dtype=object)\n\n        # coerce to the object dtype\n        data = data.astype(object)\n        return Index(data, dtype=object, copy=copy, name=name, **kwargs)\n\n    # index-like\n    elif isinstance(data, (np.ndarray, Index, ABCSeries)):\n        # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n        from pandas.core.indexes.numeric import (\n            Float64Index,\n            Int64Index,\n            UInt64Index,\n        )\n\n        if dtype is not None:\n            # we need to avoid having numpy coerce\n            # things that look like ints/floats to ints unless\n            # they are actually ints, e.g. '0' and 0.0\n            # should not be coerced\n            # GH 11836\n            data = _maybe_cast_with_dtype(data, dtype, copy)\n            dtype = data.dtype  # TODO: maybe not for object?\n\n        # maybe coerce to a sub-class\n        if is_signed_integer_dtype(data.dtype):\n            return Int64Index(data, copy=copy, dtype=dtype, name=name)\n        elif is_unsigned_integer_dtype(data.dtype):\n            return UInt64Index(data, copy=copy, dtype=dtype, name=name)\n        elif is_float_dtype(data.dtype):\n            return Float64Index(data, copy=copy, dtype=dtype, name=name)\n        elif issubclass(data.dtype.type, np.bool) or is_bool_dtype(data):\n            subarr = data.astype(\"object\")\n        else:\n            subarr = com.asarray_tuplesafe(data, dtype=object)\n\n        # asarray_tuplesafe does not always copy underlying data,\n        # so need to make sure that this happens\n        if copy:\n            subarr = subarr.copy()\n\n        if dtype is None:\n            new_data, new_dtype = _maybe_cast_data_without_dtype(subarr)\n            if new_dtype is not None:\n                return cls(\n                    new_data, dtype=new_dtype, copy=False, name=name, **kwargs\n                )\n\n        if kwargs:\n            raise TypeError(f\"Unexpected keyword arguments {repr(set(kwargs))}\")\n        if subarr.ndim > 1:\n            # GH#13601, GH#20285, GH#27125\n            raise ValueError(\"Index data must be 1-dimensional\")\n        return cls._simple_new(subarr, name)\n\n    elif hasattr(data, \"__array__\"):\n        return Index(np.asarray(data), dtype=dtype, copy=copy, name=name, **kwargs)\n    elif data is None or is_scalar(data):\n        raise cls._scalar_data_error(data)\n    else:\n        if tupleize_cols and is_list_like(data):\n            # GH21470: convert iterable to list before determining if empty\n            if is_iterator(data):\n                data = list(data)\n\n            if data and all(isinstance(e, tuple) for e in data):\n                # we must be all tuples, otherwise don't construct\n                # 10697\n                from pandas.core.indexes.multi import MultiIndex\n\n                return MultiIndex.from_tuples(\n                    data, names=name or kwargs.get(\"names\")\n                )\n        # other iterable of some kind\n        subarr = com.asarray_tuplesafe(data, dtype=object)\n        return Index(subarr, dtype=dtype, copy=copy, name=name, **kwargs)",
                "@property\ndef asi8(self):\n    \"\"\"\n    Integer representation of the values.\n\n    Returns\n    -------\n    ndarray\n        An ndarray with int64 dtype.\n    \"\"\"\n    return None",
                "@classmethod\ndef _simple_new(cls, values, name=None, dtype=None):\n    \"\"\"\n    We require that we have a dtype compat for the values. If we are passed\n    a non-dtype compat, then coerce using the constructor.\n\n    Must be careful not to recurse.\n    \"\"\"\n    assert isinstance(values, np.ndarray), type(values)\n\n    result = object.__new__(cls)\n    result._data = values\n    # _index_data is a (temporary?) fix to ensure that the direct data\n    # manipulation we do in `_libs/reduction.pyx` continues to work.\n    # We need access to the actual ndarray, since we're messing with\n    # data buffers and strides. We don't re-use `_ndarray_values`, since\n    # we actually set this value too.\n    result._index_data = values\n    result._name = name\n\n    return result._reset_identity()",
                "@cache_readonly\ndef _constructor(self):\n    return type(self)",
                "def _get_attributes_dict(self):\n    \"\"\"\n    Return an attributes dict for my class.\n    \"\"\"\n    return {k: getattr(self, k, None) for k in self._attributes}",
                "def _shallow_copy(self, values=None, **kwargs):\n    \"\"\"\n    Create a new Index with the same class as the caller, don't copy the\n    data, use the same object attributes with passed in attributes taking\n    precedence.\n\n    *this is an internal non-public method*\n\n    Parameters\n    ----------\n    values : the values to create the new Index, optional\n    kwargs : updates the default attributes for this Index\n    \"\"\"\n    if values is None:\n        values = self.values\n\n    attributes = self._get_attributes_dict()\n\n    attributes.update(kwargs)\n\n    return self._simple_new(values, **attributes)",
                "def _shallow_copy_with_infer(self, values, **kwargs):\n    \"\"\"\n    Create a new Index inferring the class with passed value, don't copy\n    the data, use the same object attributes with passed in attributes\n    taking precedence.\n\n    *this is an internal non-public method*\n\n    Parameters\n    ----------\n    values : the values to create the new Index, optional\n    kwargs : updates the default attributes for this Index\n    \"\"\"\n    attributes = self._get_attributes_dict()\n    attributes.update(kwargs)\n    attributes[\"copy\"] = False\n    if not len(values) and \"dtype\" not in kwargs:\n        # TODO: what if hasattr(values, \"dtype\")?\n        attributes[\"dtype\"] = self.dtype\n    if self._infer_as_myclass:\n        try:\n            return self._constructor(values, **attributes)\n        except (TypeError, ValueError):\n            pass\n    return Index(values, **attributes)",
                "def _update_inplace(self, result, **kwargs):\n    # guard when called from IndexOpsMixin\n    raise TypeError(\"Index can't be updated inplace\")",
                "def is_(self, other) -> bool:\n    \"\"\"\n    More flexible, faster check like ``is`` but that works through views.\n\n    Note: this is *not* the same as ``Index.identical()``, which checks\n    that metadata is also the same.\n\n    Parameters\n    ----------\n    other : object\n        other object to compare against.\n\n    Returns\n    -------\n    True if both have same underlying data, False otherwise : bool\n    \"\"\"\n    # use something other than None to be clearer\n    return self._id is getattr(other, \"_id\", Ellipsis) and self._id is not None",
                "def _reset_identity(self):\n    \"\"\"\n    Initializes or resets ``_id`` attribute with new object.\n    \"\"\"\n    self._id = _Identity()\n    return self",
                "def _cleanup(self):\n    self._engine.clear_mapping()",
                "@cache_readonly\ndef _engine(self):\n    # property, for now, slow to look up\n\n    # to avoid a reference cycle, bind `_ndarray_values` to a local variable, so\n    # `self` is not passed into the lambda.\n    _ndarray_values = self._ndarray_values\n    return self._engine_type(lambda: _ndarray_values, len(self))",
                "def __len__(self) -> int:\n    \"\"\"\n    Return the length of the Index.\n    \"\"\"\n    return len(self._data)",
                "def __array__(self, dtype=None) -> np.ndarray:\n    \"\"\"\n    The array interface, return my values.\n    \"\"\"\n    return np.asarray(self._data, dtype=dtype)",
                "def __array_wrap__(self, result, context=None):\n    \"\"\"\n    Gets called after a ufunc.\n    \"\"\"\n    result = lib.item_from_zerodim(result)\n    if is_bool_dtype(result) or lib.is_scalar(result) or np.ndim(result) > 1:\n        return result\n\n    attrs = self._get_attributes_dict()\n    return Index(result, **attrs)",
                "@cache_readonly\ndef dtype(self):\n    \"\"\"\n    Return the dtype object of the underlying data.\n    \"\"\"\n    return self._data.dtype",
                "def ravel(self, order=\"C\"):\n    \"\"\"\n    Return an ndarray of the flattened values of the underlying data.\n\n    Returns\n    -------\n    numpy.ndarray\n        Flattened array.\n\n    See Also\n    --------\n    numpy.ndarray.ravel\n    \"\"\"\n    return self._ndarray_values.ravel(order=order)",
                "def view(self, cls=None):\n\n    # we need to see if we are subclassing an\n    # index type here\n    if cls is not None and not hasattr(cls, \"_typ\"):\n        result = self._data.view(cls)\n    else:\n        result = self._shallow_copy()\n    if isinstance(result, Index):\n        result._id = self._id\n    return result",
                "def astype(self, dtype, copy=True):\n    \"\"\"\n    Create an Index with values cast to dtypes. The class of a new Index\n    is determined by dtype. When conversion is impossible, a ValueError\n    exception is raised.\n\n    Parameters\n    ----------\n    dtype : numpy dtype or pandas type\n        Note that any signed integer `dtype` is treated as ``'int64'``,\n        and any unsigned integer `dtype` is treated as ``'uint64'``,\n        regardless of the size.\n    copy : bool, default True\n        By default, astype always returns a newly allocated object.\n        If copy is set to False and internal requirements on dtype are\n        satisfied, the original data is used to create a new Index\n        or the original Index is returned.\n\n    Returns\n    -------\n    Index\n        Index with values cast to specified dtype.\n    \"\"\"\n    if is_dtype_equal(self.dtype, dtype):\n        return self.copy() if copy else self\n\n    elif is_categorical_dtype(dtype):\n        from pandas.core.indexes.category import CategoricalIndex\n\n        return CategoricalIndex(self.values, name=self.name, dtype=dtype, copy=copy)\n\n    elif is_extension_array_dtype(dtype):\n        return Index(np.asarray(self), dtype=dtype, copy=copy)\n\n    try:\n        casted = self.values.astype(dtype, copy=copy)\n    except (TypeError, ValueError):\n        raise TypeError(f\"Cannot cast {type(self).__name__} to dtype {dtype}\")\n    return Index(casted, name=self.name, dtype=dtype)",
                "@Appender(_index_shared_docs[\"take\"] % _index_doc_kwargs)\ndef take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n    if kwargs:\n        nv.validate_take(tuple(), kwargs)\n    indices = ensure_platform_int(indices)\n    if self._can_hold_na:\n        taken = self._assert_take_fillable(\n            self.values,\n            indices,\n            allow_fill=allow_fill,\n            fill_value=fill_value,\n            na_value=self._na_value,\n        )\n    else:\n        if allow_fill and fill_value is not None:\n            cls_name = type(self).__name__\n            raise ValueError(\n                f\"Unable to fill values because {cls_name} cannot contain NA\"\n            )\n        taken = self.values.take(indices)\n    return self._shallow_copy(taken)",
                "def _assert_take_fillable(\n    self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan\n):\n    \"\"\"\n    Internal method to handle NA filling of take.\n    \"\"\"\n    indices = ensure_platform_int(indices)\n\n    # only fill if we are passing a non-None fill_value\n    if allow_fill and fill_value is not None:\n        if (indices < -1).any():\n            raise ValueError(\n                \"When allow_fill=True and fill_value is not None, \"\n                \"all indices must be >= -1\"\n            )\n        taken = algos.take(\n            values, indices, allow_fill=allow_fill, fill_value=na_value\n        )\n    else:\n        taken = values.take(indices)\n    return taken",
                "@Appender(_index_shared_docs[\"repeat\"] % _index_doc_kwargs)\ndef repeat(self, repeats, axis=None):\n    repeats = ensure_platform_int(repeats)\n    nv.validate_repeat(tuple(), dict(axis=axis))\n    return self._shallow_copy(self._values.repeat(repeats))",
                "def copy(self, name=None, deep=False, dtype=None, names=None):\n    \"\"\"\n    Make a copy of this object.  Name and dtype sets those attributes on\n    the new object.\n\n    Parameters\n    ----------\n    name : Label\n    deep : bool, default False\n    dtype : numpy dtype or pandas type, optional\n    names : list-like, optional\n        Kept for compatibility with MultiIndex. Should not be used.\n\n    Returns\n    -------\n    Index\n\n    Notes\n    -----\n    In most cases, there should be no functional difference from using\n    ``deep``, but if ``deep`` is passed it will attempt to deepcopy.\n    \"\"\"\n    if deep:\n        new_index = self._shallow_copy(self._data.copy())\n    else:\n        new_index = self._shallow_copy()\n\n    names = self._validate_names(name=name, names=names, deep=deep)\n    new_index = new_index.set_names(names)\n\n    if dtype:\n        new_index = new_index.astype(dtype)\n    return new_index",
                "def __copy__(self, **kwargs):\n    return self.copy(**kwargs)",
                "def __deepcopy__(self, memo=None):\n    \"\"\"\n    Parameters\n    ----------\n    memo, default None\n        Standard signature. Unused\n    \"\"\"\n    return self.copy(deep=True)",
                "def __repr__(self) -> str_t:\n    \"\"\"\n    Return a string representation for this object.\n    \"\"\"\n    klass_name = type(self).__name__\n    data = self._format_data()\n    attrs = self._format_attrs()\n    space = self._format_space()\n    attrs_str = [f\"{k}={v}\" for k, v in attrs]\n    prepr = f\",{space}\".join(attrs_str)\n\n    # no data provided, just attributes\n    if data is None:\n        data = \"\"\n\n    res = f\"{klass_name}({data}{prepr})\"\n\n    return res",
                "def _format_space(self) -> str_t:\n\n    # using space here controls if the attributes\n    # are line separated or not (the default)\n\n    # max_seq_items = get_option('display.max_seq_items')\n    # if len(self) > max_seq_items:\n    #    space = \"\\n%s\" % (' ' * (len(klass) + 1))\n    return \" \"",
                "@property\ndef _formatter_func(self):\n    \"\"\"\n    Return the formatter function.\n    \"\"\"\n    return default_pprint",
                "def _format_data(self, name=None) -> str_t:\n    \"\"\"\n    Return the formatted data as a unicode string.\n    \"\"\"\n    # do we want to justify (only do so for non-objects)\n    is_justify = True\n\n    if self.inferred_type == \"string\":\n        is_justify = False\n    elif self.inferred_type == \"categorical\":\n        if is_object_dtype(self.categories):  # type: ignore\n            is_justify = False\n\n    return format_object_summary(\n        self, self._formatter_func, is_justify=is_justify, name=name\n    )",
                "def _format_attrs(self):\n    \"\"\"\n    Return a list of tuples of the (attr,formatted_value).\n    \"\"\"\n    return format_object_attrs(self)",
                "def _mpl_repr(self):\n    # how to represent ourselves to matplotlib\n    return self.values",
                "def format(self, name: bool = False, formatter=None, **kwargs):\n    \"\"\"\n    Render a string representation of the Index.\n    \"\"\"\n    header = []\n    if name:\n        header.append(\n            pprint_thing(self.name, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))\n            if self.name is not None\n            else \"\"\n        )\n\n    if formatter is not None:\n        return header + list(self.map(formatter))\n\n    return self._format_with_header(header, **kwargs)",
                "def _format_with_header(self, header, na_rep=\"NaN\", **kwargs):\n    values = self.values\n\n    from pandas.io.formats.format import format_array\n\n    if is_categorical_dtype(values.dtype):\n        values = np.array(values)\n\n    elif is_object_dtype(values.dtype):\n        values = lib.maybe_convert_objects(values, safe=1)\n\n    if is_object_dtype(values.dtype):\n        result = [pprint_thing(x, escape_chars=(\"\\t\", \"\\r\", \"\\n\")) for x in values]\n\n        # could have nans\n        mask = isna(values)\n        if mask.any():\n            result = np.array(result)\n            result[mask] = na_rep\n            result = result.tolist()\n\n    else:\n        result = _trim_front(format_array(values, None, justify=\"left\"))\n    return header + result",
                "def to_native_types(self, slicer=None, **kwargs):\n    \"\"\"\n    Format specified values of `self` and return them.\n\n    Parameters\n    ----------\n    slicer : int, array-like\n        An indexer into `self` that specifies which values\n        are used in the formatting process.\n    kwargs : dict\n        Options for specifying how the values should be formatted.\n        These options include the following:\n\n        1) na_rep : str\n            The value that serves as a placeholder for NULL values\n        2) quoting : bool or None\n            Whether or not there are quoted values in `self`\n        3) date_format : str\n            The format used to represent date-like values.\n\n    Returns\n    -------\n    numpy.ndarray\n        Formatted values.\n    \"\"\"\n    values = self\n    if slicer is not None:\n        values = values[slicer]\n    return values._format_native_types(**kwargs)",
                "def _format_native_types(self, na_rep=\"\", quoting=None, **kwargs):\n    \"\"\"\n    Actually format specific types of the index.\n    \"\"\"\n    mask = isna(self)\n    if not self.is_object() and not quoting:\n        values = np.asarray(self).astype(str)\n    else:\n        values = np.array(self, dtype=object, copy=True)\n\n    values[mask] = na_rep\n    return values",
                "def _summary(self, name=None) -> str_t:\n    \"\"\"\n    Return a summarized representation.\n\n    Parameters\n    ----------\n    name : str\n        name to use in the summary representation\n\n    Returns\n    -------\n    String with a summarized representation of the index\n    \"\"\"\n    if len(self) > 0:\n        head = self[0]\n        if hasattr(head, \"format\") and not isinstance(head, str):\n            head = head.format()\n        tail = self[-1]\n        if hasattr(tail, \"format\") and not isinstance(tail, str):\n            tail = tail.format()\n        index_summary = f\", {head} to {tail}\"\n    else:\n        index_summary = \"\"\n\n    if name is None:\n        name = type(self).__name__\n    return f\"{name}: {len(self)} entries{index_summary}\"",
                "def to_flat_index(self):\n    \"\"\"\n    Identity method.\n\n    .. versionadded:: 0.24.0\n\n    This is implemented for compatibility with subclass implementations\n    when chaining.\n\n    Returns\n    -------\n    pd.Index\n        Caller.\n\n    See Also\n    --------\n    MultiIndex.to_flat_index : Subclass implementation.\n    \"\"\"\n    return self",
                "def to_series(self, index=None, name=None):\n    \"\"\"\n    Create a Series with both index and values equal to the index keys.\n\n    Useful with map for returning an indexer based on an index.\n\n    Parameters\n    ----------\n    index : Index, optional\n        Index of resulting Series. If None, defaults to original index.\n    name : str, optional\n        Dame of resulting Series. If None, defaults to name of original\n        index.\n\n    Returns\n    -------\n    Series\n        The dtype will be based on the type of the Index values.\n    \"\"\"\n    from pandas import Series\n\n    if index is None:\n        index = self._shallow_copy()\n    if name is None:\n        name = self.name\n\n    return Series(self.values.copy(), index=index, name=name)",
                "def to_frame(self, index: bool = True, name=None):\n    \"\"\"\n    Create a DataFrame with a column containing the Index.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    index : bool, default True\n        Set the index of the returned DataFrame as the original Index.\n\n    name : object, default None\n        The passed name should substitute for the index name (if it has\n        one).\n\n    Returns\n    -------\n    DataFrame\n        DataFrame containing the original Index data.\n\n    See Also\n    --------\n    Index.to_series : Convert an Index to a Series.\n    Series.to_frame : Convert Series to DataFrame.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\n    >>> idx.to_frame()\n           animal\n    animal\n    Ant       Ant\n    Bear     Bear\n    Cow       Cow\n\n    By default, the original Index is reused. To enforce a new Index:\n\n    >>> idx.to_frame(index=False)\n        animal\n    0   Ant\n    1  Bear\n    2   Cow\n\n    To override the name of the resulting column, specify `name`:\n\n    >>> idx.to_frame(index=False, name='zoo')\n        zoo\n    0   Ant\n    1  Bear\n    2   Cow\n    \"\"\"\n    from pandas import DataFrame\n\n    if name is None:\n        name = self.name or 0\n    result = DataFrame({name: self._values.copy()})\n\n    if index:\n        result.index = self\n    return result",
                "@property\ndef name(self):\n    \"\"\"\n    Return Index or MultiIndex name.\n    \"\"\"\n    return self._name",
                "@name.setter\ndef name(self, value):\n    if self._no_setting_name:\n        # Used in MultiIndex.levels to avoid silently ignoring name updates.\n        raise RuntimeError(\n            \"Cannot set name on a level of a MultiIndex. Use \"\n            \"'MultiIndex.set_names' instead.\"\n        )\n    maybe_extract_name(value, None, type(self))\n    self._name = value",
                "def _validate_names(self, name=None, names=None, deep: bool = False):\n    \"\"\"\n    Handles the quirks of having a singular 'name' parameter for general\n    Index and plural 'names' parameter for MultiIndex.\n    \"\"\"\n    from copy import deepcopy\n\n    if names is not None and name is not None:\n        raise TypeError(\"Can only provide one of `names` and `name`\")\n    elif names is None and name is None:\n        return deepcopy(self.names) if deep else self.names\n    elif names is not None:\n        if not is_list_like(names):\n            raise TypeError(\"Must pass list-like as `names`.\")\n        return names\n    else:\n        if not is_list_like(name):\n            return [name]\n        return name",
                "def _get_names(self):\n    return FrozenList((self.name,))",
                "def _set_names(self, values, level=None):\n    \"\"\"\n    Set new names on index. Each name has to be a hashable type.\n\n    Parameters\n    ----------\n    values : str or sequence\n        name(s) to set\n    level : int, level name, or sequence of int/level names (default None)\n        If the index is a MultiIndex (hierarchical), level(s) to set (None\n        for all levels).  Otherwise level must be None\n\n    Raises\n    ------\n    TypeError if each name is not hashable.\n    \"\"\"\n    if not is_list_like(values):\n        raise ValueError(\"Names must be a list-like\")\n    if len(values) != 1:\n        raise ValueError(f\"Length of new names must be 1, got {len(values)}\")\n\n    # GH 20527\n    # All items in 'name' need to be hashable:\n    for name in values:\n        if not is_hashable(name):\n            raise TypeError(f\"{type(self).__name__}.name must be a hashable type\")\n    self._name = values[0]",
                "def set_names(self, names, level=None, inplace: bool = False):\n    \"\"\"\n    Set Index or MultiIndex name.\n\n    Able to set new names partially and by level.\n\n    Parameters\n    ----------\n    names : label or list of label\n        Name(s) to set.\n    level : int, label or list of int or label, optional\n        If the index is a MultiIndex, level(s) to set (None for all\n        levels). Otherwise level must be None.\n    inplace : bool, default False\n        Modifies the object directly, instead of creating a new Index or\n        MultiIndex.\n\n    Returns\n    -------\n    Index\n        The same type as the caller or None if inplace is True.\n\n    See Also\n    --------\n    Index.rename : Able to set new names without level.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx\n    Int64Index([1, 2, 3, 4], dtype='int64')\n    >>> idx.set_names('quarter')\n    Int64Index([1, 2, 3, 4], dtype='int64', name='quarter')\n\n    >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n    ...                                   [2018, 2019]])\n    >>> idx\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               )\n    >>> idx.set_names(['kind', 'year'], inplace=True)\n    >>> idx\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               names=['kind', 'year'])\n    >>> idx.set_names('species', level=0)\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               names=['species', 'year'])\n    \"\"\"\n    if level is not None and not isinstance(self, ABCMultiIndex):\n        raise ValueError(\"Level must be None for non-MultiIndex\")\n\n    if level is not None and not is_list_like(level) and is_list_like(names):\n        raise TypeError(\"Names must be a string when a single level is provided.\")\n\n    if not is_list_like(names) and level is None and self.nlevels > 1:\n        raise TypeError(\"Must pass list-like as `names`.\")\n\n    if not is_list_like(names):\n        names = [names]\n    if level is not None and not is_list_like(level):\n        level = [level]\n\n    if inplace:\n        idx = self\n    else:\n        idx = self._shallow_copy()\n    idx._set_names(names, level=level)\n    if not inplace:\n        return idx",
                "def rename(self, name, inplace=False):\n    \"\"\"\n    Alter Index or MultiIndex name.\n\n    Able to set new names without level. Defaults to returning new index.\n    Length of names must match number of levels in MultiIndex.\n\n    Parameters\n    ----------\n    name : label or list of labels\n        Name(s) to set.\n    inplace : bool, default False\n        Modifies the object directly, instead of creating a new Index or\n        MultiIndex.\n\n    Returns\n    -------\n    Index\n        The same type as the caller or None if inplace is True.\n\n    See Also\n    --------\n    Index.set_names : Able to set new names partially and by level.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['A', 'C', 'A', 'B'], name='score')\n    >>> idx.rename('grade')\n    Index(['A', 'C', 'A', 'B'], dtype='object', name='grade')\n\n    >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n    ...                                   [2018, 2019]],\n    ...                                   names=['kind', 'year'])\n    >>> idx\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               names=['kind', 'year'])\n    >>> idx.rename(['species', 'year'])\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               names=['species', 'year'])\n    >>> idx.rename('species')\n    Traceback (most recent call last):\n    TypeError: Must pass list-like as `names`.\n    \"\"\"\n    return self.set_names([name], inplace=inplace)",
                "@property\ndef nlevels(self) -> int:\n    \"\"\"\n    Number of levels.\n    \"\"\"\n    return 1",
                "def _sort_levels_monotonic(self):\n    \"\"\"\n    Compat with MultiIndex.\n    \"\"\"\n    return self",
                "def _validate_index_level(self, level):\n    \"\"\"\n    Validate index level.\n\n    For single-level Index getting level number is a no-op, but some\n    verification must be done like in MultiIndex.\n\n    \"\"\"\n    if isinstance(level, int):\n        if level < 0 and level != -1:\n            raise IndexError(\n                \"Too many levels: Index has only 1 level, \"\n                f\"{level} is not a valid level number\"\n            )\n        elif level > 0:\n            raise IndexError(\n                f\"Too many levels: Index has only 1 level, not {level + 1}\"\n            )\n    elif level != self.name:\n        raise KeyError(\n            f\"Requested level ({level}) does not match index name ({self.name})\"\n        )",
                "def _get_level_number(self, level) -> int:\n    self._validate_index_level(level)\n    return 0",
                "def sortlevel(self, level=None, ascending=True, sort_remaining=None):\n    \"\"\"\n    For internal compatibility with with the Index API.\n\n    Sort the Index. This is for compat with MultiIndex\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        False to sort in descending order\n\n    level, sort_remaining are compat parameters\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    return self.sort_values(return_indexer=True, ascending=ascending)",
                "def _get_level_values(self, level):\n    \"\"\"\n    Return an Index of values for requested level.\n\n    This is primarily useful to get an individual level of values from a\n    MultiIndex, but is provided on Index as well for compatibility.\n\n    Parameters\n    ----------\n    level : int or str\n        It is either the integer position or the name of the level.\n\n    Returns\n    -------\n    Index\n        Calling object, as there is only one level in the Index.\n\n    See Also\n    --------\n    MultiIndex.get_level_values : Get values for a level of a MultiIndex.\n\n    Notes\n    -----\n    For Index, level should be 0, since there are no multiple levels.\n\n    Examples\n    --------\n    >>> idx = pd.Index(list('abc'))\n    >>> idx\n    Index(['a', 'b', 'c'], dtype='object')\n\n    Get level values by supplying `level` as integer:\n\n    >>> idx.get_level_values(0)\n    Index(['a', 'b', 'c'], dtype='object')\n    \"\"\"\n    self._validate_index_level(level)\n    return self",
                "def droplevel(self, level=0):\n    \"\"\"\n    Return index with requested level(s) removed.\n\n    If resulting index has only 1 level left, the result will be\n    of Index type, not MultiIndex.\n\n    .. versionadded:: 0.23.1 (support for non-MultiIndex)\n\n    Parameters\n    ----------\n    level : int, str, or list-like, default 0\n        If a string is given, must be the name of a level\n        If list-like, elements must be names or indexes of levels.\n\n    Returns\n    -------\n    Index or MultiIndex\n    \"\"\"\n    if not isinstance(level, (tuple, list)):\n        level = [level]\n\n    levnums = sorted(self._get_level_number(lev) for lev in level)[::-1]\n\n    if len(level) == 0:\n        return self\n    if len(level) >= self.nlevels:\n        raise ValueError(\n            f\"Cannot remove {len(level)} levels from an index with {self.nlevels} \"\n            \"levels: at least one level must be left.\"\n        )\n    # The two checks above guarantee that here self is a MultiIndex\n\n    new_levels = list(self.levels)\n    new_codes = list(self.codes)\n    new_names = list(self.names)\n\n    for i in levnums:\n        new_levels.pop(i)\n        new_codes.pop(i)\n        new_names.pop(i)\n\n    if len(new_levels) == 1:\n\n        # set nan if needed\n        mask = new_codes[0] == -1\n        result = new_levels[0].take(new_codes[0])\n        if mask.any():\n            result = result.putmask(mask, np.nan)\n\n        result._name = new_names[0]\n        return result\n    else:\n        from pandas.core.indexes.multi import MultiIndex\n\n        return MultiIndex(\n            levels=new_levels,\n            codes=new_codes,\n            names=new_names,\n            verify_integrity=False,\n        )",
                "def _get_grouper_for_level(self, mapper, level=None):\n    \"\"\"\n    Get index grouper corresponding to an index level\n\n    Parameters\n    ----------\n    mapper: Group mapping function or None\n        Function mapping index values to groups\n    level : int or None\n        Index level\n\n    Returns\n    -------\n    grouper : Index\n        Index of values to group on.\n    labels : ndarray of int or None\n        Array of locations in level_index.\n    uniques : Index or None\n        Index of unique values for level.\n    \"\"\"\n    assert level is None or level == 0\n    if mapper is None:\n        grouper = self\n    else:\n        grouper = self.map(mapper)\n\n    return grouper, None, None",
                "@property\ndef is_monotonic(self) -> bool:\n    \"\"\"\n    Alias for is_monotonic_increasing.\n    \"\"\"\n    return self.is_monotonic_increasing",
                "@property\ndef is_monotonic_increasing(self) -> bool:\n    \"\"\"\n    Return if the index is monotonic increasing (only equal or\n    increasing) values.\n\n    Examples\n    --------\n    >>> Index([1, 2, 3]).is_monotonic_increasing\n    True\n    >>> Index([1, 2, 2]).is_monotonic_increasing\n    True\n    >>> Index([1, 3, 2]).is_monotonic_increasing\n    False\n    \"\"\"\n    return self._engine.is_monotonic_increasing",
                "@property\ndef is_monotonic_decreasing(self) -> bool:\n    \"\"\"\n    Return if the index is monotonic decreasing (only equal or\n    decreasing) values.\n\n    Examples\n    --------\n    >>> Index([3, 2, 1]).is_monotonic_decreasing\n    True\n    >>> Index([3, 2, 2]).is_monotonic_decreasing\n    True\n    >>> Index([3, 1, 2]).is_monotonic_decreasing\n    False\n    \"\"\"\n    return self._engine.is_monotonic_decreasing",
                "@property\ndef _is_strictly_monotonic_increasing(self) -> bool:\n    \"\"\"\n    Return if the index is strictly monotonic increasing\n    (only increasing) values.\n\n    Examples\n    --------\n    >>> Index([1, 2, 3])._is_strictly_monotonic_increasing\n    True\n    >>> Index([1, 2, 2])._is_strictly_monotonic_increasing\n    False\n    >>> Index([1, 3, 2])._is_strictly_monotonic_increasing\n    False\n    \"\"\"\n    return self.is_unique and self.is_monotonic_increasing",
                "@property\ndef _is_strictly_monotonic_decreasing(self) -> bool:\n    \"\"\"\n    Return if the index is strictly monotonic decreasing\n    (only decreasing) values.\n\n    Examples\n    --------\n    >>> Index([3, 2, 1])._is_strictly_monotonic_decreasing\n    True\n    >>> Index([3, 2, 2])._is_strictly_monotonic_decreasing\n    False\n    >>> Index([3, 1, 2])._is_strictly_monotonic_decreasing\n    False\n    \"\"\"\n    return self.is_unique and self.is_monotonic_decreasing",
                "@cache_readonly\ndef is_unique(self) -> bool:\n    \"\"\"\n    Return if the index has unique values.\n    \"\"\"\n    return self._engine.is_unique",
                "@property\ndef has_duplicates(self) -> bool:\n    \"\"\"\n    Check if the Index has duplicate values.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index has duplicate values.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1, 5, 7, 7])\n    >>> idx.has_duplicates\n    True\n\n    >>> idx = pd.Index([1, 5, 7])\n    >>> idx.has_duplicates\n    False\n\n    >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n    ...                 \"Watermelon\"]).astype(\"category\")\n    >>> idx.has_duplicates\n    True\n\n    >>> idx = pd.Index([\"Orange\", \"Apple\",\n    ...                 \"Watermelon\"]).astype(\"category\")\n    >>> idx.has_duplicates\n    False\n    \"\"\"\n    return not self.is_unique",
                "def is_boolean(self) -> bool:\n    \"\"\"\n    Check if the Index only consists of booleans.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index only consists of booleans.\n\n    See Also\n    --------\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([True, False, True])\n    >>> idx.is_boolean()\n    True\n\n    >>> idx = pd.Index([\"True\", \"False\", \"True\"])\n    >>> idx.is_boolean()\n    False\n\n    >>> idx = pd.Index([True, False, \"True\"])\n    >>> idx.is_boolean()\n    False\n    \"\"\"\n    return self.inferred_type in [\"boolean\"]",
                "def is_integer(self) -> bool:\n    \"\"\"\n    Check if the Index only consists of integers.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index only consists of integers.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx.is_integer()\n    True\n\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n    >>> idx.is_integer()\n    False\n\n    >>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n    >>> idx.is_integer()\n    False\n    \"\"\"\n    return self.inferred_type in [\"integer\"]",
                "def is_floating(self) -> bool:\n    \"\"\"\n    Check if the Index is a floating type.\n\n    The Index may consist of only floats, NaNs, or a mix of floats,\n    integers, or NaNs.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index only consists of only consists of floats, NaNs, or\n        a mix of floats, integers, or NaNs.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n    >>> idx.is_floating()\n    True\n\n    >>> idx = pd.Index([1.0, 2.0, np.nan, 4.0])\n    >>> idx.is_floating()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4, np.nan])\n    >>> idx.is_floating()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx.is_floating()\n    False\n    \"\"\"\n    return self.inferred_type in [\"floating\", \"mixed-integer-float\", \"integer-na\"]",
                "def is_numeric(self) -> bool:\n    \"\"\"\n    Check if the Index only consists of numeric data.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index only consists of numeric data.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n    >>> idx.is_numeric()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4.0])\n    >>> idx.is_numeric()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx.is_numeric()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4.0, np.nan])\n    >>> idx.is_numeric()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4.0, np.nan, \"Apple\"])\n    >>> idx.is_numeric()\n    False\n    \"\"\"\n    return self.inferred_type in [\"integer\", \"floating\"]",
                "def is_object(self) -> bool:\n    \"\"\"\n    Check if the Index is of the object dtype.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index is of the object dtype.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n    >>> idx.is_object()\n    True\n\n    >>> idx = pd.Index([\"Apple\", \"Mango\", 2.0])\n    >>> idx.is_object()\n    True\n\n    >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n    ...                 \"Watermelon\"]).astype(\"category\")\n    >>> idx.object()\n    False\n\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n    >>> idx.is_object()\n    False\n    \"\"\"\n    return is_object_dtype(self.dtype)",
                "def is_categorical(self) -> bool:\n    \"\"\"\n    Check if the Index holds categorical data.\n\n    Returns\n    -------\n    bool\n        True if the Index is categorical.\n\n    See Also\n    --------\n    CategoricalIndex : Index for categorical data.\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n    ...                 \"Watermelon\"]).astype(\"category\")\n    >>> idx.is_categorical()\n    True\n\n    >>> idx = pd.Index([1, 3, 5, 7])\n    >>> idx.is_categorical()\n    False\n\n    >>> s = pd.Series([\"Peter\", \"Victor\", \"Elisabeth\", \"Mar\"])\n    >>> s\n    0        Peter\n    1       Victor\n    2    Elisabeth\n    3          Mar\n    dtype: object\n    >>> s.index.is_categorical()\n    False\n    \"\"\"\n    return self.inferred_type in [\"categorical\"]",
                "def is_interval(self) -> bool:\n    \"\"\"\n    Check if the Index holds Interval objects.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index holds Interval objects.\n\n    See Also\n    --------\n    IntervalIndex : Index for Interval objects.\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([pd.Interval(left=0, right=5),\n    ...                 pd.Interval(left=5, right=10)])\n    >>> idx.is_interval()\n    True\n\n    >>> idx = pd.Index([1, 3, 5, 7])\n    >>> idx.is_interval()\n    False\n    \"\"\"\n    return self.inferred_type in [\"interval\"]",
                "def is_mixed(self) -> bool:\n    \"\"\"\n    Check if the Index holds data with mixed data types.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index holds data with mixed data types.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['a', np.nan, 'b'])\n    >>> idx.is_mixed()\n    True\n\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 5.0])\n    >>> idx.is_mixed()\n    False\n    \"\"\"\n    return self.inferred_type in [\"mixed\"]",
                "def holds_integer(self) -> bool:\n    \"\"\"\n    Whether the type is an integer type.\n    \"\"\"\n    return self.inferred_type in [\"integer\", \"mixed-integer\"]",
                "@cache_readonly\ndef inferred_type(self) -> str_t:\n    \"\"\"\n    Return a string of the type inferred from the values.\n    \"\"\"\n    return lib.infer_dtype(self, skipna=False)",
                "@cache_readonly\ndef is_all_dates(self) -> bool:\n    \"\"\"\n    Whether or not the index values only consist of dates.\n    \"\"\"\n    return is_datetime_array(ensure_object(self.values))",
                "def __reduce__(self):\n    d = dict(data=self._data)\n    d.update(self._get_attributes_dict())\n    return _new_Index, (type(self), d), None",
                "@cache_readonly\ndef _isnan(self):\n    \"\"\"\n    Return if each value is NaN.\n    \"\"\"\n    if self._can_hold_na:\n        return isna(self)\n    else:\n        # shouldn't reach to this condition by checking hasnans beforehand\n        values = np.empty(len(self), dtype=np.bool_)\n        values.fill(False)\n        return values",
                "@cache_readonly\ndef _nan_idxs(self):\n    if self._can_hold_na:\n        return self._isnan.nonzero()[0]\n    else:\n        return np.array([], dtype=np.int64)",
                "@cache_readonly\ndef hasnans(self) -> bool:\n    \"\"\"\n    Return if I have any nans; enables various perf speedups.\n    \"\"\"\n    if self._can_hold_na:\n        return bool(self._isnan.any())\n    else:\n        return False",
                "def isna(self):\n    \"\"\"\n    Detect missing values.\n\n    Return a boolean same-sized object indicating if the values are NA.\n    NA values, such as ``None``, :attr:`numpy.NaN` or :attr:`pd.NaT`, get\n    mapped to ``True`` values.\n    Everything else get mapped to ``False`` values. Characters such as\n    empty strings `''` or :attr:`numpy.inf` are not considered NA values\n    (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\n    Returns\n    -------\n    numpy.ndarray\n        A boolean array of whether my values are NA.\n\n    See Also\n    --------\n    Index.notna : Boolean inverse of isna.\n    Index.dropna : Omit entries with missing values.\n    isna : Top-level isna.\n    Series.isna : Detect missing values in Series object.\n\n    Examples\n    --------\n    Show which entries in a pandas.Index are NA. The result is an\n    array.\n\n    >>> idx = pd.Index([5.2, 6.0, np.NaN])\n    >>> idx\n    Float64Index([5.2, 6.0, nan], dtype='float64')\n    >>> idx.isna()\n    array([False, False,  True], dtype=bool)\n\n    Empty strings are not considered NA values. None is considered an NA\n    value.\n\n    >>> idx = pd.Index(['black', '', 'red', None])\n    >>> idx\n    Index(['black', '', 'red', None], dtype='object')\n    >>> idx.isna()\n    array([False, False, False,  True], dtype=bool)\n\n    For datetimes, `NaT` (Not a Time) is considered as an NA value.\n\n    >>> idx = pd.DatetimeIndex([pd.Timestamp('1940-04-25'),\n    ...                         pd.Timestamp(''), None, pd.NaT])\n    >>> idx\n    DatetimeIndex(['1940-04-25', 'NaT', 'NaT', 'NaT'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> idx.isna()\n    array([False,  True,  True,  True], dtype=bool)\n    \"\"\"\n    return self._isnan",
                "def notna(self):\n    \"\"\"\n    Detect existing (non-missing) values.\n\n    Return a boolean same-sized object indicating if the values are not NA.\n    Non-missing values get mapped to ``True``. Characters such as empty\n    strings ``''`` or :attr:`numpy.inf` are not considered NA values\n    (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n    NA values, such as None or :attr:`numpy.NaN`, get mapped to ``False``\n    values.\n\n    Returns\n    -------\n    numpy.ndarray\n        Boolean array to indicate which entries are not NA.\n\n    See Also\n    --------\n    Index.notnull : Alias of notna.\n    Index.isna: Inverse of notna.\n    notna : Top-level notna.\n\n    Examples\n    --------\n    Show which entries in an Index are not NA. The result is an\n    array.\n\n    >>> idx = pd.Index([5.2, 6.0, np.NaN])\n    >>> idx\n    Float64Index([5.2, 6.0, nan], dtype='float64')\n    >>> idx.notna()\n    array([ True,  True, False])\n\n    Empty strings are not considered NA values. None is considered a NA\n    value.\n\n    >>> idx = pd.Index(['black', '', 'red', None])\n    >>> idx\n    Index(['black', '', 'red', None], dtype='object')\n    >>> idx.notna()\n    array([ True,  True,  True, False])\n    \"\"\"\n    return ~self.isna()",
                "def fillna(self, value=None, downcast=None):\n    \"\"\"\n    Fill NA/NaN values with the specified value.\n\n    Parameters\n    ----------\n    value : scalar\n        Scalar value to use to fill holes (e.g. 0).\n        This value cannot be a list-likes.\n    downcast : dict, default is None\n        a dict of item->dtype of what to downcast if possible,\n        or the string 'infer' which will try to downcast to an appropriate\n        equal type (e.g. float64 to int64 if possible).\n\n    Returns\n    -------\n    filled : Index\n    \"\"\"\n    self._assert_can_do_op(value)\n    if self.hasnans:\n        result = self.putmask(self._isnan, value)\n        if downcast is None:\n            # no need to care metadata other than name\n            # because it can't have freq if\n            return Index(result, name=self.name)\n    return self._shallow_copy()",
                "def dropna(self, how=\"any\"):\n    \"\"\"\n    Return Index without NA/NaN values.\n\n    Parameters\n    ----------\n    how : {'any', 'all'}, default 'any'\n        If the Index is a MultiIndex, drop the value when any or all levels\n        are NaN.\n\n    Returns\n    -------\n    valid : Index\n    \"\"\"\n    if how not in (\"any\", \"all\"):\n        raise ValueError(f\"invalid how option: {how}\")\n\n    if self.hasnans:\n        return self._shallow_copy(self._values[~self._isnan])\n    return self._shallow_copy()",
                "def unique(self, level=None):\n    \"\"\"\n    Return unique values in the index. Uniques are returned in order\n    of appearance, this does NOT sort.\n\n    Parameters\n    ----------\n    level : int or str, optional, default None\n        Only return values from specified level (for MultiIndex).\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    Index without duplicates\n\n    See Also\n    --------\n    unique\n    Series.unique\n    \"\"\"\n    if level is not None:\n        self._validate_index_level(level)\n    result = super().unique()\n    return self._shallow_copy(result)",
                "def drop_duplicates(self, keep=\"first\"):\n    \"\"\"\n    Return Index with duplicate values removed.\n\n    Parameters\n    ----------\n    keep : {'first', 'last', ``False``}, default 'first'\n        - 'first' : Drop duplicates except for the first occurrence.\n        - 'last' : Drop duplicates except for the last occurrence.\n        - ``False`` : Drop all duplicates.\n\n    Returns\n    -------\n    deduplicated : Index\n\n    See Also\n    --------\n    Series.drop_duplicates : Equivalent method on Series.\n    DataFrame.drop_duplicates : Equivalent method on DataFrame.\n    Index.duplicated : Related method on Index, indicating duplicate\n        Index values.\n\n    Examples\n    --------\n    Generate an pandas.Index with duplicate values.\n\n    >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo'])\n\n    The `keep` parameter controls  which duplicate values are removed.\n    The value 'first' keeps the first occurrence for each\n    set of duplicated entries. The default value of keep is 'first'.\n\n    >>> idx.drop_duplicates(keep='first')\n    Index(['lama', 'cow', 'beetle', 'hippo'], dtype='object')\n\n    The value 'last' keeps the last occurrence for each set of duplicated\n    entries.\n\n    >>> idx.drop_duplicates(keep='last')\n    Index(['cow', 'beetle', 'lama', 'hippo'], dtype='object')\n\n    The value ``False`` discards all sets of duplicated entries.\n\n    >>> idx.drop_duplicates(keep=False)\n    Index(['cow', 'beetle', 'hippo'], dtype='object')\n    \"\"\"\n    return super().drop_duplicates(keep=keep)",
                "def duplicated(self, keep=\"first\"):\n    \"\"\"\n    Indicate duplicate index values.\n\n    Duplicated values are indicated as ``True`` values in the resulting\n    array. Either all duplicates, all except the first, or all except the\n    last occurrence of duplicates can be indicated.\n\n    Parameters\n    ----------\n    keep : {'first', 'last', False}, default 'first'\n        The value or values in a set of duplicates to mark as missing.\n\n        - 'first' : Mark duplicates as ``True`` except for the first\n          occurrence.\n        - 'last' : Mark duplicates as ``True`` except for the last\n          occurrence.\n        - ``False`` : Mark all duplicates as ``True``.\n\n    Returns\n    -------\n    numpy.ndarray\n\n    See Also\n    --------\n    Series.duplicated : Equivalent method on pandas.Series.\n    DataFrame.duplicated : Equivalent method on pandas.DataFrame.\n    Index.drop_duplicates : Remove duplicate values from Index.\n\n    Examples\n    --------\n    By default, for each set of duplicated values, the first occurrence is\n    set to False and all others to True:\n\n    >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama'])\n    >>> idx.duplicated()\n    array([False, False,  True, False,  True])\n\n    which is equivalent to\n\n    >>> idx.duplicated(keep='first')\n    array([False, False,  True, False,  True])\n\n    By using 'last', the last occurrence of each set of duplicated values\n    is set on False and all others on True:\n\n    >>> idx.duplicated(keep='last')\n    array([ True, False,  True, False, False])\n\n    By setting keep on ``False``, all duplicates are True:\n\n    >>> idx.duplicated(keep=False)\n    array([ True, False,  True, False,  True])\n    \"\"\"\n    return super().duplicated(keep=keep)",
                "def _get_unique_index(self, dropna: bool = False):\n    \"\"\"\n    Returns an index containing unique values.\n\n    Parameters\n    ----------\n    dropna : bool, default False\n        If True, NaN values are dropped.\n\n    Returns\n    -------\n    uniques : index\n    \"\"\"\n    if self.is_unique and not dropna:\n        return self\n\n    values = self.values\n\n    if not self.is_unique:\n        values = self.unique()\n        if not isinstance(self, ABCMultiIndex):\n            # extract an array to pass to _shallow_copy\n            values = values._data\n\n    if dropna:\n        try:\n            if self.hasnans:\n                values = values[~isna(values)]\n        except NotImplementedError:\n            pass\n\n    return self._shallow_copy(values)",
                "def __add__(self, other):\n    if isinstance(other, (ABCSeries, ABCDataFrame)):\n        return NotImplemented\n    from pandas import Series\n\n    return Index(Series(self) + other)",
                "def __radd__(self, other):\n    from pandas import Series\n\n    return Index(other + Series(self))",
                "def __iadd__(self, other):\n    # alias for __add__\n    return self + other",
                "def __sub__(self, other):\n    return Index(np.array(self) - other)",
                "def __rsub__(self, other):\n    # wrap Series to ensure we pin name correctly\n    from pandas import Series\n\n    return Index(other - Series(self))",
                "def __and__(self, other):\n    return self.intersection(other)",
                "def __or__(self, other):\n    return self.union(other)",
                "def __xor__(self, other):\n    return self.symmetric_difference(other)",
                "def __nonzero__(self):\n    raise ValueError(\n        f\"The truth value of a {type(self).__name__} is ambiguous. \"\n        \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n    )",
                "def _get_reconciled_name_object(self, other):\n    \"\"\"\n    If the result of a set operation will be self,\n    return self, unless the name changes, in which\n    case make a shallow copy of self.\n    \"\"\"\n    name = get_op_result_name(self, other)\n    if self.name != name:\n        return self._shallow_copy(name=name)\n    return self",
                "def _union_incompatible_dtypes(self, other, sort):\n    \"\"\"\n    Casts this and other index to object dtype to allow the formation\n    of a union between incompatible types.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default False\n        Whether to sort the resulting index.\n\n        * False : do not sort the result.\n        * None : sort the result, except when `self` and `other` are equal\n          or when the values cannot be compared.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    this = self.astype(object, copy=False)\n    # cast to Index for when `other` is list-like\n    other = Index(other).astype(object, copy=False)\n    return Index.union(this, other, sort=sort).astype(object, copy=False)",
                "def _is_compatible_with_other(self, other) -> bool:\n    \"\"\"\n    Check whether this and the other dtype are compatible with each other.\n    Meaning a union can be formed between them without needing to be cast\n    to dtype object.\n\n    Parameters\n    ----------\n    other : Index or array-like\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return type(self) is type(other) and is_dtype_equal(self.dtype, other.dtype)",
                "def _validate_sort_keyword(self, sort):\n    if sort not in [None, False]:\n        raise ValueError(\n            \"The 'sort' keyword only takes the values of \"\n            f\"None or False; {sort} was passed.\"\n        )",
                "def union(self, other, sort=None):\n    \"\"\"\n    Form the union of two Index objects.\n\n    If the Index objects are incompatible, both Index objects will be\n    cast to dtype('object') first.\n\n        .. versionchanged:: 0.25.0\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : bool or None, default None\n        Whether to sort the resulting Index.\n\n        * None : Sort the result, except when\n\n          1. `self` and `other` are equal.\n          2. `self` or `other` has length 0.\n          3. Some values in `self` or `other` cannot be compared.\n             A RuntimeWarning is issued in this case.\n\n        * False : do not sort the result.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default value from ``True`` to ``None``\n           (without change in behaviour).\n\n    Returns\n    -------\n    union : Index\n\n    Examples\n    --------\n    Union matching dtypes\n\n    >>> idx1 = pd.Index([1, 2, 3, 4])\n    >>> idx2 = pd.Index([3, 4, 5, 6])\n    >>> idx1.union(idx2)\n    Int64Index([1, 2, 3, 4, 5, 6], dtype='int64')\n\n    Union mismatched dtypes\n\n    >>> idx1 = pd.Index(['a', 'b', 'c', 'd'])\n    >>> idx2 = pd.Index([1, 2, 3, 4])\n    >>> idx1.union(idx2)\n    Index(['a', 'b', 'c', 'd', 1, 2, 3, 4], dtype='object')\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n\n    if not self._is_compatible_with_other(other):\n        return self._union_incompatible_dtypes(other, sort=sort)\n\n    return self._union(other, sort=sort)",
                "def _union(self, other, sort):\n    \"\"\"\n    Specific union logic should go here. In subclasses, union behavior\n    should be overwritten here rather than in `self.union`.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default False\n        Whether to sort the resulting index.\n\n        * False : do not sort the result.\n        * None : sort the result, except when `self` and `other` are equal\n          or when the values cannot be compared.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    if not len(other) or self.equals(other):\n        return self._get_reconciled_name_object(other)\n\n    if not len(self):\n        return other._get_reconciled_name_object(self)\n\n    # TODO(EA): setops-refactor, clean all this up\n    if is_datetime64tz_dtype(self):\n        lvals = self._ndarray_values\n    else:\n        lvals = self._values\n    if is_datetime64tz_dtype(other):\n        rvals = other._ndarray_values\n    else:\n        rvals = other._values\n\n    if sort is None and self.is_monotonic and other.is_monotonic:\n        try:\n            result = self._outer_indexer(lvals, rvals)[0]\n        except TypeError:\n            # incomparable objects\n            result = list(lvals)\n\n            # worth making this faster? a very unusual case\n            value_set = set(lvals)\n            result.extend([x for x in rvals if x not in value_set])\n            result = Index(result)._values  # do type inference here\n    else:\n        # find indexes of things in \"other\" that are not in \"self\"\n        if self.is_unique:\n            indexer = self.get_indexer(other)\n            indexer = (indexer == -1).nonzero()[0]\n        else:\n            indexer = algos.unique1d(self.get_indexer_non_unique(other)[1])\n\n        if len(indexer) > 0:\n            other_diff = algos.take_nd(rvals, indexer, allow_fill=False)\n            result = concat_compat((lvals, other_diff))\n\n        else:\n            result = lvals\n\n        if sort is None:\n            try:\n                result = algos.safe_sort(result)\n            except TypeError as err:\n                warnings.warn(\n                    f\"{err}, sort order is undefined for incomparable objects\",\n                    RuntimeWarning,\n                    stacklevel=3,\n                )\n\n    # for subclasses\n    return self._wrap_setop_result(other, result)",
                "def _wrap_setop_result(self, other, result):\n    name = get_op_result_name(self, other)\n    return self._shallow_copy(result, name=name)",
                "def intersection(self, other, sort=False):\n    \"\"\"\n    Form the intersection of two Index objects.\n\n    This returns a new Index with elements common to the index and `other`.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default False\n        Whether to sort the resulting index.\n\n        * False : do not sort the result.\n        * None : sort the result, except when `self` and `other` are equal\n          or when the values cannot be compared.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default from ``True`` to ``False``, to match\n           the behaviour of 0.23.4 and earlier.\n\n    Returns\n    -------\n    intersection : Index\n\n    Examples\n    --------\n    >>> idx1 = pd.Index([1, 2, 3, 4])\n    >>> idx2 = pd.Index([3, 4, 5, 6])\n    >>> idx1.intersection(idx2)\n    Int64Index([3, 4], dtype='int64')\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    other = ensure_index(other)\n\n    if self.equals(other):\n        return self._get_reconciled_name_object(other)\n\n    if not is_dtype_equal(self.dtype, other.dtype):\n        this = self.astype(\"O\")\n        other = other.astype(\"O\")\n        return this.intersection(other, sort=sort)\n\n    # TODO(EA): setops-refactor, clean all this up\n    lvals = self._values\n    rvals = other._values\n\n    if self.is_monotonic and other.is_monotonic:\n        try:\n            result = self._inner_indexer(lvals, rvals)[0]\n        except TypeError:\n            pass\n        else:\n            return self._wrap_setop_result(other, result)\n\n    try:\n        indexer = Index(rvals).get_indexer(lvals)\n        indexer = indexer.take((indexer != -1).nonzero()[0])\n    except (InvalidIndexError, IncompatibleFrequency):\n        # InvalidIndexError raised by get_indexer if non-unique\n        # IncompatibleFrequency raised by PeriodIndex.get_indexer\n        indexer = algos.unique1d(Index(rvals).get_indexer_non_unique(lvals)[0])\n        indexer = indexer[indexer != -1]\n\n    taken = other.take(indexer)\n    res_name = get_op_result_name(self, other)\n\n    if sort is None:\n        taken = algos.safe_sort(taken.values)\n        return self._shallow_copy(taken, name=res_name)\n\n    taken.name = res_name\n    return taken",
                "def difference(self, other, sort=None):\n    \"\"\"\n    Return a new Index with elements from the index that are not in\n    `other`.\n\n    This is the set difference of two Index objects.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default None\n        Whether to sort the resulting index. By default, the\n        values are attempted to be sorted, but any TypeError from\n        incomparable elements is caught by pandas.\n\n        * None : Attempt to sort the result, but catch any TypeErrors\n          from comparing incomparable elements.\n        * False : Do not sort the result.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default value from ``True`` to ``None``\n           (without change in behaviour).\n\n    Returns\n    -------\n    difference : Index\n\n    Examples\n    --------\n    >>> idx1 = pd.Index([2, 1, 3, 4])\n    >>> idx2 = pd.Index([3, 4, 5, 6])\n    >>> idx1.difference(idx2)\n    Int64Index([1, 2], dtype='int64')\n    >>> idx1.difference(idx2, sort=False)\n    Int64Index([2, 1], dtype='int64')\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n\n    if self.equals(other):\n        # pass an empty np.ndarray with the appropriate dtype\n        return self._shallow_copy(self._data[:0])\n\n    other, result_name = self._convert_can_do_setop(other)\n\n    this = self._get_unique_index()\n\n    indexer = this.get_indexer(other)\n    indexer = indexer.take((indexer != -1).nonzero()[0])\n\n    label_diff = np.setdiff1d(np.arange(this.size), indexer, assume_unique=True)\n    the_diff = this.values.take(label_diff)\n    if sort is None:\n        try:\n            the_diff = algos.safe_sort(the_diff)\n        except TypeError:\n            pass\n\n    return this._shallow_copy(the_diff, name=result_name)",
                "def symmetric_difference(self, other, result_name=None, sort=None):\n    \"\"\"\n    Compute the symmetric difference of two Index objects.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    result_name : str\n    sort : False or None, default None\n        Whether to sort the resulting index. By default, the\n        values are attempted to be sorted, but any TypeError from\n        incomparable elements is caught by pandas.\n\n        * None : Attempt to sort the result, but catch any TypeErrors\n          from comparing incomparable elements.\n        * False : Do not sort the result.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default value from ``True`` to ``None``\n           (without change in behaviour).\n\n    Returns\n    -------\n    symmetric_difference : Index\n\n    Notes\n    -----\n    ``symmetric_difference`` contains elements that appear in either\n    ``idx1`` or ``idx2`` but not both. Equivalent to the Index created by\n    ``idx1.difference(idx2) | idx2.difference(idx1)`` with duplicates\n    dropped.\n\n    Examples\n    --------\n    >>> idx1 = pd.Index([1, 2, 3, 4])\n    >>> idx2 = pd.Index([2, 3, 4, 5])\n    >>> idx1.symmetric_difference(idx2)\n    Int64Index([1, 5], dtype='int64')\n\n    You can also use the ``^`` operator:\n\n    >>> idx1 ^ idx2\n    Int64Index([1, 5], dtype='int64')\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    other, result_name_update = self._convert_can_do_setop(other)\n    if result_name is None:\n        result_name = result_name_update\n\n    this = self._get_unique_index()\n    other = other._get_unique_index()\n    indexer = this.get_indexer(other)\n\n    # {this} minus {other}\n    common_indexer = indexer.take((indexer != -1).nonzero()[0])\n    left_indexer = np.setdiff1d(\n        np.arange(this.size), common_indexer, assume_unique=True\n    )\n    left_diff = this._values.take(left_indexer)\n\n    # {other} minus {this}\n    right_indexer = (indexer == -1).nonzero()[0]\n    right_diff = other._values.take(right_indexer)\n\n    the_diff = concat_compat([left_diff, right_diff])\n    if sort is None:\n        try:\n            the_diff = algos.safe_sort(the_diff)\n        except TypeError:\n            pass\n\n    attribs = self._get_attributes_dict()\n    attribs[\"name\"] = result_name\n    if \"freq\" in attribs:\n        attribs[\"freq\"] = None\n    return self._shallow_copy_with_infer(the_diff, **attribs)",
                "def _assert_can_do_setop(self, other):\n    if not is_list_like(other):\n        raise TypeError(\"Input must be Index or array-like\")\n    return True",
                "def _convert_can_do_setop(self, other):\n    if not isinstance(other, Index):\n        other = Index(other, name=self.name)\n        result_name = self.name\n    else:\n        result_name = get_op_result_name(self, other)\n    return other, result_name",
                "def get_loc(self, key, method=None, tolerance=None):\n    \"\"\"\n    Get integer location, slice or boolean mask for requested label.\n\n    Parameters\n    ----------\n    key : label\n    method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n        * default: exact matches only.\n        * pad / ffill: find the PREVIOUS index value if no exact match.\n        * backfill / bfill: use NEXT index value if no exact match\n        * nearest: use the NEAREST index value if no exact match. Tied\n          distances are broken by preferring the larger index value.\n    tolerance : int or float, optional\n        Maximum distance from index value for inexact matches. The value of\n        the index at the matching location most satisfy the equation\n        ``abs(index[loc] - key) <= tolerance``.\n\n        .. versionadded:: 0.21.0 (list-like tolerance)\n\n    Returns\n    -------\n    loc : int if unique index, slice if monotonic index, else mask\n\n    Examples\n    --------\n    >>> unique_index = pd.Index(list('abc'))\n    >>> unique_index.get_loc('b')\n    1\n\n    >>> monotonic_index = pd.Index(list('abbc'))\n    >>> monotonic_index.get_loc('b')\n    slice(1, 3, None)\n\n    >>> non_monotonic_index = pd.Index(list('abcb'))\n    >>> non_monotonic_index.get_loc('b')\n    array([False,  True, False,  True], dtype=bool)\n    \"\"\"\n    if method is None:\n        if tolerance is not None:\n            raise ValueError(\n                \"tolerance argument only valid if using pad, \"\n                \"backfill or nearest lookups\"\n            )\n        casted_key = self._maybe_cast_indexer(key)\n        try:\n            return self._engine.get_loc(casted_key)\n        except KeyError:\n            raise KeyError(key)\n\n    if tolerance is not None:\n        tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n\n    indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n    if indexer.ndim > 1 or indexer.size > 1:\n        raise TypeError(\"get_loc requires scalar valued input\")\n    loc = indexer.item()\n    if loc == -1:\n        raise KeyError(key)\n    return loc",
                "@Appender(_index_shared_docs[\"get_indexer\"] % _index_doc_kwargs)\ndef get_indexer(\n    self, target, method=None, limit=None, tolerance=None\n) -> np.ndarray:\n    method = missing.clean_reindex_fill_method(method)\n    target = ensure_index(target)\n    if tolerance is not None:\n        tolerance = self._convert_tolerance(tolerance, target)\n\n    # Treat boolean labels passed to a numeric index as not found. Without\n    # this fix False and True would be treated as 0 and 1 respectively.\n    # (GH #16877)\n    if target.is_boolean() and self.is_numeric():\n        return ensure_platform_int(np.repeat(-1, target.size))\n\n    pself, ptarget = self._maybe_promote(target)\n    if pself is not self or ptarget is not target:\n        return pself.get_indexer(\n            ptarget, method=method, limit=limit, tolerance=tolerance\n        )\n\n    if not is_dtype_equal(self.dtype, target.dtype):\n        this = self.astype(object)\n        target = target.astype(object)\n        return this.get_indexer(\n            target, method=method, limit=limit, tolerance=tolerance\n        )\n\n    if not self.is_unique:\n        raise InvalidIndexError(\n            \"Reindexing only valid with uniquely valued Index objects\"\n        )\n\n    if method == \"pad\" or method == \"backfill\":\n        indexer = self._get_fill_indexer(target, method, limit, tolerance)\n    elif method == \"nearest\":\n        indexer = self._get_nearest_indexer(target, limit, tolerance)\n    else:\n        if tolerance is not None:\n            raise ValueError(\n                \"tolerance argument only valid if doing pad, \"\n                \"backfill or nearest reindexing\"\n            )\n        if limit is not None:\n            raise ValueError(\n                \"limit argument only valid if doing pad, \"\n                \"backfill or nearest reindexing\"\n            )\n\n        indexer = self._engine.get_indexer(target._ndarray_values)\n\n    return ensure_platform_int(indexer)",
                "def _convert_tolerance(self, tolerance, target):\n    # override this method on subclasses\n    tolerance = np.asarray(tolerance)\n    if target.size != tolerance.size and tolerance.size > 1:\n        raise ValueError(\"list-like tolerance size must match target index size\")\n    return tolerance",
                "def _get_fill_indexer(\n    self, target: \"Index\", method: str_t, limit=None, tolerance=None\n) -> np.ndarray:\n    if self.is_monotonic_increasing and target.is_monotonic_increasing:\n        engine_method = (\n            self._engine.get_pad_indexer\n            if method == \"pad\"\n            else self._engine.get_backfill_indexer\n        )\n        indexer = engine_method(target._ndarray_values, limit)\n    else:\n        indexer = self._get_fill_indexer_searchsorted(target, method, limit)\n    if tolerance is not None:\n        indexer = self._filter_indexer_tolerance(\n            target._ndarray_values, indexer, tolerance\n        )\n    return indexer",
                "def _get_fill_indexer_searchsorted(\n    self, target: \"Index\", method: str_t, limit=None\n) -> np.ndarray:\n    \"\"\"\n    Fallback pad/backfill get_indexer that works for monotonic decreasing\n    indexes and non-monotonic targets.\n    \"\"\"\n    if limit is not None:\n        raise ValueError(\n            f\"limit argument for {repr(method)} method only well-defined \"\n            \"if index and target are monotonic\"\n        )\n\n    side = \"left\" if method == \"pad\" else \"right\"\n\n    # find exact matches first (this simplifies the algorithm)\n    indexer = self.get_indexer(target)\n    nonexact = indexer == -1\n    indexer[nonexact] = self._searchsorted_monotonic(target[nonexact], side)\n    if side == \"left\":\n        # searchsorted returns \"indices into a sorted array such that,\n        # if the corresponding elements in v were inserted before the\n        # indices, the order of a would be preserved\".\n        # Thus, we need to subtract 1 to find values to the left.\n        indexer[nonexact] -= 1\n        # This also mapped not found values (values of 0 from\n        # np.searchsorted) to -1, which conveniently is also our\n        # sentinel for missing values\n    else:\n        # Mark indices to the right of the largest value as not found\n        indexer[indexer == len(self)] = -1\n    return indexer",
                "def _get_nearest_indexer(self, target: \"Index\", limit, tolerance) -> np.ndarray:\n    \"\"\"\n    Get the indexer for the nearest index labels; requires an index with\n    values that can be subtracted from each other (e.g., not strings or\n    tuples).\n    \"\"\"\n    left_indexer = self.get_indexer(target, \"pad\", limit=limit)\n    right_indexer = self.get_indexer(target, \"backfill\", limit=limit)\n\n    left_distances = np.abs(self[left_indexer] - target)\n    right_distances = np.abs(self[right_indexer] - target)\n\n    op = operator.lt if self.is_monotonic_increasing else operator.le\n    indexer = np.where(\n        op(left_distances, right_distances) | (right_indexer == -1),\n        left_indexer,\n        right_indexer,\n    )\n    if tolerance is not None:\n        indexer = self._filter_indexer_tolerance(target, indexer, tolerance)\n    return indexer",
                "def _filter_indexer_tolerance(\n    self, target: \"Index\", indexer: np.ndarray, tolerance\n) -> np.ndarray:\n    distance = abs(self.values[indexer] - target)\n    indexer = np.where(distance <= tolerance, indexer, -1)\n    return indexer",
                "def _get_partial_string_timestamp_match_key(self, key):\n    \"\"\"\n    Translate any partial string timestamp matches in key, returning the\n    new key.\n\n    Only relevant for MultiIndex.\n    \"\"\"\n    # GH#10331\n    return key",
                "def _convert_scalar_indexer(self, key, kind: str_t):\n    \"\"\"\n    Convert a scalar indexer.\n\n    Parameters\n    ----------\n    key : label of the slice bound\n    kind : {'loc', 'getitem'}\n    \"\"\"\n    assert kind in [\"loc\", \"getitem\"]\n\n    if len(self) and not isinstance(self, ABCMultiIndex):\n\n        # we can raise here if we are definitive that this\n        # is positional indexing (eg. .loc on with a float)\n        # or label indexing if we are using a type able\n        # to be represented in the index\n\n        if kind == \"getitem\" and is_float(key):\n            if not self.is_floating():\n                self._invalid_indexer(\"label\", key)\n\n        elif kind == \"loc\" and is_float(key):\n\n            # we want to raise KeyError on string/mixed here\n            # technically we *could* raise a TypeError\n            # on anything but mixed though\n            if self.inferred_type not in [\n                \"floating\",\n                \"mixed-integer-float\",\n                \"integer-na\",\n                \"string\",\n                \"mixed\",\n            ]:\n                self._invalid_indexer(\"label\", key)\n\n        elif kind == \"loc\" and is_integer(key):\n            if not self.holds_integer():\n                self._invalid_indexer(\"label\", key)\n\n    return key",
                "def _validate_positional_slice(self, key: slice):\n    \"\"\"\n    For positional indexing, a slice must have either int or None\n    for each of start, stop, and step.\n    \"\"\"\n    self._validate_indexer(\"positional\", key.start, \"iloc\")\n    self._validate_indexer(\"positional\", key.stop, \"iloc\")\n    self._validate_indexer(\"positional\", key.step, \"iloc\")",
                "def _convert_slice_indexer(self, key: slice, kind: str_t):\n    \"\"\"\n    Convert a slice indexer.\n\n    By definition, these are labels unless 'iloc' is passed in.\n    Floats are not allowed as the start, step, or stop of the slice.\n\n    Parameters\n    ----------\n    key : label of the slice bound\n    kind : {'loc', 'getitem'}\n    \"\"\"\n    assert kind in [\"loc\", \"getitem\"], kind\n\n    # potentially cast the bounds to integers\n    start, stop, step = key.start, key.stop, key.step\n\n    # figure out if this is a positional indexer\n    def is_int(v):\n        return v is None or is_integer(v)\n\n    is_null_slicer = start is None and stop is None\n    is_index_slice = is_int(start) and is_int(stop)\n    is_positional = is_index_slice and not (\n        self.is_integer() or self.is_categorical()\n    )\n\n    if kind == \"getitem\":\n        \"\"\"\n        called from the getitem slicers, validate that we are in fact\n        integers\n        \"\"\"\n        if self.is_integer() or is_index_slice:\n            self._validate_indexer(\"slice\", key.start, \"getitem\")\n            self._validate_indexer(\"slice\", key.stop, \"getitem\")\n            self._validate_indexer(\"slice\", key.step, \"getitem\")\n            return key\n\n    # convert the slice to an indexer here\n\n    # if we are mixed and have integers\n    if is_positional and self.is_mixed():\n        try:\n            # Validate start & stop\n            if start is not None:\n                self.get_loc(start)\n            if stop is not None:\n                self.get_loc(stop)\n            is_positional = False\n        except KeyError:\n            pass\n\n    if is_null_slicer:\n        indexer = key\n    elif is_positional:\n        indexer = key\n    else:\n        indexer = self.slice_indexer(start, stop, step, kind=kind)\n\n    return indexer",
                "def _convert_listlike_indexer(self, keyarr):\n    \"\"\"\n    Parameters\n    ----------\n    keyarr : list-like\n        Indexer to convert.\n\n    Returns\n    -------\n    indexer : numpy.ndarray or None\n        Return an ndarray or None if cannot convert.\n    keyarr : numpy.ndarray\n        Return tuple-safe keys.\n    \"\"\"\n    if isinstance(keyarr, Index):\n        keyarr = self._convert_index_indexer(keyarr)\n    else:\n        keyarr = self._convert_arr_indexer(keyarr)\n\n    indexer = self._convert_list_indexer(keyarr)\n    return indexer, keyarr",
                "def _convert_arr_indexer(self, keyarr):\n    \"\"\"\n    Convert an array-like indexer to the appropriate dtype.\n\n    Parameters\n    ----------\n    keyarr : array-like\n        Indexer to convert.\n\n    Returns\n    -------\n    converted_keyarr : array-like\n    \"\"\"\n    keyarr = com.asarray_tuplesafe(keyarr)\n    return keyarr",
                "def _convert_index_indexer(self, keyarr):\n    \"\"\"\n    Convert an Index indexer to the appropriate dtype.\n\n    Parameters\n    ----------\n    keyarr : Index (or sub-class)\n        Indexer to convert.\n\n    Returns\n    -------\n    converted_keyarr : Index (or sub-class)\n    \"\"\"\n    return keyarr",
                "def _convert_list_indexer(self, keyarr):\n    \"\"\"\n    Convert a list-like indexer to the appropriate dtype.\n\n    Parameters\n    ----------\n    keyarr : Index (or sub-class)\n        Indexer to convert.\n    kind : iloc, loc, optional\n\n    Returns\n    -------\n    positional indexer or None\n    \"\"\"\n    return None",
                "def _invalid_indexer(self, form: str_t, key):\n    \"\"\"\n    Consistent invalid indexer message.\n    \"\"\"\n    raise TypeError(\n        f\"cannot do {form} indexing on {type(self).__name__} with these \"\n        f\"indexers [{key}] of type {type(key).__name__}\"\n    )",
                "def _can_reindex(self, indexer):\n    \"\"\"\n    Check if we are allowing reindexing with this particular indexer.\n\n    Parameters\n    ----------\n    indexer : an integer indexer\n\n    Raises\n    ------\n    ValueError if its a duplicate axis\n    \"\"\"\n    # trying to reindex on an axis with duplicates\n    if not self.is_unique and len(indexer):\n        raise ValueError(\"cannot reindex from a duplicate axis\")",
                "def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n    \"\"\"\n    Create index with target's values (move/add/delete values\n    as necessary).\n\n    Parameters\n    ----------\n    target : an iterable\n\n    Returns\n    -------\n    new_index : pd.Index\n        Resulting index.\n    indexer : np.ndarray or None\n        Indices of output values in original index.\n    \"\"\"\n    # GH6552: preserve names when reindexing to non-named target\n    # (i.e. neither Index nor Series).\n    preserve_names = not hasattr(target, \"name\")\n\n    # GH7774: preserve dtype/tz if target is empty and not an Index.\n    target = _ensure_has_len(target)  # target may be an iterator\n\n    if not isinstance(target, Index) and len(target) == 0:\n        attrs = self._get_attributes_dict()\n        attrs.pop(\"freq\", None)  # don't preserve freq\n        if isinstance(self, ABCRangeIndex):\n            values = range(0)\n        else:\n            values = self._data[:0]  # appropriately-dtyped empty array\n        target = self._simple_new(values, dtype=self.dtype, **attrs)\n    else:\n        target = ensure_index(target)\n\n    if level is not None:\n        if method is not None:\n            raise TypeError(\"Fill method not supported if level passed\")\n        _, indexer, _ = self._join_level(\n            target, level, how=\"right\", return_indexers=True\n        )\n    else:\n        if self.equals(target):\n            indexer = None\n        else:\n            # check is_overlapping for IntervalIndex compat\n            if self.is_unique and not getattr(self, \"is_overlapping\", False):\n                indexer = self.get_indexer(\n                    target, method=method, limit=limit, tolerance=tolerance\n                )\n            else:\n                if method is not None or limit is not None:\n                    raise ValueError(\n                        \"cannot reindex a non-unique index \"\n                        \"with a method or limit\"\n                    )\n                indexer, missing = self.get_indexer_non_unique(target)\n\n    if preserve_names and target.nlevels == 1 and target.name != self.name:\n        target = target.copy()\n        target.name = self.name\n\n    return target, indexer",
                "def _reindex_non_unique(self, target):\n    \"\"\"\n    Create a new index with target's values (move/add/delete values as\n    necessary) use with non-unique Index and a possibly non-unique target.\n\n    Parameters\n    ----------\n    target : an iterable\n\n    Returns\n    -------\n    new_index : pd.Index\n        Resulting index.\n    indexer : np.ndarray or None\n        Indices of output values in original index.\n\n    \"\"\"\n    target = ensure_index(target)\n    indexer, missing = self.get_indexer_non_unique(target)\n    check = indexer != -1\n    new_labels = self.take(indexer[check])\n    new_indexer = None\n\n    if len(missing):\n        length = np.arange(len(indexer))\n\n        missing = ensure_platform_int(missing)\n        missing_labels = target.take(missing)\n        missing_indexer = ensure_int64(length[~check])\n        cur_labels = self.take(indexer[check]).values\n        cur_indexer = ensure_int64(length[check])\n\n        new_labels = np.empty(tuple([len(indexer)]), dtype=object)\n        new_labels[cur_indexer] = cur_labels\n        new_labels[missing_indexer] = missing_labels\n\n        # a unique indexer\n        if target.is_unique:\n\n            # see GH5553, make sure we use the right indexer\n            new_indexer = np.arange(len(indexer))\n            new_indexer[cur_indexer] = np.arange(len(cur_labels))\n            new_indexer[missing_indexer] = -1\n\n        # we have a non_unique selector, need to use the original\n        # indexer here\n        else:\n\n            # need to retake to have the same size as the indexer\n            indexer[~check] = -1\n\n            # reset the new indexer to account for the new size\n            new_indexer = np.arange(len(self.take(indexer)))\n            new_indexer[~check] = -1\n\n    new_index = self._shallow_copy_with_infer(new_labels)\n    return new_index, indexer, new_indexer",
                "def join(self, other, how=\"left\", level=None, return_indexers=False, sort=False):\n    \"\"\"\n    Compute join_index and indexers to conform data\n    structures to the new index.\n\n    Parameters\n    ----------\n    other : Index\n    how : {'left', 'right', 'inner', 'outer'}\n    level : int or level name, default None\n    return_indexers : bool, default False\n    sort : bool, default False\n        Sort the join keys lexicographically in the result Index. If False,\n        the order of the join keys depends on the join type (how keyword).\n\n    Returns\n    -------\n    join_index, (left_indexer, right_indexer)\n    \"\"\"\n    self_is_mi = isinstance(self, ABCMultiIndex)\n    other_is_mi = isinstance(other, ABCMultiIndex)\n\n    # try to figure out the join level\n    # GH3662\n    if level is None and (self_is_mi or other_is_mi):\n\n        # have the same levels/names so a simple join\n        if self.names == other.names:\n            pass\n        else:\n            return self._join_multi(other, how=how, return_indexers=return_indexers)\n\n    # join on the level\n    if level is not None and (self_is_mi or other_is_mi):\n        return self._join_level(\n            other, level, how=how, return_indexers=return_indexers\n        )\n\n    other = ensure_index(other)\n\n    if len(other) == 0 and how in (\"left\", \"outer\"):\n        join_index = self._shallow_copy()\n        if return_indexers:\n            rindexer = np.repeat(-1, len(join_index))\n            return join_index, None, rindexer\n        else:\n            return join_index\n\n    if len(self) == 0 and how in (\"right\", \"outer\"):\n        join_index = other._shallow_copy()\n        if return_indexers:\n            lindexer = np.repeat(-1, len(join_index))\n            return join_index, lindexer, None\n        else:\n            return join_index\n\n    if self._join_precedence < other._join_precedence:\n        how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n        result = other.join(\n            self, how=how, level=level, return_indexers=return_indexers\n        )\n        if return_indexers:\n            x, y, z = result\n            result = x, z, y\n        return result\n\n    if not is_dtype_equal(self.dtype, other.dtype):\n        this = self.astype(\"O\")\n        other = other.astype(\"O\")\n        return this.join(other, how=how, return_indexers=return_indexers)\n\n    _validate_join_method(how)\n\n    if not self.is_unique and not other.is_unique:\n        return self._join_non_unique(\n            other, how=how, return_indexers=return_indexers\n        )\n    elif not self.is_unique or not other.is_unique:\n        if self.is_monotonic and other.is_monotonic:\n            return self._join_monotonic(\n                other, how=how, return_indexers=return_indexers\n            )\n        else:\n            return self._join_non_unique(\n                other, how=how, return_indexers=return_indexers\n            )\n    elif self.is_monotonic and other.is_monotonic:\n        try:\n            return self._join_monotonic(\n                other, how=how, return_indexers=return_indexers\n            )\n        except TypeError:\n            pass\n\n    if how == \"left\":\n        join_index = self\n    elif how == \"right\":\n        join_index = other\n    elif how == \"inner\":\n        # TODO: sort=False here for backwards compat. It may\n        # be better to use the sort parameter passed into join\n        join_index = self.intersection(other, sort=False)\n    elif how == \"outer\":\n        # TODO: sort=True here for backwards compat. It may\n        # be better to use the sort parameter passed into join\n        join_index = self.union(other)\n\n    if sort:\n        join_index = join_index.sort_values()\n\n    if return_indexers:\n        if join_index is self:\n            lindexer = None\n        else:\n            lindexer = self.get_indexer(join_index)\n        if join_index is other:\n            rindexer = None\n        else:\n            rindexer = other.get_indexer(join_index)\n        return join_index, lindexer, rindexer\n    else:\n        return join_index",
                "def _join_multi(self, other, how, return_indexers=True):\n    from pandas.core.indexes.multi import MultiIndex\n    from pandas.core.reshape.merge import _restore_dropped_levels_multijoin\n\n    # figure out join names\n    self_names = set(com.not_none(*self.names))\n    other_names = set(com.not_none(*other.names))\n    overlap = self_names & other_names\n\n    # need at least 1 in common\n    if not overlap:\n        raise ValueError(\"cannot join with no overlapping index names\")\n\n    self_is_mi = isinstance(self, ABCMultiIndex)\n    other_is_mi = isinstance(other, ABCMultiIndex)\n\n    if self_is_mi and other_is_mi:\n\n        # Drop the non-matching levels from left and right respectively\n        ldrop_names = list(self_names - overlap)\n        rdrop_names = list(other_names - overlap)\n\n        # if only the order differs\n        if not len(ldrop_names + rdrop_names):\n            self_jnlevels = self\n            other_jnlevels = other.reorder_levels(self.names)\n        else:\n            self_jnlevels = self.droplevel(ldrop_names)\n            other_jnlevels = other.droplevel(rdrop_names)\n\n        # Join left and right\n        # Join on same leveled multi-index frames is supported\n        join_idx, lidx, ridx = self_jnlevels.join(\n            other_jnlevels, how, return_indexers=True\n        )\n\n        # Restore the dropped levels\n        # Returned index level order is\n        # common levels, ldrop_names, rdrop_names\n        dropped_names = ldrop_names + rdrop_names\n\n        levels, codes, names = _restore_dropped_levels_multijoin(\n            self, other, dropped_names, join_idx, lidx, ridx\n        )\n\n        # Re-create the multi-index\n        multi_join_idx = MultiIndex(\n            levels=levels, codes=codes, names=names, verify_integrity=False\n        )\n\n        multi_join_idx = multi_join_idx.remove_unused_levels()\n\n        return multi_join_idx, lidx, ridx\n\n    jl = list(overlap)[0]\n\n    # Case where only one index is multi\n    # make the indices into mi's that match\n    flip_order = False\n    if self_is_mi:\n        self, other = other, self\n        flip_order = True\n        # flip if join method is right or left\n        how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n\n    level = other.names.index(jl)\n    result = self._join_level(\n        other, level, how=how, return_indexers=return_indexers\n    )\n\n    if flip_order:\n        if isinstance(result, tuple):\n            return result[0], result[2], result[1]\n    return result",
                "def _join_non_unique(self, other, how=\"left\", return_indexers=False):\n    from pandas.core.reshape.merge import _get_join_indexers\n\n    left_idx, right_idx = _get_join_indexers(\n        [self._ndarray_values], [other._ndarray_values], how=how, sort=True\n    )\n\n    left_idx = ensure_platform_int(left_idx)\n    right_idx = ensure_platform_int(right_idx)\n\n    join_index = np.asarray(self._ndarray_values.take(left_idx))\n    mask = left_idx == -1\n    np.putmask(join_index, mask, other._ndarray_values.take(right_idx))\n\n    join_index = self._wrap_joined_index(join_index, other)\n\n    if return_indexers:\n        return join_index, left_idx, right_idx\n    else:\n        return join_index",
                "def _join_level(\n    self, other, level, how=\"left\", return_indexers=False, keep_order=True\n):\n    \"\"\"\n    The join method *only* affects the level of the resulting\n    MultiIndex. Otherwise it just exactly aligns the Index data to the\n    labels of the level in the MultiIndex.\n\n    If ```keep_order == True```, the order of the data indexed by the\n    MultiIndex will not be changed; otherwise, it will tie out\n    with `other`.\n    \"\"\"\n    from pandas.core.indexes.multi import MultiIndex\n\n    def _get_leaf_sorter(labels):\n        \"\"\"\n        Returns sorter for the inner most level while preserving the\n        order of higher levels.\n        \"\"\"\n        if labels[0].size == 0:\n            return np.empty(0, dtype=\"int64\")\n\n        if len(labels) == 1:\n            lab = ensure_int64(labels[0])\n            sorter, _ = libalgos.groupsort_indexer(lab, 1 + lab.max())\n            return sorter\n\n        # find indexers of beginning of each set of\n        # same-key labels w.r.t all but last level\n        tic = labels[0][:-1] != labels[0][1:]\n        for lab in labels[1:-1]:\n            tic |= lab[:-1] != lab[1:]\n\n        starts = np.hstack(([True], tic, [True])).nonzero()[0]\n        lab = ensure_int64(labels[-1])\n        return lib.get_level_sorter(lab, ensure_int64(starts))\n\n    if isinstance(self, MultiIndex) and isinstance(other, MultiIndex):\n        raise TypeError(\"Join on level between two MultiIndex objects is ambiguous\")\n\n    left, right = self, other\n\n    flip_order = not isinstance(self, MultiIndex)\n    if flip_order:\n        left, right = right, left\n        how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n\n    level = left._get_level_number(level)\n    old_level = left.levels[level]\n\n    if not right.is_unique:\n        raise NotImplementedError(\n            \"Index._join_level on non-unique index is not implemented\"\n        )\n\n    new_level, left_lev_indexer, right_lev_indexer = old_level.join(\n        right, how=how, return_indexers=True\n    )\n\n    if left_lev_indexer is None:\n        if keep_order or len(left) == 0:\n            left_indexer = None\n            join_index = left\n        else:  # sort the leaves\n            left_indexer = _get_leaf_sorter(left.codes[: level + 1])\n            join_index = left[left_indexer]\n\n    else:\n        left_lev_indexer = ensure_int64(left_lev_indexer)\n        rev_indexer = lib.get_reverse_indexer(left_lev_indexer, len(old_level))\n\n        new_lev_codes = algos.take_nd(\n            rev_indexer, left.codes[level], allow_fill=False\n        )\n\n        new_codes = list(left.codes)\n        new_codes[level] = new_lev_codes\n\n        new_levels = list(left.levels)\n        new_levels[level] = new_level\n\n        if keep_order:  # just drop missing values. o.w. keep order\n            left_indexer = np.arange(len(left), dtype=np.intp)\n            mask = new_lev_codes != -1\n            if not mask.all():\n                new_codes = [lab[mask] for lab in new_codes]\n                left_indexer = left_indexer[mask]\n\n        else:  # tie out the order with other\n            if level == 0:  # outer most level, take the fast route\n                ngroups = 1 + new_lev_codes.max()\n                left_indexer, counts = libalgos.groupsort_indexer(\n                    new_lev_codes, ngroups\n                )\n\n                # missing values are placed first; drop them!\n                left_indexer = left_indexer[counts[0] :]\n                new_codes = [lab[left_indexer] for lab in new_codes]\n\n            else:  # sort the leaves\n                mask = new_lev_codes != -1\n                mask_all = mask.all()\n                if not mask_all:\n                    new_codes = [lab[mask] for lab in new_codes]\n\n                left_indexer = _get_leaf_sorter(new_codes[: level + 1])\n                new_codes = [lab[left_indexer] for lab in new_codes]\n\n                # left_indexers are w.r.t masked frame.\n                # reverse to original frame!\n                if not mask_all:\n                    left_indexer = mask.nonzero()[0][left_indexer]\n\n        join_index = MultiIndex(\n            levels=new_levels,\n            codes=new_codes,\n            names=left.names,\n            verify_integrity=False,\n        )\n\n    if right_lev_indexer is not None:\n        right_indexer = algos.take_nd(\n            right_lev_indexer, join_index.codes[level], allow_fill=False\n        )\n    else:\n        right_indexer = join_index.codes[level]\n\n    if flip_order:\n        left_indexer, right_indexer = right_indexer, left_indexer\n\n    if return_indexers:\n        left_indexer = (\n            None if left_indexer is None else ensure_platform_int(left_indexer)\n        )\n        right_indexer = (\n            None if right_indexer is None else ensure_platform_int(right_indexer)\n        )\n        return join_index, left_indexer, right_indexer\n    else:\n        return join_index",
                "def _join_monotonic(self, other, how=\"left\", return_indexers=False):\n    if self.equals(other):\n        ret_index = other if how == \"right\" else self\n        if return_indexers:\n            return ret_index, None, None\n        else:\n            return ret_index\n\n    sv = self._ndarray_values\n    ov = other._ndarray_values\n\n    if self.is_unique and other.is_unique:\n        # We can perform much better than the general case\n        if how == \"left\":\n            join_index = self\n            lidx = None\n            ridx = self._left_indexer_unique(sv, ov)\n        elif how == \"right\":\n            join_index = other\n            lidx = self._left_indexer_unique(ov, sv)\n            ridx = None\n        elif how == \"inner\":\n            join_index, lidx, ridx = self._inner_indexer(sv, ov)\n            join_index = self._wrap_joined_index(join_index, other)\n        elif how == \"outer\":\n            join_index, lidx, ridx = self._outer_indexer(sv, ov)\n            join_index = self._wrap_joined_index(join_index, other)\n    else:\n        if how == \"left\":\n            join_index, lidx, ridx = self._left_indexer(sv, ov)\n        elif how == \"right\":\n            join_index, ridx, lidx = self._left_indexer(ov, sv)\n        elif how == \"inner\":\n            join_index, lidx, ridx = self._inner_indexer(sv, ov)\n        elif how == \"outer\":\n            join_index, lidx, ridx = self._outer_indexer(sv, ov)\n        join_index = self._wrap_joined_index(join_index, other)\n\n    if return_indexers:\n        lidx = None if lidx is None else ensure_platform_int(lidx)\n        ridx = None if ridx is None else ensure_platform_int(ridx)\n        return join_index, lidx, ridx\n    else:\n        return join_index",
                "def _wrap_joined_index(self, joined, other):\n    name = get_op_result_name(self, other)\n    return Index(joined, name=name)",
                "@property\ndef values(self) -> np.ndarray:\n    \"\"\"\n    Return an array representing the data in the Index.\n\n    .. warning::\n\n       We recommend using :attr:`Index.array` or\n       :meth:`Index.to_numpy`, depending on whether you need\n       a reference to the underlying data or a NumPy array.\n\n    Returns\n    -------\n    array: numpy.ndarray or ExtensionArray\n\n    See Also\n    --------\n    Index.array : Reference to the underlying data.\n    Index.to_numpy : A NumPy array representing the underlying data.\n    \"\"\"\n    return self._data.view(np.ndarray)",
                "@cache_readonly\n@Appender(IndexOpsMixin.array.__doc__)  # type: ignore\ndef array(self) -> ExtensionArray:\n    array = self._data\n    if isinstance(array, np.ndarray):\n        from pandas.core.arrays.numpy_ import PandasArray\n\n        array = PandasArray(array)\n    return array",
                "@property\ndef _values(self) -> Union[ExtensionArray, np.ndarray]:\n    \"\"\"\n    The best array representation.\n\n    This is an ndarray or ExtensionArray. This differs from\n    ``_ndarray_values``, which always returns an ndarray.\n\n    Both ``_values`` and ``_ndarray_values`` are consistent between\n    ``Series`` and ``Index`` (except for datetime64[ns], which returns\n    a DatetimeArray for _values on the Index, but ndarray[M8ns] on the\n    Series).\n\n    It may differ from the public '.values' method.\n\n    index             | values          | _values       | _ndarray_values |\n    ----------------- | --------------- | ------------- | --------------- |\n    Index             | ndarray         | ndarray       | ndarray         |\n    CategoricalIndex  | Categorical     | Categorical   | ndarray[int]    |\n    DatetimeIndex     | ndarray[M8ns]   | DatetimeArray | ndarray[M8ns]   |\n    DatetimeIndex[tz] | ndarray[M8ns]   | DatetimeArray | ndarray[M8ns]   |\n    PeriodIndex       | ndarray[object] | PeriodArray   | ndarray[int]    |\n    IntervalIndex     | IntervalArray   | IntervalArray | ndarray[object] |\n\n    See Also\n    --------\n    values\n    _ndarray_values\n    \"\"\"\n    return self._data",
                "def _internal_get_values(self) -> np.ndarray:\n    \"\"\"\n    Return `Index` data as an `numpy.ndarray`.\n\n    Returns\n    -------\n    numpy.ndarray\n        A one-dimensional numpy array of the `Index` values.\n\n    See Also\n    --------\n    Index.values : The attribute that _internal_get_values wraps.\n\n    Examples\n    --------\n    Getting the `Index` values of a `DataFrame`:\n\n    >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    ...                    index=['a', 'b', 'c'], columns=['A', 'B', 'C'])\n    >>> df\n       A  B  C\n    a  1  2  3\n    b  4  5  6\n    c  7  8  9\n    >>> df.index._internal_get_values()\n    array(['a', 'b', 'c'], dtype=object)\n\n    Standalone `Index` values:\n\n    >>> idx = pd.Index(['1', '2', '3'])\n    >>> idx._internal_get_values()\n    array(['1', '2', '3'], dtype=object)\n\n    `MultiIndex` arrays also have only one dimension:\n\n    >>> midx = pd.MultiIndex.from_arrays([[1, 2, 3], ['a', 'b', 'c']],\n    ...                                  names=('number', 'letter'))\n    >>> midx._internal_get_values()\n    array([(1, 'a'), (2, 'b'), (3, 'c')], dtype=object)\n    >>> midx._internal_get_values().ndim\n    1\n    \"\"\"\n    return self.values",
                "@Appender(IndexOpsMixin.memory_usage.__doc__)\ndef memory_usage(self, deep: bool = False) -> int:\n    result = super().memory_usage(deep=deep)\n\n    # include our engine hashtable\n    result += self._engine.sizeof(deep=deep)\n    return result",
                "def where(self, cond, other=None):\n    \"\"\"\n    Return an Index of same shape as self and whose corresponding\n    entries are from self where cond is True and otherwise are from\n    other.\n\n    Parameters\n    ----------\n    cond : bool array-like with the same length as self\n    other : scalar, or array-like\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    if other is None:\n        other = self._na_value\n\n    dtype = self.dtype\n    values = self.values\n\n    if is_bool(other) or is_bool_dtype(other):\n\n        # bools force casting\n        values = values.astype(object)\n        dtype = None\n\n    values = np.where(cond, values, other)\n\n    if self._is_numeric_dtype and np.any(isna(values)):\n        # We can't coerce to the numeric dtype of \"self\" (unless\n        # it's float) if there are NaN values in our output.\n        dtype = None\n\n    return self._shallow_copy_with_infer(values, dtype=dtype)",
                "@classmethod\ndef _scalar_data_error(cls, data):\n    # We return the TypeError so that we can raise it from the constructor\n    #  in order to keep mypy happy\n    return TypeError(\n        f\"{cls.__name__}(...) must be called with a collection of some \"\n        f\"kind, {repr(data)} was passed\"\n    )",
                "@classmethod\ndef _string_data_error(cls, data):\n    raise TypeError(\n        \"String dtype not supported, you may need \"\n        \"to explicitly cast to a numeric type\"\n    )",
                "def _coerce_scalar_to_index(self, item):\n    \"\"\"\n    We need to coerce a scalar to a compat for our index type.\n\n    Parameters\n    ----------\n    item : scalar item to coerce\n    \"\"\"\n    dtype = self.dtype\n\n    if self._is_numeric_dtype and isna(item):\n        # We can't coerce to the numeric dtype of \"self\" (unless\n        # it's float) if there are NaN values in our output.\n        dtype = None\n\n    return Index([item], dtype=dtype, **self._get_attributes_dict())",
                "def _to_safe_for_reshape(self):\n    \"\"\"\n    Convert to object if we are a categorical.\n    \"\"\"\n    return self",
                "def _convert_for_op(self, value):\n    \"\"\"\n    Convert value to be insertable to ndarray.\n    \"\"\"\n    return value",
                "def _assert_can_do_op(self, value):\n    \"\"\"\n    Check value is valid for scalar op.\n    \"\"\"\n    if not is_scalar(value):\n        raise TypeError(f\"'value' must be a scalar, passed: {type(value).__name__}\")",
                "@property\ndef _has_complex_internals(self) -> bool:\n    \"\"\"\n    Indicates if an index is not directly backed by a numpy array\n    \"\"\"\n    # used to avoid libreduction code paths, which raise or require conversion\n    return False",
                "def _is_memory_usage_qualified(self) -> bool:\n    \"\"\"\n    Return a boolean if we need a qualified .info display.\n    \"\"\"\n    return self.is_object()",
                "def is_type_compatible(self, kind) -> bool:\n    \"\"\"\n    Whether the index type is compatible with the provided type.\n    \"\"\"\n    return kind == self.inferred_type",
                "def __contains__(self, key: Any) -> bool:\n    \"\"\"\n    Return a boolean indicating whether the provided key is in the index.\n\n    Parameters\n    ----------\n    key : label\n        The key to check if it is present in the index.\n\n    Returns\n    -------\n    bool\n        Whether the key search is in the index.\n\n    Raises\n    ------\n    TypeError\n        If the key is not hashable.\n\n    See Also\n    --------\n    Index.isin : Returns an ndarray of boolean dtype indicating whether the\n        list-like key is in the index.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx\n    Int64Index([1, 2, 3, 4], dtype='int64')\n\n    >>> 2 in idx\n    True\n    >>> 6 in idx\n    False\n    \"\"\"\n    hash(key)\n    try:\n        return key in self._engine\n    except (OverflowError, TypeError, ValueError):\n        return False",
                "def __hash__(self):\n    raise TypeError(f\"unhashable type: {repr(type(self).__name__)}\")",
                "def __setitem__(self, key, value):\n    raise TypeError(\"Index does not support mutable operations\")",
                "def __getitem__(self, key):\n    \"\"\"\n    Override numpy.ndarray's __getitem__ method to work as desired.\n\n    This function adds lists and Series as valid boolean indexers\n    (ndarrays only supports ndarray with dtype=bool).\n\n    If resulting ndim != 1, plain ndarray is returned instead of\n    corresponding `Index` subclass.\n\n    \"\"\"\n    # There's no custom logic to be implemented in __getslice__, so it's\n    # not overloaded intentionally.\n    getitem = self._data.__getitem__\n    promote = self._shallow_copy\n\n    if is_scalar(key):\n        key = com.cast_scalar_indexer(key)\n        return getitem(key)\n\n    if isinstance(key, slice):\n        # This case is separated from the conditional above to avoid\n        # pessimization of basic indexing.\n        return promote(getitem(key))\n\n    if com.is_bool_indexer(key):\n        key = np.asarray(key, dtype=bool)\n\n    key = com.values_from_object(key)\n    result = getitem(key)\n    if not is_scalar(result):\n        if np.ndim(result) > 1:\n            deprecate_ndim_indexing(result)\n            return result\n        return promote(result)\n    else:\n        return result",
                "def _can_hold_identifiers_and_holds_name(self, name) -> bool:\n    \"\"\"\n    Faster check for ``name in self`` when we know `name` is a Python\n    identifier (e.g. in NDFrame.__getattr__, which hits this to support\n    . key lookup). For indexes that can't hold identifiers (everything\n    but object & categorical) we just return False.\n\n    https://github.com/pandas-dev/pandas/issues/19764\n    \"\"\"\n    if self.is_object() or self.is_categorical():\n        return name in self\n    return False",
                "def append(self, other):\n    \"\"\"\n    Append a collection of Index options together.\n\n    Parameters\n    ----------\n    other : Index or list/tuple of indices\n\n    Returns\n    -------\n    appended : Index\n    \"\"\"\n    to_concat = [self]\n\n    if isinstance(other, (list, tuple)):\n        to_concat = to_concat + list(other)\n    else:\n        to_concat.append(other)\n\n    for obj in to_concat:\n        if not isinstance(obj, Index):\n            raise TypeError(\"all inputs must be Index\")\n\n    names = {obj.name for obj in to_concat}\n    name = None if len(names) > 1 else self.name\n\n    return self._concat(to_concat, name)",
                "def _concat(self, to_concat, name):\n\n    typs = _concat.get_dtype_kinds(to_concat)\n\n    if len(typs) == 1:\n        return self._concat_same_dtype(to_concat, name=name)\n    return Index._concat_same_dtype(self, to_concat, name=name)",
                "def _concat_same_dtype(self, to_concat, name):\n    \"\"\"\n    Concatenate to_concat which has the same class.\n    \"\"\"\n    # must be overridden in specific classes\n    klasses = (\n        ABCDatetimeIndex,\n        ABCTimedeltaIndex,\n        ABCPeriodIndex,\n        ExtensionArray,\n        ABCIntervalIndex,\n    )\n    to_concat = [\n        x.astype(object) if isinstance(x, klasses) else x for x in to_concat\n    ]\n\n    self = to_concat[0]\n    attribs = self._get_attributes_dict()\n    attribs[\"name\"] = name\n\n    to_concat = [x._values if isinstance(x, Index) else x for x in to_concat]\n\n    return self._shallow_copy_with_infer(np.concatenate(to_concat), **attribs)",
                "def putmask(self, mask, value):\n    \"\"\"\n    Return a new Index of the values set with the mask.\n\n    Returns\n    -------\n    Index\n\n    See Also\n    --------\n    numpy.ndarray.putmask\n    \"\"\"\n    values = self.values.copy()\n    try:\n        np.putmask(values, mask, self._convert_for_op(value))\n        return self._shallow_copy(values)\n    except (ValueError, TypeError) as err:\n        if is_object_dtype(self):\n            raise err\n\n        # coerces to object\n        return self.astype(object).putmask(mask, value)",
                "def equals(self, other) -> bool:\n    \"\"\"\n    Determine if two Index objects contain the same elements.\n\n    Returns\n    -------\n    bool\n        True if \"other\" is an Index and it has the same elements as calling\n        index; False otherwise.\n    \"\"\"\n    if self.is_(other):\n        return True\n\n    if not isinstance(other, Index):\n        return False\n\n    if is_object_dtype(self) and not is_object_dtype(other):\n        # if other is not object, use other's logic for coercion\n        return other.equals(self)\n\n    if isinstance(other, ABCMultiIndex):\n        # d-level MultiIndex can equal d-tuple Index\n        if not is_object_dtype(self.dtype):\n            if self.nlevels != other.nlevels:\n                return False\n\n    return array_equivalent(\n        com.values_from_object(self), com.values_from_object(other)\n    )",
                "def identical(self, other) -> bool:\n    \"\"\"\n    Similar to equals, but check that other comparable attributes are\n    also equal.\n\n    Returns\n    -------\n    bool\n        If two Index objects have equal elements and same type True,\n        otherwise False.\n    \"\"\"\n    return (\n        self.equals(other)\n        and all(\n            (\n                getattr(self, c, None) == getattr(other, c, None)\n                for c in self._comparables\n            )\n        )\n        and type(self) == type(other)\n    )",
                "def asof(self, label):\n    \"\"\"\n    Return the label from the index, or, if not present, the previous one.\n\n    Assuming that the index is sorted, return the passed index label if it\n    is in the index, or return the previous index label if the passed one\n    is not in the index.\n\n    Parameters\n    ----------\n    label : object\n        The label up to which the method returns the latest index label.\n\n    Returns\n    -------\n    object\n        The passed label if it is in the index. The previous label if the\n        passed label is not in the sorted index or `NaN` if there is no\n        such label.\n\n    See Also\n    --------\n    Series.asof : Return the latest value in a Series up to the\n        passed index.\n    merge_asof : Perform an asof merge (similar to left join but it\n        matches on nearest key rather than equal key).\n    Index.get_loc : An `asof` is a thin wrapper around `get_loc`\n        with method='pad'.\n\n    Examples\n    --------\n    `Index.asof` returns the latest index label up to the passed label.\n\n    >>> idx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])\n    >>> idx.asof('2014-01-01')\n    '2013-12-31'\n\n    If the label is in the index, the method returns the passed label.\n\n    >>> idx.asof('2014-01-02')\n    '2014-01-02'\n\n    If all of the labels in the index are later than the passed label,\n    NaN is returned.\n\n    >>> idx.asof('1999-01-02')\n    nan\n\n    If the index is not sorted, an error is raised.\n\n    >>> idx_not_sorted = pd.Index(['2013-12-31', '2015-01-02',\n    ...                            '2014-01-03'])\n    >>> idx_not_sorted.asof('2013-12-31')\n    Traceback (most recent call last):\n    ValueError: index must be monotonic increasing or decreasing\n    \"\"\"\n    try:\n        loc = self.get_loc(label, method=\"pad\")\n    except KeyError:\n        return self._na_value\n    else:\n        if isinstance(loc, slice):\n            loc = loc.indices(len(self))[-1]\n        return self[loc]",
                "def asof_locs(self, where, mask):\n    \"\"\"\n    Find the locations (indices) of the labels from the index for\n    every entry in the `where` argument.\n\n    As in the `asof` function, if the label (a particular entry in\n    `where`) is not in the index, the latest index label up to the\n    passed label is chosen and its index returned.\n\n    If all of the labels in the index are later than a label in `where`,\n    -1 is returned.\n\n    `mask` is used to ignore NA values in the index during calculation.\n\n    Parameters\n    ----------\n    where : Index\n        An Index consisting of an array of timestamps.\n    mask : array-like\n        Array of booleans denoting where values in the original\n        data are not NA.\n\n    Returns\n    -------\n    numpy.ndarray\n        An array of locations (indices) of the labels from the Index\n        which correspond to the return values of the `asof` function\n        for every element in `where`.\n    \"\"\"\n    locs = self.values[mask].searchsorted(where.values, side=\"right\")\n    locs = np.where(locs > 0, locs - 1, 0)\n\n    result = np.arange(len(self))[mask].take(locs)\n\n    first = mask.argmax()\n    result[(locs == 0) & (where.values < self.values[first])] = -1\n\n    return result",
                "def sort_values(self, return_indexer: bool = False, ascending: bool = True):\n    \"\"\"\n    Return a sorted copy of the index.\n\n    Return a sorted copy of the index, and optionally return the indices\n    that sorted the index itself.\n\n    Parameters\n    ----------\n    return_indexer : bool, default False\n        Should the indices that would sort the index be returned.\n    ascending : bool, default True\n        Should the index values be sorted in an ascending order.\n\n    Returns\n    -------\n    sorted_index : pandas.Index\n        Sorted copy of the index.\n    indexer : numpy.ndarray, optional\n        The indices that the index itself was sorted by.\n\n    See Also\n    --------\n    Series.sort_values : Sort values of a Series.\n    DataFrame.sort_values : Sort values in a DataFrame.\n\n    Examples\n    --------\n    >>> idx = pd.Index([10, 100, 1, 1000])\n    >>> idx\n    Int64Index([10, 100, 1, 1000], dtype='int64')\n\n    Sort values in ascending order (default behavior).\n\n    >>> idx.sort_values()\n    Int64Index([1, 10, 100, 1000], dtype='int64')\n\n    Sort values in descending order, and also get the indices `idx` was\n    sorted by.\n\n    >>> idx.sort_values(ascending=False, return_indexer=True)\n    (Int64Index([1000, 100, 10, 1], dtype='int64'), array([3, 1, 0, 2]))\n    \"\"\"\n    _as = self.argsort()\n    if not ascending:\n        _as = _as[::-1]\n\n    sorted_index = self.take(_as)\n\n    if return_indexer:\n        return sorted_index, _as\n    else:\n        return sorted_index",
                "def sort(self, *args, **kwargs):\n    \"\"\"\n    Use sort_values instead.\n    \"\"\"\n    raise TypeError(\"cannot sort an Index object in-place, use sort_values instead\")",
                "def shift(self, periods=1, freq=None):\n    \"\"\"\n    Shift index by desired number of time frequency increments.\n\n    This method is for shifting the values of datetime-like indexes\n    by a specified time increment a given number of times.\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Number of periods (or increments) to shift by,\n        can be positive or negative.\n    freq : pandas.DateOffset, pandas.Timedelta or str, optional\n        Frequency increment to shift by.\n        If None, the index is shifted by its own `freq` attribute.\n        Offset aliases are valid strings, e.g., 'D', 'W', 'M' etc.\n\n    Returns\n    -------\n    pandas.Index\n        Shifted index.\n\n    See Also\n    --------\n    Series.shift : Shift values of Series.\n\n    Notes\n    -----\n    This method is only implemented for datetime-like index classes,\n    i.e., DatetimeIndex, PeriodIndex and TimedeltaIndex.\n\n    Examples\n    --------\n    Put the first 5 month starts of 2011 into an index.\n\n    >>> month_starts = pd.date_range('1/1/2011', periods=5, freq='MS')\n    >>> month_starts\n    DatetimeIndex(['2011-01-01', '2011-02-01', '2011-03-01', '2011-04-01',\n                   '2011-05-01'],\n                  dtype='datetime64[ns]', freq='MS')\n\n    Shift the index by 10 days.\n\n    >>> month_starts.shift(10, freq='D')\n    DatetimeIndex(['2011-01-11', '2011-02-11', '2011-03-11', '2011-04-11',\n                   '2011-05-11'],\n                  dtype='datetime64[ns]', freq=None)\n\n    The default value of `freq` is the `freq` attribute of the index,\n    which is 'MS' (month start) in this example.\n\n    >>> month_starts.shift(10)\n    DatetimeIndex(['2011-11-01', '2011-12-01', '2012-01-01', '2012-02-01',\n                   '2012-03-01'],\n                  dtype='datetime64[ns]', freq='MS')\n    \"\"\"\n    raise NotImplementedError(f\"Not supported for type {type(self).__name__}\")",
                "def argsort(self, *args, **kwargs) -> np.ndarray:\n    \"\"\"\n    Return the integer indices that would sort the index.\n\n    Parameters\n    ----------\n    *args\n        Passed to `numpy.ndarray.argsort`.\n    **kwargs\n        Passed to `numpy.ndarray.argsort`.\n\n    Returns\n    -------\n    numpy.ndarray\n        Integer indices that would sort the index if used as\n        an indexer.\n\n    See Also\n    --------\n    numpy.argsort : Similar method for NumPy arrays.\n    Index.sort_values : Return sorted copy of Index.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['b', 'a', 'd', 'c'])\n    >>> idx\n    Index(['b', 'a', 'd', 'c'], dtype='object')\n\n    >>> order = idx.argsort()\n    >>> order\n    array([1, 0, 3, 2])\n\n    >>> idx[order]\n    Index(['a', 'b', 'c', 'd'], dtype='object')\n    \"\"\"\n    result = self.asi8\n    if result is None:\n        result = np.array(self)\n    return result.argsort(*args, **kwargs)",
                "def get_value(self, series: \"Series\", key):\n    \"\"\"\n    Fast lookup of value from 1-dimensional ndarray. Only use this if you\n    know what you're doing.\n\n    Returns\n    -------\n    scalar or Series\n    \"\"\"\n    if not is_scalar(key):\n        # if key is not a scalar, directly raise an error (the code below\n        # would convert to numpy arrays and raise later any way) - GH29926\n        raise InvalidIndexError(key)\n\n    try:\n        # GH 20882, 21257\n        # First try to convert the key to a location\n        # If that fails, raise a KeyError if an integer\n        # index, otherwise, see if key is an integer, and\n        # try that\n        loc = self.get_loc(key)\n    except KeyError:\n        if not self._should_fallback_to_positional():\n            raise\n        elif is_integer(key):\n            # If the Index cannot hold integer, then this is unambiguously\n            #  a locational lookup.\n            loc = key\n        else:\n            raise\n\n    return self._get_values_for_loc(series, loc, key)",
                "def _should_fallback_to_positional(self) -> bool:\n    \"\"\"\n    If an integer key is not found, should we fall back to positional indexing?\n    \"\"\"\n    if len(self) > 0 and (self.holds_integer() or self.is_boolean()):\n        return False\n    return True",
                "def _get_values_for_loc(self, series: \"Series\", loc, key):\n    \"\"\"\n    Do a positional lookup on the given Series, returning either a scalar\n    or a Series.\n\n    Assumes that `series.index is self`\n\n    key is included for MultiIndex compat.\n    \"\"\"\n    if is_integer(loc):\n        return series._values[loc]\n\n    return series.iloc[loc]",
                "def set_value(self, arr, key, value):\n    \"\"\"\n    Fast lookup of value from 1-dimensional ndarray.\n\n    .. deprecated:: 1.0\n\n    Notes\n    -----\n    Only use this if you know what you're doing.\n    \"\"\"\n    warnings.warn(\n        (\n            \"The 'set_value' method is deprecated, and \"\n            \"will be removed in a future version.\"\n        ),\n        FutureWarning,\n        stacklevel=2,\n    )\n    loc = self._engine.get_loc(key)\n    validate_numeric_casting(arr.dtype, value)\n    arr[loc] = value",
                "@Appender(_index_shared_docs[\"get_indexer_non_unique\"] % _index_doc_kwargs)\ndef get_indexer_non_unique(self, target):\n    target = ensure_index(target)\n    pself, ptarget = self._maybe_promote(target)\n    if pself is not self or ptarget is not target:\n        return pself.get_indexer_non_unique(ptarget)\n\n    if is_categorical(target):\n        tgt_values = np.asarray(target)\n    elif self.is_all_dates and target.is_all_dates:  # GH 30399\n        tgt_values = target.asi8\n    else:\n        tgt_values = target._ndarray_values\n\n    indexer, missing = self._engine.get_indexer_non_unique(tgt_values)\n    return ensure_platform_int(indexer), missing",
                "def get_indexer_for(self, target, **kwargs):\n    \"\"\"\n    Guaranteed return of an indexer even when non-unique.\n\n    This dispatches to get_indexer or get_indexer_non_unique\n    as appropriate.\n\n    Returns\n    -------\n    numpy.ndarray\n        List of indices.\n    \"\"\"\n    if self.is_unique:\n        return self.get_indexer(target, **kwargs)\n    indexer, _ = self.get_indexer_non_unique(target, **kwargs)\n    return indexer",
                "def _maybe_promote(self, other):\n    # A hack, but it works\n\n    if self.inferred_type == \"date\" and isinstance(other, ABCDatetimeIndex):\n        return type(other)(self), other\n    elif self.inferred_type == \"boolean\":\n        if not is_object_dtype(self.dtype):\n            return self.astype(\"object\"), other.astype(\"object\")\n    return self, other",
                "def groupby(self, values) -> PrettyDict[Hashable, np.ndarray]:\n    \"\"\"\n    Group the index labels by a given array of values.\n\n    Parameters\n    ----------\n    values : array\n        Values used to determine the groups.\n\n    Returns\n    -------\n    dict\n        {group name -> group labels}\n    \"\"\"\n    # TODO: if we are a MultiIndex, we can do better\n    # that converting to tuples\n    if isinstance(values, ABCMultiIndex):\n        values = values.values\n    values = ensure_categorical(values)\n    result = values._reverse_indexer()\n\n    # map to the label\n    result = {k: self.take(v) for k, v in result.items()}\n\n    return PrettyDict(result)",
                "def map(self, mapper, na_action=None):\n    \"\"\"\n    Map values using input correspondence (a dict, Series, or function).\n\n    Parameters\n    ----------\n    mapper : function, dict, or Series\n        Mapping correspondence.\n    na_action : {None, 'ignore'}\n        If 'ignore', propagate NA values, without passing them to the\n        mapping correspondence.\n\n    Returns\n    -------\n    applied : Union[Index, MultiIndex], inferred\n        The output of the mapping function applied to the index.\n        If the function returns a tuple with more than one element\n        a MultiIndex will be returned.\n    \"\"\"\n    from pandas.core.indexes.multi import MultiIndex\n\n    new_values = super()._map_values(mapper, na_action=na_action)\n\n    attributes = self._get_attributes_dict()\n\n    # we can return a MultiIndex\n    if new_values.size and isinstance(new_values[0], tuple):\n        if isinstance(self, MultiIndex):\n            names = self.names\n        elif attributes.get(\"name\"):\n            names = [attributes.get(\"name\")] * len(new_values[0])\n        else:\n            names = None\n        return MultiIndex.from_tuples(new_values, names=names)\n\n    attributes[\"copy\"] = False\n    if not new_values.size:\n        # empty\n        attributes[\"dtype\"] = self.dtype\n\n    return Index(new_values, **attributes)",
                "def isin(self, values, level=None):\n    \"\"\"\n    Return a boolean array where the index values are in `values`.\n\n    Compute boolean array of whether each index value is found in the\n    passed set of values. The length of the returned boolean array matches\n    the length of the index.\n\n    Parameters\n    ----------\n    values : set or list-like\n        Sought values.\n    level : str or int, optional\n        Name or position of the index level to use (if the index is a\n        `MultiIndex`).\n\n    Returns\n    -------\n    is_contained : ndarray\n        NumPy array of boolean values.\n\n    See Also\n    --------\n    Series.isin : Same for Series.\n    DataFrame.isin : Same method for DataFrames.\n\n    Notes\n    -----\n    In the case of `MultiIndex` you must either specify `values` as a\n    list-like object containing tuples that are the same length as the\n    number of levels, or specify `level`. Otherwise it will raise a\n    ``ValueError``.\n\n    If `level` is specified:\n\n    - if it is the name of one *and only one* index level, use that level;\n    - otherwise it should be a number indicating level position.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1,2,3])\n    >>> idx\n    Int64Index([1, 2, 3], dtype='int64')\n\n    Check whether each index value in a list of values.\n    >>> idx.isin([1, 4])\n    array([ True, False, False])\n\n    >>> midx = pd.MultiIndex.from_arrays([[1,2,3],\n    ...                                  ['red', 'blue', 'green']],\n    ...                                  names=('number', 'color'))\n    >>> midx\n    MultiIndex(levels=[[1, 2, 3], ['blue', 'green', 'red']],\n               codes=[[0, 1, 2], [2, 0, 1]],\n               names=['number', 'color'])\n\n    Check whether the strings in the 'color' level of the MultiIndex\n    are in a list of colors.\n\n    >>> midx.isin(['red', 'orange', 'yellow'], level='color')\n    array([ True, False, False])\n\n    To check across the levels of a MultiIndex, pass a list of tuples:\n\n    >>> midx.isin([(1, 'red'), (3, 'red')])\n    array([ True, False, False])\n\n    For a DatetimeIndex, string values in `values` are converted to\n    Timestamps.\n\n    >>> dates = ['2000-03-11', '2000-03-12', '2000-03-13']\n    >>> dti = pd.to_datetime(dates)\n    >>> dti\n    DatetimeIndex(['2000-03-11', '2000-03-12', '2000-03-13'],\n    dtype='datetime64[ns]', freq=None)\n\n    >>> dti.isin(['2000-03-11'])\n    array([ True, False, False])\n    \"\"\"\n    if level is not None:\n        self._validate_index_level(level)\n    return algos.isin(self, values)",
                "def _get_string_slice(self, key: str_t, use_lhs: bool = True, use_rhs: bool = True):\n    # this is for partial string indexing,\n    # overridden in DatetimeIndex, TimedeltaIndex and PeriodIndex\n    raise NotImplementedError",
                "def slice_indexer(self, start=None, end=None, step=None, kind=None):\n    \"\"\"\n    For an ordered or unique index, compute the slice indexer for input\n    labels and step.\n\n    Parameters\n    ----------\n    start : label, default None\n        If None, defaults to the beginning.\n    end : label, default None\n        If None, defaults to the end.\n    step : int, default None\n    kind : str, default None\n\n    Returns\n    -------\n    indexer : slice\n\n    Raises\n    ------\n    KeyError : If key does not exist, or key is not unique and index is\n        not ordered.\n\n    Notes\n    -----\n    This function assumes that the data is sorted, so use at your own peril\n\n    Examples\n    --------\n    This is a method on all index types. For example you can do:\n\n    >>> idx = pd.Index(list('abcd'))\n    >>> idx.slice_indexer(start='b', end='c')\n    slice(1, 3)\n\n    >>> idx = pd.MultiIndex.from_arrays([list('abcd'), list('efgh')])\n    >>> idx.slice_indexer(start='b', end=('c', 'g'))\n    slice(1, 3)\n    \"\"\"\n    start_slice, end_slice = self.slice_locs(start, end, step=step, kind=kind)\n\n    # return a slice\n    if not is_scalar(start_slice):\n        raise AssertionError(\"Start slice bound is non-scalar\")\n    if not is_scalar(end_slice):\n        raise AssertionError(\"End slice bound is non-scalar\")\n\n    return slice(start_slice, end_slice, step)",
                "def _maybe_cast_indexer(self, key):\n    \"\"\"\n    If we have a float key and are not a floating index, then try to cast\n    to an int if equivalent.\n    \"\"\"\n    if not self.is_floating():\n        return com.cast_scalar_indexer(key)\n    return key",
                "def _validate_indexer(self, form: str_t, key, kind: str_t):\n    \"\"\"\n    If we are positional indexer, validate that we have appropriate\n    typed bounds must be an integer.\n    \"\"\"\n    assert kind in [\"getitem\", \"iloc\"]\n\n    if key is None:\n        pass\n    elif is_integer(key):\n        pass\n    else:\n        self._invalid_indexer(form, key)",
                "def _maybe_cast_slice_bound(self, label, side: str_t, kind):\n    \"\"\"\n    This function should be overloaded in subclasses that allow non-trivial\n    casting on label-slice bounds, e.g. datetime-like indices allowing\n    strings containing formatted datetimes.\n\n    Parameters\n    ----------\n    label : object\n    side : {'left', 'right'}\n    kind : {'loc', 'getitem'} or None\n\n    Returns\n    -------\n    label : object\n\n    Notes\n    -----\n    Value of `side` parameter should be validated in caller.\n    \"\"\"\n    assert kind in [\"loc\", \"getitem\", None]\n\n    # We are a plain index here (sub-class override this method if they\n    # wish to have special treatment for floats/ints, e.g. Float64Index and\n    # datetimelike Indexes\n    # reject them\n    if is_float(label):\n        self._invalid_indexer(\"slice\", label)\n\n    # we are trying to find integer bounds on a non-integer based index\n    # this is rejected (generally .loc gets you here)\n    elif is_integer(label):\n        self._invalid_indexer(\"slice\", label)\n\n    return label",
                "def _searchsorted_monotonic(self, label, side=\"left\"):\n    if self.is_monotonic_increasing:\n        return self.searchsorted(label, side=side)\n    elif self.is_monotonic_decreasing:\n        # np.searchsorted expects ascending sort order, have to reverse\n        # everything for it to work (element ordering, search side and\n        # resulting value).\n        pos = self[::-1].searchsorted(\n            label, side=\"right\" if side == \"left\" else \"left\"\n        )\n        return len(self) - pos\n\n    raise ValueError(\"index must be monotonic increasing or decreasing\")",
                "def get_slice_bound(self, label, side: str_t, kind) -> int:\n    \"\"\"\n    Calculate slice bound that corresponds to given label.\n\n    Returns leftmost (one-past-the-rightmost if ``side=='right'``) position\n    of given label.\n\n    Parameters\n    ----------\n    label : object\n    side : {'left', 'right'}\n    kind : {'loc', 'getitem'} or None\n\n    Returns\n    -------\n    int\n        Index of label.\n    \"\"\"\n    assert kind in [\"loc\", \"getitem\", None]\n\n    if side not in (\"left\", \"right\"):\n        raise ValueError(\n            \"Invalid value for side kwarg, must be either \"\n            f\"'left' or 'right': {side}\"\n        )\n\n    original_label = label\n\n    # For datetime indices label may be a string that has to be converted\n    # to datetime boundary according to its resolution.\n    label = self._maybe_cast_slice_bound(label, side, kind)\n\n    # we need to look up the label\n    try:\n        slc = self.get_loc(label)\n    except KeyError as err:\n        try:\n            return self._searchsorted_monotonic(label, side)\n        except ValueError:\n            # raise the original KeyError\n            raise err\n\n    if isinstance(slc, np.ndarray):\n        # get_loc may return a boolean array or an array of indices, which\n        # is OK as long as they are representable by a slice.\n        if is_bool_dtype(slc):\n            slc = lib.maybe_booleans_to_slice(slc.view(\"u1\"))\n        else:\n            slc = lib.maybe_indices_to_slice(slc.astype(\"i8\"), len(self))\n        if isinstance(slc, np.ndarray):\n            raise KeyError(\n                f\"Cannot get {side} slice bound for non-unique \"\n                f\"label: {repr(original_label)}\"\n            )\n\n    if isinstance(slc, slice):\n        if side == \"left\":\n            return slc.start\n        else:\n            return slc.stop\n    else:\n        if side == \"right\":\n            return slc + 1\n        else:\n            return slc",
                "def slice_locs(self, start=None, end=None, step=None, kind=None):\n    \"\"\"\n    Compute slice locations for input labels.\n\n    Parameters\n    ----------\n    start : label, default None\n        If None, defaults to the beginning.\n    end : label, default None\n        If None, defaults to the end.\n    step : int, defaults None\n        If None, defaults to 1.\n    kind : {'loc', 'getitem'} or None\n\n    Returns\n    -------\n    start, end : int\n\n    See Also\n    --------\n    Index.get_loc : Get location for a single label.\n\n    Notes\n    -----\n    This method only works if the index is monotonic or unique.\n\n    Examples\n    --------\n    >>> idx = pd.Index(list('abcd'))\n    >>> idx.slice_locs(start='b', end='c')\n    (1, 3)\n    \"\"\"\n    inc = step is None or step >= 0\n\n    if not inc:\n        # If it's a reverse slice, temporarily swap bounds.\n        start, end = end, start\n\n    # GH 16785: If start and end happen to be date strings with UTC offsets\n    # attempt to parse and check that the offsets are the same\n    if isinstance(start, (str, datetime)) and isinstance(end, (str, datetime)):\n        try:\n            ts_start = Timestamp(start)\n            ts_end = Timestamp(end)\n        except (ValueError, TypeError):\n            pass\n        else:\n            if not tz_compare(ts_start.tzinfo, ts_end.tzinfo):\n                raise ValueError(\"Both dates must have the same UTC offset\")\n\n    start_slice = None\n    if start is not None:\n        start_slice = self.get_slice_bound(start, \"left\", kind)\n    if start_slice is None:\n        start_slice = 0\n\n    end_slice = None\n    if end is not None:\n        end_slice = self.get_slice_bound(end, \"right\", kind)\n    if end_slice is None:\n        end_slice = len(self)\n\n    if not inc:\n        # Bounds at this moment are swapped, swap them back and shift by 1.\n        #\n        # slice_locs('B', 'A', step=-1): s='B', e='A'\n        #\n        #              s='A'                 e='B'\n        # AFTER SWAP:    |                     |\n        #                v ------------------> V\n        #           -----------------------------------\n        #           | | |A|A|A|A| | | | | |B|B| | | | |\n        #           -----------------------------------\n        #              ^ <------------------ ^\n        # SHOULD BE:   |                     |\n        #           end=s-1              start=e-1\n        #\n        end_slice, start_slice = start_slice - 1, end_slice - 1\n\n        # i == -1 triggers ``len(self) + i`` selection that points to the\n        # last element, not before-the-first one, subtracting len(self)\n        # compensates that.\n        if end_slice == -1:\n            end_slice -= len(self)\n        if start_slice == -1:\n            start_slice -= len(self)\n\n    return start_slice, end_slice",
                "def delete(self, loc):\n    \"\"\"\n    Make new Index with passed location(-s) deleted.\n\n    Parameters\n    ----------\n    loc : int or list of int\n        Location of item(-s) which will be deleted.\n        Use a list of locations to delete more than one value at the same time.\n\n    Returns\n    -------\n    Index\n        New Index with passed location(-s) deleted.\n\n    See Also\n    --------\n    numpy.delete : Delete any rows and column from NumPy array (ndarray).\n\n    Examples\n    --------\n    >>> idx = pd.Index(['a', 'b', 'c'])\n    >>> idx.delete(1)\n    Index(['a', 'c'], dtype='object')\n\n    >>> idx = pd.Index(['a', 'b', 'c'])\n    >>> idx.delete([0, 2])\n    Index(['b'], dtype='object')\n    \"\"\"\n    return self._shallow_copy(np.delete(self._data, loc))",
                "def insert(self, loc: int, item):\n    \"\"\"\n    Make new Index inserting new item at location.\n\n    Follows Python list.append semantics for negative values.\n\n    Parameters\n    ----------\n    loc : int\n    item : object\n\n    Returns\n    -------\n    new_index : Index\n    \"\"\"\n    _self = np.asarray(self)\n    item = self._coerce_scalar_to_index(item)._ndarray_values\n    idx = np.concatenate((_self[:loc], item, _self[loc:]))\n    return self._shallow_copy_with_infer(idx)",
                "def drop(self, labels, errors: str_t = \"raise\"):\n    \"\"\"\n    Make new Index with passed list of labels deleted.\n\n    Parameters\n    ----------\n    labels : array-like\n    errors : {'ignore', 'raise'}, default 'raise'\n        If 'ignore', suppress error and existing labels are dropped.\n\n    Returns\n    -------\n    dropped : Index\n\n    Raises\n    ------\n    KeyError\n        If not all of the labels are found in the selected axis\n    \"\"\"\n    arr_dtype = \"object\" if self.dtype == \"object\" else None\n    labels = com.index_labels_to_array(labels, dtype=arr_dtype)\n    indexer = self.get_indexer(labels)\n    mask = indexer == -1\n    if mask.any():\n        if errors != \"ignore\":\n            raise KeyError(f\"{labels[mask]} not found in axis\")\n        indexer = indexer[~mask]\n    return self.delete(indexer)",
                "@classmethod\ndef _add_comparison_methods(cls):\n    \"\"\"\n    Add in comparison methods.\n    \"\"\"\n    cls.__eq__ = _make_comparison_op(operator.eq, cls)\n    cls.__ne__ = _make_comparison_op(operator.ne, cls)\n    cls.__lt__ = _make_comparison_op(operator.lt, cls)\n    cls.__gt__ = _make_comparison_op(operator.gt, cls)\n    cls.__le__ = _make_comparison_op(operator.le, cls)\n    cls.__ge__ = _make_comparison_op(operator.ge, cls)",
                "@classmethod\ndef _add_numeric_methods_add_sub_disabled(cls):\n    \"\"\"\n    Add in the numeric add/sub methods to disable.\n    \"\"\"\n    cls.__add__ = make_invalid_op(\"__add__\")\n    cls.__radd__ = make_invalid_op(\"__radd__\")\n    cls.__iadd__ = make_invalid_op(\"__iadd__\")\n    cls.__sub__ = make_invalid_op(\"__sub__\")\n    cls.__rsub__ = make_invalid_op(\"__rsub__\")\n    cls.__isub__ = make_invalid_op(\"__isub__\")",
                "@classmethod\ndef _add_numeric_methods_disabled(cls):\n    \"\"\"\n    Add in numeric methods to disable other than add/sub.\n    \"\"\"\n    cls.__pow__ = make_invalid_op(\"__pow__\")\n    cls.__rpow__ = make_invalid_op(\"__rpow__\")\n    cls.__mul__ = make_invalid_op(\"__mul__\")\n    cls.__rmul__ = make_invalid_op(\"__rmul__\")\n    cls.__floordiv__ = make_invalid_op(\"__floordiv__\")\n    cls.__rfloordiv__ = make_invalid_op(\"__rfloordiv__\")\n    cls.__truediv__ = make_invalid_op(\"__truediv__\")\n    cls.__rtruediv__ = make_invalid_op(\"__rtruediv__\")\n    cls.__mod__ = make_invalid_op(\"__mod__\")\n    cls.__divmod__ = make_invalid_op(\"__divmod__\")\n    cls.__neg__ = make_invalid_op(\"__neg__\")\n    cls.__pos__ = make_invalid_op(\"__pos__\")\n    cls.__abs__ = make_invalid_op(\"__abs__\")\n    cls.__inv__ = make_invalid_op(\"__inv__\")",
                "@classmethod\ndef _add_numeric_methods_binary(cls):\n    \"\"\"\n    Add in numeric methods.\n    \"\"\"\n    cls.__add__ = _make_arithmetic_op(operator.add, cls)\n    cls.__radd__ = _make_arithmetic_op(ops.radd, cls)\n    cls.__sub__ = _make_arithmetic_op(operator.sub, cls)\n    cls.__rsub__ = _make_arithmetic_op(ops.rsub, cls)\n    cls.__rpow__ = _make_arithmetic_op(ops.rpow, cls)\n    cls.__pow__ = _make_arithmetic_op(operator.pow, cls)\n\n    cls.__truediv__ = _make_arithmetic_op(operator.truediv, cls)\n    cls.__rtruediv__ = _make_arithmetic_op(ops.rtruediv, cls)\n\n    # TODO: rmod? rdivmod?\n    cls.__mod__ = _make_arithmetic_op(operator.mod, cls)\n    cls.__floordiv__ = _make_arithmetic_op(operator.floordiv, cls)\n    cls.__rfloordiv__ = _make_arithmetic_op(ops.rfloordiv, cls)\n    cls.__divmod__ = _make_arithmetic_op(divmod, cls)\n    cls.__mul__ = _make_arithmetic_op(operator.mul, cls)\n    cls.__rmul__ = _make_arithmetic_op(ops.rmul, cls)",
                "@classmethod\ndef _add_numeric_methods_unary(cls):\n    \"\"\"\n    Add in numeric unary methods.\n    \"\"\"\n\n    def _make_evaluate_unary(op, opstr):\n        def _evaluate_numeric_unary(self):\n\n            attrs = self._get_attributes_dict()\n            return Index(op(self.values), **attrs)\n\n        _evaluate_numeric_unary.__name__ = opstr\n        return _evaluate_numeric_unary\n\n    cls.__neg__ = _make_evaluate_unary(operator.neg, \"__neg__\")\n    cls.__pos__ = _make_evaluate_unary(operator.pos, \"__pos__\")\n    cls.__abs__ = _make_evaluate_unary(np.abs, \"__abs__\")\n    cls.__inv__ = _make_evaluate_unary(lambda x: -x, \"__inv__\")",
                "@classmethod\ndef _add_numeric_methods(cls):\n    cls._add_numeric_methods_unary()\n    cls._add_numeric_methods_binary()",
                "@classmethod\ndef _add_logical_methods(cls):\n    \"\"\"\n    Add in logical methods.\n    \"\"\"\n    _doc = \"\"\"\n    %(desc)s\n\n    Parameters\n    ----------\n    *args\n        These parameters will be passed to numpy.%(outname)s.\n    **kwargs\n        These parameters will be passed to numpy.%(outname)s.\n\n    Returns\n    -------\n    %(outname)s : bool or array_like (if axis is specified)\n        A single element array_like may be converted to bool.\"\"\"\n\n    _index_shared_docs[\"index_all\"] = dedent(\n        \"\"\"\n\n    See Also\n    --------\n    Index.any : Return whether any element in an Index is True.\n    Series.any : Return whether any element in a Series is True.\n    Series.all : Return whether all elements in a Series are True.\n\n    Notes\n    -----\n    Not a Number (NaN), positive infinity and negative infinity\n    evaluate to True because these are not equal to zero.\n\n    Examples\n    --------\n    **all**\n\n    True, because nonzero integers are considered True.\n\n    >>> pd.Index([1, 2, 3]).all()\n    True\n\n    False, because ``0`` is considered False.\n\n    >>> pd.Index([0, 1, 2]).all()\n    False\n\n    **any**\n\n    True, because ``1`` is considered True.\n\n    >>> pd.Index([0, 0, 1]).any()\n    True\n\n    False, because ``0`` is considered False.\n\n    >>> pd.Index([0, 0, 0]).any()\n    False\n    \"\"\"\n    )\n\n    _index_shared_docs[\"index_any\"] = dedent(\n        \"\"\"\n\n    See Also\n    --------\n    Index.all : Return whether all elements are True.\n    Series.all : Return whether all elements are True.\n\n    Notes\n    -----\n    Not a Number (NaN), positive infinity and negative infinity\n    evaluate to True because these are not equal to zero.\n\n    Examples\n    --------\n    >>> index = pd.Index([0, 1, 2])\n    >>> index.any()\n    True\n\n    >>> index = pd.Index([0, 0, 0])\n    >>> index.any()\n    False\n    \"\"\"\n    )\n\n    def _make_logical_function(name, desc, f):\n        @Substitution(outname=name, desc=desc)\n        @Appender(_index_shared_docs[\"index_\" + name])\n        @Appender(_doc)\n        def logical_func(self, *args, **kwargs):\n            result = f(self.values)\n            if (\n                isinstance(result, (np.ndarray, ABCSeries, Index))\n                and result.ndim == 0\n            ):\n                # return NumPy type\n                return result.dtype.type(result.item())\n            else:  # pragma: no cover\n                return result\n\n        logical_func.__name__ = name\n        return logical_func\n\n    cls.all = _make_logical_function(\n        \"all\", \"Return whether all elements are True.\", np.all\n    )\n    cls.any = _make_logical_function(\n        \"any\", \"Return whether any element is True.\", np.any\n    )",
                "@classmethod\ndef _add_logical_methods_disabled(cls):\n    \"\"\"\n    Add in logical methods to disable.\n    \"\"\"\n    cls.all = make_invalid_op(\"all\")\n    cls.any = make_invalid_op(\"any\")",
                "@property\ndef shape(self):\n    \"\"\"\n    Return a tuple of the shape of the underlying data.\n    \"\"\"\n    # not using \"(len(self), )\" to return \"correct\" shape if the values\n    # consists of a >1 D array (see GH-27775)\n    # overridden in MultiIndex.shape to avoid materializing the values\n    return self._values.shape",
                "def is_int(v):\n    return v is None or is_integer(v)",
                "def _get_leaf_sorter(labels):\n    \"\"\"\n    Returns sorter for the inner most level while preserving the\n    order of higher levels.\n    \"\"\"\n    if labels[0].size == 0:\n        return np.empty(0, dtype=\"int64\")\n\n    if len(labels) == 1:\n        lab = ensure_int64(labels[0])\n        sorter, _ = libalgos.groupsort_indexer(lab, 1 + lab.max())\n        return sorter\n\n    # find indexers of beginning of each set of\n    # same-key labels w.r.t all but last level\n    tic = labels[0][:-1] != labels[0][1:]\n    for lab in labels[1:-1]:\n        tic |= lab[:-1] != lab[1:]\n\n    starts = np.hstack(([True], tic, [True])).nonzero()[0]\n    lab = ensure_int64(labels[-1])\n    return lib.get_level_sorter(lab, ensure_int64(starts))",
                "def _make_evaluate_unary(op, opstr):\n    def _evaluate_numeric_unary(self):\n\n        attrs = self._get_attributes_dict()\n        return Index(op(self.values), **attrs)\n\n    _evaluate_numeric_unary.__name__ = opstr\n    return _evaluate_numeric_unary",
                "def _make_logical_function(name, desc, f):\n    @Substitution(outname=name, desc=desc)\n    @Appender(_index_shared_docs[\"index_\" + name])\n    @Appender(_doc)\n    def logical_func(self, *args, **kwargs):\n        result = f(self.values)\n        if (\n            isinstance(result, (np.ndarray, ABCSeries, Index))\n            and result.ndim == 0\n        ):\n            # return NumPy type\n            return result.dtype.type(result.item())\n        else:  # pragma: no cover\n            return result\n\n    logical_func.__name__ = name\n    return logical_func",
                "def _evaluate_numeric_unary(self):\n\n    attrs = self._get_attributes_dict()\n    return Index(op(self.values), **attrs)",
                "@Substitution(outname=name, desc=desc)\n@Appender(_index_shared_docs[\"index_\" + name])\n@Appender(_doc)\ndef logical_func(self, *args, **kwargs):\n    result = f(self.values)\n    if (\n        isinstance(result, (np.ndarray, ABCSeries, Index))\n        and result.ndim == 0\n    ):\n        # return NumPy type\n        return result.dtype.type(result.item())\n    else:  # pragma: no cover\n        return result"
            ],
            "inscope_function_signatures": [
                "_make_comparison_op(op, cls)",
                "_make_arithmetic_op(op, cls)",
                "_new_Index(cls, d)",
                "ensure_index_from_sequences(sequences, names=None)",
                "ensure_index(index_like, copy=False)",
                "_ensure_has_len(seq)",
                "_trim_front(strings)",
                "_validate_join_method(method)",
                "default_index(n)",
                "maybe_extract_name(name, obj, cls) -> Optional[Hashable]",
                "_maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool) -> np.ndarray",
                "_maybe_cast_data_without_dtype(subarr)",
                "_try_convert_to_int_array(data: np.ndarray, copy: bool, dtype: np.dtype) -> np.ndarray",
                "_maybe_asobject(dtype, klass, data, copy: bool, name: Label, **kwargs)",
                "cmp_method(self, other)",
                "index_arithmetic_method(self, other)",
                "_left_indexer_unique(self, left, right)",
                "_left_indexer(self, left, right)",
                "_inner_indexer(self, left, right)",
                "_outer_indexer(self, left, right)",
                "__new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs) -> 'Index'",
                "asi8(self)",
                "_simple_new(cls, values, name=None, dtype=None)",
                "_constructor(self)",
                "_get_attributes_dict(self)",
                "_shallow_copy(self, values=None, **kwargs)",
                "_shallow_copy_with_infer(self, values, **kwargs)",
                "_update_inplace(self, result, **kwargs)",
                "is_(self, other) -> bool",
                "_reset_identity(self)",
                "_cleanup(self)",
                "_engine(self)",
                "__len__(self) -> int",
                "__array__(self, dtype=None) -> np.ndarray",
                "__array_wrap__(self, result, context=None)",
                "dtype(self)",
                "ravel(self, order='C')",
                "view(self, cls=None)",
                "astype(self, dtype, copy=True)",
                "take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
                "_assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan)",
                "repeat(self, repeats, axis=None)",
                "copy(self, name=None, deep=False, dtype=None, names=None)",
                "__copy__(self, **kwargs)",
                "__deepcopy__(self, memo=None)",
                "__repr__(self) -> str_t",
                "_format_space(self) -> str_t",
                "_formatter_func(self)",
                "_format_data(self, name=None) -> str_t",
                "_format_attrs(self)",
                "_mpl_repr(self)",
                "format(self, name: bool=False, formatter=None, **kwargs)",
                "_format_with_header(self, header, na_rep='NaN', **kwargs)",
                "to_native_types(self, slicer=None, **kwargs)",
                "_format_native_types(self, na_rep='', quoting=None, **kwargs)",
                "_summary(self, name=None) -> str_t",
                "to_flat_index(self)",
                "to_series(self, index=None, name=None)",
                "to_frame(self, index: bool=True, name=None)",
                "name(self)",
                "name(self, value)",
                "_validate_names(self, name=None, names=None, deep: bool=False)",
                "_get_names(self)",
                "_set_names(self, values, level=None)",
                "set_names(self, names, level=None, inplace: bool=False)",
                "rename(self, name, inplace=False)",
                "nlevels(self) -> int",
                "_sort_levels_monotonic(self)",
                "_validate_index_level(self, level)",
                "_get_level_number(self, level) -> int",
                "sortlevel(self, level=None, ascending=True, sort_remaining=None)",
                "_get_level_values(self, level)",
                "droplevel(self, level=0)",
                "_get_grouper_for_level(self, mapper, level=None)",
                "is_monotonic(self) -> bool",
                "is_monotonic_increasing(self) -> bool",
                "is_monotonic_decreasing(self) -> bool",
                "_is_strictly_monotonic_increasing(self) -> bool",
                "_is_strictly_monotonic_decreasing(self) -> bool",
                "is_unique(self) -> bool",
                "has_duplicates(self) -> bool",
                "is_boolean(self) -> bool",
                "is_integer(self) -> bool",
                "is_floating(self) -> bool",
                "is_numeric(self) -> bool",
                "is_object(self) -> bool",
                "is_categorical(self) -> bool",
                "is_interval(self) -> bool",
                "is_mixed(self) -> bool",
                "holds_integer(self) -> bool",
                "inferred_type(self) -> str_t",
                "is_all_dates(self) -> bool",
                "__reduce__(self)",
                "_isnan(self)",
                "_nan_idxs(self)",
                "hasnans(self) -> bool",
                "isna(self)",
                "notna(self)",
                "fillna(self, value=None, downcast=None)",
                "dropna(self, how='any')",
                "unique(self, level=None)",
                "drop_duplicates(self, keep='first')",
                "duplicated(self, keep='first')",
                "_get_unique_index(self, dropna: bool=False)",
                "__add__(self, other)",
                "__radd__(self, other)",
                "__iadd__(self, other)",
                "__sub__(self, other)",
                "__rsub__(self, other)",
                "__and__(self, other)",
                "__or__(self, other)",
                "__xor__(self, other)",
                "__nonzero__(self)",
                "_get_reconciled_name_object(self, other)",
                "_union_incompatible_dtypes(self, other, sort)",
                "_is_compatible_with_other(self, other) -> bool",
                "_validate_sort_keyword(self, sort)",
                "union(self, other, sort=None)",
                "_union(self, other, sort)",
                "_wrap_setop_result(self, other, result)",
                "intersection(self, other, sort=False)",
                "difference(self, other, sort=None)",
                "symmetric_difference(self, other, result_name=None, sort=None)",
                "_assert_can_do_setop(self, other)",
                "_convert_can_do_setop(self, other)",
                "get_loc(self, key, method=None, tolerance=None)",
                "get_indexer(self, target, method=None, limit=None, tolerance=None) -> np.ndarray",
                "_convert_tolerance(self, tolerance, target)",
                "_get_fill_indexer(self, target: 'Index', method: str_t, limit=None, tolerance=None) -> np.ndarray",
                "_get_fill_indexer_searchsorted(self, target: 'Index', method: str_t, limit=None) -> np.ndarray",
                "_get_nearest_indexer(self, target: 'Index', limit, tolerance) -> np.ndarray",
                "_filter_indexer_tolerance(self, target: 'Index', indexer: np.ndarray, tolerance) -> np.ndarray",
                "_get_partial_string_timestamp_match_key(self, key)",
                "_convert_scalar_indexer(self, key, kind: str_t)",
                "_validate_positional_slice(self, key: slice)",
                "_convert_slice_indexer(self, key: slice, kind: str_t)",
                "_convert_listlike_indexer(self, keyarr)",
                "_convert_arr_indexer(self, keyarr)",
                "_convert_index_indexer(self, keyarr)",
                "_convert_list_indexer(self, keyarr)",
                "_invalid_indexer(self, form: str_t, key)",
                "_can_reindex(self, indexer)",
                "reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
                "_reindex_non_unique(self, target)",
                "join(self, other, how='left', level=None, return_indexers=False, sort=False)",
                "_join_multi(self, other, how, return_indexers=True)",
                "_join_non_unique(self, other, how='left', return_indexers=False)",
                "_join_level(self, other, level, how='left', return_indexers=False, keep_order=True)",
                "_join_monotonic(self, other, how='left', return_indexers=False)",
                "_wrap_joined_index(self, joined, other)",
                "values(self) -> np.ndarray",
                "array(self) -> ExtensionArray",
                "_values(self) -> Union[ExtensionArray, np.ndarray]",
                "_internal_get_values(self) -> np.ndarray",
                "memory_usage(self, deep: bool=False) -> int",
                "where(self, cond, other=None)",
                "_scalar_data_error(cls, data)",
                "_string_data_error(cls, data)",
                "_coerce_scalar_to_index(self, item)",
                "_to_safe_for_reshape(self)",
                "_convert_for_op(self, value)",
                "_assert_can_do_op(self, value)",
                "_has_complex_internals(self) -> bool",
                "_is_memory_usage_qualified(self) -> bool",
                "is_type_compatible(self, kind) -> bool",
                "__contains__(self, key: Any) -> bool",
                "__hash__(self)",
                "__setitem__(self, key, value)",
                "__getitem__(self, key)",
                "_can_hold_identifiers_and_holds_name(self, name) -> bool",
                "append(self, other)",
                "_concat(self, to_concat, name)",
                "_concat_same_dtype(self, to_concat, name)",
                "putmask(self, mask, value)",
                "equals(self, other) -> bool",
                "identical(self, other) -> bool",
                "asof(self, label)",
                "asof_locs(self, where, mask)",
                "sort_values(self, return_indexer: bool=False, ascending: bool=True)",
                "sort(self, *args, **kwargs)",
                "shift(self, periods=1, freq=None)",
                "argsort(self, *args, **kwargs) -> np.ndarray",
                "get_value(self, series: 'Series', key)",
                "_should_fallback_to_positional(self) -> bool",
                "_get_values_for_loc(self, series: 'Series', loc, key)",
                "set_value(self, arr, key, value)",
                "get_indexer_non_unique(self, target)",
                "get_indexer_for(self, target, **kwargs)",
                "_maybe_promote(self, other)",
                "groupby(self, values) -> PrettyDict[Hashable, np.ndarray]",
                "map(self, mapper, na_action=None)",
                "isin(self, values, level=None)",
                "_get_string_slice(self, key: str_t, use_lhs: bool=True, use_rhs: bool=True)",
                "slice_indexer(self, start=None, end=None, step=None, kind=None)",
                "_maybe_cast_indexer(self, key)",
                "_validate_indexer(self, form: str_t, key, kind: str_t)",
                "_maybe_cast_slice_bound(self, label, side: str_t, kind)",
                "_searchsorted_monotonic(self, label, side='left')",
                "get_slice_bound(self, label, side: str_t, kind) -> int",
                "slice_locs(self, start=None, end=None, step=None, kind=None)",
                "delete(self, loc)",
                "insert(self, loc: int, item)",
                "drop(self, labels, errors: str_t='raise')",
                "_add_comparison_methods(cls)",
                "_add_numeric_methods_add_sub_disabled(cls)",
                "_add_numeric_methods_disabled(cls)",
                "_add_numeric_methods_binary(cls)",
                "_add_numeric_methods_unary(cls)",
                "_add_numeric_methods(cls)",
                "_add_logical_methods(cls)",
                "_add_logical_methods_disabled(cls)",
                "shape(self)",
                "is_int(v)",
                "_get_leaf_sorter(labels)",
                "_make_evaluate_unary(op, opstr)",
                "_make_logical_function(name, desc, f)",
                "_evaluate_numeric_unary(self)",
                "logical_func(self, *args, **kwargs)"
            ],
            "variables_in_file": {
                "TYPE_CHECKING": [
                    89
                ],
                "__all__": [
                    93
                ],
                "_unsortable_types": [
                    95
                ],
                "frozenset": [
                    230,
                    95
                ],
                "_index_doc_kwargs": [
                    4640,
                    97,
                    707,
                    2924,
                    790
                ],
                "dict": [
                    1976,
                    97,
                    105,
                    793
                ],
                "_index_shared_docs": [
                    4640,
                    5312,
                    707,
                    5381,
                    679,
                    105,
                    4618,
                    5354,
                    2924,
                    751,
                    790,
                    2875
                ],
                "str_t": [
                    4898,
                    867,
                    996,
                    3077,
                    4835,
                    1959,
                    4962,
                    2985,
                    106,
                    848,
                    4912,
                    5168,
                    884,
                    3128,
                    3258,
                    3003
                ],
                "str": [
                    227,
                    106,
                    5068,
                    1011,
                    1014,
                    279,
                    989
                ],
                "isinstance": [
                    4736,
                    4737,
                    3203,
                    3848,
                    5513,
                    5386,
                    5004,
                    142,
                    2320,
                    3088,
                    4113,
                    4240,
                    148,
                    3604,
                    5011,
                    4247,
                    5017,
                    410,
                    2337,
                    292,
                    297,
                    299,
                    1461,
                    4158,
                    4164,
                    4677,
                    5573,
                    5068,
                    461,
                    3666,
                    1363,
                    3671,
                    3546,
                    3547,
                    4700,
                    352,
                    4193,
                    3429,
                    3430,
                    4200,
                    123,
                    3309,
                    111,
                    3312,
                    1266,
                    115,
                    1011,
                    2804,
                    118,
                    1014,
                    4340,
                    635,
                    5501
                ],
                "other": [
                    3593,
                    2570,
                    2573,
                    3598,
                    3600,
                    3612,
                    3620,
                    3622,
                    557,
                    2612,
                    2613,
                    2615,
                    2616,
                    2618,
                    2620,
                    2621,
                    4158,
                    4159,
                    2625,
                    4161,
                    2627,
                    4677,
                    4678,
                    2633,
                    4681,
                    4682,
                    3666,
                    2644,
                    2645,
                    3669,
                    111,
                    112,
                    115,
                    116,
                    117,
                    118,
                    121,
                    126,
                    130,
                    134,
                    2694,
                    2696,
                    2700,
                    4237,
                    142,
                    2704,
                    4240,
                    147,
                    4243,
                    4245,
                    4247,
                    4250,
                    4254,
                    4269,
                    4272,
                    4276,
                    3771,
                    3772,
                    3779,
                    3781,
                    3788,
                    2765,
                    2766,
                    3793,
                    2771,
                    2772,
                    3796,
                    3806,
                    2783,
                    3816,
                    2799,
                    2804,
                    2805,
                    2808,
                    2809,
                    2337,
                    2341,
                    2346,
                    2350,
                    2353,
                    2359,
                    2362,
                    2365,
                    2368,
                    2387,
                    3430,
                    2413,
                    2414,
                    3437,
                    3440,
                    3952,
                    3953,
                    3445,
                    3958,
                    3448,
                    3450,
                    3964,
                    2430,
                    3459,
                    3466,
                    3468,
                    3476,
                    3478,
                    3479,
                    3483,
                    3485,
                    3487,
                    3488,
                    3490,
                    3494,
                    3496,
                    3499,
                    3507,
                    3511,
                    2491,
                    3515,
                    2493,
                    2494,
                    2496,
                    3525,
                    3528,
                    3539,
                    2517,
                    2518,
                    2521,
                    3547,
                    2528,
                    2529,
                    2531,
                    2533,
                    3558,
                    3561,
                    2547,
                    2550,
                    3575
                ],
                "np.ndarray": [
                    3842,
                    3848,
                    5386,
                    5004,
                    3855,
                    5011,
                    4501,
                    2986,
                    3885,
                    3004,
                    588,
                    461,
                    4684,
                    5711,
                    5712,
                    5585,
                    3035,
                    352,
                    111,
                    2927,
                    3823,
                    3058,
                    3059,
                    253
                ],
                "np": [
                    5634,
                    4119,
                    5146,
                    4124,
                    3618,
                    3620,
                    4648,
                    5674,
                    5163,
                    5165,
                    3649,
                    588,
                    4684,
                    3662,
                    5711,
                    592,
                    5712,
                    599,
                    4202,
                    111,
                    120,
                    4218,
                    125,
                    3711,
                    129,
                    130,
                    2707,
                    671,
                    161,
                    5284,
                    2776,
                    2777,
                    730,
                    3823,
                    253,
                    3842,
                    3848,
                    5386,
                    3855,
                    4374,
                    5398,
                    4376,
                    5401,
                    3373,
                    3885,
                    2353,
                    2865,
                    3381,
                    3389,
                    3390,
                    3401,
                    345,
                    352,
                    2927,
                    376,
                    2937,
                    3964,
                    3453,
                    3966,
                    3461,
                    5004,
                    401,
                    5011,
                    4501,
                    2979,
                    934,
                    2986,
                    945,
                    4538,
                    3004,
                    1983,
                    1995,
                    461,
                    5585,
                    1490,
                    2004,
                    3035,
                    989,
                    991,
                    3044,
                    3045,
                    3048,
                    3058,
                    3059,
                    3061,
                    5621
                ],
                "Index": [
                    5506,
                    3203,
                    5386,
                    4750,
                    4240,
                    401,
                    149,
                    150,
                    534,
                    5277,
                    5533,
                    671,
                    420,
                    677,
                    2341,
                    4005,
                    2346,
                    5423,
                    5424,
                    2353,
                    5425,
                    2359,
                    4164,
                    5573,
                    2636,
                    2641,
                    4178,
                    5464,
                    603,
                    349,
                    2143,
                    352,
                    4200,
                    3817,
                    2413,
                    2414,
                    111,
                    2543,
                    3309,
                    2804,
                    2805,
                    635,
                    5501
                ],
                "ABCSeries": [
                    352,
                    2337,
                    5573,
                    5386,
                    142,
                    111
                ],
                "ExtensionArray": [
                    3846,
                    3855,
                    111,
                    4189,
                    118,
                    253
                ],
                "other.ndim": [
                    112
                ],
                "len": [
                    3458,
                    4740,
                    3461,
                    526,
                    5519,
                    3088,
                    5010,
                    4376,
                    5541,
                    3372,
                    3373,
                    1198,
                    1199,
                    5553,
                    3381,
                    1466,
                    1468,
                    3389,
                    1470,
                    3390,
                    576,
                    3651,
                    4168,
                    3401,
                    586,
                    1995,
                    1484,
                    4176,
                    3283,
                    2517,
                    5461,
                    3032,
                    2520,
                    4958,
                    5088,
                    4578,
                    3556,
                    3689,
                    3309,
                    112,
                    1009,
                    3698,
                    4341,
                    5111,
                    2552,
                    5113,
                    3450,
                    3453,
                    1022,
                    3711
                ],
                "self": [
                    4106,
                    4107,
                    2069,
                    4140,
                    4141,
                    4156,
                    2115,
                    4168,
                    4170,
                    4177,
                    4178,
                    2137,
                    2138,
                    2139,
                    2143,
                    2144,
                    4196,
                    4197,
                    4202,
                    112,
                    115,
                    116,
                    2163,
                    118,
                    2164,
                    2165,
                    121,
                    4216,
                    123,
                    4218,
                    4219,
                    126,
                    4221,
                    4225,
                    130,
                    134,
                    4237,
                    2192,
                    2194,
                    147,
                    4243,
                    4245,
                    4249,
                    4250,
                    4254,
                    4269,
                    4272,
                    4273,
                    4276,
                    4336,
                    4338,
                    4341,
                    4342,
                    2313,
                    2314,
                    2316,
                    2318,
                    2319,
                    2320,
                    4373,
                    2326,
                    4376,
                    2331,
                    4379,
                    2341,
                    2346,
                    2350,
                    2353,
                    2359,
                    2362,
                    2365,
                    2368,
                    2372,
                    4426,
                    4430,
                    2387,
                    2388,
                    2389,
                    2390,
                    2411,
                    2430,
                    4499,
                    4536,
                    2490,
                    2491,
                    4538,
                    2493,
                    2494,
                    2496,
                    4561,
                    4563,
                    2517,
                    2518,
                    2520,
                    2521,
                    2524,
                    477,
                    2525,
                    2527,
                    4572,
                    4578,
                    2533,
                    486,
                    2535,
                    2546,
                    2547,
                    502,
                    2550,
                    504,
                    508,
                    4614,
                    2570,
                    523,
                    2573,
                    2574,
                    528,
                    529,
                    531,
                    4643,
                    4644,
                    4649,
                    557,
                    4654,
                    563,
                    564,
                    2611,
                    2612,
                    567,
                    2615,
                    2616,
                    2618,
                    2619,
                    4669,
                    4670,
                    575,
                    576,
                    2624,
                    4671,
                    2627,
                    2629,
                    4677,
                    4678,
                    4679,
                    2633,
                    586,
                    4680,
                    4681,
                    4682,
                    592,
                    2645,
                    2649,
                    602,
                    610,
                    4706,
                    625,
                    632,
                    634,
                    636,
                    4733,
                    4737,
                    4738,
                    2693,
                    2694,
                    2696,
                    2698,
                    2700,
                    4748,
                    2702,
                    662,
                    663,
                    668,
                    671,
                    674,
                    676,
                    677,
                    712,
                    713,
                    714,
                    2764,
                    2765,
                    718,
                    2766,
                    722,
                    2770,
                    726,
                    727,
                    4832,
                    4833,
                    2792,
                    2796,
                    2805,
                    2806,
                    2808,
                    4879,
                    794,
                    4894,
                    2858,
                    2860,
                    4910,
                    2865,
                    2867,
                    822,
                    824,
                    826,
                    834,
                    843,
                    4939,
                    4944,
                    852,
                    853,
                    854,
                    855,
                    4949,
                    4950,
                    4951,
                    4955,
                    4958,
                    2931,
                    2936,
                    891,
                    2939,
                    893,
                    894,
                    2940,
                    4992,
                    2945,
                    898,
                    2946,
                    4996,
                    4999,
                    2952,
                    905,
                    909,
                    2958,
                    2960,
                    5010,
                    918,
                    919,
                    924,
                    2973,
                    926,
                    929,
                    2987,
                    2989,
                    2991,
                    2995,
                    2997,
                    3018,
                    3020,
                    978,
                    3032,
                    5080,
                    987,
                    988,
                    989,
                    5086,
                    991,
                    5088,
                    3041,
                    3042,
                    3044,
                    3045,
                    3047,
                    3054,
                    1009,
                    1010,
                    3060,
                    1013,
                    5111,
                    5113,
                    1021,
                    1022,
                    3088,
                    1045,
                    3096,
                    3097,
                    5146,
                    3104,
                    3111,
                    3114,
                    3115,
                    5163,
                    1069,
                    5164,
                    1071,
                    5166,
                    1073,
                    3124,
                    3125,
                    3126,
                    5187,
                    5189,
                    5195,
                    3152,
                    3160,
                    3161,
                    3162,
                    3163,
                    3169,
                    3173,
                    3175,
                    1129,
                    1130,
                    1133,
                    3185,
                    1144,
                    1148,
                    1154,
                    1155,
                    3204,
                    3206,
                    3208,
                    1167,
                    1178,
                    5276,
                    5277,
                    1205,
                    1206,
                    3263,
                    3283,
                    3310,
                    3312,
                    1266,
                    3315,
                    3316,
                    1272,
                    3323,
                    3327,
                    1281,
                    1283,
                    3331,
                    3332,
                    5384,
                    3341,
                    3343,
                    3345,
                    3367,
                    3369,
                    5420,
                    3378,
                    1337,
                    1353,
                    3401,
                    3404,
                    1373,
                    1375,
                    1379,
                    3429,
                    3437,
                    3440,
                    3444,
                    1399,
                    3451,
                    3458,
                    3466,
                    3469,
                    3476,
                    3477,
                    3483,
                    3484,
                    1437,
                    1438,
                    3487,
                    3488,
                    3489,
                    3493,
                    3496,
                    3498,
                    3505,
                    3511,
                    1464,
                    1467,
                    1468,
                    3515,
                    1470,
                    3521,
                    1475,
                    1476,
                    1477,
                    3524,
                    3538,
                    3546,
                    3557,
                    3558,
                    3560,
                    1526,
                    3575,
                    1528,
                    1540,
                    3593,
                    3599,
                    1557,
                    3612,
                    3618,
                    1574,
                    3622,
                    1591,
                    1608,
                    1615,
                    3666,
                    3669,
                    3671,
                    1647,
                    1682,
                    1717,
                    3771,
                    3772,
                    3778,
                    3781,
                    3784,
                    3786,
                    3789,
                    3792,
                    3793,
                    3795,
                    3796,
                    3799,
                    3801,
                    3803,
                    3805,
                    3806,
                    1760,
                    3816,
                    3842,
                    3847,
                    1803,
                    3883,
                    1843,
                    3927,
                    1886,
                    3934,
                    3953,
                    3955,
                    3956,
                    3966,
                    1919,
                    3971,
                    1950,
                    3998,
                    4000,
                    1956,
                    4005,
                    1963,
                    4011,
                    1970,
                    1976,
                    1977,
                    1978,
                    4038,
                    1991,
                    1992,
                    1995,
                    4044,
                    2001,
                    2002,
                    2011,
                    2012,
                    4083,
                    4088
                ],
                "ValueError": [
                    2434,
                    5000,
                    3337,
                    397,
                    2963,
                    532,
                    2968,
                    675,
                    5667,
                    2981,
                    2854,
                    1197,
                    1199,
                    5680,
                    5560,
                    5691,
                    1469,
                    3010,
                    2371,
                    5072,
                    723,
                    3284,
                    5076,
                    3544,
                    4960,
                    740,
                    5738,
                    5611,
                    113,
                    2161,
                    1267,
                    4084,
                    5620,
                    5747,
                    4983,
                    5750,
                    4220
                ],
                "is_object_dtype": [
                    936,
                    4680,
                    939,
                    115,
                    340,
                    1843,
                    118,
                    4243,
                    4249,
                    123,
                    4221,
                    894
                ],
                "ABCCategorical": [
                    115
                ],
                "left": [
                    3745,
                    3669,
                    3673,
                    3676,
                    3677,
                    3689,
                    3691,
                    3693,
                    3694,
                    241,
                    244,
                    116,
                    117,
                    247,
                    3704,
                    3701,
                    250,
                    3707,
                    3711
                ],
                "type": [
                    1154,
                    5514,
                    4499,
                    676,
                    4276,
                    1205,
                    4024,
                    1978,
                    3263,
                    3264,
                    2372,
                    4678,
                    461,
                    722,
                    852,
                    477,
                    116,
                    4088,
                    1021,
                    2430
                ],
                "self._values": [
                    2624,
                    1130,
                    5420,
                    2164,
                    116,
                    794,
                    2527
                ],
                "other.dtype": [
                    3476,
                    2618,
                    116,
                    2430
                ],
                "op": [
                    130,
                    134,
                    3047,
                    136,
                    3049,
                    147,
                    117,
                    152,
                    121,
                    5277,
                    126
                ],
                "np.errstate": [
                    120,
                    129,
                    125
                ],
                "result": [
                    2561,
                    2570,
                    2574,
                    3599,
                    3604,
                    3605,
                    3606,
                    4122,
                    4123,
                    4124,
                    4125,
                    4126,
                    4127,
                    4129,
                    2629,
                    2633,
                    598,
                    599,
                    600,
                    603,
                    2139,
                    2143,
                    4703,
                    4706,
                    4708,
                    1130,
                    1133,
                    1134,
                    632,
                    121,
                    634,
                    635,
                    636,
                    637,
                    126,
                    130,
                    132,
                    133,
                    2193,
                    2194,
                    147,
                    148,
                    149,
                    150,
                    5384,
                    5386,
                    5387,
                    5390,
                    5392,
                    4376,
                    4379,
                    4381,
                    3931,
                    3934,
                    3935,
                    3468,
                    3472,
                    3473,
                    3474,
                    940,
                    945,
                    946,
                    947,
                    950,
                    951,
                    4536,
                    4537,
                    4538,
                    4539,
                    463,
                    464,
                    1488,
                    1490,
                    1492,
                    1493,
                    470,
                    471,
                    473,
                    2535,
                    2538,
                    2542,
                    2543,
                    2554,
                    2557
                ],
                "self.values": [
                    130,
                    5384,
                    2316,
                    909,
                    4373,
                    4379,
                    668,
                    5277,
                    929,
                    674,
                    1073,
                    1970,
                    714,
                    726,
                    3927,
                    3060,
                    3956,
                    502,
                    4216,
                    121,
                    126
                ],
                "ABCMultiIndex": [
                    3429,
                    3430,
                    2320,
                    177,
                    1266,
                    3088,
                    3547,
                    4247,
                    3546,
                    123,
                    4700
                ],
                "ops.comp_method_OBJECT_ARRAY": [
                    126
                ],
                "ops": [
                    5250,
                    5252,
                    5253,
                    134,
                    5257,
                    5262,
                    5265,
                    126
                ],
                "np.asarray": [
                    130,
                    2979,
                    3618,
                    4648,
                    5163,
                    592,
                    401,
                    2865,
                    4119,
                    345,
                    989,
                    671
                ],
                "is_bool_dtype": [
                    132,
                    5007,
                    3958,
                    599,
                    376
                ],
                "ops.invalid_comparison": [
                    134
                ],
                "name": [
                    898,
                    5380,
                    5381,
                    390,
                    136,
                    137,
                    1164,
                    2573,
                    398,
                    1166,
                    2574,
                    401,
                    5394,
                    916,
                    1173,
                    1174,
                    1175,
                    152,
                    5784,
                    154,
                    5787,
                    416,
                    290,
                    420,
                    298,
                    300,
                    4141,
                    1070,
                    1071,
                    1073,
                    307,
                    1203,
                    1204,
                    1337,
                    314,
                    826,
                    324,
                    5573,
                    4168,
                    5576,
                    330,
                    4170,
                    5579,
                    5582,
                    336,
                    4177,
                    4178,
                    2387,
                    2388,
                    2389,
                    471,
                    349,
                    4198,
                    1128,
                    1129,
                    1130,
                    3816,
                    3817,
                    371,
                    373,
                    375,
                    1146,
                    1020,
                    1021,
                    1022
                ],
                "op.__name__": [
                    136,
                    152
                ],
                "set_function_name": [
                    137,
                    154
                ],
                "cmp_method": [
                    137
                ],
                "cls": [
                    5249,
                    5250,
                    5251,
                    5252,
                    389,
                    5253,
                    5254,
                    5256,
                    137,
                    5257,
                    3979,
                    5260,
                    5261,
                    398,
                    5262,
                    5263,
                    5264,
                    5265,
                    403,
                    5397,
                    5400,
                    154,
                    5409,
                    290,
                    5282,
                    5283,
                    5284,
                    5285,
                    5410,
                    5289,
                    5290,
                    172,
                    175,
                    177,
                    182,
                    5580,
                    463,
                    5205,
                    5206,
                    5207,
                    5208,
                    5209,
                    5210,
                    5239,
                    5217,
                    5218,
                    5219,
                    5220,
                    5221,
                    5222,
                    5229,
                    5230,
                    5231,
                    5232,
                    5233,
                    5234,
                    5235,
                    5236,
                    5237,
                    5238,
                    631,
                    632,
                    5241,
                    5242,
                    5240
                ],
                "ABCDataFrame": [
                    2337,
                    142
                ],
                "ABCTimedeltaIndex": [
                    4187,
                    142
                ],
                "NotImplemented": [
                    2338,
                    143
                ],
                "Series": [
                    2341,
                    2346,
                    1073,
                    147,
                    2359
                ],
                "tuple": [
                    4736,
                    710,
                    148,
                    1461,
                    3381,
                    3604,
                    793,
                    410,
                    4158
                ],
                "index_arithmetic_method": [
                    154
                ],
                "Exception": [
                    157
                ],
                "_o_dtype": [
                    161,
                    5781
                ],
                "np.dtype": [
                    161,
                    5585,
                    5711
                ],
                "object": [
                    4225,
                    2946,
                    2947,
                    5785,
                    161,
                    162,
                    419,
                    5670,
                    3381,
                    463,
                    345,
                    348,
                    349,
                    991,
                    4193,
                    2411,
                    2413,
                    2414,
                    3961,
                    379
                ],
                "_Identity": [
                    162,
                    563
                ],
                "issubclass": [
                    376,
                    177,
                    172
                ],
                "ABCPeriodIndex": [
                    172,
                    4188
                ],
                "_new_PeriodIndex": [
                    175
                ],
                "d": [
                    175,
                    178,
                    180,
                    182,
                    1976,
                    1977,
                    1978
                ],
                "d.pop": [
                    180
                ],
                "cls.__new__": [
                    182
                ],
                "IndexOpsMixin": [
                    3929,
                    185,
                    3845,
                    229
                ],
                "PandasObject": [
                    185,
                    228
                ],
                "_deprecations": [
                    227
                ],
                "FrozenSet": [
                    227
                ],
                "PandasObject._deprecations": [
                    228
                ],
                "IndexOpsMixin._deprecations": [
                    229
                ],
                "_join_precedence": [
                    234
                ],
                "libjoin.left_join_indexer_unique": [
                    241
                ],
                "libjoin": [
                    241,
                    250,
                    244,
                    247
                ],
                "right": [
                    3685,
                    241,
                    244,
                    3669,
                    247,
                    3673,
                    250,
                    3679
                ],
                "libjoin.left_join_indexer": [
                    244
                ],
                "libjoin.inner_join_indexer": [
                    247
                ],
                "libjoin.outer_join_indexer": [
                    250
                ],
                "_typ": [
                    252
                ],
                "_data": [
                    253
                ],
                "Union": [
                    253,
                    3855
                ],
                "_id": [
                    254
                ],
                "_name": [
                    255
                ],
                "Label": [
                    5753,
                    255
                ],
                "_no_setting_name": [
                    259
                ],
                "bool": [
                    1536,
                    1921,
                    259,
                    4227,
                    1157,
                    1543,
                    1805,
                    911,
                    1684,
                    4119,
                    1560,
                    540,
                    4383,
                    1952,
                    4257,
                    4131,
                    1577,
                    1966,
                    1075,
                    1845,
                    1719,
                    1594,
                    1210,
                    4027,
                    4034,
                    4040,
                    1611,
                    4046,
                    5711,
                    5585,
                    1618,
                    2007,
                    3930,
                    2012,
                    4574,
                    1888,
                    1762,
                    4835,
                    2416,
                    1649,
                    5753,
                    2300
                ],
                "_comparables": [
                    260
                ],
                "_attributes": [
                    261
                ],
                "_is_numeric_dtype": [
                    262
                ],
                "_can_hold_na": [
                    263
                ],
                "_defer_to_indexing": [
                    266
                ],
                "_infer_as_myclass": [
                    270
                ],
                "_engine_type": [
                    272
                ],
                "libindex.ObjectEngine": [
                    272
                ],
                "libindex": [
                    272
                ],
                "_supports_partial_string_indexing": [
                    275
                ],
                "_accessors": [
                    277
                ],
                "CachedAccessor": [
                    279
                ],
                "StringMethods": [
                    279
                ],
                "maybe_extract_name": [
                    290,
                    1154
                ],
                "data": [
                    5632,
                    5634,
                    5636,
                    3980,
                    400,
                    401,
                    402,
                    403,
                    5626,
                    405,
                    407,
                    408,
                    5784,
                    410,
                    5787,
                    5628,
                    416,
                    5665,
                    290,
                    419,
                    292,
                    5666,
                    294,
                    297,
                    298,
                    299,
                    300,
                    5678,
                    303,
                    5679,
                    307,
                    310,
                    5689,
                    314,
                    5690,
                    317,
                    5698,
                    5699,
                    324,
                    326,
                    5702,
                    5703,
                    330,
                    332,
                    336,
                    339,
                    853,
                    343,
                    345,
                    348,
                    349,
                    860,
                    861,
                    352,
                    863,
                    5606,
                    5735,
                    5608,
                    5736,
                    5610,
                    5745,
                    366,
                    367,
                    5614,
                    5744,
                    370,
                    371,
                    372,
                    373,
                    374,
                    375,
                    376,
                    377,
                    5619,
                    379,
                    5621
                ],
                "ABCPandasArray": [
                    292
                ],
                "data.to_numpy": [
                    294
                ],
                "RangeIndex": [
                    297,
                    298,
                    300,
                    5566
                ],
                "copy": [
                    5506,
                    5634,
                    401,
                    663,
                    5528,
                    5531,
                    668,
                    5787,
                    671,
                    674,
                    420,
                    298,
                    307,
                    314,
                    324,
                    330,
                    336,
                    349,
                    5608,
                    366,
                    371,
                    5619,
                    373,
                    5621,
                    375,
                    5502,
                    383
                ],
                "dtype": [
                    5632,
                    3969,
                    386,
                    3971,
                    5634,
                    401,
                    5626,
                    5781,
                    662,
                    665,
                    5787,
                    668,
                    670,
                    671,
                    3998,
                    674,
                    4003,
                    420,
                    676,
                    677,
                    4005,
                    298,
                    300,
                    303,
                    307,
                    310,
                    314,
                    829,
                    318,
                    830,
                    324,
                    326,
                    330,
                    332,
                    336,
                    592,
                    339,
                    340,
                    342,
                    343,
                    5731,
                    5605,
                    360,
                    5608,
                    366,
                    367,
                    5614,
                    371,
                    3955,
                    373,
                    5619,
                    375,
                    3962,
                    5627
                ],
                "range": [
                    3313,
                    299
                ],
                "RangeIndex.from_range": [
                    300
                ],
                "is_categorical_dtype": [
                    665,
                    933,
                    303
                ],
                "CategoricalIndex": [
                    307,
                    668
                ],
                "kwargs": [
                    390,
                    393,
                    394,
                    524,
                    526,
                    401,
                    5784,
                    5787,
                    926,
                    416,
                    420,
                    307,
                    314,
                    4539,
                    4670,
                    319,
                    4671,
                    834,
                    324,
                    709,
                    710,
                    330,
                    336,
                    981,
                    349,
                    506
                ],
                "is_interval_dtype": [
                    310
                ],
                "_maybe_asobject": [
                    336,
                    314,
                    324,
                    330
                ],
                "IntervalIndex": [
                    314
                ],
                "is_datetime64_any_dtype": [
                    317,
                    318
                ],
                "DatetimeIndex": [
                    324
                ],
                "is_timedelta64_dtype": [
                    326
                ],
                "TimedeltaIndex": [
                    330
                ],
                "is_period_dtype": [
                    332
                ],
                "PeriodIndex": [
                    336
                ],
                "is_extension_array_dtype": [
                    339,
                    670
                ],
                "ea_cls": [
                    342,
                    343
                ],
                "dtype.construct_array_type": [
                    342
                ],
                "ea_cls._from_sequence": [
                    343
                ],
                "data.astype": [
                    5632,
                    5735,
                    5744,
                    377,
                    5626,
                    348
                ],
                "_maybe_cast_with_dtype": [
                    366
                ],
                "data.dtype": [
                    5666,
                    5699,
                    5703,
                    367,
                    5679,
                    370,
                    372,
                    374,
                    376,
                    5690
                ],
                "is_signed_integer_dtype": [
                    370
                ],
                "Int64Index": [
                    371
                ],
                "is_unsigned_integer_dtype": [
                    5731,
                    372
                ],
                "UInt64Index": [
                    373
                ],
                "is_float_dtype": [
                    5627,
                    374
                ],
                "Float64Index": [
                    375
                ],
                "data.dtype.type": [
                    376
                ],
                "np.bool": [
                    376
                ],
                "subarr": [
                    384,
                    5665,
                    5698,
                    387,
                    419,
                    420,
                    5670,
                    5702,
                    5674,
                    395,
                    5707,
                    398,
                    5678,
                    5689,
                    377,
                    379,
                    5661
                ],
                "com.asarray_tuplesafe": [
                    3224,
                    379,
                    419
                ],
                "com": [
                    419,
                    5188,
                    4110,
                    3538,
                    3539,
                    4118,
                    3224,
                    4121,
                    379,
                    4254,
                    4895
                ],
                "subarr.copy": [
                    384
                ],
                "new_data": [
                    387,
                    390
                ],
                "new_dtype": [
                    387,
                    388,
                    390
                ],
                "_maybe_cast_data_without_dtype": [
                    387
                ],
                "TypeError": [
                    2562,
                    394,
                    3978,
                    1165,
                    3985,
                    1170,
                    532,
                    2712,
                    538,
                    675,
                    676,
                    5542,
                    3501,
                    1205,
                    2869,
                    4024,
                    3262,
                    4165,
                    2630,
                    5580,
                    5072,
                    3667,
                    4441,
                    2789,
                    2536,
                    5738,
                    2800,
                    5747,
                    4084,
                    1270,
                    4088,
                    1273,
                    3322,
                    4091,
                    4220
                ],
                "repr": [
                    3011,
                    394,
                    3980,
                    5014,
                    4088
                ],
                "set": [
                    3538,
                    394,
                    3539,
                    2541
                ],
                "subarr.ndim": [
                    395
                ],
                "cls._simple_new": [
                    398
                ],
                "hasattr": [
                    5505,
                    3304,
                    400,
                    1011,
                    1014,
                    631
                ],
                "is_scalar": [
                    4550,
                    4109,
                    402,
                    4882,
                    4884,
                    4023,
                    4123
                ],
                "cls._scalar_data_error": [
                    403
                ],
                "tupleize_cols": [
                    405
                ],
                "is_list_like": [
                    1196,
                    2799,
                    1169,
                    405,
                    1173,
                    1269,
                    1272,
                    1275,
                    1277
                ],
                "is_iterator": [
                    5508,
                    407
                ],
                "list": [
                    3587,
                    5509,
                    5513,
                    5514,
                    5515,
                    408,
                    924,
                    5543,
                    1461,
                    4158,
                    4159,
                    1475,
                    1476,
                    1477,
                    3552,
                    3553,
                    2538,
                    3704,
                    3707
                ],
                "all": [
                    5736,
                    4270,
                    5553,
                    5745,
                    410
                ],
                "e": [
                    410
                ],
                "MultiIndex.from_tuples": [
                    4743,
                    415
                ],
                "MultiIndex": [
                    4737,
                    4743,
                    3666,
                    5522,
                    3671,
                    1497,
                    5466,
                    3579,
                    3742,
                    415
                ],
                "kwargs.get": [
                    416
                ],
                "property": [
                    5412,
                    1542,
                    1576,
                    877,
                    3822,
                    1593,
                    3854,
                    1617,
                    1139,
                    1559,
                    1208,
                    441,
                    4026,
                    1342,
                    1535
                ],
                "values": [
                    3971,
                    2316,
                    526,
                    2319,
                    2322,
                    531,
                    534,
                    2327,
                    2331,
                    929,
                    933,
                    934,
                    936,
                    937,
                    939,
                    940,
                    1196,
                    1198,
                    943,
                    1199,
                    3378,
                    1203,
                    950,
                    1206,
                    1995,
                    1996,
                    461,
                    1997,
                    464,
                    978,
                    980,
                    981,
                    470,
                    4700,
                    989,
                    4701,
                    991,
                    4702,
                    993,
                    994,
                    4703,
                    4833,
                    3964,
                    745,
                    748,
                    3313,
                    3315,
                    3316,
                    501,
                    502,
                    3956,
                    4216,
                    3961,
                    4218,
                    4219,
                    508,
                    3966
                ],
                "object.__new__": [
                    463
                ],
                "result._data": [
                    464
                ],
                "result._index_data": [
                    470
                ],
                "result._name": [
                    1492,
                    471
                ],
                "result._reset_identity": [
                    473
                ],
                "classmethod": [
                    453,
                    3974,
                    5287,
                    5224,
                    5292,
                    3983,
                    5200,
                    5244,
                    5267,
                    5404,
                    5212
                ],
                "cache_readonly": [
                    1986,
                    3844,
                    1958,
                    1610,
                    1965,
                    1999,
                    2006,
                    569,
                    475,
                    605
                ],
                "k": [
                    856,
                    4706,
                    486
                ],
                "getattr": [
                    4272,
                    3331,
                    557,
                    486
                ],
                "self._attributes": [
                    486
                ],
                "attributes": [
                    4739,
                    4740,
                    4745,
                    523,
                    524,
                    525,
                    4748,
                    4750,
                    528,
                    531,
                    534,
                    504,
                    506,
                    508,
                    4733
                ],
                "self._get_attributes_dict": [
                    4005,
                    4197,
                    2792,
                    523,
                    3310,
                    504,
                    1977,
                    602,
                    5276,
                    4733
                ],
                "attributes.update": [
                    506,
                    524
                ],
                "self._simple_new": [
                    3316,
                    508
                ],
                "self.dtype": [
                    2945,
                    5187,
                    4680,
                    4748,
                    528,
                    1843,
                    3316,
                    3476,
                    662,
                    3955,
                    3998,
                    4249,
                    2618,
                    2430
                ],
                "self._infer_as_myclass": [
                    529
                ],
                "self._constructor": [
                    531
                ],
                "self._id": [
                    563,
                    636,
                    557
                ],
                "Ellipsis": [
                    557
                ],
                "self._engine.clear_mapping": [
                    567
                ],
                "self._engine": [
                    1574,
                    4614,
                    2860,
                    2989,
                    4654,
                    1615,
                    2991,
                    4083,
                    1557,
                    567,
                    2973,
                    3934
                ],
                "_ndarray_values": [
                    576,
                    5164,
                    575
                ],
                "self._ndarray_values": [
                    3618,
                    3778,
                    625,
                    3612,
                    2525,
                    575
                ],
                "self._engine_type": [
                    576
                ],
                "self._data": [
                    610,
                    3842,
                    3847,
                    586,
                    2698,
                    3883,
                    4106,
                    592,
                    3315,
                    822,
                    1976,
                    632,
                    5146
                ],
                "int": [
                    1378,
                    4962,
                    582,
                    1363,
                    3930,
                    5148,
                    1343
                ],
                "lib.item_from_zerodim": [
                    598
                ],
                "lib": [
                    5606,
                    937,
                    1963,
                    5517,
                    3664,
                    5008,
                    3698,
                    5010,
                    598,
                    599,
                    5628,
                    5661
                ],
                "lib.is_scalar": [
                    599
                ],
                "np.ndim": [
                    4124,
                    599
                ],
                "attrs": [
                    3310,
                    3311,
                    3316,
                    854,
                    856,
                    602,
                    603,
                    5276,
                    5277
                ],
                "self._data.dtype": [
                    610
                ],
                "self._ndarray_values.ravel": [
                    625
                ],
                "order": [
                    625
                ],
                "self._data.view": [
                    632,
                    3842
                ],
                "self._shallow_copy": [
                    1283,
                    2698,
                    4107,
                    2574,
                    2194,
                    794,
                    2331,
                    5146,
                    1069,
                    822,
                    824,
                    3451,
                    2389,
                    727,
                    2649,
                    2144,
                    2164,
                    2165,
                    634,
                    4219
                ],
                "result._id": [
                    636
                ],
                "is_dtype_equal": [
                    2945,
                    3476,
                    5781,
                    662,
                    2618,
                    2430
                ],
                "self.copy": [
                    834,
                    843,
                    663
                ],
                "self.name": [
                    677,
                    4168,
                    1129,
                    1071,
                    3343,
                    3345,
                    2388,
                    2805,
                    918,
                    919,
                    2806,
                    1178,
                    668,
                    1373,
                    2143,
                    1375
                ],
                "casted": [
                    674,
                    677
                ],
                "self.values.astype": [
                    674
                ],
                "__name__": [
                    3264,
                    676,
                    2372,
                    722,
                    4499,
                    852,
                    1205,
                    4024,
                    4088,
                    1021,
                    3263
                ],
                "nv.validate_take": [
                    710
                ],
                "nv": [
                    793,
                    710
                ],
                "indices": [
                    739,
                    711,
                    745,
                    715,
                    748,
                    726,
                    735
                ],
                "ensure_platform_int": [
                    3616,
                    3809,
                    3810,
                    711,
                    3615,
                    3375,
                    4655,
                    3761,
                    3764,
                    792,
                    2937,
                    2975,
                    735
                ],
                "self._can_hold_na": [
                    712,
                    2001,
                    2011,
                    1991
                ],
                "taken": [
                    744,
                    713,
                    748,
                    749,
                    2644,
                    726,
                    727,
                    2648,
                    2649,
                    2651,
                    2652
                ],
                "self._assert_take_fillable": [
                    713
                ],
                "allow_fill": [
                    721,
                    738,
                    716,
                    745
                ],
                "fill_value": [
                    721,
                    738,
                    717
                ],
                "self._na_value": [
                    3953,
                    4338,
                    718
                ],
                "cls_name": [
                    722,
                    724
                ],
                "self.values.take": [
                    726
                ],
                "Appender": [
                    4640,
                    707,
                    3845,
                    5381,
                    5382,
                    2924,
                    790,
                    3929
                ],
                "np.nan": [
                    1490,
                    730,
                    1983
                ],
                "any": [
                    5610,
                    739
                ],
                "algos.take": [
                    744
                ],
                "algos": [
                    2561,
                    4833,
                    2788,
                    3750,
                    744,
                    2641,
                    3700,
                    2550,
                    2711,
                    2648,
                    2553
                ],
                "na_value": [
                    745
                ],
                "values.take": [
                    748
                ],
                "repeats": [
                    792,
                    794
                ],
                "nv.validate_repeat": [
                    793
                ],
                "axis": [
                    793
                ],
                "self._values.repeat": [
                    794
                ],
                "deep": [
                    1167,
                    821,
                    826,
                    3931,
                    3934
                ],
                "new_index": [
                    3404,
                    3405,
                    822,
                    824,
                    827,
                    830,
                    831
                ],
                "self._data.copy": [
                    822
                ],
                "names": [
                    4738,
                    1284,
                    4740,
                    4742,
                    4743,
                    1164,
                    1166,
                    1168,
                    1169,
                    1171,
                    1276,
                    1208,
                    826,
                    827,
                    4167,
                    4168,
                    5462,
                    5463,
                    5464,
                    5466,
                    1269,
                    3574,
                    1272,
                    1275,
                    3580
                ],
                "self._validate_names": [
                    826
                ],
                "new_index.set_names": [
                    827
                ],
                "new_index.astype": [
                    830
                ],
                "klass_name": [
                    852,
                    863
                ],
                "self._format_data": [
                    853
                ],
                "self._format_attrs": [
                    854
                ],
                "space": [
                    857,
                    855
                ],
                "self._format_space": [
                    855
                ],
                "attrs_str": [
                    856,
                    857
                ],
                "v": [
                    856,
                    4706,
                    3147
                ],
                "prepr": [
                    857,
                    863
                ],
                "join": [
                    857
                ],
                "res": [
                    865,
                    5735,
                    5736,
                    5737,
                    5744,
                    5745,
                    5746,
                    863
                ],
                "default_pprint": [
                    882
                ],
                "is_justify": [
                    889,
                    898,
                    892,
                    895
                ],
                "self.inferred_type": [
                    1760,
                    3104,
                    1956,
                    4677,
                    4679,
                    1803,
                    4044,
                    1682,
                    1950,
                    1717,
                    891,
                    893,
                    1886,
                    1919
                ],
                "self.categories": [
                    894
                ],
                "format_object_summary": [
                    897
                ],
                "self._formatter_func": [
                    898
                ],
                "format_object_attrs": [
                    905
                ],
                "header": [
                    915,
                    917,
                    951,
                    924,
                    926
                ],
                "header.append": [
                    917
                ],
                "pprint_thing": [
                    940,
                    918
                ],
                "formatter": [
                    923,
                    924
                ],
                "self.map": [
                    1528,
                    924
                ],
                "self._format_with_header": [
                    926
                ],
                "values.dtype": [
                    936,
                    939,
                    933
                ],
                "np.array": [
                    5634,
                    934,
                    945,
                    2353,
                    2004,
                    5621,
                    4538,
                    991
                ],
                "lib.maybe_convert_objects": [
                    937
                ],
                "x": [
                    4193,
                    5285,
                    4200,
                    940,
                    2542,
                    3472,
                    3473,
                    5553,
                    5554
                ],
                "mask": [
                    3712,
                    3713,
                    3714,
                    3715,
                    4225,
                    3729,
                    3730,
                    3732,
                    4373,
                    4376,
                    4378,
                    3740,
                    3619,
                    3620,
                    943,
                    944,
                    946,
                    5190,
                    5191,
                    5193,
                    5194,
                    1487,
                    1489,
                    1490,
                    987,
                    993,
                    4218
                ],
                "isna": [
                    4000,
                    1992,
                    5610,
                    943,
                    2071,
                    987,
                    2327,
                    3966
                ],
                "mask.any": [
                    944,
                    1489,
                    5191
                ],
                "na_rep": [
                    993,
                    946
                ],
                "result.tolist": [
                    947
                ],
                "_trim_front": [
                    950
                ],
                "format_array": [
                    950
                ],
                "slicer": [
                    979,
                    980
                ],
                "values._format_native_types": [
                    981
                ],
                "self.is_object": [
                    4140,
                    988,
                    4038
                ],
                "quoting": [
                    988
                ],
                "astype": [
                    2413,
                    989,
                    2414
                ],
                "head": [
                    1016,
                    1010,
                    1011,
                    1012
                ],
                "head.format": [
                    1012
                ],
                "tail": [
                    1016,
                    1013,
                    1014,
                    1015
                ],
                "tail.format": [
                    1015
                ],
                "index_summary": [
                    1016,
                    1018,
                    1022
                ],
                "index": [
                    1132,
                    1068,
                    1069,
                    1073,
                    5784,
                    5785
                ],
                "self.values.copy": [
                    4216,
                    1073
                ],
                "DataFrame": [
                    1130
                ],
                "self._values.copy": [
                    1130
                ],
                "result.index": [
                    1133
                ],
                "self._name": [
                    1144,
                    1155,
                    1206
                ],
                "self._no_setting_name": [
                    1148
                ],
                "RuntimeError": [
                    1150
                ],
                "value": [
                    4225,
                    1154,
                    1155,
                    4615,
                    4616,
                    4017,
                    4023,
                    4024,
                    2137,
                    4218,
                    2139
                ],
                "name.setter": [
                    1146
                ],
                "deepcopy": [
                    1167
                ],
                "self.names": [
                    4738,
                    1477,
                    3558,
                    3437,
                    1167,
                    3538
                ],
                "FrozenList": [
                    1178
                ],
                "is_hashable": [
                    5579,
                    1204
                ],
                "_set_names": [
                    1208
                ],
                "_get_names": [
                    1208
                ],
                "level": [
                    1284,
                    3718,
                    3469,
                    3598,
                    2191,
                    2192,
                    3600,
                    3734,
                    1437,
                    3751,
                    3754,
                    1461,
                    1462,
                    1464,
                    1466,
                    1468,
                    1470,
                    3320,
                    1363,
                    1364,
                    1367,
                    1369,
                    1371,
                    3676,
                    1373,
                    3677,
                    1375,
                    3708,
                    4831,
                    4832,
                    1379,
                    3434,
                    3693,
                    1266,
                    3443,
                    1524,
                    1269,
                    3445,
                    3701,
                    1272,
                    3705,
                    3324,
                    1277,
                    1278
                ],
                "self.nlevels": [
                    1272,
                    4250,
                    1468,
                    1470
                ],
                "inplace": [
                    1280,
                    1337,
                    1285
                ],
                "idx": [
                    1281,
                    1283,
                    1284,
                    1286,
                    5165,
                    5166
                ],
                "idx._set_names": [
                    1284
                ],
                "self.set_names": [
                    1337
                ],
                "IndexError": [
                    1370,
                    1365
                ],
                "KeyError": [
                    4997,
                    3177,
                    5193,
                    2861,
                    2862,
                    4337,
                    4562,
                    5012,
                    2872,
                    1374
                ],
                "self._validate_index_level": [
                    2192,
                    4832,
                    1379,
                    1437
                ],
                "self.sort_values": [
                    1399
                ],
                "ascending": [
                    4427,
                    1399
                ],
                "get_level_values": [
                    1440
                ],
                "_get_level_values": [
                    1440
                ],
                "levnums": [
                    1464,
                    1479
                ],
                "sorted": [
                    1464
                ],
                "self._get_level_number": [
                    1464
                ],
                "lev": [
                    1464
                ],
                "new_levels": [
                    1475,
                    1480,
                    1484,
                    1488,
                    1498,
                    3707,
                    3708,
                    3743
                ],
                "self.levels": [
                    1475
                ],
                "new_codes": [
                    3744,
                    3714,
                    1476,
                    1481,
                    3726,
                    1487,
                    1488,
                    3732,
                    3734,
                    3735,
                    3704,
                    3705,
                    1499
                ],
                "self.codes": [
                    1476
                ],
                "new_names": [
                    1482,
                    1500,
                    1492,
                    1477
                ],
                "i": [
                    1480,
                    1481,
                    1482,
                    1479
                ],
                "new_levels.pop": [
                    1480
                ],
                "new_codes.pop": [
                    1481
                ],
                "new_names.pop": [
                    1482
                ],
                "take": [
                    1488,
                    4376
                ],
                "result.putmask": [
                    1490
                ],
                "mapper": [
                    1528,
                    4731,
                    1525
                ],
                "grouper": [
                    1528,
                    1530,
                    1526
                ],
                "self.is_monotonic_increasing": [
                    1540,
                    3047,
                    2987,
                    4949,
                    1591
                ],
                "self._engine.is_monotonic_increasing": [
                    1557
                ],
                "self._engine.is_monotonic_decreasing": [
                    1574
                ],
                "self.is_unique": [
                    3331,
                    3781,
                    1608,
                    2313,
                    2952,
                    2318,
                    1647,
                    2546,
                    3283,
                    1591,
                    3483,
                    4669,
                    3487
                ],
                "self.is_monotonic_decreasing": [
                    1608,
                    4951
                ],
                "self._engine.is_unique": [
                    1615
                ],
                "lib.infer_dtype": [
                    1963,
                    5628,
                    5661,
                    5606
                ],
                "is_datetime_array": [
                    1970
                ],
                "ensure_object": [
                    1970
                ],
                "d.update": [
                    1977
                ],
                "_new_Index": [
                    1978
                ],
                "_na_value": [
                    1983
                ],
                "np.empty": [
                    3649,
                    1995,
                    3381
                ],
                "np.bool_": [
                    1995
                ],
                "values.fill": [
                    1996
                ],
                "self._isnan.nonzero": [
                    2002
                ],
                "self._isnan": [
                    2002,
                    2164,
                    2069,
                    2139,
                    2012
                ],
                "np.int64": [
                    2004
                ],
                "self._isnan.any": [
                    2012
                ],
                "isnull": [
                    2071
                ],
                "self.isna": [
                    2115
                ],
                "notnull": [
                    2117
                ],
                "notna": [
                    2117
                ],
                "self._assert_can_do_op": [
                    2137
                ],
                "self.hasnans": [
                    2138,
                    2163,
                    2326
                ],
                "self.putmask": [
                    2139
                ],
                "downcast": [
                    2140
                ],
                "how": [
                    3458,
                    3467,
                    3596,
                    3469,
                    3600,
                    3479,
                    3481,
                    3612,
                    3485,
                    3490,
                    3494,
                    3499,
                    3504,
                    3506,
                    3508,
                    3512,
                    3772,
                    3783,
                    3787,
                    3791,
                    3794,
                    3798,
                    3800,
                    3674,
                    3802,
                    3804,
                    3685,
                    3566,
                    2160,
                    2161,
                    3440,
                    3445,
                    3450
                ],
                "unique": [
                    2193
                ],
                "super": [
                    2242,
                    4731,
                    2193,
                    2298,
                    3931
                ],
                "drop_duplicates": [
                    2242
                ],
                "keep": [
                    2242,
                    2298
                ],
                "duplicated": [
                    2298
                ],
                "dropna": [
                    2313,
                    2324
                ],
                "self.unique": [
                    2319
                ],
                "values._data": [
                    2322
                ],
                "NotImplementedError": [
                    2328,
                    4499,
                    3680,
                    4838
                ],
                "self.intersection": [
                    2362,
                    3511
                ],
                "self.union": [
                    3515,
                    2365
                ],
                "self.symmetric_difference": [
                    2368
                ],
                "__bool__": [
                    2376
                ],
                "__nonzero__": [
                    2376
                ],
                "get_op_result_name": [
                    3816,
                    2573,
                    2387,
                    2645,
                    2808
                ],
                "this": [
                    2946,
                    2948,
                    2411,
                    2702,
                    2414,
                    2704,
                    2770,
                    2707,
                    2708,
                    2772,
                    3477,
                    3479,
                    2777,
                    2619,
                    2715,
                    2621,
                    2779
                ],
                "self.astype": [
                    4225,
                    2946,
                    4681,
                    2411,
                    3477,
                    2619
                ],
                "Index.union": [
                    2414
                ],
                "sort": [
                    2496,
                    2433,
                    2786,
                    2436,
                    2533,
                    2693,
                    2764,
                    2414,
                    2611,
                    2709,
                    2647,
                    2490,
                    3517,
                    2621,
                    2494,
                    2559
                ],
                "self._validate_sort_keyword": [
                    2490,
                    2611,
                    2764,
                    2693
                ],
                "self._assert_can_do_setop": [
                    2491,
                    2612,
                    2765,
                    2694
                ],
                "self._is_compatible_with_other": [
                    2493
                ],
                "self._union_incompatible_dtypes": [
                    2494
                ],
                "self._union": [
                    2496
                ],
                "self.equals": [
                    2696,
                    4269,
                    2517,
                    2615,
                    3771,
                    3327
                ],
                "self._get_reconciled_name_object": [
                    2616,
                    2518
                ],
                "other._get_reconciled_name_object": [
                    2521
                ],
                "is_datetime64tz_dtype": [
                    2528,
                    2524
                ],
                "lvals": [
                    2624,
                    2557,
                    2629,
                    2535,
                    2538,
                    2636,
                    2541,
                    2641,
                    2554,
                    2525,
                    2527
                ],
                "rvals": [
                    2529,
                    2625,
                    2531,
                    2629,
                    2535,
                    2636,
                    2542,
                    2641,
                    2553
                ],
                "other._ndarray_values": [
                    2529,
                    3779,
                    3612,
                    3620
                ],
                "other._values": [
                    2625,
                    2531,
                    2783
                ],
                "self.is_monotonic": [
                    3488,
                    2627,
                    2533,
                    3496
                ],
                "other.is_monotonic": [
                    3488,
                    2627,
                    2533,
                    3496
                ],
                "self._outer_indexer": [
                    3795,
                    3805,
                    2535
                ],
                "value_set": [
                    2541,
                    2542
                ],
                "result.extend": [
                    2542
                ],
                "_values": [
                    2543
                ],
                "indexer": [
                    3328,
                    3332,
                    3208,
                    3209,
                    3341,
                    2958,
                    2704,
                    2705,
                    2960,
                    2707,
                    3347,
                    5194,
                    5195,
                    2973,
                    2975,
                    3367,
                    3368,
                    3369,
                    3373,
                    4654,
                    4655,
                    2993,
                    3378,
                    2867,
                    2868,
                    2995,
                    2870,
                    2997,
                    2998,
                    3000,
                    3381,
                    3389,
                    4671,
                    4672,
                    5189,
                    3398,
                    5190,
                    3401,
                    3018,
                    3019,
                    2636,
                    2637,
                    3020,
                    3323,
                    3405,
                    2641,
                    2642,
                    3026,
                    2644,
                    2772,
                    3283,
                    2775,
                    3032,
                    3033,
                    2782,
                    3048,
                    3181,
                    3054,
                    3055,
                    3183,
                    3185,
                    2547,
                    2548,
                    3060,
                    2550,
                    3061,
                    2552,
                    2553,
                    3062,
                    3187
                ],
                "self.get_indexer": [
                    3041,
                    3042,
                    3332,
                    3524,
                    5189,
                    3018,
                    2867,
                    2547,
                    4670
                ],
                "nonzero": [
                    2637,
                    3662,
                    2705,
                    2548,
                    2775,
                    2782
                ],
                "algos.unique1d": [
                    2641,
                    2550
                ],
                "self.get_indexer_non_unique": [
                    4671,
                    3341,
                    2550,
                    3367
                ],
                "other_diff": [
                    2553,
                    2554
                ],
                "algos.take_nd": [
                    2553,
                    3700,
                    3750
                ],
                "concat_compat": [
                    2785,
                    2554
                ],
                "algos.safe_sort": [
                    2648,
                    2561,
                    2788,
                    2711
                ],
                "warnings.warn": [
                    2563,
                    4606
                ],
                "warnings": [
                    2563,
                    4606
                ],
                "err": [
                    5002,
                    2564,
                    4222
                ],
                "RuntimeWarning": [
                    2565
                ],
                "self._wrap_setop_result": [
                    2633,
                    2570
                ],
                "ensure_index": [
                    4642,
                    3366,
                    2929,
                    2613,
                    3318,
                    3448
                ],
                "other.astype": [
                    4681,
                    2620,
                    3478
                ],
                "this.intersection": [
                    2621
                ],
                "self._inner_indexer": [
                    3792,
                    3803,
                    2629
                ],
                "get_indexer": [
                    2636
                ],
                "indexer.take": [
                    2705,
                    2637,
                    2775
                ],
                "InvalidIndexError": [
                    2953,
                    4553,
                    2638
                ],
                "IncompatibleFrequency": [
                    5704,
                    2638
                ],
                "get_indexer_non_unique": [
                    2641
                ],
                "other.take": [
                    2644
                ],
                "res_name": [
                    2649,
                    2651,
                    2645
                ],
                "taken.values": [
                    2648
                ],
                "taken.name": [
                    2651
                ],
                "result_name": [
                    2793,
                    2700,
                    2767,
                    2768,
                    2806,
                    2808,
                    2809,
                    2715
                ],
                "self._convert_can_do_setop": [
                    2700,
                    2766
                ],
                "self._get_unique_index": [
                    2770,
                    2702
                ],
                "this.get_indexer": [
                    2704,
                    2948,
                    2772
                ],
                "label_diff": [
                    2707,
                    2708
                ],
                "np.setdiff1d": [
                    2776,
                    2707
                ],
                "np.arange": [
                    3401,
                    3373,
                    2707,
                    4376,
                    2777,
                    3389,
                    3390,
                    3711
                ],
                "this.size": [
                    2777,
                    2707
                ],
                "the_diff": [
                    2785,
                    2788,
                    2796,
                    2708,
                    2711,
                    2715
                ],
                "this.values.take": [
                    2708
                ],
                "this.values": [
                    2708
                ],
                "this._shallow_copy": [
                    2715
                ],
                "result_name_update": [
                    2768,
                    2766
                ],
                "other._get_unique_index": [
                    2771
                ],
                "common_indexer": [
                    2777,
                    2775
                ],
                "left_indexer": [
                    3715,
                    3720,
                    3725,
                    3726,
                    3734,
                    3735,
                    3740,
                    3757,
                    3760,
                    3761,
                    3766,
                    2776,
                    2779,
                    3041,
                    3044,
                    3050,
                    3690,
                    3693,
                    3694,
                    3711
                ],
                "left_diff": [
                    2785,
                    2779
                ],
                "this._values.take": [
                    2779
                ],
                "this._values": [
                    2779
                ],
                "right_indexer": [
                    3042,
                    3045,
                    3750,
                    3049,
                    3754,
                    3051,
                    3757,
                    3763,
                    3764,
                    3766,
                    2782,
                    2783
                ],
                "right_diff": [
                    2785,
                    2783
                ],
                "other._values.take": [
                    2783
                ],
                "attribs": [
                    4197,
                    4198,
                    2792,
                    2793,
                    2794,
                    2795,
                    2796,
                    4202
                ],
                "self._shallow_copy_with_infer": [
                    3971,
                    4202,
                    2796,
                    3404,
                    5166
                ],
                "method": [
                    3011,
                    2852,
                    2949,
                    3333,
                    3015,
                    3336,
                    2957,
                    2958,
                    2959,
                    2928,
                    2990,
                    2867,
                    2995,
                    5559,
                    5560,
                    3321,
                    2942
                ],
                "tolerance": [
                    2949,
                    3333,
                    2958,
                    2960,
                    2962,
                    2979,
                    2980,
                    2853,
                    2982,
                    2864,
                    2865,
                    2867,
                    2996,
                    2998,
                    3053,
                    3054,
                    2930,
                    2931,
                    3061,
                    2942
                ],
                "casted_key": [
                    2858,
                    2860
                ],
                "self._maybe_cast_indexer": [
                    2858
                ],
                "key": [
                    3075,
                    4614,
                    4109,
                    4110,
                    4111,
                    4113,
                    4116,
                    4118,
                    3095,
                    4119,
                    3097,
                    4121,
                    3099,
                    4122,
                    4895,
                    4896,
                    3111,
                    3113,
                    2858,
                    3115,
                    4905,
                    3117,
                    2862,
                    4907,
                    4910,
                    2865,
                    2867,
                    3124,
                    3125,
                    3126,
                    2872,
                    3264,
                    4550,
                    3143,
                    4553,
                    4561,
                    4565,
                    4568,
                    3161,
                    3162,
                    3163,
                    3164,
                    4572,
                    3181,
                    3183,
                    4081,
                    4083
                ],
                "self._engine.get_loc": [
                    2860,
                    4614
                ],
                "self._convert_tolerance": [
                    2865,
                    2931
                ],
                "indexer.ndim": [
                    2868
                ],
                "indexer.size": [
                    2868
                ],
                "loc": [
                    4614,
                    4568,
                    4616,
                    5165,
                    4591,
                    4336,
                    4561,
                    4592,
                    4594,
                    4340,
                    4341,
                    2870,
                    2871,
                    4342,
                    2873,
                    5146,
                    4572
                ],
                "indexer.item": [
                    2870
                ],
                "missing.clean_reindex_fill_method": [
                    2928
                ],
                "missing": [
                    3367,
                    3372,
                    3341,
                    4654,
                    3375,
                    2928,
                    3376,
                    4655
                ],
                "target": [
                    2945,
                    2947,
                    2949,
                    3333,
                    3341,
                    2958,
                    3343,
                    2960,
                    3344,
                    3345,
                    3347,
                    2973,
                    4642,
                    4643,
                    2980,
                    4644,
                    3366,
                    3367,
                    4647,
                    4648,
                    4649,
                    2987,
                    4650,
                    4652,
                    3376,
                    2993,
                    2995,
                    2998,
                    3386,
                    4670,
                    4671,
                    3018,
                    3020,
                    3324,
                    3041,
                    3042,
                    3044,
                    3045,
                    3304,
                    3307,
                    3309,
                    3054,
                    2929,
                    2931,
                    3060,
                    3316,
                    3318,
                    2936,
                    2937,
                    2939,
                    2940,
                    3327
                ],
                "target.is_boolean": [
                    2936
                ],
                "self.is_numeric": [
                    2936
                ],
                "np.repeat": [
                    2937,
                    3453,
                    3461
                ],
                "target.size": [
                    2937,
                    2980
                ],
                "pself": [
                    4643,
                    4644,
                    4645,
                    2939,
                    2940,
                    2941
                ],
                "ptarget": [
                    4643,
                    4644,
                    4645,
                    2939,
                    2940,
                    2942
                ],
                "self._maybe_promote": [
                    4643,
                    2939
                ],
                "pself.get_indexer": [
                    2941
                ],
                "limit": [
                    3009,
                    3041,
                    3042,
                    2949,
                    3333,
                    3336,
                    2958,
                    2960,
                    2993,
                    2995,
                    2967,
                    2942
                ],
                "target.dtype": [
                    2945
                ],
                "target.astype": [
                    2947
                ],
                "self._get_fill_indexer": [
                    2958
                ],
                "self._get_nearest_indexer": [
                    2960
                ],
                "self._engine.get_indexer": [
                    2973
                ],
                "target._ndarray_values": [
                    2993,
                    4652,
                    2973,
                    2998
                ],
                "tolerance.size": [
                    2980
                ],
                "target.is_monotonic_increasing": [
                    2987
                ],
                "engine_method": [
                    2993,
                    2988
                ],
                "self._engine.get_pad_indexer": [
                    2989
                ],
                "self._engine.get_backfill_indexer": [
                    2991
                ],
                "self._get_fill_indexer_searchsorted": [
                    2995
                ],
                "self._filter_indexer_tolerance": [
                    2997,
                    3054
                ],
                "side": [
                    4992,
                    3015,
                    4999,
                    3020,
                    3021,
                    5013,
                    4950,
                    4982,
                    4985,
                    5018,
                    4956,
                    5023
                ],
                "nonexact": [
                    3026,
                    3019,
                    3020
                ],
                "self._searchsorted_monotonic": [
                    3020,
                    4999
                ],
                "left_distances": [
                    3049,
                    3044
                ],
                "np.abs": [
                    5284,
                    3044,
                    3045
                ],
                "right_distances": [
                    3049,
                    3045
                ],
                "operator.lt": [
                    5207,
                    3047
                ],
                "operator": [
                    5249,
                    5282,
                    5251,
                    5283,
                    5254,
                    3047,
                    5256,
                    5260,
                    5261,
                    5264,
                    5205,
                    5206,
                    5207,
                    5208,
                    5209,
                    5210
                ],
                "operator.le": [
                    5209,
                    3047
                ],
                "np.where": [
                    3048,
                    3964,
                    3061,
                    4374
                ],
                "distance": [
                    3060,
                    3061
                ],
                "abs": [
                    3060
                ],
                "kind": [
                    4992,
                    3140,
                    4932,
                    4903,
                    3113,
                    4044,
                    3086,
                    4879,
                    3185,
                    3155,
                    4980,
                    3095,
                    5080,
                    3099,
                    5086
                ],
                "is_float": [
                    4938,
                    3099,
                    3095
                ],
                "self.is_floating": [
                    3096,
                    4894
                ],
                "self._invalid_indexer": [
                    3111,
                    4939,
                    3115,
                    4910,
                    4944,
                    3097
                ],
                "is_integer": [
                    3113,
                    4907,
                    3147,
                    4591,
                    4943,
                    4565
                ],
                "self.holds_integer": [
                    3114,
                    4578
                ],
                "slice": [
                    3119,
                    4113,
                    4340,
                    4887,
                    3128,
                    5017
                ],
                "self._validate_indexer": [
                    3124,
                    3125,
                    3126,
                    3161,
                    3162,
                    3163
                ],
                "key.start": [
                    3161,
                    3124,
                    3143
                ],
                "key.stop": [
                    3162,
                    3125,
                    3143
                ],
                "key.step": [
                    3163,
                    3126,
                    3143
                ],
                "start": [
                    3172,
                    3173,
                    3143,
                    5064,
                    5068,
                    3149,
                    3150,
                    4879,
                    5070,
                    3185,
                    5079,
                    5080
                ],
                "stop": [
                    3174,
                    3175,
                    3143,
                    3149,
                    3150,
                    3185
                ],
                "step": [
                    5060,
                    3143,
                    4879,
                    3185,
                    4887
                ],
                "is_null_slicer": [
                    3180,
                    3149
                ],
                "is_index_slice": [
                    3160,
                    3150,
                    3151
                ],
                "is_int": [
                    3150
                ],
                "is_positional": [
                    3176,
                    3169,
                    3182,
                    3151
                ],
                "self.is_integer": [
                    3152,
                    3160
                ],
                "self.is_categorical": [
                    3152,
                    4140
                ],
                "self.is_mixed": [
                    3169
                ],
                "self.get_loc": [
                    4996,
                    3173,
                    3175,
                    4336,
                    4561
                ],
                "self.slice_indexer": [
                    3185
                ],
                "keyarr": [
                    3203,
                    3204,
                    3206,
                    3208,
                    3209,
                    3240,
                    3224,
                    3225
                ],
                "self._convert_index_indexer": [
                    3204
                ],
                "self._convert_arr_indexer": [
                    3206
                ],
                "self._convert_list_indexer": [
                    3208
                ],
                "form": [
                    4910,
                    3263
                ],
                "preserve_names": [
                    3304,
                    3343
                ],
                "_ensure_has_len": [
                    3307
                ],
                "attrs.pop": [
                    3311
                ],
                "ABCRangeIndex": [
                    3312
                ],
                "_": [
                    3323,
                    3653,
                    4671
                ],
                "self._join_level": [
                    3323,
                    3444,
                    3599
                ],
                "target.nlevels": [
                    3343
                ],
                "target.name": [
                    3345,
                    3343
                ],
                "target.copy": [
                    3344
                ],
                "check": [
                    3398,
                    3368,
                    3369,
                    3402,
                    3377,
                    3378,
                    3379
                ],
                "new_labels": [
                    3369,
                    3404,
                    3381,
                    3382,
                    3383
                ],
                "self.take": [
                    4706,
                    3401,
                    3369,
                    4430,
                    3378
                ],
                "new_indexer": [
                    3401,
                    3370,
                    3402,
                    3405,
                    3389,
                    3390,
                    3391
                ],
                "length": [
                    3377,
                    3379,
                    3373
                ],
                "missing_labels": [
                    3376,
                    3383
                ],
                "target.take": [
                    3376
                ],
                "missing_indexer": [
                    3377,
                    3391,
                    3383
                ],
                "ensure_int64": [
                    3652,
                    3663,
                    3664,
                    3377,
                    3697,
                    3379
                ],
                "cur_labels": [
                    3390,
                    3378,
                    3382
                ],
                "cur_indexer": [
                    3390,
                    3379,
                    3382
                ],
                "target.is_unique": [
                    3386
                ],
                "self_is_mi": [
                    3429,
                    3592,
                    3434,
                    3443,
                    3546,
                    3549
                ],
                "other_is_mi": [
                    3430,
                    3434,
                    3443,
                    3547,
                    3549
                ],
                "other.names": [
                    3539,
                    3437,
                    3598
                ],
                "self._join_multi": [
                    3440
                ],
                "return_indexers": [
                    3520,
                    3808,
                    3490,
                    3460,
                    3494,
                    3773,
                    3624,
                    3499,
                    3469,
                    3471,
                    3440,
                    3600,
                    3759,
                    3445,
                    3479,
                    3452,
                    3485
                ],
                "join_index": [
                    3456,
                    3459,
                    3461,
                    3462,
                    3464,
                    3742,
                    3618,
                    3620,
                    3622,
                    3751,
                    3625,
                    3754,
                    3627,
                    3505,
                    3507,
                    3766,
                    3511,
                    3768,
                    3515,
                    3518,
                    3521,
                    3524,
                    3525,
                    3528,
                    3529,
                    3784,
                    3531,
                    3788,
                    3792,
                    3793,
                    3795,
                    3796,
                    3799,
                    3801,
                    3803,
                    3805,
                    3806,
                    3811,
                    3813,
                    3691,
                    3694,
                    3451,
                    3453,
                    3454
                ],
                "rindexer": [
                    3526,
                    3528,
                    3529,
                    3453,
                    3454
                ],
                "other._shallow_copy": [
                    3459
                ],
                "lindexer": [
                    3522,
                    3524,
                    3461,
                    3462,
                    3529
                ],
                "self._join_precedence": [
                    3466
                ],
                "other._join_precedence": [
                    3466
                ],
                "get": [
                    3674,
                    3467,
                    3596
                ],
                "other.join": [
                    3468
                ],
                "y": [
                    3472,
                    3473
                ],
                "z": [
                    3472,
                    3473
                ],
                "this.join": [
                    3479
                ],
                "_validate_join_method": [
                    3481
                ],
                "other.is_unique": [
                    3483,
                    3781,
                    3487
                ],
                "self._join_non_unique": [
                    3484,
                    3493
                ],
                "self._join_monotonic": [
                    3489,
                    3498
                ],
                "join_index.sort_values": [
                    3518
                ],
                "other.get_indexer": [
                    3528
                ],
                "self_names": [
                    3552,
                    3538,
                    3540
                ],
                "com.not_none": [
                    3538,
                    3539
                ],
                "other_names": [
                    3553,
                    3539,
                    3540
                ],
                "overlap": [
                    3552,
                    3553,
                    3587,
                    3540,
                    3543
                ],
                "ldrop_names": [
                    3552,
                    3572,
                    3556,
                    3560
                ],
                "rdrop_names": [
                    3572,
                    3553,
                    3556,
                    3561
                ],
                "self_jnlevels": [
                    3560,
                    3565,
                    3557
                ],
                "other_jnlevels": [
                    3561,
                    3566,
                    3558
                ],
                "other.reorder_levels": [
                    3558
                ],
                "self.droplevel": [
                    3560
                ],
                "other.droplevel": [
                    3561
                ],
                "join_idx": [
                    3565,
                    3575
                ],
                "lidx": [
                    3585,
                    3809,
                    3811,
                    3785,
                    3799,
                    3789,
                    3565,
                    3792,
                    3795,
                    3575,
                    3801,
                    3803,
                    3805
                ],
                "ridx": [
                    3585,
                    3810,
                    3811,
                    3786,
                    3799,
                    3565,
                    3790,
                    3792,
                    3795,
                    3575,
                    3801,
                    3803,
                    3805
                ],
                "self_jnlevels.join": [
                    3565
                ],
                "dropped_names": [
                    3572,
                    3575
                ],
                "levels": [
                    3580,
                    3574
                ],
                "codes": [
                    3580,
                    3574
                ],
                "_restore_dropped_levels_multijoin": [
                    3574
                ],
                "multi_join_idx": [
                    3585,
                    3579,
                    3583
                ],
                "multi_join_idx.remove_unused_levels": [
                    3583
                ],
                "jl": [
                    3587,
                    3598
                ],
                "flip_order": [
                    3591,
                    3594,
                    3756,
                    3603,
                    3671,
                    3672
                ],
                "other.names.index": [
                    3598
                ],
                "left_idx": [
                    3618,
                    3619,
                    3625,
                    3611,
                    3615
                ],
                "right_idx": [
                    3616,
                    3625,
                    3611,
                    3620
                ],
                "_get_join_indexers": [
                    3611
                ],
                "self._ndarray_values.take": [
                    3618
                ],
                "np.putmask": [
                    4218,
                    3620
                ],
                "other._ndarray_values.take": [
                    3620
                ],
                "self._wrap_joined_index": [
                    3793,
                    3796,
                    3806,
                    3622
                ],
                "size": [
                    3648
                ],
                "labels": [
                    3648,
                    3651,
                    3652,
                    5188,
                    5189,
                    5193,
                    3658,
                    3659,
                    3663
                ],
                "lab": [
                    3714,
                    3652,
                    3653,
                    3659,
                    3660,
                    3726,
                    3663,
                    3664,
                    3732,
                    3735
                ],
                "sorter": [
                    3653,
                    3654
                ],
                "libalgos.groupsort_indexer": [
                    3720,
                    3653
                ],
                "libalgos": [
                    3720,
                    3653
                ],
                "lab.max": [
                    3653
                ],
                "tic": [
                    3658,
                    3660,
                    3662
                ],
                "starts": [
                    3664,
                    3662
                ],
                "np.hstack": [
                    3662
                ],
                "lib.get_level_sorter": [
                    3664
                ],
                "left._get_level_number": [
                    3676
                ],
                "old_level": [
                    3698,
                    3684,
                    3677
                ],
                "left.levels": [
                    3707,
                    3677
                ],
                "right.is_unique": [
                    3679
                ],
                "new_level": [
                    3708,
                    3684
                ],
                "left_lev_indexer": [
                    3688,
                    3697,
                    3698,
                    3684
                ],
                "right_lev_indexer": [
                    3684,
                    3749,
                    3751
                ],
                "old_level.join": [
                    3684
                ],
                "keep_order": [
                    3689,
                    3710
                ],
                "_get_leaf_sorter": [
                    3693,
                    3734
                ],
                "left.codes": [
                    3704,
                    3701,
                    3693
                ],
                "rev_indexer": [
                    3698,
                    3701
                ],
                "lib.get_reverse_indexer": [
                    3698
                ],
                "new_lev_codes": [
                    3712,
                    3719,
                    3721,
                    3729,
                    3700,
                    3705
                ],
                "np.intp": [
                    3711
                ],
                "mask.all": [
                    3713,
                    3730
                ],
                "ngroups": [
                    3721,
                    3719
                ],
                "new_lev_codes.max": [
                    3719
                ],
                "counts": [
                    3720,
                    3725
                ],
                "mask_all": [
                    3730,
                    3731,
                    3739
                ],
                "mask.nonzero": [
                    3740
                ],
                "left.names": [
                    3745
                ],
                "join_index.codes": [
                    3754,
                    3751
                ],
                "ret_index": [
                    3776,
                    3772,
                    3774
                ],
                "sv": [
                    3778,
                    3786,
                    3789,
                    3792,
                    3795,
                    3799,
                    3801,
                    3803,
                    3805
                ],
                "ov": [
                    3779,
                    3786,
                    3789,
                    3792,
                    3795,
                    3799,
                    3801,
                    3803,
                    3805
                ],
                "self._left_indexer_unique": [
                    3786,
                    3789
                ],
                "self._left_indexer": [
                    3801,
                    3799
                ],
                "joined": [
                    3817
                ],
                "array": [
                    3848,
                    3851,
                    3852,
                    3847
                ],
                "PandasArray": [
                    3851
                ],
                "IndexOpsMixin.array.__doc__": [
                    3845
                ],
                "IndexOpsMixin.array": [
                    3845
                ],
                "memory_usage": [
                    3931
                ],
                "self._engine.sizeof": [
                    3934
                ],
                "IndexOpsMixin.memory_usage.__doc__": [
                    3929
                ],
                "IndexOpsMixin.memory_usage": [
                    3929
                ],
                "is_bool": [
                    3958
                ],
                "values.astype": [
                    3961
                ],
                "cond": [
                    3964
                ],
                "self._is_numeric_dtype": [
                    4000,
                    3966
                ],
                "np.any": [
                    5401,
                    3966
                ],
                "cls.__name__": [
                    3979,
                    5580
                ],
                "item": [
                    4000,
                    5165,
                    5164,
                    4005
                ],
                "Any": [
                    4046
                ],
                "hash": [
                    4081
                ],
                "OverflowError": [
                    5738,
                    5747,
                    4084
                ],
                "getitem": [
                    4106,
                    4122,
                    4116,
                    4111
                ],
                "self._data.__getitem__": [
                    4106
                ],
                "promote": [
                    4107,
                    4116,
                    4127
                ],
                "com.cast_scalar_indexer": [
                    4110,
                    4895
                ],
                "com.is_bool_indexer": [
                    4118
                ],
                "com.values_from_object": [
                    4121,
                    4254
                ],
                "deprecate_ndim_indexing": [
                    4125
                ],
                "to_concat": [
                    4192,
                    4161,
                    4193,
                    4163,
                    4196,
                    4167,
                    4200,
                    4170,
                    4202,
                    4174,
                    4177,
                    4178,
                    4156,
                    4159
                ],
                "to_concat.append": [
                    4161
                ],
                "obj": [
                    4163,
                    4164,
                    5573,
                    4167,
                    5576
                ],
                "obj.name": [
                    5576,
                    4167
                ],
                "self._concat": [
                    4170
                ],
                "typs": [
                    4176,
                    4174
                ],
                "_concat.get_dtype_kinds": [
                    4174
                ],
                "_concat": [
                    4174
                ],
                "self._concat_same_dtype": [
                    4177
                ],
                "Index._concat_same_dtype": [
                    4178
                ],
                "klasses": [
                    4185,
                    4193
                ],
                "ABCDatetimeIndex": [
                    4186,
                    4677
                ],
                "ABCIntervalIndex": [
                    4190
                ],
                "x.astype": [
                    4193
                ],
                "x._values": [
                    4200
                ],
                "np.concatenate": [
                    4202,
                    5165
                ],
                "self._convert_for_op": [
                    4218
                ],
                "putmask": [
                    4225
                ],
                "self.is_": [
                    4237
                ],
                "other.equals": [
                    4245
                ],
                "other.nlevels": [
                    4250
                ],
                "array_equivalent": [
                    4253
                ],
                "c": [
                    4272,
                    4273
                ],
                "self._comparables": [
                    4273
                ],
                "label": [
                    4992,
                    4996,
                    4999,
                    4988,
                    4938,
                    4939,
                    4943,
                    4336,
                    4944,
                    4946,
                    4950,
                    4956
                ],
                "loc.indices": [
                    4341
                ],
                "locs": [
                    4376,
                    4379,
                    4373,
                    4374
                ],
                "searchsorted": [
                    4955,
                    4373
                ],
                "where.values": [
                    4379,
                    4373
                ],
                "where": [
                    4379,
                    4373
                ],
                "first": [
                    4378,
                    4379
                ],
                "mask.argmax": [
                    4378
                ],
                "_as": [
                    4433,
                    4426,
                    4428,
                    4430
                ],
                "self.argsort": [
                    4426
                ],
                "sorted_index": [
                    4433,
                    4435,
                    4430
                ],
                "return_indexer": [
                    4432
                ],
                "self.asi8": [
                    4536
                ],
                "result.argsort": [
                    4539
                ],
                "args": [
                    4539
                ],
                "self._should_fallback_to_positional": [
                    4563
                ],
                "self._get_values_for_loc": [
                    4572
                ],
                "series": [
                    4592,
                    4594,
                    4572
                ],
                "self.is_boolean": [
                    4578
                ],
                "series._values": [
                    4592
                ],
                "series.iloc": [
                    4594
                ],
                "FutureWarning": [
                    4611
                ],
                "validate_numeric_casting": [
                    4615
                ],
                "arr.dtype": [
                    4615
                ],
                "arr": [
                    4616,
                    4615
                ],
                "pself.get_indexer_non_unique": [
                    4645
                ],
                "is_categorical": [
                    4647
                ],
                "tgt_values": [
                    4648,
                    4650,
                    4652,
                    4654
                ],
                "self.is_all_dates": [
                    4649
                ],
                "target.is_all_dates": [
                    4649
                ],
                "target.asi8": [
                    4650
                ],
                "self._engine.get_indexer_non_unique": [
                    4654
                ],
                "values.values": [
                    4701
                ],
                "ensure_categorical": [
                    4702
                ],
                "values._reverse_indexer": [
                    4703
                ],
                "result.items": [
                    4706
                ],
                "PrettyDict": [
                    4708,
                    4684
                ],
                "Hashable": [
                    5569,
                    4684
                ],
                "new_values": [
                    4736,
                    4740,
                    4743,
                    4746,
                    4750,
                    4731
                ],
                "_map_values": [
                    4731
                ],
                "na_action": [
                    4731
                ],
                "new_values.size": [
                    4736,
                    4746
                ],
                "attributes.get": [
                    4739,
                    4740
                ],
                "algos.isin": [
                    4833
                ],
                "start_slice": [
                    5115,
                    4879,
                    5105,
                    4882,
                    5078,
                    4887,
                    5080,
                    5081,
                    5082,
                    5113,
                    5112
                ],
                "end_slice": [
                    5088,
                    4879,
                    5105,
                    5111,
                    4884,
                    5110,
                    4887,
                    5115,
                    5084,
                    5086,
                    5087
                ],
                "self.slice_locs": [
                    4879
                ],
                "end": [
                    5064,
                    5068,
                    5071,
                    4879,
                    5085,
                    5086
                ],
                "AssertionError": [
                    4883,
                    4885
                ],
                "self.searchsorted": [
                    4950
                ],
                "pos": [
                    4955,
                    4958
                ],
                "original_label": [
                    4988,
                    5014
                ],
                "self._maybe_cast_slice_bound": [
                    4992
                ],
                "slc": [
                    5024,
                    5026,
                    4996,
                    5004,
                    5007,
                    5008,
                    5010,
                    5011,
                    5017,
                    5019,
                    5021
                ],
                "lib.maybe_booleans_to_slice": [
                    5008
                ],
                "slc.view": [
                    5008
                ],
                "lib.maybe_indices_to_slice": [
                    5010
                ],
                "slc.astype": [
                    5010
                ],
                "slc.start": [
                    5019
                ],
                "slc.stop": [
                    5021
                ],
                "inc": [
                    5090,
                    5060,
                    5062
                ],
                "datetime": [
                    5068
                ],
                "ts_start": [
                    5075,
                    5070
                ],
                "Timestamp": [
                    5070,
                    5071
                ],
                "ts_end": [
                    5075,
                    5071
                ],
                "tz_compare": [
                    5075
                ],
                "ts_start.tzinfo": [
                    5075
                ],
                "ts_end.tzinfo": [
                    5075
                ],
                "self.get_slice_bound": [
                    5080,
                    5086
                ],
                "np.delete": [
                    5146
                ],
                "_self": [
                    5163,
                    5165
                ],
                "self._coerce_scalar_to_index": [
                    5164
                ],
                "arr_dtype": [
                    5187,
                    5188
                ],
                "com.index_labels_to_array": [
                    5188
                ],
                "errors": [
                    5192
                ],
                "self.delete": [
                    5195
                ],
                "cls.__eq__": [
                    5205
                ],
                "_make_comparison_op": [
                    5205,
                    5206,
                    5207,
                    5208,
                    5209,
                    5210
                ],
                "operator.eq": [
                    5205
                ],
                "cls.__ne__": [
                    5206
                ],
                "operator.ne": [
                    5206
                ],
                "cls.__lt__": [
                    5207
                ],
                "cls.__gt__": [
                    5208
                ],
                "operator.gt": [
                    5208
                ],
                "cls.__le__": [
                    5209
                ],
                "cls.__ge__": [
                    5210
                ],
                "operator.ge": [
                    5210
                ],
                "cls.__add__": [
                    5217,
                    5249
                ],
                "make_invalid_op": [
                    5409,
                    5410,
                    5217,
                    5218,
                    5219,
                    5220,
                    5221,
                    5222,
                    5229,
                    5230,
                    5231,
                    5232,
                    5233,
                    5234,
                    5235,
                    5236,
                    5237,
                    5238,
                    5239,
                    5240,
                    5241,
                    5242
                ],
                "cls.__radd__": [
                    5218,
                    5250
                ],
                "cls.__iadd__": [
                    5219
                ],
                "cls.__sub__": [
                    5251,
                    5220
                ],
                "cls.__rsub__": [
                    5252,
                    5221
                ],
                "cls.__isub__": [
                    5222
                ],
                "cls.__pow__": [
                    5229,
                    5254
                ],
                "cls.__rpow__": [
                    5253,
                    5230
                ],
                "cls.__mul__": [
                    5264,
                    5231
                ],
                "cls.__rmul__": [
                    5232,
                    5265
                ],
                "cls.__floordiv__": [
                    5233,
                    5261
                ],
                "cls.__rfloordiv__": [
                    5234,
                    5262
                ],
                "cls.__truediv__": [
                    5256,
                    5235
                ],
                "cls.__rtruediv__": [
                    5257,
                    5236
                ],
                "cls.__mod__": [
                    5260,
                    5237
                ],
                "cls.__divmod__": [
                    5238,
                    5263
                ],
                "cls.__neg__": [
                    5282,
                    5239
                ],
                "cls.__pos__": [
                    5240,
                    5283
                ],
                "cls.__abs__": [
                    5241,
                    5284
                ],
                "cls.__inv__": [
                    5242,
                    5285
                ],
                "_make_arithmetic_op": [
                    5249,
                    5250,
                    5251,
                    5252,
                    5253,
                    5254,
                    5256,
                    5257,
                    5260,
                    5261,
                    5262,
                    5263,
                    5264,
                    5265
                ],
                "operator.add": [
                    5249
                ],
                "ops.radd": [
                    5250
                ],
                "operator.sub": [
                    5251
                ],
                "ops.rsub": [
                    5252
                ],
                "ops.rpow": [
                    5253
                ],
                "operator.pow": [
                    5254
                ],
                "operator.truediv": [
                    5256
                ],
                "ops.rtruediv": [
                    5257
                ],
                "operator.mod": [
                    5260
                ],
                "operator.floordiv": [
                    5261
                ],
                "ops.rfloordiv": [
                    5262
                ],
                "divmod": [
                    5263
                ],
                "operator.mul": [
                    5264
                ],
                "ops.rmul": [
                    5265
                ],
                "_evaluate_numeric_unary.__name__": [
                    5279
                ],
                "_evaluate_numeric_unary": [
                    5280,
                    5279
                ],
                "opstr": [
                    5279
                ],
                "_make_evaluate_unary": [
                    5282,
                    5283,
                    5284,
                    5285
                ],
                "operator.neg": [
                    5282
                ],
                "operator.pos": [
                    5283
                ],
                "cls._add_numeric_methods_unary": [
                    5289
                ],
                "cls._add_numeric_methods_binary": [
                    5290
                ],
                "_doc": [
                    5297,
                    5382
                ],
                "dedent": [
                    5312,
                    5354
                ],
                "f": [
                    5384
                ],
                "result.ndim": [
                    5387
                ],
                "result.dtype.type": [
                    5390
                ],
                "result.dtype": [
                    5390
                ],
                "result.item": [
                    5390
                ],
                "Substitution": [
                    5380
                ],
                "desc": [
                    5380
                ],
                "logical_func.__name__": [
                    5394
                ],
                "logical_func": [
                    5394,
                    5395
                ],
                "cls.all": [
                    5409,
                    5397
                ],
                "_make_logical_function": [
                    5400,
                    5397
                ],
                "np.all": [
                    5398
                ],
                "cls.any": [
                    5400,
                    5410
                ],
                "self._values.shape": [
                    5420
                ],
                "Index._add_numeric_methods_disabled": [
                    5423
                ],
                "Index._add_logical_methods": [
                    5424
                ],
                "Index._add_comparison_methods": [
                    5425
                ],
                "sequences": [
                    5464,
                    5466,
                    5461
                ],
                "MultiIndex.from_arrays": [
                    5466,
                    5522
                ],
                "index_like": [
                    5504,
                    5505,
                    5506,
                    5508,
                    5509,
                    5513,
                    5514,
                    5515,
                    5517,
                    5524,
                    5531,
                    5501,
                    5533,
                    5503
                ],
                "index_like.copy": [
                    5503
                ],
                "index_like.name": [
                    5506
                ],
                "converted": [
                    5522,
                    5524,
                    5517,
                    5519
                ],
                "all_arrays": [
                    5517,
                    5519
                ],
                "lib.clean_index_list": [
                    5517
                ],
                "seq": [
                    5545,
                    5541,
                    5543
                ],
                "trimmed": [
                    5552,
                    5553,
                    5554,
                    5555
                ],
                "strings": [
                    5552,
                    5553
                ],
                "n": [
                    5566
                ],
                "Optional": [
                    5569
                ],
                "is_integer_dtype": [
                    5605
                ],
                "inferred": [
                    5697,
                    5661,
                    5700,
                    5687,
                    5606,
                    5607,
                    5672,
                    5609,
                    5676,
                    5613,
                    5683,
                    5686,
                    5623,
                    5628,
                    5629,
                    5663
                ],
                "maybe_cast_to_integer_array": [
                    5608,
                    5614
                ],
                "_try_convert_to_int_array": [
                    5665,
                    5619
                ],
                "np.float64": [
                    5674,
                    5621
                ],
                "IntervalArray._from_sequence": [
                    5678
                ],
                "IntervalArray": [
                    5678
                ],
                "inferred.startswith": [
                    5697,
                    5687
                ],
                "DatetimeArray._from_sequence": [
                    5689
                ],
                "DatetimeArray": [
                    5689
                ],
                "OutOfBoundsDatetime": [
                    5691
                ],
                "TimedeltaArray._from_sequence": [
                    5698
                ],
                "TimedeltaArray": [
                    5698
                ],
                "PeriodArray._from_sequence": [
                    5702
                ],
                "PeriodArray": [
                    5702
                ],
                "subarr.dtype": [
                    5707
                ],
                "klass": [
                    5784,
                    5787
                ],
                "index.astype": [
                    5785
                ]
            },
            "filtered_variables_in_file": {
                "TYPE_CHECKING": [
                    89
                ],
                "__all__": [
                    93
                ],
                "_unsortable_types": [
                    95
                ],
                "_index_doc_kwargs": [
                    4640,
                    97,
                    707,
                    2924,
                    790
                ],
                "_index_shared_docs": [
                    4640,
                    5312,
                    707,
                    5381,
                    679,
                    105,
                    4618,
                    5354,
                    2924,
                    751,
                    790,
                    2875
                ],
                "str_t": [
                    4898,
                    867,
                    996,
                    3077,
                    4835,
                    1959,
                    4962,
                    2985,
                    106,
                    848,
                    4912,
                    5168,
                    884,
                    3128,
                    3258,
                    3003
                ],
                "other": [
                    3593,
                    2570,
                    2573,
                    3598,
                    3600,
                    3612,
                    3620,
                    3622,
                    557,
                    2612,
                    2613,
                    2615,
                    2616,
                    2618,
                    2620,
                    2621,
                    4158,
                    4159,
                    2625,
                    4161,
                    2627,
                    4677,
                    4678,
                    2633,
                    4681,
                    4682,
                    3666,
                    2644,
                    2645,
                    3669,
                    111,
                    112,
                    115,
                    116,
                    117,
                    118,
                    121,
                    126,
                    130,
                    134,
                    2694,
                    2696,
                    2700,
                    4237,
                    142,
                    2704,
                    4240,
                    147,
                    4243,
                    4245,
                    4247,
                    4250,
                    4254,
                    4269,
                    4272,
                    4276,
                    3771,
                    3772,
                    3779,
                    3781,
                    3788,
                    2765,
                    2766,
                    3793,
                    2771,
                    2772,
                    3796,
                    3806,
                    2783,
                    3816,
                    2799,
                    2804,
                    2805,
                    2808,
                    2809,
                    2337,
                    2341,
                    2346,
                    2350,
                    2353,
                    2359,
                    2362,
                    2365,
                    2368,
                    2387,
                    3430,
                    2413,
                    2414,
                    3437,
                    3440,
                    3952,
                    3953,
                    3445,
                    3958,
                    3448,
                    3450,
                    3964,
                    2430,
                    3459,
                    3466,
                    3468,
                    3476,
                    3478,
                    3479,
                    3483,
                    3485,
                    3487,
                    3488,
                    3490,
                    3494,
                    3496,
                    3499,
                    3507,
                    3511,
                    2491,
                    3515,
                    2493,
                    2494,
                    2496,
                    3525,
                    3528,
                    3539,
                    2517,
                    2518,
                    2521,
                    3547,
                    2528,
                    2529,
                    2531,
                    2533,
                    3558,
                    3561,
                    2547,
                    2550,
                    3575
                ],
                "np.ndarray": [
                    3842,
                    3848,
                    5386,
                    5004,
                    3855,
                    5011,
                    4501,
                    2986,
                    3885,
                    3004,
                    588,
                    461,
                    4684,
                    5711,
                    5712,
                    5585,
                    3035,
                    352,
                    111,
                    2927,
                    3823,
                    3058,
                    3059,
                    253
                ],
                "np": [
                    5634,
                    4119,
                    5146,
                    4124,
                    3618,
                    3620,
                    4648,
                    5674,
                    5163,
                    5165,
                    3649,
                    588,
                    4684,
                    3662,
                    5711,
                    592,
                    5712,
                    599,
                    4202,
                    111,
                    120,
                    4218,
                    125,
                    3711,
                    129,
                    130,
                    2707,
                    671,
                    161,
                    5284,
                    2776,
                    2777,
                    730,
                    3823,
                    253,
                    3842,
                    3848,
                    5386,
                    3855,
                    4374,
                    5398,
                    4376,
                    5401,
                    3373,
                    3885,
                    2353,
                    2865,
                    3381,
                    3389,
                    3390,
                    3401,
                    345,
                    352,
                    2927,
                    376,
                    2937,
                    3964,
                    3453,
                    3966,
                    3461,
                    5004,
                    401,
                    5011,
                    4501,
                    2979,
                    934,
                    2986,
                    945,
                    4538,
                    3004,
                    1983,
                    1995,
                    461,
                    5585,
                    1490,
                    2004,
                    3035,
                    989,
                    991,
                    3044,
                    3045,
                    3048,
                    3058,
                    3059,
                    3061,
                    5621
                ],
                "Index": [
                    5506,
                    3203,
                    5386,
                    4750,
                    4240,
                    401,
                    149,
                    150,
                    534,
                    5277,
                    5533,
                    671,
                    420,
                    677,
                    2341,
                    4005,
                    2346,
                    5423,
                    5424,
                    2353,
                    5425,
                    2359,
                    4164,
                    5573,
                    2636,
                    2641,
                    4178,
                    5464,
                    603,
                    349,
                    2143,
                    352,
                    4200,
                    3817,
                    2413,
                    2414,
                    111,
                    2543,
                    3309,
                    2804,
                    2805,
                    635,
                    5501
                ],
                "ABCSeries": [
                    352,
                    2337,
                    5573,
                    5386,
                    142,
                    111
                ],
                "ExtensionArray": [
                    3846,
                    3855,
                    111,
                    4189,
                    118,
                    253
                ],
                "other.ndim": [
                    112
                ],
                "self": [
                    4106,
                    4107,
                    2069,
                    4140,
                    4141,
                    4156,
                    2115,
                    4168,
                    4170,
                    4177,
                    4178,
                    2137,
                    2138,
                    2139,
                    2143,
                    2144,
                    4196,
                    4197,
                    4202,
                    112,
                    115,
                    116,
                    2163,
                    118,
                    2164,
                    2165,
                    121,
                    4216,
                    123,
                    4218,
                    4219,
                    126,
                    4221,
                    4225,
                    130,
                    134,
                    4237,
                    2192,
                    2194,
                    147,
                    4243,
                    4245,
                    4249,
                    4250,
                    4254,
                    4269,
                    4272,
                    4273,
                    4276,
                    4336,
                    4338,
                    4341,
                    4342,
                    2313,
                    2314,
                    2316,
                    2318,
                    2319,
                    2320,
                    4373,
                    2326,
                    4376,
                    2331,
                    4379,
                    2341,
                    2346,
                    2350,
                    2353,
                    2359,
                    2362,
                    2365,
                    2368,
                    2372,
                    4426,
                    4430,
                    2387,
                    2388,
                    2389,
                    2390,
                    2411,
                    2430,
                    4499,
                    4536,
                    2490,
                    2491,
                    4538,
                    2493,
                    2494,
                    2496,
                    4561,
                    4563,
                    2517,
                    2518,
                    2520,
                    2521,
                    2524,
                    477,
                    2525,
                    2527,
                    4572,
                    4578,
                    2533,
                    486,
                    2535,
                    2546,
                    2547,
                    502,
                    2550,
                    504,
                    508,
                    4614,
                    2570,
                    523,
                    2573,
                    2574,
                    528,
                    529,
                    531,
                    4643,
                    4644,
                    4649,
                    557,
                    4654,
                    563,
                    564,
                    2611,
                    2612,
                    567,
                    2615,
                    2616,
                    2618,
                    2619,
                    4669,
                    4670,
                    575,
                    576,
                    2624,
                    4671,
                    2627,
                    2629,
                    4677,
                    4678,
                    4679,
                    2633,
                    586,
                    4680,
                    4681,
                    4682,
                    592,
                    2645,
                    2649,
                    602,
                    610,
                    4706,
                    625,
                    632,
                    634,
                    636,
                    4733,
                    4737,
                    4738,
                    2693,
                    2694,
                    2696,
                    2698,
                    2700,
                    4748,
                    2702,
                    662,
                    663,
                    668,
                    671,
                    674,
                    676,
                    677,
                    712,
                    713,
                    714,
                    2764,
                    2765,
                    718,
                    2766,
                    722,
                    2770,
                    726,
                    727,
                    4832,
                    4833,
                    2792,
                    2796,
                    2805,
                    2806,
                    2808,
                    4879,
                    794,
                    4894,
                    2858,
                    2860,
                    4910,
                    2865,
                    2867,
                    822,
                    824,
                    826,
                    834,
                    843,
                    4939,
                    4944,
                    852,
                    853,
                    854,
                    855,
                    4949,
                    4950,
                    4951,
                    4955,
                    4958,
                    2931,
                    2936,
                    891,
                    2939,
                    893,
                    894,
                    2940,
                    4992,
                    2945,
                    898,
                    2946,
                    4996,
                    4999,
                    2952,
                    905,
                    909,
                    2958,
                    2960,
                    5010,
                    918,
                    919,
                    924,
                    2973,
                    926,
                    929,
                    2987,
                    2989,
                    2991,
                    2995,
                    2997,
                    3018,
                    3020,
                    978,
                    3032,
                    5080,
                    987,
                    988,
                    989,
                    5086,
                    991,
                    5088,
                    3041,
                    3042,
                    3044,
                    3045,
                    3047,
                    3054,
                    1009,
                    1010,
                    3060,
                    1013,
                    5111,
                    5113,
                    1021,
                    1022,
                    3088,
                    1045,
                    3096,
                    3097,
                    5146,
                    3104,
                    3111,
                    3114,
                    3115,
                    5163,
                    1069,
                    5164,
                    1071,
                    5166,
                    1073,
                    3124,
                    3125,
                    3126,
                    5187,
                    5189,
                    5195,
                    3152,
                    3160,
                    3161,
                    3162,
                    3163,
                    3169,
                    3173,
                    3175,
                    1129,
                    1130,
                    1133,
                    3185,
                    1144,
                    1148,
                    1154,
                    1155,
                    3204,
                    3206,
                    3208,
                    1167,
                    1178,
                    5276,
                    5277,
                    1205,
                    1206,
                    3263,
                    3283,
                    3310,
                    3312,
                    1266,
                    3315,
                    3316,
                    1272,
                    3323,
                    3327,
                    1281,
                    1283,
                    3331,
                    3332,
                    5384,
                    3341,
                    3343,
                    3345,
                    3367,
                    3369,
                    5420,
                    3378,
                    1337,
                    1353,
                    3401,
                    3404,
                    1373,
                    1375,
                    1379,
                    3429,
                    3437,
                    3440,
                    3444,
                    1399,
                    3451,
                    3458,
                    3466,
                    3469,
                    3476,
                    3477,
                    3483,
                    3484,
                    1437,
                    1438,
                    3487,
                    3488,
                    3489,
                    3493,
                    3496,
                    3498,
                    3505,
                    3511,
                    1464,
                    1467,
                    1468,
                    3515,
                    1470,
                    3521,
                    1475,
                    1476,
                    1477,
                    3524,
                    3538,
                    3546,
                    3557,
                    3558,
                    3560,
                    1526,
                    3575,
                    1528,
                    1540,
                    3593,
                    3599,
                    1557,
                    3612,
                    3618,
                    1574,
                    3622,
                    1591,
                    1608,
                    1615,
                    3666,
                    3669,
                    3671,
                    1647,
                    1682,
                    1717,
                    3771,
                    3772,
                    3778,
                    3781,
                    3784,
                    3786,
                    3789,
                    3792,
                    3793,
                    3795,
                    3796,
                    3799,
                    3801,
                    3803,
                    3805,
                    3806,
                    1760,
                    3816,
                    3842,
                    3847,
                    1803,
                    3883,
                    1843,
                    3927,
                    1886,
                    3934,
                    3953,
                    3955,
                    3956,
                    3966,
                    1919,
                    3971,
                    1950,
                    3998,
                    4000,
                    1956,
                    4005,
                    1963,
                    4011,
                    1970,
                    1976,
                    1977,
                    1978,
                    4038,
                    1991,
                    1992,
                    1995,
                    4044,
                    2001,
                    2002,
                    2011,
                    2012,
                    4083,
                    4088
                ],
                "is_object_dtype": [
                    936,
                    4680,
                    939,
                    115,
                    340,
                    1843,
                    118,
                    4243,
                    4249,
                    123,
                    4221,
                    894
                ],
                "ABCCategorical": [
                    115
                ],
                "left": [
                    3745,
                    3669,
                    3673,
                    3676,
                    3677,
                    3689,
                    3691,
                    3693,
                    3694,
                    241,
                    244,
                    116,
                    117,
                    247,
                    3704,
                    3701,
                    250,
                    3707,
                    3711
                ],
                "self._values": [
                    2624,
                    1130,
                    5420,
                    2164,
                    116,
                    794,
                    2527
                ],
                "other.dtype": [
                    3476,
                    2618,
                    116,
                    2430
                ],
                "op": [
                    130,
                    134,
                    3047,
                    136,
                    3049,
                    147,
                    117,
                    152,
                    121,
                    5277,
                    126
                ],
                "np.errstate": [
                    120,
                    129,
                    125
                ],
                "result": [
                    2561,
                    2570,
                    2574,
                    3599,
                    3604,
                    3605,
                    3606,
                    4122,
                    4123,
                    4124,
                    4125,
                    4126,
                    4127,
                    4129,
                    2629,
                    2633,
                    598,
                    599,
                    600,
                    603,
                    2139,
                    2143,
                    4703,
                    4706,
                    4708,
                    1130,
                    1133,
                    1134,
                    632,
                    121,
                    634,
                    635,
                    636,
                    637,
                    126,
                    130,
                    132,
                    133,
                    2193,
                    2194,
                    147,
                    148,
                    149,
                    150,
                    5384,
                    5386,
                    5387,
                    5390,
                    5392,
                    4376,
                    4379,
                    4381,
                    3931,
                    3934,
                    3935,
                    3468,
                    3472,
                    3473,
                    3474,
                    940,
                    945,
                    946,
                    947,
                    950,
                    951,
                    4536,
                    4537,
                    4538,
                    4539,
                    463,
                    464,
                    1488,
                    1490,
                    1492,
                    1493,
                    470,
                    471,
                    473,
                    2535,
                    2538,
                    2542,
                    2543,
                    2554,
                    2557
                ],
                "self.values": [
                    130,
                    5384,
                    2316,
                    909,
                    4373,
                    4379,
                    668,
                    5277,
                    929,
                    674,
                    1073,
                    1970,
                    714,
                    726,
                    3927,
                    3060,
                    3956,
                    502,
                    4216,
                    121,
                    126
                ],
                "ABCMultiIndex": [
                    3429,
                    3430,
                    2320,
                    177,
                    1266,
                    3088,
                    3547,
                    4247,
                    3546,
                    123,
                    4700
                ],
                "ops.comp_method_OBJECT_ARRAY": [
                    126
                ],
                "ops": [
                    5250,
                    5252,
                    5253,
                    134,
                    5257,
                    5262,
                    5265,
                    126
                ],
                "np.asarray": [
                    130,
                    2979,
                    3618,
                    4648,
                    5163,
                    592,
                    401,
                    2865,
                    4119,
                    345,
                    989,
                    671
                ],
                "is_bool_dtype": [
                    132,
                    5007,
                    3958,
                    599,
                    376
                ],
                "ops.invalid_comparison": [
                    134
                ],
                "name": [
                    898,
                    5380,
                    5381,
                    390,
                    136,
                    137,
                    1164,
                    2573,
                    398,
                    1166,
                    2574,
                    401,
                    5394,
                    916,
                    1173,
                    1174,
                    1175,
                    152,
                    5784,
                    154,
                    5787,
                    416,
                    290,
                    420,
                    298,
                    300,
                    4141,
                    1070,
                    1071,
                    1073,
                    307,
                    1203,
                    1204,
                    1337,
                    314,
                    826,
                    324,
                    5573,
                    4168,
                    5576,
                    330,
                    4170,
                    5579,
                    5582,
                    336,
                    4177,
                    4178,
                    2387,
                    2388,
                    2389,
                    471,
                    349,
                    4198,
                    1128,
                    1129,
                    1130,
                    3816,
                    3817,
                    371,
                    373,
                    375,
                    1146,
                    1020,
                    1021,
                    1022
                ],
                "op.__name__": [
                    136,
                    152
                ],
                "set_function_name": [
                    137,
                    154
                ],
                "cmp_method": [
                    137
                ],
                "cls": [
                    5249,
                    5250,
                    5251,
                    5252,
                    389,
                    5253,
                    5254,
                    5256,
                    137,
                    5257,
                    3979,
                    5260,
                    5261,
                    398,
                    5262,
                    5263,
                    5264,
                    5265,
                    403,
                    5397,
                    5400,
                    154,
                    5409,
                    290,
                    5282,
                    5283,
                    5284,
                    5285,
                    5410,
                    5289,
                    5290,
                    172,
                    175,
                    177,
                    182,
                    5580,
                    463,
                    5205,
                    5206,
                    5207,
                    5208,
                    5209,
                    5210,
                    5239,
                    5217,
                    5218,
                    5219,
                    5220,
                    5221,
                    5222,
                    5229,
                    5230,
                    5231,
                    5232,
                    5233,
                    5234,
                    5235,
                    5236,
                    5237,
                    5238,
                    631,
                    632,
                    5241,
                    5242,
                    5240
                ],
                "ABCDataFrame": [
                    2337,
                    142
                ],
                "ABCTimedeltaIndex": [
                    4187,
                    142
                ],
                "Series": [
                    2341,
                    2346,
                    1073,
                    147,
                    2359
                ],
                "index_arithmetic_method": [
                    154
                ],
                "_o_dtype": [
                    161,
                    5781
                ],
                "np.dtype": [
                    161,
                    5585,
                    5711
                ],
                "_Identity": [
                    162,
                    563
                ],
                "ABCPeriodIndex": [
                    172,
                    4188
                ],
                "_new_PeriodIndex": [
                    175
                ],
                "d": [
                    175,
                    178,
                    180,
                    182,
                    1976,
                    1977,
                    1978
                ],
                "d.pop": [
                    180
                ],
                "cls.__new__": [
                    182
                ],
                "IndexOpsMixin": [
                    3929,
                    185,
                    3845,
                    229
                ],
                "PandasObject": [
                    185,
                    228
                ],
                "_deprecations": [
                    227
                ],
                "FrozenSet": [
                    227
                ],
                "PandasObject._deprecations": [
                    228
                ],
                "IndexOpsMixin._deprecations": [
                    229
                ],
                "_join_precedence": [
                    234
                ],
                "libjoin.left_join_indexer_unique": [
                    241
                ],
                "libjoin": [
                    241,
                    250,
                    244,
                    247
                ],
                "right": [
                    3685,
                    241,
                    244,
                    3669,
                    247,
                    3673,
                    250,
                    3679
                ],
                "libjoin.left_join_indexer": [
                    244
                ],
                "libjoin.inner_join_indexer": [
                    247
                ],
                "libjoin.outer_join_indexer": [
                    250
                ],
                "_typ": [
                    252
                ],
                "_data": [
                    253
                ],
                "Union": [
                    253,
                    3855
                ],
                "_id": [
                    254
                ],
                "_name": [
                    255
                ],
                "Label": [
                    5753,
                    255
                ],
                "_no_setting_name": [
                    259
                ],
                "_comparables": [
                    260
                ],
                "_attributes": [
                    261
                ],
                "_is_numeric_dtype": [
                    262
                ],
                "_can_hold_na": [
                    263
                ],
                "_defer_to_indexing": [
                    266
                ],
                "_infer_as_myclass": [
                    270
                ],
                "_engine_type": [
                    272
                ],
                "libindex.ObjectEngine": [
                    272
                ],
                "libindex": [
                    272
                ],
                "_supports_partial_string_indexing": [
                    275
                ],
                "_accessors": [
                    277
                ],
                "CachedAccessor": [
                    279
                ],
                "StringMethods": [
                    279
                ],
                "maybe_extract_name": [
                    290,
                    1154
                ],
                "data": [
                    5632,
                    5634,
                    5636,
                    3980,
                    400,
                    401,
                    402,
                    403,
                    5626,
                    405,
                    407,
                    408,
                    5784,
                    410,
                    5787,
                    5628,
                    416,
                    5665,
                    290,
                    419,
                    292,
                    5666,
                    294,
                    297,
                    298,
                    299,
                    300,
                    5678,
                    303,
                    5679,
                    307,
                    310,
                    5689,
                    314,
                    5690,
                    317,
                    5698,
                    5699,
                    324,
                    326,
                    5702,
                    5703,
                    330,
                    332,
                    336,
                    339,
                    853,
                    343,
                    345,
                    348,
                    349,
                    860,
                    861,
                    352,
                    863,
                    5606,
                    5735,
                    5608,
                    5736,
                    5610,
                    5745,
                    366,
                    367,
                    5614,
                    5744,
                    370,
                    371,
                    372,
                    373,
                    374,
                    375,
                    376,
                    377,
                    5619,
                    379,
                    5621
                ],
                "ABCPandasArray": [
                    292
                ],
                "data.to_numpy": [
                    294
                ],
                "RangeIndex": [
                    297,
                    298,
                    300,
                    5566
                ],
                "copy": [
                    5506,
                    5634,
                    401,
                    663,
                    5528,
                    5531,
                    668,
                    5787,
                    671,
                    674,
                    420,
                    298,
                    307,
                    314,
                    324,
                    330,
                    336,
                    349,
                    5608,
                    366,
                    371,
                    5619,
                    373,
                    5621,
                    375,
                    5502,
                    383
                ],
                "dtype": [
                    5632,
                    3969,
                    386,
                    3971,
                    5634,
                    401,
                    5626,
                    5781,
                    662,
                    665,
                    5787,
                    668,
                    670,
                    671,
                    3998,
                    674,
                    4003,
                    420,
                    676,
                    677,
                    4005,
                    298,
                    300,
                    303,
                    307,
                    310,
                    314,
                    829,
                    318,
                    830,
                    324,
                    326,
                    330,
                    332,
                    336,
                    592,
                    339,
                    340,
                    342,
                    343,
                    5731,
                    5605,
                    360,
                    5608,
                    366,
                    367,
                    5614,
                    371,
                    3955,
                    373,
                    5619,
                    375,
                    3962,
                    5627
                ],
                "RangeIndex.from_range": [
                    300
                ],
                "is_categorical_dtype": [
                    665,
                    933,
                    303
                ],
                "CategoricalIndex": [
                    307,
                    668
                ],
                "kwargs": [
                    390,
                    393,
                    394,
                    524,
                    526,
                    401,
                    5784,
                    5787,
                    926,
                    416,
                    420,
                    307,
                    314,
                    4539,
                    4670,
                    319,
                    4671,
                    834,
                    324,
                    709,
                    710,
                    330,
                    336,
                    981,
                    349,
                    506
                ],
                "is_interval_dtype": [
                    310
                ],
                "_maybe_asobject": [
                    336,
                    314,
                    324,
                    330
                ],
                "IntervalIndex": [
                    314
                ],
                "is_datetime64_any_dtype": [
                    317,
                    318
                ],
                "DatetimeIndex": [
                    324
                ],
                "is_timedelta64_dtype": [
                    326
                ],
                "TimedeltaIndex": [
                    330
                ],
                "is_period_dtype": [
                    332
                ],
                "PeriodIndex": [
                    336
                ],
                "is_extension_array_dtype": [
                    339,
                    670
                ],
                "ea_cls": [
                    342,
                    343
                ],
                "dtype.construct_array_type": [
                    342
                ],
                "ea_cls._from_sequence": [
                    343
                ],
                "data.astype": [
                    5632,
                    5735,
                    5744,
                    377,
                    5626,
                    348
                ],
                "_maybe_cast_with_dtype": [
                    366
                ],
                "data.dtype": [
                    5666,
                    5699,
                    5703,
                    367,
                    5679,
                    370,
                    372,
                    374,
                    376,
                    5690
                ],
                "is_signed_integer_dtype": [
                    370
                ],
                "Int64Index": [
                    371
                ],
                "is_unsigned_integer_dtype": [
                    5731,
                    372
                ],
                "UInt64Index": [
                    373
                ],
                "is_float_dtype": [
                    5627,
                    374
                ],
                "Float64Index": [
                    375
                ],
                "data.dtype.type": [
                    376
                ],
                "np.bool": [
                    376
                ],
                "subarr": [
                    384,
                    5665,
                    5698,
                    387,
                    419,
                    420,
                    5670,
                    5702,
                    5674,
                    395,
                    5707,
                    398,
                    5678,
                    5689,
                    377,
                    379,
                    5661
                ],
                "com.asarray_tuplesafe": [
                    3224,
                    379,
                    419
                ],
                "com": [
                    419,
                    5188,
                    4110,
                    3538,
                    3539,
                    4118,
                    3224,
                    4121,
                    379,
                    4254,
                    4895
                ],
                "subarr.copy": [
                    384
                ],
                "new_data": [
                    387,
                    390
                ],
                "new_dtype": [
                    387,
                    388,
                    390
                ],
                "_maybe_cast_data_without_dtype": [
                    387
                ],
                "subarr.ndim": [
                    395
                ],
                "cls._simple_new": [
                    398
                ],
                "is_scalar": [
                    4550,
                    4109,
                    402,
                    4882,
                    4884,
                    4023,
                    4123
                ],
                "cls._scalar_data_error": [
                    403
                ],
                "tupleize_cols": [
                    405
                ],
                "is_list_like": [
                    1196,
                    2799,
                    1169,
                    405,
                    1173,
                    1269,
                    1272,
                    1275,
                    1277
                ],
                "is_iterator": [
                    5508,
                    407
                ],
                "e": [
                    410
                ],
                "MultiIndex.from_tuples": [
                    4743,
                    415
                ],
                "MultiIndex": [
                    4737,
                    4743,
                    3666,
                    5522,
                    3671,
                    1497,
                    5466,
                    3579,
                    3742,
                    415
                ],
                "kwargs.get": [
                    416
                ],
                "values": [
                    3971,
                    2316,
                    526,
                    2319,
                    2322,
                    531,
                    534,
                    2327,
                    2331,
                    929,
                    933,
                    934,
                    936,
                    937,
                    939,
                    940,
                    1196,
                    1198,
                    943,
                    1199,
                    3378,
                    1203,
                    950,
                    1206,
                    1995,
                    1996,
                    461,
                    1997,
                    464,
                    978,
                    980,
                    981,
                    470,
                    4700,
                    989,
                    4701,
                    991,
                    4702,
                    993,
                    994,
                    4703,
                    4833,
                    3964,
                    745,
                    748,
                    3313,
                    3315,
                    3316,
                    501,
                    502,
                    3956,
                    4216,
                    3961,
                    4218,
                    4219,
                    508,
                    3966
                ],
                "object.__new__": [
                    463
                ],
                "result._data": [
                    464
                ],
                "result._index_data": [
                    470
                ],
                "result._name": [
                    1492,
                    471
                ],
                "result._reset_identity": [
                    473
                ],
                "cache_readonly": [
                    1986,
                    3844,
                    1958,
                    1610,
                    1965,
                    1999,
                    2006,
                    569,
                    475,
                    605
                ],
                "k": [
                    856,
                    4706,
                    486
                ],
                "self._attributes": [
                    486
                ],
                "attributes": [
                    4739,
                    4740,
                    4745,
                    523,
                    524,
                    525,
                    4748,
                    4750,
                    528,
                    531,
                    534,
                    504,
                    506,
                    508,
                    4733
                ],
                "self._get_attributes_dict": [
                    4005,
                    4197,
                    2792,
                    523,
                    3310,
                    504,
                    1977,
                    602,
                    5276,
                    4733
                ],
                "attributes.update": [
                    506,
                    524
                ],
                "self._simple_new": [
                    3316,
                    508
                ],
                "self.dtype": [
                    2945,
                    5187,
                    4680,
                    4748,
                    528,
                    1843,
                    3316,
                    3476,
                    662,
                    3955,
                    3998,
                    4249,
                    2618,
                    2430
                ],
                "self._infer_as_myclass": [
                    529
                ],
                "self._constructor": [
                    531
                ],
                "self._id": [
                    563,
                    636,
                    557
                ],
                "self._engine.clear_mapping": [
                    567
                ],
                "self._engine": [
                    1574,
                    4614,
                    2860,
                    2989,
                    4654,
                    1615,
                    2991,
                    4083,
                    1557,
                    567,
                    2973,
                    3934
                ],
                "_ndarray_values": [
                    576,
                    5164,
                    575
                ],
                "self._ndarray_values": [
                    3618,
                    3778,
                    625,
                    3612,
                    2525,
                    575
                ],
                "self._engine_type": [
                    576
                ],
                "self._data": [
                    610,
                    3842,
                    3847,
                    586,
                    2698,
                    3883,
                    4106,
                    592,
                    3315,
                    822,
                    1976,
                    632,
                    5146
                ],
                "lib.item_from_zerodim": [
                    598
                ],
                "lib": [
                    5606,
                    937,
                    1963,
                    5517,
                    3664,
                    5008,
                    3698,
                    5010,
                    598,
                    599,
                    5628,
                    5661
                ],
                "lib.is_scalar": [
                    599
                ],
                "np.ndim": [
                    4124,
                    599
                ],
                "attrs": [
                    3310,
                    3311,
                    3316,
                    854,
                    856,
                    602,
                    603,
                    5276,
                    5277
                ],
                "self._data.dtype": [
                    610
                ],
                "self._ndarray_values.ravel": [
                    625
                ],
                "order": [
                    625
                ],
                "self._data.view": [
                    632,
                    3842
                ],
                "self._shallow_copy": [
                    1283,
                    2698,
                    4107,
                    2574,
                    2194,
                    794,
                    2331,
                    5146,
                    1069,
                    822,
                    824,
                    3451,
                    2389,
                    727,
                    2649,
                    2144,
                    2164,
                    2165,
                    634,
                    4219
                ],
                "result._id": [
                    636
                ],
                "is_dtype_equal": [
                    2945,
                    3476,
                    5781,
                    662,
                    2618,
                    2430
                ],
                "self.copy": [
                    834,
                    843,
                    663
                ],
                "self.name": [
                    677,
                    4168,
                    1129,
                    1071,
                    3343,
                    3345,
                    2388,
                    2805,
                    918,
                    919,
                    2806,
                    1178,
                    668,
                    1373,
                    2143,
                    1375
                ],
                "casted": [
                    674,
                    677
                ],
                "self.values.astype": [
                    674
                ],
                "nv.validate_take": [
                    710
                ],
                "nv": [
                    793,
                    710
                ],
                "indices": [
                    739,
                    711,
                    745,
                    715,
                    748,
                    726,
                    735
                ],
                "ensure_platform_int": [
                    3616,
                    3809,
                    3810,
                    711,
                    3615,
                    3375,
                    4655,
                    3761,
                    3764,
                    792,
                    2937,
                    2975,
                    735
                ],
                "self._can_hold_na": [
                    712,
                    2001,
                    2011,
                    1991
                ],
                "taken": [
                    744,
                    713,
                    748,
                    749,
                    2644,
                    726,
                    727,
                    2648,
                    2649,
                    2651,
                    2652
                ],
                "self._assert_take_fillable": [
                    713
                ],
                "allow_fill": [
                    721,
                    738,
                    716,
                    745
                ],
                "fill_value": [
                    721,
                    738,
                    717
                ],
                "self._na_value": [
                    3953,
                    4338,
                    718
                ],
                "cls_name": [
                    722,
                    724
                ],
                "self.values.take": [
                    726
                ],
                "Appender": [
                    4640,
                    707,
                    3845,
                    5381,
                    5382,
                    2924,
                    790,
                    3929
                ],
                "np.nan": [
                    1490,
                    730,
                    1983
                ],
                "algos.take": [
                    744
                ],
                "algos": [
                    2561,
                    4833,
                    2788,
                    3750,
                    744,
                    2641,
                    3700,
                    2550,
                    2711,
                    2648,
                    2553
                ],
                "na_value": [
                    745
                ],
                "values.take": [
                    748
                ],
                "repeats": [
                    792,
                    794
                ],
                "nv.validate_repeat": [
                    793
                ],
                "axis": [
                    793
                ],
                "self._values.repeat": [
                    794
                ],
                "deep": [
                    1167,
                    821,
                    826,
                    3931,
                    3934
                ],
                "new_index": [
                    3404,
                    3405,
                    822,
                    824,
                    827,
                    830,
                    831
                ],
                "self._data.copy": [
                    822
                ],
                "names": [
                    4738,
                    1284,
                    4740,
                    4742,
                    4743,
                    1164,
                    1166,
                    1168,
                    1169,
                    1171,
                    1276,
                    1208,
                    826,
                    827,
                    4167,
                    4168,
                    5462,
                    5463,
                    5464,
                    5466,
                    1269,
                    3574,
                    1272,
                    1275,
                    3580
                ],
                "self._validate_names": [
                    826
                ],
                "new_index.set_names": [
                    827
                ],
                "new_index.astype": [
                    830
                ],
                "klass_name": [
                    852,
                    863
                ],
                "self._format_data": [
                    853
                ],
                "self._format_attrs": [
                    854
                ],
                "space": [
                    857,
                    855
                ],
                "self._format_space": [
                    855
                ],
                "attrs_str": [
                    856,
                    857
                ],
                "v": [
                    856,
                    4706,
                    3147
                ],
                "prepr": [
                    857,
                    863
                ],
                "join": [
                    857
                ],
                "res": [
                    865,
                    5735,
                    5736,
                    5737,
                    5744,
                    5745,
                    5746,
                    863
                ],
                "default_pprint": [
                    882
                ],
                "is_justify": [
                    889,
                    898,
                    892,
                    895
                ],
                "self.inferred_type": [
                    1760,
                    3104,
                    1956,
                    4677,
                    4679,
                    1803,
                    4044,
                    1682,
                    1950,
                    1717,
                    891,
                    893,
                    1886,
                    1919
                ],
                "self.categories": [
                    894
                ],
                "format_object_summary": [
                    897
                ],
                "self._formatter_func": [
                    898
                ],
                "format_object_attrs": [
                    905
                ],
                "header": [
                    915,
                    917,
                    951,
                    924,
                    926
                ],
                "header.append": [
                    917
                ],
                "pprint_thing": [
                    940,
                    918
                ],
                "formatter": [
                    923,
                    924
                ],
                "self.map": [
                    1528,
                    924
                ],
                "self._format_with_header": [
                    926
                ],
                "values.dtype": [
                    936,
                    939,
                    933
                ],
                "np.array": [
                    5634,
                    934,
                    945,
                    2353,
                    2004,
                    5621,
                    4538,
                    991
                ],
                "lib.maybe_convert_objects": [
                    937
                ],
                "x": [
                    4193,
                    5285,
                    4200,
                    940,
                    2542,
                    3472,
                    3473,
                    5553,
                    5554
                ],
                "mask": [
                    3712,
                    3713,
                    3714,
                    3715,
                    4225,
                    3729,
                    3730,
                    3732,
                    4373,
                    4376,
                    4378,
                    3740,
                    3619,
                    3620,
                    943,
                    944,
                    946,
                    5190,
                    5191,
                    5193,
                    5194,
                    1487,
                    1489,
                    1490,
                    987,
                    993,
                    4218
                ],
                "isna": [
                    4000,
                    1992,
                    5610,
                    943,
                    2071,
                    987,
                    2327,
                    3966
                ],
                "mask.any": [
                    944,
                    1489,
                    5191
                ],
                "na_rep": [
                    993,
                    946
                ],
                "result.tolist": [
                    947
                ],
                "_trim_front": [
                    950
                ],
                "format_array": [
                    950
                ],
                "slicer": [
                    979,
                    980
                ],
                "values._format_native_types": [
                    981
                ],
                "self.is_object": [
                    4140,
                    988,
                    4038
                ],
                "quoting": [
                    988
                ],
                "astype": [
                    2413,
                    989,
                    2414
                ],
                "head": [
                    1016,
                    1010,
                    1011,
                    1012
                ],
                "head.format": [
                    1012
                ],
                "tail": [
                    1016,
                    1013,
                    1014,
                    1015
                ],
                "tail.format": [
                    1015
                ],
                "index_summary": [
                    1016,
                    1018,
                    1022
                ],
                "index": [
                    1132,
                    1068,
                    1069,
                    1073,
                    5784,
                    5785
                ],
                "self.values.copy": [
                    4216,
                    1073
                ],
                "DataFrame": [
                    1130
                ],
                "self._values.copy": [
                    1130
                ],
                "result.index": [
                    1133
                ],
                "self._name": [
                    1144,
                    1155,
                    1206
                ],
                "self._no_setting_name": [
                    1148
                ],
                "value": [
                    4225,
                    1154,
                    1155,
                    4615,
                    4616,
                    4017,
                    4023,
                    4024,
                    2137,
                    4218,
                    2139
                ],
                "name.setter": [
                    1146
                ],
                "deepcopy": [
                    1167
                ],
                "self.names": [
                    4738,
                    1477,
                    3558,
                    3437,
                    1167,
                    3538
                ],
                "FrozenList": [
                    1178
                ],
                "is_hashable": [
                    5579,
                    1204
                ],
                "_set_names": [
                    1208
                ],
                "_get_names": [
                    1208
                ],
                "level": [
                    1284,
                    3718,
                    3469,
                    3598,
                    2191,
                    2192,
                    3600,
                    3734,
                    1437,
                    3751,
                    3754,
                    1461,
                    1462,
                    1464,
                    1466,
                    1468,
                    1470,
                    3320,
                    1363,
                    1364,
                    1367,
                    1369,
                    1371,
                    3676,
                    1373,
                    3677,
                    1375,
                    3708,
                    4831,
                    4832,
                    1379,
                    3434,
                    3693,
                    1266,
                    3443,
                    1524,
                    1269,
                    3445,
                    3701,
                    1272,
                    3705,
                    3324,
                    1277,
                    1278
                ],
                "self.nlevels": [
                    1272,
                    4250,
                    1468,
                    1470
                ],
                "inplace": [
                    1280,
                    1337,
                    1285
                ],
                "idx": [
                    1281,
                    1283,
                    1284,
                    1286,
                    5165,
                    5166
                ],
                "idx._set_names": [
                    1284
                ],
                "self.set_names": [
                    1337
                ],
                "self._validate_index_level": [
                    2192,
                    4832,
                    1379,
                    1437
                ],
                "self.sort_values": [
                    1399
                ],
                "ascending": [
                    4427,
                    1399
                ],
                "get_level_values": [
                    1440
                ],
                "_get_level_values": [
                    1440
                ],
                "levnums": [
                    1464,
                    1479
                ],
                "self._get_level_number": [
                    1464
                ],
                "lev": [
                    1464
                ],
                "new_levels": [
                    1475,
                    1480,
                    1484,
                    1488,
                    1498,
                    3707,
                    3708,
                    3743
                ],
                "self.levels": [
                    1475
                ],
                "new_codes": [
                    3744,
                    3714,
                    1476,
                    1481,
                    3726,
                    1487,
                    1488,
                    3732,
                    3734,
                    3735,
                    3704,
                    3705,
                    1499
                ],
                "self.codes": [
                    1476
                ],
                "new_names": [
                    1482,
                    1500,
                    1492,
                    1477
                ],
                "i": [
                    1480,
                    1481,
                    1482,
                    1479
                ],
                "new_levels.pop": [
                    1480
                ],
                "new_codes.pop": [
                    1481
                ],
                "new_names.pop": [
                    1482
                ],
                "take": [
                    1488,
                    4376
                ],
                "result.putmask": [
                    1490
                ],
                "mapper": [
                    1528,
                    4731,
                    1525
                ],
                "grouper": [
                    1528,
                    1530,
                    1526
                ],
                "self.is_monotonic_increasing": [
                    1540,
                    3047,
                    2987,
                    4949,
                    1591
                ],
                "self._engine.is_monotonic_increasing": [
                    1557
                ],
                "self._engine.is_monotonic_decreasing": [
                    1574
                ],
                "self.is_unique": [
                    3331,
                    3781,
                    1608,
                    2313,
                    2952,
                    2318,
                    1647,
                    2546,
                    3283,
                    1591,
                    3483,
                    4669,
                    3487
                ],
                "self.is_monotonic_decreasing": [
                    1608,
                    4951
                ],
                "self._engine.is_unique": [
                    1615
                ],
                "lib.infer_dtype": [
                    1963,
                    5628,
                    5661,
                    5606
                ],
                "is_datetime_array": [
                    1970
                ],
                "ensure_object": [
                    1970
                ],
                "d.update": [
                    1977
                ],
                "_new_Index": [
                    1978
                ],
                "_na_value": [
                    1983
                ],
                "np.empty": [
                    3649,
                    1995,
                    3381
                ],
                "np.bool_": [
                    1995
                ],
                "values.fill": [
                    1996
                ],
                "self._isnan.nonzero": [
                    2002
                ],
                "self._isnan": [
                    2002,
                    2164,
                    2069,
                    2139,
                    2012
                ],
                "np.int64": [
                    2004
                ],
                "self._isnan.any": [
                    2012
                ],
                "isnull": [
                    2071
                ],
                "self.isna": [
                    2115
                ],
                "notnull": [
                    2117
                ],
                "notna": [
                    2117
                ],
                "self._assert_can_do_op": [
                    2137
                ],
                "self.hasnans": [
                    2138,
                    2163,
                    2326
                ],
                "self.putmask": [
                    2139
                ],
                "downcast": [
                    2140
                ],
                "how": [
                    3458,
                    3467,
                    3596,
                    3469,
                    3600,
                    3479,
                    3481,
                    3612,
                    3485,
                    3490,
                    3494,
                    3499,
                    3504,
                    3506,
                    3508,
                    3512,
                    3772,
                    3783,
                    3787,
                    3791,
                    3794,
                    3798,
                    3800,
                    3674,
                    3802,
                    3804,
                    3685,
                    3566,
                    2160,
                    2161,
                    3440,
                    3445,
                    3450
                ],
                "unique": [
                    2193
                ],
                "drop_duplicates": [
                    2242
                ],
                "keep": [
                    2242,
                    2298
                ],
                "duplicated": [
                    2298
                ],
                "dropna": [
                    2313,
                    2324
                ],
                "self.unique": [
                    2319
                ],
                "values._data": [
                    2322
                ],
                "self.intersection": [
                    2362,
                    3511
                ],
                "self.union": [
                    3515,
                    2365
                ],
                "self.symmetric_difference": [
                    2368
                ],
                "__bool__": [
                    2376
                ],
                "__nonzero__": [
                    2376
                ],
                "get_op_result_name": [
                    3816,
                    2573,
                    2387,
                    2645,
                    2808
                ],
                "this": [
                    2946,
                    2948,
                    2411,
                    2702,
                    2414,
                    2704,
                    2770,
                    2707,
                    2708,
                    2772,
                    3477,
                    3479,
                    2777,
                    2619,
                    2715,
                    2621,
                    2779
                ],
                "self.astype": [
                    4225,
                    2946,
                    4681,
                    2411,
                    3477,
                    2619
                ],
                "Index.union": [
                    2414
                ],
                "sort": [
                    2496,
                    2433,
                    2786,
                    2436,
                    2533,
                    2693,
                    2764,
                    2414,
                    2611,
                    2709,
                    2647,
                    2490,
                    3517,
                    2621,
                    2494,
                    2559
                ],
                "self._validate_sort_keyword": [
                    2490,
                    2611,
                    2764,
                    2693
                ],
                "self._assert_can_do_setop": [
                    2491,
                    2612,
                    2765,
                    2694
                ],
                "self._is_compatible_with_other": [
                    2493
                ],
                "self._union_incompatible_dtypes": [
                    2494
                ],
                "self._union": [
                    2496
                ],
                "self.equals": [
                    2696,
                    4269,
                    2517,
                    2615,
                    3771,
                    3327
                ],
                "self._get_reconciled_name_object": [
                    2616,
                    2518
                ],
                "other._get_reconciled_name_object": [
                    2521
                ],
                "is_datetime64tz_dtype": [
                    2528,
                    2524
                ],
                "lvals": [
                    2624,
                    2557,
                    2629,
                    2535,
                    2538,
                    2636,
                    2541,
                    2641,
                    2554,
                    2525,
                    2527
                ],
                "rvals": [
                    2529,
                    2625,
                    2531,
                    2629,
                    2535,
                    2636,
                    2542,
                    2641,
                    2553
                ],
                "other._ndarray_values": [
                    2529,
                    3779,
                    3612,
                    3620
                ],
                "other._values": [
                    2625,
                    2531,
                    2783
                ],
                "self.is_monotonic": [
                    3488,
                    2627,
                    2533,
                    3496
                ],
                "other.is_monotonic": [
                    3488,
                    2627,
                    2533,
                    3496
                ],
                "self._outer_indexer": [
                    3795,
                    3805,
                    2535
                ],
                "value_set": [
                    2541,
                    2542
                ],
                "result.extend": [
                    2542
                ],
                "_values": [
                    2543
                ],
                "indexer": [
                    3328,
                    3332,
                    3208,
                    3209,
                    3341,
                    2958,
                    2704,
                    2705,
                    2960,
                    2707,
                    3347,
                    5194,
                    5195,
                    2973,
                    2975,
                    3367,
                    3368,
                    3369,
                    3373,
                    4654,
                    4655,
                    2993,
                    3378,
                    2867,
                    2868,
                    2995,
                    2870,
                    2997,
                    2998,
                    3000,
                    3381,
                    3389,
                    4671,
                    4672,
                    5189,
                    3398,
                    5190,
                    3401,
                    3018,
                    3019,
                    2636,
                    2637,
                    3020,
                    3323,
                    3405,
                    2641,
                    2642,
                    3026,
                    2644,
                    2772,
                    3283,
                    2775,
                    3032,
                    3033,
                    2782,
                    3048,
                    3181,
                    3054,
                    3055,
                    3183,
                    3185,
                    2547,
                    2548,
                    3060,
                    2550,
                    3061,
                    2552,
                    2553,
                    3062,
                    3187
                ],
                "self.get_indexer": [
                    3041,
                    3042,
                    3332,
                    3524,
                    5189,
                    3018,
                    2867,
                    2547,
                    4670
                ],
                "nonzero": [
                    2637,
                    3662,
                    2705,
                    2548,
                    2775,
                    2782
                ],
                "algos.unique1d": [
                    2641,
                    2550
                ],
                "self.get_indexer_non_unique": [
                    4671,
                    3341,
                    2550,
                    3367
                ],
                "other_diff": [
                    2553,
                    2554
                ],
                "algos.take_nd": [
                    2553,
                    3700,
                    3750
                ],
                "concat_compat": [
                    2785,
                    2554
                ],
                "algos.safe_sort": [
                    2648,
                    2561,
                    2788,
                    2711
                ],
                "warnings.warn": [
                    2563,
                    4606
                ],
                "warnings": [
                    2563,
                    4606
                ],
                "err": [
                    5002,
                    2564,
                    4222
                ],
                "self._wrap_setop_result": [
                    2633,
                    2570
                ],
                "ensure_index": [
                    4642,
                    3366,
                    2929,
                    2613,
                    3318,
                    3448
                ],
                "other.astype": [
                    4681,
                    2620,
                    3478
                ],
                "this.intersection": [
                    2621
                ],
                "self._inner_indexer": [
                    3792,
                    3803,
                    2629
                ],
                "get_indexer": [
                    2636
                ],
                "indexer.take": [
                    2705,
                    2637,
                    2775
                ],
                "InvalidIndexError": [
                    2953,
                    4553,
                    2638
                ],
                "IncompatibleFrequency": [
                    5704,
                    2638
                ],
                "get_indexer_non_unique": [
                    2641
                ],
                "other.take": [
                    2644
                ],
                "res_name": [
                    2649,
                    2651,
                    2645
                ],
                "taken.values": [
                    2648
                ],
                "taken.name": [
                    2651
                ],
                "result_name": [
                    2793,
                    2700,
                    2767,
                    2768,
                    2806,
                    2808,
                    2809,
                    2715
                ],
                "self._convert_can_do_setop": [
                    2700,
                    2766
                ],
                "self._get_unique_index": [
                    2770,
                    2702
                ],
                "this.get_indexer": [
                    2704,
                    2948,
                    2772
                ],
                "label_diff": [
                    2707,
                    2708
                ],
                "np.setdiff1d": [
                    2776,
                    2707
                ],
                "np.arange": [
                    3401,
                    3373,
                    2707,
                    4376,
                    2777,
                    3389,
                    3390,
                    3711
                ],
                "this.size": [
                    2777,
                    2707
                ],
                "the_diff": [
                    2785,
                    2788,
                    2796,
                    2708,
                    2711,
                    2715
                ],
                "this.values.take": [
                    2708
                ],
                "this.values": [
                    2708
                ],
                "this._shallow_copy": [
                    2715
                ],
                "result_name_update": [
                    2768,
                    2766
                ],
                "other._get_unique_index": [
                    2771
                ],
                "common_indexer": [
                    2777,
                    2775
                ],
                "left_indexer": [
                    3715,
                    3720,
                    3725,
                    3726,
                    3734,
                    3735,
                    3740,
                    3757,
                    3760,
                    3761,
                    3766,
                    2776,
                    2779,
                    3041,
                    3044,
                    3050,
                    3690,
                    3693,
                    3694,
                    3711
                ],
                "left_diff": [
                    2785,
                    2779
                ],
                "this._values.take": [
                    2779
                ],
                "this._values": [
                    2779
                ],
                "right_indexer": [
                    3042,
                    3045,
                    3750,
                    3049,
                    3754,
                    3051,
                    3757,
                    3763,
                    3764,
                    3766,
                    2782,
                    2783
                ],
                "right_diff": [
                    2785,
                    2783
                ],
                "other._values.take": [
                    2783
                ],
                "attribs": [
                    4197,
                    4198,
                    2792,
                    2793,
                    2794,
                    2795,
                    2796,
                    4202
                ],
                "self._shallow_copy_with_infer": [
                    3971,
                    4202,
                    2796,
                    3404,
                    5166
                ],
                "method": [
                    3011,
                    2852,
                    2949,
                    3333,
                    3015,
                    3336,
                    2957,
                    2958,
                    2959,
                    2928,
                    2990,
                    2867,
                    2995,
                    5559,
                    5560,
                    3321,
                    2942
                ],
                "tolerance": [
                    2949,
                    3333,
                    2958,
                    2960,
                    2962,
                    2979,
                    2980,
                    2853,
                    2982,
                    2864,
                    2865,
                    2867,
                    2996,
                    2998,
                    3053,
                    3054,
                    2930,
                    2931,
                    3061,
                    2942
                ],
                "casted_key": [
                    2858,
                    2860
                ],
                "self._maybe_cast_indexer": [
                    2858
                ],
                "key": [
                    3075,
                    4614,
                    4109,
                    4110,
                    4111,
                    4113,
                    4116,
                    4118,
                    3095,
                    4119,
                    3097,
                    4121,
                    3099,
                    4122,
                    4895,
                    4896,
                    3111,
                    3113,
                    2858,
                    3115,
                    4905,
                    3117,
                    2862,
                    4907,
                    4910,
                    2865,
                    2867,
                    3124,
                    3125,
                    3126,
                    2872,
                    3264,
                    4550,
                    3143,
                    4553,
                    4561,
                    4565,
                    4568,
                    3161,
                    3162,
                    3163,
                    3164,
                    4572,
                    3181,
                    3183,
                    4081,
                    4083
                ],
                "self._engine.get_loc": [
                    2860,
                    4614
                ],
                "self._convert_tolerance": [
                    2865,
                    2931
                ],
                "indexer.ndim": [
                    2868
                ],
                "indexer.size": [
                    2868
                ],
                "loc": [
                    4614,
                    4568,
                    4616,
                    5165,
                    4591,
                    4336,
                    4561,
                    4592,
                    4594,
                    4340,
                    4341,
                    2870,
                    2871,
                    4342,
                    2873,
                    5146,
                    4572
                ],
                "indexer.item": [
                    2870
                ],
                "missing.clean_reindex_fill_method": [
                    2928
                ],
                "missing": [
                    3367,
                    3372,
                    3341,
                    4654,
                    3375,
                    2928,
                    3376,
                    4655
                ],
                "target": [
                    2945,
                    2947,
                    2949,
                    3333,
                    3341,
                    2958,
                    3343,
                    2960,
                    3344,
                    3345,
                    3347,
                    2973,
                    4642,
                    4643,
                    2980,
                    4644,
                    3366,
                    3367,
                    4647,
                    4648,
                    4649,
                    2987,
                    4650,
                    4652,
                    3376,
                    2993,
                    2995,
                    2998,
                    3386,
                    4670,
                    4671,
                    3018,
                    3020,
                    3324,
                    3041,
                    3042,
                    3044,
                    3045,
                    3304,
                    3307,
                    3309,
                    3054,
                    2929,
                    2931,
                    3060,
                    3316,
                    3318,
                    2936,
                    2937,
                    2939,
                    2940,
                    3327
                ],
                "target.is_boolean": [
                    2936
                ],
                "self.is_numeric": [
                    2936
                ],
                "np.repeat": [
                    2937,
                    3453,
                    3461
                ],
                "target.size": [
                    2937,
                    2980
                ],
                "pself": [
                    4643,
                    4644,
                    4645,
                    2939,
                    2940,
                    2941
                ],
                "ptarget": [
                    4643,
                    4644,
                    4645,
                    2939,
                    2940,
                    2942
                ],
                "self._maybe_promote": [
                    4643,
                    2939
                ],
                "pself.get_indexer": [
                    2941
                ],
                "limit": [
                    3009,
                    3041,
                    3042,
                    2949,
                    3333,
                    3336,
                    2958,
                    2960,
                    2993,
                    2995,
                    2967,
                    2942
                ],
                "target.dtype": [
                    2945
                ],
                "target.astype": [
                    2947
                ],
                "self._get_fill_indexer": [
                    2958
                ],
                "self._get_nearest_indexer": [
                    2960
                ],
                "self._engine.get_indexer": [
                    2973
                ],
                "target._ndarray_values": [
                    2993,
                    4652,
                    2973,
                    2998
                ],
                "tolerance.size": [
                    2980
                ],
                "target.is_monotonic_increasing": [
                    2987
                ],
                "engine_method": [
                    2993,
                    2988
                ],
                "self._engine.get_pad_indexer": [
                    2989
                ],
                "self._engine.get_backfill_indexer": [
                    2991
                ],
                "self._get_fill_indexer_searchsorted": [
                    2995
                ],
                "self._filter_indexer_tolerance": [
                    2997,
                    3054
                ],
                "side": [
                    4992,
                    3015,
                    4999,
                    3020,
                    3021,
                    5013,
                    4950,
                    4982,
                    4985,
                    5018,
                    4956,
                    5023
                ],
                "nonexact": [
                    3026,
                    3019,
                    3020
                ],
                "self._searchsorted_monotonic": [
                    3020,
                    4999
                ],
                "left_distances": [
                    3049,
                    3044
                ],
                "np.abs": [
                    5284,
                    3044,
                    3045
                ],
                "right_distances": [
                    3049,
                    3045
                ],
                "operator.lt": [
                    5207,
                    3047
                ],
                "operator": [
                    5249,
                    5282,
                    5251,
                    5283,
                    5254,
                    3047,
                    5256,
                    5260,
                    5261,
                    5264,
                    5205,
                    5206,
                    5207,
                    5208,
                    5209,
                    5210
                ],
                "operator.le": [
                    5209,
                    3047
                ],
                "np.where": [
                    3048,
                    3964,
                    3061,
                    4374
                ],
                "distance": [
                    3060,
                    3061
                ],
                "kind": [
                    4992,
                    3140,
                    4932,
                    4903,
                    3113,
                    4044,
                    3086,
                    4879,
                    3185,
                    3155,
                    4980,
                    3095,
                    5080,
                    3099,
                    5086
                ],
                "is_float": [
                    4938,
                    3099,
                    3095
                ],
                "self.is_floating": [
                    3096,
                    4894
                ],
                "self._invalid_indexer": [
                    3111,
                    4939,
                    3115,
                    4910,
                    4944,
                    3097
                ],
                "is_integer": [
                    3113,
                    4907,
                    3147,
                    4591,
                    4943,
                    4565
                ],
                "self.holds_integer": [
                    3114,
                    4578
                ],
                "self._validate_indexer": [
                    3124,
                    3125,
                    3126,
                    3161,
                    3162,
                    3163
                ],
                "key.start": [
                    3161,
                    3124,
                    3143
                ],
                "key.stop": [
                    3162,
                    3125,
                    3143
                ],
                "key.step": [
                    3163,
                    3126,
                    3143
                ],
                "start": [
                    3172,
                    3173,
                    3143,
                    5064,
                    5068,
                    3149,
                    3150,
                    4879,
                    5070,
                    3185,
                    5079,
                    5080
                ],
                "stop": [
                    3174,
                    3175,
                    3143,
                    3149,
                    3150,
                    3185
                ],
                "step": [
                    5060,
                    3143,
                    4879,
                    3185,
                    4887
                ],
                "is_null_slicer": [
                    3180,
                    3149
                ],
                "is_index_slice": [
                    3160,
                    3150,
                    3151
                ],
                "is_int": [
                    3150
                ],
                "is_positional": [
                    3176,
                    3169,
                    3182,
                    3151
                ],
                "self.is_integer": [
                    3152,
                    3160
                ],
                "self.is_categorical": [
                    3152,
                    4140
                ],
                "self.is_mixed": [
                    3169
                ],
                "self.get_loc": [
                    4996,
                    3173,
                    3175,
                    4336,
                    4561
                ],
                "self.slice_indexer": [
                    3185
                ],
                "keyarr": [
                    3203,
                    3204,
                    3206,
                    3208,
                    3209,
                    3240,
                    3224,
                    3225
                ],
                "self._convert_index_indexer": [
                    3204
                ],
                "self._convert_arr_indexer": [
                    3206
                ],
                "self._convert_list_indexer": [
                    3208
                ],
                "form": [
                    4910,
                    3263
                ],
                "preserve_names": [
                    3304,
                    3343
                ],
                "_ensure_has_len": [
                    3307
                ],
                "attrs.pop": [
                    3311
                ],
                "ABCRangeIndex": [
                    3312
                ],
                "_": [
                    3323,
                    3653,
                    4671
                ],
                "self._join_level": [
                    3323,
                    3444,
                    3599
                ],
                "target.nlevels": [
                    3343
                ],
                "target.name": [
                    3345,
                    3343
                ],
                "target.copy": [
                    3344
                ],
                "check": [
                    3398,
                    3368,
                    3369,
                    3402,
                    3377,
                    3378,
                    3379
                ],
                "new_labels": [
                    3369,
                    3404,
                    3381,
                    3382,
                    3383
                ],
                "self.take": [
                    4706,
                    3401,
                    3369,
                    4430,
                    3378
                ],
                "new_indexer": [
                    3401,
                    3370,
                    3402,
                    3405,
                    3389,
                    3390,
                    3391
                ],
                "length": [
                    3377,
                    3379,
                    3373
                ],
                "missing_labels": [
                    3376,
                    3383
                ],
                "target.take": [
                    3376
                ],
                "missing_indexer": [
                    3377,
                    3391,
                    3383
                ],
                "ensure_int64": [
                    3652,
                    3663,
                    3664,
                    3377,
                    3697,
                    3379
                ],
                "cur_labels": [
                    3390,
                    3378,
                    3382
                ],
                "cur_indexer": [
                    3390,
                    3379,
                    3382
                ],
                "target.is_unique": [
                    3386
                ],
                "self_is_mi": [
                    3429,
                    3592,
                    3434,
                    3443,
                    3546,
                    3549
                ],
                "other_is_mi": [
                    3430,
                    3434,
                    3443,
                    3547,
                    3549
                ],
                "other.names": [
                    3539,
                    3437,
                    3598
                ],
                "self._join_multi": [
                    3440
                ],
                "return_indexers": [
                    3520,
                    3808,
                    3490,
                    3460,
                    3494,
                    3773,
                    3624,
                    3499,
                    3469,
                    3471,
                    3440,
                    3600,
                    3759,
                    3445,
                    3479,
                    3452,
                    3485
                ],
                "join_index": [
                    3456,
                    3459,
                    3461,
                    3462,
                    3464,
                    3742,
                    3618,
                    3620,
                    3622,
                    3751,
                    3625,
                    3754,
                    3627,
                    3505,
                    3507,
                    3766,
                    3511,
                    3768,
                    3515,
                    3518,
                    3521,
                    3524,
                    3525,
                    3528,
                    3529,
                    3784,
                    3531,
                    3788,
                    3792,
                    3793,
                    3795,
                    3796,
                    3799,
                    3801,
                    3803,
                    3805,
                    3806,
                    3811,
                    3813,
                    3691,
                    3694,
                    3451,
                    3453,
                    3454
                ],
                "rindexer": [
                    3526,
                    3528,
                    3529,
                    3453,
                    3454
                ],
                "other._shallow_copy": [
                    3459
                ],
                "lindexer": [
                    3522,
                    3524,
                    3461,
                    3462,
                    3529
                ],
                "self._join_precedence": [
                    3466
                ],
                "other._join_precedence": [
                    3466
                ],
                "get": [
                    3674,
                    3467,
                    3596
                ],
                "other.join": [
                    3468
                ],
                "y": [
                    3472,
                    3473
                ],
                "z": [
                    3472,
                    3473
                ],
                "this.join": [
                    3479
                ],
                "_validate_join_method": [
                    3481
                ],
                "other.is_unique": [
                    3483,
                    3781,
                    3487
                ],
                "self._join_non_unique": [
                    3484,
                    3493
                ],
                "self._join_monotonic": [
                    3489,
                    3498
                ],
                "join_index.sort_values": [
                    3518
                ],
                "other.get_indexer": [
                    3528
                ],
                "self_names": [
                    3552,
                    3538,
                    3540
                ],
                "com.not_none": [
                    3538,
                    3539
                ],
                "other_names": [
                    3553,
                    3539,
                    3540
                ],
                "overlap": [
                    3552,
                    3553,
                    3587,
                    3540,
                    3543
                ],
                "ldrop_names": [
                    3552,
                    3572,
                    3556,
                    3560
                ],
                "rdrop_names": [
                    3572,
                    3553,
                    3556,
                    3561
                ],
                "self_jnlevels": [
                    3560,
                    3565,
                    3557
                ],
                "other_jnlevels": [
                    3561,
                    3566,
                    3558
                ],
                "other.reorder_levels": [
                    3558
                ],
                "self.droplevel": [
                    3560
                ],
                "other.droplevel": [
                    3561
                ],
                "join_idx": [
                    3565,
                    3575
                ],
                "lidx": [
                    3585,
                    3809,
                    3811,
                    3785,
                    3799,
                    3789,
                    3565,
                    3792,
                    3795,
                    3575,
                    3801,
                    3803,
                    3805
                ],
                "ridx": [
                    3585,
                    3810,
                    3811,
                    3786,
                    3799,
                    3565,
                    3790,
                    3792,
                    3795,
                    3575,
                    3801,
                    3803,
                    3805
                ],
                "self_jnlevels.join": [
                    3565
                ],
                "dropped_names": [
                    3572,
                    3575
                ],
                "levels": [
                    3580,
                    3574
                ],
                "codes": [
                    3580,
                    3574
                ],
                "_restore_dropped_levels_multijoin": [
                    3574
                ],
                "multi_join_idx": [
                    3585,
                    3579,
                    3583
                ],
                "multi_join_idx.remove_unused_levels": [
                    3583
                ],
                "jl": [
                    3587,
                    3598
                ],
                "flip_order": [
                    3591,
                    3594,
                    3756,
                    3603,
                    3671,
                    3672
                ],
                "other.names.index": [
                    3598
                ],
                "left_idx": [
                    3618,
                    3619,
                    3625,
                    3611,
                    3615
                ],
                "right_idx": [
                    3616,
                    3625,
                    3611,
                    3620
                ],
                "_get_join_indexers": [
                    3611
                ],
                "self._ndarray_values.take": [
                    3618
                ],
                "np.putmask": [
                    4218,
                    3620
                ],
                "other._ndarray_values.take": [
                    3620
                ],
                "self._wrap_joined_index": [
                    3793,
                    3796,
                    3806,
                    3622
                ],
                "size": [
                    3648
                ],
                "labels": [
                    3648,
                    3651,
                    3652,
                    5188,
                    5189,
                    5193,
                    3658,
                    3659,
                    3663
                ],
                "lab": [
                    3714,
                    3652,
                    3653,
                    3659,
                    3660,
                    3726,
                    3663,
                    3664,
                    3732,
                    3735
                ],
                "sorter": [
                    3653,
                    3654
                ],
                "libalgos.groupsort_indexer": [
                    3720,
                    3653
                ],
                "libalgos": [
                    3720,
                    3653
                ],
                "lab.max": [
                    3653
                ],
                "tic": [
                    3658,
                    3660,
                    3662
                ],
                "starts": [
                    3664,
                    3662
                ],
                "np.hstack": [
                    3662
                ],
                "lib.get_level_sorter": [
                    3664
                ],
                "left._get_level_number": [
                    3676
                ],
                "old_level": [
                    3698,
                    3684,
                    3677
                ],
                "left.levels": [
                    3707,
                    3677
                ],
                "right.is_unique": [
                    3679
                ],
                "new_level": [
                    3708,
                    3684
                ],
                "left_lev_indexer": [
                    3688,
                    3697,
                    3698,
                    3684
                ],
                "right_lev_indexer": [
                    3684,
                    3749,
                    3751
                ],
                "old_level.join": [
                    3684
                ],
                "keep_order": [
                    3689,
                    3710
                ],
                "_get_leaf_sorter": [
                    3693,
                    3734
                ],
                "left.codes": [
                    3704,
                    3701,
                    3693
                ],
                "rev_indexer": [
                    3698,
                    3701
                ],
                "lib.get_reverse_indexer": [
                    3698
                ],
                "new_lev_codes": [
                    3712,
                    3719,
                    3721,
                    3729,
                    3700,
                    3705
                ],
                "np.intp": [
                    3711
                ],
                "mask.all": [
                    3713,
                    3730
                ],
                "ngroups": [
                    3721,
                    3719
                ],
                "new_lev_codes.max": [
                    3719
                ],
                "counts": [
                    3720,
                    3725
                ],
                "mask_all": [
                    3730,
                    3731,
                    3739
                ],
                "mask.nonzero": [
                    3740
                ],
                "left.names": [
                    3745
                ],
                "join_index.codes": [
                    3754,
                    3751
                ],
                "ret_index": [
                    3776,
                    3772,
                    3774
                ],
                "sv": [
                    3778,
                    3786,
                    3789,
                    3792,
                    3795,
                    3799,
                    3801,
                    3803,
                    3805
                ],
                "ov": [
                    3779,
                    3786,
                    3789,
                    3792,
                    3795,
                    3799,
                    3801,
                    3803,
                    3805
                ],
                "self._left_indexer_unique": [
                    3786,
                    3789
                ],
                "self._left_indexer": [
                    3801,
                    3799
                ],
                "joined": [
                    3817
                ],
                "array": [
                    3848,
                    3851,
                    3852,
                    3847
                ],
                "PandasArray": [
                    3851
                ],
                "IndexOpsMixin.array.__doc__": [
                    3845
                ],
                "IndexOpsMixin.array": [
                    3845
                ],
                "memory_usage": [
                    3931
                ],
                "self._engine.sizeof": [
                    3934
                ],
                "IndexOpsMixin.memory_usage.__doc__": [
                    3929
                ],
                "IndexOpsMixin.memory_usage": [
                    3929
                ],
                "is_bool": [
                    3958
                ],
                "values.astype": [
                    3961
                ],
                "cond": [
                    3964
                ],
                "self._is_numeric_dtype": [
                    4000,
                    3966
                ],
                "np.any": [
                    5401,
                    3966
                ],
                "cls.__name__": [
                    3979,
                    5580
                ],
                "item": [
                    4000,
                    5165,
                    5164,
                    4005
                ],
                "Any": [
                    4046
                ],
                "getitem": [
                    4106,
                    4122,
                    4116,
                    4111
                ],
                "self._data.__getitem__": [
                    4106
                ],
                "promote": [
                    4107,
                    4116,
                    4127
                ],
                "com.cast_scalar_indexer": [
                    4110,
                    4895
                ],
                "com.is_bool_indexer": [
                    4118
                ],
                "com.values_from_object": [
                    4121,
                    4254
                ],
                "deprecate_ndim_indexing": [
                    4125
                ],
                "to_concat": [
                    4192,
                    4161,
                    4193,
                    4163,
                    4196,
                    4167,
                    4200,
                    4170,
                    4202,
                    4174,
                    4177,
                    4178,
                    4156,
                    4159
                ],
                "to_concat.append": [
                    4161
                ],
                "obj": [
                    4163,
                    4164,
                    5573,
                    4167,
                    5576
                ],
                "obj.name": [
                    5576,
                    4167
                ],
                "self._concat": [
                    4170
                ],
                "typs": [
                    4176,
                    4174
                ],
                "_concat.get_dtype_kinds": [
                    4174
                ],
                "_concat": [
                    4174
                ],
                "self._concat_same_dtype": [
                    4177
                ],
                "Index._concat_same_dtype": [
                    4178
                ],
                "klasses": [
                    4185,
                    4193
                ],
                "ABCDatetimeIndex": [
                    4186,
                    4677
                ],
                "ABCIntervalIndex": [
                    4190
                ],
                "x.astype": [
                    4193
                ],
                "x._values": [
                    4200
                ],
                "np.concatenate": [
                    4202,
                    5165
                ],
                "self._convert_for_op": [
                    4218
                ],
                "putmask": [
                    4225
                ],
                "self.is_": [
                    4237
                ],
                "other.equals": [
                    4245
                ],
                "other.nlevels": [
                    4250
                ],
                "array_equivalent": [
                    4253
                ],
                "c": [
                    4272,
                    4273
                ],
                "self._comparables": [
                    4273
                ],
                "label": [
                    4992,
                    4996,
                    4999,
                    4988,
                    4938,
                    4939,
                    4943,
                    4336,
                    4944,
                    4946,
                    4950,
                    4956
                ],
                "loc.indices": [
                    4341
                ],
                "locs": [
                    4376,
                    4379,
                    4373,
                    4374
                ],
                "searchsorted": [
                    4955,
                    4373
                ],
                "where.values": [
                    4379,
                    4373
                ],
                "where": [
                    4379,
                    4373
                ],
                "first": [
                    4378,
                    4379
                ],
                "mask.argmax": [
                    4378
                ],
                "_as": [
                    4433,
                    4426,
                    4428,
                    4430
                ],
                "self.argsort": [
                    4426
                ],
                "sorted_index": [
                    4433,
                    4435,
                    4430
                ],
                "return_indexer": [
                    4432
                ],
                "self.asi8": [
                    4536
                ],
                "result.argsort": [
                    4539
                ],
                "args": [
                    4539
                ],
                "self._should_fallback_to_positional": [
                    4563
                ],
                "self._get_values_for_loc": [
                    4572
                ],
                "series": [
                    4592,
                    4594,
                    4572
                ],
                "self.is_boolean": [
                    4578
                ],
                "series._values": [
                    4592
                ],
                "series.iloc": [
                    4594
                ],
                "validate_numeric_casting": [
                    4615
                ],
                "arr.dtype": [
                    4615
                ],
                "arr": [
                    4616,
                    4615
                ],
                "pself.get_indexer_non_unique": [
                    4645
                ],
                "is_categorical": [
                    4647
                ],
                "tgt_values": [
                    4648,
                    4650,
                    4652,
                    4654
                ],
                "self.is_all_dates": [
                    4649
                ],
                "target.is_all_dates": [
                    4649
                ],
                "target.asi8": [
                    4650
                ],
                "self._engine.get_indexer_non_unique": [
                    4654
                ],
                "values.values": [
                    4701
                ],
                "ensure_categorical": [
                    4702
                ],
                "values._reverse_indexer": [
                    4703
                ],
                "result.items": [
                    4706
                ],
                "PrettyDict": [
                    4708,
                    4684
                ],
                "Hashable": [
                    5569,
                    4684
                ],
                "new_values": [
                    4736,
                    4740,
                    4743,
                    4746,
                    4750,
                    4731
                ],
                "_map_values": [
                    4731
                ],
                "na_action": [
                    4731
                ],
                "new_values.size": [
                    4736,
                    4746
                ],
                "attributes.get": [
                    4739,
                    4740
                ],
                "algos.isin": [
                    4833
                ],
                "start_slice": [
                    5115,
                    4879,
                    5105,
                    4882,
                    5078,
                    4887,
                    5080,
                    5081,
                    5082,
                    5113,
                    5112
                ],
                "end_slice": [
                    5088,
                    4879,
                    5105,
                    5111,
                    4884,
                    5110,
                    4887,
                    5115,
                    5084,
                    5086,
                    5087
                ],
                "self.slice_locs": [
                    4879
                ],
                "end": [
                    5064,
                    5068,
                    5071,
                    4879,
                    5085,
                    5086
                ],
                "self.searchsorted": [
                    4950
                ],
                "pos": [
                    4955,
                    4958
                ],
                "original_label": [
                    4988,
                    5014
                ],
                "self._maybe_cast_slice_bound": [
                    4992
                ],
                "slc": [
                    5024,
                    5026,
                    4996,
                    5004,
                    5007,
                    5008,
                    5010,
                    5011,
                    5017,
                    5019,
                    5021
                ],
                "lib.maybe_booleans_to_slice": [
                    5008
                ],
                "slc.view": [
                    5008
                ],
                "lib.maybe_indices_to_slice": [
                    5010
                ],
                "slc.astype": [
                    5010
                ],
                "slc.start": [
                    5019
                ],
                "slc.stop": [
                    5021
                ],
                "inc": [
                    5090,
                    5060,
                    5062
                ],
                "datetime": [
                    5068
                ],
                "ts_start": [
                    5075,
                    5070
                ],
                "Timestamp": [
                    5070,
                    5071
                ],
                "ts_end": [
                    5075,
                    5071
                ],
                "tz_compare": [
                    5075
                ],
                "ts_start.tzinfo": [
                    5075
                ],
                "ts_end.tzinfo": [
                    5075
                ],
                "self.get_slice_bound": [
                    5080,
                    5086
                ],
                "np.delete": [
                    5146
                ],
                "_self": [
                    5163,
                    5165
                ],
                "self._coerce_scalar_to_index": [
                    5164
                ],
                "arr_dtype": [
                    5187,
                    5188
                ],
                "com.index_labels_to_array": [
                    5188
                ],
                "errors": [
                    5192
                ],
                "self.delete": [
                    5195
                ],
                "cls.__eq__": [
                    5205
                ],
                "_make_comparison_op": [
                    5205,
                    5206,
                    5207,
                    5208,
                    5209,
                    5210
                ],
                "operator.eq": [
                    5205
                ],
                "cls.__ne__": [
                    5206
                ],
                "operator.ne": [
                    5206
                ],
                "cls.__lt__": [
                    5207
                ],
                "cls.__gt__": [
                    5208
                ],
                "operator.gt": [
                    5208
                ],
                "cls.__le__": [
                    5209
                ],
                "cls.__ge__": [
                    5210
                ],
                "operator.ge": [
                    5210
                ],
                "cls.__add__": [
                    5217,
                    5249
                ],
                "make_invalid_op": [
                    5409,
                    5410,
                    5217,
                    5218,
                    5219,
                    5220,
                    5221,
                    5222,
                    5229,
                    5230,
                    5231,
                    5232,
                    5233,
                    5234,
                    5235,
                    5236,
                    5237,
                    5238,
                    5239,
                    5240,
                    5241,
                    5242
                ],
                "cls.__radd__": [
                    5218,
                    5250
                ],
                "cls.__iadd__": [
                    5219
                ],
                "cls.__sub__": [
                    5251,
                    5220
                ],
                "cls.__rsub__": [
                    5252,
                    5221
                ],
                "cls.__isub__": [
                    5222
                ],
                "cls.__pow__": [
                    5229,
                    5254
                ],
                "cls.__rpow__": [
                    5253,
                    5230
                ],
                "cls.__mul__": [
                    5264,
                    5231
                ],
                "cls.__rmul__": [
                    5232,
                    5265
                ],
                "cls.__floordiv__": [
                    5233,
                    5261
                ],
                "cls.__rfloordiv__": [
                    5234,
                    5262
                ],
                "cls.__truediv__": [
                    5256,
                    5235
                ],
                "cls.__rtruediv__": [
                    5257,
                    5236
                ],
                "cls.__mod__": [
                    5260,
                    5237
                ],
                "cls.__divmod__": [
                    5238,
                    5263
                ],
                "cls.__neg__": [
                    5282,
                    5239
                ],
                "cls.__pos__": [
                    5240,
                    5283
                ],
                "cls.__abs__": [
                    5241,
                    5284
                ],
                "cls.__inv__": [
                    5242,
                    5285
                ],
                "_make_arithmetic_op": [
                    5249,
                    5250,
                    5251,
                    5252,
                    5253,
                    5254,
                    5256,
                    5257,
                    5260,
                    5261,
                    5262,
                    5263,
                    5264,
                    5265
                ],
                "operator.add": [
                    5249
                ],
                "ops.radd": [
                    5250
                ],
                "operator.sub": [
                    5251
                ],
                "ops.rsub": [
                    5252
                ],
                "ops.rpow": [
                    5253
                ],
                "operator.pow": [
                    5254
                ],
                "operator.truediv": [
                    5256
                ],
                "ops.rtruediv": [
                    5257
                ],
                "operator.mod": [
                    5260
                ],
                "operator.floordiv": [
                    5261
                ],
                "ops.rfloordiv": [
                    5262
                ],
                "operator.mul": [
                    5264
                ],
                "ops.rmul": [
                    5265
                ],
                "_evaluate_numeric_unary.__name__": [
                    5279
                ],
                "_evaluate_numeric_unary": [
                    5280,
                    5279
                ],
                "opstr": [
                    5279
                ],
                "_make_evaluate_unary": [
                    5282,
                    5283,
                    5284,
                    5285
                ],
                "operator.neg": [
                    5282
                ],
                "operator.pos": [
                    5283
                ],
                "cls._add_numeric_methods_unary": [
                    5289
                ],
                "cls._add_numeric_methods_binary": [
                    5290
                ],
                "_doc": [
                    5297,
                    5382
                ],
                "dedent": [
                    5312,
                    5354
                ],
                "f": [
                    5384
                ],
                "result.ndim": [
                    5387
                ],
                "result.dtype.type": [
                    5390
                ],
                "result.dtype": [
                    5390
                ],
                "result.item": [
                    5390
                ],
                "Substitution": [
                    5380
                ],
                "desc": [
                    5380
                ],
                "logical_func.__name__": [
                    5394
                ],
                "logical_func": [
                    5394,
                    5395
                ],
                "cls.all": [
                    5409,
                    5397
                ],
                "_make_logical_function": [
                    5400,
                    5397
                ],
                "np.all": [
                    5398
                ],
                "cls.any": [
                    5400,
                    5410
                ],
                "self._values.shape": [
                    5420
                ],
                "Index._add_numeric_methods_disabled": [
                    5423
                ],
                "Index._add_logical_methods": [
                    5424
                ],
                "Index._add_comparison_methods": [
                    5425
                ],
                "sequences": [
                    5464,
                    5466,
                    5461
                ],
                "MultiIndex.from_arrays": [
                    5466,
                    5522
                ],
                "index_like": [
                    5504,
                    5505,
                    5506,
                    5508,
                    5509,
                    5513,
                    5514,
                    5515,
                    5517,
                    5524,
                    5531,
                    5501,
                    5533,
                    5503
                ],
                "index_like.copy": [
                    5503
                ],
                "index_like.name": [
                    5506
                ],
                "converted": [
                    5522,
                    5524,
                    5517,
                    5519
                ],
                "all_arrays": [
                    5517,
                    5519
                ],
                "lib.clean_index_list": [
                    5517
                ],
                "seq": [
                    5545,
                    5541,
                    5543
                ],
                "trimmed": [
                    5552,
                    5553,
                    5554,
                    5555
                ],
                "strings": [
                    5552,
                    5553
                ],
                "n": [
                    5566
                ],
                "Optional": [
                    5569
                ],
                "is_integer_dtype": [
                    5605
                ],
                "inferred": [
                    5697,
                    5661,
                    5700,
                    5687,
                    5606,
                    5607,
                    5672,
                    5609,
                    5676,
                    5613,
                    5683,
                    5686,
                    5623,
                    5628,
                    5629,
                    5663
                ],
                "maybe_cast_to_integer_array": [
                    5608,
                    5614
                ],
                "_try_convert_to_int_array": [
                    5665,
                    5619
                ],
                "np.float64": [
                    5674,
                    5621
                ],
                "IntervalArray._from_sequence": [
                    5678
                ],
                "IntervalArray": [
                    5678
                ],
                "inferred.startswith": [
                    5697,
                    5687
                ],
                "DatetimeArray._from_sequence": [
                    5689
                ],
                "DatetimeArray": [
                    5689
                ],
                "OutOfBoundsDatetime": [
                    5691
                ],
                "TimedeltaArray._from_sequence": [
                    5698
                ],
                "TimedeltaArray": [
                    5698
                ],
                "PeriodArray._from_sequence": [
                    5702
                ],
                "PeriodArray": [
                    5702
                ],
                "subarr.dtype": [
                    5707
                ],
                "klass": [
                    5784,
                    5787
                ],
                "index.astype": [
                    5785
                ]
            }
        },
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_53/pandas/core/series.py": {
            "buggy_functions": [
                {
                    "function_name": "_get_value",
                    "function_code": "def _get_value(self, label, takeable: bool = False):\n    \"\"\"\n    Quickly retrieve single value at passed index label.\n\n    Parameters\n    ----------\n    label : object\n    takeable : interpret the index as indexers, default False\n\n    Returns\n    -------\n    scalar value\n    \"\"\"\n    if takeable:\n        return self._values[label]\n\n    # We assume that _convert_scalar_indexer has already been called,\n    #  with kind=\"loc\", if necessary, by the time we get here\n    return self.index.get_value(self, label)\n",
                    "decorators": [],
                    "docstring": "Quickly retrieve single value at passed index label.\n\nParameters\n----------\nlabel : object\ntakeable : interpret the index as indexers, default False\n\nReturns\n-------\nscalar value",
                    "start_line": 956,
                    "variables": {
                        "bool": [
                            956
                        ],
                        "takeable": [
                            969
                        ],
                        "self._values": [
                            970
                        ],
                        "self": [
                            970,
                            974
                        ],
                        "label": [
                            970,
                            974
                        ],
                        "self.index.get_value": [
                            974
                        ],
                        "self.index": [
                            974
                        ]
                    },
                    "filtered_variables": {
                        "takeable": [
                            969
                        ],
                        "self._values": [
                            970
                        ],
                        "self": [
                            970,
                            974
                        ],
                        "label": [
                            970,
                            974
                        ],
                        "self.index.get_value": [
                            974
                        ],
                        "self.index": [
                            974
                        ]
                    },
                    "diff_line_number": 971,
                    "class_data": {
                        "signature": "class Series(base.IndexOpsMixin, generic.NDFrame)",
                        "docstring": "One-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, *, **) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series.\n\n    .. versionchanged:: 0.23.0\n       If data is a dict, argument order is maintained for Python 3.6\n       and later.\n\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If both a dict and index\n    sequence are used, the index will override the keys found in the\n    dict.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : str, optional\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False):\n    if fastpath:\n        if not isinstance(data, SingleBlockManager):\n            data = SingleBlockManager(data, index, fastpath=True)\n        if copy:\n            data = data.copy()\n        if index is None:\n            index = data.index\n    else:\n        name = ibase.maybe_extract_name(name, data, type(self))\n        if is_empty_data(data) and dtype is None:\n            warnings.warn(\"The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\", DeprecationWarning, stacklevel=2)\n        if index is not None:\n            index = ensure_index(index)\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n        if isinstance(data, MultiIndex):\n            raise NotImplementedError('initializing a Series from a MultiIndex is not supported')\n        elif isinstance(data, Index):\n            if dtype is not None:\n                data = data.astype(dtype)\n            else:\n                data = data._values.copy()\n                if isinstance(data, ABCDatetimeIndex) and data.tz is not None:\n                    data = data._values.copy(deep=True)\n            copy = False\n        elif isinstance(data, np.ndarray):\n            if len(data.dtype):\n                raise ValueError('Cannot construct a Series from an ndarray with compound dtype.  Use DataFrame instead.')\n            pass\n        elif isinstance(data, ABCSeries):\n            if index is None:\n                index = data.index\n            else:\n                data = data.reindex(index, copy=copy)\n            data = data._data\n        elif is_dict_like(data):\n            data, index = self._init_dict(data, index, dtype)\n            dtype = None\n            copy = False\n        elif isinstance(data, SingleBlockManager):\n            if index is None:\n                index = data.index\n            elif not data.index.equals(index) or copy:\n                raise AssertionError('Cannot pass both SingleBlockManager `data` argument and a different `index` argument. `copy` must be False.')\n        elif is_extension_array_dtype(data):\n            pass\n        elif isinstance(data, (set, frozenset)):\n            raise TypeError(f\"'{type(data).__name__}' type is unordered\")\n        elif isinstance(data, ABCSparseArray):\n            data = data.to_dense()\n        else:\n            data = com.maybe_iterable_to_list(data)\n        if index is None:\n            if not is_list_like(data):\n                data = [data]\n            index = ibase.default_index(len(data))\n        elif is_list_like(data):\n            try:\n                if len(index) != len(data):\n                    raise ValueError(f'Length of passed values is {len(data)}, index implies {len(index)}.')\n            except TypeError:\n                pass\n        if isinstance(data, SingleBlockManager):\n            if dtype is not None:\n                data = data.astype(dtype=dtype, errors='ignore', copy=copy)\n            elif copy:\n                data = data.copy()\n        else:\n            data = sanitize_array(data, index, dtype, copy, raise_cast_failure=True)\n            data = SingleBlockManager(data, index, fastpath=True)\n    generic.NDFrame.__init__(self, data)\n    self.name = name\n    self._set_axis(0, index, fastpath=True)",
                            "def _init_dict(self, data, index=None, dtype=None):\n    \"\"\"\n    Derive the \"_data\" and \"index\" attributes of a new Series from a\n    dictionary input.\n\n    Parameters\n    ----------\n    data : dict or dict-like\n        Data used to populate the new Series.\n    index : Index or index-like, default None\n        Index for the new Series: if None, use dict keys.\n    dtype : dtype, default None\n        The dtype for the new Series: if None, infer from data.\n\n    Returns\n    -------\n    _data : BlockManager for the new Series\n    index : index for the new Series\n    \"\"\"\n    if data:\n        keys, values = zip(*data.items())\n        values = list(values)\n    elif index is not None:\n        values = na_value_for_dtype(dtype)\n        keys = index\n    else:\n        keys, values = ([], [])\n    s = create_series_with_explicit_dtype(values, index=keys, dtype=dtype, dtype_if_empty=np.float64)\n    if data and index is not None:\n        s = s.reindex(index, copy=False)\n    return (s._data, s.index)",
                            "@property\ndef _constructor(self) -> Type['Series']:\n    return Series",
                            "@property\ndef _constructor_expanddim(self) -> Type['DataFrame']:\n    from pandas.core.frame import DataFrame\n    return DataFrame",
                            "@property\ndef _can_hold_na(self):\n    return self._data._can_hold_na",
                            "def _set_axis(self, axis, labels, fastpath: bool=False) -> None:\n    \"\"\"\n    Override generic, we want to set the _typ here.\n    \"\"\"\n    if not fastpath:\n        labels = ensure_index(labels)\n    is_all_dates = labels.is_all_dates\n    if is_all_dates:\n        if not isinstance(labels, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n            try:\n                labels = DatetimeIndex(labels)\n                if fastpath:\n                    self._data.set_axis(axis, labels)\n            except (tslibs.OutOfBoundsDatetime, ValueError):\n                pass\n    object.__setattr__(self, '_index', labels)\n    if not fastpath:\n        self._data.set_axis(axis, labels)",
                            "def _update_inplace(self, result, **kwargs):\n    return generic.NDFrame._update_inplace(self, result, **kwargs)",
                            "@property\ndef dtype(self):\n    \"\"\"\n    Return the dtype object of the underlying data.\n    \"\"\"\n    return self._data.dtype",
                            "@property\ndef dtypes(self):\n    \"\"\"\n    Return the dtype object of the underlying data.\n    \"\"\"\n    return self._data.dtype",
                            "@property\ndef name(self) -> Optional[Hashable]:\n    return self._name",
                            "@name.setter\ndef name(self, value: Optional[Hashable]) -> None:\n    if not is_hashable(value):\n        raise TypeError('Series.name must be a hashable type')\n    object.__setattr__(self, '_name', value)",
                            "@property\ndef values(self):\n    \"\"\"\n    Return Series as ndarray or ndarray-like depending on the dtype.\n\n    .. warning::\n\n       We recommend using :attr:`Series.array` or\n       :meth:`Series.to_numpy`, depending on whether you need\n       a reference to the underlying data or a NumPy array.\n\n    Returns\n    -------\n    numpy.ndarray or ndarray-like\n\n    See Also\n    --------\n    Series.array : Reference to the underlying data.\n    Series.to_numpy : A NumPy array representing the underlying data.\n\n    Examples\n    --------\n    >>> pd.Series([1, 2, 3]).values\n    array([1, 2, 3])\n\n    >>> pd.Series(list('aabc')).values\n    array(['a', 'a', 'b', 'c'], dtype=object)\n\n    >>> pd.Series(list('aabc')).astype('category').values\n    [a, a, b, c]\n    Categories (3, object): [a, b, c]\n\n    Timezone aware datetime data is converted to UTC:\n\n    >>> pd.Series(pd.date_range('20130101', periods=3,\n    ...                         tz='US/Eastern')).values\n    array(['2013-01-01T05:00:00.000000000',\n           '2013-01-02T05:00:00.000000000',\n           '2013-01-03T05:00:00.000000000'], dtype='datetime64[ns]')\n    \"\"\"\n    return self._data.external_values()",
                            "@property\ndef _values(self):\n    \"\"\"\n    Return the internal repr of this data (defined by Block.interval_values).\n    This are the values as stored in the Block (ndarray or ExtensionArray\n    depending on the Block class), with datetime64[ns] and timedelta64[ns]\n    wrapped in ExtensionArrays to match Index._values behavior.\n\n    Differs from the public ``.values`` for certain data types, because of\n    historical backwards compatibility of the public attribute (e.g. period\n    returns object ndarray and datetimetz a datetime64[ns] ndarray for\n    ``.values`` while it returns an ExtensionArray for ``._values`` in those\n    cases).\n\n    Differs from ``.array`` in that this still returns the numpy array if\n    the Block is backed by a numpy array (except for datetime64 and\n    timedelta64 dtypes), while ``.array`` ensures to always return an\n    ExtensionArray.\n\n    Differs from ``._ndarray_values``, as that ensures to always return a\n    numpy array (it will call ``_ndarray_values`` on the ExtensionArray, if\n    the Series was backed by an ExtensionArray).\n\n    Overview:\n\n    dtype       | values        | _values       | array         | _ndarray_values |\n    ----------- | ------------- | ------------- | ------------- | --------------- |\n    Numeric     | ndarray       | ndarray       | PandasArray   | ndarray         |\n    Category    | Categorical   | Categorical   | Categorical   | ndarray[int]    |\n    dt64[ns]    | ndarray[M8ns] | DatetimeArray | DatetimeArray | ndarray[M8ns]   |\n    dt64[ns tz] | ndarray[M8ns] | DatetimeArray | DatetimeArray | ndarray[M8ns]   |\n    td64[ns]    | ndarray[m8ns] | TimedeltaArray| ndarray[m8ns] | ndarray[m8ns]   |\n    Period      | ndarray[obj]  | PeriodArray   | PeriodArray   | ndarray[int]    |\n    Nullable    | EA            | EA            | EA            | ndarray         |\n\n    \"\"\"\n    return self._data.internal_values()",
                            "@Appender(base.IndexOpsMixin.array.__doc__)\n@property\ndef array(self) -> ExtensionArray:\n    return self._data._block.array_values()",
                            "def _internal_get_values(self):\n    \"\"\"\n    Same as values (but handles sparseness conversions); is a view.\n\n    Returns\n    -------\n    numpy.ndarray\n        Data of the Series.\n    \"\"\"\n    return self._data.get_values()",
                            "def ravel(self, order='C'):\n    \"\"\"\n    Return the flattened underlying data as an ndarray.\n\n    Returns\n    -------\n    numpy.ndarray or ndarray-like\n        Flattened data of the Series.\n\n    See Also\n    --------\n    numpy.ndarray.ravel\n    \"\"\"\n    return self._values.ravel(order=order)",
                            "def __len__(self) -> int:\n    \"\"\"\n    Return the length of the Series.\n    \"\"\"\n    return len(self._data)",
                            "def view(self, dtype=None) -> 'Series':\n    \"\"\"\n    Create a new view of the Series.\n\n    This function will return a new Series with a view of the same\n    underlying values in memory, optionally reinterpreted with a new data\n    type. The new data type must preserve the same size in bytes as to not\n    cause index misalignment.\n\n    Parameters\n    ----------\n    dtype : data type\n        Data type object or one of their string representations.\n\n    Returns\n    -------\n    Series\n        A new Series object as a view of the same data in memory.\n\n    See Also\n    --------\n    numpy.ndarray.view : Equivalent numpy function to create a new view of\n        the same data in memory.\n\n    Notes\n    -----\n    Series are instantiated with ``dtype=float64`` by default. While\n    ``numpy.ndarray.view()`` will return a view with the same data type as\n    the original array, ``Series.view()`` (without specified dtype)\n    will try using ``float64`` and may fail if the original data type size\n    in bytes is not the same.\n\n    Examples\n    --------\n    >>> s = pd.Series([-2, -1, 0, 1, 2], dtype='int8')\n    >>> s\n    0   -2\n    1   -1\n    2    0\n    3    1\n    4    2\n    dtype: int8\n\n    The 8 bit signed integer representation of `-1` is `0b11111111`, but\n    the same bytes represent 255 if read as an 8 bit unsigned integer:\n\n    >>> us = s.view('uint8')\n    >>> us\n    0    254\n    1    255\n    2      0\n    3      1\n    4      2\n    dtype: uint8\n\n    The views share the same underlying values:\n\n    >>> us[0] = 128\n    >>> s\n    0   -128\n    1     -1\n    2      0\n    3      1\n    4      2\n    dtype: int8\n    \"\"\"\n    return self._constructor(self._values.view(dtype), index=self.index).__finalize__(self)",
                            "def __array_ufunc__(self, ufunc: Callable, method: str, *inputs: Any, **kwargs: Any):\n    cls = type(self)\n    result = ops.maybe_dispatch_ufunc_to_dunder_op(self, ufunc, method, *inputs, **kwargs)\n    if result is not NotImplemented:\n        return result\n    no_defer = (np.ndarray.__array_ufunc__, cls.__array_ufunc__)\n    for item in inputs:\n        higher_priority = hasattr(item, '__array_priority__') and item.__array_priority__ > self.__array_priority__\n        has_array_ufunc = hasattr(item, '__array_ufunc__') and type(item).__array_ufunc__ not in no_defer and (not isinstance(item, self._HANDLED_TYPES))\n        if higher_priority or has_array_ufunc:\n            return NotImplemented\n    names = [getattr(x, 'name') for x in inputs if hasattr(x, 'name')]\n    types = tuple((type(x) for x in inputs))\n    alignable = [x for x, t in zip(inputs, types) if issubclass(t, Series)]\n    if len(alignable) > 1:\n        index = alignable[0].index\n        for s in alignable[1:]:\n            index |= s.index\n        inputs = tuple((x.reindex(index) if issubclass(t, Series) else x for x, t in zip(inputs, types)))\n    else:\n        index = self.index\n    inputs = tuple((extract_array(x, extract_numpy=True) for x in inputs))\n    result = getattr(ufunc, method)(*inputs, **kwargs)\n    name: Optional[Hashable]\n    if len(set(names)) == 1:\n        name = names[0]\n    else:\n        name = None\n\n    def construct_return(result):\n        if lib.is_scalar(result):\n            return result\n        elif result.ndim > 1:\n            if method == 'outer':\n                raise NotImplementedError\n            return result\n        return self._constructor(result, index=index, name=name, copy=False)\n    if type(result) is tuple:\n        return tuple((construct_return(x) for x in result))\n    elif method == 'at':\n        return None\n    else:\n        return construct_return(result)",
                            "def __array__(self, dtype=None) -> np.ndarray:\n    \"\"\"\n    Return the values as a NumPy array.\n\n    Users should not call this directly. Rather, it is invoked by\n    :func:`numpy.array` and :func:`numpy.asarray`.\n\n    Parameters\n    ----------\n    dtype : str or numpy.dtype, optional\n        The dtype to use for the resulting NumPy array. By default,\n        the dtype is inferred from the data.\n\n    Returns\n    -------\n    numpy.ndarray\n        The values in the series converted to a :class:`numpy.ndarray`\n        with the specified `dtype`.\n\n    See Also\n    --------\n    array : Create a new array from data.\n    Series.array : Zero-copy view to the array backing the Series.\n    Series.to_numpy : Series method for similar behavior.\n\n    Examples\n    --------\n    >>> ser = pd.Series([1, 2, 3])\n    >>> np.asarray(ser)\n    array([1, 2, 3])\n\n    For timezone-aware data, the timezones may be retained with\n    ``dtype='object'``\n\n    >>> tzser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n    >>> np.asarray(tzser, dtype=\"object\")\n    array([Timestamp('2000-01-01 00:00:00+0100', tz='CET', freq='D'),\n           Timestamp('2000-01-02 00:00:00+0100', tz='CET', freq='D')],\n          dtype=object)\n\n    Or the values may be localized to UTC and the tzinfo discarded with\n    ``dtype='datetime64[ns]'``\n\n    >>> np.asarray(tzser, dtype=\"datetime64[ns]\")  # doctest: +ELLIPSIS\n    array(['1999-12-31T23:00:00.000000000', ...],\n          dtype='datetime64[ns]')\n    \"\"\"\n    return np.asarray(self.array, dtype)",
                            "@property\ndef axes(self) -> List[Index]:\n    \"\"\"\n    Return a list of the row axis labels.\n    \"\"\"\n    return [self.index]",
                            "@Appender(generic.NDFrame.take.__doc__)\ndef take(self, indices, axis=0, is_copy=None, **kwargs) -> 'Series':\n    if is_copy is not None:\n        warnings.warn(\"is_copy is deprecated and will be removed in a future version. 'take' always returns a copy, so there is no need to specify this.\", FutureWarning, stacklevel=2)\n    nv.validate_take(tuple(), kwargs)\n    indices = ensure_platform_int(indices)\n    new_index = self.index.take(indices)\n    if is_categorical_dtype(self):\n        indices = maybe_convert_indices(indices, len(self._get_axis(axis)))\n        kwargs = {'allow_fill': False}\n    else:\n        kwargs = {}\n    new_values = self._values.take(indices, **kwargs)\n    return self._constructor(new_values, index=new_index, fastpath=True).__finalize__(self)",
                            "def _take_with_is_copy(self, indices, axis=0, **kwargs):\n    \"\"\"\n    Internal version of the `take` method that sets the `_is_copy`\n    attribute to keep track of the parent dataframe (using in indexing\n    for the SettingWithCopyWarning). For Series this does the same\n    as the public take (it never sets `_is_copy`).\n\n    See the docstring of `take` for full explanation of the parameters.\n    \"\"\"\n    return self.take(indices=indices, axis=axis, **kwargs)",
                            "def _ixs(self, i: int, axis: int=0):\n    \"\"\"\n    Return the i-th value or values in the Series by location.\n\n    Parameters\n    ----------\n    i : int\n\n    Returns\n    -------\n    scalar (int) or Series (slice, sequence)\n    \"\"\"\n    return self._values[i]",
                            "def _slice(self, slobj: slice, axis: int=0) -> 'Series':\n    return self._get_values(slobj)",
                            "def __getitem__(self, key):\n    key = com.apply_if_callable(key, self)\n    if key is Ellipsis:\n        return self\n    key_is_scalar = is_scalar(key)\n    if key_is_scalar:\n        key = self.index._convert_scalar_indexer(key, kind='getitem')\n    elif isinstance(key, (list, tuple)):\n        key = unpack_1tuple(key)\n    if key_is_scalar or isinstance(self.index, MultiIndex):\n        try:\n            result = self.index.get_value(self, key)\n            return result\n        except InvalidIndexError:\n            if not isinstance(self.index, MultiIndex):\n                raise\n        except (KeyError, ValueError):\n            if isinstance(key, tuple) and isinstance(self.index, MultiIndex):\n                pass\n            else:\n                raise\n    if not key_is_scalar:\n        if is_iterator(key):\n            key = list(key)\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(self.index, key)\n            return self._get_values(key)\n    return self._get_with(key)",
                            "def _get_with(self, key):\n    if isinstance(key, slice):\n        slobj = self.index._convert_slice_indexer(key, kind='getitem')\n        return self._slice(slobj)\n    elif isinstance(key, ABCDataFrame):\n        raise TypeError('Indexing a Series with DataFrame is not supported, use the appropriate DataFrame column')\n    elif isinstance(key, tuple):\n        return self._get_values_tuple(key)\n    if not isinstance(key, (list, np.ndarray, ExtensionArray, Series, Index)):\n        key = list(key)\n    if isinstance(key, Index):\n        key_type = key.inferred_type\n    else:\n        key_type = lib.infer_dtype(key, skipna=False)\n    if key_type == 'integer':\n        if self.index.is_integer() or self.index.is_floating():\n            return self.loc[key]\n        elif isinstance(self.index, IntervalIndex):\n            return self.loc[key]\n        else:\n            return self.iloc[key]\n    if isinstance(key, list):\n        return self.loc[key]\n    return self.reindex(key)",
                            "def _get_values_tuple(self, key):\n    if com.any_none(*key):\n        with warnings.catch_warnings():\n            warnings.filterwarnings('ignore', 'Support for multi-dim', DeprecationWarning)\n            return self._get_values(key)\n    if not isinstance(self.index, MultiIndex):\n        raise ValueError('Can only tuple-index with a MultiIndex')\n    indexer, new_index = self.index.get_loc_level(key)\n    return self._constructor(self._values[indexer], index=new_index).__finalize__(self)",
                            "def _get_values(self, indexer):\n    try:\n        return self._constructor(self._data.get_slice(indexer), fastpath=True).__finalize__(self)\n    except ValueError:\n        return self._values[indexer]",
                            "def _get_value(self, label, takeable: bool=False):\n    \"\"\"\n    Quickly retrieve single value at passed index label.\n\n    Parameters\n    ----------\n    label : object\n    takeable : interpret the index as indexers, default False\n\n    Returns\n    -------\n    scalar value\n    \"\"\"\n    if takeable:\n        return self._values[label]\n    return self.index.get_value(self, label)",
                            "def __setitem__(self, key, value):\n    key = com.apply_if_callable(key, self)\n    cacher_needs_updating = self._check_is_chained_assignment_possible()\n    try:\n        self._set_with_engine(key, value)\n    except (KeyError, ValueError):\n        values = self._values\n        if is_integer(key) and (not self.index.inferred_type == 'integer'):\n            values[key] = value\n        elif key is Ellipsis:\n            self[:] = value\n        else:\n            self.loc[key] = value\n    except TypeError as e:\n        if isinstance(key, tuple) and (not isinstance(self.index, MultiIndex)):\n            raise ValueError('Can only tuple-index with a MultiIndex')\n        if _is_unorderable_exception(e):\n            raise IndexError(key)\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(self.index, key)\n            try:\n                self._where(~key, value, inplace=True)\n                return\n            except InvalidIndexError:\n                pass\n        self._set_with(key, value)\n    if cacher_needs_updating:\n        self._maybe_update_cacher()",
                            "def _set_with_engine(self, key, value):\n    loc = self.index._engine.get_loc(key)\n    validate_numeric_casting(self.dtype, value)\n    self._values[loc] = value",
                            "def _set_with(self, key, value):\n    if isinstance(key, slice):\n        indexer = self.index._convert_slice_indexer(key, kind='getitem')\n        return self._set_values(indexer, value)\n    elif is_scalar(key) and (not is_integer(key)) and (key not in self.index):\n        self.loc[key] = value\n        return\n    else:\n        if isinstance(key, tuple):\n            try:\n                self._set_values(key, value)\n            except Exception:\n                pass\n        if is_scalar(key):\n            key = [key]\n        if isinstance(key, Index):\n            key_type = key.inferred_type\n            key = key._values\n        else:\n            key_type = lib.infer_dtype(key, skipna=False)\n        if key_type == 'integer':\n            if self.index.inferred_type == 'integer':\n                self._set_labels(key, value)\n            else:\n                return self._set_values(key, value)\n        elif key_type == 'boolean':\n            self._set_values(key.astype(np.bool_), value)\n        else:\n            self._set_labels(key, value)",
                            "def _set_labels(self, key, value):\n    key = com.asarray_tuplesafe(key)\n    indexer: np.ndarray = self.index.get_indexer(key)\n    mask = indexer == -1\n    if mask.any():\n        raise ValueError(f'{key[mask]} not contained in the index')\n    self._set_values(indexer, value)",
                            "def _set_values(self, key, value):\n    if isinstance(key, Series):\n        key = key._values\n    self._data = self._data.setitem(indexer=key, value=value)\n    self._maybe_update_cacher()",
                            "def _set_value(self, label, value, takeable: bool=False):\n    \"\"\"\n    Quickly set single value at passed label.\n\n    If label is not contained, a new object is created with the label\n    placed at the end of the result index.\n\n    Parameters\n    ----------\n    label : object\n        Partial indexing with MultiIndex not allowed.\n    value : object\n        Scalar value.\n    takeable : interpret the index as indexers, default False\n    \"\"\"\n    try:\n        if takeable:\n            self._values[label] = value\n        else:\n            loc = self.index.get_loc(label)\n            validate_numeric_casting(self.dtype, value)\n            self._values[loc] = value\n    except KeyError:\n        self.loc[label] = value",
                            "@property\ndef _is_mixed_type(self):\n    return False",
                            "def repeat(self, repeats, axis=None) -> 'Series':\n    \"\"\"\n    Repeat elements of a Series.\n\n    Returns a new Series where each element of the current Series\n    is repeated consecutively a given number of times.\n\n    Parameters\n    ----------\n    repeats : int or array of ints\n        The number of repetitions for each element. This should be a\n        non-negative integer. Repeating 0 times will return an empty\n        Series.\n    axis : None\n        Must be ``None``. Has no effect but is accepted for compatibility\n        with numpy.\n\n    Returns\n    -------\n    Series\n        Newly created Series with repeated elements.\n\n    See Also\n    --------\n    Index.repeat : Equivalent function for Index.\n    numpy.repeat : Similar method for :class:`numpy.ndarray`.\n\n    Examples\n    --------\n    >>> s = pd.Series(['a', 'b', 'c'])\n    >>> s\n    0    a\n    1    b\n    2    c\n    dtype: object\n    >>> s.repeat(2)\n    0    a\n    0    a\n    1    b\n    1    b\n    2    c\n    2    c\n    dtype: object\n    >>> s.repeat([1, 2, 3])\n    0    a\n    1    b\n    1    b\n    2    c\n    2    c\n    2    c\n    dtype: object\n    \"\"\"\n    nv.validate_repeat(tuple(), dict(axis=axis))\n    new_index = self.index.repeat(repeats)\n    new_values = self._values.repeat(repeats)\n    return self._constructor(new_values, index=new_index).__finalize__(self)",
                            "def reset_index(self, level=None, drop=False, name=None, inplace=False):\n    \"\"\"\n    Generate a new DataFrame or Series with the index reset.\n\n    This is useful when the index needs to be treated as a column, or\n    when the index is meaningless and needs to be reset to the default\n    before another operation.\n\n    Parameters\n    ----------\n    level : int, str, tuple, or list, default optional\n        For a Series with a MultiIndex, only remove the specified levels\n        from the index. Removes all levels by default.\n    drop : bool, default False\n        Just reset the index, without inserting it as a column in\n        the new DataFrame.\n    name : object, optional\n        The name to use for the column containing the original Series\n        values. Uses ``self.name`` by default. This argument is ignored\n        when `drop` is True.\n    inplace : bool, default False\n        Modify the Series in place (do not create a new object).\n\n    Returns\n    -------\n    Series or DataFrame\n        When `drop` is False (the default), a DataFrame is returned.\n        The newly created columns will come first in the DataFrame,\n        followed by the original Series values.\n        When `drop` is True, a `Series` is returned.\n        In either case, if ``inplace=True``, no value is returned.\n\n    See Also\n    --------\n    DataFrame.reset_index: Analogous function for DataFrame.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4], name='foo',\n    ...               index=pd.Index(['a', 'b', 'c', 'd'], name='idx'))\n\n    Generate a DataFrame with default index.\n\n    >>> s.reset_index()\n      idx  foo\n    0   a    1\n    1   b    2\n    2   c    3\n    3   d    4\n\n    To specify the name of the new column use `name`.\n\n    >>> s.reset_index(name='values')\n      idx  values\n    0   a       1\n    1   b       2\n    2   c       3\n    3   d       4\n\n    To generate a new Series with the default set `drop` to True.\n\n    >>> s.reset_index(drop=True)\n    0    1\n    1    2\n    2    3\n    3    4\n    Name: foo, dtype: int64\n\n    To update the Series in place, without generating a new one\n    set `inplace` to True. Note that it also requires ``drop=True``.\n\n    >>> s.reset_index(inplace=True, drop=True)\n    >>> s\n    0    1\n    1    2\n    2    3\n    3    4\n    Name: foo, dtype: int64\n\n    The `level` parameter is interesting for Series with a multi-level\n    index.\n\n    >>> arrays = [np.array(['bar', 'bar', 'baz', 'baz']),\n    ...           np.array(['one', 'two', 'one', 'two'])]\n    >>> s2 = pd.Series(\n    ...     range(4), name='foo',\n    ...     index=pd.MultiIndex.from_arrays(arrays,\n    ...                                     names=['a', 'b']))\n\n    To remove a specific level from the Index, use `level`.\n\n    >>> s2.reset_index(level='a')\n           a  foo\n    b\n    one  bar    0\n    two  bar    1\n    one  baz    2\n    two  baz    3\n\n    If `level` is not set, all levels are removed from the Index.\n\n    >>> s2.reset_index()\n         a    b  foo\n    0  bar  one    0\n    1  bar  two    1\n    2  baz  one    2\n    3  baz  two    3\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if drop:\n        new_index = ibase.default_index(len(self))\n        if level is not None:\n            if not isinstance(level, (tuple, list)):\n                level = [level]\n            level = [self.index._get_level_number(lev) for lev in level]\n            if len(level) < self.index.nlevels:\n                new_index = self.index.droplevel(level)\n        if inplace:\n            self.index = new_index\n            self.name = name or self.name\n        else:\n            return self._constructor(self._values.copy(), index=new_index).__finalize__(self)\n    elif inplace:\n        raise TypeError('Cannot reset_index inplace on a Series to create a DataFrame')\n    else:\n        df = self.to_frame(name)\n        return df.reset_index(level=level, drop=drop)",
                            "def __repr__(self) -> str:\n    \"\"\"\n    Return a string representation for a particular Series.\n    \"\"\"\n    buf = StringIO('')\n    width, height = get_terminal_size()\n    max_rows = height if get_option('display.max_rows') == 0 else get_option('display.max_rows')\n    min_rows = height if get_option('display.max_rows') == 0 else get_option('display.min_rows')\n    show_dimensions = get_option('display.show_dimensions')\n    self.to_string(buf=buf, name=self.name, dtype=self.dtype, min_rows=min_rows, max_rows=max_rows, length=show_dimensions)\n    result = buf.getvalue()\n    return result",
                            "def to_string(self, buf=None, na_rep='NaN', float_format=None, header=True, index=True, length=False, dtype=False, name=False, max_rows=None, min_rows=None):\n    \"\"\"\n    Render a string representation of the Series.\n\n    Parameters\n    ----------\n    buf : StringIO-like, optional\n        Buffer to write to.\n    na_rep : str, optional\n        String representation of NaN to use, default 'NaN'.\n    float_format : one-parameter function, optional\n        Formatter function to apply to columns' elements if they are\n        floats, default None.\n    header : bool, default True\n        Add the Series header (index name).\n    index : bool, optional\n        Add index (row) labels, default True.\n    length : bool, default False\n        Add the Series length.\n    dtype : bool, default False\n        Add the Series dtype.\n    name : bool, default False\n        Add the Series name if not None.\n    max_rows : int, optional\n        Maximum number of rows to show before truncating. If None, show\n        all.\n    min_rows : int, optional\n        The number of rows to display in a truncated repr (when number\n        of rows is above `max_rows`).\n\n    Returns\n    -------\n    str or None\n        String representation of Series if ``buf=None``, otherwise None.\n    \"\"\"\n    formatter = fmt.SeriesFormatter(self, name=name, length=length, header=header, index=index, dtype=dtype, na_rep=na_rep, float_format=float_format, min_rows=min_rows, max_rows=max_rows)\n    result = formatter.to_string()\n    if not isinstance(result, str):\n        raise AssertionError(f'result must be of type str, type of result is {repr(type(result).__name__)}')\n    if buf is None:\n        return result\n    else:\n        try:\n            buf.write(result)\n        except AttributeError:\n            with open(buf, 'w') as f:\n                f.write(result)",
                            "@Appender('\\n        Examples\\n        --------\\n        >>> s = pd.Series([\"elk\", \"pig\", \"dog\", \"quetzal\"], name=\"animal\")\\n        >>> print(s.to_markdown())\\n        |    | animal   |\\n        |---:|:---------|\\n        |  0 | elk      |\\n        |  1 | pig      |\\n        |  2 | dog      |\\n        |  3 | quetzal  |\\n        ')\n@Substitution(klass='Series')\n@Appender(generic._shared_docs['to_markdown'])\ndef to_markdown(self, buf: Optional[IO[str]]=None, mode: Optional[str]=None, **kwargs) -> Optional[str]:\n    return self.to_frame().to_markdown(buf, mode, **kwargs)",
                            "def items(self) -> Iterable[Tuple[Label, Any]]:\n    \"\"\"\n    Lazily iterate over (index, value) tuples.\n\n    This method returns an iterable tuple (index, value). This is\n    convenient if you want to create a lazy iterator.\n\n    Returns\n    -------\n    iterable\n        Iterable of tuples containing the (index, value) pairs from a\n        Series.\n\n    See Also\n    --------\n    DataFrame.items : Iterate over (column name, Series) pairs.\n    DataFrame.iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n\n    Examples\n    --------\n    >>> s = pd.Series(['A', 'B', 'C'])\n    >>> for index, value in s.items():\n    ...     print(f\"Index : {index}, Value : {value}\")\n    Index : 0, Value : A\n    Index : 1, Value : B\n    Index : 2, Value : C\n    \"\"\"\n    return zip(iter(self.index), iter(self))",
                            "@Appender(items.__doc__)\ndef iteritems(self) -> Iterable[Tuple[Label, Any]]:\n    return self.items()",
                            "def keys(self) -> Index:\n    \"\"\"\n    Return alias for index.\n\n    Returns\n    -------\n    Index\n        Index of the Series.\n    \"\"\"\n    return self.index",
                            "def to_dict(self, into=dict):\n    \"\"\"\n    Convert Series to {label -> value} dict or dict-like object.\n\n    Parameters\n    ----------\n    into : class, default dict\n        The collections.abc.Mapping subclass to use as the return\n        object. Can be the actual class or an empty\n        instance of the mapping type you want.  If you want a\n        collections.defaultdict, you must pass it initialized.\n\n        .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    collections.abc.Mapping\n        Key-value representation of Series.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s.to_dict()\n    {0: 1, 1: 2, 2: 3, 3: 4}\n    >>> from collections import OrderedDict, defaultdict\n    >>> s.to_dict(OrderedDict)\n    OrderedDict([(0, 1), (1, 2), (2, 3), (3, 4)])\n    >>> dd = defaultdict(list)\n    >>> s.to_dict(dd)\n    defaultdict(<class 'list'>, {0: 1, 1: 2, 2: 3, 3: 4})\n    \"\"\"\n    into_c = com.standardize_mapping(into)\n    return into_c(self.items())",
                            "def to_frame(self, name=None) -> 'DataFrame':\n    \"\"\"\n    Convert Series to DataFrame.\n\n    Parameters\n    ----------\n    name : object, default None\n        The passed name should substitute for the series name (if it has\n        one).\n\n    Returns\n    -------\n    DataFrame\n        DataFrame representation of Series.\n\n    Examples\n    --------\n    >>> s = pd.Series([\"a\", \"b\", \"c\"],\n    ...               name=\"vals\")\n    >>> s.to_frame()\n      vals\n    0    a\n    1    b\n    2    c\n    \"\"\"\n    if name is None:\n        df = self._constructor_expanddim(self)\n    else:\n        df = self._constructor_expanddim({name: self})\n    return df",
                            "def _set_name(self, name, inplace=False) -> 'Series':\n    \"\"\"\n    Set the Series name.\n\n    Parameters\n    ----------\n    name : str\n    inplace : bool\n        Whether to modify `self` directly or return a copy.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    ser = self if inplace else self.copy()\n    ser.name = name\n    return ser",
                            "@Appender('\\nExamples\\n--------\\n>>> ser = pd.Series([390., 350., 30., 20.],\\n...                 index=[\\'Falcon\\', \\'Falcon\\', \\'Parrot\\', \\'Parrot\\'], name=\"Max Speed\")\\n>>> ser\\nFalcon    390.0\\nFalcon    350.0\\nParrot     30.0\\nParrot     20.0\\nName: Max Speed, dtype: float64\\n>>> ser.groupby([\"a\", \"b\", \"a\", \"b\"]).mean()\\na    210.0\\nb    185.0\\nName: Max Speed, dtype: float64\\n>>> ser.groupby(level=0).mean()\\nFalcon    370.0\\nParrot     25.0\\nName: Max Speed, dtype: float64\\n>>> ser.groupby(ser > 100).mean()\\nMax Speed\\nFalse     25.0\\nTrue     370.0\\nName: Max Speed, dtype: float64\\n\\n**Grouping by Indexes**\\n\\nWe can groupby different levels of a hierarchical index\\nusing the `level` parameter:\\n\\n>>> arrays = [[\\'Falcon\\', \\'Falcon\\', \\'Parrot\\', \\'Parrot\\'],\\n...           [\\'Captive\\', \\'Wild\\', \\'Captive\\', \\'Wild\\']]\\n>>> index = pd.MultiIndex.from_arrays(arrays, names=(\\'Animal\\', \\'Type\\'))\\n>>> ser = pd.Series([390., 350., 30., 20.], index=index, name=\"Max Speed\")\\n>>> ser\\nAnimal  Type\\nFalcon  Captive    390.0\\n        Wild       350.0\\nParrot  Captive     30.0\\n        Wild        20.0\\nName: Max Speed, dtype: float64\\n>>> ser.groupby(level=0).mean()\\nAnimal\\nFalcon    370.0\\nParrot     25.0\\nName: Max Speed, dtype: float64\\n>>> ser.groupby(level=\"Type\").mean()\\nType\\nCaptive    210.0\\nWild       185.0\\nName: Max Speed, dtype: float64\\n')\n@Appender(generic._shared_docs['groupby'] % _shared_doc_kwargs)\ndef groupby(self, by=None, axis=0, level=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False) -> 'SeriesGroupBy':\n    from pandas.core.groupby.generic import SeriesGroupBy\n    if level is None and by is None:\n        raise TypeError(\"You have to supply one of 'by' and 'level'\")\n    axis = self._get_axis_number(axis)\n    return SeriesGroupBy(obj=self, keys=by, axis=axis, level=level, as_index=as_index, sort=sort, group_keys=group_keys, squeeze=squeeze, observed=observed)",
                            "def count(self, level=None):\n    \"\"\"\n    Return number of non-NA/null observations in the Series.\n\n    Parameters\n    ----------\n    level : int or level name, default None\n        If the axis is a MultiIndex (hierarchical), count along a\n        particular level, collapsing into a smaller Series.\n\n    Returns\n    -------\n    int or Series (if level specified)\n        Number of non-null values in the Series.\n\n    Examples\n    --------\n    >>> s = pd.Series([0.0, 1.0, np.nan])\n    >>> s.count()\n    2\n    \"\"\"\n    if level is None:\n        return notna(self.array).sum()\n    if isinstance(level, str):\n        level = self.index._get_level_number(level)\n    lev = self.index.levels[level]\n    level_codes = np.array(self.index.codes[level], subok=False, copy=True)\n    mask = level_codes == -1\n    if mask.any():\n        level_codes[mask] = cnt = len(lev)\n        lev = lev.insert(cnt, lev._na_value)\n    obs = level_codes[notna(self.values)]\n    out = np.bincount(obs, minlength=len(lev) or None)\n    return self._constructor(out, index=lev, dtype='int64').__finalize__(self)",
                            "def mode(self, dropna=True) -> 'Series':\n    \"\"\"\n    Return the mode(s) of the dataset.\n\n    Always returns Series even if only one value is returned.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't consider counts of NaN/NaT.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series\n        Modes of the Series in sorted order.\n    \"\"\"\n    return algorithms.mode(self, dropna=dropna)",
                            "def unique(self):\n    \"\"\"\n    Return unique values of Series object.\n\n    Uniques are returned in order of appearance. Hash table-based unique,\n    therefore does NOT sort.\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n        The unique values returned as a NumPy array. See Notes.\n\n    See Also\n    --------\n    unique : Top-level unique method for any 1-d array-like object.\n    Index.unique : Return Index with unique values from an Index object.\n\n    Notes\n    -----\n    Returns the unique values as a NumPy array. In case of an\n    extension-array backed Series, a new\n    :class:`~api.extensions.ExtensionArray` of that type with just\n    the unique values is returned. This includes\n\n        * Categorical\n        * Period\n        * Datetime with Timezone\n        * Interval\n        * Sparse\n        * IntegerNA\n\n    See Examples section.\n\n    Examples\n    --------\n    >>> pd.Series([2, 1, 3, 3], name='A').unique()\n    array([2, 1, 3])\n\n    >>> pd.Series([pd.Timestamp('2016-01-01') for _ in range(3)]).unique()\n    array(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\n    >>> pd.Series([pd.Timestamp('2016-01-01', tz='US/Eastern')\n    ...            for _ in range(3)]).unique()\n    <DatetimeArray>\n    ['2016-01-01 00:00:00-05:00']\n    Length: 1, dtype: datetime64[ns, US/Eastern]\n\n    An unordered Categorical will return categories in the order of\n    appearance.\n\n    >>> pd.Series(pd.Categorical(list('baabc'))).unique()\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    An ordered Categorical preserves the category ordering.\n\n    >>> pd.Series(pd.Categorical(list('baabc'), categories=list('abc'),\n    ...                          ordered=True)).unique()\n    [b, a, c]\n    Categories (3, object): [a < b < c]\n    \"\"\"\n    result = super().unique()\n    return result",
                            "def drop_duplicates(self, keep='first', inplace=False) -> 'Series':\n    \"\"\"\n    Return Series with duplicate values removed.\n\n    Parameters\n    ----------\n    keep : {'first', 'last', ``False``}, default 'first'\n        Method to handle dropping duplicates:\n\n        - 'first' : Drop duplicates except for the first occurrence.\n        - 'last' : Drop duplicates except for the last occurrence.\n        - ``False`` : Drop all duplicates.\n\n    inplace : bool, default ``False``\n        If ``True``, performs operation inplace and returns None.\n\n    Returns\n    -------\n    Series\n        Series with duplicates dropped.\n\n    See Also\n    --------\n    Index.drop_duplicates : Equivalent method on Index.\n    DataFrame.drop_duplicates : Equivalent method on DataFrame.\n    Series.duplicated : Related method on Series, indicating duplicate\n        Series values.\n\n    Examples\n    --------\n    Generate a Series with duplicated entries.\n\n    >>> s = pd.Series(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo'],\n    ...               name='animal')\n    >>> s\n    0      lama\n    1       cow\n    2      lama\n    3    beetle\n    4      lama\n    5     hippo\n    Name: animal, dtype: object\n\n    With the 'keep' parameter, the selection behaviour of duplicated values\n    can be changed. The value 'first' keeps the first occurrence for each\n    set of duplicated entries. The default value of keep is 'first'.\n\n    >>> s.drop_duplicates()\n    0      lama\n    1       cow\n    3    beetle\n    5     hippo\n    Name: animal, dtype: object\n\n    The value 'last' for parameter 'keep' keeps the last occurrence for\n    each set of duplicated entries.\n\n    >>> s.drop_duplicates(keep='last')\n    1       cow\n    3    beetle\n    4      lama\n    5     hippo\n    Name: animal, dtype: object\n\n    The value ``False`` for parameter 'keep' discards all sets of\n    duplicated entries. Setting the value of 'inplace' to ``True`` performs\n    the operation inplace and returns ``None``.\n\n    >>> s.drop_duplicates(keep=False, inplace=True)\n    >>> s\n    1       cow\n    3    beetle\n    5     hippo\n    Name: animal, dtype: object\n    \"\"\"\n    return super().drop_duplicates(keep=keep, inplace=inplace)",
                            "def duplicated(self, keep='first') -> 'Series':\n    \"\"\"\n    Indicate duplicate Series values.\n\n    Duplicated values are indicated as ``True`` values in the resulting\n    Series. Either all duplicates, all except the first or all except the\n    last occurrence of duplicates can be indicated.\n\n    Parameters\n    ----------\n    keep : {'first', 'last', False}, default 'first'\n        Method to handle dropping duplicates:\n\n        - 'first' : Mark duplicates as ``True`` except for the first\n          occurrence.\n        - 'last' : Mark duplicates as ``True`` except for the last\n          occurrence.\n        - ``False`` : Mark all duplicates as ``True``.\n\n    Returns\n    -------\n    Series\n        Series indicating whether each value has occurred in the\n        preceding values.\n\n    See Also\n    --------\n    Index.duplicated : Equivalent method on pandas.Index.\n    DataFrame.duplicated : Equivalent method on pandas.DataFrame.\n    Series.drop_duplicates : Remove duplicate values from Series.\n\n    Examples\n    --------\n    By default, for each set of duplicated values, the first occurrence is\n    set on False and all others on True:\n\n    >>> animals = pd.Series(['lama', 'cow', 'lama', 'beetle', 'lama'])\n    >>> animals.duplicated()\n    0    False\n    1    False\n    2     True\n    3    False\n    4     True\n    dtype: bool\n\n    which is equivalent to\n\n    >>> animals.duplicated(keep='first')\n    0    False\n    1    False\n    2     True\n    3    False\n    4     True\n    dtype: bool\n\n    By using 'last', the last occurrence of each set of duplicated values\n    is set on False and all others on True:\n\n    >>> animals.duplicated(keep='last')\n    0     True\n    1    False\n    2     True\n    3    False\n    4    False\n    dtype: bool\n\n    By setting keep on ``False``, all duplicates are True:\n\n    >>> animals.duplicated(keep=False)\n    0     True\n    1    False\n    2     True\n    3    False\n    4     True\n    dtype: bool\n    \"\"\"\n    return super().duplicated(keep=keep)",
                            "def idxmin(self, axis=0, skipna=True, *args, **kwargs):\n    \"\"\"\n    Return the row label of the minimum value.\n\n    If multiple values equal the minimum, the first row label with that\n    value is returned.\n\n    Parameters\n    ----------\n    axis : int, default 0\n        For compatibility with DataFrame.idxmin. Redundant for application\n        on Series.\n    skipna : bool, default True\n        Exclude NA/null values. If the entire Series is NA, the result\n        will be NA.\n    *args, **kwargs\n        Additional arguments and keywords have no effect but might be\n        accepted for compatibility with NumPy.\n\n    Returns\n    -------\n    Index\n        Label of the minimum value.\n\n    Raises\n    ------\n    ValueError\n        If the Series is empty.\n\n    See Also\n    --------\n    numpy.argmin : Return indices of the minimum values\n        along the given axis.\n    DataFrame.idxmin : Return index of first occurrence of minimum\n        over requested axis.\n    Series.idxmax : Return index *label* of the first occurrence\n        of maximum of values.\n\n    Notes\n    -----\n    This method is the Series version of ``ndarray.argmin``. This method\n    returns the label of the minimum, while ``ndarray.argmin`` returns\n    the position. To get the position, use ``series.values.argmin()``.\n\n    Examples\n    --------\n    >>> s = pd.Series(data=[1, None, 4, 1],\n    ...               index=['A', 'B', 'C', 'D'])\n    >>> s\n    A    1.0\n    B    NaN\n    C    4.0\n    D    1.0\n    dtype: float64\n\n    >>> s.idxmin()\n    'A'\n\n    If `skipna` is False and there is an NA value in the data,\n    the function returns ``nan``.\n\n    >>> s.idxmin(skipna=False)\n    nan\n    \"\"\"\n    skipna = nv.validate_argmin_with_skipna(skipna, args, kwargs)\n    i = nanops.nanargmin(com.values_from_object(self), skipna=skipna)\n    if i == -1:\n        return np.nan\n    return self.index[i]",
                            "def idxmax(self, axis=0, skipna=True, *args, **kwargs):\n    \"\"\"\n    Return the row label of the maximum value.\n\n    If multiple values equal the maximum, the first row label with that\n    value is returned.\n\n    Parameters\n    ----------\n    axis : int, default 0\n        For compatibility with DataFrame.idxmax. Redundant for application\n        on Series.\n    skipna : bool, default True\n        Exclude NA/null values. If the entire Series is NA, the result\n        will be NA.\n    *args, **kwargs\n        Additional arguments and keywords have no effect but might be\n        accepted for compatibility with NumPy.\n\n    Returns\n    -------\n    Index\n        Label of the maximum value.\n\n    Raises\n    ------\n    ValueError\n        If the Series is empty.\n\n    See Also\n    --------\n    numpy.argmax : Return indices of the maximum values\n        along the given axis.\n    DataFrame.idxmax : Return index of first occurrence of maximum\n        over requested axis.\n    Series.idxmin : Return index *label* of the first occurrence\n        of minimum of values.\n\n    Notes\n    -----\n    This method is the Series version of ``ndarray.argmax``. This method\n    returns the label of the maximum, while ``ndarray.argmax`` returns\n    the position. To get the position, use ``series.values.argmax()``.\n\n    Examples\n    --------\n    >>> s = pd.Series(data=[1, None, 4, 3, 4],\n    ...               index=['A', 'B', 'C', 'D', 'E'])\n    >>> s\n    A    1.0\n    B    NaN\n    C    4.0\n    D    3.0\n    E    4.0\n    dtype: float64\n\n    >>> s.idxmax()\n    'C'\n\n    If `skipna` is False and there is an NA value in the data,\n    the function returns ``nan``.\n\n    >>> s.idxmax(skipna=False)\n    nan\n    \"\"\"\n    skipna = nv.validate_argmax_with_skipna(skipna, args, kwargs)\n    i = nanops.nanargmax(com.values_from_object(self), skipna=skipna)\n    if i == -1:\n        return np.nan\n    return self.index[i]",
                            "def round(self, decimals=0, *args, **kwargs) -> 'Series':\n    \"\"\"\n    Round each value in a Series to the given number of decimals.\n\n    Parameters\n    ----------\n    decimals : int, default 0\n        Number of decimal places to round to. If decimals is negative,\n        it specifies the number of positions to the left of the decimal point.\n\n    Returns\n    -------\n    Series\n        Rounded values of the Series.\n\n    See Also\n    --------\n    numpy.around : Round values of an np.array.\n    DataFrame.round : Round values of a DataFrame.\n\n    Examples\n    --------\n    >>> s = pd.Series([0.1, 1.3, 2.7])\n    >>> s.round()\n    0    0.0\n    1    1.0\n    2    3.0\n    dtype: float64\n    \"\"\"\n    nv.validate_round(args, kwargs)\n    result = com.values_from_object(self).round(decimals)\n    result = self._constructor(result, index=self.index).__finalize__(self)\n    return result",
                            "def quantile(self, q=0.5, interpolation='linear'):\n    \"\"\"\n    Return value at the given quantile.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        The quantile(s) to compute, which can lie in range: 0 <= q <= 1.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        This optional parameter specifies the interpolation method to use,\n        when the desired quantile lies between two data points `i` and `j`:\n\n            * linear: `i + (j - i) * fraction`, where `fraction` is the\n              fractional part of the index surrounded by `i` and `j`.\n            * lower: `i`.\n            * higher: `j`.\n            * nearest: `i` or `j` whichever is nearest.\n            * midpoint: (`i` + `j`) / 2.\n\n    Returns\n    -------\n    float or Series\n        If ``q`` is an array, a Series will be returned where the\n        index is ``q`` and the values are the quantiles, otherwise\n        a float will be returned.\n\n    See Also\n    --------\n    core.window.Rolling.quantile\n    numpy.percentile\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s.quantile(.5)\n    2.5\n    >>> s.quantile([.25, .5, .75])\n    0.25    1.75\n    0.50    2.50\n    0.75    3.25\n    dtype: float64\n    \"\"\"\n    validate_percentile(q)\n    df = self.to_frame()\n    result = df.quantile(q=q, interpolation=interpolation, numeric_only=False)\n    if result.ndim == 2:\n        result = result.iloc[:, 0]\n    if is_list_like(q):\n        result.name = self.name\n        return self._constructor(result, index=Float64Index(q), name=self.name)\n    else:\n        return result.iloc[0]",
                            "def corr(self, other, method='pearson', min_periods=None) -> float:\n    \"\"\"\n    Compute correlation with `other` Series, excluding missing values.\n\n    Parameters\n    ----------\n    other : Series\n        Series with which to compute the correlation.\n    method : {'pearson', 'kendall', 'spearman'} or callable\n        Method used to compute correlation:\n\n        - pearson : Standard correlation coefficient\n        - kendall : Kendall Tau correlation coefficient\n        - spearman : Spearman rank correlation\n        - callable: Callable with input two 1d ndarrays and returning a float.\n\n        .. versionadded:: 0.24.0\n            Note that the returned matrix from corr will have 1 along the\n            diagonals and will be symmetric regardless of the callable's\n            behavior.\n    min_periods : int, optional\n        Minimum number of observations needed to have a valid result.\n\n    Returns\n    -------\n    float\n        Correlation with other.\n\n    Examples\n    --------\n    >>> def histogram_intersection(a, b):\n    ...     v = np.minimum(a, b).sum().round(decimals=1)\n    ...     return v\n    >>> s1 = pd.Series([.2, .0, .6, .2])\n    >>> s2 = pd.Series([.3, .6, .0, .1])\n    >>> s1.corr(s2, method=histogram_intersection)\n    0.3\n    \"\"\"\n    this, other = self.align(other, join='inner', copy=False)\n    if len(this) == 0:\n        return np.nan\n    if method in ['pearson', 'spearman', 'kendall'] or callable(method):\n        return nanops.nancorr(this.values, other.values, method=method, min_periods=min_periods)\n    raise ValueError(f\"method must be either 'pearson', 'spearman', 'kendall', or a callable, '{method}' was supplied\")",
                            "def cov(self, other, min_periods=None) -> float:\n    \"\"\"\n    Compute covariance with Series, excluding missing values.\n\n    Parameters\n    ----------\n    other : Series\n        Series with which to compute the covariance.\n    min_periods : int, optional\n        Minimum number of observations needed to have a valid result.\n\n    Returns\n    -------\n    float\n        Covariance between Series and other normalized by N-1\n        (unbiased estimator).\n\n    Examples\n    --------\n    >>> s1 = pd.Series([0.90010907, 0.13484424, 0.62036035])\n    >>> s2 = pd.Series([0.12528585, 0.26962463, 0.51111198])\n    >>> s1.cov(s2)\n    -0.01685762652715874\n    \"\"\"\n    this, other = self.align(other, join='inner', copy=False)\n    if len(this) == 0:\n        return np.nan\n    return nanops.nancov(this.values, other.values, min_periods=min_periods)",
                            "def diff(self, periods=1) -> 'Series':\n    \"\"\"\n    First discrete difference of element.\n\n    Calculates the difference of a Series element compared with another\n    element in the Series (default is element in previous row).\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Periods to shift for calculating difference, accepts negative\n        values.\n\n    Returns\n    -------\n    Series\n        First differences of the Series.\n\n    See Also\n    --------\n    Series.pct_change: Percent change over given number of periods.\n    Series.shift: Shift index by desired number of periods with an\n        optional time freq.\n    DataFrame.diff: First discrete difference of object.\n\n    Notes\n    -----\n    For boolean dtypes, this uses :meth:`operator.xor` rather than\n    :meth:`operator.sub`.\n\n    Examples\n    --------\n    Difference with previous row\n\n    >>> s = pd.Series([1, 1, 2, 3, 5, 8])\n    >>> s.diff()\n    0    NaN\n    1    0.0\n    2    1.0\n    3    1.0\n    4    2.0\n    5    3.0\n    dtype: float64\n\n    Difference with 3rd previous row\n\n    >>> s.diff(periods=3)\n    0    NaN\n    1    NaN\n    2    NaN\n    3    2.0\n    4    4.0\n    5    6.0\n    dtype: float64\n\n    Difference with following row\n\n    >>> s.diff(periods=-1)\n    0    0.0\n    1   -1.0\n    2   -1.0\n    3   -2.0\n    4   -3.0\n    5    NaN\n    dtype: float64\n    \"\"\"\n    result = algorithms.diff(self.array, periods)\n    return self._constructor(result, index=self.index).__finalize__(self)",
                            "def autocorr(self, lag=1) -> float:\n    \"\"\"\n    Compute the lag-N autocorrelation.\n\n    This method computes the Pearson correlation between\n    the Series and its shifted self.\n\n    Parameters\n    ----------\n    lag : int, default 1\n        Number of lags to apply before performing autocorrelation.\n\n    Returns\n    -------\n    float\n        The Pearson correlation between self and self.shift(lag).\n\n    See Also\n    --------\n    Series.corr : Compute the correlation between two Series.\n    Series.shift : Shift index by desired number of periods.\n    DataFrame.corr : Compute pairwise correlation of columns.\n    DataFrame.corrwith : Compute pairwise correlation between rows or\n        columns of two DataFrame objects.\n\n    Notes\n    -----\n    If the Pearson correlation is not well defined return 'NaN'.\n\n    Examples\n    --------\n    >>> s = pd.Series([0.25, 0.5, 0.2, -0.05])\n    >>> s.autocorr()  # doctest: +ELLIPSIS\n    0.10355...\n    >>> s.autocorr(lag=2)  # doctest: +ELLIPSIS\n    -0.99999...\n\n    If the Pearson correlation is not well defined, then 'NaN' is returned.\n\n    >>> s = pd.Series([1, 0, 0, 0])\n    >>> s.autocorr()\n    nan\n    \"\"\"\n    return self.corr(self.shift(lag))",
                            "def dot(self, other):\n    \"\"\"\n    Compute the dot product between the Series and the columns of other.\n\n    This method computes the dot product between the Series and another\n    one, or the Series and each columns of a DataFrame, or the Series and\n    each columns of an array.\n\n    It can also be called using `self @ other` in Python >= 3.5.\n\n    Parameters\n    ----------\n    other : Series, DataFrame or array-like\n        The other object to compute the dot product with its columns.\n\n    Returns\n    -------\n    scalar, Series or numpy.ndarray\n        Return the dot product of the Series and other if other is a\n        Series, the Series of the dot product of Series and each rows of\n        other if other is a DataFrame or a numpy.ndarray between the Series\n        and each columns of the numpy array.\n\n    See Also\n    --------\n    DataFrame.dot: Compute the matrix product with the DataFrame.\n    Series.mul: Multiplication of series and other, element-wise.\n\n    Notes\n    -----\n    The Series and other has to share the same index if other is a Series\n    or a DataFrame.\n\n    Examples\n    --------\n    >>> s = pd.Series([0, 1, 2, 3])\n    >>> other = pd.Series([-1, 2, -3, 4])\n    >>> s.dot(other)\n    8\n    >>> s @ other\n    8\n    >>> df = pd.DataFrame([[0, 1], [-2, 3], [4, -5], [6, 7]])\n    >>> s.dot(df)\n    0    24\n    1    14\n    dtype: int64\n    >>> arr = np.array([[0, 1], [-2, 3], [4, -5], [6, 7]])\n    >>> s.dot(arr)\n    array([24, 14])\n    \"\"\"\n    if isinstance(other, (Series, ABCDataFrame)):\n        common = self.index.union(other.index)\n        if len(common) > len(self.index) or len(common) > len(other.index):\n            raise ValueError('matrices are not aligned')\n        left = self.reindex(index=common, copy=False)\n        right = other.reindex(index=common, copy=False)\n        lvals = left.values\n        rvals = right.values\n    else:\n        lvals = self.values\n        rvals = np.asarray(other)\n        if lvals.shape[0] != rvals.shape[0]:\n            raise Exception(f'Dot product shape mismatch, {lvals.shape} vs {rvals.shape}')\n    if isinstance(other, ABCDataFrame):\n        return self._constructor(np.dot(lvals, rvals), index=other.columns).__finalize__(self)\n    elif isinstance(other, Series):\n        return np.dot(lvals, rvals)\n    elif isinstance(rvals, np.ndarray):\n        return np.dot(lvals, rvals)\n    else:\n        raise TypeError(f'unsupported type: {type(other)}')",
                            "def __matmul__(self, other):\n    \"\"\"\n    Matrix multiplication using binary `@` operator in Python>=3.5.\n    \"\"\"\n    return self.dot(other)",
                            "def __rmatmul__(self, other):\n    \"\"\"\n    Matrix multiplication using binary `@` operator in Python>=3.5.\n    \"\"\"\n    return self.dot(np.transpose(other))",
                            "@Substitution(klass='Series')\n@Appender(base._shared_docs['searchsorted'])\ndef searchsorted(self, value, side='left', sorter=None):\n    return algorithms.searchsorted(self._values, value, side=side, sorter=sorter)",
                            "def append(self, to_append, ignore_index=False, verify_integrity=False):\n    \"\"\"\n    Concatenate two or more Series.\n\n    Parameters\n    ----------\n    to_append : Series or list/tuple of Series\n        Series to append with self.\n    ignore_index : bool, default False\n        If True, do not use the index labels.\n    verify_integrity : bool, default False\n        If True, raise Exception on creating index with duplicates.\n\n    Returns\n    -------\n    Series\n        Concatenated Series.\n\n    See Also\n    --------\n    concat : General function to concatenate DataFrame or Series objects.\n\n    Notes\n    -----\n    Iteratively appending to a Series can be more computationally intensive\n    than a single concatenate. A better solution is to append values to a\n    list and then concatenate the list with the original Series all at\n    once.\n\n    Examples\n    --------\n    >>> s1 = pd.Series([1, 2, 3])\n    >>> s2 = pd.Series([4, 5, 6])\n    >>> s3 = pd.Series([4, 5, 6], index=[3, 4, 5])\n    >>> s1.append(s2)\n    0    1\n    1    2\n    2    3\n    0    4\n    1    5\n    2    6\n    dtype: int64\n\n    >>> s1.append(s3)\n    0    1\n    1    2\n    2    3\n    3    4\n    4    5\n    5    6\n    dtype: int64\n\n    With `ignore_index` set to True:\n\n    >>> s1.append(s2, ignore_index=True)\n    0    1\n    1    2\n    2    3\n    3    4\n    4    5\n    5    6\n    dtype: int64\n\n    With `verify_integrity` set to True:\n\n    >>> s1.append(s2, verify_integrity=True)\n    Traceback (most recent call last):\n    ...\n    ValueError: Indexes have overlapping values: [0, 1, 2]\n    \"\"\"\n    from pandas.core.reshape.concat import concat\n    if isinstance(to_append, (list, tuple)):\n        to_concat = [self]\n        to_concat.extend(to_append)\n    else:\n        to_concat = [self, to_append]\n    return concat(to_concat, ignore_index=ignore_index, verify_integrity=verify_integrity)",
                            "def _binop(self, other, func, level=None, fill_value=None):\n    \"\"\"\n    Perform generic binary operation with optional fill value.\n\n    Parameters\n    ----------\n    other : Series\n    func : binary operator\n    fill_value : float or object\n        Value to substitute for NA/null values. If both Series are NA in a\n        location, the result will be NA regardless of the passed fill value.\n    level : int or level name, default None\n        Broadcast across a level, matching Index values on the\n        passed MultiIndex level.\n\n    Returns\n    -------\n    Series\n    \"\"\"\n    if not isinstance(other, Series):\n        raise AssertionError('Other operand must be Series')\n    new_index = self.index\n    this = self\n    if not self.index.equals(other.index):\n        this, other = self.align(other, level=level, join='outer', copy=False)\n        new_index = this.index\n    this_vals, other_vals = ops.fill_binop(this.values, other.values, fill_value)\n    with np.errstate(all='ignore'):\n        result = func(this_vals, other_vals)\n    name = ops.get_op_result_name(self, other)\n    ret = ops._construct_result(self, result, new_index, name)\n    return ret",
                            "def combine(self, other, func, fill_value=None) -> 'Series':\n    \"\"\"\n    Combine the Series with a Series or scalar according to `func`.\n\n    Combine the Series and `other` using `func` to perform elementwise\n    selection for combined Series.\n    `fill_value` is assumed when value is missing at some index\n    from one of the two objects being combined.\n\n    Parameters\n    ----------\n    other : Series or scalar\n        The value(s) to be combined with the `Series`.\n    func : function\n        Function that takes two scalars as inputs and returns an element.\n    fill_value : scalar, optional\n        The value to assume when an index is missing from\n        one Series or the other. The default specifies to use the\n        appropriate NaN value for the underlying dtype of the Series.\n\n    Returns\n    -------\n    Series\n        The result of combining the Series with the other object.\n\n    See Also\n    --------\n    Series.combine_first : Combine Series values, choosing the calling\n        Series' values first.\n\n    Examples\n    --------\n    Consider 2 Datasets ``s1`` and ``s2`` containing\n    highest clocked speeds of different birds.\n\n    >>> s1 = pd.Series({'falcon': 330.0, 'eagle': 160.0})\n    >>> s1\n    falcon    330.0\n    eagle     160.0\n    dtype: float64\n    >>> s2 = pd.Series({'falcon': 345.0, 'eagle': 200.0, 'duck': 30.0})\n    >>> s2\n    falcon    345.0\n    eagle     200.0\n    duck       30.0\n    dtype: float64\n\n    Now, to combine the two datasets and view the highest speeds\n    of the birds across the two datasets\n\n    >>> s1.combine(s2, max)\n    duck        NaN\n    eagle     200.0\n    falcon    345.0\n    dtype: float64\n\n    In the previous example, the resulting value for duck is missing,\n    because the maximum of a NaN and a float is a NaN.\n    So, in the example, we set ``fill_value=0``,\n    so the maximum value returned will be the value from some dataset.\n\n    >>> s1.combine(s2, max, fill_value=0)\n    duck       30.0\n    eagle     200.0\n    falcon    345.0\n    dtype: float64\n    \"\"\"\n    if fill_value is None:\n        fill_value = na_value_for_dtype(self.dtype, compat=False)\n    if isinstance(other, Series):\n        new_index = self.index.union(other.index)\n        new_name = ops.get_op_result_name(self, other)\n        new_values = []\n        for idx in new_index:\n            lv = self.get(idx, fill_value)\n            rv = other.get(idx, fill_value)\n            with np.errstate(all='ignore'):\n                new_values.append(func(lv, rv))\n    else:\n        new_index = self.index\n        with np.errstate(all='ignore'):\n            new_values = [func(lv, other) for lv in self._values]\n        new_name = self.name\n    if is_categorical_dtype(self.values):\n        pass\n    elif is_extension_array_dtype(self.values):\n        new_values = try_cast_to_ea(self._values, new_values)\n    return self._constructor(new_values, index=new_index, name=new_name)",
                            "def combine_first(self, other) -> 'Series':\n    \"\"\"\n    Combine Series values, choosing the calling Series's values first.\n\n    Parameters\n    ----------\n    other : Series\n        The value(s) to be combined with the `Series`.\n\n    Returns\n    -------\n    Series\n        The result of combining the Series with the other object.\n\n    See Also\n    --------\n    Series.combine : Perform elementwise operation on two Series\n        using a given function.\n\n    Notes\n    -----\n    Result index will be the union of the two indexes.\n\n    Examples\n    --------\n    >>> s1 = pd.Series([1, np.nan])\n    >>> s2 = pd.Series([3, 4])\n    >>> s1.combine_first(s2)\n    0    1.0\n    1    4.0\n    dtype: float64\n    \"\"\"\n    new_index = self.index.union(other.index)\n    this = self.reindex(new_index, copy=False)\n    other = other.reindex(new_index, copy=False)\n    if this.dtype.kind == 'M' and other.dtype.kind != 'M':\n        other = to_datetime(other)\n    return this.where(notna(this), other)",
                            "def update(self, other) -> None:\n    \"\"\"\n    Modify Series in place using non-NA values from passed\n    Series. Aligns on index.\n\n    Parameters\n    ----------\n    other : Series\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3])\n    >>> s.update(pd.Series([4, 5, 6]))\n    >>> s\n    0    4\n    1    5\n    2    6\n    dtype: int64\n\n    >>> s = pd.Series(['a', 'b', 'c'])\n    >>> s.update(pd.Series(['d', 'e'], index=[0, 2]))\n    >>> s\n    0    d\n    1    b\n    2    e\n    dtype: object\n\n    >>> s = pd.Series([1, 2, 3])\n    >>> s.update(pd.Series([4, 5, 6, 7, 8]))\n    >>> s\n    0    4\n    1    5\n    2    6\n    dtype: int64\n\n    If ``other`` contains NaNs the corresponding values are not updated\n    in the original Series.\n\n    >>> s = pd.Series([1, 2, 3])\n    >>> s.update(pd.Series([4, np.nan, 6]))\n    >>> s\n    0    4\n    1    2\n    2    6\n    dtype: int64\n    \"\"\"\n    other = other.reindex_like(self)\n    mask = notna(other)\n    self._data = self._data.putmask(mask=mask, new=other, inplace=True)\n    self._maybe_update_cacher()",
                            "def sort_values(self, axis=0, ascending=True, inplace: bool=False, kind: str='quicksort', na_position: str='last', ignore_index: bool=False):\n    \"\"\"\n    Sort by the values.\n\n    Sort a Series in ascending or descending order by some\n    criterion.\n\n    Parameters\n    ----------\n    axis : {0 or 'index'}, default 0\n        Axis to direct sorting. The value 'index' is accepted for\n        compatibility with DataFrame.sort_values.\n    ascending : bool, default True\n        If True, sort values in ascending order, otherwise descending.\n    inplace : bool, default False\n        If True, perform operation in-place.\n    kind : {'quicksort', 'mergesort' or 'heapsort'}, default 'quicksort'\n        Choice of sorting algorithm. See also :func:`numpy.sort` for more\n        information. 'mergesort' is the only stable  algorithm.\n    na_position : {'first' or 'last'}, default 'last'\n        Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at\n        the end.\n    ignore_index : bool, default False\n         If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n         .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    Series\n        Series ordered by values.\n\n    See Also\n    --------\n    Series.sort_index : Sort by the Series indices.\n    DataFrame.sort_values : Sort DataFrame by the values along either axis.\n    DataFrame.sort_index : Sort DataFrame by indices.\n\n    Examples\n    --------\n    >>> s = pd.Series([np.nan, 1, 3, 10, 5])\n    >>> s\n    0     NaN\n    1     1.0\n    2     3.0\n    3     10.0\n    4     5.0\n    dtype: float64\n\n    Sort values ascending order (default behaviour)\n\n    >>> s.sort_values(ascending=True)\n    1     1.0\n    2     3.0\n    4     5.0\n    3    10.0\n    0     NaN\n    dtype: float64\n\n    Sort values descending order\n\n    >>> s.sort_values(ascending=False)\n    3    10.0\n    4     5.0\n    2     3.0\n    1     1.0\n    0     NaN\n    dtype: float64\n\n    Sort values inplace\n\n    >>> s.sort_values(ascending=False, inplace=True)\n    >>> s\n    3    10.0\n    4     5.0\n    2     3.0\n    1     1.0\n    0     NaN\n    dtype: float64\n\n    Sort values putting NAs first\n\n    >>> s.sort_values(na_position='first')\n    0     NaN\n    1     1.0\n    2     3.0\n    4     5.0\n    3    10.0\n    dtype: float64\n\n    Sort a series of strings\n\n    >>> s = pd.Series(['z', 'b', 'd', 'a', 'c'])\n    >>> s\n    0    z\n    1    b\n    2    d\n    3    a\n    4    c\n    dtype: object\n\n    >>> s.sort_values()\n    3    a\n    1    b\n    4    c\n    2    d\n    0    z\n    dtype: object\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    self._get_axis_number(axis)\n    if inplace and self._is_cached:\n        raise ValueError('This Series is a view of some other array, to sort in-place you must create a copy')\n\n    def _try_kind_sort(arr):\n        try:\n            return arr.argsort(kind=kind)\n        except TypeError:\n            return arr.argsort(kind='quicksort')\n    arr = self._values\n    sorted_index = np.empty(len(self), dtype=np.int32)\n    bad = isna(arr)\n    good = ~bad\n    idx = ibase.default_index(len(self))\n    argsorted = _try_kind_sort(arr[good])\n    if is_list_like(ascending):\n        if len(ascending) != 1:\n            raise ValueError(f'Length of ascending ({len(ascending)}) must be 1 for Series')\n        ascending = ascending[0]\n    if not is_bool(ascending):\n        raise ValueError('ascending must be boolean')\n    if not ascending:\n        argsorted = argsorted[::-1]\n    if na_position == 'last':\n        n = good.sum()\n        sorted_index[:n] = idx[good][argsorted]\n        sorted_index[n:] = idx[bad]\n    elif na_position == 'first':\n        n = bad.sum()\n        sorted_index[n:] = idx[good][argsorted]\n        sorted_index[:n] = idx[bad]\n    else:\n        raise ValueError(f'invalid na_position: {na_position}')\n    result = self._constructor(arr[sorted_index], index=self.index[sorted_index])\n    if ignore_index:\n        result.index = ibase.default_index(len(sorted_index))\n    if inplace:\n        self._update_inplace(result)\n    else:\n        return result.__finalize__(self)",
                            "def sort_index(self, axis=0, level=None, ascending: bool=True, inplace: bool=False, kind: str='quicksort', na_position: str='last', sort_remaining: bool=True, ignore_index: bool=False):\n    \"\"\"\n    Sort Series by index labels.\n\n    Returns a new Series sorted by label if `inplace` argument is\n    ``False``, otherwise updates the original series and returns None.\n\n    Parameters\n    ----------\n    axis : int, default 0\n        Axis to direct sorting. This can only be 0 for Series.\n    level : int, optional\n        If not None, sort on values in specified index level(s).\n    ascending : bool or list of bools, default True\n        Sort ascending vs. descending. When the index is a MultiIndex the\n        sort direction can be controlled for each level individually.\n    inplace : bool, default False\n        If True, perform operation in-place.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n        Choice of sorting algorithm. See also :func:`numpy.sort` for more\n        information.  'mergesort' is the only stable algorithm. For\n        DataFrames, this option is only applied when sorting on a single\n        column or label.\n    na_position : {'first', 'last'}, default 'last'\n        If 'first' puts NaNs at the beginning, 'last' puts NaNs at the end.\n        Not implemented for MultiIndex.\n    sort_remaining : bool, default True\n        If True and sorting by level and index is multilevel, sort by other\n        levels too (in order) after sorting by specified level.\n    ignore_index : bool, default False\n        If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n        .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    Series\n        The original Series sorted by the labels.\n\n    See Also\n    --------\n    DataFrame.sort_index: Sort DataFrame by the index.\n    DataFrame.sort_values: Sort DataFrame by the value.\n    Series.sort_values : Sort Series by the value.\n\n    Examples\n    --------\n    >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, 4])\n    >>> s.sort_index()\n    1    c\n    2    b\n    3    a\n    4    d\n    dtype: object\n\n    Sort Descending\n\n    >>> s.sort_index(ascending=False)\n    4    d\n    3    a\n    2    b\n    1    c\n    dtype: object\n\n    Sort Inplace\n\n    >>> s.sort_index(inplace=True)\n    >>> s\n    1    c\n    2    b\n    3    a\n    4    d\n    dtype: object\n\n    By default NaNs are put at the end, but use `na_position` to place\n    them at the beginning\n\n    >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, np.nan])\n    >>> s.sort_index(na_position='first')\n    NaN     d\n     1.0    c\n     2.0    b\n     3.0    a\n    dtype: object\n\n    Specify index level to sort\n\n    >>> arrays = [np.array(['qux', 'qux', 'foo', 'foo',\n    ...                     'baz', 'baz', 'bar', 'bar']),\n    ...           np.array(['two', 'one', 'two', 'one',\n    ...                     'two', 'one', 'two', 'one'])]\n    >>> s = pd.Series([1, 2, 3, 4, 5, 6, 7, 8], index=arrays)\n    >>> s.sort_index(level=1)\n    bar  one    8\n    baz  one    6\n    foo  one    4\n    qux  one    2\n    bar  two    7\n    baz  two    5\n    foo  two    3\n    qux  two    1\n    dtype: int64\n\n    Does not sort by remaining levels when sorting by levels\n\n    >>> s.sort_index(level=1, sort_remaining=False)\n    qux  one    2\n    foo  one    4\n    baz  one    6\n    bar  one    8\n    qux  two    1\n    foo  two    3\n    baz  two    5\n    bar  two    7\n    dtype: int64\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    self._get_axis_number(axis)\n    index = self.index\n    if level is not None:\n        new_index, indexer = index.sortlevel(level, ascending=ascending, sort_remaining=sort_remaining)\n    elif isinstance(index, MultiIndex):\n        from pandas.core.sorting import lexsort_indexer\n        labels = index._sort_levels_monotonic()\n        indexer = lexsort_indexer(labels._get_codes_for_sorting(), orders=ascending, na_position=na_position)\n    else:\n        from pandas.core.sorting import nargsort\n        if ascending and index.is_monotonic_increasing or (not ascending and index.is_monotonic_decreasing):\n            if inplace:\n                return\n            else:\n                return self.copy()\n        indexer = nargsort(index, kind=kind, ascending=ascending, na_position=na_position)\n    indexer = ensure_platform_int(indexer)\n    new_index = index.take(indexer)\n    new_index = new_index._sort_levels_monotonic()\n    new_values = self._values.take(indexer)\n    result = self._constructor(new_values, index=new_index)\n    if ignore_index:\n        result.index = ibase.default_index(len(result))\n    if inplace:\n        self._update_inplace(result)\n    else:\n        return result.__finalize__(self)",
                            "def argsort(self, axis=0, kind='quicksort', order=None) -> 'Series':\n    \"\"\"\n    Override ndarray.argsort. Argsorts the value, omitting NA/null values,\n    and places the result in the same locations as the non-NA values.\n\n    Parameters\n    ----------\n    axis : {0 or \"index\"}\n        Has no effect but is accepted for compatibility with numpy.\n    kind : {'mergesort', 'quicksort', 'heapsort'}, default 'quicksort'\n        Choice of sorting algorithm. See np.sort for more\n        information. 'mergesort' is the only stable algorithm.\n    order : None\n        Has no effect but is accepted for compatibility with numpy.\n\n    Returns\n    -------\n    Series\n        Positions of values within the sort order with -1 indicating\n        nan values.\n\n    See Also\n    --------\n    numpy.ndarray.argsort\n    \"\"\"\n    values = self._values\n    mask = isna(values)\n    if mask.any():\n        result = Series(-1, index=self.index, name=self.name, dtype='int64')\n        notmask = ~mask\n        result[notmask] = np.argsort(values[notmask], kind=kind)\n        return self._constructor(result, index=self.index).__finalize__(self)\n    else:\n        return self._constructor(np.argsort(values, kind=kind), index=self.index, dtype='int64').__finalize__(self)",
                            "def nlargest(self, n=5, keep='first') -> 'Series':\n    \"\"\"\n    Return the largest `n` elements.\n\n    Parameters\n    ----------\n    n : int, default 5\n        Return this many descending sorted values.\n    keep : {'first', 'last', 'all'}, default 'first'\n        When there are duplicate values that cannot all fit in a\n        Series of `n` elements:\n\n        - ``first`` : return the first `n` occurrences in order\n            of appearance.\n        - ``last`` : return the last `n` occurrences in reverse\n            order of appearance.\n        - ``all`` : keep all occurrences. This can result in a Series of\n            size larger than `n`.\n\n    Returns\n    -------\n    Series\n        The `n` largest values in the Series, sorted in decreasing order.\n\n    See Also\n    --------\n    Series.nsmallest: Get the `n` smallest elements.\n    Series.sort_values: Sort Series by values.\n    Series.head: Return the first `n` rows.\n\n    Notes\n    -----\n    Faster than ``.sort_values(ascending=False).head(n)`` for small `n`\n    relative to the size of the ``Series`` object.\n\n    Examples\n    --------\n    >>> countries_population = {\"Italy\": 59000000, \"France\": 65000000,\n    ...                         \"Malta\": 434000, \"Maldives\": 434000,\n    ...                         \"Brunei\": 434000, \"Iceland\": 337000,\n    ...                         \"Nauru\": 11300, \"Tuvalu\": 11300,\n    ...                         \"Anguilla\": 11300, \"Monserat\": 5200}\n    >>> s = pd.Series(countries_population)\n    >>> s\n    Italy       59000000\n    France      65000000\n    Malta         434000\n    Maldives      434000\n    Brunei        434000\n    Iceland       337000\n    Nauru          11300\n    Tuvalu         11300\n    Anguilla       11300\n    Monserat        5200\n    dtype: int64\n\n    The `n` largest elements where ``n=5`` by default.\n\n    >>> s.nlargest()\n    France      65000000\n    Italy       59000000\n    Malta         434000\n    Maldives      434000\n    Brunei        434000\n    dtype: int64\n\n    The `n` largest elements where ``n=3``. Default `keep` value is 'first'\n    so Malta will be kept.\n\n    >>> s.nlargest(3)\n    France    65000000\n    Italy     59000000\n    Malta       434000\n    dtype: int64\n\n    The `n` largest elements where ``n=3`` and keeping the last duplicates.\n    Brunei will be kept since it is the last with value 434000 based on\n    the index order.\n\n    >>> s.nlargest(3, keep='last')\n    France      65000000\n    Italy       59000000\n    Brunei        434000\n    dtype: int64\n\n    The `n` largest elements where ``n=3`` with all duplicates kept. Note\n    that the returned Series has five elements due to the three duplicates.\n\n    >>> s.nlargest(3, keep='all')\n    France      65000000\n    Italy       59000000\n    Malta         434000\n    Maldives      434000\n    Brunei        434000\n    dtype: int64\n    \"\"\"\n    return algorithms.SelectNSeries(self, n=n, keep=keep).nlargest()",
                            "def nsmallest(self, n=5, keep='first') -> 'Series':\n    \"\"\"\n    Return the smallest `n` elements.\n\n    Parameters\n    ----------\n    n : int, default 5\n        Return this many ascending sorted values.\n    keep : {'first', 'last', 'all'}, default 'first'\n        When there are duplicate values that cannot all fit in a\n        Series of `n` elements:\n\n        - ``first`` : return the first `n` occurrences in order\n            of appearance.\n        - ``last`` : return the last `n` occurrences in reverse\n            order of appearance.\n        - ``all`` : keep all occurrences. This can result in a Series of\n            size larger than `n`.\n\n    Returns\n    -------\n    Series\n        The `n` smallest values in the Series, sorted in increasing order.\n\n    See Also\n    --------\n    Series.nlargest: Get the `n` largest elements.\n    Series.sort_values: Sort Series by values.\n    Series.head: Return the first `n` rows.\n\n    Notes\n    -----\n    Faster than ``.sort_values().head(n)`` for small `n` relative to\n    the size of the ``Series`` object.\n\n    Examples\n    --------\n    >>> countries_population = {\"Italy\": 59000000, \"France\": 65000000,\n    ...                         \"Brunei\": 434000, \"Malta\": 434000,\n    ...                         \"Maldives\": 434000, \"Iceland\": 337000,\n    ...                         \"Nauru\": 11300, \"Tuvalu\": 11300,\n    ...                         \"Anguilla\": 11300, \"Monserat\": 5200}\n    >>> s = pd.Series(countries_population)\n    >>> s\n    Italy       59000000\n    France      65000000\n    Brunei        434000\n    Malta         434000\n    Maldives      434000\n    Iceland       337000\n    Nauru          11300\n    Tuvalu         11300\n    Anguilla       11300\n    Monserat        5200\n    dtype: int64\n\n    The `n` smallest elements where ``n=5`` by default.\n\n    >>> s.nsmallest()\n    Monserat      5200\n    Nauru        11300\n    Tuvalu       11300\n    Anguilla     11300\n    Iceland     337000\n    dtype: int64\n\n    The `n` smallest elements where ``n=3``. Default `keep` value is\n    'first' so Nauru and Tuvalu will be kept.\n\n    >>> s.nsmallest(3)\n    Monserat     5200\n    Nauru       11300\n    Tuvalu      11300\n    dtype: int64\n\n    The `n` smallest elements where ``n=3`` and keeping the last\n    duplicates. Anguilla and Tuvalu will be kept since they are the last\n    with value 11300 based on the index order.\n\n    >>> s.nsmallest(3, keep='last')\n    Monserat     5200\n    Anguilla    11300\n    Tuvalu      11300\n    dtype: int64\n\n    The `n` smallest elements where ``n=3`` with all duplicates kept. Note\n    that the returned Series has four elements due to the three duplicates.\n\n    >>> s.nsmallest(3, keep='all')\n    Monserat     5200\n    Nauru       11300\n    Tuvalu      11300\n    Anguilla    11300\n    dtype: int64\n    \"\"\"\n    return algorithms.SelectNSeries(self, n=n, keep=keep).nsmallest()",
                            "def swaplevel(self, i=-2, j=-1, copy=True) -> 'Series':\n    \"\"\"\n    Swap levels i and j in a :class:`MultiIndex`.\n\n    Default is to swap the two innermost levels of the index.\n\n    Parameters\n    ----------\n    i, j : int, str\n        Level of the indices to be swapped. Can pass level name as string.\n    copy : bool, default True\n        Whether to copy underlying data.\n\n    Returns\n    -------\n    Series\n        Series with levels swapped in MultiIndex.\n    \"\"\"\n    assert isinstance(self.index, ABCMultiIndex)\n    new_index = self.index.swaplevel(i, j)\n    return self._constructor(self._values, index=new_index, copy=copy).__finalize__(self)",
                            "def reorder_levels(self, order) -> 'Series':\n    \"\"\"\n    Rearrange index levels using input order.\n\n    May not drop or duplicate levels.\n\n    Parameters\n    ----------\n    order : list of int representing new level order\n        Reference level by number or key.\n\n    Returns\n    -------\n    type of caller (new object)\n    \"\"\"\n    if not isinstance(self.index, MultiIndex):\n        raise Exception('Can only reorder levels on a hierarchical axis.')\n    result = self.copy()\n    assert isinstance(result.index, ABCMultiIndex)\n    result.index = result.index.reorder_levels(order)\n    return result",
                            "def explode(self) -> 'Series':\n    \"\"\"\n    Transform each element of a list-like to a row, replicating the\n    index values.\n\n    .. versionadded:: 0.25.0\n\n    Returns\n    -------\n    Series\n        Exploded lists to rows; index will be duplicated for these rows.\n\n    See Also\n    --------\n    Series.str.split : Split string values on specified separator.\n    Series.unstack : Unstack, a.k.a. pivot, Series with MultiIndex\n        to produce DataFrame.\n    DataFrame.melt : Unpivot a DataFrame from wide format to long format.\n    DataFrame.explode : Explode a DataFrame from list-like\n        columns to long format.\n\n    Notes\n    -----\n    This routine will explode list-likes including lists, tuples,\n    Series, and np.ndarray. The result dtype of the subset rows will\n    be object. Scalars will be returned unchanged. Empty list-likes will\n    result in a np.nan for that row.\n\n    Examples\n    --------\n    >>> s = pd.Series([[1, 2, 3], 'foo', [], [3, 4]])\n    >>> s\n    0    [1, 2, 3]\n    1          foo\n    2           []\n    3       [3, 4]\n    dtype: object\n\n    >>> s.explode()\n    0      1\n    0      2\n    0      3\n    1    foo\n    2    NaN\n    3      3\n    3      4\n    dtype: object\n    \"\"\"\n    if not len(self) or not is_object_dtype(self):\n        return self.copy()\n    values, counts = reshape.explode(np.asarray(self.array))\n    result = Series(values, index=self.index.repeat(counts), name=self.name)\n    return result",
                            "def unstack(self, level=-1, fill_value=None):\n    \"\"\"\n    Unstack, also known as pivot, Series with MultiIndex to produce DataFrame.\n    The level involved will automatically get sorted.\n\n    Parameters\n    ----------\n    level : int, str, or list of these, default last level\n        Level(s) to unstack, can pass level name.\n    fill_value : scalar value, default None\n        Value to use when replacing NaN values.\n\n    Returns\n    -------\n    DataFrame\n        Unstacked Series.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4],\n    ...               index=pd.MultiIndex.from_product([['one', 'two'],\n    ...                                                 ['a', 'b']]))\n    >>> s\n    one  a    1\n         b    2\n    two  a    3\n         b    4\n    dtype: int64\n\n    >>> s.unstack(level=-1)\n         a  b\n    one  1  2\n    two  3  4\n\n    >>> s.unstack(level=0)\n       one  two\n    a    1    3\n    b    2    4\n    \"\"\"\n    from pandas.core.reshape.reshape import unstack\n    return unstack(self, level, fill_value)",
                            "def map(self, arg, na_action=None) -> 'Series':\n    \"\"\"\n    Map values of Series according to input correspondence.\n\n    Used for substituting each value in a Series with another value,\n    that may be derived from a function, a ``dict`` or\n    a :class:`Series`.\n\n    Parameters\n    ----------\n    arg : function, collections.abc.Mapping subclass or Series\n        Mapping correspondence.\n    na_action : {None, 'ignore'}, default None\n        If 'ignore', propagate NaN values, without passing them to the\n        mapping correspondence.\n\n    Returns\n    -------\n    Series\n        Same index as caller.\n\n    See Also\n    --------\n    Series.apply : For applying more complex functions on a Series.\n    DataFrame.apply : Apply a function row-/column-wise.\n    DataFrame.applymap : Apply a function elementwise on a whole DataFrame.\n\n    Notes\n    -----\n    When ``arg`` is a dictionary, values in Series that are not in the\n    dictionary (as keys) are converted to ``NaN``. However, if the\n    dictionary is a ``dict`` subclass that defines ``__missing__`` (i.e.\n    provides a method for default values), then this default is used\n    rather than ``NaN``.\n\n    Examples\n    --------\n    >>> s = pd.Series(['cat', 'dog', np.nan, 'rabbit'])\n    >>> s\n    0      cat\n    1      dog\n    2      NaN\n    3   rabbit\n    dtype: object\n\n    ``map`` accepts a ``dict`` or a ``Series``. Values that are not found\n    in the ``dict`` are converted to ``NaN``, unless the dict has a default\n    value (e.g. ``defaultdict``):\n\n    >>> s.map({'cat': 'kitten', 'dog': 'puppy'})\n    0   kitten\n    1    puppy\n    2      NaN\n    3      NaN\n    dtype: object\n\n    It also accepts a function:\n\n    >>> s.map('I am a {}'.format)\n    0       I am a cat\n    1       I am a dog\n    2       I am a nan\n    3    I am a rabbit\n    dtype: object\n\n    To avoid applying the function to missing values (and keep them as\n    ``NaN``) ``na_action='ignore'`` can be used:\n\n    >>> s.map('I am a {}'.format, na_action='ignore')\n    0     I am a cat\n    1     I am a dog\n    2            NaN\n    3  I am a rabbit\n    dtype: object\n    \"\"\"\n    new_values = super()._map_values(arg, na_action=na_action)\n    return self._constructor(new_values, index=self.index).__finalize__(self)",
                            "def _gotitem(self, key, ndim, subset=None) -> 'Series':\n    \"\"\"\n    Sub-classes to define. Return a sliced object.\n\n    Parameters\n    ----------\n    key : string / list of selections\n    ndim : 1,2\n        Requested ndim of result.\n    subset : object, default None\n        Subset to act on.\n    \"\"\"\n    return self",
                            "@Substitution(see_also=_agg_see_also_doc, examples=_agg_examples_doc, versionadded='\\n.. versionadded:: 0.20.0\\n', **_shared_doc_kwargs)\n@Appender(generic._shared_docs['aggregate'])\ndef aggregate(self, func, axis=0, *args, **kwargs):\n    self._get_axis_number(axis)\n    result, how = self._aggregate(func, *args, **kwargs)\n    if result is None:\n        kwargs.pop('_axis', None)\n        kwargs.pop('_level', None)\n        try:\n            result = self.apply(func, *args, **kwargs)\n        except (ValueError, AttributeError, TypeError):\n            result = func(self, *args, **kwargs)\n    return result",
                            "@Appender(generic._shared_docs['transform'] % _shared_doc_kwargs)\ndef transform(self, func, axis=0, *args, **kwargs):\n    self._get_axis_number(axis)\n    return super().transform(func, *args, **kwargs)",
                            "def apply(self, func, convert_dtype=True, args=(), **kwds):\n    \"\"\"\n    Invoke function on values of Series.\n\n    Can be ufunc (a NumPy function that applies to the entire Series)\n    or a Python function that only works on single values.\n\n    Parameters\n    ----------\n    func : function\n        Python function or NumPy ufunc to apply.\n    convert_dtype : bool, default True\n        Try to find better dtype for elementwise function results. If\n        False, leave as dtype=object.\n    args : tuple\n        Positional arguments passed to func after the series value.\n    **kwds\n        Additional keyword arguments passed to func.\n\n    Returns\n    -------\n    Series or DataFrame\n        If func returns a Series object the result will be a DataFrame.\n\n    See Also\n    --------\n    Series.map: For element-wise operations.\n    Series.agg: Only perform aggregating type operations.\n    Series.transform: Only perform transforming type operations.\n\n    Examples\n    --------\n    Create a series with typical summer temperatures for each city.\n\n    >>> s = pd.Series([20, 21, 12],\n    ...               index=['London', 'New York', 'Helsinki'])\n    >>> s\n    London      20\n    New York    21\n    Helsinki    12\n    dtype: int64\n\n    Square the values by defining a function and passing it as an\n    argument to ``apply()``.\n\n    >>> def square(x):\n    ...     return x ** 2\n    >>> s.apply(square)\n    London      400\n    New York    441\n    Helsinki    144\n    dtype: int64\n\n    Square the values by passing an anonymous function as an\n    argument to ``apply()``.\n\n    >>> s.apply(lambda x: x ** 2)\n    London      400\n    New York    441\n    Helsinki    144\n    dtype: int64\n\n    Define a custom function that needs additional positional\n    arguments and pass these additional arguments using the\n    ``args`` keyword.\n\n    >>> def subtract_custom_value(x, custom_value):\n    ...     return x - custom_value\n\n    >>> s.apply(subtract_custom_value, args=(5,))\n    London      15\n    New York    16\n    Helsinki     7\n    dtype: int64\n\n    Define a custom function that takes keyword arguments\n    and pass these arguments to ``apply``.\n\n    >>> def add_custom_values(x, **kwargs):\n    ...     for month in kwargs:\n    ...         x += kwargs[month]\n    ...     return x\n\n    >>> s.apply(add_custom_values, june=30, july=20, august=25)\n    London      95\n    New York    96\n    Helsinki    87\n    dtype: int64\n\n    Use a function from the Numpy library.\n\n    >>> s.apply(np.log)\n    London      2.995732\n    New York    3.044522\n    Helsinki    2.484907\n    dtype: float64\n    \"\"\"\n    if len(self) == 0:\n        return self._constructor(dtype=self.dtype, index=self.index).__finalize__(self)\n    if isinstance(func, (list, dict)):\n        return self.aggregate(func, *args, **kwds)\n    if isinstance(func, str):\n        return self._try_aggregate_string_function(func, *args, **kwds)\n    if kwds or (args and (not isinstance(func, np.ufunc))):\n\n        def f(x):\n            return func(x, *args, **kwds)\n    else:\n        f = func\n    with np.errstate(all='ignore'):\n        if isinstance(f, np.ufunc):\n            return f(self)\n        if is_extension_array_dtype(self.dtype) and hasattr(self._values, 'map'):\n            mapped = self._values.map(f)\n        else:\n            values = self.astype(object).values\n            mapped = lib.map_infer(values, f, convert=convert_dtype)\n    if len(mapped) and isinstance(mapped[0], Series):\n        return self._constructor_expanddim(pd.array(mapped), index=self.index)\n    else:\n        return self._constructor(mapped, index=self.index).__finalize__(self)",
                            "def _reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds):\n    \"\"\"\n    Perform a reduction operation.\n\n    If we have an ndarray as a value, then simply perform the operation,\n    otherwise delegate to the object.\n    \"\"\"\n    delegate = self._values\n    if axis is not None:\n        self._get_axis_number(axis)\n    if isinstance(delegate, ExtensionArray):\n        return delegate._reduce(name, skipna=skipna, **kwds)\n    else:\n        if numeric_only:\n            raise NotImplementedError(f'Series.{name} does not implement numeric_only.')\n        with np.errstate(all='ignore'):\n            return op(delegate, skipna=skipna, **kwds)",
                            "def _reindex_indexer(self, new_index, indexer, copy):\n    if indexer is None:\n        if copy:\n            return self.copy()\n        return self\n    new_values = algorithms.take_1d(self._values, indexer, allow_fill=True, fill_value=None)\n    return self._constructor(new_values, index=new_index)",
                            "def _needs_reindex_multi(self, axes, method, level):\n    \"\"\"\n    Check if we do need a multi reindex; this is for compat with\n    higher dims.\n    \"\"\"\n    return False",
                            "@Appender(generic._shared_docs['align'] % _shared_doc_kwargs)\ndef align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None):\n    return super().align(other, join=join, axis=axis, level=level, copy=copy, fill_value=fill_value, method=method, limit=limit, fill_axis=fill_axis, broadcast_axis=broadcast_axis)",
                            "def rename(self, index=None, *, axis=None, copy=True, inplace=False, level=None, errors='ignore'):\n    \"\"\"\n    Alter Series index labels or name.\n\n    Function / dict values must be unique (1-to-1). Labels not contained in\n    a dict / Series will be left as-is. Extra labels listed don't throw an\n    error.\n\n    Alternatively, change ``Series.name`` with a scalar value.\n\n    See the :ref:`user guide <basics.rename>` for more.\n\n    Parameters\n    ----------\n    axis : {0 or \"index\"}\n        Unused. Accepted for compatability with DataFrame method only.\n    index : scalar, hashable sequence, dict-like or function, optional\n        Functions or dict-like are transformations to apply to\n        the index.\n        Scalar or hashable sequence-like will alter the ``Series.name``\n        attribute.\n\n    **kwargs\n        Additional keyword arguments passed to the function. Only the\n        \"inplace\" keyword is used.\n\n    Returns\n    -------\n    Series\n        Series with index labels or name altered.\n\n    See Also\n    --------\n    DataFrame.rename : Corresponding DataFrame method.\n    Series.rename_axis : Set the name of the axis.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3])\n    >>> s\n    0    1\n    1    2\n    2    3\n    dtype: int64\n    >>> s.rename(\"my_name\")  # scalar, changes Series.name\n    0    1\n    1    2\n    2    3\n    Name: my_name, dtype: int64\n    >>> s.rename(lambda x: x ** 2)  # function, changes labels\n    0    1\n    1    2\n    4    3\n    dtype: int64\n    >>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n    0    1\n    3    2\n    5    3\n    dtype: int64\n    \"\"\"\n    if callable(index) or is_dict_like(index):\n        return super().rename(index, copy=copy, inplace=inplace, level=level, errors=errors)\n    else:\n        return self._set_name(index, inplace=inplace)",
                            "@Appender(\"\\n        Examples\\n        --------\\n        >>> s = pd.Series([1, 2, 3])\\n        >>> s\\n        0    1\\n        1    2\\n        2    3\\n        dtype: int64\\n\\n        >>> s.set_axis(['a', 'b', 'c'], axis=0)\\n        a    1\\n        b    2\\n        c    3\\n        dtype: int64\\n    \")\n@Substitution(**_shared_doc_kwargs, extended_summary_sub='', axis_description_sub='', see_also_sub='')\n@Appender(generic.NDFrame.set_axis.__doc__)\ndef set_axis(self, labels, axis=0, inplace=False):\n    return super().set_axis(labels, axis=axis, inplace=inplace)",
                            "@Substitution(**_shared_doc_kwargs)\n@Appender(generic.NDFrame.reindex.__doc__)\ndef reindex(self, index=None, **kwargs):\n    return super().reindex(index=index, **kwargs)",
                            "def drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise') -> 'Series':\n    \"\"\"\n    Return Series with specified index labels removed.\n\n    Remove elements of a Series based on specifying the index labels.\n    When using a multi-index, labels on different levels can be removed\n    by specifying the level.\n\n    Parameters\n    ----------\n    labels : single label or list-like\n        Index labels to drop.\n    axis : 0, default 0\n        Redundant for application on Series.\n    index : single label or list-like\n        Redundant for application on Series, but 'index' can be used instead\n        of 'labels'.\n\n        .. versionadded:: 0.21.0\n    columns : single label or list-like\n        No change is made to the Series; use 'index' or 'labels' instead.\n\n        .. versionadded:: 0.21.0\n    level : int or level name, optional\n        For MultiIndex, level for which the labels will be removed.\n    inplace : bool, default False\n        If True, do operation inplace and return None.\n    errors : {'ignore', 'raise'}, default 'raise'\n        If 'ignore', suppress error and only existing labels are dropped.\n\n    Returns\n    -------\n    Series\n        Series with specified index labels removed.\n\n    Raises\n    ------\n    KeyError\n        If none of the labels are found in the index.\n\n    See Also\n    --------\n    Series.reindex : Return only specified index labels of Series.\n    Series.dropna : Return series without null values.\n    Series.drop_duplicates : Return Series with duplicate values removed.\n    DataFrame.drop : Drop specified labels from rows or columns.\n\n    Examples\n    --------\n    >>> s = pd.Series(data=np.arange(3), index=['A', 'B', 'C'])\n    >>> s\n    A  0\n    B  1\n    C  2\n    dtype: int64\n\n    Drop labels B en C\n\n    >>> s.drop(labels=['B', 'C'])\n    A  0\n    dtype: int64\n\n    Drop 2nd level label in MultiIndex Series\n\n    >>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n    ...                              ['speed', 'weight', 'length']],\n    ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n    ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n    >>> s = pd.Series([45, 200, 1.2, 30, 250, 1.5, 320, 1, 0.3],\n    ...               index=midx)\n    >>> s\n    lama    speed      45.0\n            weight    200.0\n            length      1.2\n    cow     speed      30.0\n            weight    250.0\n            length      1.5\n    falcon  speed     320.0\n            weight      1.0\n            length      0.3\n    dtype: float64\n\n    >>> s.drop(labels='weight', level=1)\n    lama    speed      45.0\n            length      1.2\n    cow     speed      30.0\n            length      1.5\n    falcon  speed     320.0\n            length      0.3\n    dtype: float64\n    \"\"\"\n    return super().drop(labels=labels, axis=axis, index=index, columns=columns, level=level, inplace=inplace, errors=errors)",
                            "@doc(NDFrame.fillna, **_shared_doc_kwargs)\ndef fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None) -> Optional['Series']:\n    return super().fillna(value=value, method=method, axis=axis, inplace=inplace, limit=limit, downcast=downcast)",
                            "@Appender(generic._shared_docs['replace'] % _shared_doc_kwargs)\ndef replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad'):\n    return super().replace(to_replace=to_replace, value=value, inplace=inplace, limit=limit, regex=regex, method=method)",
                            "@Appender(generic._shared_docs['shift'] % _shared_doc_kwargs)\ndef shift(self, periods=1, freq=None, axis=0, fill_value=None) -> 'Series':\n    return super().shift(periods=periods, freq=freq, axis=axis, fill_value=fill_value)",
                            "def memory_usage(self, index=True, deep=False):\n    \"\"\"\n    Return the memory usage of the Series.\n\n    The memory usage can optionally include the contribution of\n    the index and of elements of `object` dtype.\n\n    Parameters\n    ----------\n    index : bool, default True\n        Specifies whether to include the memory usage of the Series index.\n    deep : bool, default False\n        If True, introspect the data deeply by interrogating\n        `object` dtypes for system-level memory consumption, and include\n        it in the returned value.\n\n    Returns\n    -------\n    int\n        Bytes of memory consumed.\n\n    See Also\n    --------\n    numpy.ndarray.nbytes : Total bytes consumed by the elements of the\n        array.\n    DataFrame.memory_usage : Bytes consumed by a DataFrame.\n\n    Examples\n    --------\n    >>> s = pd.Series(range(3))\n    >>> s.memory_usage()\n    152\n\n    Not including the index gives the size of the rest of the data, which\n    is necessarily smaller:\n\n    >>> s.memory_usage(index=False)\n    24\n\n    The memory footprint of `object` values is ignored by default:\n\n    >>> s = pd.Series([\"a\", \"b\"])\n    >>> s.values\n    array(['a', 'b'], dtype=object)\n    >>> s.memory_usage()\n    144\n    >>> s.memory_usage(deep=True)\n    260\n    \"\"\"\n    v = super().memory_usage(deep=deep)\n    if index:\n        v += self.index.memory_usage(deep=deep)\n    return v",
                            "def isin(self, values) -> 'Series':\n    \"\"\"\n    Check whether `values` are contained in Series.\n\n    Return a boolean Series showing whether each element in the Series\n    matches an element in the passed sequence of `values` exactly.\n\n    Parameters\n    ----------\n    values : set or list-like\n        The sequence of values to test. Passing in a single string will\n        raise a ``TypeError``. Instead, turn a single string into a\n        list of one element.\n\n    Returns\n    -------\n    Series\n        Series of booleans indicating if each element is in values.\n\n    Raises\n    ------\n    TypeError\n      * If `values` is a string\n\n    See Also\n    --------\n    DataFrame.isin : Equivalent method on DataFrame.\n\n    Examples\n    --------\n    >>> s = pd.Series(['lama', 'cow', 'lama', 'beetle', 'lama',\n    ...                'hippo'], name='animal')\n    >>> s.isin(['cow', 'lama'])\n    0     True\n    1     True\n    2     True\n    3    False\n    4     True\n    5    False\n    Name: animal, dtype: bool\n\n    Passing a single string as ``s.isin('lama')`` will raise an error. Use\n    a list of one element instead:\n\n    >>> s.isin(['lama'])\n    0     True\n    1    False\n    2     True\n    3    False\n    4     True\n    5    False\n    Name: animal, dtype: bool\n    \"\"\"\n    result = algorithms.isin(self, values)\n    return self._constructor(result, index=self.index).__finalize__(self)",
                            "def between(self, left, right, inclusive=True) -> 'Series':\n    \"\"\"\n    Return boolean Series equivalent to left <= series <= right.\n\n    This function returns a boolean vector containing `True` wherever the\n    corresponding Series element is between the boundary values `left` and\n    `right`. NA values are treated as `False`.\n\n    Parameters\n    ----------\n    left : scalar or list-like\n        Left boundary.\n    right : scalar or list-like\n        Right boundary.\n    inclusive : bool, default True\n        Include boundaries.\n\n    Returns\n    -------\n    Series\n        Series representing whether each element is between left and\n        right (inclusive).\n\n    See Also\n    --------\n    Series.gt : Greater than of series and other.\n    Series.lt : Less than of series and other.\n\n    Notes\n    -----\n    This function is equivalent to ``(left <= ser) & (ser <= right)``\n\n    Examples\n    --------\n    >>> s = pd.Series([2, 0, 4, 8, np.nan])\n\n    Boundary values are included by default:\n\n    >>> s.between(1, 4)\n    0     True\n    1    False\n    2     True\n    3    False\n    4    False\n    dtype: bool\n\n    With `inclusive` set to ``False`` boundary values are excluded:\n\n    >>> s.between(1, 4, inclusive=False)\n    0     True\n    1    False\n    2    False\n    3    False\n    4    False\n    dtype: bool\n\n    `left` and `right` can be any scalar value:\n\n    >>> s = pd.Series(['Alice', 'Bob', 'Carol', 'Eve'])\n    >>> s.between('Anna', 'Daniel')\n    0    False\n    1     True\n    2     True\n    3    False\n    dtype: bool\n    \"\"\"\n    if inclusive:\n        lmask = self >= left\n        rmask = self <= right\n    else:\n        lmask = self > left\n        rmask = self < right\n    return lmask & rmask",
                            "def _convert_dtypes(self, infer_objects: bool=True, convert_string: bool=True, convert_integer: bool=True, convert_boolean: bool=True) -> 'Series':\n    input_series = self\n    if infer_objects:\n        input_series = input_series.infer_objects()\n        if is_object_dtype(input_series):\n            input_series = input_series.copy()\n    if convert_string or convert_integer or convert_boolean:\n        inferred_dtype = convert_dtypes(input_series._values, convert_string, convert_integer, convert_boolean)\n        try:\n            result = input_series.astype(inferred_dtype)\n        except TypeError:\n            result = input_series.copy()\n    else:\n        result = input_series.copy()\n    return result",
                            "@Appender(generic._shared_docs['isna'] % _shared_doc_kwargs)\ndef isna(self) -> 'Series':\n    return super().isna()",
                            "@Appender(generic._shared_docs['isna'] % _shared_doc_kwargs)\ndef isnull(self) -> 'Series':\n    return super().isnull()",
                            "@Appender(generic._shared_docs['notna'] % _shared_doc_kwargs)\ndef notna(self) -> 'Series':\n    return super().notna()",
                            "@Appender(generic._shared_docs['notna'] % _shared_doc_kwargs)\ndef notnull(self) -> 'Series':\n    return super().notnull()",
                            "def dropna(self, axis=0, inplace=False, how=None):\n    \"\"\"\n    Return a new Series with missing values removed.\n\n    See the :ref:`User Guide <missing_data>` for more on which values are\n    considered missing, and how to work with missing data.\n\n    Parameters\n    ----------\n    axis : {0 or 'index'}, default 0\n        There is only one axis to drop values from.\n    inplace : bool, default False\n        If True, do operation inplace and return None.\n    how : str, optional\n        Not in use. Kept for compatibility.\n\n    Returns\n    -------\n    Series\n        Series with NA entries dropped from it.\n\n    See Also\n    --------\n    Series.isna: Indicate missing values.\n    Series.notna : Indicate existing (non-missing) values.\n    Series.fillna : Replace missing values.\n    DataFrame.dropna : Drop rows or columns which contain NA values.\n    Index.dropna : Drop missing indices.\n\n    Examples\n    --------\n    >>> ser = pd.Series([1., 2., np.nan])\n    >>> ser\n    0    1.0\n    1    2.0\n    2    NaN\n    dtype: float64\n\n    Drop NA values from a Series.\n\n    >>> ser.dropna()\n    0    1.0\n    1    2.0\n    dtype: float64\n\n    Keep the Series with valid entries in the same variable.\n\n    >>> ser.dropna(inplace=True)\n    >>> ser\n    0    1.0\n    1    2.0\n    dtype: float64\n\n    Empty strings are not considered NA values. ``None`` is considered an\n    NA value.\n\n    >>> ser = pd.Series([np.NaN, 2, pd.NaT, '', None, 'I stay'])\n    >>> ser\n    0       NaN\n    1         2\n    2       NaT\n    3\n    4      None\n    5    I stay\n    dtype: object\n    >>> ser.dropna()\n    1         2\n    3\n    5    I stay\n    dtype: object\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    self._get_axis_number(axis or 0)\n    if self._can_hold_na:\n        result = remove_na_arraylike(self)\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result\n    elif inplace:\n        pass\n    else:\n        return self.copy()",
                            "def to_timestamp(self, freq=None, how='start', copy=True) -> 'Series':\n    \"\"\"\n    Cast to DatetimeIndex of Timestamps, at *beginning* of period.\n\n    Parameters\n    ----------\n    freq : str, default frequency of PeriodIndex\n        Desired frequency.\n    how : {'s', 'e', 'start', 'end'}\n        Convention for converting period to timestamp; start of period\n        vs. end.\n    copy : bool, default True\n        Whether or not to return a copy.\n\n    Returns\n    -------\n    Series with DatetimeIndex\n    \"\"\"\n    new_values = self._values\n    if copy:\n        new_values = new_values.copy()\n    assert isinstance(self.index, (ABCDatetimeIndex, ABCPeriodIndex))\n    new_index = self.index.to_timestamp(freq=freq, how=how)\n    return self._constructor(new_values, index=new_index).__finalize__(self)",
                            "def to_period(self, freq=None, copy=True) -> 'Series':\n    \"\"\"\n    Convert Series from DatetimeIndex to PeriodIndex with desired\n    frequency (inferred from index if not passed).\n\n    Parameters\n    ----------\n    freq : str, default None\n        Frequency associated with the PeriodIndex.\n    copy : bool, default True\n        Whether or not to return a copy.\n\n    Returns\n    -------\n    Series\n        Series with index converted to PeriodIndex.\n    \"\"\"\n    new_values = self._values\n    if copy:\n        new_values = new_values.copy()\n    assert isinstance(self.index, ABCDatetimeIndex)\n    new_index = self.index.to_period(freq=freq)\n    return self._constructor(new_values, index=new_index).__finalize__(self)",
                            "def construct_return(result):\n    if lib.is_scalar(result):\n        return result\n    elif result.ndim > 1:\n        if method == 'outer':\n            raise NotImplementedError\n        return result\n    return self._constructor(result, index=index, name=name, copy=False)",
                            "def _try_kind_sort(arr):\n    try:\n        return arr.argsort(kind=kind)\n    except TypeError:\n        return arr.argsort(kind='quicksort')",
                            "def f(x):\n    return func(x, *args, **kwds)"
                        ],
                        "constructor_variables": [
                            "name",
                            "data",
                            "dtype",
                            "index",
                            "copy"
                        ],
                        "class_level_variables": [
                            "_typ",
                            "_name",
                            "_metadata",
                            "_internal_names_set",
                            "_accessors",
                            "_deprecations",
                            "hasnans",
                            "_data",
                            "div",
                            "rdiv",
                            "_index",
                            "_HANDLED_TYPES",
                            "__float__",
                            "__long__",
                            "__int__",
                            "_agg_see_also_doc",
                            "_agg_examples_doc",
                            "agg",
                            "_AXIS_ORDERS",
                            "_AXIS_NUMBERS",
                            "_AXIS_NAMES",
                            "_AXIS_REVERSED",
                            "_AXIS_LEN",
                            "_info_axis_number",
                            "_info_axis_name",
                            "index",
                            "str",
                            "dt",
                            "cat",
                            "plot",
                            "sparse",
                            "hist"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False)",
                            "_init_dict(self, data, index=None, dtype=None)",
                            "_constructor(self) -> Type['Series']",
                            "_constructor_expanddim(self) -> Type['DataFrame']",
                            "_can_hold_na(self)",
                            "_set_axis(self, axis, labels, fastpath: bool=False) -> None",
                            "_update_inplace(self, result, **kwargs)",
                            "dtype(self)",
                            "dtypes(self)",
                            "name(self) -> Optional[Hashable]",
                            "name(self, value: Optional[Hashable]) -> None",
                            "values(self)",
                            "_values(self)",
                            "array(self) -> ExtensionArray",
                            "_internal_get_values(self)",
                            "ravel(self, order='C')",
                            "__len__(self) -> int",
                            "view(self, dtype=None) -> 'Series'",
                            "__array_ufunc__(self, ufunc: Callable, method: str, *inputs: Any, **kwargs: Any)",
                            "__array__(self, dtype=None) -> np.ndarray",
                            "axes(self) -> List[Index]",
                            "take(self, indices, axis=0, is_copy=None, **kwargs) -> 'Series'",
                            "_take_with_is_copy(self, indices, axis=0, **kwargs)",
                            "_ixs(self, i: int, axis: int=0)",
                            "_slice(self, slobj: slice, axis: int=0) -> 'Series'",
                            "__getitem__(self, key)",
                            "_get_with(self, key)",
                            "_get_values_tuple(self, key)",
                            "_get_values(self, indexer)",
                            "_get_value(self, label, takeable: bool=False)",
                            "__setitem__(self, key, value)",
                            "_set_with_engine(self, key, value)",
                            "_set_with(self, key, value)",
                            "_set_labels(self, key, value)",
                            "_set_values(self, key, value)",
                            "_set_value(self, label, value, takeable: bool=False)",
                            "_is_mixed_type(self)",
                            "repeat(self, repeats, axis=None) -> 'Series'",
                            "reset_index(self, level=None, drop=False, name=None, inplace=False)",
                            "__repr__(self) -> str",
                            "to_string(self, buf=None, na_rep='NaN', float_format=None, header=True, index=True, length=False, dtype=False, name=False, max_rows=None, min_rows=None)",
                            "to_markdown(self, buf: Optional[IO[str]]=None, mode: Optional[str]=None, **kwargs) -> Optional[str]",
                            "items(self) -> Iterable[Tuple[Label, Any]]",
                            "iteritems(self) -> Iterable[Tuple[Label, Any]]",
                            "keys(self) -> Index",
                            "to_dict(self, into=dict)",
                            "to_frame(self, name=None) -> 'DataFrame'",
                            "_set_name(self, name, inplace=False) -> 'Series'",
                            "groupby(self, by=None, axis=0, level=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False) -> 'SeriesGroupBy'",
                            "count(self, level=None)",
                            "mode(self, dropna=True) -> 'Series'",
                            "unique(self)",
                            "drop_duplicates(self, keep='first', inplace=False) -> 'Series'",
                            "duplicated(self, keep='first') -> 'Series'",
                            "idxmin(self, axis=0, skipna=True, *args, **kwargs)",
                            "idxmax(self, axis=0, skipna=True, *args, **kwargs)",
                            "round(self, decimals=0, *args, **kwargs) -> 'Series'",
                            "quantile(self, q=0.5, interpolation='linear')",
                            "corr(self, other, method='pearson', min_periods=None) -> float",
                            "cov(self, other, min_periods=None) -> float",
                            "diff(self, periods=1) -> 'Series'",
                            "autocorr(self, lag=1) -> float",
                            "dot(self, other)",
                            "__matmul__(self, other)",
                            "__rmatmul__(self, other)",
                            "searchsorted(self, value, side='left', sorter=None)",
                            "append(self, to_append, ignore_index=False, verify_integrity=False)",
                            "_binop(self, other, func, level=None, fill_value=None)",
                            "combine(self, other, func, fill_value=None) -> 'Series'",
                            "combine_first(self, other) -> 'Series'",
                            "update(self, other) -> None",
                            "sort_values(self, axis=0, ascending=True, inplace: bool=False, kind: str='quicksort', na_position: str='last', ignore_index: bool=False)",
                            "sort_index(self, axis=0, level=None, ascending: bool=True, inplace: bool=False, kind: str='quicksort', na_position: str='last', sort_remaining: bool=True, ignore_index: bool=False)",
                            "argsort(self, axis=0, kind='quicksort', order=None) -> 'Series'",
                            "nlargest(self, n=5, keep='first') -> 'Series'",
                            "nsmallest(self, n=5, keep='first') -> 'Series'",
                            "swaplevel(self, i=-2, j=-1, copy=True) -> 'Series'",
                            "reorder_levels(self, order) -> 'Series'",
                            "explode(self) -> 'Series'",
                            "unstack(self, level=-1, fill_value=None)",
                            "map(self, arg, na_action=None) -> 'Series'",
                            "_gotitem(self, key, ndim, subset=None) -> 'Series'",
                            "aggregate(self, func, axis=0, *args, **kwargs)",
                            "transform(self, func, axis=0, *args, **kwargs)",
                            "apply(self, func, convert_dtype=True, args=(), **kwds)",
                            "_reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
                            "_reindex_indexer(self, new_index, indexer, copy)",
                            "_needs_reindex_multi(self, axes, method, level)",
                            "align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)",
                            "rename(self, index=None)",
                            "set_axis(self, labels, axis=0, inplace=False)",
                            "reindex(self, index=None, **kwargs)",
                            "drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise') -> 'Series'",
                            "fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None) -> Optional['Series']",
                            "replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')",
                            "shift(self, periods=1, freq=None, axis=0, fill_value=None) -> 'Series'",
                            "memory_usage(self, index=True, deep=False)",
                            "isin(self, values) -> 'Series'",
                            "between(self, left, right, inclusive=True) -> 'Series'",
                            "_convert_dtypes(self, infer_objects: bool=True, convert_string: bool=True, convert_integer: bool=True, convert_boolean: bool=True) -> 'Series'",
                            "isna(self) -> 'Series'",
                            "isnull(self) -> 'Series'",
                            "notna(self) -> 'Series'",
                            "notnull(self) -> 'Series'",
                            "dropna(self, axis=0, inplace=False, how=None)",
                            "to_timestamp(self, freq=None, how='start', copy=True) -> 'Series'",
                            "to_period(self, freq=None, copy=True) -> 'Series'",
                            "construct_return(result)",
                            "_try_kind_sort(arr)",
                            "f(x)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._values": {
                                    "variable_value": "array([-0.7202077 ,  1.65377246,  0.80245192, -1.20475282])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "a   -0.720208\nb    1.653772\nc    0.802452\nd   -1.204753\ndtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "4"
                                },
                                "label": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.index.get_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "4"
                                }
                            },
                            {
                                "takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._values": {
                                    "variable_value": "array([-0.7202077 ,  1.65377246,  0.80245192, -1.20475282])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "a   -0.720208\nb    1.653772\nc    0.802452\nd   -1.204753\ndtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "4"
                                },
                                "label": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.index.get_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "4"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._values": {
                                    "variable_value": "array([ 0.63791752,  0.89324193,  0.10873607, -0.29231778])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "a    0.637918\nb    0.893242\nc    0.108736\nd   -0.292318\ndtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "4"
                                },
                                "label": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "4"
                                },
                                "self.index._get_values_for_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _coerce_method(converter):\n    \"\"\"\n    Install the scalar coercion methods.\n    \"\"\"\n\n    def wrapper(self):\n        if len(self) == 1:\n            return converter(self.iloc[0])\n        raise TypeError(f\"cannot convert the series to {converter}\")\n\n    wrapper.__name__ = f\"__{converter.__name__}__\"\n    return wrapper",
                "def wrapper(self):\n    if len(self) == 1:\n        return converter(self.iloc[0])\n    raise TypeError(f\"cannot convert the series to {converter}\")",
                "def __init__(\n    self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False\n):\n\n    # we are called internally, so short-circuit\n    if fastpath:\n\n        # data is an ndarray, index is defined\n        if not isinstance(data, SingleBlockManager):\n            data = SingleBlockManager(data, index, fastpath=True)\n        if copy:\n            data = data.copy()\n        if index is None:\n            index = data.index\n\n    else:\n\n        name = ibase.maybe_extract_name(name, data, type(self))\n\n        if is_empty_data(data) and dtype is None:\n            # gh-17261\n            warnings.warn(\n                \"The default dtype for empty Series will be 'object' instead \"\n                \"of 'float64' in a future version. Specify a dtype explicitly \"\n                \"to silence this warning.\",\n                DeprecationWarning,\n                stacklevel=2,\n            )\n            # uncomment the line below when removing the DeprecationWarning\n            # dtype = np.dtype(object)\n\n        if index is not None:\n            index = ensure_index(index)\n\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n\n        if isinstance(data, MultiIndex):\n            raise NotImplementedError(\n                \"initializing a Series from a MultiIndex is not supported\"\n            )\n        elif isinstance(data, Index):\n\n            if dtype is not None:\n                # astype copies\n                data = data.astype(dtype)\n            else:\n                # need to copy to avoid aliasing issues\n                data = data._values.copy()\n                if isinstance(data, ABCDatetimeIndex) and data.tz is not None:\n                    # GH#24096 need copy to be deep for datetime64tz case\n                    # TODO: See if we can avoid these copies\n                    data = data._values.copy(deep=True)\n            copy = False\n\n        elif isinstance(data, np.ndarray):\n            if len(data.dtype):\n                # GH#13296 we are dealing with a compound dtype, which\n                #  should be treated as 2D\n                raise ValueError(\n                    \"Cannot construct a Series from an ndarray with \"\n                    \"compound dtype.  Use DataFrame instead.\"\n                )\n            pass\n        elif isinstance(data, ABCSeries):\n            if index is None:\n                index = data.index\n            else:\n                data = data.reindex(index, copy=copy)\n            data = data._data\n        elif is_dict_like(data):\n            data, index = self._init_dict(data, index, dtype)\n            dtype = None\n            copy = False\n        elif isinstance(data, SingleBlockManager):\n            if index is None:\n                index = data.index\n            elif not data.index.equals(index) or copy:\n                # GH#19275 SingleBlockManager input should only be called\n                # internally\n                raise AssertionError(\n                    \"Cannot pass both SingleBlockManager \"\n                    \"`data` argument and a different \"\n                    \"`index` argument. `copy` must be False.\"\n                )\n\n        elif is_extension_array_dtype(data):\n            pass\n        elif isinstance(data, (set, frozenset)):\n            raise TypeError(f\"'{type(data).__name__}' type is unordered\")\n        elif isinstance(data, ABCSparseArray):\n            # handle sparse passed here (and force conversion)\n            data = data.to_dense()\n        else:\n            data = com.maybe_iterable_to_list(data)\n\n        if index is None:\n            if not is_list_like(data):\n                data = [data]\n            index = ibase.default_index(len(data))\n        elif is_list_like(data):\n\n            # a scalar numpy array is list-like but doesn't\n            # have a proper length\n            try:\n                if len(index) != len(data):\n                    raise ValueError(\n                        f\"Length of passed values is {len(data)}, \"\n                        f\"index implies {len(index)}.\"\n                    )\n            except TypeError:\n                pass\n\n        # create/copy the manager\n        if isinstance(data, SingleBlockManager):\n            if dtype is not None:\n                data = data.astype(dtype=dtype, errors=\"ignore\", copy=copy)\n            elif copy:\n                data = data.copy()\n        else:\n            data = sanitize_array(data, index, dtype, copy, raise_cast_failure=True)\n\n            data = SingleBlockManager(data, index, fastpath=True)\n\n    generic.NDFrame.__init__(self, data)\n    self.name = name\n    self._set_axis(0, index, fastpath=True)",
                "def _init_dict(self, data, index=None, dtype=None):\n    \"\"\"\n    Derive the \"_data\" and \"index\" attributes of a new Series from a\n    dictionary input.\n\n    Parameters\n    ----------\n    data : dict or dict-like\n        Data used to populate the new Series.\n    index : Index or index-like, default None\n        Index for the new Series: if None, use dict keys.\n    dtype : dtype, default None\n        The dtype for the new Series: if None, infer from data.\n\n    Returns\n    -------\n    _data : BlockManager for the new Series\n    index : index for the new Series\n    \"\"\"\n    # Looking for NaN in dict doesn't work ({np.nan : 1}[float('nan')]\n    # raises KeyError), so we iterate the entire dict, and align\n    if data:\n        keys, values = zip(*data.items())\n        values = list(values)\n    elif index is not None:\n        # fastpath for Series(data=None). Just use broadcasting a scalar\n        # instead of reindexing.\n        values = na_value_for_dtype(dtype)\n        keys = index\n    else:\n        keys, values = [], []\n\n    # Input is now list-like, so rely on \"standard\" construction:\n\n    # TODO: passing np.float64 to not break anything yet. See GH-17261\n    s = create_series_with_explicit_dtype(\n        values, index=keys, dtype=dtype, dtype_if_empty=np.float64\n    )\n\n    # Now we just make sure the order is respected, if any\n    if data and index is not None:\n        s = s.reindex(index, copy=False)\n    return s._data, s.index",
                "@property\ndef _constructor(self) -> Type[\"Series\"]:\n    return Series",
                "@property\ndef _constructor_expanddim(self) -> Type[\"DataFrame\"]:\n    from pandas.core.frame import DataFrame\n\n    return DataFrame",
                "@property\ndef _can_hold_na(self):\n    return self._data._can_hold_na",
                "def _set_axis(self, axis, labels, fastpath: bool = False) -> None:\n    \"\"\"\n    Override generic, we want to set the _typ here.\n    \"\"\"\n    if not fastpath:\n        labels = ensure_index(labels)\n\n    is_all_dates = labels.is_all_dates\n    if is_all_dates:\n        if not isinstance(labels, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n            try:\n                labels = DatetimeIndex(labels)\n                # need to set here because we changed the index\n                if fastpath:\n                    self._data.set_axis(axis, labels)\n            except (tslibs.OutOfBoundsDatetime, ValueError):\n                # labels may exceeds datetime bounds,\n                # or not be a DatetimeIndex\n                pass\n\n    object.__setattr__(self, \"_index\", labels)\n    if not fastpath:\n        self._data.set_axis(axis, labels)",
                "def _update_inplace(self, result, **kwargs):\n    # we want to call the generic version and not the IndexOpsMixin\n    return generic.NDFrame._update_inplace(self, result, **kwargs)",
                "@property\ndef dtype(self):\n    \"\"\"\n    Return the dtype object of the underlying data.\n    \"\"\"\n    return self._data.dtype",
                "@property\ndef dtypes(self):\n    \"\"\"\n    Return the dtype object of the underlying data.\n    \"\"\"\n    return self._data.dtype",
                "@property\ndef name(self) -> Optional[Hashable]:\n    return self._name",
                "@name.setter\ndef name(self, value: Optional[Hashable]) -> None:\n    if not is_hashable(value):\n        raise TypeError(\"Series.name must be a hashable type\")\n    object.__setattr__(self, \"_name\", value)",
                "@property\ndef values(self):\n    \"\"\"\n    Return Series as ndarray or ndarray-like depending on the dtype.\n\n    .. warning::\n\n       We recommend using :attr:`Series.array` or\n       :meth:`Series.to_numpy`, depending on whether you need\n       a reference to the underlying data or a NumPy array.\n\n    Returns\n    -------\n    numpy.ndarray or ndarray-like\n\n    See Also\n    --------\n    Series.array : Reference to the underlying data.\n    Series.to_numpy : A NumPy array representing the underlying data.\n\n    Examples\n    --------\n    >>> pd.Series([1, 2, 3]).values\n    array([1, 2, 3])\n\n    >>> pd.Series(list('aabc')).values\n    array(['a', 'a', 'b', 'c'], dtype=object)\n\n    >>> pd.Series(list('aabc')).astype('category').values\n    [a, a, b, c]\n    Categories (3, object): [a, b, c]\n\n    Timezone aware datetime data is converted to UTC:\n\n    >>> pd.Series(pd.date_range('20130101', periods=3,\n    ...                         tz='US/Eastern')).values\n    array(['2013-01-01T05:00:00.000000000',\n           '2013-01-02T05:00:00.000000000',\n           '2013-01-03T05:00:00.000000000'], dtype='datetime64[ns]')\n    \"\"\"\n    return self._data.external_values()",
                "@property\ndef _values(self):\n    \"\"\"\n    Return the internal repr of this data (defined by Block.interval_values).\n    This are the values as stored in the Block (ndarray or ExtensionArray\n    depending on the Block class), with datetime64[ns] and timedelta64[ns]\n    wrapped in ExtensionArrays to match Index._values behavior.\n\n    Differs from the public ``.values`` for certain data types, because of\n    historical backwards compatibility of the public attribute (e.g. period\n    returns object ndarray and datetimetz a datetime64[ns] ndarray for\n    ``.values`` while it returns an ExtensionArray for ``._values`` in those\n    cases).\n\n    Differs from ``.array`` in that this still returns the numpy array if\n    the Block is backed by a numpy array (except for datetime64 and\n    timedelta64 dtypes), while ``.array`` ensures to always return an\n    ExtensionArray.\n\n    Differs from ``._ndarray_values``, as that ensures to always return a\n    numpy array (it will call ``_ndarray_values`` on the ExtensionArray, if\n    the Series was backed by an ExtensionArray).\n\n    Overview:\n\n    dtype       | values        | _values       | array         | _ndarray_values |\n    ----------- | ------------- | ------------- | ------------- | --------------- |\n    Numeric     | ndarray       | ndarray       | PandasArray   | ndarray         |\n    Category    | Categorical   | Categorical   | Categorical   | ndarray[int]    |\n    dt64[ns]    | ndarray[M8ns] | DatetimeArray | DatetimeArray | ndarray[M8ns]   |\n    dt64[ns tz] | ndarray[M8ns] | DatetimeArray | DatetimeArray | ndarray[M8ns]   |\n    td64[ns]    | ndarray[m8ns] | TimedeltaArray| ndarray[m8ns] | ndarray[m8ns]   |\n    Period      | ndarray[obj]  | PeriodArray   | PeriodArray   | ndarray[int]    |\n    Nullable    | EA            | EA            | EA            | ndarray         |\n\n    \"\"\"\n    return self._data.internal_values()",
                "@Appender(base.IndexOpsMixin.array.__doc__)  # type: ignore\n@property\ndef array(self) -> ExtensionArray:\n    return self._data._block.array_values()",
                "def _internal_get_values(self):\n    \"\"\"\n    Same as values (but handles sparseness conversions); is a view.\n\n    Returns\n    -------\n    numpy.ndarray\n        Data of the Series.\n    \"\"\"\n    return self._data.get_values()",
                "def ravel(self, order=\"C\"):\n    \"\"\"\n    Return the flattened underlying data as an ndarray.\n\n    Returns\n    -------\n    numpy.ndarray or ndarray-like\n        Flattened data of the Series.\n\n    See Also\n    --------\n    numpy.ndarray.ravel\n    \"\"\"\n    return self._values.ravel(order=order)",
                "def __len__(self) -> int:\n    \"\"\"\n    Return the length of the Series.\n    \"\"\"\n    return len(self._data)",
                "def view(self, dtype=None) -> \"Series\":\n    \"\"\"\n    Create a new view of the Series.\n\n    This function will return a new Series with a view of the same\n    underlying values in memory, optionally reinterpreted with a new data\n    type. The new data type must preserve the same size in bytes as to not\n    cause index misalignment.\n\n    Parameters\n    ----------\n    dtype : data type\n        Data type object or one of their string representations.\n\n    Returns\n    -------\n    Series\n        A new Series object as a view of the same data in memory.\n\n    See Also\n    --------\n    numpy.ndarray.view : Equivalent numpy function to create a new view of\n        the same data in memory.\n\n    Notes\n    -----\n    Series are instantiated with ``dtype=float64`` by default. While\n    ``numpy.ndarray.view()`` will return a view with the same data type as\n    the original array, ``Series.view()`` (without specified dtype)\n    will try using ``float64`` and may fail if the original data type size\n    in bytes is not the same.\n\n    Examples\n    --------\n    >>> s = pd.Series([-2, -1, 0, 1, 2], dtype='int8')\n    >>> s\n    0   -2\n    1   -1\n    2    0\n    3    1\n    4    2\n    dtype: int8\n\n    The 8 bit signed integer representation of `-1` is `0b11111111`, but\n    the same bytes represent 255 if read as an 8 bit unsigned integer:\n\n    >>> us = s.view('uint8')\n    >>> us\n    0    254\n    1    255\n    2      0\n    3      1\n    4      2\n    dtype: uint8\n\n    The views share the same underlying values:\n\n    >>> us[0] = 128\n    >>> s\n    0   -128\n    1     -1\n    2      0\n    3      1\n    4      2\n    dtype: int8\n    \"\"\"\n    return self._constructor(\n        self._values.view(dtype), index=self.index\n    ).__finalize__(self)",
                "def __array_ufunc__(\n    self, ufunc: Callable, method: str, *inputs: Any, **kwargs: Any\n):\n    # TODO: handle DataFrame\n    cls = type(self)\n\n    # for binary ops, use our custom dunder methods\n    result = ops.maybe_dispatch_ufunc_to_dunder_op(\n        self, ufunc, method, *inputs, **kwargs\n    )\n    if result is not NotImplemented:\n        return result\n\n    # Determine if we should defer.\n    no_defer = (np.ndarray.__array_ufunc__, cls.__array_ufunc__)\n\n    for item in inputs:\n        higher_priority = (\n            hasattr(item, \"__array_priority__\")\n            and item.__array_priority__ > self.__array_priority__\n        )\n        has_array_ufunc = (\n            hasattr(item, \"__array_ufunc__\")\n            and type(item).__array_ufunc__ not in no_defer\n            and not isinstance(item, self._HANDLED_TYPES)\n        )\n        if higher_priority or has_array_ufunc:\n            return NotImplemented\n\n    # align all the inputs.\n    names = [getattr(x, \"name\") for x in inputs if hasattr(x, \"name\")]\n    types = tuple(type(x) for x in inputs)\n    # TODO: dataframe\n    alignable = [x for x, t in zip(inputs, types) if issubclass(t, Series)]\n\n    if len(alignable) > 1:\n        # This triggers alignment.\n        # At the moment, there aren't any ufuncs with more than two inputs\n        # so this ends up just being x1.index | x2.index, but we write\n        # it to handle *args.\n        index = alignable[0].index\n        for s in alignable[1:]:\n            index |= s.index\n        inputs = tuple(\n            x.reindex(index) if issubclass(t, Series) else x\n            for x, t in zip(inputs, types)\n        )\n    else:\n        index = self.index\n\n    inputs = tuple(extract_array(x, extract_numpy=True) for x in inputs)\n    result = getattr(ufunc, method)(*inputs, **kwargs)\n\n    name: Optional[Hashable]\n    if len(set(names)) == 1:\n        name = names[0]\n    else:\n        name = None\n\n    def construct_return(result):\n        if lib.is_scalar(result):\n            return result\n        elif result.ndim > 1:\n            # e.g. np.subtract.outer\n            if method == \"outer\":\n                # GH#27198\n                raise NotImplementedError\n            return result\n        return self._constructor(result, index=index, name=name, copy=False)\n\n    if type(result) is tuple:\n        # multiple return values\n        return tuple(construct_return(x) for x in result)\n    elif method == \"at\":\n        # no return value\n        return None\n    else:\n        return construct_return(result)",
                "def __array__(self, dtype=None) -> np.ndarray:\n    \"\"\"\n    Return the values as a NumPy array.\n\n    Users should not call this directly. Rather, it is invoked by\n    :func:`numpy.array` and :func:`numpy.asarray`.\n\n    Parameters\n    ----------\n    dtype : str or numpy.dtype, optional\n        The dtype to use for the resulting NumPy array. By default,\n        the dtype is inferred from the data.\n\n    Returns\n    -------\n    numpy.ndarray\n        The values in the series converted to a :class:`numpy.ndarray`\n        with the specified `dtype`.\n\n    See Also\n    --------\n    array : Create a new array from data.\n    Series.array : Zero-copy view to the array backing the Series.\n    Series.to_numpy : Series method for similar behavior.\n\n    Examples\n    --------\n    >>> ser = pd.Series([1, 2, 3])\n    >>> np.asarray(ser)\n    array([1, 2, 3])\n\n    For timezone-aware data, the timezones may be retained with\n    ``dtype='object'``\n\n    >>> tzser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n    >>> np.asarray(tzser, dtype=\"object\")\n    array([Timestamp('2000-01-01 00:00:00+0100', tz='CET', freq='D'),\n           Timestamp('2000-01-02 00:00:00+0100', tz='CET', freq='D')],\n          dtype=object)\n\n    Or the values may be localized to UTC and the tzinfo discarded with\n    ``dtype='datetime64[ns]'``\n\n    >>> np.asarray(tzser, dtype=\"datetime64[ns]\")  # doctest: +ELLIPSIS\n    array(['1999-12-31T23:00:00.000000000', ...],\n          dtype='datetime64[ns]')\n    \"\"\"\n    return np.asarray(self.array, dtype)",
                "@property\ndef axes(self) -> List[Index]:\n    \"\"\"\n    Return a list of the row axis labels.\n    \"\"\"\n    return [self.index]",
                "@Appender(generic.NDFrame.take.__doc__)\ndef take(self, indices, axis=0, is_copy=None, **kwargs) -> \"Series\":\n    if is_copy is not None:\n        warnings.warn(\n            \"is_copy is deprecated and will be removed in a future version. \"\n            \"'take' always returns a copy, so there is no need to specify this.\",\n            FutureWarning,\n            stacklevel=2,\n        )\n    nv.validate_take(tuple(), kwargs)\n\n    indices = ensure_platform_int(indices)\n    new_index = self.index.take(indices)\n\n    if is_categorical_dtype(self):\n        # https://github.com/pandas-dev/pandas/issues/20664\n        # TODO: remove when the default Categorical.take behavior changes\n        indices = maybe_convert_indices(indices, len(self._get_axis(axis)))\n        kwargs = {\"allow_fill\": False}\n    else:\n        kwargs = {}\n    new_values = self._values.take(indices, **kwargs)\n\n    return self._constructor(\n        new_values, index=new_index, fastpath=True\n    ).__finalize__(self)",
                "def _take_with_is_copy(self, indices, axis=0, **kwargs):\n    \"\"\"\n    Internal version of the `take` method that sets the `_is_copy`\n    attribute to keep track of the parent dataframe (using in indexing\n    for the SettingWithCopyWarning). For Series this does the same\n    as the public take (it never sets `_is_copy`).\n\n    See the docstring of `take` for full explanation of the parameters.\n    \"\"\"\n    return self.take(indices=indices, axis=axis, **kwargs)",
                "def _ixs(self, i: int, axis: int = 0):\n    \"\"\"\n    Return the i-th value or values in the Series by location.\n\n    Parameters\n    ----------\n    i : int\n\n    Returns\n    -------\n    scalar (int) or Series (slice, sequence)\n    \"\"\"\n    return self._values[i]",
                "def _slice(self, slobj: slice, axis: int = 0) -> \"Series\":\n    # axis kwarg is retained for compat with NDFrame method\n    #  _slice is *always* positional\n    return self._get_values(slobj)",
                "def __getitem__(self, key):\n    key = com.apply_if_callable(key, self)\n\n    if key is Ellipsis:\n        return self\n\n    key_is_scalar = is_scalar(key)\n    if key_is_scalar:\n        key = self.index._convert_scalar_indexer(key, kind=\"getitem\")\n    elif isinstance(key, (list, tuple)):\n        key = unpack_1tuple(key)\n\n    if key_is_scalar or isinstance(self.index, MultiIndex):\n        # Otherwise index.get_value will raise InvalidIndexError\n        try:\n            result = self.index.get_value(self, key)\n\n            return result\n        except InvalidIndexError:\n            if not isinstance(self.index, MultiIndex):\n                raise\n\n        except (KeyError, ValueError):\n            if isinstance(key, tuple) and isinstance(self.index, MultiIndex):\n                # kludge\n                pass\n            else:\n                raise\n\n    if not key_is_scalar:\n        # avoid expensive checks if we know we have a scalar\n        if is_iterator(key):\n            key = list(key)\n\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(self.index, key)\n            return self._get_values(key)\n\n    return self._get_with(key)",
                "def _get_with(self, key):\n    # other: fancy integer or otherwise\n    if isinstance(key, slice):\n        # _convert_slice_indexer to determing if this slice is positional\n        #  or label based, and if the latter, convert to positional\n        slobj = self.index._convert_slice_indexer(key, kind=\"getitem\")\n        return self._slice(slobj)\n    elif isinstance(key, ABCDataFrame):\n        raise TypeError(\n            \"Indexing a Series with DataFrame is not \"\n            \"supported, use the appropriate DataFrame column\"\n        )\n    elif isinstance(key, tuple):\n        return self._get_values_tuple(key)\n\n    if not isinstance(key, (list, np.ndarray, ExtensionArray, Series, Index)):\n        key = list(key)\n\n    if isinstance(key, Index):\n        key_type = key.inferred_type\n    else:\n        key_type = lib.infer_dtype(key, skipna=False)\n\n    # Note: The key_type == \"boolean\" case should be caught by the\n    #  com.is_bool_indexer check in __getitem__\n    if key_type == \"integer\":\n        # We need to decide whether to treat this as a positional indexer\n        #  (i.e. self.iloc) or label-based (i.e. self.loc)\n        if self.index.is_integer() or self.index.is_floating():\n            return self.loc[key]\n        elif isinstance(self.index, IntervalIndex):\n            return self.loc[key]\n        else:\n            return self.iloc[key]\n\n    if isinstance(key, list):\n        # handle the dup indexing case GH#4246\n        return self.loc[key]\n\n    return self.reindex(key)",
                "def _get_values_tuple(self, key):\n    # mpl hackaround\n    if com.any_none(*key):\n        # suppress warning from slicing the index with a 2d indexer.\n        # eventually we'll want Series itself to warn.\n        with warnings.catch_warnings():\n            warnings.filterwarnings(\n                \"ignore\", \"Support for multi-dim\", DeprecationWarning\n            )\n            return self._get_values(key)\n\n    if not isinstance(self.index, MultiIndex):\n        raise ValueError(\"Can only tuple-index with a MultiIndex\")\n\n    # If key is contained, would have returned by now\n    indexer, new_index = self.index.get_loc_level(key)\n    return self._constructor(self._values[indexer], index=new_index).__finalize__(\n        self\n    )",
                "def _get_values(self, indexer):\n    try:\n        return self._constructor(\n            self._data.get_slice(indexer), fastpath=True\n        ).__finalize__(self)\n    except ValueError:\n        # mpl compat if we look up e.g. ser[:, np.newaxis];\n        #  see tests.series.timeseries.test_mpl_compat_hack\n        return self._values[indexer]",
                "def _get_value(self, label, takeable: bool = False):\n    \"\"\"\n    Quickly retrieve single value at passed index label.\n\n    Parameters\n    ----------\n    label : object\n    takeable : interpret the index as indexers, default False\n\n    Returns\n    -------\n    scalar value\n    \"\"\"\n    if takeable:\n        return self._values[label]\n\n    # We assume that _convert_scalar_indexer has already been called,\n    #  with kind=\"loc\", if necessary, by the time we get here\n    return self.index.get_value(self, label)",
                "def __setitem__(self, key, value):\n    key = com.apply_if_callable(key, self)\n    cacher_needs_updating = self._check_is_chained_assignment_possible()\n\n    try:\n        self._set_with_engine(key, value)\n    except (KeyError, ValueError):\n        values = self._values\n        if is_integer(key) and not self.index.inferred_type == \"integer\":\n            values[key] = value\n        elif key is Ellipsis:\n            self[:] = value\n        else:\n            self.loc[key] = value\n\n    except TypeError as e:\n        if isinstance(key, tuple) and not isinstance(self.index, MultiIndex):\n            raise ValueError(\"Can only tuple-index with a MultiIndex\")\n\n        # python 3 type errors should be raised\n        if _is_unorderable_exception(e):\n            raise IndexError(key)\n\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(self.index, key)\n            try:\n                self._where(~key, value, inplace=True)\n                return\n            except InvalidIndexError:\n                pass\n\n        self._set_with(key, value)\n\n    if cacher_needs_updating:\n        self._maybe_update_cacher()",
                "def _set_with_engine(self, key, value):\n    # fails with AttributeError for IntervalIndex\n    loc = self.index._engine.get_loc(key)\n    validate_numeric_casting(self.dtype, value)\n    self._values[loc] = value",
                "def _set_with(self, key, value):\n    # other: fancy integer or otherwise\n    if isinstance(key, slice):\n        indexer = self.index._convert_slice_indexer(key, kind=\"getitem\")\n        return self._set_values(indexer, value)\n\n    elif is_scalar(key) and not is_integer(key) and key not in self.index:\n        # GH#12862 adding an new key to the Series\n        # Note: have to exclude integers because that is ambiguously\n        #  position-based\n        self.loc[key] = value\n        return\n\n    else:\n        if isinstance(key, tuple):\n            try:\n                # TODO: no test cases that get here\n                self._set_values(key, value)\n            except Exception:\n                pass\n\n        if is_scalar(key):\n            key = [key]\n\n        if isinstance(key, Index):\n            key_type = key.inferred_type\n            key = key._values\n        else:\n            key_type = lib.infer_dtype(key, skipna=False)\n\n        if key_type == \"integer\":\n            if self.index.inferred_type == \"integer\":\n                self._set_labels(key, value)\n            else:\n                return self._set_values(key, value)\n        elif key_type == \"boolean\":\n            self._set_values(key.astype(np.bool_), value)\n        else:\n            self._set_labels(key, value)",
                "def _set_labels(self, key, value):\n    key = com.asarray_tuplesafe(key)\n    indexer: np.ndarray = self.index.get_indexer(key)\n    mask = indexer == -1\n    if mask.any():\n        raise ValueError(f\"{key[mask]} not contained in the index\")\n    self._set_values(indexer, value)",
                "def _set_values(self, key, value):\n    if isinstance(key, Series):\n        key = key._values\n    self._data = self._data.setitem(indexer=key, value=value)\n    self._maybe_update_cacher()",
                "def _set_value(self, label, value, takeable: bool = False):\n    \"\"\"\n    Quickly set single value at passed label.\n\n    If label is not contained, a new object is created with the label\n    placed at the end of the result index.\n\n    Parameters\n    ----------\n    label : object\n        Partial indexing with MultiIndex not allowed.\n    value : object\n        Scalar value.\n    takeable : interpret the index as indexers, default False\n    \"\"\"\n    try:\n        if takeable:\n            self._values[label] = value\n        else:\n            loc = self.index.get_loc(label)\n            validate_numeric_casting(self.dtype, value)\n            self._values[loc] = value\n    except KeyError:\n\n        # set using a non-recursive method\n        self.loc[label] = value",
                "@property\ndef _is_mixed_type(self):\n    return False",
                "def repeat(self, repeats, axis=None) -> \"Series\":\n    \"\"\"\n    Repeat elements of a Series.\n\n    Returns a new Series where each element of the current Series\n    is repeated consecutively a given number of times.\n\n    Parameters\n    ----------\n    repeats : int or array of ints\n        The number of repetitions for each element. This should be a\n        non-negative integer. Repeating 0 times will return an empty\n        Series.\n    axis : None\n        Must be ``None``. Has no effect but is accepted for compatibility\n        with numpy.\n\n    Returns\n    -------\n    Series\n        Newly created Series with repeated elements.\n\n    See Also\n    --------\n    Index.repeat : Equivalent function for Index.\n    numpy.repeat : Similar method for :class:`numpy.ndarray`.\n\n    Examples\n    --------\n    >>> s = pd.Series(['a', 'b', 'c'])\n    >>> s\n    0    a\n    1    b\n    2    c\n    dtype: object\n    >>> s.repeat(2)\n    0    a\n    0    a\n    1    b\n    1    b\n    2    c\n    2    c\n    dtype: object\n    >>> s.repeat([1, 2, 3])\n    0    a\n    1    b\n    1    b\n    2    c\n    2    c\n    2    c\n    dtype: object\n    \"\"\"\n    nv.validate_repeat(tuple(), dict(axis=axis))\n    new_index = self.index.repeat(repeats)\n    new_values = self._values.repeat(repeats)\n    return self._constructor(new_values, index=new_index).__finalize__(self)",
                "def reset_index(self, level=None, drop=False, name=None, inplace=False):\n    \"\"\"\n    Generate a new DataFrame or Series with the index reset.\n\n    This is useful when the index needs to be treated as a column, or\n    when the index is meaningless and needs to be reset to the default\n    before another operation.\n\n    Parameters\n    ----------\n    level : int, str, tuple, or list, default optional\n        For a Series with a MultiIndex, only remove the specified levels\n        from the index. Removes all levels by default.\n    drop : bool, default False\n        Just reset the index, without inserting it as a column in\n        the new DataFrame.\n    name : object, optional\n        The name to use for the column containing the original Series\n        values. Uses ``self.name`` by default. This argument is ignored\n        when `drop` is True.\n    inplace : bool, default False\n        Modify the Series in place (do not create a new object).\n\n    Returns\n    -------\n    Series or DataFrame\n        When `drop` is False (the default), a DataFrame is returned.\n        The newly created columns will come first in the DataFrame,\n        followed by the original Series values.\n        When `drop` is True, a `Series` is returned.\n        In either case, if ``inplace=True``, no value is returned.\n\n    See Also\n    --------\n    DataFrame.reset_index: Analogous function for DataFrame.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4], name='foo',\n    ...               index=pd.Index(['a', 'b', 'c', 'd'], name='idx'))\n\n    Generate a DataFrame with default index.\n\n    >>> s.reset_index()\n      idx  foo\n    0   a    1\n    1   b    2\n    2   c    3\n    3   d    4\n\n    To specify the name of the new column use `name`.\n\n    >>> s.reset_index(name='values')\n      idx  values\n    0   a       1\n    1   b       2\n    2   c       3\n    3   d       4\n\n    To generate a new Series with the default set `drop` to True.\n\n    >>> s.reset_index(drop=True)\n    0    1\n    1    2\n    2    3\n    3    4\n    Name: foo, dtype: int64\n\n    To update the Series in place, without generating a new one\n    set `inplace` to True. Note that it also requires ``drop=True``.\n\n    >>> s.reset_index(inplace=True, drop=True)\n    >>> s\n    0    1\n    1    2\n    2    3\n    3    4\n    Name: foo, dtype: int64\n\n    The `level` parameter is interesting for Series with a multi-level\n    index.\n\n    >>> arrays = [np.array(['bar', 'bar', 'baz', 'baz']),\n    ...           np.array(['one', 'two', 'one', 'two'])]\n    >>> s2 = pd.Series(\n    ...     range(4), name='foo',\n    ...     index=pd.MultiIndex.from_arrays(arrays,\n    ...                                     names=['a', 'b']))\n\n    To remove a specific level from the Index, use `level`.\n\n    >>> s2.reset_index(level='a')\n           a  foo\n    b\n    one  bar    0\n    two  bar    1\n    one  baz    2\n    two  baz    3\n\n    If `level` is not set, all levels are removed from the Index.\n\n    >>> s2.reset_index()\n         a    b  foo\n    0  bar  one    0\n    1  bar  two    1\n    2  baz  one    2\n    3  baz  two    3\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if drop:\n        new_index = ibase.default_index(len(self))\n        if level is not None:\n            if not isinstance(level, (tuple, list)):\n                level = [level]\n            level = [self.index._get_level_number(lev) for lev in level]\n            if len(level) < self.index.nlevels:\n                new_index = self.index.droplevel(level)\n\n        if inplace:\n            self.index = new_index\n            # set name if it was passed, otherwise, keep the previous name\n            self.name = name or self.name\n        else:\n            return self._constructor(\n                self._values.copy(), index=new_index\n            ).__finalize__(self)\n    elif inplace:\n        raise TypeError(\n            \"Cannot reset_index inplace on a Series to create a DataFrame\"\n        )\n    else:\n        df = self.to_frame(name)\n        return df.reset_index(level=level, drop=drop)",
                "def __repr__(self) -> str:\n    \"\"\"\n    Return a string representation for a particular Series.\n    \"\"\"\n    buf = StringIO(\"\")\n    width, height = get_terminal_size()\n    max_rows = (\n        height\n        if get_option(\"display.max_rows\") == 0\n        else get_option(\"display.max_rows\")\n    )\n    min_rows = (\n        height\n        if get_option(\"display.max_rows\") == 0\n        else get_option(\"display.min_rows\")\n    )\n    show_dimensions = get_option(\"display.show_dimensions\")\n\n    self.to_string(\n        buf=buf,\n        name=self.name,\n        dtype=self.dtype,\n        min_rows=min_rows,\n        max_rows=max_rows,\n        length=show_dimensions,\n    )\n    result = buf.getvalue()\n\n    return result",
                "def to_string(\n    self,\n    buf=None,\n    na_rep=\"NaN\",\n    float_format=None,\n    header=True,\n    index=True,\n    length=False,\n    dtype=False,\n    name=False,\n    max_rows=None,\n    min_rows=None,\n):\n    \"\"\"\n    Render a string representation of the Series.\n\n    Parameters\n    ----------\n    buf : StringIO-like, optional\n        Buffer to write to.\n    na_rep : str, optional\n        String representation of NaN to use, default 'NaN'.\n    float_format : one-parameter function, optional\n        Formatter function to apply to columns' elements if they are\n        floats, default None.\n    header : bool, default True\n        Add the Series header (index name).\n    index : bool, optional\n        Add index (row) labels, default True.\n    length : bool, default False\n        Add the Series length.\n    dtype : bool, default False\n        Add the Series dtype.\n    name : bool, default False\n        Add the Series name if not None.\n    max_rows : int, optional\n        Maximum number of rows to show before truncating. If None, show\n        all.\n    min_rows : int, optional\n        The number of rows to display in a truncated repr (when number\n        of rows is above `max_rows`).\n\n    Returns\n    -------\n    str or None\n        String representation of Series if ``buf=None``, otherwise None.\n    \"\"\"\n    formatter = fmt.SeriesFormatter(\n        self,\n        name=name,\n        length=length,\n        header=header,\n        index=index,\n        dtype=dtype,\n        na_rep=na_rep,\n        float_format=float_format,\n        min_rows=min_rows,\n        max_rows=max_rows,\n    )\n    result = formatter.to_string()\n\n    # catch contract violations\n    if not isinstance(result, str):\n        raise AssertionError(\n            \"result must be of type str, type \"\n            f\"of result is {repr(type(result).__name__)}\"\n        )\n\n    if buf is None:\n        return result\n    else:\n        try:\n            buf.write(result)\n        except AttributeError:\n            with open(buf, \"w\") as f:\n                f.write(result)",
                "@Appender(\n    \"\"\"\n    Examples\n    --------\n    >>> s = pd.Series([\"elk\", \"pig\", \"dog\", \"quetzal\"], name=\"animal\")\n    >>> print(s.to_markdown())\n    |    | animal   |\n    |---:|:---------|\n    |  0 | elk      |\n    |  1 | pig      |\n    |  2 | dog      |\n    |  3 | quetzal  |\n    \"\"\"\n)\n@Substitution(klass=\"Series\")\n@Appender(generic._shared_docs[\"to_markdown\"])\ndef to_markdown(\n    self, buf: Optional[IO[str]] = None, mode: Optional[str] = None, **kwargs\n) -> Optional[str]:\n    return self.to_frame().to_markdown(buf, mode, **kwargs)",
                "def items(self) -> Iterable[Tuple[Label, Any]]:\n    \"\"\"\n    Lazily iterate over (index, value) tuples.\n\n    This method returns an iterable tuple (index, value). This is\n    convenient if you want to create a lazy iterator.\n\n    Returns\n    -------\n    iterable\n        Iterable of tuples containing the (index, value) pairs from a\n        Series.\n\n    See Also\n    --------\n    DataFrame.items : Iterate over (column name, Series) pairs.\n    DataFrame.iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n\n    Examples\n    --------\n    >>> s = pd.Series(['A', 'B', 'C'])\n    >>> for index, value in s.items():\n    ...     print(f\"Index : {index}, Value : {value}\")\n    Index : 0, Value : A\n    Index : 1, Value : B\n    Index : 2, Value : C\n    \"\"\"\n    return zip(iter(self.index), iter(self))",
                "@Appender(items.__doc__)\ndef iteritems(self) -> Iterable[Tuple[Label, Any]]:\n    return self.items()",
                "def keys(self) -> Index:\n    \"\"\"\n    Return alias for index.\n\n    Returns\n    -------\n    Index\n        Index of the Series.\n    \"\"\"\n    return self.index",
                "def to_dict(self, into=dict):\n    \"\"\"\n    Convert Series to {label -> value} dict or dict-like object.\n\n    Parameters\n    ----------\n    into : class, default dict\n        The collections.abc.Mapping subclass to use as the return\n        object. Can be the actual class or an empty\n        instance of the mapping type you want.  If you want a\n        collections.defaultdict, you must pass it initialized.\n\n        .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    collections.abc.Mapping\n        Key-value representation of Series.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s.to_dict()\n    {0: 1, 1: 2, 2: 3, 3: 4}\n    >>> from collections import OrderedDict, defaultdict\n    >>> s.to_dict(OrderedDict)\n    OrderedDict([(0, 1), (1, 2), (2, 3), (3, 4)])\n    >>> dd = defaultdict(list)\n    >>> s.to_dict(dd)\n    defaultdict(<class 'list'>, {0: 1, 1: 2, 2: 3, 3: 4})\n    \"\"\"\n    # GH16122\n    into_c = com.standardize_mapping(into)\n    return into_c(self.items())",
                "def to_frame(self, name=None) -> \"DataFrame\":\n    \"\"\"\n    Convert Series to DataFrame.\n\n    Parameters\n    ----------\n    name : object, default None\n        The passed name should substitute for the series name (if it has\n        one).\n\n    Returns\n    -------\n    DataFrame\n        DataFrame representation of Series.\n\n    Examples\n    --------\n    >>> s = pd.Series([\"a\", \"b\", \"c\"],\n    ...               name=\"vals\")\n    >>> s.to_frame()\n      vals\n    0    a\n    1    b\n    2    c\n    \"\"\"\n    if name is None:\n        df = self._constructor_expanddim(self)\n    else:\n        df = self._constructor_expanddim({name: self})\n\n    return df",
                "def _set_name(self, name, inplace=False) -> \"Series\":\n    \"\"\"\n    Set the Series name.\n\n    Parameters\n    ----------\n    name : str\n    inplace : bool\n        Whether to modify `self` directly or return a copy.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    ser = self if inplace else self.copy()\n    ser.name = name\n    return ser",
                "    @Appender(\n        \"\"\"\nExamples\n--------\n>>> ser = pd.Series([390., 350., 30., 20.],\n...                 index=['Falcon', 'Falcon', 'Parrot', 'Parrot'], name=\"Max Speed\")\n>>> ser\nFalcon    390.0\nFalcon    350.0\nParrot     30.0\nParrot     20.0\nName: Max Speed, dtype: float64\n>>> ser.groupby([\"a\", \"b\", \"a\", \"b\"]).mean()\na    210.0\nb    185.0\nName: Max Speed, dtype: float64\n>>> ser.groupby(level=0).mean()\nFalcon    370.0\nParrot     25.0\nName: Max Speed, dtype: float64\n>>> ser.groupby(ser > 100).mean()\nMax Speed\nFalse     25.0\nTrue     370.0\nName: Max Speed, dtype: float64\n\n**Grouping by Indexes**\n\nWe can groupby different levels of a hierarchical index\nusing the `level` parameter:\n\n>>> arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n...           ['Captive', 'Wild', 'Captive', 'Wild']]\n>>> index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))\n>>> ser = pd.Series([390., 350., 30., 20.], index=index, name=\"Max Speed\")\n>>> ser\nAnimal  Type\nFalcon  Captive    390.0\n        Wild       350.0\nParrot  Captive     30.0\n        Wild        20.0\nName: Max Speed, dtype: float64\n>>> ser.groupby(level=0).mean()\nAnimal\nFalcon    370.0\nParrot     25.0\nName: Max Speed, dtype: float64\n>>> ser.groupby(level=\"Type\").mean()\nType\nCaptive    210.0\nWild       185.0\nName: Max Speed, dtype: float64\n\"\"\"\n    )\n    @Appender(generic._shared_docs[\"groupby\"] % _shared_doc_kwargs)\n    def groupby(\n        self,\n        by=None,\n        axis=0,\n        level=None,\n        as_index: bool = True,\n        sort: bool = True,\n        group_keys: bool = True,\n        squeeze: bool = False,\n        observed: bool = False,\n    ) -> \"SeriesGroupBy\":\n        from pandas.core.groupby.generic import SeriesGroupBy\n\n        if level is None and by is None:\n            raise TypeError(\"You have to supply one of 'by' and 'level'\")\n        axis = self._get_axis_number(axis)\n\n        return SeriesGroupBy(\n            obj=self,\n            keys=by,\n            axis=axis,\n            level=level,\n            as_index=as_index,\n            sort=sort,\n            group_keys=group_keys,\n            squeeze=squeeze,\n            observed=observed,\n        )",
                "def count(self, level=None):\n    \"\"\"\n    Return number of non-NA/null observations in the Series.\n\n    Parameters\n    ----------\n    level : int or level name, default None\n        If the axis is a MultiIndex (hierarchical), count along a\n        particular level, collapsing into a smaller Series.\n\n    Returns\n    -------\n    int or Series (if level specified)\n        Number of non-null values in the Series.\n\n    Examples\n    --------\n    >>> s = pd.Series([0.0, 1.0, np.nan])\n    >>> s.count()\n    2\n    \"\"\"\n    if level is None:\n        return notna(self.array).sum()\n\n    if isinstance(level, str):\n        level = self.index._get_level_number(level)\n\n    lev = self.index.levels[level]\n    level_codes = np.array(self.index.codes[level], subok=False, copy=True)\n\n    mask = level_codes == -1\n    if mask.any():\n        level_codes[mask] = cnt = len(lev)\n        lev = lev.insert(cnt, lev._na_value)\n\n    obs = level_codes[notna(self.values)]\n    out = np.bincount(obs, minlength=len(lev) or None)\n    return self._constructor(out, index=lev, dtype=\"int64\").__finalize__(self)",
                "def mode(self, dropna=True) -> \"Series\":\n    \"\"\"\n    Return the mode(s) of the dataset.\n\n    Always returns Series even if only one value is returned.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't consider counts of NaN/NaT.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series\n        Modes of the Series in sorted order.\n    \"\"\"\n    # TODO: Add option for bins like value_counts()\n    return algorithms.mode(self, dropna=dropna)",
                "def unique(self):\n    \"\"\"\n    Return unique values of Series object.\n\n    Uniques are returned in order of appearance. Hash table-based unique,\n    therefore does NOT sort.\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n        The unique values returned as a NumPy array. See Notes.\n\n    See Also\n    --------\n    unique : Top-level unique method for any 1-d array-like object.\n    Index.unique : Return Index with unique values from an Index object.\n\n    Notes\n    -----\n    Returns the unique values as a NumPy array. In case of an\n    extension-array backed Series, a new\n    :class:`~api.extensions.ExtensionArray` of that type with just\n    the unique values is returned. This includes\n\n        * Categorical\n        * Period\n        * Datetime with Timezone\n        * Interval\n        * Sparse\n        * IntegerNA\n\n    See Examples section.\n\n    Examples\n    --------\n    >>> pd.Series([2, 1, 3, 3], name='A').unique()\n    array([2, 1, 3])\n\n    >>> pd.Series([pd.Timestamp('2016-01-01') for _ in range(3)]).unique()\n    array(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\n    >>> pd.Series([pd.Timestamp('2016-01-01', tz='US/Eastern')\n    ...            for _ in range(3)]).unique()\n    <DatetimeArray>\n    ['2016-01-01 00:00:00-05:00']\n    Length: 1, dtype: datetime64[ns, US/Eastern]\n\n    An unordered Categorical will return categories in the order of\n    appearance.\n\n    >>> pd.Series(pd.Categorical(list('baabc'))).unique()\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    An ordered Categorical preserves the category ordering.\n\n    >>> pd.Series(pd.Categorical(list('baabc'), categories=list('abc'),\n    ...                          ordered=True)).unique()\n    [b, a, c]\n    Categories (3, object): [a < b < c]\n    \"\"\"\n    result = super().unique()\n    return result",
                "def drop_duplicates(self, keep=\"first\", inplace=False) -> \"Series\":\n    \"\"\"\n    Return Series with duplicate values removed.\n\n    Parameters\n    ----------\n    keep : {'first', 'last', ``False``}, default 'first'\n        Method to handle dropping duplicates:\n\n        - 'first' : Drop duplicates except for the first occurrence.\n        - 'last' : Drop duplicates except for the last occurrence.\n        - ``False`` : Drop all duplicates.\n\n    inplace : bool, default ``False``\n        If ``True``, performs operation inplace and returns None.\n\n    Returns\n    -------\n    Series\n        Series with duplicates dropped.\n\n    See Also\n    --------\n    Index.drop_duplicates : Equivalent method on Index.\n    DataFrame.drop_duplicates : Equivalent method on DataFrame.\n    Series.duplicated : Related method on Series, indicating duplicate\n        Series values.\n\n    Examples\n    --------\n    Generate a Series with duplicated entries.\n\n    >>> s = pd.Series(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo'],\n    ...               name='animal')\n    >>> s\n    0      lama\n    1       cow\n    2      lama\n    3    beetle\n    4      lama\n    5     hippo\n    Name: animal, dtype: object\n\n    With the 'keep' parameter, the selection behaviour of duplicated values\n    can be changed. The value 'first' keeps the first occurrence for each\n    set of duplicated entries. The default value of keep is 'first'.\n\n    >>> s.drop_duplicates()\n    0      lama\n    1       cow\n    3    beetle\n    5     hippo\n    Name: animal, dtype: object\n\n    The value 'last' for parameter 'keep' keeps the last occurrence for\n    each set of duplicated entries.\n\n    >>> s.drop_duplicates(keep='last')\n    1       cow\n    3    beetle\n    4      lama\n    5     hippo\n    Name: animal, dtype: object\n\n    The value ``False`` for parameter 'keep' discards all sets of\n    duplicated entries. Setting the value of 'inplace' to ``True`` performs\n    the operation inplace and returns ``None``.\n\n    >>> s.drop_duplicates(keep=False, inplace=True)\n    >>> s\n    1       cow\n    3    beetle\n    5     hippo\n    Name: animal, dtype: object\n    \"\"\"\n    return super().drop_duplicates(keep=keep, inplace=inplace)",
                "def duplicated(self, keep=\"first\") -> \"Series\":\n    \"\"\"\n    Indicate duplicate Series values.\n\n    Duplicated values are indicated as ``True`` values in the resulting\n    Series. Either all duplicates, all except the first or all except the\n    last occurrence of duplicates can be indicated.\n\n    Parameters\n    ----------\n    keep : {'first', 'last', False}, default 'first'\n        Method to handle dropping duplicates:\n\n        - 'first' : Mark duplicates as ``True`` except for the first\n          occurrence.\n        - 'last' : Mark duplicates as ``True`` except for the last\n          occurrence.\n        - ``False`` : Mark all duplicates as ``True``.\n\n    Returns\n    -------\n    Series\n        Series indicating whether each value has occurred in the\n        preceding values.\n\n    See Also\n    --------\n    Index.duplicated : Equivalent method on pandas.Index.\n    DataFrame.duplicated : Equivalent method on pandas.DataFrame.\n    Series.drop_duplicates : Remove duplicate values from Series.\n\n    Examples\n    --------\n    By default, for each set of duplicated values, the first occurrence is\n    set on False and all others on True:\n\n    >>> animals = pd.Series(['lama', 'cow', 'lama', 'beetle', 'lama'])\n    >>> animals.duplicated()\n    0    False\n    1    False\n    2     True\n    3    False\n    4     True\n    dtype: bool\n\n    which is equivalent to\n\n    >>> animals.duplicated(keep='first')\n    0    False\n    1    False\n    2     True\n    3    False\n    4     True\n    dtype: bool\n\n    By using 'last', the last occurrence of each set of duplicated values\n    is set on False and all others on True:\n\n    >>> animals.duplicated(keep='last')\n    0     True\n    1    False\n    2     True\n    3    False\n    4    False\n    dtype: bool\n\n    By setting keep on ``False``, all duplicates are True:\n\n    >>> animals.duplicated(keep=False)\n    0     True\n    1    False\n    2     True\n    3    False\n    4     True\n    dtype: bool\n    \"\"\"\n    return super().duplicated(keep=keep)",
                "def idxmin(self, axis=0, skipna=True, *args, **kwargs):\n    \"\"\"\n    Return the row label of the minimum value.\n\n    If multiple values equal the minimum, the first row label with that\n    value is returned.\n\n    Parameters\n    ----------\n    axis : int, default 0\n        For compatibility with DataFrame.idxmin. Redundant for application\n        on Series.\n    skipna : bool, default True\n        Exclude NA/null values. If the entire Series is NA, the result\n        will be NA.\n    *args, **kwargs\n        Additional arguments and keywords have no effect but might be\n        accepted for compatibility with NumPy.\n\n    Returns\n    -------\n    Index\n        Label of the minimum value.\n\n    Raises\n    ------\n    ValueError\n        If the Series is empty.\n\n    See Also\n    --------\n    numpy.argmin : Return indices of the minimum values\n        along the given axis.\n    DataFrame.idxmin : Return index of first occurrence of minimum\n        over requested axis.\n    Series.idxmax : Return index *label* of the first occurrence\n        of maximum of values.\n\n    Notes\n    -----\n    This method is the Series version of ``ndarray.argmin``. This method\n    returns the label of the minimum, while ``ndarray.argmin`` returns\n    the position. To get the position, use ``series.values.argmin()``.\n\n    Examples\n    --------\n    >>> s = pd.Series(data=[1, None, 4, 1],\n    ...               index=['A', 'B', 'C', 'D'])\n    >>> s\n    A    1.0\n    B    NaN\n    C    4.0\n    D    1.0\n    dtype: float64\n\n    >>> s.idxmin()\n    'A'\n\n    If `skipna` is False and there is an NA value in the data,\n    the function returns ``nan``.\n\n    >>> s.idxmin(skipna=False)\n    nan\n    \"\"\"\n    skipna = nv.validate_argmin_with_skipna(skipna, args, kwargs)\n    i = nanops.nanargmin(com.values_from_object(self), skipna=skipna)\n    if i == -1:\n        return np.nan\n    return self.index[i]",
                "def idxmax(self, axis=0, skipna=True, *args, **kwargs):\n    \"\"\"\n    Return the row label of the maximum value.\n\n    If multiple values equal the maximum, the first row label with that\n    value is returned.\n\n    Parameters\n    ----------\n    axis : int, default 0\n        For compatibility with DataFrame.idxmax. Redundant for application\n        on Series.\n    skipna : bool, default True\n        Exclude NA/null values. If the entire Series is NA, the result\n        will be NA.\n    *args, **kwargs\n        Additional arguments and keywords have no effect but might be\n        accepted for compatibility with NumPy.\n\n    Returns\n    -------\n    Index\n        Label of the maximum value.\n\n    Raises\n    ------\n    ValueError\n        If the Series is empty.\n\n    See Also\n    --------\n    numpy.argmax : Return indices of the maximum values\n        along the given axis.\n    DataFrame.idxmax : Return index of first occurrence of maximum\n        over requested axis.\n    Series.idxmin : Return index *label* of the first occurrence\n        of minimum of values.\n\n    Notes\n    -----\n    This method is the Series version of ``ndarray.argmax``. This method\n    returns the label of the maximum, while ``ndarray.argmax`` returns\n    the position. To get the position, use ``series.values.argmax()``.\n\n    Examples\n    --------\n    >>> s = pd.Series(data=[1, None, 4, 3, 4],\n    ...               index=['A', 'B', 'C', 'D', 'E'])\n    >>> s\n    A    1.0\n    B    NaN\n    C    4.0\n    D    3.0\n    E    4.0\n    dtype: float64\n\n    >>> s.idxmax()\n    'C'\n\n    If `skipna` is False and there is an NA value in the data,\n    the function returns ``nan``.\n\n    >>> s.idxmax(skipna=False)\n    nan\n    \"\"\"\n    skipna = nv.validate_argmax_with_skipna(skipna, args, kwargs)\n    i = nanops.nanargmax(com.values_from_object(self), skipna=skipna)\n    if i == -1:\n        return np.nan\n    return self.index[i]",
                "def round(self, decimals=0, *args, **kwargs) -> \"Series\":\n    \"\"\"\n    Round each value in a Series to the given number of decimals.\n\n    Parameters\n    ----------\n    decimals : int, default 0\n        Number of decimal places to round to. If decimals is negative,\n        it specifies the number of positions to the left of the decimal point.\n\n    Returns\n    -------\n    Series\n        Rounded values of the Series.\n\n    See Also\n    --------\n    numpy.around : Round values of an np.array.\n    DataFrame.round : Round values of a DataFrame.\n\n    Examples\n    --------\n    >>> s = pd.Series([0.1, 1.3, 2.7])\n    >>> s.round()\n    0    0.0\n    1    1.0\n    2    3.0\n    dtype: float64\n    \"\"\"\n    nv.validate_round(args, kwargs)\n    result = com.values_from_object(self).round(decimals)\n    result = self._constructor(result, index=self.index).__finalize__(self)\n\n    return result",
                "def quantile(self, q=0.5, interpolation=\"linear\"):\n    \"\"\"\n    Return value at the given quantile.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        The quantile(s) to compute, which can lie in range: 0 <= q <= 1.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        This optional parameter specifies the interpolation method to use,\n        when the desired quantile lies between two data points `i` and `j`:\n\n            * linear: `i + (j - i) * fraction`, where `fraction` is the\n              fractional part of the index surrounded by `i` and `j`.\n            * lower: `i`.\n            * higher: `j`.\n            * nearest: `i` or `j` whichever is nearest.\n            * midpoint: (`i` + `j`) / 2.\n\n    Returns\n    -------\n    float or Series\n        If ``q`` is an array, a Series will be returned where the\n        index is ``q`` and the values are the quantiles, otherwise\n        a float will be returned.\n\n    See Also\n    --------\n    core.window.Rolling.quantile\n    numpy.percentile\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s.quantile(.5)\n    2.5\n    >>> s.quantile([.25, .5, .75])\n    0.25    1.75\n    0.50    2.50\n    0.75    3.25\n    dtype: float64\n    \"\"\"\n    validate_percentile(q)\n\n    # We dispatch to DataFrame so that core.internals only has to worry\n    #  about 2D cases.\n    df = self.to_frame()\n\n    result = df.quantile(q=q, interpolation=interpolation, numeric_only=False)\n    if result.ndim == 2:\n        result = result.iloc[:, 0]\n\n    if is_list_like(q):\n        result.name = self.name\n        return self._constructor(result, index=Float64Index(q), name=self.name)\n    else:\n        # scalar\n        return result.iloc[0]",
                "def corr(self, other, method=\"pearson\", min_periods=None) -> float:\n    \"\"\"\n    Compute correlation with `other` Series, excluding missing values.\n\n    Parameters\n    ----------\n    other : Series\n        Series with which to compute the correlation.\n    method : {'pearson', 'kendall', 'spearman'} or callable\n        Method used to compute correlation:\n\n        - pearson : Standard correlation coefficient\n        - kendall : Kendall Tau correlation coefficient\n        - spearman : Spearman rank correlation\n        - callable: Callable with input two 1d ndarrays and returning a float.\n\n        .. versionadded:: 0.24.0\n            Note that the returned matrix from corr will have 1 along the\n            diagonals and will be symmetric regardless of the callable's\n            behavior.\n    min_periods : int, optional\n        Minimum number of observations needed to have a valid result.\n\n    Returns\n    -------\n    float\n        Correlation with other.\n\n    Examples\n    --------\n    >>> def histogram_intersection(a, b):\n    ...     v = np.minimum(a, b).sum().round(decimals=1)\n    ...     return v\n    >>> s1 = pd.Series([.2, .0, .6, .2])\n    >>> s2 = pd.Series([.3, .6, .0, .1])\n    >>> s1.corr(s2, method=histogram_intersection)\n    0.3\n    \"\"\"\n    this, other = self.align(other, join=\"inner\", copy=False)\n    if len(this) == 0:\n        return np.nan\n\n    if method in [\"pearson\", \"spearman\", \"kendall\"] or callable(method):\n        return nanops.nancorr(\n            this.values, other.values, method=method, min_periods=min_periods\n        )\n\n    raise ValueError(\n        \"method must be either 'pearson', \"\n        \"'spearman', 'kendall', or a callable, \"\n        f\"'{method}' was supplied\"\n    )",
                "def cov(self, other, min_periods=None) -> float:\n    \"\"\"\n    Compute covariance with Series, excluding missing values.\n\n    Parameters\n    ----------\n    other : Series\n        Series with which to compute the covariance.\n    min_periods : int, optional\n        Minimum number of observations needed to have a valid result.\n\n    Returns\n    -------\n    float\n        Covariance between Series and other normalized by N-1\n        (unbiased estimator).\n\n    Examples\n    --------\n    >>> s1 = pd.Series([0.90010907, 0.13484424, 0.62036035])\n    >>> s2 = pd.Series([0.12528585, 0.26962463, 0.51111198])\n    >>> s1.cov(s2)\n    -0.01685762652715874\n    \"\"\"\n    this, other = self.align(other, join=\"inner\", copy=False)\n    if len(this) == 0:\n        return np.nan\n    return nanops.nancov(this.values, other.values, min_periods=min_periods)",
                "def diff(self, periods=1) -> \"Series\":\n    \"\"\"\n    First discrete difference of element.\n\n    Calculates the difference of a Series element compared with another\n    element in the Series (default is element in previous row).\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Periods to shift for calculating difference, accepts negative\n        values.\n\n    Returns\n    -------\n    Series\n        First differences of the Series.\n\n    See Also\n    --------\n    Series.pct_change: Percent change over given number of periods.\n    Series.shift: Shift index by desired number of periods with an\n        optional time freq.\n    DataFrame.diff: First discrete difference of object.\n\n    Notes\n    -----\n    For boolean dtypes, this uses :meth:`operator.xor` rather than\n    :meth:`operator.sub`.\n\n    Examples\n    --------\n    Difference with previous row\n\n    >>> s = pd.Series([1, 1, 2, 3, 5, 8])\n    >>> s.diff()\n    0    NaN\n    1    0.0\n    2    1.0\n    3    1.0\n    4    2.0\n    5    3.0\n    dtype: float64\n\n    Difference with 3rd previous row\n\n    >>> s.diff(periods=3)\n    0    NaN\n    1    NaN\n    2    NaN\n    3    2.0\n    4    4.0\n    5    6.0\n    dtype: float64\n\n    Difference with following row\n\n    >>> s.diff(periods=-1)\n    0    0.0\n    1   -1.0\n    2   -1.0\n    3   -2.0\n    4   -3.0\n    5    NaN\n    dtype: float64\n    \"\"\"\n    result = algorithms.diff(self.array, periods)\n    return self._constructor(result, index=self.index).__finalize__(self)",
                "def autocorr(self, lag=1) -> float:\n    \"\"\"\n    Compute the lag-N autocorrelation.\n\n    This method computes the Pearson correlation between\n    the Series and its shifted self.\n\n    Parameters\n    ----------\n    lag : int, default 1\n        Number of lags to apply before performing autocorrelation.\n\n    Returns\n    -------\n    float\n        The Pearson correlation between self and self.shift(lag).\n\n    See Also\n    --------\n    Series.corr : Compute the correlation between two Series.\n    Series.shift : Shift index by desired number of periods.\n    DataFrame.corr : Compute pairwise correlation of columns.\n    DataFrame.corrwith : Compute pairwise correlation between rows or\n        columns of two DataFrame objects.\n\n    Notes\n    -----\n    If the Pearson correlation is not well defined return 'NaN'.\n\n    Examples\n    --------\n    >>> s = pd.Series([0.25, 0.5, 0.2, -0.05])\n    >>> s.autocorr()  # doctest: +ELLIPSIS\n    0.10355...\n    >>> s.autocorr(lag=2)  # doctest: +ELLIPSIS\n    -0.99999...\n\n    If the Pearson correlation is not well defined, then 'NaN' is returned.\n\n    >>> s = pd.Series([1, 0, 0, 0])\n    >>> s.autocorr()\n    nan\n    \"\"\"\n    return self.corr(self.shift(lag))",
                "def dot(self, other):\n    \"\"\"\n    Compute the dot product between the Series and the columns of other.\n\n    This method computes the dot product between the Series and another\n    one, or the Series and each columns of a DataFrame, or the Series and\n    each columns of an array.\n\n    It can also be called using `self @ other` in Python >= 3.5.\n\n    Parameters\n    ----------\n    other : Series, DataFrame or array-like\n        The other object to compute the dot product with its columns.\n\n    Returns\n    -------\n    scalar, Series or numpy.ndarray\n        Return the dot product of the Series and other if other is a\n        Series, the Series of the dot product of Series and each rows of\n        other if other is a DataFrame or a numpy.ndarray between the Series\n        and each columns of the numpy array.\n\n    See Also\n    --------\n    DataFrame.dot: Compute the matrix product with the DataFrame.\n    Series.mul: Multiplication of series and other, element-wise.\n\n    Notes\n    -----\n    The Series and other has to share the same index if other is a Series\n    or a DataFrame.\n\n    Examples\n    --------\n    >>> s = pd.Series([0, 1, 2, 3])\n    >>> other = pd.Series([-1, 2, -3, 4])\n    >>> s.dot(other)\n    8\n    >>> s @ other\n    8\n    >>> df = pd.DataFrame([[0, 1], [-2, 3], [4, -5], [6, 7]])\n    >>> s.dot(df)\n    0    24\n    1    14\n    dtype: int64\n    >>> arr = np.array([[0, 1], [-2, 3], [4, -5], [6, 7]])\n    >>> s.dot(arr)\n    array([24, 14])\n    \"\"\"\n    if isinstance(other, (Series, ABCDataFrame)):\n        common = self.index.union(other.index)\n        if len(common) > len(self.index) or len(common) > len(other.index):\n            raise ValueError(\"matrices are not aligned\")\n\n        left = self.reindex(index=common, copy=False)\n        right = other.reindex(index=common, copy=False)\n        lvals = left.values\n        rvals = right.values\n    else:\n        lvals = self.values\n        rvals = np.asarray(other)\n        if lvals.shape[0] != rvals.shape[0]:\n            raise Exception(\n                f\"Dot product shape mismatch, {lvals.shape} vs {rvals.shape}\"\n            )\n\n    if isinstance(other, ABCDataFrame):\n        return self._constructor(\n            np.dot(lvals, rvals), index=other.columns\n        ).__finalize__(self)\n    elif isinstance(other, Series):\n        return np.dot(lvals, rvals)\n    elif isinstance(rvals, np.ndarray):\n        return np.dot(lvals, rvals)\n    else:  # pragma: no cover\n        raise TypeError(f\"unsupported type: {type(other)}\")",
                "def __matmul__(self, other):\n    \"\"\"\n    Matrix multiplication using binary `@` operator in Python>=3.5.\n    \"\"\"\n    return self.dot(other)",
                "def __rmatmul__(self, other):\n    \"\"\"\n    Matrix multiplication using binary `@` operator in Python>=3.5.\n    \"\"\"\n    return self.dot(np.transpose(other))",
                "@Substitution(klass=\"Series\")\n@Appender(base._shared_docs[\"searchsorted\"])\ndef searchsorted(self, value, side=\"left\", sorter=None):\n    return algorithms.searchsorted(self._values, value, side=side, sorter=sorter)",
                "def append(self, to_append, ignore_index=False, verify_integrity=False):\n    \"\"\"\n    Concatenate two or more Series.\n\n    Parameters\n    ----------\n    to_append : Series or list/tuple of Series\n        Series to append with self.\n    ignore_index : bool, default False\n        If True, do not use the index labels.\n    verify_integrity : bool, default False\n        If True, raise Exception on creating index with duplicates.\n\n    Returns\n    -------\n    Series\n        Concatenated Series.\n\n    See Also\n    --------\n    concat : General function to concatenate DataFrame or Series objects.\n\n    Notes\n    -----\n    Iteratively appending to a Series can be more computationally intensive\n    than a single concatenate. A better solution is to append values to a\n    list and then concatenate the list with the original Series all at\n    once.\n\n    Examples\n    --------\n    >>> s1 = pd.Series([1, 2, 3])\n    >>> s2 = pd.Series([4, 5, 6])\n    >>> s3 = pd.Series([4, 5, 6], index=[3, 4, 5])\n    >>> s1.append(s2)\n    0    1\n    1    2\n    2    3\n    0    4\n    1    5\n    2    6\n    dtype: int64\n\n    >>> s1.append(s3)\n    0    1\n    1    2\n    2    3\n    3    4\n    4    5\n    5    6\n    dtype: int64\n\n    With `ignore_index` set to True:\n\n    >>> s1.append(s2, ignore_index=True)\n    0    1\n    1    2\n    2    3\n    3    4\n    4    5\n    5    6\n    dtype: int64\n\n    With `verify_integrity` set to True:\n\n    >>> s1.append(s2, verify_integrity=True)\n    Traceback (most recent call last):\n    ...\n    ValueError: Indexes have overlapping values: [0, 1, 2]\n    \"\"\"\n    from pandas.core.reshape.concat import concat\n\n    if isinstance(to_append, (list, tuple)):\n        to_concat = [self]\n        to_concat.extend(to_append)\n    else:\n        to_concat = [self, to_append]\n    return concat(\n        to_concat, ignore_index=ignore_index, verify_integrity=verify_integrity\n    )",
                "def _binop(self, other, func, level=None, fill_value=None):\n    \"\"\"\n    Perform generic binary operation with optional fill value.\n\n    Parameters\n    ----------\n    other : Series\n    func : binary operator\n    fill_value : float or object\n        Value to substitute for NA/null values. If both Series are NA in a\n        location, the result will be NA regardless of the passed fill value.\n    level : int or level name, default None\n        Broadcast across a level, matching Index values on the\n        passed MultiIndex level.\n\n    Returns\n    -------\n    Series\n    \"\"\"\n    if not isinstance(other, Series):\n        raise AssertionError(\"Other operand must be Series\")\n\n    new_index = self.index\n    this = self\n\n    if not self.index.equals(other.index):\n        this, other = self.align(other, level=level, join=\"outer\", copy=False)\n        new_index = this.index\n\n    this_vals, other_vals = ops.fill_binop(this.values, other.values, fill_value)\n\n    with np.errstate(all=\"ignore\"):\n        result = func(this_vals, other_vals)\n\n    name = ops.get_op_result_name(self, other)\n    ret = ops._construct_result(self, result, new_index, name)\n    return ret",
                "def combine(self, other, func, fill_value=None) -> \"Series\":\n    \"\"\"\n    Combine the Series with a Series or scalar according to `func`.\n\n    Combine the Series and `other` using `func` to perform elementwise\n    selection for combined Series.\n    `fill_value` is assumed when value is missing at some index\n    from one of the two objects being combined.\n\n    Parameters\n    ----------\n    other : Series or scalar\n        The value(s) to be combined with the `Series`.\n    func : function\n        Function that takes two scalars as inputs and returns an element.\n    fill_value : scalar, optional\n        The value to assume when an index is missing from\n        one Series or the other. The default specifies to use the\n        appropriate NaN value for the underlying dtype of the Series.\n\n    Returns\n    -------\n    Series\n        The result of combining the Series with the other object.\n\n    See Also\n    --------\n    Series.combine_first : Combine Series values, choosing the calling\n        Series' values first.\n\n    Examples\n    --------\n    Consider 2 Datasets ``s1`` and ``s2`` containing\n    highest clocked speeds of different birds.\n\n    >>> s1 = pd.Series({'falcon': 330.0, 'eagle': 160.0})\n    >>> s1\n    falcon    330.0\n    eagle     160.0\n    dtype: float64\n    >>> s2 = pd.Series({'falcon': 345.0, 'eagle': 200.0, 'duck': 30.0})\n    >>> s2\n    falcon    345.0\n    eagle     200.0\n    duck       30.0\n    dtype: float64\n\n    Now, to combine the two datasets and view the highest speeds\n    of the birds across the two datasets\n\n    >>> s1.combine(s2, max)\n    duck        NaN\n    eagle     200.0\n    falcon    345.0\n    dtype: float64\n\n    In the previous example, the resulting value for duck is missing,\n    because the maximum of a NaN and a float is a NaN.\n    So, in the example, we set ``fill_value=0``,\n    so the maximum value returned will be the value from some dataset.\n\n    >>> s1.combine(s2, max, fill_value=0)\n    duck       30.0\n    eagle     200.0\n    falcon    345.0\n    dtype: float64\n    \"\"\"\n    if fill_value is None:\n        fill_value = na_value_for_dtype(self.dtype, compat=False)\n\n    if isinstance(other, Series):\n        # If other is a Series, result is based on union of Series,\n        # so do this element by element\n        new_index = self.index.union(other.index)\n        new_name = ops.get_op_result_name(self, other)\n        new_values = []\n        for idx in new_index:\n            lv = self.get(idx, fill_value)\n            rv = other.get(idx, fill_value)\n            with np.errstate(all=\"ignore\"):\n                new_values.append(func(lv, rv))\n    else:\n        # Assume that other is a scalar, so apply the function for\n        # each element in the Series\n        new_index = self.index\n        with np.errstate(all=\"ignore\"):\n            new_values = [func(lv, other) for lv in self._values]\n        new_name = self.name\n\n    if is_categorical_dtype(self.values):\n        pass\n    elif is_extension_array_dtype(self.values):\n        # The function can return something of any type, so check\n        # if the type is compatible with the calling EA.\n        new_values = try_cast_to_ea(self._values, new_values)\n    return self._constructor(new_values, index=new_index, name=new_name)",
                "def combine_first(self, other) -> \"Series\":\n    \"\"\"\n    Combine Series values, choosing the calling Series's values first.\n\n    Parameters\n    ----------\n    other : Series\n        The value(s) to be combined with the `Series`.\n\n    Returns\n    -------\n    Series\n        The result of combining the Series with the other object.\n\n    See Also\n    --------\n    Series.combine : Perform elementwise operation on two Series\n        using a given function.\n\n    Notes\n    -----\n    Result index will be the union of the two indexes.\n\n    Examples\n    --------\n    >>> s1 = pd.Series([1, np.nan])\n    >>> s2 = pd.Series([3, 4])\n    >>> s1.combine_first(s2)\n    0    1.0\n    1    4.0\n    dtype: float64\n    \"\"\"\n    new_index = self.index.union(other.index)\n    this = self.reindex(new_index, copy=False)\n    other = other.reindex(new_index, copy=False)\n    if this.dtype.kind == \"M\" and other.dtype.kind != \"M\":\n        other = to_datetime(other)\n\n    return this.where(notna(this), other)",
                "def update(self, other) -> None:\n    \"\"\"\n    Modify Series in place using non-NA values from passed\n    Series. Aligns on index.\n\n    Parameters\n    ----------\n    other : Series\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3])\n    >>> s.update(pd.Series([4, 5, 6]))\n    >>> s\n    0    4\n    1    5\n    2    6\n    dtype: int64\n\n    >>> s = pd.Series(['a', 'b', 'c'])\n    >>> s.update(pd.Series(['d', 'e'], index=[0, 2]))\n    >>> s\n    0    d\n    1    b\n    2    e\n    dtype: object\n\n    >>> s = pd.Series([1, 2, 3])\n    >>> s.update(pd.Series([4, 5, 6, 7, 8]))\n    >>> s\n    0    4\n    1    5\n    2    6\n    dtype: int64\n\n    If ``other`` contains NaNs the corresponding values are not updated\n    in the original Series.\n\n    >>> s = pd.Series([1, 2, 3])\n    >>> s.update(pd.Series([4, np.nan, 6]))\n    >>> s\n    0    4\n    1    2\n    2    6\n    dtype: int64\n    \"\"\"\n    other = other.reindex_like(self)\n    mask = notna(other)\n\n    self._data = self._data.putmask(mask=mask, new=other, inplace=True)\n    self._maybe_update_cacher()",
                "def sort_values(\n    self,\n    axis=0,\n    ascending=True,\n    inplace: bool = False,\n    kind: str = \"quicksort\",\n    na_position: str = \"last\",\n    ignore_index: bool = False,\n):\n    \"\"\"\n    Sort by the values.\n\n    Sort a Series in ascending or descending order by some\n    criterion.\n\n    Parameters\n    ----------\n    axis : {0 or 'index'}, default 0\n        Axis to direct sorting. The value 'index' is accepted for\n        compatibility with DataFrame.sort_values.\n    ascending : bool, default True\n        If True, sort values in ascending order, otherwise descending.\n    inplace : bool, default False\n        If True, perform operation in-place.\n    kind : {'quicksort', 'mergesort' or 'heapsort'}, default 'quicksort'\n        Choice of sorting algorithm. See also :func:`numpy.sort` for more\n        information. 'mergesort' is the only stable  algorithm.\n    na_position : {'first' or 'last'}, default 'last'\n        Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at\n        the end.\n    ignore_index : bool, default False\n         If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n         .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    Series\n        Series ordered by values.\n\n    See Also\n    --------\n    Series.sort_index : Sort by the Series indices.\n    DataFrame.sort_values : Sort DataFrame by the values along either axis.\n    DataFrame.sort_index : Sort DataFrame by indices.\n\n    Examples\n    --------\n    >>> s = pd.Series([np.nan, 1, 3, 10, 5])\n    >>> s\n    0     NaN\n    1     1.0\n    2     3.0\n    3     10.0\n    4     5.0\n    dtype: float64\n\n    Sort values ascending order (default behaviour)\n\n    >>> s.sort_values(ascending=True)\n    1     1.0\n    2     3.0\n    4     5.0\n    3    10.0\n    0     NaN\n    dtype: float64\n\n    Sort values descending order\n\n    >>> s.sort_values(ascending=False)\n    3    10.0\n    4     5.0\n    2     3.0\n    1     1.0\n    0     NaN\n    dtype: float64\n\n    Sort values inplace\n\n    >>> s.sort_values(ascending=False, inplace=True)\n    >>> s\n    3    10.0\n    4     5.0\n    2     3.0\n    1     1.0\n    0     NaN\n    dtype: float64\n\n    Sort values putting NAs first\n\n    >>> s.sort_values(na_position='first')\n    0     NaN\n    1     1.0\n    2     3.0\n    4     5.0\n    3    10.0\n    dtype: float64\n\n    Sort a series of strings\n\n    >>> s = pd.Series(['z', 'b', 'd', 'a', 'c'])\n    >>> s\n    0    z\n    1    b\n    2    d\n    3    a\n    4    c\n    dtype: object\n\n    >>> s.sort_values()\n    3    a\n    1    b\n    4    c\n    2    d\n    0    z\n    dtype: object\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    # Validate the axis parameter\n    self._get_axis_number(axis)\n\n    # GH 5856/5853\n    if inplace and self._is_cached:\n        raise ValueError(\n            \"This Series is a view of some other array, to \"\n            \"sort in-place you must create a copy\"\n        )\n\n    def _try_kind_sort(arr):\n        # easier to ask forgiveness than permission\n        try:\n            # if kind==mergesort, it can fail for object dtype\n            return arr.argsort(kind=kind)\n        except TypeError:\n            # stable sort not available for object dtype\n            # uses the argsort default quicksort\n            return arr.argsort(kind=\"quicksort\")\n\n    arr = self._values\n    sorted_index = np.empty(len(self), dtype=np.int32)\n\n    bad = isna(arr)\n\n    good = ~bad\n    idx = ibase.default_index(len(self))\n\n    argsorted = _try_kind_sort(arr[good])\n\n    if is_list_like(ascending):\n        if len(ascending) != 1:\n            raise ValueError(\n                f\"Length of ascending ({len(ascending)}) must be 1 for Series\"\n            )\n        ascending = ascending[0]\n\n    if not is_bool(ascending):\n        raise ValueError(\"ascending must be boolean\")\n\n    if not ascending:\n        argsorted = argsorted[::-1]\n\n    if na_position == \"last\":\n        n = good.sum()\n        sorted_index[:n] = idx[good][argsorted]\n        sorted_index[n:] = idx[bad]\n    elif na_position == \"first\":\n        n = bad.sum()\n        sorted_index[n:] = idx[good][argsorted]\n        sorted_index[:n] = idx[bad]\n    else:\n        raise ValueError(f\"invalid na_position: {na_position}\")\n\n    result = self._constructor(arr[sorted_index], index=self.index[sorted_index])\n\n    if ignore_index:\n        result.index = ibase.default_index(len(sorted_index))\n\n    if inplace:\n        self._update_inplace(result)\n    else:\n        return result.__finalize__(self)",
                "def sort_index(\n    self,\n    axis=0,\n    level=None,\n    ascending: bool = True,\n    inplace: bool = False,\n    kind: str = \"quicksort\",\n    na_position: str = \"last\",\n    sort_remaining: bool = True,\n    ignore_index: bool = False,\n):\n    \"\"\"\n    Sort Series by index labels.\n\n    Returns a new Series sorted by label if `inplace` argument is\n    ``False``, otherwise updates the original series and returns None.\n\n    Parameters\n    ----------\n    axis : int, default 0\n        Axis to direct sorting. This can only be 0 for Series.\n    level : int, optional\n        If not None, sort on values in specified index level(s).\n    ascending : bool or list of bools, default True\n        Sort ascending vs. descending. When the index is a MultiIndex the\n        sort direction can be controlled for each level individually.\n    inplace : bool, default False\n        If True, perform operation in-place.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n        Choice of sorting algorithm. See also :func:`numpy.sort` for more\n        information.  'mergesort' is the only stable algorithm. For\n        DataFrames, this option is only applied when sorting on a single\n        column or label.\n    na_position : {'first', 'last'}, default 'last'\n        If 'first' puts NaNs at the beginning, 'last' puts NaNs at the end.\n        Not implemented for MultiIndex.\n    sort_remaining : bool, default True\n        If True and sorting by level and index is multilevel, sort by other\n        levels too (in order) after sorting by specified level.\n    ignore_index : bool, default False\n        If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n        .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    Series\n        The original Series sorted by the labels.\n\n    See Also\n    --------\n    DataFrame.sort_index: Sort DataFrame by the index.\n    DataFrame.sort_values: Sort DataFrame by the value.\n    Series.sort_values : Sort Series by the value.\n\n    Examples\n    --------\n    >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, 4])\n    >>> s.sort_index()\n    1    c\n    2    b\n    3    a\n    4    d\n    dtype: object\n\n    Sort Descending\n\n    >>> s.sort_index(ascending=False)\n    4    d\n    3    a\n    2    b\n    1    c\n    dtype: object\n\n    Sort Inplace\n\n    >>> s.sort_index(inplace=True)\n    >>> s\n    1    c\n    2    b\n    3    a\n    4    d\n    dtype: object\n\n    By default NaNs are put at the end, but use `na_position` to place\n    them at the beginning\n\n    >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, np.nan])\n    >>> s.sort_index(na_position='first')\n    NaN     d\n     1.0    c\n     2.0    b\n     3.0    a\n    dtype: object\n\n    Specify index level to sort\n\n    >>> arrays = [np.array(['qux', 'qux', 'foo', 'foo',\n    ...                     'baz', 'baz', 'bar', 'bar']),\n    ...           np.array(['two', 'one', 'two', 'one',\n    ...                     'two', 'one', 'two', 'one'])]\n    >>> s = pd.Series([1, 2, 3, 4, 5, 6, 7, 8], index=arrays)\n    >>> s.sort_index(level=1)\n    bar  one    8\n    baz  one    6\n    foo  one    4\n    qux  one    2\n    bar  two    7\n    baz  two    5\n    foo  two    3\n    qux  two    1\n    dtype: int64\n\n    Does not sort by remaining levels when sorting by levels\n\n    >>> s.sort_index(level=1, sort_remaining=False)\n    qux  one    2\n    foo  one    4\n    baz  one    6\n    bar  one    8\n    qux  two    1\n    foo  two    3\n    baz  two    5\n    bar  two    7\n    dtype: int64\n    \"\"\"\n    # TODO: this can be combined with DataFrame.sort_index impl as\n    # almost identical\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    # Validate the axis parameter\n    self._get_axis_number(axis)\n    index = self.index\n\n    if level is not None:\n        new_index, indexer = index.sortlevel(\n            level, ascending=ascending, sort_remaining=sort_remaining\n        )\n    elif isinstance(index, MultiIndex):\n        from pandas.core.sorting import lexsort_indexer\n\n        labels = index._sort_levels_monotonic()\n        indexer = lexsort_indexer(\n            labels._get_codes_for_sorting(),\n            orders=ascending,\n            na_position=na_position,\n        )\n    else:\n        from pandas.core.sorting import nargsort\n\n        # Check monotonic-ness before sort an index\n        # GH11080\n        if (ascending and index.is_monotonic_increasing) or (\n            not ascending and index.is_monotonic_decreasing\n        ):\n            if inplace:\n                return\n            else:\n                return self.copy()\n\n        indexer = nargsort(\n            index, kind=kind, ascending=ascending, na_position=na_position\n        )\n\n    indexer = ensure_platform_int(indexer)\n    new_index = index.take(indexer)\n    new_index = new_index._sort_levels_monotonic()\n\n    new_values = self._values.take(indexer)\n    result = self._constructor(new_values, index=new_index)\n\n    if ignore_index:\n        result.index = ibase.default_index(len(result))\n\n    if inplace:\n        self._update_inplace(result)\n    else:\n        return result.__finalize__(self)",
                "def argsort(self, axis=0, kind=\"quicksort\", order=None) -> \"Series\":\n    \"\"\"\n    Override ndarray.argsort. Argsorts the value, omitting NA/null values,\n    and places the result in the same locations as the non-NA values.\n\n    Parameters\n    ----------\n    axis : {0 or \"index\"}\n        Has no effect but is accepted for compatibility with numpy.\n    kind : {'mergesort', 'quicksort', 'heapsort'}, default 'quicksort'\n        Choice of sorting algorithm. See np.sort for more\n        information. 'mergesort' is the only stable algorithm.\n    order : None\n        Has no effect but is accepted for compatibility with numpy.\n\n    Returns\n    -------\n    Series\n        Positions of values within the sort order with -1 indicating\n        nan values.\n\n    See Also\n    --------\n    numpy.ndarray.argsort\n    \"\"\"\n    values = self._values\n    mask = isna(values)\n\n    if mask.any():\n        result = Series(-1, index=self.index, name=self.name, dtype=\"int64\")\n        notmask = ~mask\n        result[notmask] = np.argsort(values[notmask], kind=kind)\n        return self._constructor(result, index=self.index).__finalize__(self)\n    else:\n        return self._constructor(\n            np.argsort(values, kind=kind), index=self.index, dtype=\"int64\"\n        ).__finalize__(self)",
                "def nlargest(self, n=5, keep=\"first\") -> \"Series\":\n    \"\"\"\n    Return the largest `n` elements.\n\n    Parameters\n    ----------\n    n : int, default 5\n        Return this many descending sorted values.\n    keep : {'first', 'last', 'all'}, default 'first'\n        When there are duplicate values that cannot all fit in a\n        Series of `n` elements:\n\n        - ``first`` : return the first `n` occurrences in order\n            of appearance.\n        - ``last`` : return the last `n` occurrences in reverse\n            order of appearance.\n        - ``all`` : keep all occurrences. This can result in a Series of\n            size larger than `n`.\n\n    Returns\n    -------\n    Series\n        The `n` largest values in the Series, sorted in decreasing order.\n\n    See Also\n    --------\n    Series.nsmallest: Get the `n` smallest elements.\n    Series.sort_values: Sort Series by values.\n    Series.head: Return the first `n` rows.\n\n    Notes\n    -----\n    Faster than ``.sort_values(ascending=False).head(n)`` for small `n`\n    relative to the size of the ``Series`` object.\n\n    Examples\n    --------\n    >>> countries_population = {\"Italy\": 59000000, \"France\": 65000000,\n    ...                         \"Malta\": 434000, \"Maldives\": 434000,\n    ...                         \"Brunei\": 434000, \"Iceland\": 337000,\n    ...                         \"Nauru\": 11300, \"Tuvalu\": 11300,\n    ...                         \"Anguilla\": 11300, \"Monserat\": 5200}\n    >>> s = pd.Series(countries_population)\n    >>> s\n    Italy       59000000\n    France      65000000\n    Malta         434000\n    Maldives      434000\n    Brunei        434000\n    Iceland       337000\n    Nauru          11300\n    Tuvalu         11300\n    Anguilla       11300\n    Monserat        5200\n    dtype: int64\n\n    The `n` largest elements where ``n=5`` by default.\n\n    >>> s.nlargest()\n    France      65000000\n    Italy       59000000\n    Malta         434000\n    Maldives      434000\n    Brunei        434000\n    dtype: int64\n\n    The `n` largest elements where ``n=3``. Default `keep` value is 'first'\n    so Malta will be kept.\n\n    >>> s.nlargest(3)\n    France    65000000\n    Italy     59000000\n    Malta       434000\n    dtype: int64\n\n    The `n` largest elements where ``n=3`` and keeping the last duplicates.\n    Brunei will be kept since it is the last with value 434000 based on\n    the index order.\n\n    >>> s.nlargest(3, keep='last')\n    France      65000000\n    Italy       59000000\n    Brunei        434000\n    dtype: int64\n\n    The `n` largest elements where ``n=3`` with all duplicates kept. Note\n    that the returned Series has five elements due to the three duplicates.\n\n    >>> s.nlargest(3, keep='all')\n    France      65000000\n    Italy       59000000\n    Malta         434000\n    Maldives      434000\n    Brunei        434000\n    dtype: int64\n    \"\"\"\n    return algorithms.SelectNSeries(self, n=n, keep=keep).nlargest()",
                "def nsmallest(self, n=5, keep=\"first\") -> \"Series\":\n    \"\"\"\n    Return the smallest `n` elements.\n\n    Parameters\n    ----------\n    n : int, default 5\n        Return this many ascending sorted values.\n    keep : {'first', 'last', 'all'}, default 'first'\n        When there are duplicate values that cannot all fit in a\n        Series of `n` elements:\n\n        - ``first`` : return the first `n` occurrences in order\n            of appearance.\n        - ``last`` : return the last `n` occurrences in reverse\n            order of appearance.\n        - ``all`` : keep all occurrences. This can result in a Series of\n            size larger than `n`.\n\n    Returns\n    -------\n    Series\n        The `n` smallest values in the Series, sorted in increasing order.\n\n    See Also\n    --------\n    Series.nlargest: Get the `n` largest elements.\n    Series.sort_values: Sort Series by values.\n    Series.head: Return the first `n` rows.\n\n    Notes\n    -----\n    Faster than ``.sort_values().head(n)`` for small `n` relative to\n    the size of the ``Series`` object.\n\n    Examples\n    --------\n    >>> countries_population = {\"Italy\": 59000000, \"France\": 65000000,\n    ...                         \"Brunei\": 434000, \"Malta\": 434000,\n    ...                         \"Maldives\": 434000, \"Iceland\": 337000,\n    ...                         \"Nauru\": 11300, \"Tuvalu\": 11300,\n    ...                         \"Anguilla\": 11300, \"Monserat\": 5200}\n    >>> s = pd.Series(countries_population)\n    >>> s\n    Italy       59000000\n    France      65000000\n    Brunei        434000\n    Malta         434000\n    Maldives      434000\n    Iceland       337000\n    Nauru          11300\n    Tuvalu         11300\n    Anguilla       11300\n    Monserat        5200\n    dtype: int64\n\n    The `n` smallest elements where ``n=5`` by default.\n\n    >>> s.nsmallest()\n    Monserat      5200\n    Nauru        11300\n    Tuvalu       11300\n    Anguilla     11300\n    Iceland     337000\n    dtype: int64\n\n    The `n` smallest elements where ``n=3``. Default `keep` value is\n    'first' so Nauru and Tuvalu will be kept.\n\n    >>> s.nsmallest(3)\n    Monserat     5200\n    Nauru       11300\n    Tuvalu      11300\n    dtype: int64\n\n    The `n` smallest elements where ``n=3`` and keeping the last\n    duplicates. Anguilla and Tuvalu will be kept since they are the last\n    with value 11300 based on the index order.\n\n    >>> s.nsmallest(3, keep='last')\n    Monserat     5200\n    Anguilla    11300\n    Tuvalu      11300\n    dtype: int64\n\n    The `n` smallest elements where ``n=3`` with all duplicates kept. Note\n    that the returned Series has four elements due to the three duplicates.\n\n    >>> s.nsmallest(3, keep='all')\n    Monserat     5200\n    Nauru       11300\n    Tuvalu      11300\n    Anguilla    11300\n    dtype: int64\n    \"\"\"\n    return algorithms.SelectNSeries(self, n=n, keep=keep).nsmallest()",
                "def swaplevel(self, i=-2, j=-1, copy=True) -> \"Series\":\n    \"\"\"\n    Swap levels i and j in a :class:`MultiIndex`.\n\n    Default is to swap the two innermost levels of the index.\n\n    Parameters\n    ----------\n    i, j : int, str\n        Level of the indices to be swapped. Can pass level name as string.\n    copy : bool, default True\n        Whether to copy underlying data.\n\n    Returns\n    -------\n    Series\n        Series with levels swapped in MultiIndex.\n    \"\"\"\n    assert isinstance(self.index, ABCMultiIndex)\n    new_index = self.index.swaplevel(i, j)\n    return self._constructor(self._values, index=new_index, copy=copy).__finalize__(\n        self\n    )",
                "def reorder_levels(self, order) -> \"Series\":\n    \"\"\"\n    Rearrange index levels using input order.\n\n    May not drop or duplicate levels.\n\n    Parameters\n    ----------\n    order : list of int representing new level order\n        Reference level by number or key.\n\n    Returns\n    -------\n    type of caller (new object)\n    \"\"\"\n    if not isinstance(self.index, MultiIndex):  # pragma: no cover\n        raise Exception(\"Can only reorder levels on a hierarchical axis.\")\n\n    result = self.copy()\n    assert isinstance(result.index, ABCMultiIndex)\n    result.index = result.index.reorder_levels(order)\n    return result",
                "def explode(self) -> \"Series\":\n    \"\"\"\n    Transform each element of a list-like to a row, replicating the\n    index values.\n\n    .. versionadded:: 0.25.0\n\n    Returns\n    -------\n    Series\n        Exploded lists to rows; index will be duplicated for these rows.\n\n    See Also\n    --------\n    Series.str.split : Split string values on specified separator.\n    Series.unstack : Unstack, a.k.a. pivot, Series with MultiIndex\n        to produce DataFrame.\n    DataFrame.melt : Unpivot a DataFrame from wide format to long format.\n    DataFrame.explode : Explode a DataFrame from list-like\n        columns to long format.\n\n    Notes\n    -----\n    This routine will explode list-likes including lists, tuples,\n    Series, and np.ndarray. The result dtype of the subset rows will\n    be object. Scalars will be returned unchanged. Empty list-likes will\n    result in a np.nan for that row.\n\n    Examples\n    --------\n    >>> s = pd.Series([[1, 2, 3], 'foo', [], [3, 4]])\n    >>> s\n    0    [1, 2, 3]\n    1          foo\n    2           []\n    3       [3, 4]\n    dtype: object\n\n    >>> s.explode()\n    0      1\n    0      2\n    0      3\n    1    foo\n    2    NaN\n    3      3\n    3      4\n    dtype: object\n    \"\"\"\n    if not len(self) or not is_object_dtype(self):\n        return self.copy()\n\n    values, counts = reshape.explode(np.asarray(self.array))\n\n    result = Series(values, index=self.index.repeat(counts), name=self.name)\n    return result",
                "def unstack(self, level=-1, fill_value=None):\n    \"\"\"\n    Unstack, also known as pivot, Series with MultiIndex to produce DataFrame.\n    The level involved will automatically get sorted.\n\n    Parameters\n    ----------\n    level : int, str, or list of these, default last level\n        Level(s) to unstack, can pass level name.\n    fill_value : scalar value, default None\n        Value to use when replacing NaN values.\n\n    Returns\n    -------\n    DataFrame\n        Unstacked Series.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4],\n    ...               index=pd.MultiIndex.from_product([['one', 'two'],\n    ...                                                 ['a', 'b']]))\n    >>> s\n    one  a    1\n         b    2\n    two  a    3\n         b    4\n    dtype: int64\n\n    >>> s.unstack(level=-1)\n         a  b\n    one  1  2\n    two  3  4\n\n    >>> s.unstack(level=0)\n       one  two\n    a    1    3\n    b    2    4\n    \"\"\"\n    from pandas.core.reshape.reshape import unstack\n\n    return unstack(self, level, fill_value)",
                "def map(self, arg, na_action=None) -> \"Series\":\n    \"\"\"\n    Map values of Series according to input correspondence.\n\n    Used for substituting each value in a Series with another value,\n    that may be derived from a function, a ``dict`` or\n    a :class:`Series`.\n\n    Parameters\n    ----------\n    arg : function, collections.abc.Mapping subclass or Series\n        Mapping correspondence.\n    na_action : {None, 'ignore'}, default None\n        If 'ignore', propagate NaN values, without passing them to the\n        mapping correspondence.\n\n    Returns\n    -------\n    Series\n        Same index as caller.\n\n    See Also\n    --------\n    Series.apply : For applying more complex functions on a Series.\n    DataFrame.apply : Apply a function row-/column-wise.\n    DataFrame.applymap : Apply a function elementwise on a whole DataFrame.\n\n    Notes\n    -----\n    When ``arg`` is a dictionary, values in Series that are not in the\n    dictionary (as keys) are converted to ``NaN``. However, if the\n    dictionary is a ``dict`` subclass that defines ``__missing__`` (i.e.\n    provides a method for default values), then this default is used\n    rather than ``NaN``.\n\n    Examples\n    --------\n    >>> s = pd.Series(['cat', 'dog', np.nan, 'rabbit'])\n    >>> s\n    0      cat\n    1      dog\n    2      NaN\n    3   rabbit\n    dtype: object\n\n    ``map`` accepts a ``dict`` or a ``Series``. Values that are not found\n    in the ``dict`` are converted to ``NaN``, unless the dict has a default\n    value (e.g. ``defaultdict``):\n\n    >>> s.map({'cat': 'kitten', 'dog': 'puppy'})\n    0   kitten\n    1    puppy\n    2      NaN\n    3      NaN\n    dtype: object\n\n    It also accepts a function:\n\n    >>> s.map('I am a {}'.format)\n    0       I am a cat\n    1       I am a dog\n    2       I am a nan\n    3    I am a rabbit\n    dtype: object\n\n    To avoid applying the function to missing values (and keep them as\n    ``NaN``) ``na_action='ignore'`` can be used:\n\n    >>> s.map('I am a {}'.format, na_action='ignore')\n    0     I am a cat\n    1     I am a dog\n    2            NaN\n    3  I am a rabbit\n    dtype: object\n    \"\"\"\n    new_values = super()._map_values(arg, na_action=na_action)\n    return self._constructor(new_values, index=self.index).__finalize__(self)",
                "def _gotitem(self, key, ndim, subset=None) -> \"Series\":\n    \"\"\"\n    Sub-classes to define. Return a sliced object.\n\n    Parameters\n    ----------\n    key : string / list of selections\n    ndim : 1,2\n        Requested ndim of result.\n    subset : object, default None\n        Subset to act on.\n    \"\"\"\n    return self",
                "@Substitution(\n    see_also=_agg_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\\n.. versionadded:: 0.20.0\\n\",\n    **_shared_doc_kwargs,\n)\n@Appender(generic._shared_docs[\"aggregate\"])\ndef aggregate(self, func, axis=0, *args, **kwargs):\n    # Validate the axis parameter\n    self._get_axis_number(axis)\n    result, how = self._aggregate(func, *args, **kwargs)\n    if result is None:\n\n        # we can be called from an inner function which\n        # passes this meta-data\n        kwargs.pop(\"_axis\", None)\n        kwargs.pop(\"_level\", None)\n\n        # try a regular apply, this evaluates lambdas\n        # row-by-row; however if the lambda is expected a Series\n        # expression, e.g.: lambda x: x-x.quantile(0.25)\n        # this will fail, so we can try a vectorized evaluation\n\n        # we cannot FIRST try the vectorized evaluation, because\n        # then .agg and .apply would have different semantics if the\n        # operation is actually defined on the Series, e.g. str\n        try:\n            result = self.apply(func, *args, **kwargs)\n        except (ValueError, AttributeError, TypeError):\n            result = func(self, *args, **kwargs)\n\n    return result",
                "@Appender(generic._shared_docs[\"transform\"] % _shared_doc_kwargs)\ndef transform(self, func, axis=0, *args, **kwargs):\n    # Validate the axis parameter\n    self._get_axis_number(axis)\n    return super().transform(func, *args, **kwargs)",
                "def apply(self, func, convert_dtype=True, args=(), **kwds):\n    \"\"\"\n    Invoke function on values of Series.\n\n    Can be ufunc (a NumPy function that applies to the entire Series)\n    or a Python function that only works on single values.\n\n    Parameters\n    ----------\n    func : function\n        Python function or NumPy ufunc to apply.\n    convert_dtype : bool, default True\n        Try to find better dtype for elementwise function results. If\n        False, leave as dtype=object.\n    args : tuple\n        Positional arguments passed to func after the series value.\n    **kwds\n        Additional keyword arguments passed to func.\n\n    Returns\n    -------\n    Series or DataFrame\n        If func returns a Series object the result will be a DataFrame.\n\n    See Also\n    --------\n    Series.map: For element-wise operations.\n    Series.agg: Only perform aggregating type operations.\n    Series.transform: Only perform transforming type operations.\n\n    Examples\n    --------\n    Create a series with typical summer temperatures for each city.\n\n    >>> s = pd.Series([20, 21, 12],\n    ...               index=['London', 'New York', 'Helsinki'])\n    >>> s\n    London      20\n    New York    21\n    Helsinki    12\n    dtype: int64\n\n    Square the values by defining a function and passing it as an\n    argument to ``apply()``.\n\n    >>> def square(x):\n    ...     return x ** 2\n    >>> s.apply(square)\n    London      400\n    New York    441\n    Helsinki    144\n    dtype: int64\n\n    Square the values by passing an anonymous function as an\n    argument to ``apply()``.\n\n    >>> s.apply(lambda x: x ** 2)\n    London      400\n    New York    441\n    Helsinki    144\n    dtype: int64\n\n    Define a custom function that needs additional positional\n    arguments and pass these additional arguments using the\n    ``args`` keyword.\n\n    >>> def subtract_custom_value(x, custom_value):\n    ...     return x - custom_value\n\n    >>> s.apply(subtract_custom_value, args=(5,))\n    London      15\n    New York    16\n    Helsinki     7\n    dtype: int64\n\n    Define a custom function that takes keyword arguments\n    and pass these arguments to ``apply``.\n\n    >>> def add_custom_values(x, **kwargs):\n    ...     for month in kwargs:\n    ...         x += kwargs[month]\n    ...     return x\n\n    >>> s.apply(add_custom_values, june=30, july=20, august=25)\n    London      95\n    New York    96\n    Helsinki    87\n    dtype: int64\n\n    Use a function from the Numpy library.\n\n    >>> s.apply(np.log)\n    London      2.995732\n    New York    3.044522\n    Helsinki    2.484907\n    dtype: float64\n    \"\"\"\n    if len(self) == 0:\n        return self._constructor(dtype=self.dtype, index=self.index).__finalize__(\n            self\n        )\n\n    # dispatch to agg\n    if isinstance(func, (list, dict)):\n        return self.aggregate(func, *args, **kwds)\n\n    # if we are a string, try to dispatch\n    if isinstance(func, str):\n        return self._try_aggregate_string_function(func, *args, **kwds)\n\n    # handle ufuncs and lambdas\n    if kwds or args and not isinstance(func, np.ufunc):\n\n        def f(x):\n            return func(x, *args, **kwds)\n\n    else:\n        f = func\n\n    with np.errstate(all=\"ignore\"):\n        if isinstance(f, np.ufunc):\n            return f(self)\n\n        # row-wise access\n        if is_extension_array_dtype(self.dtype) and hasattr(self._values, \"map\"):\n            # GH#23179 some EAs do not have `map`\n            mapped = self._values.map(f)\n        else:\n            values = self.astype(object).values\n            mapped = lib.map_infer(values, f, convert=convert_dtype)\n\n    if len(mapped) and isinstance(mapped[0], Series):\n        # GH 25959 use pd.array instead of tolist\n        # so extension arrays can be used\n        return self._constructor_expanddim(pd.array(mapped), index=self.index)\n    else:\n        return self._constructor(mapped, index=self.index).__finalize__(self)",
                "def _reduce(\n    self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n):\n    \"\"\"\n    Perform a reduction operation.\n\n    If we have an ndarray as a value, then simply perform the operation,\n    otherwise delegate to the object.\n    \"\"\"\n    delegate = self._values\n\n    if axis is not None:\n        self._get_axis_number(axis)\n\n    if isinstance(delegate, ExtensionArray):\n        # dispatch to ExtensionArray interface\n        return delegate._reduce(name, skipna=skipna, **kwds)\n\n    else:\n        # dispatch to numpy arrays\n        if numeric_only:\n            raise NotImplementedError(\n                f\"Series.{name} does not implement numeric_only.\"\n            )\n        with np.errstate(all=\"ignore\"):\n            return op(delegate, skipna=skipna, **kwds)",
                "def _reindex_indexer(self, new_index, indexer, copy):\n    if indexer is None:\n        if copy:\n            return self.copy()\n        return self\n\n    new_values = algorithms.take_1d(\n        self._values, indexer, allow_fill=True, fill_value=None\n    )\n    return self._constructor(new_values, index=new_index)",
                "def _needs_reindex_multi(self, axes, method, level):\n    \"\"\"\n    Check if we do need a multi reindex; this is for compat with\n    higher dims.\n    \"\"\"\n    return False",
                "@Appender(generic._shared_docs[\"align\"] % _shared_doc_kwargs)\ndef align(\n    self,\n    other,\n    join=\"outer\",\n    axis=None,\n    level=None,\n    copy=True,\n    fill_value=None,\n    method=None,\n    limit=None,\n    fill_axis=0,\n    broadcast_axis=None,\n):\n    return super().align(\n        other,\n        join=join,\n        axis=axis,\n        level=level,\n        copy=copy,\n        fill_value=fill_value,\n        method=method,\n        limit=limit,\n        fill_axis=fill_axis,\n        broadcast_axis=broadcast_axis,\n    )",
                "def rename(\n    self,\n    index=None,\n    *,\n    axis=None,\n    copy=True,\n    inplace=False,\n    level=None,\n    errors=\"ignore\",\n):\n    \"\"\"\n    Alter Series index labels or name.\n\n    Function / dict values must be unique (1-to-1). Labels not contained in\n    a dict / Series will be left as-is. Extra labels listed don't throw an\n    error.\n\n    Alternatively, change ``Series.name`` with a scalar value.\n\n    See the :ref:`user guide <basics.rename>` for more.\n\n    Parameters\n    ----------\n    axis : {0 or \"index\"}\n        Unused. Accepted for compatability with DataFrame method only.\n    index : scalar, hashable sequence, dict-like or function, optional\n        Functions or dict-like are transformations to apply to\n        the index.\n        Scalar or hashable sequence-like will alter the ``Series.name``\n        attribute.\n\n    **kwargs\n        Additional keyword arguments passed to the function. Only the\n        \"inplace\" keyword is used.\n\n    Returns\n    -------\n    Series\n        Series with index labels or name altered.\n\n    See Also\n    --------\n    DataFrame.rename : Corresponding DataFrame method.\n    Series.rename_axis : Set the name of the axis.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3])\n    >>> s\n    0    1\n    1    2\n    2    3\n    dtype: int64\n    >>> s.rename(\"my_name\")  # scalar, changes Series.name\n    0    1\n    1    2\n    2    3\n    Name: my_name, dtype: int64\n    >>> s.rename(lambda x: x ** 2)  # function, changes labels\n    0    1\n    1    2\n    4    3\n    dtype: int64\n    >>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n    0    1\n    3    2\n    5    3\n    dtype: int64\n    \"\"\"\n    if callable(index) or is_dict_like(index):\n        return super().rename(\n            index, copy=copy, inplace=inplace, level=level, errors=errors\n        )\n    else:\n        return self._set_name(index, inplace=inplace)",
                "@Appender(\n    \"\"\"\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3])\n    >>> s\n    0    1\n    1    2\n    2    3\n    dtype: int64\n\n    >>> s.set_axis(['a', 'b', 'c'], axis=0)\n    a    1\n    b    2\n    c    3\n    dtype: int64\n\"\"\"\n)\n@Substitution(\n    **_shared_doc_kwargs,\n    extended_summary_sub=\"\",\n    axis_description_sub=\"\",\n    see_also_sub=\"\",\n)\n@Appender(generic.NDFrame.set_axis.__doc__)\ndef set_axis(self, labels, axis=0, inplace=False):\n    return super().set_axis(labels, axis=axis, inplace=inplace)",
                "@Substitution(**_shared_doc_kwargs)\n@Appender(generic.NDFrame.reindex.__doc__)\ndef reindex(self, index=None, **kwargs):\n    return super().reindex(index=index, **kwargs)",
                "def drop(\n    self,\n    labels=None,\n    axis=0,\n    index=None,\n    columns=None,\n    level=None,\n    inplace=False,\n    errors=\"raise\",\n) -> \"Series\":\n    \"\"\"\n    Return Series with specified index labels removed.\n\n    Remove elements of a Series based on specifying the index labels.\n    When using a multi-index, labels on different levels can be removed\n    by specifying the level.\n\n    Parameters\n    ----------\n    labels : single label or list-like\n        Index labels to drop.\n    axis : 0, default 0\n        Redundant for application on Series.\n    index : single label or list-like\n        Redundant for application on Series, but 'index' can be used instead\n        of 'labels'.\n\n        .. versionadded:: 0.21.0\n    columns : single label or list-like\n        No change is made to the Series; use 'index' or 'labels' instead.\n\n        .. versionadded:: 0.21.0\n    level : int or level name, optional\n        For MultiIndex, level for which the labels will be removed.\n    inplace : bool, default False\n        If True, do operation inplace and return None.\n    errors : {'ignore', 'raise'}, default 'raise'\n        If 'ignore', suppress error and only existing labels are dropped.\n\n    Returns\n    -------\n    Series\n        Series with specified index labels removed.\n\n    Raises\n    ------\n    KeyError\n        If none of the labels are found in the index.\n\n    See Also\n    --------\n    Series.reindex : Return only specified index labels of Series.\n    Series.dropna : Return series without null values.\n    Series.drop_duplicates : Return Series with duplicate values removed.\n    DataFrame.drop : Drop specified labels from rows or columns.\n\n    Examples\n    --------\n    >>> s = pd.Series(data=np.arange(3), index=['A', 'B', 'C'])\n    >>> s\n    A  0\n    B  1\n    C  2\n    dtype: int64\n\n    Drop labels B en C\n\n    >>> s.drop(labels=['B', 'C'])\n    A  0\n    dtype: int64\n\n    Drop 2nd level label in MultiIndex Series\n\n    >>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n    ...                              ['speed', 'weight', 'length']],\n    ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n    ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n    >>> s = pd.Series([45, 200, 1.2, 30, 250, 1.5, 320, 1, 0.3],\n    ...               index=midx)\n    >>> s\n    lama    speed      45.0\n            weight    200.0\n            length      1.2\n    cow     speed      30.0\n            weight    250.0\n            length      1.5\n    falcon  speed     320.0\n            weight      1.0\n            length      0.3\n    dtype: float64\n\n    >>> s.drop(labels='weight', level=1)\n    lama    speed      45.0\n            length      1.2\n    cow     speed      30.0\n            length      1.5\n    falcon  speed     320.0\n            length      0.3\n    dtype: float64\n    \"\"\"\n    return super().drop(\n        labels=labels,\n        axis=axis,\n        index=index,\n        columns=columns,\n        level=level,\n        inplace=inplace,\n        errors=errors,\n    )",
                "@doc(NDFrame.fillna, **_shared_doc_kwargs)\ndef fillna(\n    self,\n    value=None,\n    method=None,\n    axis=None,\n    inplace=False,\n    limit=None,\n    downcast=None,\n) -> Optional[\"Series\"]:\n    return super().fillna(\n        value=value,\n        method=method,\n        axis=axis,\n        inplace=inplace,\n        limit=limit,\n        downcast=downcast,\n    )",
                "@Appender(generic._shared_docs[\"replace\"] % _shared_doc_kwargs)\ndef replace(\n    self,\n    to_replace=None,\n    value=None,\n    inplace=False,\n    limit=None,\n    regex=False,\n    method=\"pad\",\n):\n    return super().replace(\n        to_replace=to_replace,\n        value=value,\n        inplace=inplace,\n        limit=limit,\n        regex=regex,\n        method=method,\n    )",
                "@Appender(generic._shared_docs[\"shift\"] % _shared_doc_kwargs)\ndef shift(self, periods=1, freq=None, axis=0, fill_value=None) -> \"Series\":\n    return super().shift(\n        periods=periods, freq=freq, axis=axis, fill_value=fill_value\n    )",
                "def memory_usage(self, index=True, deep=False):\n    \"\"\"\n    Return the memory usage of the Series.\n\n    The memory usage can optionally include the contribution of\n    the index and of elements of `object` dtype.\n\n    Parameters\n    ----------\n    index : bool, default True\n        Specifies whether to include the memory usage of the Series index.\n    deep : bool, default False\n        If True, introspect the data deeply by interrogating\n        `object` dtypes for system-level memory consumption, and include\n        it in the returned value.\n\n    Returns\n    -------\n    int\n        Bytes of memory consumed.\n\n    See Also\n    --------\n    numpy.ndarray.nbytes : Total bytes consumed by the elements of the\n        array.\n    DataFrame.memory_usage : Bytes consumed by a DataFrame.\n\n    Examples\n    --------\n    >>> s = pd.Series(range(3))\n    >>> s.memory_usage()\n    152\n\n    Not including the index gives the size of the rest of the data, which\n    is necessarily smaller:\n\n    >>> s.memory_usage(index=False)\n    24\n\n    The memory footprint of `object` values is ignored by default:\n\n    >>> s = pd.Series([\"a\", \"b\"])\n    >>> s.values\n    array(['a', 'b'], dtype=object)\n    >>> s.memory_usage()\n    144\n    >>> s.memory_usage(deep=True)\n    260\n    \"\"\"\n    v = super().memory_usage(deep=deep)\n    if index:\n        v += self.index.memory_usage(deep=deep)\n    return v",
                "def isin(self, values) -> \"Series\":\n    \"\"\"\n    Check whether `values` are contained in Series.\n\n    Return a boolean Series showing whether each element in the Series\n    matches an element in the passed sequence of `values` exactly.\n\n    Parameters\n    ----------\n    values : set or list-like\n        The sequence of values to test. Passing in a single string will\n        raise a ``TypeError``. Instead, turn a single string into a\n        list of one element.\n\n    Returns\n    -------\n    Series\n        Series of booleans indicating if each element is in values.\n\n    Raises\n    ------\n    TypeError\n      * If `values` is a string\n\n    See Also\n    --------\n    DataFrame.isin : Equivalent method on DataFrame.\n\n    Examples\n    --------\n    >>> s = pd.Series(['lama', 'cow', 'lama', 'beetle', 'lama',\n    ...                'hippo'], name='animal')\n    >>> s.isin(['cow', 'lama'])\n    0     True\n    1     True\n    2     True\n    3    False\n    4     True\n    5    False\n    Name: animal, dtype: bool\n\n    Passing a single string as ``s.isin('lama')`` will raise an error. Use\n    a list of one element instead:\n\n    >>> s.isin(['lama'])\n    0     True\n    1    False\n    2     True\n    3    False\n    4     True\n    5    False\n    Name: animal, dtype: bool\n    \"\"\"\n    result = algorithms.isin(self, values)\n    return self._constructor(result, index=self.index).__finalize__(self)",
                "def between(self, left, right, inclusive=True) -> \"Series\":\n    \"\"\"\n    Return boolean Series equivalent to left <= series <= right.\n\n    This function returns a boolean vector containing `True` wherever the\n    corresponding Series element is between the boundary values `left` and\n    `right`. NA values are treated as `False`.\n\n    Parameters\n    ----------\n    left : scalar or list-like\n        Left boundary.\n    right : scalar or list-like\n        Right boundary.\n    inclusive : bool, default True\n        Include boundaries.\n\n    Returns\n    -------\n    Series\n        Series representing whether each element is between left and\n        right (inclusive).\n\n    See Also\n    --------\n    Series.gt : Greater than of series and other.\n    Series.lt : Less than of series and other.\n\n    Notes\n    -----\n    This function is equivalent to ``(left <= ser) & (ser <= right)``\n\n    Examples\n    --------\n    >>> s = pd.Series([2, 0, 4, 8, np.nan])\n\n    Boundary values are included by default:\n\n    >>> s.between(1, 4)\n    0     True\n    1    False\n    2     True\n    3    False\n    4    False\n    dtype: bool\n\n    With `inclusive` set to ``False`` boundary values are excluded:\n\n    >>> s.between(1, 4, inclusive=False)\n    0     True\n    1    False\n    2    False\n    3    False\n    4    False\n    dtype: bool\n\n    `left` and `right` can be any scalar value:\n\n    >>> s = pd.Series(['Alice', 'Bob', 'Carol', 'Eve'])\n    >>> s.between('Anna', 'Daniel')\n    0    False\n    1     True\n    2     True\n    3    False\n    dtype: bool\n    \"\"\"\n    if inclusive:\n        lmask = self >= left\n        rmask = self <= right\n    else:\n        lmask = self > left\n        rmask = self < right\n\n    return lmask & rmask",
                "def _convert_dtypes(\n    self,\n    infer_objects: bool = True,\n    convert_string: bool = True,\n    convert_integer: bool = True,\n    convert_boolean: bool = True,\n) -> \"Series\":\n    input_series = self\n    if infer_objects:\n        input_series = input_series.infer_objects()\n        if is_object_dtype(input_series):\n            input_series = input_series.copy()\n\n    if convert_string or convert_integer or convert_boolean:\n        inferred_dtype = convert_dtypes(\n            input_series._values, convert_string, convert_integer, convert_boolean\n        )\n        try:\n            result = input_series.astype(inferred_dtype)\n        except TypeError:\n            result = input_series.copy()\n    else:\n        result = input_series.copy()\n    return result",
                "@Appender(generic._shared_docs[\"isna\"] % _shared_doc_kwargs)\ndef isna(self) -> \"Series\":\n    return super().isna()",
                "@Appender(generic._shared_docs[\"isna\"] % _shared_doc_kwargs)\ndef isnull(self) -> \"Series\":\n    return super().isnull()",
                "@Appender(generic._shared_docs[\"notna\"] % _shared_doc_kwargs)\ndef notna(self) -> \"Series\":\n    return super().notna()",
                "@Appender(generic._shared_docs[\"notna\"] % _shared_doc_kwargs)\ndef notnull(self) -> \"Series\":\n    return super().notnull()",
                "def dropna(self, axis=0, inplace=False, how=None):\n    \"\"\"\n    Return a new Series with missing values removed.\n\n    See the :ref:`User Guide <missing_data>` for more on which values are\n    considered missing, and how to work with missing data.\n\n    Parameters\n    ----------\n    axis : {0 or 'index'}, default 0\n        There is only one axis to drop values from.\n    inplace : bool, default False\n        If True, do operation inplace and return None.\n    how : str, optional\n        Not in use. Kept for compatibility.\n\n    Returns\n    -------\n    Series\n        Series with NA entries dropped from it.\n\n    See Also\n    --------\n    Series.isna: Indicate missing values.\n    Series.notna : Indicate existing (non-missing) values.\n    Series.fillna : Replace missing values.\n    DataFrame.dropna : Drop rows or columns which contain NA values.\n    Index.dropna : Drop missing indices.\n\n    Examples\n    --------\n    >>> ser = pd.Series([1., 2., np.nan])\n    >>> ser\n    0    1.0\n    1    2.0\n    2    NaN\n    dtype: float64\n\n    Drop NA values from a Series.\n\n    >>> ser.dropna()\n    0    1.0\n    1    2.0\n    dtype: float64\n\n    Keep the Series with valid entries in the same variable.\n\n    >>> ser.dropna(inplace=True)\n    >>> ser\n    0    1.0\n    1    2.0\n    dtype: float64\n\n    Empty strings are not considered NA values. ``None`` is considered an\n    NA value.\n\n    >>> ser = pd.Series([np.NaN, 2, pd.NaT, '', None, 'I stay'])\n    >>> ser\n    0       NaN\n    1         2\n    2       NaT\n    3\n    4      None\n    5    I stay\n    dtype: object\n    >>> ser.dropna()\n    1         2\n    3\n    5    I stay\n    dtype: object\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    # Validate the axis parameter\n    self._get_axis_number(axis or 0)\n\n    if self._can_hold_na:\n        result = remove_na_arraylike(self)\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result\n    else:\n        if inplace:\n            # do nothing\n            pass\n        else:\n            return self.copy()",
                "def to_timestamp(self, freq=None, how=\"start\", copy=True) -> \"Series\":\n    \"\"\"\n    Cast to DatetimeIndex of Timestamps, at *beginning* of period.\n\n    Parameters\n    ----------\n    freq : str, default frequency of PeriodIndex\n        Desired frequency.\n    how : {'s', 'e', 'start', 'end'}\n        Convention for converting period to timestamp; start of period\n        vs. end.\n    copy : bool, default True\n        Whether or not to return a copy.\n\n    Returns\n    -------\n    Series with DatetimeIndex\n    \"\"\"\n    new_values = self._values\n    if copy:\n        new_values = new_values.copy()\n\n    assert isinstance(self.index, (ABCDatetimeIndex, ABCPeriodIndex))\n    new_index = self.index.to_timestamp(freq=freq, how=how)\n    return self._constructor(new_values, index=new_index).__finalize__(self)",
                "def to_period(self, freq=None, copy=True) -> \"Series\":\n    \"\"\"\n    Convert Series from DatetimeIndex to PeriodIndex with desired\n    frequency (inferred from index if not passed).\n\n    Parameters\n    ----------\n    freq : str, default None\n        Frequency associated with the PeriodIndex.\n    copy : bool, default True\n        Whether or not to return a copy.\n\n    Returns\n    -------\n    Series\n        Series with index converted to PeriodIndex.\n    \"\"\"\n    new_values = self._values\n    if copy:\n        new_values = new_values.copy()\n\n    assert isinstance(self.index, ABCDatetimeIndex)\n    new_index = self.index.to_period(freq=freq)\n    return self._constructor(new_values, index=new_index).__finalize__(self)",
                "def construct_return(result):\n    if lib.is_scalar(result):\n        return result\n    elif result.ndim > 1:\n        # e.g. np.subtract.outer\n        if method == \"outer\":\n            # GH#27198\n            raise NotImplementedError\n        return result\n    return self._constructor(result, index=index, name=name, copy=False)",
                "def _try_kind_sort(arr):\n    # easier to ask forgiveness than permission\n    try:\n        # if kind==mergesort, it can fail for object dtype\n        return arr.argsort(kind=kind)\n    except TypeError:\n        # stable sort not available for object dtype\n        # uses the argsort default quicksort\n        return arr.argsort(kind=\"quicksort\")",
                "def f(x):\n    return func(x, *args, **kwds)"
            ],
            "inscope_function_signatures": [
                "_coerce_method(converter)",
                "wrapper(self)",
                "__init__(self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False)",
                "_init_dict(self, data, index=None, dtype=None)",
                "_constructor(self) -> Type['Series']",
                "_constructor_expanddim(self) -> Type['DataFrame']",
                "_can_hold_na(self)",
                "_set_axis(self, axis, labels, fastpath: bool=False) -> None",
                "_update_inplace(self, result, **kwargs)",
                "dtype(self)",
                "dtypes(self)",
                "name(self) -> Optional[Hashable]",
                "name(self, value: Optional[Hashable]) -> None",
                "values(self)",
                "_values(self)",
                "array(self) -> ExtensionArray",
                "_internal_get_values(self)",
                "ravel(self, order='C')",
                "__len__(self) -> int",
                "view(self, dtype=None) -> 'Series'",
                "__array_ufunc__(self, ufunc: Callable, method: str, *inputs: Any, **kwargs: Any)",
                "__array__(self, dtype=None) -> np.ndarray",
                "axes(self) -> List[Index]",
                "take(self, indices, axis=0, is_copy=None, **kwargs) -> 'Series'",
                "_take_with_is_copy(self, indices, axis=0, **kwargs)",
                "_ixs(self, i: int, axis: int=0)",
                "_slice(self, slobj: slice, axis: int=0) -> 'Series'",
                "__getitem__(self, key)",
                "_get_with(self, key)",
                "_get_values_tuple(self, key)",
                "_get_values(self, indexer)",
                "_get_value(self, label, takeable: bool=False)",
                "__setitem__(self, key, value)",
                "_set_with_engine(self, key, value)",
                "_set_with(self, key, value)",
                "_set_labels(self, key, value)",
                "_set_values(self, key, value)",
                "_set_value(self, label, value, takeable: bool=False)",
                "_is_mixed_type(self)",
                "repeat(self, repeats, axis=None) -> 'Series'",
                "reset_index(self, level=None, drop=False, name=None, inplace=False)",
                "__repr__(self) -> str",
                "to_string(self, buf=None, na_rep='NaN', float_format=None, header=True, index=True, length=False, dtype=False, name=False, max_rows=None, min_rows=None)",
                "to_markdown(self, buf: Optional[IO[str]]=None, mode: Optional[str]=None, **kwargs) -> Optional[str]",
                "items(self) -> Iterable[Tuple[Label, Any]]",
                "iteritems(self) -> Iterable[Tuple[Label, Any]]",
                "keys(self) -> Index",
                "to_dict(self, into=dict)",
                "to_frame(self, name=None) -> 'DataFrame'",
                "_set_name(self, name, inplace=False) -> 'Series'",
                "groupby(self, by=None, axis=0, level=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False) -> 'SeriesGroupBy'",
                "count(self, level=None)",
                "mode(self, dropna=True) -> 'Series'",
                "unique(self)",
                "drop_duplicates(self, keep='first', inplace=False) -> 'Series'",
                "duplicated(self, keep='first') -> 'Series'",
                "idxmin(self, axis=0, skipna=True, *args, **kwargs)",
                "idxmax(self, axis=0, skipna=True, *args, **kwargs)",
                "round(self, decimals=0, *args, **kwargs) -> 'Series'",
                "quantile(self, q=0.5, interpolation='linear')",
                "corr(self, other, method='pearson', min_periods=None) -> float",
                "cov(self, other, min_periods=None) -> float",
                "diff(self, periods=1) -> 'Series'",
                "autocorr(self, lag=1) -> float",
                "dot(self, other)",
                "__matmul__(self, other)",
                "__rmatmul__(self, other)",
                "searchsorted(self, value, side='left', sorter=None)",
                "append(self, to_append, ignore_index=False, verify_integrity=False)",
                "_binop(self, other, func, level=None, fill_value=None)",
                "combine(self, other, func, fill_value=None) -> 'Series'",
                "combine_first(self, other) -> 'Series'",
                "update(self, other) -> None",
                "sort_values(self, axis=0, ascending=True, inplace: bool=False, kind: str='quicksort', na_position: str='last', ignore_index: bool=False)",
                "sort_index(self, axis=0, level=None, ascending: bool=True, inplace: bool=False, kind: str='quicksort', na_position: str='last', sort_remaining: bool=True, ignore_index: bool=False)",
                "argsort(self, axis=0, kind='quicksort', order=None) -> 'Series'",
                "nlargest(self, n=5, keep='first') -> 'Series'",
                "nsmallest(self, n=5, keep='first') -> 'Series'",
                "swaplevel(self, i=-2, j=-1, copy=True) -> 'Series'",
                "reorder_levels(self, order) -> 'Series'",
                "explode(self) -> 'Series'",
                "unstack(self, level=-1, fill_value=None)",
                "map(self, arg, na_action=None) -> 'Series'",
                "_gotitem(self, key, ndim, subset=None) -> 'Series'",
                "aggregate(self, func, axis=0, *args, **kwargs)",
                "transform(self, func, axis=0, *args, **kwargs)",
                "apply(self, func, convert_dtype=True, args=(), **kwds)",
                "_reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
                "_reindex_indexer(self, new_index, indexer, copy)",
                "_needs_reindex_multi(self, axes, method, level)",
                "align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)",
                "rename(self, index=None)",
                "set_axis(self, labels, axis=0, inplace=False)",
                "reindex(self, index=None, **kwargs)",
                "drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise') -> 'Series'",
                "fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None) -> Optional['Series']",
                "replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')",
                "shift(self, periods=1, freq=None, axis=0, fill_value=None) -> 'Series'",
                "memory_usage(self, index=True, deep=False)",
                "isin(self, values) -> 'Series'",
                "between(self, left, right, inclusive=True) -> 'Series'",
                "_convert_dtypes(self, infer_objects: bool=True, convert_string: bool=True, convert_integer: bool=True, convert_boolean: bool=True) -> 'Series'",
                "isna(self) -> 'Series'",
                "isnull(self) -> 'Series'",
                "notna(self) -> 'Series'",
                "notnull(self) -> 'Series'",
                "dropna(self, axis=0, inplace=False, how=None)",
                "to_timestamp(self, freq=None, how='start', copy=True) -> 'Series'",
                "to_period(self, freq=None, copy=True) -> 'Series'",
                "construct_return(result)",
                "_try_kind_sort(arr)",
                "f(x)"
            ],
            "variables_in_file": {
                "TYPE_CHECKING": [
                    97
                ],
                "__all__": [
                    101
                ],
                "_shared_doc_kwargs": [
                    4102,
                    103,
                    4359,
                    3978,
                    4363,
                    4140,
                    1613,
                    4367,
                    3856,
                    3667,
                    3636,
                    3987,
                    4371,
                    4121
                ],
                "dict": [
                    3776,
                    1477,
                    1158,
                    103
                ],
                "len": [
                    259,
                    1680,
                    1684,
                    2201,
                    674,
                    805,
                    4523,
                    302,
                    3120,
                    563,
                    308,
                    693,
                    310,
                    311,
                    3770,
                    2240,
                    2942,
                    2906,
                    3804,
                    2911,
                    2916,
                    2918,
                    3455,
                    2410,
                    1273,
                    1278,
                    127
                ],
                "self": [
                    1024,
                    2560,
                    1538,
                    2562,
                    1028,
                    1540,
                    2563,
                    3079,
                    3080,
                    3585,
                    1035,
                    2571,
                    525,
                    2572,
                    2063,
                    3599,
                    530,
                    1555,
                    2066,
                    1049,
                    1050,
                    1052,
                    541,
                    1054,
                    1056,
                    3106,
                    1060,
                    1064,
                    3116,
                    557,
                    1069,
                    1070,
                    3117,
                    2098,
                    563,
                    2099,
                    3123,
                    3125,
                    3641,
                    3642,
                    1089,
                    1091,
                    1092,
                    1093,
                    1097,
                    3659,
                    3661,
                    3152,
                    2643,
                    3156,
                    3670,
                    3159,
                    2648,
                    2649,
                    3161,
                    3162,
                    2652,
                    1629,
                    3163,
                    1632,
                    2659,
                    2149,
                    2661,
                    2662,
                    2664,
                    4197,
                    2666,
                    2156,
                    2157,
                    2669,
                    2670,
                    631,
                    632,
                    633,
                    127,
                    128,
                    643,
                    1670,
                    647,
                    1159,
                    1160,
                    1161,
                    1673,
                    1675,
                    1676,
                    2704,
                    2705,
                    658,
                    1683,
                    1685,
                    663,
                    2200,
                    4253,
                    4254,
                    1706,
                    687,
                    3770,
                    3771,
                    3772,
                    3261,
                    2239,
                    3777,
                    707,
                    3781,
                    2758,
                    2761,
                    2762,
                    3794,
                    3797,
                    3799,
                    3801,
                    218,
                    3807,
                    3809,
                    4323,
                    4324,
                    4326,
                    4327,
                    3820,
                    238,
                    3823,
                    4341,
                    1273,
                    765,
                    1277,
                    1278,
                    1279,
                    3841,
                    1282,
                    3842,
                    1284,
                    3845,
                    1286,
                    1287,
                    1288,
                    2310,
                    2311,
                    3847,
                    1294,
                    783,
                    274,
                    3358,
                    800,
                    802,
                    805,
                    1318,
                    1320,
                    809,
                    1321,
                    811,
                    813,
                    3378,
                    3379,
                    2356,
                    3380,
                    3381,
                    824,
                    838,
                    327,
                    328,
                    329,
                    2886,
                    843,
                    2889,
                    3399,
                    846,
                    3402,
                    849,
                    853,
                    857,
                    2905,
                    2906,
                    860,
                    2911,
                    864,
                    4448,
                    1378,
                    4450,
                    868,
                    4451,
                    4453,
                    2409,
                    2410,
                    2413,
                    4461,
                    880,
                    881,
                    2418,
                    883,
                    3957,
                    890,
                    891,
                    2426,
                    2428,
                    2939,
                    3455,
                    3456,
                    2945,
                    898,
                    2947,
                    3458,
                    3460,
                    390,
                    4484,
                    2440,
                    4488,
                    4489,
                    4490,
                    2446,
                    913,
                    914,
                    915,
                    916,
                    1426,
                    918,
                    2451,
                    408,
                    922,
                    924,
                    4509,
                    414,
                    416,
                    4513,
                    4514,
                    4515,
                    420,
                    935,
                    937,
                    428,
                    941,
                    942,
                    943,
                    3504,
                    1457,
                    435,
                    948,
                    949,
                    950,
                    439,
                    1461,
                    954,
                    445,
                    1475,
                    1992,
                    970,
                    1995,
                    974,
                    977,
                    978,
                    981,
                    983,
                    984,
                    987,
                    989,
                    992,
                    2529,
                    2532,
                    1510,
                    487,
                    1000,
                    1002,
                    1007,
                    1010,
                    1014,
                    1015,
                    1016,
                    1021,
                    1022,
                    2559
                ],
                "converter": [
                    128,
                    129,
                    131
                ],
                "self.iloc": [
                    128,
                    918
                ],
                "TypeError": [
                    129,
                    2434,
                    4353,
                    292,
                    1290,
                    3660,
                    1628,
                    2900,
                    313,
                    444,
                    893,
                    991
                ],
                "wrapper.__name__": [
                    131
                ],
                "wrapper": [
                    131,
                    132
                ],
                "converter.__name__": [
                    131
                ],
                "base.IndexOpsMixin": [
                    192,
                    185,
                    139,
                    527
                ],
                "base": [
                    192,
                    139,
                    527,
                    2449,
                    185
                ],
                "generic.NDFrame": [
                    420,
                    327,
                    139,
                    3983,
                    788,
                    3988,
                    182,
                    186
                ],
                "generic": [
                    4359,
                    139,
                    4363,
                    1422,
                    3983,
                    3856,
                    4367,
                    4371,
                    788,
                    3988,
                    4121,
                    420,
                    4140,
                    182,
                    3638,
                    186,
                    327,
                    1613,
                    3667
                ],
                "_typ": [
                    178
                ],
                "_name": [
                    180
                ],
                "Optional": [
                    4111,
                    1424,
                    1425,
                    692,
                    180,
                    438,
                    442
                ],
                "Hashable": [
                    442,
                    692,
                    180,
                    438
                ],
                "_metadata": [
                    181
                ],
                "List": [
                    779,
                    181
                ],
                "str": [
                    640,
                    3780,
                    1672,
                    2955,
                    2956,
                    1424,
                    1392,
                    1425,
                    1300,
                    181,
                    2772,
                    2773,
                    4534
                ],
                "_internal_names_set": [
                    182
                ],
                "generic.NDFrame._internal_names_set": [
                    182
                ],
                "_accessors": [
                    183
                ],
                "_deprecations": [
                    184
                ],
                "base.IndexOpsMixin._deprecations": [
                    185
                ],
                "generic.NDFrame._deprecations": [
                    186
                ],
                "frozenset": [
                    291,
                    187
                ],
                "hasnans": [
                    191
                ],
                "property": [
                    388,
                    423,
                    447,
                    489,
                    778,
                    430,
                    1102,
                    528,
                    437,
                    377,
                    381,
                    191
                ],
                "base.IndexOpsMixin.hasnans.func": [
                    192
                ],
                "base.IndexOpsMixin.hasnans": [
                    192
                ],
                "base.IndexOpsMixin.hasnans.__doc__": [
                    192
                ],
                "_data": [
                    194
                ],
                "SingleBlockManager": [
                    194,
                    325,
                    209,
                    210,
                    277,
                    317
                ],
                "div": [
                    195
                ],
                "Callable": [
                    640,
                    195,
                    196
                ],
                "Any": [
                    640,
                    195,
                    196,
                    1460,
                    1430
                ],
                "rdiv": [
                    196
                ],
                "fastpath": [
                    415,
                    398,
                    206,
                    407
                ],
                "isinstance": [
                    897,
                    258,
                    900,
                    903,
                    1032,
                    1672,
                    4488,
                    267,
                    1020,
                    3086,
                    1042,
                    403,
                    915,
                    277,
                    663,
                    920,
                    4513,
                    291,
                    293,
                    937,
                    1067,
                    3378,
                    2556,
                    317,
                    3776,
                    3780,
                    3399,
                    3784,
                    3403,
                    209,
                    3793,
                    2645,
                    854,
                    857,
                    3804,
                    864,
                    992,
                    2528,
                    868,
                    2408,
                    240,
                    1392,
                    3825,
                    244,
                    252,
                    887,
                    2425,
                    1275,
                    892,
                    2429,
                    2431
                ],
                "data": [
                    258,
                    259,
                    267,
                    269,
                    271,
                    272,
                    273,
                    274,
                    277,
                    279,
                    280,
                    289,
                    291,
                    292,
                    293,
                    295,
                    297,
                    300,
                    301,
                    302,
                    303,
                    308,
                    310,
                    317,
                    319,
                    321,
                    323,
                    325,
                    327,
                    209,
                    210,
                    212,
                    214,
                    218,
                    220,
                    352,
                    353,
                    235,
                    236,
                    240,
                    371,
                    244,
                    248,
                    251,
                    252,
                    255
                ],
                "index": [
                    3080,
                    3083,
                    268,
                    269,
                    3086,
                    271,
                    3089,
                    274,
                    278,
                    279,
                    280,
                    3990,
                    3100,
                    3101,
                    3109,
                    679,
                    681,
                    3113,
                    299,
                    683,
                    302,
                    687,
                    4527,
                    308,
                    311,
                    323,
                    707,
                    325,
                    329,
                    210,
                    213,
                    214,
                    355,
                    4196,
                    1382,
                    359,
                    232,
                    233,
                    3952,
                    3954,
                    371,
                    372,
                    3957,
                    4095
                ],
                "copy": [
                    256,
                    320,
                    3840,
                    323,
                    3875,
                    4485,
                    271,
                    3954,
                    211,
                    276,
                    3380,
                    280,
                    4510,
                    319
                ],
                "data.copy": [
                    321,
                    212
                ],
                "data.index": [
                    280,
                    269,
                    214,
                    279
                ],
                "name": [
                    1537,
                    707,
                    1284,
                    1379,
                    1540,
                    328,
                    2571,
                    2572,
                    1294,
                    3827,
                    692,
                    1556,
                    694,
                    3833,
                    696,
                    441,
                    218
                ],
                "ibase.maybe_extract_name": [
                    218
                ],
                "ibase": [
                    302,
                    3120,
                    1273,
                    218,
                    2942,
                    2911
                ],
                "type": [
                    2434,
                    643,
                    292,
                    709,
                    1395,
                    662,
                    218,
                    670
                ],
                "is_empty_data": [
                    220
                ],
                "dtype": [
                    323,
                    358,
                    1383,
                    632,
                    237,
                    238,
                    367,
                    274,
                    275,
                    246,
                    248,
                    220,
                    765,
                    318,
                    319
                ],
                "warnings.warn": [
                    222,
                    791
                ],
                "warnings": [
                    931,
                    932,
                    222,
                    791
                ],
                "DeprecationWarning": [
                    226,
                    933
                ],
                "ensure_index": [
                    233,
                    399
                ],
                "self._validate_dtype": [
                    238
                ],
                "MultiIndex": [
                    864,
                    992,
                    868,
                    3399,
                    937,
                    3086,
                    240,
                    857
                ],
                "NotImplementedError": [
                    3832,
                    241,
                    705
                ],
                "Index": [
                    900,
                    903,
                    779,
                    1042,
                    244,
                    1466,
                    637
                ],
                "data.astype": [
                    248,
                    319
                ],
                "data._values.copy": [
                    251,
                    255
                ],
                "data._values": [
                    251,
                    255
                ],
                "ABCDatetimeIndex": [
                    4488,
                    4513,
                    252
                ],
                "data.tz": [
                    252
                ],
                "np.ndarray": [
                    258,
                    900,
                    1060,
                    653,
                    718,
                    637,
                    2431
                ],
                "np": [
                    2432,
                    258,
                    3458,
                    900,
                    2568,
                    765,
                    1676,
                    653,
                    2446,
                    2065,
                    1684,
                    2202,
                    1054,
                    1060,
                    2241,
                    3784,
                    1994,
                    718,
                    3792,
                    3793,
                    3158,
                    2906,
                    3162,
                    2654,
                    3835,
                    2660,
                    367,
                    2419,
                    2427,
                    637,
                    2430,
                    2431
                ],
                "data.dtype": [
                    259
                ],
                "ValueError": [
                    2937,
                    993,
                    2209,
                    867,
                    2917,
                    262,
                    1063,
                    938,
                    2411,
                    2890,
                    2923,
                    3660,
                    309,
                    982,
                    951,
                    409
                ],
                "ABCSeries": [
                    267
                ],
                "data.reindex": [
                    271
                ],
                "data._data": [
                    272
                ],
                "is_dict_like": [
                    3952,
                    273
                ],
                "self._init_dict": [
                    274
                ],
                "data.index.equals": [
                    280
                ],
                "AssertionError": [
                    1393,
                    283,
                    2557
                ],
                "is_extension_array_dtype": [
                    289,
                    2666,
                    3797
                ],
                "set": [
                    291,
                    693
                ],
                "__name__": [
                    1395,
                    292
                ],
                "ABCSparseArray": [
                    293
                ],
                "data.to_dense": [
                    295
                ],
                "com.maybe_iterable_to_list": [
                    297
                ],
                "com": [
                    928,
                    1059,
                    1509,
                    999,
                    1992,
                    297,
                    846,
                    879,
                    2063,
                    977,
                    2098
                ],
                "is_list_like": [
                    2915,
                    2155,
                    300,
                    303
                ],
                "ibase.default_index": [
                    302,
                    3120,
                    1273,
                    2942,
                    2911
                ],
                "sanitize_array": [
                    323
                ],
                "generic.NDFrame.__init__": [
                    327
                ],
                "self.name": [
                    1284,
                    3460,
                    2662,
                    328,
                    1320,
                    2156,
                    2157,
                    3156
                ],
                "self._set_axis": [
                    329
                ],
                "keys": [
                    353,
                    367,
                    361,
                    359
                ],
                "values": [
                    353,
                    354,
                    3458,
                    3460,
                    3802,
                    358,
                    361,
                    367,
                    3152,
                    3153,
                    3801,
                    3158,
                    983,
                    985,
                    3162,
                    4253
                ],
                "zip": [
                    672,
                    353,
                    1457,
                    684
                ],
                "data.items": [
                    353
                ],
                "list": [
                    2528,
                    3776,
                    354,
                    900,
                    901,
                    877,
                    854,
                    920,
                    1275
                ],
                "na_value_for_dtype": [
                    2643,
                    358
                ],
                "s": [
                    680,
                    681,
                    366,
                    372,
                    373
                ],
                "create_series_with_explicit_dtype": [
                    366
                ],
                "np.float64": [
                    367
                ],
                "s.reindex": [
                    372
                ],
                "s._data": [
                    373
                ],
                "s.index": [
                    681,
                    373
                ],
                "Series": [
                    672,
                    4545,
                    4546,
                    3804,
                    900,
                    3460,
                    4549,
                    4550,
                    2408,
                    1067,
                    683,
                    3156,
                    2645,
                    379,
                    2556,
                    2429
                ],
                "Type": [
                    378,
                    382
                ],
                "DataFrame": [
                    385
                ],
                "self._data._can_hold_na": [
                    390
                ],
                "self._data": [
                    416,
                    390,
                    487,
                    2761,
                    428,
                    525,
                    1069,
                    530,
                    435,
                    563,
                    949,
                    408,
                    541
                ],
                "_index": [
                    392
                ],
                "bool": [
                    2953,
                    394,
                    2954,
                    2957,
                    2958,
                    1072,
                    4336,
                    4337,
                    1619,
                    1620,
                    1621,
                    1622,
                    1623,
                    2771,
                    2774,
                    4338,
                    4339,
                    956
                ],
                "labels": [
                    416,
                    399,
                    401,
                    3089,
                    403,
                    3091,
                    405,
                    3985,
                    408,
                    4093,
                    414
                ],
                "is_all_dates": [
                    401,
                    402
                ],
                "labels.is_all_dates": [
                    401
                ],
                "DatetimeIndex": [
                    403,
                    405
                ],
                "PeriodIndex": [
                    403
                ],
                "TimedeltaIndex": [
                    403
                ],
                "self._data.set_axis": [
                    408,
                    416
                ],
                "axis": [
                    1158,
                    3079,
                    3985,
                    4115,
                    408,
                    416,
                    3873,
                    805,
                    4143,
                    824,
                    3641,
                    2886,
                    3670,
                    1629,
                    4448,
                    1634,
                    3822,
                    3823,
                    4094
                ],
                "tslibs.OutOfBoundsDatetime": [
                    409
                ],
                "tslibs": [
                    409
                ],
                "object.__setattr__": [
                    445,
                    414
                ],
                "object": [
                    3801,
                    445,
                    414
                ],
                "generic.NDFrame._update_inplace": [
                    420
                ],
                "result": [
                    4352,
                    2945,
                    4354,
                    2947,
                    3460,
                    3461,
                    646,
                    2310,
                    2311,
                    649,
                    650,
                    2569,
                    2572,
                    4356,
                    4357,
                    4253,
                    4254,
                    420,
                    3117,
                    1326,
                    1328,
                    3120,
                    690,
                    2098,
                    2099,
                    2101,
                    3123,
                    3125,
                    3642,
                    699,
                    700,
                    701,
                    3643,
                    706,
                    707,
                    709,
                    711,
                    3402,
                    3403,
                    716,
                    3404,
                    3405,
                    3659,
                    3661,
                    3663,
                    3156,
                    3158,
                    3159,
                    860,
                    862,
                    4451,
                    4453,
                    2151,
                    2152,
                    1769,
                    1770,
                    2153,
                    2156,
                    1389,
                    2157,
                    4455,
                    1392,
                    2160,
                    1395,
                    1399,
                    1402,
                    2939,
                    1405,
                    2942
                ],
                "kwargs": [
                    647,
                    2062,
                    1426,
                    3990,
                    797,
                    420,
                    806,
                    808,
                    809,
                    2097,
                    690,
                    824,
                    3642,
                    3647,
                    3648,
                    1991,
                    3659,
                    3661,
                    3671
                ],
                "self._data.dtype": [
                    435,
                    428
                ],
                "self._name": [
                    439
                ],
                "is_hashable": [
                    443
                ],
                "value": [
                    1028,
                    1035,
                    4113,
                    2451,
                    1050,
                    1052,
                    1054,
                    1056,
                    4133,
                    1064,
                    1069,
                    443,
                    445,
                    1089,
                    1092,
                    1093,
                    1097,
                    981,
                    985,
                    987,
                    989,
                    1002,
                    1007,
                    1015,
                    1016,
                    1022
                ],
                "name.setter": [
                    441
                ],
                "self._data.external_values": [
                    487
                ],
                "self._data.internal_values": [
                    525
                ],
                "self._data._block.array_values": [
                    530
                ],
                "self._data._block": [
                    530
                ],
                "Appender": [
                    4359,
                    4363,
                    1422,
                    527,
                    3856,
                    2449,
                    3983,
                    4367,
                    788,
                    3988,
                    4371,
                    1559,
                    4121,
                    4140,
                    1459,
                    3638,
                    1613,
                    3667,
                    3959,
                    1407
                ],
                "base.IndexOpsMixin.array.__doc__": [
                    527
                ],
                "base.IndexOpsMixin.array": [
                    527
                ],
                "ExtensionArray": [
                    529,
                    3825,
                    900,
                    637
                ],
                "self._data.get_values": [
                    541
                ],
                "self._values.ravel": [
                    557
                ],
                "self._values": [
                    4484,
                    3845,
                    1287,
                    1160,
                    2451,
                    4509,
                    809,
                    3116,
                    557,
                    942,
                    3380,
                    954,
                    1089,
                    1093,
                    838,
                    970,
                    3152,
                    3797,
                    983,
                    3799,
                    1016,
                    2905,
                    2661,
                    3820,
                    2669,
                    632
                ],
                "order": [
                    3404,
                    557
                ],
                "int": [
                    772,
                    773,
                    840,
                    559,
                    826
                ],
                "__finalize__": [
                    3585,
                    1286,
                    2311,
                    1161,
                    4490,
                    1685,
                    4254,
                    4515,
                    811,
                    942,
                    2099,
                    948,
                    3380,
                    3771,
                    3159,
                    3161,
                    3809,
                    631,
                    2426
                ],
                "self._constructor": [
                    3585,
                    1286,
                    2311,
                    3847,
                    1161,
                    4490,
                    1685,
                    4254,
                    4515,
                    811,
                    3117,
                    942,
                    2099,
                    948,
                    3380,
                    3771,
                    707,
                    3159,
                    3161,
                    3809,
                    2157,
                    2670,
                    631,
                    2426,
                    2939
                ],
                "self._values.view": [
                    632
                ],
                "self.index": [
                    1024,
                    3585,
                    1282,
                    2562,
                    3460,
                    1159,
                    2311,
                    1673,
                    3080,
                    1675,
                    1676,
                    4488,
                    4489,
                    783,
                    2704,
                    913,
                    2066,
                    915,
                    1049,
                    1277,
                    4254,
                    800,
                    4513,
                    4514,
                    1060,
                    937,
                    941,
                    687,
                    1457,
                    3378,
                    2099,
                    3379,
                    3771,
                    1091,
                    1475,
                    3399,
                    1995,
                    2559,
                    974,
                    3156,
                    853,
                    3159,
                    984,
                    857,
                    2648,
                    3162,
                    860,
                    3807,
                    864,
                    992,
                    3809,
                    2659,
                    868,
                    4197,
                    1000,
                    2409,
                    2410,
                    880,
                    1014,
                    632,
                    890,
                    2939,
                    1021,
                    1278,
                    1279
                ],
                "_HANDLED_TYPES": [
                    637
                ],
                "cls": [
                    643,
                    653
                ],
                "ops.maybe_dispatch_ufunc_to_dunder_op": [
                    646
                ],
                "ops": [
                    4549,
                    646,
                    2566,
                    4550,
                    2571,
                    2572,
                    2649
                ],
                "ufunc": [
                    690,
                    647
                ],
                "method": [
                    2212,
                    3877,
                    647,
                    712,
                    4137,
                    690,
                    4114,
                    2204,
                    2206,
                    703
                ],
                "inputs": [
                    672,
                    647,
                    682,
                    684,
                    655,
                    689,
                    690,
                    669,
                    670
                ],
                "NotImplemented": [
                    649,
                    666
                ],
                "no_defer": [
                    653,
                    662
                ],
                "np.ndarray.__array_ufunc__": [
                    653
                ],
                "cls.__array_ufunc__": [
                    653
                ],
                "item": [
                    655,
                    657,
                    658,
                    661,
                    662,
                    663
                ],
                "higher_priority": [
                    656,
                    665
                ],
                "hasattr": [
                    3797,
                    657,
                    661,
                    669
                ],
                "item.__array_priority__": [
                    658
                ],
                "self.__array_priority__": [
                    658
                ],
                "has_array_ufunc": [
                    665,
                    660
                ],
                "__array_ufunc__": [
                    662
                ],
                "self._HANDLED_TYPES": [
                    663
                ],
                "names": [
                    669,
                    694,
                    693
                ],
                "getattr": [
                    690,
                    669
                ],
                "x": [
                    672,
                    711,
                    683,
                    684,
                    3787,
                    689,
                    669,
                    670
                ],
                "types": [
                    672,
                    684,
                    670
                ],
                "tuple": [
                    992,
                    897,
                    2528,
                    868,
                    709,
                    1158,
                    711,
                    1032,
                    682,
                    689,
                    854,
                    1275,
                    797,
                    670
                ],
                "alignable": [
                    672,
                    674,
                    680,
                    679
                ],
                "t": [
                    672,
                    683,
                    684
                ],
                "issubclass": [
                    672,
                    683
                ],
                "x.reindex": [
                    683
                ],
                "extract_array": [
                    689
                ],
                "lib.is_scalar": [
                    699
                ],
                "lib": [
                    3802,
                    906,
                    699,
                    1046
                ],
                "result.ndim": [
                    2152,
                    701
                ],
                "construct_return": [
                    716,
                    711
                ],
                "np.asarray": [
                    3458,
                    2419,
                    765
                ],
                "self.array": [
                    3458,
                    765,
                    1670,
                    2310
                ],
                "__float__": [
                    771
                ],
                "_coerce_method": [
                    771,
                    772,
                    773
                ],
                "float": [
                    2313,
                    2162,
                    771,
                    2215
                ],
                "__long__": [
                    772
                ],
                "__int__": [
                    773
                ],
                "is_copy": [
                    790
                ],
                "FutureWarning": [
                    794
                ],
                "nv.validate_take": [
                    797
                ],
                "nv": [
                    1158,
                    1991,
                    2062,
                    2097,
                    797
                ],
                "indices": [
                    800,
                    805,
                    809,
                    824,
                    799
                ],
                "ensure_platform_int": [
                    3112,
                    799
                ],
                "new_index": [
                    1282,
                    2564,
                    1159,
                    1287,
                    1161,
                    3847,
                    3083,
                    2572,
                    4489,
                    4490,
                    2704,
                    2705,
                    2706,
                    800,
                    4514,
                    1279,
                    4515,
                    3113,
                    3114,
                    812,
                    941,
                    942,
                    3117,
                    3379,
                    3380,
                    2648,
                    2651,
                    2659,
                    2670,
                    1273,
                    2559
                ],
                "self.index.take": [
                    800
                ],
                "is_categorical_dtype": [
                    2664,
                    802
                ],
                "maybe_convert_indices": [
                    805
                ],
                "self._get_axis": [
                    805
                ],
                "new_values": [
                    3584,
                    3585,
                    3844,
                    4484,
                    4486,
                    3847,
                    1160,
                    1161,
                    4490,
                    4509,
                    4511,
                    4515,
                    809,
                    812,
                    3116,
                    3117,
                    2650,
                    2655,
                    2661,
                    2669,
                    2670
                ],
                "self._values.take": [
                    809,
                    3116
                ],
                "generic.NDFrame.take.__doc__": [
                    788
                ],
                "generic.NDFrame.take": [
                    788
                ],
                "self.take": [
                    824
                ],
                "i": [
                    838,
                    1992,
                    1993,
                    1995,
                    2063,
                    2064,
                    2066,
                    3379
                ],
                "slice": [
                    840,
                    1020,
                    887
                ],
                "self._get_values": [
                    881,
                    843,
                    935
                ],
                "slobj": [
                    891,
                    890,
                    843
                ],
                "key": [
                    1024,
                    897,
                    898,
                    900,
                    901,
                    1028,
                    903,
                    904,
                    1032,
                    906,
                    1035,
                    1020,
                    1039,
                    1040,
                    914,
                    1042,
                    916,
                    1043,
                    918,
                    1044,
                    920,
                    1046,
                    922,
                    1050,
                    924,
                    1052,
                    1054,
                    928,
                    1056,
                    1059,
                    1060,
                    935,
                    1063,
                    1067,
                    1068,
                    941,
                    1069,
                    846,
                    848,
                    977,
                    851,
                    853,
                    854,
                    855,
                    981,
                    984,
                    985,
                    986,
                    860,
                    989,
                    992,
                    868,
                    997,
                    999,
                    1000,
                    1002,
                    876,
                    877,
                    879,
                    880,
                    881,
                    1007,
                    883,
                    1014,
                    887,
                    890,
                    892,
                    1021
                ],
                "com.apply_if_callable": [
                    977,
                    846
                ],
                "Ellipsis": [
                    848,
                    986
                ],
                "key_is_scalar": [
                    857,
                    874,
                    851,
                    852
                ],
                "is_scalar": [
                    1024,
                    851,
                    1039
                ],
                "self.index._convert_scalar_indexer": [
                    853
                ],
                "unpack_1tuple": [
                    855
                ],
                "self.index.get_value": [
                    860,
                    974
                ],
                "InvalidIndexError": [
                    1004,
                    863
                ],
                "KeyError": [
                    1094,
                    867,
                    982
                ],
                "is_iterator": [
                    876
                ],
                "com.is_bool_indexer": [
                    999,
                    879
                ],
                "check_bool_indexer": [
                    880,
                    1000
                ],
                "self._get_with": [
                    883
                ],
                "self.index._convert_slice_indexer": [
                    890,
                    1021
                ],
                "self._slice": [
                    891
                ],
                "ABCDataFrame": [
                    2408,
                    2425,
                    892
                ],
                "self._get_values_tuple": [
                    898
                ],
                "key_type": [
                    904,
                    906,
                    910,
                    1043,
                    1046,
                    1048,
                    1053
                ],
                "key.inferred_type": [
                    904,
                    1043
                ],
                "lib.infer_dtype": [
                    906,
                    1046
                ],
                "self.index.is_integer": [
                    913
                ],
                "self.index.is_floating": [
                    913
                ],
                "self.loc": [
                    1028,
                    1097,
                    914,
                    916,
                    922,
                    989
                ],
                "IntervalIndex": [
                    915
                ],
                "self.reindex": [
                    2705,
                    924,
                    2413
                ],
                "com.any_none": [
                    928
                ],
                "warnings.catch_warnings": [
                    931
                ],
                "warnings.filterwarnings": [
                    932
                ],
                "indexer": [
                    1060,
                    1061,
                    3108,
                    3845,
                    1064,
                    3112,
                    3113,
                    3083,
                    3116,
                    941,
                    942,
                    3090,
                    949,
                    954,
                    1021,
                    1022,
                    3839
                ],
                "self.index.get_loc_level": [
                    941
                ],
                "self._data.get_slice": [
                    949
                ],
                "takeable": [
                    1088,
                    969
                ],
                "label": [
                    1089,
                    1091,
                    1097,
                    970,
                    974
                ],
                "cacher_needs_updating": [
                    1009,
                    978
                ],
                "self._check_is_chained_assignment_possible": [
                    978
                ],
                "self._set_with_engine": [
                    981
                ],
                "is_integer": [
                    984,
                    1024
                ],
                "self.index.inferred_type": [
                    984,
                    1049
                ],
                "_is_unorderable_exception": [
                    996
                ],
                "e": [
                    996
                ],
                "IndexError": [
                    997
                ],
                "self._where": [
                    1002
                ],
                "self._set_with": [
                    1007
                ],
                "self._maybe_update_cacher": [
                    2762,
                    1010,
                    1070
                ],
                "loc": [
                    1016,
                    1091,
                    1093,
                    1014
                ],
                "self.index._engine.get_loc": [
                    1014
                ],
                "self.index._engine": [
                    1014
                ],
                "validate_numeric_casting": [
                    1092,
                    1015
                ],
                "self.dtype": [
                    1092,
                    1321,
                    2643,
                    3797,
                    1015,
                    3771
                ],
                "self._set_values": [
                    1064,
                    1035,
                    1054,
                    1052,
                    1022
                ],
                "Exception": [
                    3400,
                    1036,
                    2421
                ],
                "key._values": [
                    1044,
                    1068
                ],
                "self._set_labels": [
                    1056,
                    1050
                ],
                "key.astype": [
                    1054
                ],
                "np.bool_": [
                    1054
                ],
                "com.asarray_tuplesafe": [
                    1059
                ],
                "self.index.get_indexer": [
                    1060
                ],
                "mask": [
                    1061,
                    1062,
                    1063,
                    2759,
                    2761,
                    1678,
                    1679,
                    1680,
                    3153,
                    3155,
                    3157
                ],
                "mask.any": [
                    3155,
                    1062,
                    1679
                ],
                "self._data.setitem": [
                    1069
                ],
                "self.index.get_loc": [
                    1091
                ],
                "nv.validate_repeat": [
                    1158
                ],
                "self.index.repeat": [
                    3460,
                    1159
                ],
                "repeats": [
                    1160,
                    1159
                ],
                "self._values.repeat": [
                    1160
                ],
                "inplace": [
                    2944,
                    1281,
                    4098,
                    3077,
                    1289,
                    3985,
                    1554,
                    1555,
                    4116,
                    3103,
                    4134,
                    3122,
                    1847,
                    2884,
                    2889,
                    4446,
                    4452,
                    4457,
                    3954,
                    3957,
                    1271
                ],
                "validate_bool_kwarg": [
                    2884,
                    3077,
                    1554,
                    1271,
                    4446
                ],
                "drop": [
                    1272,
                    4092,
                    1295
                ],
                "level": [
                    4097,
                    2563,
                    1669,
                    1672,
                    1673,
                    3082,
                    1675,
                    1676,
                    3084,
                    1295,
                    3874,
                    3504,
                    1627,
                    1635,
                    3954,
                    1274,
                    1275,
                    1276,
                    1277,
                    1278,
                    1279
                ],
                "self.index._get_level_number": [
                    1673,
                    1277
                ],
                "lev": [
                    1675,
                    1680,
                    1681,
                    1684,
                    1685,
                    1277
                ],
                "self.index.nlevels": [
                    1278
                ],
                "self.index.droplevel": [
                    1279
                ],
                "self._values.copy": [
                    1287
                ],
                "df": [
                    1538,
                    1540,
                    2149,
                    1542,
                    2151,
                    1294,
                    1295
                ],
                "self.to_frame": [
                    1426,
                    2149,
                    1294
                ],
                "df.reset_index": [
                    1295
                ],
                "buf": [
                    1319,
                    1326,
                    1426,
                    1398,
                    1304,
                    1402,
                    1404
                ],
                "StringIO": [
                    1304
                ],
                "width": [
                    1305
                ],
                "height": [
                    1312,
                    1305,
                    1307
                ],
                "get_terminal_size": [
                    1305
                ],
                "max_rows": [
                    1387,
                    1306,
                    1323
                ],
                "get_option": [
                    1313,
                    1314,
                    1316,
                    1308,
                    1309
                ],
                "min_rows": [
                    1322,
                    1386,
                    1311
                ],
                "show_dimensions": [
                    1316,
                    1324
                ],
                "self.to_string": [
                    1318
                ],
                "buf.getvalue": [
                    1326
                ],
                "formatter": [
                    1377,
                    1389
                ],
                "fmt.SeriesFormatter": [
                    1377
                ],
                "fmt": [
                    1377
                ],
                "length": [
                    1380
                ],
                "header": [
                    1381
                ],
                "na_rep": [
                    1384
                ],
                "float_format": [
                    1385
                ],
                "formatter.to_string": [
                    1389
                ],
                "repr": [
                    1395
                ],
                "buf.write": [
                    1402
                ],
                "AttributeError": [
                    1403,
                    3660
                ],
                "open": [
                    1404
                ],
                "f": [
                    3790,
                    3793,
                    3794,
                    3799,
                    3802,
                    1404,
                    1405
                ],
                "f.write": [
                    1405
                ],
                "IO": [
                    1424
                ],
                "to_markdown": [
                    1426
                ],
                "mode": [
                    1426
                ],
                "Substitution": [
                    3977,
                    1421,
                    2448,
                    3632,
                    3987
                ],
                "generic._shared_docs": [
                    4359,
                    4363,
                    4140,
                    1613,
                    1422,
                    4367,
                    3856,
                    3667,
                    4371,
                    3638,
                    4121
                ],
                "iter": [
                    1457
                ],
                "Iterable": [
                    1460,
                    1430
                ],
                "Tuple": [
                    1460,
                    1430
                ],
                "Label": [
                    1460,
                    1430
                ],
                "self.items": [
                    1461,
                    1510
                ],
                "items.__doc__": [
                    1459
                ],
                "items": [
                    1459
                ],
                "into_c": [
                    1509,
                    1510
                ],
                "com.standardize_mapping": [
                    1509
                ],
                "into": [
                    1509
                ],
                "self._constructor_expanddim": [
                    1538,
                    1540,
                    3807
                ],
                "ser": [
                    1555,
                    1556,
                    1557
                ],
                "self.copy": [
                    3456,
                    3841,
                    3106,
                    3402,
                    4461,
                    1555
                ],
                "ser.name": [
                    1556
                ],
                "by": [
                    1633,
                    1627
                ],
                "self._get_axis_number": [
                    4448,
                    2886,
                    3079,
                    3823,
                    3670,
                    3641,
                    1629
                ],
                "SeriesGroupBy": [
                    1631
                ],
                "as_index": [
                    1636
                ],
                "sort": [
                    1637
                ],
                "group_keys": [
                    1638
                ],
                "squeeze": [
                    1639
                ],
                "observed": [
                    1640
                ],
                "sum": [
                    1670
                ],
                "notna": [
                    1670,
                    2759,
                    4369,
                    1683,
                    2710
                ],
                "self.index.levels": [
                    1675
                ],
                "level_codes": [
                    1680,
                    1683,
                    1676,
                    1678
                ],
                "np.array": [
                    1676
                ],
                "self.index.codes": [
                    1676
                ],
                "cnt": [
                    1680,
                    1681
                ],
                "lev.insert": [
                    1681
                ],
                "lev._na_value": [
                    1681
                ],
                "obs": [
                    1683,
                    1684
                ],
                "self.values": [
                    2664,
                    2418,
                    1683,
                    2666
                ],
                "out": [
                    1684,
                    1685
                ],
                "np.bincount": [
                    1684
                ],
                "algorithms.mode": [
                    1706
                ],
                "algorithms": [
                    3844,
                    2310,
                    1706,
                    2451,
                    4253,
                    3261,
                    3358
                ],
                "dropna": [
                    1706
                ],
                "unique": [
                    1769
                ],
                "super": [
                    3584,
                    4131,
                    4195,
                    1925,
                    1769,
                    4361,
                    1847,
                    4142,
                    4365,
                    4112,
                    3953,
                    3985,
                    4369,
                    4373,
                    3990,
                    3671,
                    4092,
                    3870
                ],
                "drop_duplicates": [
                    1847
                ],
                "keep": [
                    3261,
                    1925,
                    3358,
                    1847
                ],
                "duplicated": [
                    1925
                ],
                "skipna": [
                    1991,
                    1992,
                    2062,
                    2063,
                    3827,
                    3836
                ],
                "nv.validate_argmin_with_skipna": [
                    1991
                ],
                "args": [
                    3777,
                    3781,
                    1991,
                    3784,
                    3659,
                    3787,
                    3661,
                    2062,
                    2097,
                    3671,
                    3642
                ],
                "nanops.nanargmin": [
                    1992
                ],
                "nanops": [
                    1992,
                    2242,
                    2205,
                    2063
                ],
                "com.values_from_object": [
                    1992,
                    2098,
                    2063
                ],
                "np.nan": [
                    2065,
                    1994,
                    2241,
                    2202
                ],
                "nv.validate_argmax_with_skipna": [
                    2062
                ],
                "nanops.nanargmax": [
                    2063
                ],
                "nv.validate_round": [
                    2097
                ],
                "round": [
                    2098
                ],
                "decimals": [
                    2098
                ],
                "validate_percentile": [
                    2145
                ],
                "q": [
                    2145,
                    2155,
                    2157,
                    2151
                ],
                "df.quantile": [
                    2151
                ],
                "interpolation": [
                    2151
                ],
                "result.iloc": [
                    2160,
                    2153
                ],
                "result.name": [
                    2156
                ],
                "Float64Index": [
                    2157
                ],
                "this": [
                    2240,
                    2560,
                    2242,
                    2563,
                    2564,
                    2566,
                    2705,
                    2707,
                    2710,
                    2200,
                    2201,
                    2206,
                    2239
                ],
                "other": [
                    2434,
                    2562,
                    2563,
                    2566,
                    2440,
                    2571,
                    2446,
                    2704,
                    2706,
                    2707,
                    2708,
                    2710,
                    2200,
                    2206,
                    3871,
                    2239,
                    2242,
                    2758,
                    2759,
                    2761,
                    2645,
                    2648,
                    2649,
                    2653,
                    2661,
                    2408,
                    2409,
                    2410,
                    2414,
                    2419,
                    2425,
                    2427,
                    2556,
                    2429
                ],
                "self.align": [
                    2200,
                    2563,
                    2239
                ],
                "callable": [
                    3952,
                    2204
                ],
                "nanops.nancorr": [
                    2205
                ],
                "this.values": [
                    2242,
                    2206,
                    2566
                ],
                "other.values": [
                    2242,
                    2206,
                    2566
                ],
                "min_periods": [
                    2242,
                    2206
                ],
                "nanops.nancov": [
                    2242
                ],
                "algorithms.diff": [
                    2310
                ],
                "periods": [
                    2310,
                    4143
                ],
                "self.corr": [
                    2356
                ],
                "self.shift": [
                    2356
                ],
                "lag": [
                    2356
                ],
                "common": [
                    2409,
                    2410,
                    2413,
                    2414
                ],
                "self.index.union": [
                    2648,
                    2409,
                    2704
                ],
                "other.index": [
                    2562,
                    2409,
                    2410,
                    2704,
                    2648
                ],
                "left": [
                    4323,
                    2413,
                    4326,
                    2415
                ],
                "right": [
                    2416,
                    4324,
                    2414,
                    4327
                ],
                "other.reindex": [
                    2706,
                    2414
                ],
                "lvals": [
                    2432,
                    2415,
                    2418,
                    2420,
                    2422,
                    2427,
                    2430
                ],
                "left.values": [
                    2415
                ],
                "rvals": [
                    2432,
                    2416,
                    2419,
                    2420,
                    2422,
                    2427,
                    2430,
                    2431
                ],
                "right.values": [
                    2416
                ],
                "lvals.shape": [
                    2420,
                    2422
                ],
                "rvals.shape": [
                    2420,
                    2422
                ],
                "np.dot": [
                    2432,
                    2427,
                    2430
                ],
                "other.columns": [
                    2427
                ],
                "self.dot": [
                    2440,
                    2446
                ],
                "np.transpose": [
                    2446
                ],
                "algorithms.searchsorted": [
                    2451
                ],
                "side": [
                    2451
                ],
                "sorter": [
                    2451
                ],
                "base._shared_docs": [
                    2449
                ],
                "to_append": [
                    2528,
                    2530,
                    2532
                ],
                "to_concat": [
                    2529,
                    2530,
                    2532,
                    2534
                ],
                "to_concat.extend": [
                    2530
                ],
                "concat": [
                    2533
                ],
                "ignore_index": [
                    2941,
                    2534,
                    3119
                ],
                "verify_integrity": [
                    2534
                ],
                "self.index.equals": [
                    2562
                ],
                "this.index": [
                    2564
                ],
                "this_vals": [
                    2569,
                    2566
                ],
                "other_vals": [
                    2569,
                    2566
                ],
                "ops.fill_binop": [
                    2566
                ],
                "fill_value": [
                    3876,
                    2566,
                    4143,
                    3504,
                    2642,
                    2643,
                    2652,
                    2653
                ],
                "np.errstate": [
                    2660,
                    2568,
                    3792,
                    3835,
                    2654
                ],
                "func": [
                    3776,
                    3777,
                    3780,
                    2661,
                    3781,
                    3784,
                    2569,
                    3659,
                    3787,
                    3661,
                    3790,
                    3671,
                    3642,
                    2655
                ],
                "ops.get_op_result_name": [
                    2649,
                    2571
                ],
                "ret": [
                    2572,
                    2573
                ],
                "ops._construct_result": [
                    2572
                ],
                "new_name": [
                    2649,
                    2670,
                    2662
                ],
                "idx": [
                    2930,
                    2931,
                    2934,
                    2935,
                    2651,
                    2652,
                    2653,
                    2911
                ],
                "lv": [
                    2652,
                    2661,
                    2655
                ],
                "self.get": [
                    2652
                ],
                "rv": [
                    2653,
                    2655
                ],
                "other.get": [
                    2653
                ],
                "new_values.append": [
                    2655
                ],
                "try_cast_to_ea": [
                    2669
                ],
                "this.dtype.kind": [
                    2707
                ],
                "this.dtype": [
                    2707
                ],
                "other.dtype.kind": [
                    2707
                ],
                "other.dtype": [
                    2707
                ],
                "to_datetime": [
                    2708
                ],
                "this.where": [
                    2710
                ],
                "other.reindex_like": [
                    2758
                ],
                "self._data.putmask": [
                    2761
                ],
                "self._is_cached": [
                    2889
                ],
                "arr.argsort": [
                    2899,
                    2903
                ],
                "arr": [
                    2913,
                    2899,
                    2903,
                    2905,
                    2939,
                    2908
                ],
                "kind": [
                    3162,
                    2899,
                    3109,
                    3158
                ],
                "sorted_index": [
                    2930,
                    2931,
                    2934,
                    2935,
                    2906,
                    2939,
                    2942
                ],
                "np.empty": [
                    2906
                ],
                "np.int32": [
                    2906
                ],
                "bad": [
                    2931,
                    2933,
                    2935,
                    2908,
                    2910
                ],
                "isna": [
                    3153,
                    2908,
                    4361
                ],
                "good": [
                    2913,
                    2929,
                    2930,
                    2934,
                    2910
                ],
                "argsorted": [
                    2913,
                    2930,
                    2934,
                    2926
                ],
                "_try_kind_sort": [
                    2913
                ],
                "ascending": [
                    2915,
                    2916,
                    3109,
                    2918,
                    2920,
                    2922,
                    3084,
                    2925,
                    3092,
                    3100,
                    3101
                ],
                "is_bool": [
                    2922
                ],
                "na_position": [
                    3109,
                    2928,
                    2932,
                    3093,
                    2937
                ],
                "n": [
                    2929,
                    2930,
                    2931,
                    2933,
                    2934,
                    2935,
                    3261,
                    3358
                ],
                "good.sum": [
                    2929
                ],
                "bad.sum": [
                    2933
                ],
                "result.index": [
                    3120,
                    3403,
                    3404,
                    2942
                ],
                "self._update_inplace": [
                    2945,
                    3123,
                    4453
                ],
                "result.__finalize__": [
                    2947,
                    3125
                ],
                "index.sortlevel": [
                    3083
                ],
                "sort_remaining": [
                    3084
                ],
                "index._sort_levels_monotonic": [
                    3089
                ],
                "lexsort_indexer": [
                    3090
                ],
                "labels._get_codes_for_sorting": [
                    3091
                ],
                "index.is_monotonic_increasing": [
                    3100
                ],
                "index.is_monotonic_decreasing": [
                    3101
                ],
                "nargsort": [
                    3108
                ],
                "index.take": [
                    3113
                ],
                "new_index._sort_levels_monotonic": [
                    3114
                ],
                "notmask": [
                    3157,
                    3158
                ],
                "np.argsort": [
                    3162,
                    3158
                ],
                "nlargest": [
                    3261
                ],
                "algorithms.SelectNSeries": [
                    3261,
                    3358
                ],
                "nsmallest": [
                    3358
                ],
                "ABCMultiIndex": [
                    3378,
                    3403
                ],
                "self.index.swaplevel": [
                    3379
                ],
                "j": [
                    3379
                ],
                "result.index.reorder_levels": [
                    3404
                ],
                "is_object_dtype": [
                    4344,
                    3455
                ],
                "counts": [
                    3458,
                    3460
                ],
                "reshape.explode": [
                    3458
                ],
                "reshape": [
                    3458
                ],
                "unstack": [
                    3504
                ],
                "_map_values": [
                    3584
                ],
                "arg": [
                    3584
                ],
                "na_action": [
                    3584
                ],
                "_agg_see_also_doc": [
                    3601,
                    3633
                ],
                "dedent": [
                    3601,
                    3610
                ],
                "_agg_examples_doc": [
                    3610,
                    3634
                ],
                "how": [
                    4489,
                    3642
                ],
                "self._aggregate": [
                    3642
                ],
                "kwargs.pop": [
                    3648,
                    3647
                ],
                "self.apply": [
                    3659
                ],
                "agg": [
                    3665
                ],
                "aggregate": [
                    3665
                ],
                "transform": [
                    3671
                ],
                "self.aggregate": [
                    3777
                ],
                "kwds": [
                    3777,
                    3781,
                    3784,
                    3787,
                    3827,
                    3836
                ],
                "self._try_aggregate_string_function": [
                    3781
                ],
                "np.ufunc": [
                    3784,
                    3793
                ],
                "mapped": [
                    3809,
                    3799,
                    3802,
                    3804,
                    3807
                ],
                "self._values.map": [
                    3799
                ],
                "self.astype": [
                    3801
                ],
                "lib.map_infer": [
                    3802
                ],
                "convert_dtype": [
                    3802
                ],
                "pd.array": [
                    3807
                ],
                "pd": [
                    3807
                ],
                "delegate": [
                    3836,
                    3825,
                    3827,
                    3820
                ],
                "delegate._reduce": [
                    3827
                ],
                "numeric_only": [
                    3831
                ],
                "op": [
                    3836
                ],
                "algorithms.take_1d": [
                    3844
                ],
                "align": [
                    3870
                ],
                "join": [
                    3872
                ],
                "limit": [
                    4117,
                    3878,
                    4135
                ],
                "fill_axis": [
                    3879
                ],
                "broadcast_axis": [
                    3880
                ],
                "rename": [
                    3953
                ],
                "errors": [
                    3954,
                    4099
                ],
                "self._set_name": [
                    3957
                ],
                "set_axis": [
                    3985
                ],
                "generic.NDFrame.set_axis.__doc__": [
                    3983
                ],
                "generic.NDFrame.set_axis": [
                    3983
                ],
                "reindex": [
                    3990
                ],
                "generic.NDFrame.reindex.__doc__": [
                    3988
                ],
                "generic.NDFrame.reindex": [
                    3988
                ],
                "columns": [
                    4096
                ],
                "fillna": [
                    4112
                ],
                "downcast": [
                    4118
                ],
                "doc": [
                    4102
                ],
                "NDFrame.fillna": [
                    4102
                ],
                "NDFrame": [
                    4102
                ],
                "replace": [
                    4131
                ],
                "to_replace": [
                    4132
                ],
                "regex": [
                    4136
                ],
                "shift": [
                    4142
                ],
                "freq": [
                    4489,
                    4514,
                    4143
                ],
                "v": [
                    4195,
                    4197,
                    4198
                ],
                "memory_usage": [
                    4195
                ],
                "deep": [
                    4195,
                    4197
                ],
                "self.index.memory_usage": [
                    4197
                ],
                "algorithms.isin": [
                    4253
                ],
                "inclusive": [
                    4322
                ],
                "lmask": [
                    4329,
                    4323,
                    4326
                ],
                "rmask": [
                    4329,
                    4324,
                    4327
                ],
                "input_series": [
                    4352,
                    4354,
                    4356,
                    4341,
                    4343,
                    4344,
                    4345,
                    4349
                ],
                "infer_objects": [
                    4342
                ],
                "input_series.infer_objects": [
                    4343
                ],
                "input_series.copy": [
                    4345,
                    4354,
                    4356
                ],
                "convert_string": [
                    4347,
                    4349
                ],
                "convert_integer": [
                    4347,
                    4349
                ],
                "convert_boolean": [
                    4347,
                    4349
                ],
                "inferred_dtype": [
                    4352,
                    4348
                ],
                "convert_dtypes": [
                    4348
                ],
                "input_series._values": [
                    4349
                ],
                "input_series.astype": [
                    4352
                ],
                "isnull": [
                    4365
                ],
                "notnull": [
                    4373
                ],
                "self._can_hold_na": [
                    4450
                ],
                "remove_na_arraylike": [
                    4451
                ],
                "new_values.copy": [
                    4486,
                    4511
                ],
                "ABCPeriodIndex": [
                    4488
                ],
                "self.index.to_timestamp": [
                    4489
                ],
                "self.index.to_period": [
                    4514
                ],
                "_AXIS_ORDERS": [
                    4523,
                    4519
                ],
                "_AXIS_NUMBERS": [
                    4520
                ],
                "_AXIS_NAMES": [
                    4521
                ],
                "_AXIS_REVERSED": [
                    4522
                ],
                "_AXIS_LEN": [
                    4523
                ],
                "_info_axis_number": [
                    4524
                ],
                "_info_axis_name": [
                    4525
                ],
                "properties.AxisProperty": [
                    4527
                ],
                "properties": [
                    4527
                ],
                "CachedAccessor": [
                    4534,
                    4535,
                    4536,
                    4537,
                    4538
                ],
                "StringMethods": [
                    4534
                ],
                "dt": [
                    4535
                ],
                "CombinedDatetimelikeProperties": [
                    4535
                ],
                "cat": [
                    4536
                ],
                "CategoricalAccessor": [
                    4536
                ],
                "plot": [
                    4537
                ],
                "pandas.plotting.PlotAccessor": [
                    4537
                ],
                "pandas.plotting": [
                    4537,
                    4542
                ],
                "pandas": [
                    4537,
                    4542
                ],
                "sparse": [
                    4538
                ],
                "SparseAccessor": [
                    4538
                ],
                "hist": [
                    4542
                ],
                "pandas.plotting.hist_series": [
                    4542
                ],
                "Series._add_numeric_operations": [
                    4545
                ],
                "Series._add_series_or_dataframe_operations": [
                    4546
                ],
                "ops.add_flex_arithmetic_methods": [
                    4549
                ],
                "ops.add_special_arithmetic_methods": [
                    4550
                ]
            },
            "filtered_variables_in_file": {
                "TYPE_CHECKING": [
                    97
                ],
                "__all__": [
                    101
                ],
                "_shared_doc_kwargs": [
                    4102,
                    103,
                    4359,
                    3978,
                    4363,
                    4140,
                    1613,
                    4367,
                    3856,
                    3667,
                    3636,
                    3987,
                    4371,
                    4121
                ],
                "self": [
                    1024,
                    2560,
                    1538,
                    2562,
                    1028,
                    1540,
                    2563,
                    3079,
                    3080,
                    3585,
                    1035,
                    2571,
                    525,
                    2572,
                    2063,
                    3599,
                    530,
                    1555,
                    2066,
                    1049,
                    1050,
                    1052,
                    541,
                    1054,
                    1056,
                    3106,
                    1060,
                    1064,
                    3116,
                    557,
                    1069,
                    1070,
                    3117,
                    2098,
                    563,
                    2099,
                    3123,
                    3125,
                    3641,
                    3642,
                    1089,
                    1091,
                    1092,
                    1093,
                    1097,
                    3659,
                    3661,
                    3152,
                    2643,
                    3156,
                    3670,
                    3159,
                    2648,
                    2649,
                    3161,
                    3162,
                    2652,
                    1629,
                    3163,
                    1632,
                    2659,
                    2149,
                    2661,
                    2662,
                    2664,
                    4197,
                    2666,
                    2156,
                    2157,
                    2669,
                    2670,
                    631,
                    632,
                    633,
                    127,
                    128,
                    643,
                    1670,
                    647,
                    1159,
                    1160,
                    1161,
                    1673,
                    1675,
                    1676,
                    2704,
                    2705,
                    658,
                    1683,
                    1685,
                    663,
                    2200,
                    4253,
                    4254,
                    1706,
                    687,
                    3770,
                    3771,
                    3772,
                    3261,
                    2239,
                    3777,
                    707,
                    3781,
                    2758,
                    2761,
                    2762,
                    3794,
                    3797,
                    3799,
                    3801,
                    218,
                    3807,
                    3809,
                    4323,
                    4324,
                    4326,
                    4327,
                    3820,
                    238,
                    3823,
                    4341,
                    1273,
                    765,
                    1277,
                    1278,
                    1279,
                    3841,
                    1282,
                    3842,
                    1284,
                    3845,
                    1286,
                    1287,
                    1288,
                    2310,
                    2311,
                    3847,
                    1294,
                    783,
                    274,
                    3358,
                    800,
                    802,
                    805,
                    1318,
                    1320,
                    809,
                    1321,
                    811,
                    813,
                    3378,
                    3379,
                    2356,
                    3380,
                    3381,
                    824,
                    838,
                    327,
                    328,
                    329,
                    2886,
                    843,
                    2889,
                    3399,
                    846,
                    3402,
                    849,
                    853,
                    857,
                    2905,
                    2906,
                    860,
                    2911,
                    864,
                    4448,
                    1378,
                    4450,
                    868,
                    4451,
                    4453,
                    2409,
                    2410,
                    2413,
                    4461,
                    880,
                    881,
                    2418,
                    883,
                    3957,
                    890,
                    891,
                    2426,
                    2428,
                    2939,
                    3455,
                    3456,
                    2945,
                    898,
                    2947,
                    3458,
                    3460,
                    390,
                    4484,
                    2440,
                    4488,
                    4489,
                    4490,
                    2446,
                    913,
                    914,
                    915,
                    916,
                    1426,
                    918,
                    2451,
                    408,
                    922,
                    924,
                    4509,
                    414,
                    416,
                    4513,
                    4514,
                    4515,
                    420,
                    935,
                    937,
                    428,
                    941,
                    942,
                    943,
                    3504,
                    1457,
                    435,
                    948,
                    949,
                    950,
                    439,
                    1461,
                    954,
                    445,
                    1475,
                    1992,
                    970,
                    1995,
                    974,
                    977,
                    978,
                    981,
                    983,
                    984,
                    987,
                    989,
                    992,
                    2529,
                    2532,
                    1510,
                    487,
                    1000,
                    1002,
                    1007,
                    1010,
                    1014,
                    1015,
                    1016,
                    1021,
                    1022,
                    2559
                ],
                "converter": [
                    128,
                    129,
                    131
                ],
                "self.iloc": [
                    128,
                    918
                ],
                "wrapper.__name__": [
                    131
                ],
                "wrapper": [
                    131,
                    132
                ],
                "converter.__name__": [
                    131
                ],
                "base.IndexOpsMixin": [
                    192,
                    185,
                    139,
                    527
                ],
                "base": [
                    192,
                    139,
                    527,
                    2449,
                    185
                ],
                "generic.NDFrame": [
                    420,
                    327,
                    139,
                    3983,
                    788,
                    3988,
                    182,
                    186
                ],
                "generic": [
                    4359,
                    139,
                    4363,
                    1422,
                    3983,
                    3856,
                    4367,
                    4371,
                    788,
                    3988,
                    4121,
                    420,
                    4140,
                    182,
                    3638,
                    186,
                    327,
                    1613,
                    3667
                ],
                "_typ": [
                    178
                ],
                "_name": [
                    180
                ],
                "Optional": [
                    4111,
                    1424,
                    1425,
                    692,
                    180,
                    438,
                    442
                ],
                "Hashable": [
                    442,
                    692,
                    180,
                    438
                ],
                "_metadata": [
                    181
                ],
                "List": [
                    779,
                    181
                ],
                "_internal_names_set": [
                    182
                ],
                "generic.NDFrame._internal_names_set": [
                    182
                ],
                "_accessors": [
                    183
                ],
                "_deprecations": [
                    184
                ],
                "base.IndexOpsMixin._deprecations": [
                    185
                ],
                "generic.NDFrame._deprecations": [
                    186
                ],
                "hasnans": [
                    191
                ],
                "base.IndexOpsMixin.hasnans.func": [
                    192
                ],
                "base.IndexOpsMixin.hasnans": [
                    192
                ],
                "base.IndexOpsMixin.hasnans.__doc__": [
                    192
                ],
                "_data": [
                    194
                ],
                "SingleBlockManager": [
                    194,
                    325,
                    209,
                    210,
                    277,
                    317
                ],
                "div": [
                    195
                ],
                "Callable": [
                    640,
                    195,
                    196
                ],
                "Any": [
                    640,
                    195,
                    196,
                    1460,
                    1430
                ],
                "rdiv": [
                    196
                ],
                "fastpath": [
                    415,
                    398,
                    206,
                    407
                ],
                "data": [
                    258,
                    259,
                    267,
                    269,
                    271,
                    272,
                    273,
                    274,
                    277,
                    279,
                    280,
                    289,
                    291,
                    292,
                    293,
                    295,
                    297,
                    300,
                    301,
                    302,
                    303,
                    308,
                    310,
                    317,
                    319,
                    321,
                    323,
                    325,
                    327,
                    209,
                    210,
                    212,
                    214,
                    218,
                    220,
                    352,
                    353,
                    235,
                    236,
                    240,
                    371,
                    244,
                    248,
                    251,
                    252,
                    255
                ],
                "index": [
                    3080,
                    3083,
                    268,
                    269,
                    3086,
                    271,
                    3089,
                    274,
                    278,
                    279,
                    280,
                    3990,
                    3100,
                    3101,
                    3109,
                    679,
                    681,
                    3113,
                    299,
                    683,
                    302,
                    687,
                    4527,
                    308,
                    311,
                    323,
                    707,
                    325,
                    329,
                    210,
                    213,
                    214,
                    355,
                    4196,
                    1382,
                    359,
                    232,
                    233,
                    3952,
                    3954,
                    371,
                    372,
                    3957,
                    4095
                ],
                "copy": [
                    256,
                    320,
                    3840,
                    323,
                    3875,
                    4485,
                    271,
                    3954,
                    211,
                    276,
                    3380,
                    280,
                    4510,
                    319
                ],
                "data.copy": [
                    321,
                    212
                ],
                "data.index": [
                    280,
                    269,
                    214,
                    279
                ],
                "name": [
                    1537,
                    707,
                    1284,
                    1379,
                    1540,
                    328,
                    2571,
                    2572,
                    1294,
                    3827,
                    692,
                    1556,
                    694,
                    3833,
                    696,
                    441,
                    218
                ],
                "ibase.maybe_extract_name": [
                    218
                ],
                "ibase": [
                    302,
                    3120,
                    1273,
                    218,
                    2942,
                    2911
                ],
                "is_empty_data": [
                    220
                ],
                "dtype": [
                    323,
                    358,
                    1383,
                    632,
                    237,
                    238,
                    367,
                    274,
                    275,
                    246,
                    248,
                    220,
                    765,
                    318,
                    319
                ],
                "warnings.warn": [
                    222,
                    791
                ],
                "warnings": [
                    931,
                    932,
                    222,
                    791
                ],
                "ensure_index": [
                    233,
                    399
                ],
                "self._validate_dtype": [
                    238
                ],
                "MultiIndex": [
                    864,
                    992,
                    868,
                    3399,
                    937,
                    3086,
                    240,
                    857
                ],
                "Index": [
                    900,
                    903,
                    779,
                    1042,
                    244,
                    1466,
                    637
                ],
                "data.astype": [
                    248,
                    319
                ],
                "data._values.copy": [
                    251,
                    255
                ],
                "data._values": [
                    251,
                    255
                ],
                "ABCDatetimeIndex": [
                    4488,
                    4513,
                    252
                ],
                "data.tz": [
                    252
                ],
                "np.ndarray": [
                    258,
                    900,
                    1060,
                    653,
                    718,
                    637,
                    2431
                ],
                "np": [
                    2432,
                    258,
                    3458,
                    900,
                    2568,
                    765,
                    1676,
                    653,
                    2446,
                    2065,
                    1684,
                    2202,
                    1054,
                    1060,
                    2241,
                    3784,
                    1994,
                    718,
                    3792,
                    3793,
                    3158,
                    2906,
                    3162,
                    2654,
                    3835,
                    2660,
                    367,
                    2419,
                    2427,
                    637,
                    2430,
                    2431
                ],
                "data.dtype": [
                    259
                ],
                "ABCSeries": [
                    267
                ],
                "data.reindex": [
                    271
                ],
                "data._data": [
                    272
                ],
                "is_dict_like": [
                    3952,
                    273
                ],
                "self._init_dict": [
                    274
                ],
                "data.index.equals": [
                    280
                ],
                "is_extension_array_dtype": [
                    289,
                    2666,
                    3797
                ],
                "ABCSparseArray": [
                    293
                ],
                "data.to_dense": [
                    295
                ],
                "com.maybe_iterable_to_list": [
                    297
                ],
                "com": [
                    928,
                    1059,
                    1509,
                    999,
                    1992,
                    297,
                    846,
                    879,
                    2063,
                    977,
                    2098
                ],
                "is_list_like": [
                    2915,
                    2155,
                    300,
                    303
                ],
                "ibase.default_index": [
                    302,
                    3120,
                    1273,
                    2942,
                    2911
                ],
                "sanitize_array": [
                    323
                ],
                "generic.NDFrame.__init__": [
                    327
                ],
                "self.name": [
                    1284,
                    3460,
                    2662,
                    328,
                    1320,
                    2156,
                    2157,
                    3156
                ],
                "self._set_axis": [
                    329
                ],
                "keys": [
                    353,
                    367,
                    361,
                    359
                ],
                "values": [
                    353,
                    354,
                    3458,
                    3460,
                    3802,
                    358,
                    361,
                    367,
                    3152,
                    3153,
                    3801,
                    3158,
                    983,
                    985,
                    3162,
                    4253
                ],
                "data.items": [
                    353
                ],
                "na_value_for_dtype": [
                    2643,
                    358
                ],
                "s": [
                    680,
                    681,
                    366,
                    372,
                    373
                ],
                "create_series_with_explicit_dtype": [
                    366
                ],
                "np.float64": [
                    367
                ],
                "s.reindex": [
                    372
                ],
                "s._data": [
                    373
                ],
                "s.index": [
                    681,
                    373
                ],
                "Series": [
                    672,
                    4545,
                    4546,
                    3804,
                    900,
                    3460,
                    4549,
                    4550,
                    2408,
                    1067,
                    683,
                    3156,
                    2645,
                    379,
                    2556,
                    2429
                ],
                "Type": [
                    378,
                    382
                ],
                "DataFrame": [
                    385
                ],
                "self._data._can_hold_na": [
                    390
                ],
                "self._data": [
                    416,
                    390,
                    487,
                    2761,
                    428,
                    525,
                    1069,
                    530,
                    435,
                    563,
                    949,
                    408,
                    541
                ],
                "_index": [
                    392
                ],
                "labels": [
                    416,
                    399,
                    401,
                    3089,
                    403,
                    3091,
                    405,
                    3985,
                    408,
                    4093,
                    414
                ],
                "is_all_dates": [
                    401,
                    402
                ],
                "labels.is_all_dates": [
                    401
                ],
                "DatetimeIndex": [
                    403,
                    405
                ],
                "PeriodIndex": [
                    403
                ],
                "TimedeltaIndex": [
                    403
                ],
                "self._data.set_axis": [
                    408,
                    416
                ],
                "axis": [
                    1158,
                    3079,
                    3985,
                    4115,
                    408,
                    416,
                    3873,
                    805,
                    4143,
                    824,
                    3641,
                    2886,
                    3670,
                    1629,
                    4448,
                    1634,
                    3822,
                    3823,
                    4094
                ],
                "tslibs.OutOfBoundsDatetime": [
                    409
                ],
                "tslibs": [
                    409
                ],
                "object.__setattr__": [
                    445,
                    414
                ],
                "generic.NDFrame._update_inplace": [
                    420
                ],
                "result": [
                    4352,
                    2945,
                    4354,
                    2947,
                    3460,
                    3461,
                    646,
                    2310,
                    2311,
                    649,
                    650,
                    2569,
                    2572,
                    4356,
                    4357,
                    4253,
                    4254,
                    420,
                    3117,
                    1326,
                    1328,
                    3120,
                    690,
                    2098,
                    2099,
                    2101,
                    3123,
                    3125,
                    3642,
                    699,
                    700,
                    701,
                    3643,
                    706,
                    707,
                    709,
                    711,
                    3402,
                    3403,
                    716,
                    3404,
                    3405,
                    3659,
                    3661,
                    3663,
                    3156,
                    3158,
                    3159,
                    860,
                    862,
                    4451,
                    4453,
                    2151,
                    2152,
                    1769,
                    1770,
                    2153,
                    2156,
                    1389,
                    2157,
                    4455,
                    1392,
                    2160,
                    1395,
                    1399,
                    1402,
                    2939,
                    1405,
                    2942
                ],
                "kwargs": [
                    647,
                    2062,
                    1426,
                    3990,
                    797,
                    420,
                    806,
                    808,
                    809,
                    2097,
                    690,
                    824,
                    3642,
                    3647,
                    3648,
                    1991,
                    3659,
                    3661,
                    3671
                ],
                "self._data.dtype": [
                    435,
                    428
                ],
                "self._name": [
                    439
                ],
                "is_hashable": [
                    443
                ],
                "value": [
                    1028,
                    1035,
                    4113,
                    2451,
                    1050,
                    1052,
                    1054,
                    1056,
                    4133,
                    1064,
                    1069,
                    443,
                    445,
                    1089,
                    1092,
                    1093,
                    1097,
                    981,
                    985,
                    987,
                    989,
                    1002,
                    1007,
                    1015,
                    1016,
                    1022
                ],
                "name.setter": [
                    441
                ],
                "self._data.external_values": [
                    487
                ],
                "self._data.internal_values": [
                    525
                ],
                "self._data._block.array_values": [
                    530
                ],
                "self._data._block": [
                    530
                ],
                "Appender": [
                    4359,
                    4363,
                    1422,
                    527,
                    3856,
                    2449,
                    3983,
                    4367,
                    788,
                    3988,
                    4371,
                    1559,
                    4121,
                    4140,
                    1459,
                    3638,
                    1613,
                    3667,
                    3959,
                    1407
                ],
                "base.IndexOpsMixin.array.__doc__": [
                    527
                ],
                "base.IndexOpsMixin.array": [
                    527
                ],
                "ExtensionArray": [
                    529,
                    3825,
                    900,
                    637
                ],
                "self._data.get_values": [
                    541
                ],
                "self._values.ravel": [
                    557
                ],
                "self._values": [
                    4484,
                    3845,
                    1287,
                    1160,
                    2451,
                    4509,
                    809,
                    3116,
                    557,
                    942,
                    3380,
                    954,
                    1089,
                    1093,
                    838,
                    970,
                    3152,
                    3797,
                    983,
                    3799,
                    1016,
                    2905,
                    2661,
                    3820,
                    2669,
                    632
                ],
                "order": [
                    3404,
                    557
                ],
                "__finalize__": [
                    3585,
                    1286,
                    2311,
                    1161,
                    4490,
                    1685,
                    4254,
                    4515,
                    811,
                    942,
                    2099,
                    948,
                    3380,
                    3771,
                    3159,
                    3161,
                    3809,
                    631,
                    2426
                ],
                "self._constructor": [
                    3585,
                    1286,
                    2311,
                    3847,
                    1161,
                    4490,
                    1685,
                    4254,
                    4515,
                    811,
                    3117,
                    942,
                    2099,
                    948,
                    3380,
                    3771,
                    707,
                    3159,
                    3161,
                    3809,
                    2157,
                    2670,
                    631,
                    2426,
                    2939
                ],
                "self._values.view": [
                    632
                ],
                "self.index": [
                    1024,
                    3585,
                    1282,
                    2562,
                    3460,
                    1159,
                    2311,
                    1673,
                    3080,
                    1675,
                    1676,
                    4488,
                    4489,
                    783,
                    2704,
                    913,
                    2066,
                    915,
                    1049,
                    1277,
                    4254,
                    800,
                    4513,
                    4514,
                    1060,
                    937,
                    941,
                    687,
                    1457,
                    3378,
                    2099,
                    3379,
                    3771,
                    1091,
                    1475,
                    3399,
                    1995,
                    2559,
                    974,
                    3156,
                    853,
                    3159,
                    984,
                    857,
                    2648,
                    3162,
                    860,
                    3807,
                    864,
                    992,
                    3809,
                    2659,
                    868,
                    4197,
                    1000,
                    2409,
                    2410,
                    880,
                    1014,
                    632,
                    890,
                    2939,
                    1021,
                    1278,
                    1279
                ],
                "_HANDLED_TYPES": [
                    637
                ],
                "cls": [
                    643,
                    653
                ],
                "ops.maybe_dispatch_ufunc_to_dunder_op": [
                    646
                ],
                "ops": [
                    4549,
                    646,
                    2566,
                    4550,
                    2571,
                    2572,
                    2649
                ],
                "ufunc": [
                    690,
                    647
                ],
                "method": [
                    2212,
                    3877,
                    647,
                    712,
                    4137,
                    690,
                    4114,
                    2204,
                    2206,
                    703
                ],
                "inputs": [
                    672,
                    647,
                    682,
                    684,
                    655,
                    689,
                    690,
                    669,
                    670
                ],
                "no_defer": [
                    653,
                    662
                ],
                "np.ndarray.__array_ufunc__": [
                    653
                ],
                "cls.__array_ufunc__": [
                    653
                ],
                "item": [
                    655,
                    657,
                    658,
                    661,
                    662,
                    663
                ],
                "higher_priority": [
                    656,
                    665
                ],
                "item.__array_priority__": [
                    658
                ],
                "self.__array_priority__": [
                    658
                ],
                "has_array_ufunc": [
                    665,
                    660
                ],
                "__array_ufunc__": [
                    662
                ],
                "self._HANDLED_TYPES": [
                    663
                ],
                "names": [
                    669,
                    694,
                    693
                ],
                "x": [
                    672,
                    711,
                    683,
                    684,
                    3787,
                    689,
                    669,
                    670
                ],
                "types": [
                    672,
                    684,
                    670
                ],
                "alignable": [
                    672,
                    674,
                    680,
                    679
                ],
                "t": [
                    672,
                    683,
                    684
                ],
                "x.reindex": [
                    683
                ],
                "extract_array": [
                    689
                ],
                "lib.is_scalar": [
                    699
                ],
                "lib": [
                    3802,
                    906,
                    699,
                    1046
                ],
                "result.ndim": [
                    2152,
                    701
                ],
                "construct_return": [
                    716,
                    711
                ],
                "np.asarray": [
                    3458,
                    2419,
                    765
                ],
                "self.array": [
                    3458,
                    765,
                    1670,
                    2310
                ],
                "__float__": [
                    771
                ],
                "_coerce_method": [
                    771,
                    772,
                    773
                ],
                "__long__": [
                    772
                ],
                "__int__": [
                    773
                ],
                "is_copy": [
                    790
                ],
                "nv.validate_take": [
                    797
                ],
                "nv": [
                    1158,
                    1991,
                    2062,
                    2097,
                    797
                ],
                "indices": [
                    800,
                    805,
                    809,
                    824,
                    799
                ],
                "ensure_platform_int": [
                    3112,
                    799
                ],
                "new_index": [
                    1282,
                    2564,
                    1159,
                    1287,
                    1161,
                    3847,
                    3083,
                    2572,
                    4489,
                    4490,
                    2704,
                    2705,
                    2706,
                    800,
                    4514,
                    1279,
                    4515,
                    3113,
                    3114,
                    812,
                    941,
                    942,
                    3117,
                    3379,
                    3380,
                    2648,
                    2651,
                    2659,
                    2670,
                    1273,
                    2559
                ],
                "self.index.take": [
                    800
                ],
                "is_categorical_dtype": [
                    2664,
                    802
                ],
                "maybe_convert_indices": [
                    805
                ],
                "self._get_axis": [
                    805
                ],
                "new_values": [
                    3584,
                    3585,
                    3844,
                    4484,
                    4486,
                    3847,
                    1160,
                    1161,
                    4490,
                    4509,
                    4511,
                    4515,
                    809,
                    812,
                    3116,
                    3117,
                    2650,
                    2655,
                    2661,
                    2669,
                    2670
                ],
                "self._values.take": [
                    809,
                    3116
                ],
                "generic.NDFrame.take.__doc__": [
                    788
                ],
                "generic.NDFrame.take": [
                    788
                ],
                "self.take": [
                    824
                ],
                "i": [
                    838,
                    1992,
                    1993,
                    1995,
                    2063,
                    2064,
                    2066,
                    3379
                ],
                "self._get_values": [
                    881,
                    843,
                    935
                ],
                "slobj": [
                    891,
                    890,
                    843
                ],
                "key": [
                    1024,
                    897,
                    898,
                    900,
                    901,
                    1028,
                    903,
                    904,
                    1032,
                    906,
                    1035,
                    1020,
                    1039,
                    1040,
                    914,
                    1042,
                    916,
                    1043,
                    918,
                    1044,
                    920,
                    1046,
                    922,
                    1050,
                    924,
                    1052,
                    1054,
                    928,
                    1056,
                    1059,
                    1060,
                    935,
                    1063,
                    1067,
                    1068,
                    941,
                    1069,
                    846,
                    848,
                    977,
                    851,
                    853,
                    854,
                    855,
                    981,
                    984,
                    985,
                    986,
                    860,
                    989,
                    992,
                    868,
                    997,
                    999,
                    1000,
                    1002,
                    876,
                    877,
                    879,
                    880,
                    881,
                    1007,
                    883,
                    1014,
                    887,
                    890,
                    892,
                    1021
                ],
                "com.apply_if_callable": [
                    977,
                    846
                ],
                "key_is_scalar": [
                    857,
                    874,
                    851,
                    852
                ],
                "is_scalar": [
                    1024,
                    851,
                    1039
                ],
                "self.index._convert_scalar_indexer": [
                    853
                ],
                "unpack_1tuple": [
                    855
                ],
                "self.index.get_value": [
                    860,
                    974
                ],
                "InvalidIndexError": [
                    1004,
                    863
                ],
                "is_iterator": [
                    876
                ],
                "com.is_bool_indexer": [
                    999,
                    879
                ],
                "check_bool_indexer": [
                    880,
                    1000
                ],
                "self._get_with": [
                    883
                ],
                "self.index._convert_slice_indexer": [
                    890,
                    1021
                ],
                "self._slice": [
                    891
                ],
                "ABCDataFrame": [
                    2408,
                    2425,
                    892
                ],
                "self._get_values_tuple": [
                    898
                ],
                "key_type": [
                    904,
                    906,
                    910,
                    1043,
                    1046,
                    1048,
                    1053
                ],
                "key.inferred_type": [
                    904,
                    1043
                ],
                "lib.infer_dtype": [
                    906,
                    1046
                ],
                "self.index.is_integer": [
                    913
                ],
                "self.index.is_floating": [
                    913
                ],
                "self.loc": [
                    1028,
                    1097,
                    914,
                    916,
                    922,
                    989
                ],
                "IntervalIndex": [
                    915
                ],
                "self.reindex": [
                    2705,
                    924,
                    2413
                ],
                "com.any_none": [
                    928
                ],
                "warnings.catch_warnings": [
                    931
                ],
                "warnings.filterwarnings": [
                    932
                ],
                "indexer": [
                    1060,
                    1061,
                    3108,
                    3845,
                    1064,
                    3112,
                    3113,
                    3083,
                    3116,
                    941,
                    942,
                    3090,
                    949,
                    954,
                    1021,
                    1022,
                    3839
                ],
                "self.index.get_loc_level": [
                    941
                ],
                "self._data.get_slice": [
                    949
                ],
                "takeable": [
                    1088,
                    969
                ],
                "label": [
                    1089,
                    1091,
                    1097,
                    970,
                    974
                ],
                "cacher_needs_updating": [
                    1009,
                    978
                ],
                "self._check_is_chained_assignment_possible": [
                    978
                ],
                "self._set_with_engine": [
                    981
                ],
                "is_integer": [
                    984,
                    1024
                ],
                "self.index.inferred_type": [
                    984,
                    1049
                ],
                "_is_unorderable_exception": [
                    996
                ],
                "e": [
                    996
                ],
                "self._where": [
                    1002
                ],
                "self._set_with": [
                    1007
                ],
                "self._maybe_update_cacher": [
                    2762,
                    1010,
                    1070
                ],
                "loc": [
                    1016,
                    1091,
                    1093,
                    1014
                ],
                "self.index._engine.get_loc": [
                    1014
                ],
                "self.index._engine": [
                    1014
                ],
                "validate_numeric_casting": [
                    1092,
                    1015
                ],
                "self.dtype": [
                    1092,
                    1321,
                    2643,
                    3797,
                    1015,
                    3771
                ],
                "self._set_values": [
                    1064,
                    1035,
                    1054,
                    1052,
                    1022
                ],
                "key._values": [
                    1044,
                    1068
                ],
                "self._set_labels": [
                    1056,
                    1050
                ],
                "key.astype": [
                    1054
                ],
                "np.bool_": [
                    1054
                ],
                "com.asarray_tuplesafe": [
                    1059
                ],
                "self.index.get_indexer": [
                    1060
                ],
                "mask": [
                    1061,
                    1062,
                    1063,
                    2759,
                    2761,
                    1678,
                    1679,
                    1680,
                    3153,
                    3155,
                    3157
                ],
                "mask.any": [
                    3155,
                    1062,
                    1679
                ],
                "self._data.setitem": [
                    1069
                ],
                "self.index.get_loc": [
                    1091
                ],
                "nv.validate_repeat": [
                    1158
                ],
                "self.index.repeat": [
                    3460,
                    1159
                ],
                "repeats": [
                    1160,
                    1159
                ],
                "self._values.repeat": [
                    1160
                ],
                "inplace": [
                    2944,
                    1281,
                    4098,
                    3077,
                    1289,
                    3985,
                    1554,
                    1555,
                    4116,
                    3103,
                    4134,
                    3122,
                    1847,
                    2884,
                    2889,
                    4446,
                    4452,
                    4457,
                    3954,
                    3957,
                    1271
                ],
                "validate_bool_kwarg": [
                    2884,
                    3077,
                    1554,
                    1271,
                    4446
                ],
                "drop": [
                    1272,
                    4092,
                    1295
                ],
                "level": [
                    4097,
                    2563,
                    1669,
                    1672,
                    1673,
                    3082,
                    1675,
                    1676,
                    3084,
                    1295,
                    3874,
                    3504,
                    1627,
                    1635,
                    3954,
                    1274,
                    1275,
                    1276,
                    1277,
                    1278,
                    1279
                ],
                "self.index._get_level_number": [
                    1673,
                    1277
                ],
                "lev": [
                    1675,
                    1680,
                    1681,
                    1684,
                    1685,
                    1277
                ],
                "self.index.nlevels": [
                    1278
                ],
                "self.index.droplevel": [
                    1279
                ],
                "self._values.copy": [
                    1287
                ],
                "df": [
                    1538,
                    1540,
                    2149,
                    1542,
                    2151,
                    1294,
                    1295
                ],
                "self.to_frame": [
                    1426,
                    2149,
                    1294
                ],
                "df.reset_index": [
                    1295
                ],
                "buf": [
                    1319,
                    1326,
                    1426,
                    1398,
                    1304,
                    1402,
                    1404
                ],
                "StringIO": [
                    1304
                ],
                "width": [
                    1305
                ],
                "height": [
                    1312,
                    1305,
                    1307
                ],
                "get_terminal_size": [
                    1305
                ],
                "max_rows": [
                    1387,
                    1306,
                    1323
                ],
                "get_option": [
                    1313,
                    1314,
                    1316,
                    1308,
                    1309
                ],
                "min_rows": [
                    1322,
                    1386,
                    1311
                ],
                "show_dimensions": [
                    1316,
                    1324
                ],
                "self.to_string": [
                    1318
                ],
                "buf.getvalue": [
                    1326
                ],
                "formatter": [
                    1377,
                    1389
                ],
                "fmt.SeriesFormatter": [
                    1377
                ],
                "fmt": [
                    1377
                ],
                "length": [
                    1380
                ],
                "header": [
                    1381
                ],
                "na_rep": [
                    1384
                ],
                "float_format": [
                    1385
                ],
                "formatter.to_string": [
                    1389
                ],
                "buf.write": [
                    1402
                ],
                "f": [
                    3790,
                    3793,
                    3794,
                    3799,
                    3802,
                    1404,
                    1405
                ],
                "f.write": [
                    1405
                ],
                "IO": [
                    1424
                ],
                "to_markdown": [
                    1426
                ],
                "mode": [
                    1426
                ],
                "Substitution": [
                    3977,
                    1421,
                    2448,
                    3632,
                    3987
                ],
                "generic._shared_docs": [
                    4359,
                    4363,
                    4140,
                    1613,
                    1422,
                    4367,
                    3856,
                    3667,
                    4371,
                    3638,
                    4121
                ],
                "Iterable": [
                    1460,
                    1430
                ],
                "Tuple": [
                    1460,
                    1430
                ],
                "Label": [
                    1460,
                    1430
                ],
                "self.items": [
                    1461,
                    1510
                ],
                "items.__doc__": [
                    1459
                ],
                "items": [
                    1459
                ],
                "into_c": [
                    1509,
                    1510
                ],
                "com.standardize_mapping": [
                    1509
                ],
                "into": [
                    1509
                ],
                "self._constructor_expanddim": [
                    1538,
                    1540,
                    3807
                ],
                "ser": [
                    1555,
                    1556,
                    1557
                ],
                "self.copy": [
                    3456,
                    3841,
                    3106,
                    3402,
                    4461,
                    1555
                ],
                "ser.name": [
                    1556
                ],
                "by": [
                    1633,
                    1627
                ],
                "self._get_axis_number": [
                    4448,
                    2886,
                    3079,
                    3823,
                    3670,
                    3641,
                    1629
                ],
                "SeriesGroupBy": [
                    1631
                ],
                "as_index": [
                    1636
                ],
                "sort": [
                    1637
                ],
                "group_keys": [
                    1638
                ],
                "squeeze": [
                    1639
                ],
                "observed": [
                    1640
                ],
                "notna": [
                    1670,
                    2759,
                    4369,
                    1683,
                    2710
                ],
                "self.index.levels": [
                    1675
                ],
                "level_codes": [
                    1680,
                    1683,
                    1676,
                    1678
                ],
                "np.array": [
                    1676
                ],
                "self.index.codes": [
                    1676
                ],
                "cnt": [
                    1680,
                    1681
                ],
                "lev.insert": [
                    1681
                ],
                "lev._na_value": [
                    1681
                ],
                "obs": [
                    1683,
                    1684
                ],
                "self.values": [
                    2664,
                    2418,
                    1683,
                    2666
                ],
                "out": [
                    1684,
                    1685
                ],
                "np.bincount": [
                    1684
                ],
                "algorithms.mode": [
                    1706
                ],
                "algorithms": [
                    3844,
                    2310,
                    1706,
                    2451,
                    4253,
                    3261,
                    3358
                ],
                "dropna": [
                    1706
                ],
                "unique": [
                    1769
                ],
                "drop_duplicates": [
                    1847
                ],
                "keep": [
                    3261,
                    1925,
                    3358,
                    1847
                ],
                "duplicated": [
                    1925
                ],
                "skipna": [
                    1991,
                    1992,
                    2062,
                    2063,
                    3827,
                    3836
                ],
                "nv.validate_argmin_with_skipna": [
                    1991
                ],
                "args": [
                    3777,
                    3781,
                    1991,
                    3784,
                    3659,
                    3787,
                    3661,
                    2062,
                    2097,
                    3671,
                    3642
                ],
                "nanops.nanargmin": [
                    1992
                ],
                "nanops": [
                    1992,
                    2242,
                    2205,
                    2063
                ],
                "com.values_from_object": [
                    1992,
                    2098,
                    2063
                ],
                "np.nan": [
                    2065,
                    1994,
                    2241,
                    2202
                ],
                "nv.validate_argmax_with_skipna": [
                    2062
                ],
                "nanops.nanargmax": [
                    2063
                ],
                "nv.validate_round": [
                    2097
                ],
                "decimals": [
                    2098
                ],
                "validate_percentile": [
                    2145
                ],
                "q": [
                    2145,
                    2155,
                    2157,
                    2151
                ],
                "df.quantile": [
                    2151
                ],
                "interpolation": [
                    2151
                ],
                "result.iloc": [
                    2160,
                    2153
                ],
                "result.name": [
                    2156
                ],
                "Float64Index": [
                    2157
                ],
                "this": [
                    2240,
                    2560,
                    2242,
                    2563,
                    2564,
                    2566,
                    2705,
                    2707,
                    2710,
                    2200,
                    2201,
                    2206,
                    2239
                ],
                "other": [
                    2434,
                    2562,
                    2563,
                    2566,
                    2440,
                    2571,
                    2446,
                    2704,
                    2706,
                    2707,
                    2708,
                    2710,
                    2200,
                    2206,
                    3871,
                    2239,
                    2242,
                    2758,
                    2759,
                    2761,
                    2645,
                    2648,
                    2649,
                    2653,
                    2661,
                    2408,
                    2409,
                    2410,
                    2414,
                    2419,
                    2425,
                    2427,
                    2556,
                    2429
                ],
                "self.align": [
                    2200,
                    2563,
                    2239
                ],
                "nanops.nancorr": [
                    2205
                ],
                "this.values": [
                    2242,
                    2206,
                    2566
                ],
                "other.values": [
                    2242,
                    2206,
                    2566
                ],
                "min_periods": [
                    2242,
                    2206
                ],
                "nanops.nancov": [
                    2242
                ],
                "algorithms.diff": [
                    2310
                ],
                "periods": [
                    2310,
                    4143
                ],
                "self.corr": [
                    2356
                ],
                "self.shift": [
                    2356
                ],
                "lag": [
                    2356
                ],
                "common": [
                    2409,
                    2410,
                    2413,
                    2414
                ],
                "self.index.union": [
                    2648,
                    2409,
                    2704
                ],
                "other.index": [
                    2562,
                    2409,
                    2410,
                    2704,
                    2648
                ],
                "left": [
                    4323,
                    2413,
                    4326,
                    2415
                ],
                "right": [
                    2416,
                    4324,
                    2414,
                    4327
                ],
                "other.reindex": [
                    2706,
                    2414
                ],
                "lvals": [
                    2432,
                    2415,
                    2418,
                    2420,
                    2422,
                    2427,
                    2430
                ],
                "left.values": [
                    2415
                ],
                "rvals": [
                    2432,
                    2416,
                    2419,
                    2420,
                    2422,
                    2427,
                    2430,
                    2431
                ],
                "right.values": [
                    2416
                ],
                "lvals.shape": [
                    2420,
                    2422
                ],
                "rvals.shape": [
                    2420,
                    2422
                ],
                "np.dot": [
                    2432,
                    2427,
                    2430
                ],
                "other.columns": [
                    2427
                ],
                "self.dot": [
                    2440,
                    2446
                ],
                "np.transpose": [
                    2446
                ],
                "algorithms.searchsorted": [
                    2451
                ],
                "side": [
                    2451
                ],
                "sorter": [
                    2451
                ],
                "base._shared_docs": [
                    2449
                ],
                "to_append": [
                    2528,
                    2530,
                    2532
                ],
                "to_concat": [
                    2529,
                    2530,
                    2532,
                    2534
                ],
                "to_concat.extend": [
                    2530
                ],
                "concat": [
                    2533
                ],
                "ignore_index": [
                    2941,
                    2534,
                    3119
                ],
                "verify_integrity": [
                    2534
                ],
                "self.index.equals": [
                    2562
                ],
                "this.index": [
                    2564
                ],
                "this_vals": [
                    2569,
                    2566
                ],
                "other_vals": [
                    2569,
                    2566
                ],
                "ops.fill_binop": [
                    2566
                ],
                "fill_value": [
                    3876,
                    2566,
                    4143,
                    3504,
                    2642,
                    2643,
                    2652,
                    2653
                ],
                "np.errstate": [
                    2660,
                    2568,
                    3792,
                    3835,
                    2654
                ],
                "func": [
                    3776,
                    3777,
                    3780,
                    2661,
                    3781,
                    3784,
                    2569,
                    3659,
                    3787,
                    3661,
                    3790,
                    3671,
                    3642,
                    2655
                ],
                "ops.get_op_result_name": [
                    2649,
                    2571
                ],
                "ret": [
                    2572,
                    2573
                ],
                "ops._construct_result": [
                    2572
                ],
                "new_name": [
                    2649,
                    2670,
                    2662
                ],
                "idx": [
                    2930,
                    2931,
                    2934,
                    2935,
                    2651,
                    2652,
                    2653,
                    2911
                ],
                "lv": [
                    2652,
                    2661,
                    2655
                ],
                "self.get": [
                    2652
                ],
                "rv": [
                    2653,
                    2655
                ],
                "other.get": [
                    2653
                ],
                "new_values.append": [
                    2655
                ],
                "try_cast_to_ea": [
                    2669
                ],
                "this.dtype.kind": [
                    2707
                ],
                "this.dtype": [
                    2707
                ],
                "other.dtype.kind": [
                    2707
                ],
                "other.dtype": [
                    2707
                ],
                "to_datetime": [
                    2708
                ],
                "this.where": [
                    2710
                ],
                "other.reindex_like": [
                    2758
                ],
                "self._data.putmask": [
                    2761
                ],
                "self._is_cached": [
                    2889
                ],
                "arr.argsort": [
                    2899,
                    2903
                ],
                "arr": [
                    2913,
                    2899,
                    2903,
                    2905,
                    2939,
                    2908
                ],
                "kind": [
                    3162,
                    2899,
                    3109,
                    3158
                ],
                "sorted_index": [
                    2930,
                    2931,
                    2934,
                    2935,
                    2906,
                    2939,
                    2942
                ],
                "np.empty": [
                    2906
                ],
                "np.int32": [
                    2906
                ],
                "bad": [
                    2931,
                    2933,
                    2935,
                    2908,
                    2910
                ],
                "isna": [
                    3153,
                    2908,
                    4361
                ],
                "good": [
                    2913,
                    2929,
                    2930,
                    2934,
                    2910
                ],
                "argsorted": [
                    2913,
                    2930,
                    2934,
                    2926
                ],
                "_try_kind_sort": [
                    2913
                ],
                "ascending": [
                    2915,
                    2916,
                    3109,
                    2918,
                    2920,
                    2922,
                    3084,
                    2925,
                    3092,
                    3100,
                    3101
                ],
                "is_bool": [
                    2922
                ],
                "na_position": [
                    3109,
                    2928,
                    2932,
                    3093,
                    2937
                ],
                "n": [
                    2929,
                    2930,
                    2931,
                    2933,
                    2934,
                    2935,
                    3261,
                    3358
                ],
                "good.sum": [
                    2929
                ],
                "bad.sum": [
                    2933
                ],
                "result.index": [
                    3120,
                    3403,
                    3404,
                    2942
                ],
                "self._update_inplace": [
                    2945,
                    3123,
                    4453
                ],
                "result.__finalize__": [
                    2947,
                    3125
                ],
                "index.sortlevel": [
                    3083
                ],
                "sort_remaining": [
                    3084
                ],
                "index._sort_levels_monotonic": [
                    3089
                ],
                "lexsort_indexer": [
                    3090
                ],
                "labels._get_codes_for_sorting": [
                    3091
                ],
                "index.is_monotonic_increasing": [
                    3100
                ],
                "index.is_monotonic_decreasing": [
                    3101
                ],
                "nargsort": [
                    3108
                ],
                "index.take": [
                    3113
                ],
                "new_index._sort_levels_monotonic": [
                    3114
                ],
                "notmask": [
                    3157,
                    3158
                ],
                "np.argsort": [
                    3162,
                    3158
                ],
                "nlargest": [
                    3261
                ],
                "algorithms.SelectNSeries": [
                    3261,
                    3358
                ],
                "nsmallest": [
                    3358
                ],
                "ABCMultiIndex": [
                    3378,
                    3403
                ],
                "self.index.swaplevel": [
                    3379
                ],
                "j": [
                    3379
                ],
                "result.index.reorder_levels": [
                    3404
                ],
                "is_object_dtype": [
                    4344,
                    3455
                ],
                "counts": [
                    3458,
                    3460
                ],
                "reshape.explode": [
                    3458
                ],
                "reshape": [
                    3458
                ],
                "unstack": [
                    3504
                ],
                "_map_values": [
                    3584
                ],
                "arg": [
                    3584
                ],
                "na_action": [
                    3584
                ],
                "_agg_see_also_doc": [
                    3601,
                    3633
                ],
                "dedent": [
                    3601,
                    3610
                ],
                "_agg_examples_doc": [
                    3610,
                    3634
                ],
                "how": [
                    4489,
                    3642
                ],
                "self._aggregate": [
                    3642
                ],
                "kwargs.pop": [
                    3648,
                    3647
                ],
                "self.apply": [
                    3659
                ],
                "agg": [
                    3665
                ],
                "aggregate": [
                    3665
                ],
                "transform": [
                    3671
                ],
                "self.aggregate": [
                    3777
                ],
                "kwds": [
                    3777,
                    3781,
                    3784,
                    3787,
                    3827,
                    3836
                ],
                "self._try_aggregate_string_function": [
                    3781
                ],
                "np.ufunc": [
                    3784,
                    3793
                ],
                "mapped": [
                    3809,
                    3799,
                    3802,
                    3804,
                    3807
                ],
                "self._values.map": [
                    3799
                ],
                "self.astype": [
                    3801
                ],
                "lib.map_infer": [
                    3802
                ],
                "convert_dtype": [
                    3802
                ],
                "pd.array": [
                    3807
                ],
                "pd": [
                    3807
                ],
                "delegate": [
                    3836,
                    3825,
                    3827,
                    3820
                ],
                "delegate._reduce": [
                    3827
                ],
                "numeric_only": [
                    3831
                ],
                "op": [
                    3836
                ],
                "algorithms.take_1d": [
                    3844
                ],
                "align": [
                    3870
                ],
                "join": [
                    3872
                ],
                "limit": [
                    4117,
                    3878,
                    4135
                ],
                "fill_axis": [
                    3879
                ],
                "broadcast_axis": [
                    3880
                ],
                "rename": [
                    3953
                ],
                "errors": [
                    3954,
                    4099
                ],
                "self._set_name": [
                    3957
                ],
                "set_axis": [
                    3985
                ],
                "generic.NDFrame.set_axis.__doc__": [
                    3983
                ],
                "generic.NDFrame.set_axis": [
                    3983
                ],
                "reindex": [
                    3990
                ],
                "generic.NDFrame.reindex.__doc__": [
                    3988
                ],
                "generic.NDFrame.reindex": [
                    3988
                ],
                "columns": [
                    4096
                ],
                "fillna": [
                    4112
                ],
                "downcast": [
                    4118
                ],
                "doc": [
                    4102
                ],
                "NDFrame.fillna": [
                    4102
                ],
                "NDFrame": [
                    4102
                ],
                "replace": [
                    4131
                ],
                "to_replace": [
                    4132
                ],
                "regex": [
                    4136
                ],
                "shift": [
                    4142
                ],
                "freq": [
                    4489,
                    4514,
                    4143
                ],
                "v": [
                    4195,
                    4197,
                    4198
                ],
                "memory_usage": [
                    4195
                ],
                "deep": [
                    4195,
                    4197
                ],
                "self.index.memory_usage": [
                    4197
                ],
                "algorithms.isin": [
                    4253
                ],
                "inclusive": [
                    4322
                ],
                "lmask": [
                    4329,
                    4323,
                    4326
                ],
                "rmask": [
                    4329,
                    4324,
                    4327
                ],
                "input_series": [
                    4352,
                    4354,
                    4356,
                    4341,
                    4343,
                    4344,
                    4345,
                    4349
                ],
                "infer_objects": [
                    4342
                ],
                "input_series.infer_objects": [
                    4343
                ],
                "input_series.copy": [
                    4345,
                    4354,
                    4356
                ],
                "convert_string": [
                    4347,
                    4349
                ],
                "convert_integer": [
                    4347,
                    4349
                ],
                "convert_boolean": [
                    4347,
                    4349
                ],
                "inferred_dtype": [
                    4352,
                    4348
                ],
                "convert_dtypes": [
                    4348
                ],
                "input_series._values": [
                    4349
                ],
                "input_series.astype": [
                    4352
                ],
                "isnull": [
                    4365
                ],
                "notnull": [
                    4373
                ],
                "self._can_hold_na": [
                    4450
                ],
                "remove_na_arraylike": [
                    4451
                ],
                "new_values.copy": [
                    4486,
                    4511
                ],
                "ABCPeriodIndex": [
                    4488
                ],
                "self.index.to_timestamp": [
                    4489
                ],
                "self.index.to_period": [
                    4514
                ],
                "_AXIS_ORDERS": [
                    4523,
                    4519
                ],
                "_AXIS_NUMBERS": [
                    4520
                ],
                "_AXIS_NAMES": [
                    4521
                ],
                "_AXIS_REVERSED": [
                    4522
                ],
                "_AXIS_LEN": [
                    4523
                ],
                "_info_axis_number": [
                    4524
                ],
                "_info_axis_name": [
                    4525
                ],
                "properties.AxisProperty": [
                    4527
                ],
                "properties": [
                    4527
                ],
                "CachedAccessor": [
                    4534,
                    4535,
                    4536,
                    4537,
                    4538
                ],
                "StringMethods": [
                    4534
                ],
                "dt": [
                    4535
                ],
                "CombinedDatetimelikeProperties": [
                    4535
                ],
                "cat": [
                    4536
                ],
                "CategoricalAccessor": [
                    4536
                ],
                "plot": [
                    4537
                ],
                "pandas.plotting.PlotAccessor": [
                    4537
                ],
                "pandas.plotting": [
                    4537,
                    4542
                ],
                "pandas": [
                    4537,
                    4542
                ],
                "sparse": [
                    4538
                ],
                "SparseAccessor": [
                    4538
                ],
                "hist": [
                    4542
                ],
                "pandas.plotting.hist_series": [
                    4542
                ],
                "Series._add_numeric_operations": [
                    4545
                ],
                "Series._add_series_or_dataframe_operations": [
                    4546
                ],
                "ops.add_flex_arithmetic_methods": [
                    4549
                ],
                "ops.add_special_arithmetic_methods": [
                    4550
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_53/pandas/tests/indexing/test_categorical.py",
                "test_function": "test_loc_scalar",
                "test_function_code": "    def test_loc_scalar(self):\n        result = self.df.loc[\"a\"]\n        expected = DataFrame(\n            {\"A\": [0, 1, 5], \"B\": (Series(list(\"aaa\")).astype(CDT(list(\"cab\"))))}\n        ).set_index(\"B\")\n        tm.assert_frame_equal(result, expected)\n\n        df = self.df.copy()\n        df.loc[\"a\"] = 20\n        expected = DataFrame(\n            {\n                \"A\": [20, 20, 2, 3, 4, 20],\n                \"B\": (Series(list(\"aabbca\")).astype(CDT(list(\"cab\")))),\n            }\n        ).set_index(\"B\")\n        tm.assert_frame_equal(df, expected)\n\n        # value not in the categories\n        with pytest.raises(KeyError, match=r\"^'d'$\"):\n            df.loc[\"d\"]\n\n        msg = \"cannot append a non-category item to a CategoricalIndex\"\n        with pytest.raises(TypeError, match=msg):\n            df.loc[\"d\"] = 10\n\n        msg = (\n            \"cannot insert an item into a CategoricalIndex that is not \"\n            \"already an existing category\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            df.loc[\"d\", \"A\"] = 10\n        with pytest.raises(TypeError, match=msg):\n            df.loc[\"d\", \"C\"] = 10\n\n        with pytest.raises(KeyError, match=\"^1$\"):\n            df.loc[1]",
                "test_error": "TypeError: cannot do label indexing on CategoricalIndex with these indexers [1] of type int",
                "full_test_error": "self = CategoricalIndex(['a', 'a', 'b', 'b', 'c', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category')\nkey = 1, kind = 'loc'\n\n    @Appender(Index._convert_scalar_indexer.__doc__)\n    def _convert_scalar_indexer(self, key, kind: str):\n        assert kind in [\"loc\", \"getitem\"]\n        if kind == \"loc\":\n            try:\n>               return self.categories._convert_scalar_indexer(key, kind=\"loc\")\n\npandas/core/indexes/category.py:603: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Index(['c', 'a', 'b'], dtype='object'), key = 1, kind = 'loc'\n\n    def _convert_scalar_indexer(self, key, kind: str_t):\n        \"\"\"\n        Convert a scalar indexer.\n    \n        Parameters\n        ----------\n        key : label of the slice bound\n        kind : {'loc', 'getitem'}\n        \"\"\"\n        assert kind in [\"loc\", \"getitem\"]\n    \n        if len(self) and not isinstance(self, ABCMultiIndex):\n    \n            # we can raise here if we are definitive that this\n            # is positional indexing (eg. .loc on with a float)\n            # or label indexing if we are using a type able\n            # to be represented in the index\n    \n            if kind == \"getitem\" and is_float(key):\n                if not self.is_floating():\n                    self._invalid_indexer(\"label\", key)\n    \n            elif kind == \"loc\" and is_float(key):\n    \n                # we want to raise KeyError on string/mixed here\n                # technically we *could* raise a TypeError\n                # on anything but mixed though\n                if self.inferred_type not in [\n                    \"floating\",\n                    \"mixed-integer-float\",\n                    \"integer-na\",\n                    \"string\",\n                    \"mixed\",\n                ]:\n                    self._invalid_indexer(\"label\", key)\n    \n            elif kind == \"loc\" and is_integer(key):\n                if not self.holds_integer():\n>                   self._invalid_indexer(\"label\", key)\n\npandas/core/indexes/base.py:3115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Index(['c', 'a', 'b'], dtype='object'), form = 'label', key = 1\n\n    def _invalid_indexer(self, form: str_t, key):\n        \"\"\"\n        Consistent invalid indexer message.\n        \"\"\"\n>       raise TypeError(\n            f\"cannot do {form} indexing on {type(self).__name__} with these \"\n            f\"indexers [{key}] of type {type(key).__name__}\"\n        )\nE       TypeError: cannot do label indexing on Index with these indexers [1] of type int\n\npandas/core/indexes/base.py:3262: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pandas.tests.indexing.test_categorical.TestCategoricalIndex object at 0x118594af0>\n\n    def test_loc_scalar(self):\n        result = self.df.loc[\"a\"]\n        expected = DataFrame(\n            {\"A\": [0, 1, 5], \"B\": (Series(list(\"aaa\")).astype(CDT(list(\"cab\"))))}\n        ).set_index(\"B\")\n        tm.assert_frame_equal(result, expected)\n    \n        df = self.df.copy()\n        df.loc[\"a\"] = 20\n        expected = DataFrame(\n            {\n                \"A\": [20, 20, 2, 3, 4, 20],\n                \"B\": (Series(list(\"aabbca\")).astype(CDT(list(\"cab\")))),\n            }\n        ).set_index(\"B\")\n        tm.assert_frame_equal(df, expected)\n    \n        # value not in the categories\n        with pytest.raises(KeyError, match=r\"^'d'$\"):\n            df.loc[\"d\"]\n    \n        msg = \"cannot append a non-category item to a CategoricalIndex\"\n        with pytest.raises(TypeError, match=msg):\n            df.loc[\"d\"] = 10\n    \n        msg = (\n            \"cannot insert an item into a CategoricalIndex that is not \"\n            \"already an existing category\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            df.loc[\"d\", \"A\"] = 10\n        with pytest.raises(TypeError, match=msg):\n            df.loc[\"d\", \"C\"] = 10\n    \n        with pytest.raises(KeyError, match=\"^1$\"):\n>           df.loc[1]\n\npandas/tests/indexing/test_categorical.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexing.py:828: in __getitem__\n    return self._getitem_axis(maybe_callable, axis=axis)\npandas/core/indexing.py:1106: in _getitem_axis\n    self._validate_key(key, axis)\npandas/core/indexing.py:878: in _validate_key\n    labels._convert_scalar_indexer(key, kind=\"loc\")\npandas/core/indexes/category.py:605: in _convert_scalar_indexer\n    self._invalid_indexer(\"label\", key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = CategoricalIndex(['a', 'a', 'b', 'b', 'c', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category')\nform = 'label', key = 1\n\n    def _invalid_indexer(self, form: str_t, key):\n        \"\"\"\n        Consistent invalid indexer message.\n        \"\"\"\n>       raise TypeError(\n            f\"cannot do {form} indexing on {type(self).__name__} with these \"\n            f\"indexers [{key}] of type {type(key).__name__}\"\n        )\nE       TypeError: cannot do label indexing on CategoricalIndex with these indexers [1] of type int\n\npandas/core/indexes/base.py:3262: TypeError",
                "traceback": "self = Index(['c', 'a', 'b'], dtype='object'), key = 1, kind = 'loc'\n\n    def _convert_scalar_indexer(self, key, kind: str_t):\n        \"\"\"\n        Convert a scalar indexer.\n    \n        Parameters\n        ----------\n        key : label of the slice bound\n        kind : {'loc', 'getitem'}\n        \"\"\"\n        assert kind in [\"loc\", \"getitem\"]\n    \n        if len(self) and not isinstance(self, ABCMultiIndex):\n    \n            # we can raise here if we are definitive that this\n            # is positional indexing (eg. .loc on with a float)\n            # or label indexing if we are using a type able\n            # to be represented in the index\n    \n            if kind == \"getitem\" and is_float(key):\n                if not self.is_floating():\n                    self._invalid_indexer(\"label\", key)\n    \n            elif kind == \"loc\" and is_float(key):\n    \n                # we want to raise KeyError on string/mixed here\n                # technically we *could* raise a TypeError\n                # on anything but mixed though\n                if self.inferred_type not in [\n                    \"floating\",\n                    \"mixed-integer-float\",\n                    \"integer-na\",\n                    \"string\",\n                    \"mixed\",\n                ]:\n                    self._invalid_indexer(\"label\", key)\n    \n            elif kind == \"loc\" and is_integer(key):\n                if not self.holds_integer():\n>                   self._invalid_indexer(\"label\", key)\n\npandas/core/indexes/base.py:3115:",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Index(['c', 'a', 'b'], dtype='object'), form = 'label', key = 1\n\n    def _invalid_indexer(self, form: str_t, key):\n        \"\"\"\n        Consistent invalid indexer message.\n        \"\"\"\n>       raise TypeError(\n            f\"cannot do {form} indexing on {type(self).__name__} with these \"\n            f\"indexers [{key}] of type {type(key).__name__}\"\n        )\nE       TypeError: cannot do label indexing on Index with these indexers [1] of type int\n\npandas/core/indexes/base.py:3262: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pandas.tests.indexing.test_categorical.TestCategoricalIndex object at 0x118594af0>\n\n    def test_loc_scalar(self):\n        result = self.df.loc[\"a\"]\n        expected = DataFrame(\n            {\"A\": [0, 1, 5], \"B\": (Series(list(\"aaa\")).astype(CDT(list(\"cab\"))))}\n        ).set_index(\"B\")\n        tm.assert_frame_equal(result, expected)\n    \n        df = self.df.copy()\n        df.loc[\"a\"] = 20\n        expected = DataFrame(\n            {\n                \"A\": [20, 20, 2, 3, 4, 20],\n                \"B\": (Series(list(\"aabbca\")).astype(CDT(list(\"cab\")))),\n            }\n        ).set_index(\"B\")\n        tm.assert_frame_equal(df, expected)\n    \n        # value not in the categories\n        with pytest.raises(KeyError, match=r\"^'d'$\"):\n            df.loc[\"d\"]\n    \n        msg = \"cannot append a non-category item to a CategoricalIndex\"\n        with pytest.raises(TypeError, match=msg):\n            df.loc[\"d\"] = 10\n    \n        msg = (\n            \"cannot insert an item into a CategoricalIndex that is not \"\n            \"already an existing category\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            df.loc[\"d\", \"A\"] = 10\n        with pytest.raises(TypeError, match=msg):\n            df.loc[\"d\", \"C\"] = 10\n    \n        with pytest.raises(KeyError, match=\"^1$\"):\n>           df.loc[1]\n\npandas/tests/indexing/test_categorical.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexing.py:828: in __getitem__\n    return self._getitem_axis(maybe_callable, axis=axis)\npandas/core/indexing.py:1106: in _getitem_axis\n    self._validate_key(key, axis)\npandas/core/indexing.py:878: in _validate_key\n    labels._convert_scalar_indexer(key, kind=\"loc\")\npandas/core/indexes/category.py:605: in _convert_scalar_indexer\n    self._invalid_indexer(\"label\", key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = CategoricalIndex(['a', 'a', 'b', 'b', 'c', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category')\nform = 'label', key = 1\n\n    def _invalid_indexer(self, form: str_t, key):\n        \"\"\"\n        Consistent invalid indexer message.\n        \"\"\"\n>       raise TypeError(\n            f\"cannot do {form} indexing on {type(self).__name__} with these \"\n            f\"indexers [{key}] of type {type(key).__name__}\"\n        )\nE       TypeError: cannot do label indexing on CategoricalIndex with these indexers [1] of type int\n\npandas/core/indexes/base.py:3262: TypeError",
                "test_function_decorators": []
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_53/pandas/tests/indexing/test_loc.py",
                "test_function": "test_loc_getitem_int",
                "test_function_code": "    def test_loc_getitem_int(self):\n\n        # int label\n        self.check_result(\"loc\", 2, typs=[\"labels\"], fails=KeyError)",
                "test_error": "TypeError: cannot do label indexing on Index with these indexers [2] of type int",
                "full_test_error": "self = <pandas.tests.indexing.test_loc.TestLoc object at 0x1205b91f0>\n\n    def test_loc_getitem_int(self):\n    \n        # int label\n>       self.check_result(\"loc\", 2, typs=[\"labels\"], fails=KeyError)\n\npandas/tests/indexing/test_loc.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/indexing/common.py:183: in check_result\n    _eq(axis=ax, obj=obj, key=key)\npandas/tests/indexing/common.py:154: in _eq\n    getattr(obj, method).__getitem__(axified)\npandas/core/indexing.py:822: in __getitem__\n    return self._getitem_tuple(key)\npandas/core/indexing.py:1002: in _getitem_tuple\n    return self._getitem_lowerdim(tup)\npandas/core/indexing.py:736: in _getitem_lowerdim\n    section = self._getitem_axis(key, axis=i)\npandas/core/indexing.py:1106: in _getitem_axis\n    self._validate_key(key, axis)\npandas/core/indexing.py:878: in _validate_key\n    labels._convert_scalar_indexer(key, kind=\"loc\")\npandas/core/indexes/base.py:3115: in _convert_scalar_indexer\n    self._invalid_indexer(\"label\", key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Index(['a', 'b', 'c', 'd'], dtype='object'), form = 'label', key = 2\n\n    def _invalid_indexer(self, form: str_t, key):\n        \"\"\"\n        Consistent invalid indexer message.\n        \"\"\"\n>       raise TypeError(\n            f\"cannot do {form} indexing on {type(self).__name__} with these \"\n            f\"indexers [{key}] of type {type(key).__name__}\"\n        )\nE       TypeError: cannot do label indexing on Index with these indexers [2] of type int\n\npandas/core/indexes/base.py:3262: TypeError",
                "traceback": "pandas/tests/indexing/common.py:183: in check_result\n    _eq(axis=ax, obj=obj, key=key)\npandas/tests/indexing/common.py:154: in _eq\n    getattr(obj, method).__getitem__(axified)\npandas/core/indexing.py:822: in __getitem__\n    return self._getitem_tuple(key)\npandas/core/indexing.py:1002: in _getitem_tuple\n    return self._getitem_lowerdim(tup)\npandas/core/indexing.py:736: in _getitem_lowerdim\n    section = self._getitem_axis(key, axis=i)\npandas/core/indexing.py:1106: in _getitem_axis\n    self._validate_key(key, axis)\npandas/core/indexing.py:878: in _validate_key\n    labels._convert_scalar_indexer(key, kind=\"loc\")\npandas/core/indexes/base.py:3115: in _convert_scalar_indexer\n    self._invalid_indexer(\"label\", key)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Index(['a', 'b', 'c', 'd'], dtype='object'), form = 'label', key = 2\n\n    def _invalid_indexer(self, form: str_t, key):\n        \"\"\"\n        Consistent invalid indexer message.\n        \"\"\"\n>       raise TypeError(\n            f\"cannot do {form} indexing on {type(self).__name__} with these \"\n            f\"indexers [{key}] of type {type(key).__name__}\"\n        )\nE       TypeError: cannot do label indexing on Index with these indexers [2] of type int\n\npandas/core/indexes/base.py:3262: TypeError",
                "test_function_decorators": []
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_53/pandas/tests/indexing/test_loc.py",
                "test_function": "test_loc_mixed_int_float",
                "test_function_code": "def test_loc_mixed_int_float():\n    # GH#19456\n    ser = pd.Series(range(2), pd.Index([1, 2.0], dtype=object))\n\n    result = ser.loc[1]\n    assert result == 0",
                "test_error": "TypeError: cannot do label indexing on Index with these indexers [1] of type int",
                "full_test_error": "def test_loc_mixed_int_float():\n        # GH#19456\n        ser = pd.Series(range(2), pd.Index([1, 2.0], dtype=object))\n    \n>       result = ser.loc[1]\n\npandas/tests/indexing/test_loc.py:976: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexing.py:828: in __getitem__\n    return self._getitem_axis(maybe_callable, axis=axis)\npandas/core/indexing.py:1106: in _getitem_axis\n    self._validate_key(key, axis)\npandas/core/indexing.py:878: in _validate_key\n    labels._convert_scalar_indexer(key, kind=\"loc\")\npandas/core/indexes/base.py:3115: in _convert_scalar_indexer\n    self._invalid_indexer(\"label\", key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Index([1, 2.0], dtype='object'), form = 'label', key = 1\n\n    def _invalid_indexer(self, form: str_t, key):\n        \"\"\"\n        Consistent invalid indexer message.\n        \"\"\"\n>       raise TypeError(\n            f\"cannot do {form} indexing on {type(self).__name__} with these \"\n            f\"indexers [{key}] of type {type(key).__name__}\"\n        )\nE       TypeError: cannot do label indexing on Index with these indexers [1] of type int\n\npandas/core/indexes/base.py:3262: TypeError",
                "traceback": "pandas/core/indexing.py:828: in __getitem__\n    return self._getitem_axis(maybe_callable, axis=axis)\npandas/core/indexing.py:1106: in _getitem_axis\n    self._validate_key(key, axis)\npandas/core/indexing.py:878: in _validate_key\n    labels._convert_scalar_indexer(key, kind=\"loc\")\npandas/core/indexes/base.py:3115: in _convert_scalar_indexer\n    self._invalid_indexer(\"label\", key)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Index([1, 2.0], dtype='object'), form = 'label', key = 1\n\n    def _invalid_indexer(self, form: str_t, key):\n        \"\"\"\n        Consistent invalid indexer message.\n        \"\"\"\n>       raise TypeError(\n            f\"cannot do {form} indexing on {type(self).__name__} with these \"\n            f\"indexers [{key}] of type {type(key).__name__}\"\n        )\nE       TypeError: cannot do label indexing on Index with these indexers [1] of type int\n\npandas/core/indexes/base.py:3262: TypeError",
                "test_function_decorators": []
            }
        ]
    }
}