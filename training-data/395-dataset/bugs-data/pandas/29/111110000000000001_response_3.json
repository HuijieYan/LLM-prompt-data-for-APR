{
    "pandas": [
        {
            "bugID": 29,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 515,
            "file_name": "pandas/core/arrays/interval.py",
            "replace_code": "def __setitem__(self, key, value):\n    # Handle special cases for NaN and NaT values\n\n    if pd.isna(value):\n        value_left = value_right = value\n        needs_float_conversion = False\n        if pd.api.types.is_integer_dtype(self.dtype.subtype):\n            # Convert NaN to float if the dtype is integer\n            needs_float_conversion = True\n    elif pd.api.types.is_interval_dtype(value) or isinstance(value, pd.Interval):\n        self._check_closed_matches(value, name=\"value\")\n        value_left, value_right = value.left, value.right\n    else:\n        try:\n            array = pd.arrays.IntervalArray(value)\n            value_left, value_right = array.left, array.right\n        except ValueError as err:\n            msg = f\"'value' should be an interval type, got {type(value)} instead.\"\n            raise ValueError(msg) from err\n    \n    key = pd.api.indexers.check_array_indexer(self, key)\n    left_values = self.left.to_numpy()\n    left_values[key] = value_left\n    right_values = self.right.to_numpy()\n    right_values[key] = value_right\n    \n    if needs_float_conversion:\n        # Convert to float if needed\n        left_values = left_values.astype(float)\n        right_values = right_values.astype(float)\n    \n    self._left = pd.arrays.IntervalArray.from_arrays(left_values, self.left.closed)\n    self._right = pd.arrays.IntervalArray.from_arrays(right_values, self.right.closed)"
        }
    ]
}