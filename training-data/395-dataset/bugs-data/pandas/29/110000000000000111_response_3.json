{
    "pandas": [
        {
            "bugID": 29,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 515,
            "file_name": "pandas/core/arrays/interval.py",
            "replace_code": "def __setitem__(self, key, value):\n\n    needs_float_conversion = False\n    \n    # Check for scalar and nan value\n    if pd.isna(value):\n        if np.issubdtype(self.dtype, np.integer):\n            # Convert to float if needed\n            needs_float_conversion = True\n            value_left, value_right = np.nan, np.nan\n        elif np.issubdtype(self.dtype, np.datetime64):\n            # Use NaT for datetime arrays\n            value_left, value_right = np.datetime64(\"NaT\"), np.datetime64(\"NaT\")\n        elif np.issubdtype(self.dtype, np.timedelta64):\n            # Use NaT for timedelta arrays\n            value_left, value_right = np.timedelta64(\"NaT\"), np.timedelta64(\"NaT\")\n        else:\n            raise TypeError(f\"Unsupported dtype {self.dtype}\")\n            \n    # Handle interval data type\n    elif pd.api.types.is_interval_dtype(value) or isinstance(value, pd.Interval):\n        self._check_closed_matches(value, name=\"value\")\n        value_left, value_right = value.left, value.right\n    \n    else:\n        # Convert to IntervalArray\n        try:\n            array = pd.arrays.IntervalArray(value)\n            value_left, value_right = array.left, array.right\n        except TypeError as err:\n            raise TypeError(f\"'value' should be an interval type, got {type(value)} instead.\") from err\n    \n    key = check_array_indexer(self, key)\n    \n    # Update the left and right values based on the data type\n    self.left.values[key] = value_left\n    self.right.values[key] = value_right\n    \n    if needs_float_conversion:\n        self.left = self.left.astype(\"float\")\n        self.right = self.right.astype(\"float\")"
        }
    ]
}