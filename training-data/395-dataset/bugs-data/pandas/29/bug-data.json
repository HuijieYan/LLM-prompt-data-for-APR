{
    "pandas:29": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/core/arrays/interval.py": {
            "buggy_functions": [
                {
                    "function_name": "__setitem__",
                    "function_code": "def __setitem__(self, key, value):\n    # na value: need special casing to set directly on numpy arrays\n    needs_float_conversion = False\n    if is_scalar(value) and isna(value):\n        if is_integer_dtype(self.dtype.subtype):\n            # can't set NaN on a numpy integer array\n            needs_float_conversion = True\n        elif is_datetime64_any_dtype(self.dtype.subtype):\n            # need proper NaT to set directly on the numpy array\n            value = np.datetime64(\"NaT\")\n        elif is_timedelta64_dtype(self.dtype.subtype):\n            # need proper NaT to set directly on the numpy array\n            value = np.timedelta64(\"NaT\")\n        value_left, value_right = value, value\n\n    # scalar interval\n    elif is_interval_dtype(value) or isinstance(value, Interval):\n        self._check_closed_matches(value, name=\"value\")\n        value_left, value_right = value.left, value.right\n\n    else:\n        # list-like of intervals\n        try:\n            array = IntervalArray(value)\n            value_left, value_right = array.left, array.right\n        except TypeError as err:\n            # wrong type: not interval or NA\n            msg = f\"'value' should be an interval type, got {type(value)} instead.\"\n            raise TypeError(msg) from err\n\n    key = check_array_indexer(self, key)\n    # Need to ensure that left and right are updated atomically, so we're\n    # forced to copy, update the copy, and swap in the new values.\n    left = self.left.copy(deep=True)\n    if needs_float_conversion:\n        left = left.astype(\"float\")\n    left.values[key] = value_left\n    self._left = left\n\n    right = self.right.copy(deep=True)\n    if needs_float_conversion:\n        right = right.astype(\"float\")\n    right.values[key] = value_right\n    self._right = right\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 515,
                    "variables": {
                        "needs_float_conversion": [
                            521,
                            549,
                            517,
                            555
                        ],
                        "is_scalar": [
                            518
                        ],
                        "value": [
                            518,
                            524,
                            527,
                            528,
                            531,
                            532,
                            533,
                            538,
                            542
                        ],
                        "isna": [
                            518
                        ],
                        "is_integer_dtype": [
                            519
                        ],
                        "self.dtype.subtype": [
                            522,
                            525,
                            519
                        ],
                        "self.dtype": [
                            522,
                            525,
                            519
                        ],
                        "self": [
                            545,
                            548,
                            519,
                            552,
                            522,
                            554,
                            525,
                            558,
                            532
                        ],
                        "is_datetime64_any_dtype": [
                            522
                        ],
                        "np.datetime64": [
                            524
                        ],
                        "np": [
                            524,
                            527
                        ],
                        "is_timedelta64_dtype": [
                            525
                        ],
                        "np.timedelta64": [
                            527
                        ],
                        "value_left": [
                            528,
                            539,
                            533,
                            551
                        ],
                        "value_right": [
                            528,
                            557,
                            539,
                            533
                        ],
                        "is_interval_dtype": [
                            531
                        ],
                        "isinstance": [
                            531
                        ],
                        "Interval": [
                            531
                        ],
                        "self._check_closed_matches": [
                            532
                        ],
                        "value.left": [
                            533
                        ],
                        "value.right": [
                            533
                        ],
                        "array": [
                            538,
                            539
                        ],
                        "IntervalArray": [
                            538
                        ],
                        "array.left": [
                            539
                        ],
                        "array.right": [
                            539
                        ],
                        "TypeError": [
                            540,
                            543
                        ],
                        "msg": [
                            542,
                            543
                        ],
                        "type": [
                            542
                        ],
                        "err": [
                            543
                        ],
                        "key": [
                            545,
                            557,
                            551
                        ],
                        "check_array_indexer": [
                            545
                        ],
                        "left": [
                            552,
                            548,
                            550,
                            551
                        ],
                        "self.left.copy": [
                            548
                        ],
                        "self.left": [
                            548
                        ],
                        "left.astype": [
                            550
                        ],
                        "left.values": [
                            551
                        ],
                        "self._left": [
                            552
                        ],
                        "right": [
                            554,
                            556,
                            557,
                            558
                        ],
                        "self.right.copy": [
                            554
                        ],
                        "self.right": [
                            554
                        ],
                        "right.astype": [
                            556
                        ],
                        "right.values": [
                            557
                        ],
                        "self._right": [
                            558
                        ]
                    },
                    "filtered_variables": {
                        "needs_float_conversion": [
                            521,
                            549,
                            517,
                            555
                        ],
                        "is_scalar": [
                            518
                        ],
                        "value": [
                            518,
                            524,
                            527,
                            528,
                            531,
                            532,
                            533,
                            538,
                            542
                        ],
                        "isna": [
                            518
                        ],
                        "is_integer_dtype": [
                            519
                        ],
                        "self.dtype.subtype": [
                            522,
                            525,
                            519
                        ],
                        "self.dtype": [
                            522,
                            525,
                            519
                        ],
                        "self": [
                            545,
                            548,
                            519,
                            552,
                            522,
                            554,
                            525,
                            558,
                            532
                        ],
                        "is_datetime64_any_dtype": [
                            522
                        ],
                        "np.datetime64": [
                            524
                        ],
                        "np": [
                            524,
                            527
                        ],
                        "is_timedelta64_dtype": [
                            525
                        ],
                        "np.timedelta64": [
                            527
                        ],
                        "value_left": [
                            528,
                            539,
                            533,
                            551
                        ],
                        "value_right": [
                            528,
                            557,
                            539,
                            533
                        ],
                        "is_interval_dtype": [
                            531
                        ],
                        "Interval": [
                            531
                        ],
                        "self._check_closed_matches": [
                            532
                        ],
                        "value.left": [
                            533
                        ],
                        "value.right": [
                            533
                        ],
                        "array": [
                            538,
                            539
                        ],
                        "IntervalArray": [
                            538
                        ],
                        "array.left": [
                            539
                        ],
                        "array.right": [
                            539
                        ],
                        "msg": [
                            542,
                            543
                        ],
                        "err": [
                            543
                        ],
                        "key": [
                            545,
                            557,
                            551
                        ],
                        "check_array_indexer": [
                            545
                        ],
                        "left": [
                            552,
                            548,
                            550,
                            551
                        ],
                        "self.left.copy": [
                            548
                        ],
                        "self.left": [
                            548
                        ],
                        "left.astype": [
                            550
                        ],
                        "left.values": [
                            551
                        ],
                        "self._left": [
                            552
                        ],
                        "right": [
                            554,
                            556,
                            557,
                            558
                        ],
                        "self.right.copy": [
                            554
                        ],
                        "self.right": [
                            554
                        ],
                        "right.astype": [
                            556
                        ],
                        "right.values": [
                            557
                        ],
                        "self._right": [
                            558
                        ]
                    },
                    "diff_line_number": 544,
                    "class_data": {
                        "signature": "class IntervalArray(IntervalMixin, ExtensionArray)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __new__(cls, data, closed=None, dtype=None, copy=False, verify_integrity=True):\n    if isinstance(data, ABCSeries) and is_interval_dtype(data):\n        data = data._values\n    if isinstance(data, (cls, ABCIntervalIndex)):\n        left = data.left\n        right = data.right\n        closed = closed or data.closed\n    else:\n        if is_scalar(data):\n            msg = f'{cls.__name__}(...) must be called with a collection of some kind, {data} was passed'\n            raise TypeError(msg)\n        data = maybe_convert_platform_interval(data)\n        left, right, infer_closed = intervals_to_interval_bounds(data, validate_closed=closed is None)\n        closed = closed or infer_closed\n    return cls._simple_new(left, right, closed, copy=copy, dtype=dtype, verify_integrity=verify_integrity)",
                            "@classmethod\ndef _simple_new(cls, left, right, closed=None, copy=False, dtype=None, verify_integrity=True):\n    result = IntervalMixin.__new__(cls)\n    closed = closed or 'right'\n    left = ensure_index(left, copy=copy)\n    right = ensure_index(right, copy=copy)\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if not is_interval_dtype(dtype):\n            msg = f'dtype must be an IntervalDtype, got {dtype}'\n            raise TypeError(msg)\n        elif dtype.subtype is not None:\n            left = left.astype(dtype.subtype)\n            right = right.astype(dtype.subtype)\n    if is_float_dtype(left) and is_integer_dtype(right):\n        right = right.astype(left.dtype)\n    elif is_float_dtype(right) and is_integer_dtype(left):\n        left = left.astype(right.dtype)\n    if type(left) != type(right):\n        msg = f'must not have differing left [{type(left).__name__}] and right [{type(right).__name__}] types'\n        raise ValueError(msg)\n    elif is_categorical_dtype(left.dtype) or is_string_dtype(left.dtype):\n        msg = 'category, object, and string subtypes are not supported for IntervalArray'\n        raise TypeError(msg)\n    elif isinstance(left, ABCPeriodIndex):\n        msg = 'Period dtypes are not supported, use a PeriodIndex instead'\n        raise ValueError(msg)\n    elif isinstance(left, ABCDatetimeIndex) and str(left.tz) != str(right.tz):\n        msg = f\"left and right must have the same time zone, got '{left.tz}' and '{right.tz}'\"\n        raise ValueError(msg)\n    result._left = left\n    result._right = right\n    result._closed = closed\n    if verify_integrity:\n        result._validate()\n    return result",
                            "@classmethod\ndef _from_sequence(cls, scalars, dtype=None, copy=False):\n    return cls(scalars, dtype=dtype, copy=copy)",
                            "@classmethod\ndef _from_factorized(cls, values, original):\n    if len(values) == 0:\n        values = values.astype(original.dtype.subtype)\n    return cls(values, closed=original.closed)",
                            "@classmethod\n@Appender(_interval_shared_docs['from_breaks'] % dict(klass='IntervalArray', examples=textwrap.dedent('        Examples\\n        --------\\n        >>> pd.arrays.IntervalArray.from_breaks([0, 1, 2, 3])\\n        <IntervalArray>\\n        [(0, 1], (1, 2], (2, 3]]\\n        Length: 3, closed: right, dtype: interval[int64]\\n        ')))\ndef from_breaks(cls, breaks, closed='right', copy=False, dtype=None):\n    breaks = maybe_convert_platform_interval(breaks)\n    return cls.from_arrays(breaks[:-1], breaks[1:], closed, copy=copy, dtype=dtype)",
                            "@classmethod\n@Appender(_interval_shared_docs['from_arrays'] % dict(klass='IntervalArray', examples=textwrap.dedent('        >>> pd.arrays.IntervalArray.from_arrays([0, 1, 2], [1, 2, 3])\\n        <IntervalArray>\\n        [(0, 1], (1, 2], (2, 3]]\\n        Length: 3, closed: right, dtype: interval[int64]\\n        ')))\ndef from_arrays(cls, left, right, closed='right', copy=False, dtype=None):\n    left = maybe_convert_platform_interval(left)\n    right = maybe_convert_platform_interval(right)\n    return cls._simple_new(left, right, closed, copy=copy, dtype=dtype, verify_integrity=True)",
                            "@classmethod\n@Appender(_interval_shared_docs['from_tuples'] % dict(klass='IntervalArray', examples=textwrap.dedent('        Examples\\n        --------\\n        >>> pd.arrays.IntervalArray.from_tuples([(0, 1), (1, 2)])\\n        <IntervalArray>\\n        [(0, 1], (1, 2]]\\n        Length: 2, closed: right, dtype: interval[int64]\\n        ')))\ndef from_tuples(cls, data, closed='right', copy=False, dtype=None):\n    if len(data):\n        left, right = ([], [])\n    else:\n        left = right = data\n    for d in data:\n        if isna(d):\n            lhs = rhs = np.nan\n        else:\n            name = cls.__name__\n            try:\n                lhs, rhs = d\n            except ValueError as err:\n                msg = f'{name}.from_tuples requires tuples of length 2, got {d}'\n                raise ValueError(msg) from err\n            except TypeError as err:\n                msg = f'{name}.from_tuples received an invalid item, {d}'\n                raise TypeError(msg) from err\n        left.append(lhs)\n        right.append(rhs)\n    return cls.from_arrays(left, right, closed, copy=False, dtype=dtype)",
                            "def _validate(self):\n    \"\"\"\n    Verify that the IntervalArray is valid.\n\n    Checks that\n\n    * closed is valid\n    * left and right match lengths\n    * left and right have the same missing values\n    * left is always below right\n    \"\"\"\n    if self.closed not in _VALID_CLOSED:\n        msg = f\"invalid option for 'closed': {self.closed}\"\n        raise ValueError(msg)\n    if len(self.left) != len(self.right):\n        msg = 'left and right must have the same length'\n        raise ValueError(msg)\n    left_mask = notna(self.left)\n    right_mask = notna(self.right)\n    if not (left_mask == right_mask).all():\n        msg = 'missing values must be missing in the same location both left and right sides'\n        raise ValueError(msg)\n    if not (self.left[left_mask] <= self.right[left_mask]).all():\n        msg = 'left side of interval must be <= right side'\n        raise ValueError(msg)",
                            "def __iter__(self):\n    return iter(np.asarray(self))",
                            "def __len__(self) -> int:\n    return len(self.left)",
                            "def __getitem__(self, value):\n    value = check_array_indexer(self, value)\n    left = self.left[value]\n    right = self.right[value]\n    if not isinstance(left, ABCIndexClass):\n        if is_scalar(left) and isna(left):\n            return self._fill_value\n        if np.ndim(left) > 1:\n            raise ValueError('multi-dimensional indexing not allowed')\n        return Interval(left, right, self.closed)\n    return self._shallow_copy(left, right)",
                            "def __setitem__(self, key, value):\n    needs_float_conversion = False\n    if is_scalar(value) and isna(value):\n        if is_integer_dtype(self.dtype.subtype):\n            needs_float_conversion = True\n        elif is_datetime64_any_dtype(self.dtype.subtype):\n            value = np.datetime64('NaT')\n        elif is_timedelta64_dtype(self.dtype.subtype):\n            value = np.timedelta64('NaT')\n        value_left, value_right = (value, value)\n    elif is_interval_dtype(value) or isinstance(value, Interval):\n        self._check_closed_matches(value, name='value')\n        value_left, value_right = (value.left, value.right)\n    else:\n        try:\n            array = IntervalArray(value)\n            value_left, value_right = (array.left, array.right)\n        except TypeError as err:\n            msg = f\"'value' should be an interval type, got {type(value)} instead.\"\n            raise TypeError(msg) from err\n    key = check_array_indexer(self, key)\n    left = self.left.copy(deep=True)\n    if needs_float_conversion:\n        left = left.astype('float')\n    left.values[key] = value_left\n    self._left = left\n    right = self.right.copy(deep=True)\n    if needs_float_conversion:\n        right = right.astype('float')\n    right.values[key] = value_right\n    self._right = right",
                            "def __eq__(self, other):\n    if is_list_like(other):\n        if len(self) != len(other):\n            raise ValueError('Lengths must match to compare')\n        other = array(other)\n    elif not isinstance(other, Interval):\n        return np.zeros(len(self), dtype=bool)\n    if isinstance(other, Interval):\n        other_dtype = 'interval'\n    elif not is_categorical_dtype(other):\n        other_dtype = other.dtype\n    else:\n        other_dtype = other.categories.dtype\n        if is_interval_dtype(other_dtype):\n            if self.closed != other.categories.closed:\n                return np.zeros(len(self), dtype=bool)\n            other = other.categories.take(other.codes)\n    if is_interval_dtype(other_dtype):\n        if self.closed != other.closed:\n            return np.zeros(len(self), dtype=bool)\n        return (self.left == other.left) & (self.right == other.right)\n    if not is_object_dtype(other_dtype):\n        return np.zeros(len(self), dtype=bool)\n    result = np.zeros(len(self), dtype=bool)\n    for i, obj in enumerate(other):\n        if isinstance(obj, Interval) and self.closed == obj.closed and (self.left[i] == obj.left) and (self.right[i] == obj.right):\n            result[i] = True\n    return result",
                            "def __ne__(self, other):\n    return ~self.__eq__(other)",
                            "def fillna(self, value=None, method=None, limit=None):\n    \"\"\"\n    Fill NA/NaN values using the specified method.\n\n    Parameters\n    ----------\n    value : scalar, dict, Series\n        If a scalar value is passed it is used to fill all missing values.\n        Alternatively, a Series or dict can be used to fill in different\n        values for each index. The value should not be a list. The\n        value(s) passed should be either Interval objects or NA/NaN.\n    method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n        (Not implemented yet for IntervalArray)\n        Method to use for filling holes in reindexed Series\n    limit : int, default None\n        (Not implemented yet for IntervalArray)\n        If method is specified, this is the maximum number of consecutive\n        NaN values to forward/backward fill. In other words, if there is\n        a gap with more than this number of consecutive NaNs, it will only\n        be partially filled. If method is not specified, this is the\n        maximum number of entries along the entire axis where NaNs will be\n        filled.\n\n    Returns\n    -------\n    filled : IntervalArray with NA/NaN filled\n    \"\"\"\n    if method is not None:\n        raise TypeError('Filling by method is not supported for IntervalArray.')\n    if limit is not None:\n        raise TypeError('limit is not supported for IntervalArray.')\n    if not isinstance(value, Interval):\n        msg = f\"'IntervalArray.fillna' only supports filling with a scalar 'pandas.Interval'. Got a '{type(value).__name__}' instead.\"\n        raise TypeError(msg)\n    value = getattr(value, '_values', value)\n    self._check_closed_matches(value, name='value')\n    left = self.left.fillna(value=value.left)\n    right = self.right.fillna(value=value.right)\n    return self._shallow_copy(left, right)",
                            "@property\ndef dtype(self):\n    return IntervalDtype(self.left.dtype)",
                            "def astype(self, dtype, copy=True):\n    \"\"\"\n    Cast to an ExtensionArray or NumPy array with dtype 'dtype'.\n\n    Parameters\n    ----------\n    dtype : str or dtype\n        Typecode or data-type to which the array is cast.\n\n    copy : bool, default True\n        Whether to copy the data, even if not necessary. If False,\n        a copy is made only if the old dtype does not match the\n        new dtype.\n\n    Returns\n    -------\n    array : ExtensionArray or ndarray\n        ExtensionArray or NumPy ndarray with 'dtype' for its dtype.\n    \"\"\"\n    dtype = pandas_dtype(dtype)\n    if is_interval_dtype(dtype):\n        if dtype == self.dtype:\n            return self.copy() if copy else self\n        try:\n            new_left = self.left.astype(dtype.subtype)\n            new_right = self.right.astype(dtype.subtype)\n        except TypeError as err:\n            msg = f'Cannot convert {self.dtype} to {dtype}; subtypes are incompatible'\n            raise TypeError(msg) from err\n        return self._shallow_copy(new_left, new_right)\n    elif is_categorical_dtype(dtype):\n        return Categorical(np.asarray(self))\n    try:\n        return np.asarray(self).astype(dtype, copy=copy)\n    except (TypeError, ValueError) as err:\n        msg = f'Cannot cast {type(self).__name__} to dtype {dtype}'\n        raise TypeError(msg) from err",
                            "@classmethod\ndef _concat_same_type(cls, to_concat):\n    \"\"\"\n    Concatenate multiple IntervalArray\n\n    Parameters\n    ----------\n    to_concat : sequence of IntervalArray\n\n    Returns\n    -------\n    IntervalArray\n    \"\"\"\n    closed = {interval.closed for interval in to_concat}\n    if len(closed) != 1:\n        raise ValueError('Intervals must all be closed on the same side.')\n    closed = closed.pop()\n    left = np.concatenate([interval.left for interval in to_concat])\n    right = np.concatenate([interval.right for interval in to_concat])\n    return cls._simple_new(left, right, closed=closed, copy=False)",
                            "def _shallow_copy(self, left, right):\n    \"\"\"\n    Return a new IntervalArray with the replacement attributes\n\n    Parameters\n    ----------\n    left : Index\n        Values to be used for the left-side of the intervals.\n    right : Index\n        Values to be used for the right-side of the intervals.\n    \"\"\"\n    return self._simple_new(left, right, closed=self.closed, verify_integrity=False)",
                            "def copy(self):\n    \"\"\"\n    Return a copy of the array.\n\n    Returns\n    -------\n    IntervalArray\n    \"\"\"\n    left = self.left.copy(deep=True)\n    right = self.right.copy(deep=True)\n    closed = self.closed\n    return type(self).from_arrays(left, right, closed=closed)",
                            "def isna(self):\n    return isna(self.left)",
                            "@property\ndef nbytes(self) -> int:\n    return self.left.nbytes + self.right.nbytes",
                            "@property\ndef size(self) -> int:\n    return self.left.size",
                            "def shift(self, periods: int=1, fill_value: object=None) -> ABCExtensionArray:\n    if not len(self) or periods == 0:\n        return self.copy()\n    if isna(fill_value):\n        fill_value = self.dtype.na_value\n    empty_len = min(abs(periods), len(self))\n    if isna(fill_value):\n        fill_value = self.left._na_value\n        empty = IntervalArray.from_breaks([fill_value] * (empty_len + 1))\n    else:\n        empty = self._from_sequence([fill_value] * empty_len)\n    if periods > 0:\n        a = empty\n        b = self[:-periods]\n    else:\n        a = self[abs(periods):]\n        b = empty\n    return self._concat_same_type([a, b])",
                            "def take(self, indices, allow_fill=False, fill_value=None, axis=None, **kwargs):\n    \"\"\"\n    Take elements from the IntervalArray.\n\n    Parameters\n    ----------\n    indices : sequence of integers\n        Indices to be taken.\n\n    allow_fill : bool, default False\n        How to handle negative values in `indices`.\n\n        * False: negative values in `indices` indicate positional indices\n          from the right (the default). This is similar to\n          :func:`numpy.take`.\n\n        * True: negative values in `indices` indicate\n          missing values. These values are set to `fill_value`. Any other\n          other negative values raise a ``ValueError``.\n\n    fill_value : Interval or NA, optional\n        Fill value to use for NA-indices when `allow_fill` is True.\n        This may be ``None``, in which case the default NA value for\n        the type, ``self.dtype.na_value``, is used.\n\n        For many ExtensionArrays, there will be two representations of\n        `fill_value`: a user-facing \"boxed\" scalar, and a low-level\n        physical NA value. `fill_value` should be the user-facing version,\n        and the implementation should handle translating that to the\n        physical version for processing the take if necessary.\n\n    axis : any, default None\n        Present for compat with IntervalIndex; does nothing.\n\n    Returns\n    -------\n    IntervalArray\n\n    Raises\n    ------\n    IndexError\n        When the indices are out of bounds for the array.\n    ValueError\n        When `indices` contains negative values other than ``-1``\n        and `allow_fill` is True.\n    \"\"\"\n    nv.validate_take(tuple(), kwargs)\n    fill_left = fill_right = fill_value\n    if allow_fill:\n        if fill_value is None:\n            fill_left = fill_right = self.left._na_value\n        elif is_interval(fill_value):\n            self._check_closed_matches(fill_value, name='fill_value')\n            fill_left, fill_right = (fill_value.left, fill_value.right)\n        elif not is_scalar(fill_value) and notna(fill_value):\n            msg = f\"'IntervalArray.fillna' only supports filling with a 'scalar pandas.Interval or NA'. Got a '{type(fill_value).__name__}' instead.\"\n            raise ValueError(msg)\n    left_take = take(self.left, indices, allow_fill=allow_fill, fill_value=fill_left)\n    right_take = take(self.right, indices, allow_fill=allow_fill, fill_value=fill_right)\n    return self._shallow_copy(left_take, right_take)",
                            "def value_counts(self, dropna=True):\n    \"\"\"\n    Returns a Series containing counts of each interval.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't include counts of NaN.\n\n    Returns\n    -------\n    counts : Series\n\n    See Also\n    --------\n    Series.value_counts\n    \"\"\"\n    return value_counts(np.asarray(self), dropna=dropna)",
                            "def _format_data(self):\n    n = len(self)\n    max_seq_items = min((get_option('display.max_seq_items') or n) // 10, 10)\n    formatter = str\n    if n == 0:\n        summary = '[]'\n    elif n == 1:\n        first = formatter(self[0])\n        summary = f'[{first}]'\n    elif n == 2:\n        first = formatter(self[0])\n        last = formatter(self[-1])\n        summary = f'[{first}, {last}]'\n    elif n > max_seq_items:\n        n = min(max_seq_items // 2, 10)\n        head = [formatter(x) for x in self[:n]]\n        tail = [formatter(x) for x in self[-n:]]\n        head_str = ', '.join(head)\n        tail_str = ', '.join(tail)\n        summary = f'[{head_str} ... {tail_str}]'\n    else:\n        tail = [formatter(x) for x in self]\n        tail_str = ', '.join(tail)\n        summary = f'[{tail_str}]'\n    return summary",
                            "def __repr__(self) -> str:\n    data = self._format_data()\n    class_name = f'<{type(self).__name__}>\\n'\n    template = f'{class_name}{data}\\nLength: {len(self)}, closed: {self.closed}, dtype: {self.dtype}'\n    return template",
                            "def _format_space(self):\n    space = ' ' * (len(type(self).__name__) + 1)\n    return f'\\n{space}'",
                            "@property\ndef left(self):\n    \"\"\"\n    Return the left endpoints of each Interval in the IntervalArray as\n    an Index.\n    \"\"\"\n    return self._left",
                            "@property\ndef right(self):\n    \"\"\"\n    Return the right endpoints of each Interval in the IntervalArray as\n    an Index.\n    \"\"\"\n    return self._right",
                            "@property\ndef closed(self):\n    \"\"\"\n    Whether the intervals are closed on the left-side, right-side, both or\n    neither.\n    \"\"\"\n    return self._closed",
                            "@Appender(_interval_shared_docs['set_closed'] % dict(klass='IntervalArray', examples=textwrap.dedent(\"        Examples\\n        --------\\n        >>> index = pd.arrays.IntervalArray.from_breaks(range(4))\\n        >>> index\\n        <IntervalArray>\\n        [(0, 1], (1, 2], (2, 3]]\\n        Length: 3, closed: right, dtype: interval[int64]\\n        >>> index.set_closed('both')\\n        <IntervalArray>\\n        [[0, 1], [1, 2], [2, 3]]\\n        Length: 3, closed: both, dtype: interval[int64]\\n        \")))\ndef set_closed(self, closed):\n    if closed not in _VALID_CLOSED:\n        msg = f\"invalid option for 'closed': {closed}\"\n        raise ValueError(msg)\n    return type(self)._simple_new(left=self.left, right=self.right, closed=closed, verify_integrity=False)",
                            "@property\ndef length(self):\n    \"\"\"\n    Return an Index with entries denoting the length of each Interval in\n    the IntervalArray.\n    \"\"\"\n    try:\n        return self.right - self.left\n    except TypeError as err:\n        msg = 'IntervalArray contains Intervals without defined length, e.g. Intervals with string endpoints'\n        raise TypeError(msg) from err",
                            "@property\ndef mid(self):\n    \"\"\"\n    Return the midpoint of each Interval in the IntervalArray as an Index.\n    \"\"\"\n    try:\n        return 0.5 * (self.left + self.right)\n    except TypeError:\n        return self.left + 0.5 * self.length",
                            "@property\n@Appender(_interval_shared_docs['is_non_overlapping_monotonic'] % _shared_docs_kwargs)\ndef is_non_overlapping_monotonic(self):\n    if self.closed == 'both':\n        return bool((self.right[:-1] < self.left[1:]).all() or (self.left[:-1] > self.right[1:]).all())\n    return bool((self.right[:-1] <= self.left[1:]).all() or (self.left[:-1] >= self.right[1:]).all())",
                            "def __array__(self, dtype=None) -> np.ndarray:\n    \"\"\"\n    Return the IntervalArray's data as a numpy array of Interval\n    objects (with dtype='object')\n    \"\"\"\n    left = self.left\n    right = self.right\n    mask = self.isna()\n    closed = self._closed\n    result = np.empty(len(left), dtype=object)\n    for i in range(len(left)):\n        if mask[i]:\n            result[i] = np.nan\n        else:\n            result[i] = Interval(left[i], right[i], closed)\n    return result",
                            "def __arrow_array__(self, type=None):\n    \"\"\"\n    Convert myself into a pyarrow Array.\n    \"\"\"\n    import pyarrow\n    from pandas.core.arrays._arrow_utils import ArrowIntervalType\n    try:\n        subtype = pyarrow.from_numpy_dtype(self.dtype.subtype)\n    except TypeError as err:\n        raise TypeError(f\"Conversion to arrow with subtype '{self.dtype.subtype}' is not supported\") from err\n    interval_type = ArrowIntervalType(subtype, self.closed)\n    storage_array = pyarrow.StructArray.from_arrays([pyarrow.array(self.left, type=subtype, from_pandas=True), pyarrow.array(self.right, type=subtype, from_pandas=True)], names=['left', 'right'])\n    mask = self.isna()\n    if mask.any():\n        null_bitmap = pyarrow.array(~mask).buffers()[1]\n        storage_array = pyarrow.StructArray.from_buffers(storage_array.type, len(storage_array), [null_bitmap], children=[storage_array.field(0), storage_array.field(1)])\n    if type is not None:\n        if type.equals(interval_type.storage_type):\n            return storage_array\n        elif isinstance(type, ArrowIntervalType):\n            if not type.equals(interval_type):\n                raise TypeError(f\"Not supported to convert IntervalArray to type with different 'subtype' ({self.dtype.subtype} vs {type.subtype}) and 'closed' ({self.closed} vs {type.closed}) attributes\")\n        else:\n            raise TypeError(f\"Not supported to convert IntervalArray to '{type}' type\")\n    return pyarrow.ExtensionArray.from_storage(interval_type, storage_array)",
                            "@Appender(_interval_shared_docs['to_tuples'] % dict(return_type='ndarray', examples=''))\ndef to_tuples(self, na_tuple=True):\n    tuples = com.asarray_tuplesafe(zip(self.left, self.right))\n    if not na_tuple:\n        tuples = np.where(~self.isna(), tuples, np.nan)\n    return tuples",
                            "@Appender(_extension_array_shared_docs['repeat'] % _shared_docs_kwargs)\ndef repeat(self, repeats, axis=None):\n    nv.validate_repeat(tuple(), dict(axis=axis))\n    left_repeat = self.left.repeat(repeats)\n    right_repeat = self.right.repeat(repeats)\n    return self._shallow_copy(left=left_repeat, right=right_repeat)",
                            "@Appender(_interval_shared_docs['contains'] % dict(klass='IntervalArray', examples=textwrap.dedent('        >>> intervals = pd.arrays.IntervalArray.from_tuples([(0, 1), (1, 3), (2, 4)])\\n        >>> intervals\\n        <IntervalArray>\\n        [(0, 1], (1, 3], (2, 4]]\\n        Length: 3, closed: right, dtype: interval[int64]\\n        ')))\ndef contains(self, other):\n    if isinstance(other, Interval):\n        raise NotImplementedError('contains not implemented for two intervals')\n    return (self.left < other if self.open_left else self.left <= other) & (other < self.right if self.open_right else other <= self.right)",
                            "@Appender(_interval_shared_docs['overlaps'] % dict(klass='IntervalArray', examples=textwrap.dedent('        >>> data = [(0, 1), (1, 3), (2, 4)]\\n        >>> intervals = pd.arrays.IntervalArray.from_tuples(data)\\n        >>> intervals\\n        <IntervalArray>\\n        [(0, 1], (1, 3], (2, 4]]\\n        Length: 3, closed: right, dtype: interval[int64]\\n        ')))\ndef overlaps(self, other):\n    if isinstance(other, (IntervalArray, ABCIntervalIndex)):\n        raise NotImplementedError\n    elif not isinstance(other, Interval):\n        msg = f'`other` must be Interval-like, got {type(other).__name__}'\n        raise TypeError(msg)\n    op1 = le if self.closed_left and other.closed_right else lt\n    op2 = le if other.closed_left and self.closed_right else lt\n    return op1(self.left, other.right) & op2(other.left, self.right)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "ndim",
                            "can_hold_na",
                            "_na_value",
                            "_fill_value"
                        ],
                        "class_decorators": [
                            "Appender(_interval_shared_docs['class'] % dict(klass='IntervalArray', summary='Pandas array for interval data that are closed on the same side.', versionadded='0.24.0', name='', extra_attributes='', extra_methods='', examples=textwrap.dedent('    Examples\\n    --------\\n    A new ``IntervalArray`` can be constructed directly from an array-like of\\n    ``Interval`` objects:\\n\\n    >>> pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)])\\n    <IntervalArray>\\n    [(0, 1], (1, 5]]\\n    Length: 2, closed: right, dtype: interval[int64]\\n\\n    It may also be constructed using one of the constructor\\n    methods: :meth:`IntervalArray.from_arrays`,\\n    :meth:`IntervalArray.from_breaks`, and :meth:`IntervalArray.from_tuples`.\\n    ')))"
                        ],
                        "function_signatures": [
                            "__new__(cls, data, closed=None, dtype=None, copy=False, verify_integrity=True)",
                            "_simple_new(cls, left, right, closed=None, copy=False, dtype=None, verify_integrity=True)",
                            "_from_sequence(cls, scalars, dtype=None, copy=False)",
                            "_from_factorized(cls, values, original)",
                            "from_breaks(cls, breaks, closed='right', copy=False, dtype=None)",
                            "from_arrays(cls, left, right, closed='right', copy=False, dtype=None)",
                            "from_tuples(cls, data, closed='right', copy=False, dtype=None)",
                            "_validate(self)",
                            "__iter__(self)",
                            "__len__(self) -> int",
                            "__getitem__(self, value)",
                            "__setitem__(self, key, value)",
                            "__eq__(self, other)",
                            "__ne__(self, other)",
                            "fillna(self, value=None, method=None, limit=None)",
                            "dtype(self)",
                            "astype(self, dtype, copy=True)",
                            "_concat_same_type(cls, to_concat)",
                            "_shallow_copy(self, left, right)",
                            "copy(self)",
                            "isna(self)",
                            "nbytes(self) -> int",
                            "size(self) -> int",
                            "shift(self, periods: int=1, fill_value: object=None) -> ABCExtensionArray",
                            "take(self, indices, allow_fill=False, fill_value=None, axis=None, **kwargs)",
                            "value_counts(self, dropna=True)",
                            "_format_data(self)",
                            "__repr__(self) -> str",
                            "_format_space(self)",
                            "left(self)",
                            "right(self)",
                            "closed(self)",
                            "set_closed(self, closed)",
                            "length(self)",
                            "mid(self)",
                            "is_non_overlapping_monotonic(self)",
                            "__array__(self, dtype=None) -> np.ndarray",
                            "__arrow_array__(self, type=None)",
                            "to_tuples(self, na_tuple=True)",
                            "repeat(self, repeats, axis=None)",
                            "contains(self, other)",
                            "overlaps(self, other)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[int64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0, 1], (2, 3], (4, 5]]\nLength: 3, closed: right, dtype: interval[int64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11645c880>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Int64Index([0, 2, 4], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "3"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Int64Index([0, 2, 4], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Int64Index([1, 3, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "3"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Int64Index([1, 3, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "3"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, (2.0, 3.0], (4.0, 5.0]]\nLength: 3, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11645c880>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, 2.0, 4.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, 2.0, 4.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, 2.0, 4.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan,  2.,  4.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, 2.0, 4.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, 3.0, 5.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, 3.0, 5.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, 3.0, 5.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan,  3.,  5.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, 3.0, 5.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0.0, 1.0], (1.0, 2.0], (2.0, 3.0]]\nLength: 3, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11660cbb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([0.0, 1.0, 2.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([0.0, 1.0, 2.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([1.0, 2.0, 3.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([1.0, 2.0, 3.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, (1.0, 2.0], (2.0, 3.0]]\nLength: 3, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11660cbb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, 1.0, 2.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, 1.0, 2.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, 1.0, 2.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan,  1.,  2.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, 1.0, 2.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, 2.0, 3.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, 2.0, 3.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, 2.0, 3.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan,  2.,  3.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, 2.0, 3.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[timedelta64[ns]]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0 days 00:00:00, 1 days 00:00:00], (1 days 00:00:00, 2 days 00:00:00], (2 days 00:00:00, 3 days 00:00:00]]\nLength: 3, closed: right, dtype: interval[timedelta64[ns]]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1165e58e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "TimedeltaIndex(['0 days', '1 days', '2 days'], dtype='timedelta64[ns]', freq='D')",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "TimedeltaIndex(['0 days', '1 days', '2 days'], dtype='timedelta64[ns]', freq='D')",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "TimedeltaIndex(['1 days', '2 days', '3 days'], dtype='timedelta64[ns]', freq='D')",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "TimedeltaIndex(['1 days', '2 days', '3 days'], dtype='timedelta64[ns]', freq='D')",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[timedelta64[ns]]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, (1 days 00:00:00, 2 days 00:00:00], (2 days 00:00:00, 3 days 00:00:00]]\nLength: 3, closed: right, dtype: interval[timedelta64[ns]]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "value_right": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1165e58e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "TimedeltaIndex([NaT, '1 days', '2 days'], dtype='timedelta64[ns]', freq='D')",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "TimedeltaIndex([NaT, '1 days', '2 days'], dtype='timedelta64[ns]', freq='D')",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method TimedeltaIndex.astype of TimedeltaIndex([NaT, '1 days', '2 days'], dtype='timedelta64[ns]', freq='D')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([          'NaT',  86400000000000, 172800000000000],\n      dtype='timedelta64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "self._left": {
                                    "variable_value": "TimedeltaIndex([NaT, '1 days', '2 days'], dtype='timedelta64[ns]', freq='D')",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "TimedeltaIndex([NaT, '2 days', '3 days'], dtype='timedelta64[ns]', freq='D')",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "TimedeltaIndex([NaT, '2 days', '3 days'], dtype='timedelta64[ns]', freq='D')",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method TimedeltaIndex.astype of TimedeltaIndex([NaT, '2 days', '3 days'], dtype='timedelta64[ns]', freq='D')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([          'NaT', 172800000000000, 259200000000000],\n      dtype='timedelta64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "self._right": {
                                    "variable_value": "TimedeltaIndex([NaT, '2 days', '3 days'], dtype='timedelta64[ns]', freq='D')",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[datetime64[ns]]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(2017-01-01, 2017-01-02], (2017-01-02, 2017-01-03], (2017-01-03, 2017-01-04]]\nLength: 3, closed: right, dtype: interval[datetime64[ns]]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1165e5d90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03'], dtype='datetime64[ns]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03'], dtype='datetime64[ns]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "DatetimeIndex(['2017-01-02', '2017-01-03', '2017-01-04'], dtype='datetime64[ns]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "DatetimeIndex(['2017-01-02', '2017-01-03', '2017-01-04'], dtype='datetime64[ns]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[datetime64[ns]]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, (2017-01-02, 2017-01-03], (2017-01-03, 2017-01-04]]\nLength: 3, closed: right, dtype: interval[datetime64[ns]]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "value_right": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1165e5d90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-02', '2017-01-03'], dtype='datetime64[ns]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-02', '2017-01-03'], dtype='datetime64[ns]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method ExtensionIndex.astype of DatetimeIndex(['NaT', '2017-01-02', '2017-01-03'], dtype='datetime64[ns]', freq='D')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([                          'NaT', '2017-01-02T00:00:00.000000000',\n       '2017-01-03T00:00:00.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "self._left": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-02', '2017-01-03'], dtype='datetime64[ns]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-03', '2017-01-04'], dtype='datetime64[ns]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-03', '2017-01-04'], dtype='datetime64[ns]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method ExtensionIndex.astype of DatetimeIndex(['NaT', '2017-01-03', '2017-01-04'], dtype='datetime64[ns]', freq='D')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([                          'NaT', '2017-01-03T00:00:00.000000000',\n       '2017-01-04T00:00:00.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "self._right": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-03', '2017-01-04'], dtype='datetime64[ns]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[datetime64[ns, US/Eastern]]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(2017-01-01, 2017-01-02], (2017-01-02, 2017-01-03], (2017-01-03, 2017-01-04]]\nLength: 3, closed: right, dtype: interval[datetime64[ns, US/Eastern]]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x116671e80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "DatetimeIndex(['2017-01-01 00:00:00-05:00', '2017-01-02 00:00:00-05:00',\n               '2017-01-03 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "DatetimeIndex(['2017-01-01 00:00:00-05:00', '2017-01-02 00:00:00-05:00',\n               '2017-01-03 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "DatetimeIndex(['2017-01-02 00:00:00-05:00', '2017-01-03 00:00:00-05:00',\n               '2017-01-04 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "DatetimeIndex(['2017-01-02 00:00:00-05:00', '2017-01-03 00:00:00-05:00',\n               '2017-01-04 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[datetime64[ns, US/Eastern]]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, (2017-01-02, 2017-01-03], (2017-01-03, 2017-01-04]]\nLength: 3, closed: right, dtype: interval[datetime64[ns, US/Eastern]]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "value_right": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x116671e80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-02 00:00:00-05:00',\n               '2017-01-03 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-02 00:00:00-05:00',\n               '2017-01-03 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method ExtensionIndex.astype of DatetimeIndex(['NaT', '2017-01-02 00:00:00-05:00',\n               '2017-01-03 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([                          'NaT', '2017-01-02T05:00:00.000000000',\n       '2017-01-03T05:00:00.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "self._left": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-02 00:00:00-05:00',\n               '2017-01-03 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-03 00:00:00-05:00',\n               '2017-01-04 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-03 00:00:00-05:00',\n               '2017-01-04 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method ExtensionIndex.astype of DatetimeIndex(['NaT', '2017-01-03 00:00:00-05:00',\n               '2017-01-04 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([                          'NaT', '2017-01-03T05:00:00.000000000',\n       '2017-01-04T05:00:00.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "self._right": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-03 00:00:00-05:00',\n               '2017-01-04 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[int64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11669b190>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, nan]\nLength: 2, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11669b190>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[int64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1166d4100>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, nan]\nLength: 2, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1166d4100>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[int64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1167677f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, nan]\nLength: 2, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1167677f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[int64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1167b1190>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, nan]\nLength: 2, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1167b1190>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[int64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1167defa0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, nan]\nLength: 2, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1167defa0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[int64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11680bfd0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, nan]\nLength: 2, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11680bfd0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[int64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1166e4340>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, nan]\nLength: 2, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1166e4340>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[int64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x116700280>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, nan]\nLength: 2, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x116700280>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[int64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11686b700>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, nan]\nLength: 2, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11686b700>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[int64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1168822b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, nan]\nLength: 2, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1168822b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[int64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1168b2b20>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, nan]\nLength: 2, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1168b2b20>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[int64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x116833340>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, nan]\nLength: 2, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x116833340>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[int64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x116852f40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, nan]\nLength: 2, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x116852f40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[int64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x116936790>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, nan]\nLength: 2, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x116936790>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[int64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1168b2520>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, nan]\nLength: 2, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x1168b2520>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[int64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x116738fd0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Int64Index([1, 5], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, nan]\nLength: 2, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "2"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x116738fd0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "left.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                },
                                "right.astype": {
                                    "variable_value": "<bound method Float64Index.astype of Float64Index([nan, nan], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.values": {
                                    "variable_value": "array([nan, nan])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, nan], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "2"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0.0, 1.0], (1.0, 2.0], (2.0, 3.0]]\nLength: 3, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11a42d760>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([0.0, 1.0, 2.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "left._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([0.0, 1.0, 2.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([1.0, 2.0, 3.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([1.0, 2.0, 3.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[float64]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, (1.0, 2.0], (2.0, 3.0]]\nLength: 3, closed: right, dtype: interval[float64]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11a42d760>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "Float64Index([nan, 1.0, 2.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "Float64Index([nan, 1.0, 2.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "left._values": {
                                    "variable_value": "array([nan,  1.,  2.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "self._left": {
                                    "variable_value": "Float64Index([nan, 1.0, 2.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "Float64Index([nan, 2.0, 3.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "Float64Index([nan, 2.0, 3.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "array([nan,  2.,  3.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "self._right": {
                                    "variable_value": "Float64Index([nan, 2.0, 3.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "3"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[timedelta64[ns]]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(0 days 00:00:00, 1 days 00:00:00], (1 days 00:00:00, 2 days 00:00:00], (2 days 00:00:00, 3 days 00:00:00]]\nLength: 3, closed: right, dtype: interval[timedelta64[ns]]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11a4531c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "TimedeltaIndex(['0 days', '1 days', '2 days'], dtype='timedelta64[ns]', freq='D')",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                },
                                "left._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "TimedeltaIndex(['0 days', '1 days', '2 days'], dtype='timedelta64[ns]', freq='D')",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "TimedeltaIndex(['1 days', '2 days', '3 days'], dtype='timedelta64[ns]', freq='D')",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "TimedeltaIndex(['1 days', '2 days', '3 days'], dtype='timedelta64[ns]', freq='D')",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[timedelta64[ns]]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, (1 days 00:00:00, 2 days 00:00:00], (2 days 00:00:00, 3 days 00:00:00]]\nLength: 3, closed: right, dtype: interval[timedelta64[ns]]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "value_right": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11a4531c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "TimedeltaIndex([NaT, '1 days', '2 days'], dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "TimedeltaIndex([NaT, '1 days', '2 days'], dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                },
                                "left._values": {
                                    "variable_value": "<TimedeltaArray>\n[NaT, '1 days', '2 days']\nLength: 3, dtype: timedelta64[ns]",
                                    "variable_type": "TimedeltaArray",
                                    "variable_shape": "3"
                                },
                                "self._left": {
                                    "variable_value": "TimedeltaIndex([NaT, '1 days', '2 days'], dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "TimedeltaIndex([NaT, '2 days', '3 days'], dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "TimedeltaIndex([NaT, '2 days', '3 days'], dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "<TimedeltaArray>\n[NaT, '2 days', '3 days']\nLength: 3, dtype: timedelta64[ns]",
                                    "variable_type": "TimedeltaArray",
                                    "variable_shape": "3"
                                },
                                "self._right": {
                                    "variable_value": "TimedeltaIndex([NaT, '2 days', '3 days'], dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "3"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[datetime64[ns]]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(2017-01-01, 2017-01-02], (2017-01-02, 2017-01-03], (2017-01-03, 2017-01-04]]\nLength: 3, closed: right, dtype: interval[datetime64[ns]]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11a453130>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03'], dtype='datetime64[ns]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "left._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03'], dtype='datetime64[ns]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "DatetimeIndex(['2017-01-02', '2017-01-03', '2017-01-04'], dtype='datetime64[ns]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "DatetimeIndex(['2017-01-02', '2017-01-03', '2017-01-04'], dtype='datetime64[ns]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[datetime64[ns]]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, (2017-01-02, 2017-01-03], (2017-01-03, 2017-01-04]]\nLength: 3, closed: right, dtype: interval[datetime64[ns]]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "value_right": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11a453130>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-02', '2017-01-03'], dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-02', '2017-01-03'], dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "left._values": {
                                    "variable_value": "<DatetimeArray>\n['NaT', '2017-01-02 00:00:00', '2017-01-03 00:00:00']\nLength: 3, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "3"
                                },
                                "self._left": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-02', '2017-01-03'], dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-03', '2017-01-04'], dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-03', '2017-01-04'], dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "<DatetimeArray>\n['NaT', '2017-01-03 00:00:00', '2017-01-04 00:00:00']\nLength: 3, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "3"
                                },
                                "self._right": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-03', '2017-01-04'], dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                }
                            }
                        ],
                        [
                            {
                                "needs_float_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[datetime64[ns, US/Eastern]]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[(2017-01-01, 2017-01-02], (2017-01-02, 2017-01-03], (2017-01-03, 2017-01-04]]\nLength: 3, closed: right, dtype: interval[datetime64[ns, US/Eastern]]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11a453a90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "DatetimeIndex(['2017-01-01 00:00:00-05:00', '2017-01-02 00:00:00-05:00',\n               '2017-01-03 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "left._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._left": {
                                    "variable_value": "DatetimeIndex(['2017-01-01 00:00:00-05:00', '2017-01-02 00:00:00-05:00',\n               '2017-01-03 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "DatetimeIndex(['2017-01-02 00:00:00-05:00', '2017-01-03 00:00:00-05:00',\n               '2017-01-04 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._right": {
                                    "variable_value": "DatetimeIndex(['2017-01-02 00:00:00-05:00', '2017-01-03 00:00:00-05:00',\n               '2017-01-04 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                }
                            },
                            {
                                "needs_float_conversion": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.subtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "interval[datetime64[ns, US/Eastern]]",
                                    "variable_type": "IntervalDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "<IntervalArray>\n[nan, (2017-01-02, 2017-01-03], (2017-01-03, 2017-01-04]]\nLength: 3, closed: right, dtype: interval[datetime64[ns, US/Eastern]]",
                                    "variable_type": "IntervalArray",
                                    "variable_shape": "3"
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_left": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "value_right": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Interval": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_closed_matches": {
                                    "variable_value": "<built-in method _check_closed_matches of IntervalArray object at 0x11a453a90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.left": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IntervalArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array.right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "check_array_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-02 00:00:00-05:00',\n               '2017-01-03 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "self.left.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-02 00:00:00-05:00',\n               '2017-01-03 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "left._values": {
                                    "variable_value": "<DatetimeArray>\n['NaT', '2017-01-02 00:00:00-05:00', '2017-01-03 00:00:00-05:00']\nLength: 3, dtype: datetime64[ns, US/Eastern]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "3"
                                },
                                "self._left": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-02 00:00:00-05:00',\n               '2017-01-03 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-03 00:00:00-05:00',\n               '2017-01-04 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "self.right.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-03 00:00:00-05:00',\n               '2017-01-04 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "<DatetimeArray>\n['NaT', '2017-01-03 00:00:00-05:00', '2017-01-04 00:00:00-05:00']\nLength: 3, dtype: datetime64[ns, US/Eastern]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "3"
                                },
                                "self._right": {
                                    "variable_value": "DatetimeIndex(['NaT', '2017-01-03 00:00:00-05:00',\n               '2017-01-04 00:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "3"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def maybe_convert_platform_interval(values):\n    \"\"\"\n    Try to do platform conversion, with special casing for IntervalArray.\n    Wrapper around maybe_convert_platform that alters the default return\n    dtype in certain cases to be compatible with IntervalArray.  For example,\n    empty lists return with integer dtype instead of object dtype, which is\n    prohibited for IntervalArray.\n\n    Parameters\n    ----------\n    values : array-like\n\n    Returns\n    -------\n    array\n    \"\"\"\n    if isinstance(values, (list, tuple)) and len(values) == 0:\n        # GH 19016\n        # empty lists/tuples get object dtype by default, but this is\n        # prohibited for IntervalArray, so coerce to integer instead\n        return np.array([], dtype=np.int64)\n    elif is_categorical_dtype(values):\n        values = np.asarray(values)\n\n    return maybe_convert_platform(values)",
                "def __new__(cls, data, closed=None, dtype=None, copy=False, verify_integrity=True):\n\n    if isinstance(data, ABCSeries) and is_interval_dtype(data):\n        data = data._values\n\n    if isinstance(data, (cls, ABCIntervalIndex)):\n        left = data.left\n        right = data.right\n        closed = closed or data.closed\n    else:\n\n        # don't allow scalars\n        if is_scalar(data):\n            msg = (\n                f\"{cls.__name__}(...) must be called with a collection \"\n                f\"of some kind, {data} was passed\"\n            )\n            raise TypeError(msg)\n\n        # might need to convert empty or purely na data\n        data = maybe_convert_platform_interval(data)\n        left, right, infer_closed = intervals_to_interval_bounds(\n            data, validate_closed=closed is None\n        )\n        closed = closed or infer_closed\n\n    return cls._simple_new(\n        left,\n        right,\n        closed,\n        copy=copy,\n        dtype=dtype,\n        verify_integrity=verify_integrity,\n    )",
                "@classmethod\ndef _simple_new(\n    cls, left, right, closed=None, copy=False, dtype=None, verify_integrity=True\n):\n    result = IntervalMixin.__new__(cls)\n\n    closed = closed or \"right\"\n    left = ensure_index(left, copy=copy)\n    right = ensure_index(right, copy=copy)\n\n    if dtype is not None:\n        # GH 19262: dtype must be an IntervalDtype to override inferred\n        dtype = pandas_dtype(dtype)\n        if not is_interval_dtype(dtype):\n            msg = f\"dtype must be an IntervalDtype, got {dtype}\"\n            raise TypeError(msg)\n        elif dtype.subtype is not None:\n            left = left.astype(dtype.subtype)\n            right = right.astype(dtype.subtype)\n\n    # coerce dtypes to match if needed\n    if is_float_dtype(left) and is_integer_dtype(right):\n        right = right.astype(left.dtype)\n    elif is_float_dtype(right) and is_integer_dtype(left):\n        left = left.astype(right.dtype)\n\n    if type(left) != type(right):\n        msg = (\n            f\"must not have differing left [{type(left).__name__}] and \"\n            f\"right [{type(right).__name__}] types\"\n        )\n        raise ValueError(msg)\n    elif is_categorical_dtype(left.dtype) or is_string_dtype(left.dtype):\n        # GH 19016\n        msg = (\n            \"category, object, and string subtypes are not supported \"\n            \"for IntervalArray\"\n        )\n        raise TypeError(msg)\n    elif isinstance(left, ABCPeriodIndex):\n        msg = \"Period dtypes are not supported, use a PeriodIndex instead\"\n        raise ValueError(msg)\n    elif isinstance(left, ABCDatetimeIndex) and str(left.tz) != str(right.tz):\n        msg = (\n            \"left and right must have the same time zone, got \"\n            f\"'{left.tz}' and '{right.tz}'\"\n        )\n        raise ValueError(msg)\n\n    result._left = left\n    result._right = right\n    result._closed = closed\n    if verify_integrity:\n        result._validate()\n    return result",
                "@classmethod\ndef _from_sequence(cls, scalars, dtype=None, copy=False):\n    return cls(scalars, dtype=dtype, copy=copy)",
                "@classmethod\ndef _from_factorized(cls, values, original):\n    if len(values) == 0:\n        # An empty array returns object-dtype here. We can't create\n        # a new IA from an (empty) object-dtype array, so turn it into the\n        # correct dtype.\n        values = values.astype(original.dtype.subtype)\n    return cls(values, closed=original.closed)",
                "@classmethod\n@Appender(\n    _interval_shared_docs[\"from_breaks\"]\n    % dict(\n        klass=\"IntervalArray\",\n        examples=textwrap.dedent(\n            \"\"\"\\\n    Examples\n    --------\n    >>> pd.arrays.IntervalArray.from_breaks([0, 1, 2, 3])\n    <IntervalArray>\n    [(0, 1], (1, 2], (2, 3]]\n    Length: 3, closed: right, dtype: interval[int64]\n    \"\"\"\n        ),\n    )\n)\ndef from_breaks(cls, breaks, closed=\"right\", copy=False, dtype=None):\n    breaks = maybe_convert_platform_interval(breaks)\n\n    return cls.from_arrays(breaks[:-1], breaks[1:], closed, copy=copy, dtype=dtype)",
                "@classmethod\n@Appender(\n    _interval_shared_docs[\"from_arrays\"]\n    % dict(\n        klass=\"IntervalArray\",\n        examples=textwrap.dedent(\n            \"\"\"\\\n    >>> pd.arrays.IntervalArray.from_arrays([0, 1, 2], [1, 2, 3])\n    <IntervalArray>\n    [(0, 1], (1, 2], (2, 3]]\n    Length: 3, closed: right, dtype: interval[int64]\n    \"\"\"\n        ),\n    )\n)\ndef from_arrays(cls, left, right, closed=\"right\", copy=False, dtype=None):\n    left = maybe_convert_platform_interval(left)\n    right = maybe_convert_platform_interval(right)\n\n    return cls._simple_new(\n        left, right, closed, copy=copy, dtype=dtype, verify_integrity=True\n    )",
                "@classmethod\n@Appender(\n    _interval_shared_docs[\"from_tuples\"]\n    % dict(\n        klass=\"IntervalArray\",\n        examples=textwrap.dedent(\n            \"\"\"\\\n    Examples\n    --------\n    >>> pd.arrays.IntervalArray.from_tuples([(0, 1), (1, 2)])\n    <IntervalArray>\n    [(0, 1], (1, 2]]\n    Length: 2, closed: right, dtype: interval[int64]\n    \"\"\"\n        ),\n    )\n)\ndef from_tuples(cls, data, closed=\"right\", copy=False, dtype=None):\n    if len(data):\n        left, right = [], []\n    else:\n        # ensure that empty data keeps input dtype\n        left = right = data\n\n    for d in data:\n        if isna(d):\n            lhs = rhs = np.nan\n        else:\n            name = cls.__name__\n            try:\n                # need list of length 2 tuples, e.g. [(0, 1), (1, 2), ...]\n                lhs, rhs = d\n            except ValueError as err:\n                msg = f\"{name}.from_tuples requires tuples of length 2, got {d}\"\n                raise ValueError(msg) from err\n            except TypeError as err:\n                msg = f\"{name}.from_tuples received an invalid item, {d}\"\n                raise TypeError(msg) from err\n        left.append(lhs)\n        right.append(rhs)\n\n    return cls.from_arrays(left, right, closed, copy=False, dtype=dtype)",
                "def _validate(self):\n    \"\"\"\n    Verify that the IntervalArray is valid.\n\n    Checks that\n\n    * closed is valid\n    * left and right match lengths\n    * left and right have the same missing values\n    * left is always below right\n    \"\"\"\n    if self.closed not in _VALID_CLOSED:\n        msg = f\"invalid option for 'closed': {self.closed}\"\n        raise ValueError(msg)\n    if len(self.left) != len(self.right):\n        msg = \"left and right must have the same length\"\n        raise ValueError(msg)\n    left_mask = notna(self.left)\n    right_mask = notna(self.right)\n    if not (left_mask == right_mask).all():\n        msg = (\n            \"missing values must be missing in the same \"\n            \"location both left and right sides\"\n        )\n        raise ValueError(msg)\n    if not (self.left[left_mask] <= self.right[left_mask]).all():\n        msg = \"left side of interval must be <= right side\"\n        raise ValueError(msg)",
                "def __iter__(self):\n    return iter(np.asarray(self))",
                "def __len__(self) -> int:\n    return len(self.left)",
                "def __getitem__(self, value):\n    value = check_array_indexer(self, value)\n    left = self.left[value]\n    right = self.right[value]\n\n    # scalar\n    if not isinstance(left, ABCIndexClass):\n        if is_scalar(left) and isna(left):\n            return self._fill_value\n        if np.ndim(left) > 1:\n            # GH#30588 multi-dimensional indexer disallowed\n            raise ValueError(\"multi-dimensional indexing not allowed\")\n        return Interval(left, right, self.closed)\n\n    return self._shallow_copy(left, right)",
                "def __setitem__(self, key, value):\n    # na value: need special casing to set directly on numpy arrays\n    needs_float_conversion = False\n    if is_scalar(value) and isna(value):\n        if is_integer_dtype(self.dtype.subtype):\n            # can't set NaN on a numpy integer array\n            needs_float_conversion = True\n        elif is_datetime64_any_dtype(self.dtype.subtype):\n            # need proper NaT to set directly on the numpy array\n            value = np.datetime64(\"NaT\")\n        elif is_timedelta64_dtype(self.dtype.subtype):\n            # need proper NaT to set directly on the numpy array\n            value = np.timedelta64(\"NaT\")\n        value_left, value_right = value, value\n\n    # scalar interval\n    elif is_interval_dtype(value) or isinstance(value, Interval):\n        self._check_closed_matches(value, name=\"value\")\n        value_left, value_right = value.left, value.right\n\n    else:\n        # list-like of intervals\n        try:\n            array = IntervalArray(value)\n            value_left, value_right = array.left, array.right\n        except TypeError as err:\n            # wrong type: not interval or NA\n            msg = f\"'value' should be an interval type, got {type(value)} instead.\"\n            raise TypeError(msg) from err\n\n    key = check_array_indexer(self, key)\n    # Need to ensure that left and right are updated atomically, so we're\n    # forced to copy, update the copy, and swap in the new values.\n    left = self.left.copy(deep=True)\n    if needs_float_conversion:\n        left = left.astype(\"float\")\n    left.values[key] = value_left\n    self._left = left\n\n    right = self.right.copy(deep=True)\n    if needs_float_conversion:\n        right = right.astype(\"float\")\n    right.values[key] = value_right\n    self._right = right",
                "def __eq__(self, other):\n    # ensure pandas array for list-like and eliminate non-interval scalars\n    if is_list_like(other):\n        if len(self) != len(other):\n            raise ValueError(\"Lengths must match to compare\")\n        other = array(other)\n    elif not isinstance(other, Interval):\n        # non-interval scalar -> no matches\n        return np.zeros(len(self), dtype=bool)\n\n    # determine the dtype of the elements we want to compare\n    if isinstance(other, Interval):\n        other_dtype = \"interval\"\n    elif not is_categorical_dtype(other):\n        other_dtype = other.dtype\n    else:\n        # for categorical defer to categories for dtype\n        other_dtype = other.categories.dtype\n\n        # extract intervals if we have interval categories with matching closed\n        if is_interval_dtype(other_dtype):\n            if self.closed != other.categories.closed:\n                return np.zeros(len(self), dtype=bool)\n            other = other.categories.take(other.codes)\n\n    # interval-like -> need same closed and matching endpoints\n    if is_interval_dtype(other_dtype):\n        if self.closed != other.closed:\n            return np.zeros(len(self), dtype=bool)\n        return (self.left == other.left) & (self.right == other.right)\n\n    # non-interval/non-object dtype -> no matches\n    if not is_object_dtype(other_dtype):\n        return np.zeros(len(self), dtype=bool)\n\n    # object dtype -> iteratively check for intervals\n    result = np.zeros(len(self), dtype=bool)\n    for i, obj in enumerate(other):\n        # need object to be an Interval with same closed and endpoints\n        if (\n            isinstance(obj, Interval)\n            and self.closed == obj.closed\n            and self.left[i] == obj.left\n            and self.right[i] == obj.right\n        ):\n            result[i] = True\n\n    return result",
                "def __ne__(self, other):\n    return ~self.__eq__(other)",
                "def fillna(self, value=None, method=None, limit=None):\n    \"\"\"\n    Fill NA/NaN values using the specified method.\n\n    Parameters\n    ----------\n    value : scalar, dict, Series\n        If a scalar value is passed it is used to fill all missing values.\n        Alternatively, a Series or dict can be used to fill in different\n        values for each index. The value should not be a list. The\n        value(s) passed should be either Interval objects or NA/NaN.\n    method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n        (Not implemented yet for IntervalArray)\n        Method to use for filling holes in reindexed Series\n    limit : int, default None\n        (Not implemented yet for IntervalArray)\n        If method is specified, this is the maximum number of consecutive\n        NaN values to forward/backward fill. In other words, if there is\n        a gap with more than this number of consecutive NaNs, it will only\n        be partially filled. If method is not specified, this is the\n        maximum number of entries along the entire axis where NaNs will be\n        filled.\n\n    Returns\n    -------\n    filled : IntervalArray with NA/NaN filled\n    \"\"\"\n    if method is not None:\n        raise TypeError(\"Filling by method is not supported for IntervalArray.\")\n    if limit is not None:\n        raise TypeError(\"limit is not supported for IntervalArray.\")\n\n    if not isinstance(value, Interval):\n        msg = (\n            \"'IntervalArray.fillna' only supports filling with a \"\n            f\"scalar 'pandas.Interval'. Got a '{type(value).__name__}' instead.\"\n        )\n        raise TypeError(msg)\n\n    value = getattr(value, \"_values\", value)\n    self._check_closed_matches(value, name=\"value\")\n\n    left = self.left.fillna(value=value.left)\n    right = self.right.fillna(value=value.right)\n    return self._shallow_copy(left, right)",
                "@property\ndef dtype(self):\n    return IntervalDtype(self.left.dtype)",
                "def astype(self, dtype, copy=True):\n    \"\"\"\n    Cast to an ExtensionArray or NumPy array with dtype 'dtype'.\n\n    Parameters\n    ----------\n    dtype : str or dtype\n        Typecode or data-type to which the array is cast.\n\n    copy : bool, default True\n        Whether to copy the data, even if not necessary. If False,\n        a copy is made only if the old dtype does not match the\n        new dtype.\n\n    Returns\n    -------\n    array : ExtensionArray or ndarray\n        ExtensionArray or NumPy ndarray with 'dtype' for its dtype.\n    \"\"\"\n    dtype = pandas_dtype(dtype)\n    if is_interval_dtype(dtype):\n        if dtype == self.dtype:\n            return self.copy() if copy else self\n\n        # need to cast to different subtype\n        try:\n            new_left = self.left.astype(dtype.subtype)\n            new_right = self.right.astype(dtype.subtype)\n        except TypeError as err:\n            msg = (\n                f\"Cannot convert {self.dtype} to {dtype}; subtypes are incompatible\"\n            )\n            raise TypeError(msg) from err\n        return self._shallow_copy(new_left, new_right)\n    elif is_categorical_dtype(dtype):\n        return Categorical(np.asarray(self))\n    # TODO: This try/except will be repeated.\n    try:\n        return np.asarray(self).astype(dtype, copy=copy)\n    except (TypeError, ValueError) as err:\n        msg = f\"Cannot cast {type(self).__name__} to dtype {dtype}\"\n        raise TypeError(msg) from err",
                "@classmethod\ndef _concat_same_type(cls, to_concat):\n    \"\"\"\n    Concatenate multiple IntervalArray\n\n    Parameters\n    ----------\n    to_concat : sequence of IntervalArray\n\n    Returns\n    -------\n    IntervalArray\n    \"\"\"\n    closed = {interval.closed for interval in to_concat}\n    if len(closed) != 1:\n        raise ValueError(\"Intervals must all be closed on the same side.\")\n    closed = closed.pop()\n\n    left = np.concatenate([interval.left for interval in to_concat])\n    right = np.concatenate([interval.right for interval in to_concat])\n    return cls._simple_new(left, right, closed=closed, copy=False)",
                "def _shallow_copy(self, left, right):\n    \"\"\"\n    Return a new IntervalArray with the replacement attributes\n\n    Parameters\n    ----------\n    left : Index\n        Values to be used for the left-side of the intervals.\n    right : Index\n        Values to be used for the right-side of the intervals.\n    \"\"\"\n    return self._simple_new(left, right, closed=self.closed, verify_integrity=False)",
                "def copy(self):\n    \"\"\"\n    Return a copy of the array.\n\n    Returns\n    -------\n    IntervalArray\n    \"\"\"\n    left = self.left.copy(deep=True)\n    right = self.right.copy(deep=True)\n    closed = self.closed\n    # TODO: Could skip verify_integrity here.\n    return type(self).from_arrays(left, right, closed=closed)",
                "def isna(self):\n    return isna(self.left)",
                "@property\ndef nbytes(self) -> int:\n    return self.left.nbytes + self.right.nbytes",
                "@property\ndef size(self) -> int:\n    # Avoid materializing self.values\n    return self.left.size",
                "def shift(self, periods: int = 1, fill_value: object = None) -> ABCExtensionArray:\n    if not len(self) or periods == 0:\n        return self.copy()\n\n    if isna(fill_value):\n        fill_value = self.dtype.na_value\n\n    # ExtensionArray.shift doesn't work for two reasons\n    # 1. IntervalArray.dtype.na_value may not be correct for the dtype.\n    # 2. IntervalArray._from_sequence only accepts NaN for missing values,\n    #    not other values like NaT\n\n    empty_len = min(abs(periods), len(self))\n    if isna(fill_value):\n        fill_value = self.left._na_value\n        empty = IntervalArray.from_breaks([fill_value] * (empty_len + 1))\n    else:\n        empty = self._from_sequence([fill_value] * empty_len)\n\n    if periods > 0:\n        a = empty\n        b = self[:-periods]\n    else:\n        a = self[abs(periods) :]\n        b = empty\n    return self._concat_same_type([a, b])",
                "def take(self, indices, allow_fill=False, fill_value=None, axis=None, **kwargs):\n    \"\"\"\n    Take elements from the IntervalArray.\n\n    Parameters\n    ----------\n    indices : sequence of integers\n        Indices to be taken.\n\n    allow_fill : bool, default False\n        How to handle negative values in `indices`.\n\n        * False: negative values in `indices` indicate positional indices\n          from the right (the default). This is similar to\n          :func:`numpy.take`.\n\n        * True: negative values in `indices` indicate\n          missing values. These values are set to `fill_value`. Any other\n          other negative values raise a ``ValueError``.\n\n    fill_value : Interval or NA, optional\n        Fill value to use for NA-indices when `allow_fill` is True.\n        This may be ``None``, in which case the default NA value for\n        the type, ``self.dtype.na_value``, is used.\n\n        For many ExtensionArrays, there will be two representations of\n        `fill_value`: a user-facing \"boxed\" scalar, and a low-level\n        physical NA value. `fill_value` should be the user-facing version,\n        and the implementation should handle translating that to the\n        physical version for processing the take if necessary.\n\n    axis : any, default None\n        Present for compat with IntervalIndex; does nothing.\n\n    Returns\n    -------\n    IntervalArray\n\n    Raises\n    ------\n    IndexError\n        When the indices are out of bounds for the array.\n    ValueError\n        When `indices` contains negative values other than ``-1``\n        and `allow_fill` is True.\n    \"\"\"\n    nv.validate_take(tuple(), kwargs)\n\n    fill_left = fill_right = fill_value\n    if allow_fill:\n        if fill_value is None:\n            fill_left = fill_right = self.left._na_value\n        elif is_interval(fill_value):\n            self._check_closed_matches(fill_value, name=\"fill_value\")\n            fill_left, fill_right = fill_value.left, fill_value.right\n        elif not is_scalar(fill_value) and notna(fill_value):\n            msg = (\n                \"'IntervalArray.fillna' only supports filling with a \"\n                \"'scalar pandas.Interval or NA'. \"\n                f\"Got a '{type(fill_value).__name__}' instead.\"\n            )\n            raise ValueError(msg)\n\n    left_take = take(\n        self.left, indices, allow_fill=allow_fill, fill_value=fill_left\n    )\n    right_take = take(\n        self.right, indices, allow_fill=allow_fill, fill_value=fill_right\n    )\n\n    return self._shallow_copy(left_take, right_take)",
                "def value_counts(self, dropna=True):\n    \"\"\"\n    Returns a Series containing counts of each interval.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't include counts of NaN.\n\n    Returns\n    -------\n    counts : Series\n\n    See Also\n    --------\n    Series.value_counts\n    \"\"\"\n    # TODO: implement this is a non-naive way!\n    return value_counts(np.asarray(self), dropna=dropna)",
                "def _format_data(self):\n\n    # TODO: integrate with categorical and make generic\n    # name argument is unused here; just for compat with base / categorical\n    n = len(self)\n    max_seq_items = min((get_option(\"display.max_seq_items\") or n) // 10, 10)\n\n    formatter = str\n\n    if n == 0:\n        summary = \"[]\"\n    elif n == 1:\n        first = formatter(self[0])\n        summary = f\"[{first}]\"\n    elif n == 2:\n        first = formatter(self[0])\n        last = formatter(self[-1])\n        summary = f\"[{first}, {last}]\"\n    else:\n\n        if n > max_seq_items:\n            n = min(max_seq_items // 2, 10)\n            head = [formatter(x) for x in self[:n]]\n            tail = [formatter(x) for x in self[-n:]]\n            head_str = \", \".join(head)\n            tail_str = \", \".join(tail)\n            summary = f\"[{head_str} ... {tail_str}]\"\n        else:\n            tail = [formatter(x) for x in self]\n            tail_str = \", \".join(tail)\n            summary = f\"[{tail_str}]\"\n\n    return summary",
                "def __repr__(self) -> str:\n    # the short repr has no trailing newline, while the truncated\n    # repr does. So we include a newline in our template, and strip\n    # any trailing newlines from format_object_summary\n    data = self._format_data()\n    class_name = f\"<{type(self).__name__}>\\n\"\n\n    template = (\n        f\"{class_name}\"\n        f\"{data}\\n\"\n        f\"Length: {len(self)}, closed: {self.closed}, dtype: {self.dtype}\"\n    )\n    return template",
                "def _format_space(self):\n    space = \" \" * (len(type(self).__name__) + 1)\n    return f\"\\n{space}\"",
                "@property\ndef left(self):\n    \"\"\"\n    Return the left endpoints of each Interval in the IntervalArray as\n    an Index.\n    \"\"\"\n    return self._left",
                "@property\ndef right(self):\n    \"\"\"\n    Return the right endpoints of each Interval in the IntervalArray as\n    an Index.\n    \"\"\"\n    return self._right",
                "@property\ndef closed(self):\n    \"\"\"\n    Whether the intervals are closed on the left-side, right-side, both or\n    neither.\n    \"\"\"\n    return self._closed",
                "@Appender(\n    _interval_shared_docs[\"set_closed\"]\n    % dict(\n        klass=\"IntervalArray\",\n        examples=textwrap.dedent(\n            \"\"\"\\\n    Examples\n    --------\n    >>> index = pd.arrays.IntervalArray.from_breaks(range(4))\n    >>> index\n    <IntervalArray>\n    [(0, 1], (1, 2], (2, 3]]\n    Length: 3, closed: right, dtype: interval[int64]\n    >>> index.set_closed('both')\n    <IntervalArray>\n    [[0, 1], [1, 2], [2, 3]]\n    Length: 3, closed: both, dtype: interval[int64]\n    \"\"\"\n        ),\n    )\n)\ndef set_closed(self, closed):\n    if closed not in _VALID_CLOSED:\n        msg = f\"invalid option for 'closed': {closed}\"\n        raise ValueError(msg)\n\n    return type(self)._simple_new(\n        left=self.left, right=self.right, closed=closed, verify_integrity=False\n    )",
                "@property\ndef length(self):\n    \"\"\"\n    Return an Index with entries denoting the length of each Interval in\n    the IntervalArray.\n    \"\"\"\n    try:\n        return self.right - self.left\n    except TypeError as err:\n        # length not defined for some types, e.g. string\n        msg = (\n            \"IntervalArray contains Intervals without defined length, \"\n            \"e.g. Intervals with string endpoints\"\n        )\n        raise TypeError(msg) from err",
                "@property\ndef mid(self):\n    \"\"\"\n    Return the midpoint of each Interval in the IntervalArray as an Index.\n    \"\"\"\n    try:\n        return 0.5 * (self.left + self.right)\n    except TypeError:\n        # datetime safe version\n        return self.left + 0.5 * self.length",
                "@property  # type: ignore\n@Appender(\n    _interval_shared_docs[\"is_non_overlapping_monotonic\"] % _shared_docs_kwargs\n)\ndef is_non_overlapping_monotonic(self):\n    # must be increasing  (e.g., [0, 1), [1, 2), [2, 3), ... )\n    # or decreasing (e.g., [-1, 0), [-2, -1), [-3, -2), ...)\n    # we already require left <= right\n\n    # strict inequality for closed == 'both'; equality implies overlapping\n    # at a point when both sides of intervals are included\n    if self.closed == \"both\":\n        return bool(\n            (self.right[:-1] < self.left[1:]).all()\n            or (self.left[:-1] > self.right[1:]).all()\n        )\n\n    # non-strict inequality when closed != 'both'; at least one side is\n    # not included in the intervals, so equality does not imply overlapping\n    return bool(\n        (self.right[:-1] <= self.left[1:]).all()\n        or (self.left[:-1] >= self.right[1:]).all()\n    )",
                "def __array__(self, dtype=None) -> np.ndarray:\n    \"\"\"\n    Return the IntervalArray's data as a numpy array of Interval\n    objects (with dtype='object')\n    \"\"\"\n    left = self.left\n    right = self.right\n    mask = self.isna()\n    closed = self._closed\n\n    result = np.empty(len(left), dtype=object)\n    for i in range(len(left)):\n        if mask[i]:\n            result[i] = np.nan\n        else:\n            result[i] = Interval(left[i], right[i], closed)\n    return result",
                "def __arrow_array__(self, type=None):\n    \"\"\"\n    Convert myself into a pyarrow Array.\n    \"\"\"\n    import pyarrow\n    from pandas.core.arrays._arrow_utils import ArrowIntervalType\n\n    try:\n        subtype = pyarrow.from_numpy_dtype(self.dtype.subtype)\n    except TypeError as err:\n        raise TypeError(\n            f\"Conversion to arrow with subtype '{self.dtype.subtype}' \"\n            \"is not supported\"\n        ) from err\n    interval_type = ArrowIntervalType(subtype, self.closed)\n    storage_array = pyarrow.StructArray.from_arrays(\n        [\n            pyarrow.array(self.left, type=subtype, from_pandas=True),\n            pyarrow.array(self.right, type=subtype, from_pandas=True),\n        ],\n        names=[\"left\", \"right\"],\n    )\n    mask = self.isna()\n    if mask.any():\n        # if there are missing values, set validity bitmap also on the array level\n        null_bitmap = pyarrow.array(~mask).buffers()[1]\n        storage_array = pyarrow.StructArray.from_buffers(\n            storage_array.type,\n            len(storage_array),\n            [null_bitmap],\n            children=[storage_array.field(0), storage_array.field(1)],\n        )\n\n    if type is not None:\n        if type.equals(interval_type.storage_type):\n            return storage_array\n        elif isinstance(type, ArrowIntervalType):\n            # ensure we have the same subtype and closed attributes\n            if not type.equals(interval_type):\n                raise TypeError(\n                    \"Not supported to convert IntervalArray to type with \"\n                    f\"different 'subtype' ({self.dtype.subtype} vs {type.subtype}) \"\n                    f\"and 'closed' ({self.closed} vs {type.closed}) attributes\"\n                )\n        else:\n            raise TypeError(\n                f\"Not supported to convert IntervalArray to '{type}' type\"\n            )\n\n    return pyarrow.ExtensionArray.from_storage(interval_type, storage_array)",
                "@Appender(\n    _interval_shared_docs[\"to_tuples\"] % dict(return_type=\"ndarray\", examples=\"\")\n)\ndef to_tuples(self, na_tuple=True):\n    tuples = com.asarray_tuplesafe(zip(self.left, self.right))\n    if not na_tuple:\n        # GH 18756\n        tuples = np.where(~self.isna(), tuples, np.nan)\n    return tuples",
                "@Appender(_extension_array_shared_docs[\"repeat\"] % _shared_docs_kwargs)\ndef repeat(self, repeats, axis=None):\n    nv.validate_repeat(tuple(), dict(axis=axis))\n    left_repeat = self.left.repeat(repeats)\n    right_repeat = self.right.repeat(repeats)\n    return self._shallow_copy(left=left_repeat, right=right_repeat)",
                "@Appender(\n    _interval_shared_docs[\"contains\"]\n    % dict(\n        klass=\"IntervalArray\",\n        examples=textwrap.dedent(\n            \"\"\"\\\n    >>> intervals = pd.arrays.IntervalArray.from_tuples([(0, 1), (1, 3), (2, 4)])\n    >>> intervals\n    <IntervalArray>\n    [(0, 1], (1, 3], (2, 4]]\n    Length: 3, closed: right, dtype: interval[int64]\n    \"\"\"\n        ),\n    )\n)\ndef contains(self, other):\n    if isinstance(other, Interval):\n        raise NotImplementedError(\"contains not implemented for two intervals\")\n\n    return (self.left < other if self.open_left else self.left <= other) & (\n        other < self.right if self.open_right else other <= self.right\n    )",
                "@Appender(\n    _interval_shared_docs[\"overlaps\"]\n    % dict(\n        klass=\"IntervalArray\",\n        examples=textwrap.dedent(\n            \"\"\"\\\n    >>> data = [(0, 1), (1, 3), (2, 4)]\n    >>> intervals = pd.arrays.IntervalArray.from_tuples(data)\n    >>> intervals\n    <IntervalArray>\n    [(0, 1], (1, 3], (2, 4]]\n    Length: 3, closed: right, dtype: interval[int64]\n    \"\"\"\n        ),\n    )\n)\ndef overlaps(self, other):\n    if isinstance(other, (IntervalArray, ABCIntervalIndex)):\n        raise NotImplementedError\n    elif not isinstance(other, Interval):\n        msg = f\"`other` must be Interval-like, got {type(other).__name__}\"\n        raise TypeError(msg)\n\n    # equality is okay if both endpoints are closed (overlap at a point)\n    op1 = le if (self.closed_left and other.closed_right) else lt\n    op2 = le if (other.closed_left and self.closed_right) else lt\n\n    # overlaps is equivalent negation of two interval being disjoint:\n    # disjoint = (A.left > B.right) or (B.left > A.right)\n    # (simplifying the negation allows this to be done in less operations)\n    return op1(self.left, other.right) & op2(other.left, self.right)"
            ],
            "inscope_function_signatures": [
                "maybe_convert_platform_interval(values)",
                "__new__(cls, data, closed=None, dtype=None, copy=False, verify_integrity=True)",
                "_simple_new(cls, left, right, closed=None, copy=False, dtype=None, verify_integrity=True)",
                "_from_sequence(cls, scalars, dtype=None, copy=False)",
                "_from_factorized(cls, values, original)",
                "from_breaks(cls, breaks, closed='right', copy=False, dtype=None)",
                "from_arrays(cls, left, right, closed='right', copy=False, dtype=None)",
                "from_tuples(cls, data, closed='right', copy=False, dtype=None)",
                "_validate(self)",
                "__iter__(self)",
                "__len__(self) -> int",
                "__getitem__(self, value)",
                "__setitem__(self, key, value)",
                "__eq__(self, other)",
                "__ne__(self, other)",
                "fillna(self, value=None, method=None, limit=None)",
                "dtype(self)",
                "astype(self, dtype, copy=True)",
                "_concat_same_type(cls, to_concat)",
                "_shallow_copy(self, left, right)",
                "copy(self)",
                "isna(self)",
                "nbytes(self) -> int",
                "size(self) -> int",
                "shift(self, periods: int=1, fill_value: object=None) -> ABCExtensionArray",
                "take(self, indices, allow_fill=False, fill_value=None, axis=None, **kwargs)",
                "value_counts(self, dropna=True)",
                "_format_data(self)",
                "__repr__(self) -> str",
                "_format_space(self)",
                "left(self)",
                "right(self)",
                "closed(self)",
                "set_closed(self, closed)",
                "length(self)",
                "mid(self)",
                "is_non_overlapping_monotonic(self)",
                "__array__(self, dtype=None) -> np.ndarray",
                "__arrow_array__(self, type=None)",
                "to_tuples(self, na_tuple=True)",
                "repeat(self, repeats, axis=None)",
                "contains(self, other)",
                "overlaps(self, other)"
            ],
            "variables_in_file": {
                "_VALID_CLOSED": [
                    472,
                    46,
                    1006
                ],
                "_interval_shared_docs": [
                    256,
                    384,
                    1164,
                    1041,
                    1180,
                    1052,
                    290,
                    420,
                    47,
                    310,
                    54,
                    1213,
                    963,
                    1235,
                    985,
                    363,
                    120,
                    1144,
                    1278
                ],
                "_shared_docs_kwargs": [
                    49,
                    1052,
                    1173
                ],
                "dict": [
                    291,
                    421,
                    364,
                    1164,
                    49,
                    1175,
                    121,
                    986,
                    1214,
                    1279
                ],
                "IntervalMixin": [
                    147,
                    191
                ],
                "ExtensionArray": [
                    147
                ],
                "ndim": [
                    148
                ],
                "can_hold_na": [
                    149
                ],
                "_na_value": [
                    150
                ],
                "_fill_value": [
                    150
                ],
                "np.nan": [
                    1088,
                    1170,
                    444,
                    150
                ],
                "np": [
                    524,
                    527,
                    1170,
                    150,
                    1330,
                    1075,
                    1332,
                    568,
                    697,
                    700,
                    444,
                    1085,
                    1088,
                    582,
                    588,
                    593,
                    723,
                    596,
                    724,
                    494,
                    883,
                    508
                ],
                "isinstance": [
                    226,
                    644,
                    229,
                    1129,
                    1228,
                    1294,
                    1326,
                    1296,
                    531,
                    566,
                    600,
                    505,
                    154,
                    571,
                    157
                ],
                "data": [
                    160,
                    930,
                    164,
                    167,
                    172,
                    174,
                    925,
                    442,
                    436,
                    440,
                    154,
                    155,
                    157,
                    158,
                    159
                ],
                "ABCSeries": [
                    154
                ],
                "is_interval_dtype": [
                    580,
                    200,
                    586,
                    682,
                    531,
                    154
                ],
                "data._values": [
                    155
                ],
                "cls": [
                    446,
                    166,
                    459,
                    178,
                    308,
                    245,
                    725,
                    380,
                    157,
                    254,
                    191
                ],
                "ABCIntervalIndex": [
                    157,
                    1294
                ],
                "left": [
                    513,
                    654,
                    656,
                    158,
                    548,
                    550,
                    551,
                    552,
                    173,
                    179,
                    437,
                    440,
                    1080,
                    1085,
                    1086,
                    194,
                    1090,
                    456,
                    459,
                    204,
                    208,
                    209,
                    210,
                    211,
                    723,
                    213,
                    725,
                    215,
                    219,
                    226,
                    738,
                    229,
                    232,
                    236,
                    505,
                    748,
                    752,
                    501,
                    377,
                    506,
                    508,
                    381,
                    511
                ],
                "data.left": [
                    158
                ],
                "right": [
                    513,
                    655,
                    656,
                    159,
                    554,
                    556,
                    173,
                    557,
                    558,
                    180,
                    437,
                    440,
                    1081,
                    1090,
                    195,
                    457,
                    459,
                    205,
                    208,
                    209,
                    210,
                    211,
                    724,
                    213,
                    725,
                    216,
                    738,
                    229,
                    232,
                    237,
                    749,
                    752,
                    502,
                    378,
                    381,
                    511
                ],
                "data.right": [
                    159
                ],
                "closed": [
                    160,
                    174,
                    176,
                    308,
                    181,
                    1083,
                    193,
                    1090,
                    459,
                    718,
                    719,
                    721,
                    725,
                    1006,
                    1007,
                    238,
                    750,
                    752,
                    1011,
                    381
                ],
                "data.closed": [
                    160
                ],
                "is_scalar": [
                    848,
                    506,
                    164,
                    518
                ],
                "msg": [
                    1024,
                    1028,
                    645,
                    649,
                    1297,
                    1298,
                    542,
                    543,
                    165,
                    169,
                    691,
                    694,
                    702,
                    703,
                    451,
                    452,
                    454,
                    455,
                    201,
                    202,
                    849,
                    214,
                    854,
                    473,
                    474,
                    218,
                    476,
                    221,
                    477,
                    225,
                    481,
                    227,
                    228,
                    485,
                    230,
                    487,
                    488,
                    234,
                    1007,
                    1008
                ],
                "cls.__name__": [
                    446,
                    166
                ],
                "TypeError": [
                    640,
                    642,
                    1028,
                    649,
                    1037,
                    1298,
                    540,
                    543,
                    169,
                    690,
                    694,
                    701,
                    703,
                    453,
                    455,
                    202,
                    1102,
                    1103,
                    225,
                    1132,
                    1138,
                    1022
                ],
                "maybe_convert_platform_interval": [
                    377,
                    306,
                    172,
                    378
                ],
                "infer_closed": [
                    176,
                    173
                ],
                "intervals_to_interval_bounds": [
                    173
                ],
                "cls._simple_new": [
                    178,
                    380,
                    725
                ],
                "copy": [
                    194,
                    195,
                    684,
                    308,
                    245,
                    182,
                    700,
                    381
                ],
                "dtype": [
                    681,
                    682,
                    683,
                    688,
                    689,
                    308,
                    692,
                    183,
                    696,
                    700,
                    702,
                    197,
                    199,
                    200,
                    201,
                    203,
                    204,
                    205,
                    459,
                    245,
                    381
                ],
                "verify_integrity": [
                    184,
                    239
                ],
                "result": [
                    1088,
                    1090,
                    1091,
                    236,
                    237,
                    238,
                    607,
                    240,
                    241,
                    1085,
                    596,
                    605,
                    191
                ],
                "IntervalMixin.__new__": [
                    191
                ],
                "ensure_index": [
                    194,
                    195
                ],
                "pandas_dtype": [
                    681,
                    199
                ],
                "dtype.subtype": [
                    203,
                    204,
                    205,
                    688,
                    689
                ],
                "left.astype": [
                    211,
                    204,
                    550
                ],
                "right.astype": [
                    209,
                    556,
                    205
                ],
                "is_float_dtype": [
                    208,
                    210
                ],
                "is_integer_dtype": [
                    208,
                    210,
                    519
                ],
                "left.dtype": [
                    209,
                    219
                ],
                "right.dtype": [
                    211
                ],
                "type": [
                    647,
                    1297,
                    926,
                    542,
                    936,
                    702,
                    852,
                    213,
                    215,
                    216,
                    1126,
                    1127,
                    1129,
                    1131,
                    1134,
                    1135,
                    752,
                    1010,
                    1139
                ],
                "__name__": [
                    647,
                    936,
                    1297,
                    926,
                    852,
                    215,
                    216,
                    702
                ],
                "ValueError": [
                    450,
                    452,
                    228,
                    485,
                    701,
                    488,
                    234,
                    720,
                    474,
                    1008,
                    564,
                    854,
                    218,
                    477,
                    510
                ],
                "is_categorical_dtype": [
                    696,
                    1331,
                    219,
                    573
                ],
                "is_string_dtype": [
                    219
                ],
                "ABCPeriodIndex": [
                    226
                ],
                "ABCDatetimeIndex": [
                    229
                ],
                "str": [
                    921,
                    229,
                    894
                ],
                "left.tz": [
                    232,
                    229
                ],
                "right.tz": [
                    232,
                    229
                ],
                "result._left": [
                    236
                ],
                "result._right": [
                    237
                ],
                "result._closed": [
                    238
                ],
                "result._validate": [
                    240
                ],
                "classmethod": [
                    288,
                    705,
                    418,
                    361,
                    243,
                    247,
                    187
                ],
                "scalars": [
                    245
                ],
                "len": [
                    778,
                    931,
                    936,
                    1326,
                    563,
                    436,
                    568,
                    1085,
                    1086,
                    582,
                    588,
                    719,
                    593,
                    596,
                    475,
                    1121,
                    497,
                    249,
                    891,
                    767
                ],
                "values": [
                    1326,
                    1331,
                    1332,
                    1334,
                    249,
                    253,
                    254
                ],
                "values.astype": [
                    253
                ],
                "original.dtype.subtype": [
                    253
                ],
                "original.dtype": [
                    253
                ],
                "original": [
                    253,
                    254
                ],
                "original.closed": [
                    254
                ],
                "textwrap.dedent": [
                    256,
                    384,
                    1216,
                    963,
                    1281,
                    293,
                    128,
                    423,
                    366,
                    1180,
                    1235,
                    310,
                    988
                ],
                "textwrap": [
                    256,
                    384,
                    1216,
                    963,
                    1281,
                    293,
                    128,
                    423,
                    366,
                    1180,
                    1235,
                    310,
                    988
                ],
                "breaks": [
                    306,
                    308
                ],
                "cls.from_arrays": [
                    459,
                    308
                ],
                "Appender": [
                    289,
                    419,
                    362,
                    1163,
                    1173,
                    119,
                    984,
                    1051,
                    1212,
                    1277
                ],
                "d": [
                    449,
                    451,
                    454,
                    442,
                    443
                ],
                "isna": [
                    770,
                    518,
                    779,
                    755,
                    506,
                    443
                ],
                "lhs": [
                    456,
                    449,
                    444
                ],
                "rhs": [
                    449,
                    444,
                    457
                ],
                "name": [
                    451,
                    454,
                    446
                ],
                "err": [
                    452,
                    1028,
                    455,
                    543,
                    1106,
                    694,
                    703
                ],
                "left.append": [
                    456
                ],
                "right.append": [
                    457
                ],
                "self.closed": [
                    738,
                    931,
                    581,
                    1061,
                    587,
                    750,
                    1135,
                    601,
                    1107,
                    472,
                    473,
                    511
                ],
                "self": [
                    513,
                    519,
                    522,
                    1036,
                    525,
                    1039,
                    532,
                    545,
                    548,
                    1061,
                    1063,
                    552,
                    1064,
                    554,
                    558,
                    1070,
                    1071,
                    563,
                    568,
                    1080,
                    1081,
                    1082,
                    1083,
                    581,
                    582,
                    587,
                    588,
                    589,
                    1101,
                    1104,
                    593,
                    1107,
                    596,
                    1110,
                    1111,
                    601,
                    602,
                    603,
                    1115,
                    610,
                    1134,
                    1135,
                    652,
                    654,
                    655,
                    656,
                    1167,
                    1170,
                    660,
                    1176,
                    1177,
                    1178,
                    683,
                    684,
                    688,
                    689,
                    692,
                    695,
                    697,
                    700,
                    702,
                    1231,
                    1232,
                    738,
                    748,
                    749,
                    750,
                    752,
                    755,
                    759,
                    764,
                    767,
                    768,
                    771,
                    778,
                    780,
                    783,
                    787,
                    789,
                    1301,
                    791,
                    1302,
                    1307,
                    844,
                    846,
                    857,
                    860,
                    863,
                    883,
                    891,
                    899,
                    902,
                    903,
                    909,
                    910,
                    915,
                    925,
                    926,
                    931,
                    936,
                    945,
                    953,
                    961,
                    472,
                    473,
                    475,
                    478,
                    479,
                    486,
                    494,
                    497,
                    1010,
                    1011,
                    500,
                    501,
                    502,
                    507,
                    1021,
                    511
                ],
                "self.left": [
                    780,
                    1036,
                    654,
                    1039,
                    1167,
                    660,
                    1176,
                    1307,
                    548,
                    1063,
                    1064,
                    1070,
                    1071,
                    688,
                    1080,
                    844,
                    589,
                    1231,
                    1110,
                    857,
                    602,
                    475,
                    478,
                    486,
                    748,
                    497,
                    755,
                    1011,
                    501,
                    759,
                    764,
                    1021
                ],
                "self.right": [
                    1036,
                    655,
                    1167,
                    1177,
                    1307,
                    1063,
                    1064,
                    554,
                    1070,
                    1071,
                    689,
                    1081,
                    589,
                    1232,
                    1111,
                    603,
                    475,
                    860,
                    479,
                    486,
                    749,
                    1011,
                    502,
                    759,
                    1021
                ],
                "left_mask": [
                    480,
                    478,
                    486
                ],
                "notna": [
                    848,
                    478,
                    479
                ],
                "right_mask": [
                    480,
                    479
                ],
                "all": [
                    480,
                    486,
                    1063,
                    1064,
                    1070,
                    1071
                ],
                "iter": [
                    494
                ],
                "np.asarray": [
                    494,
                    883,
                    1332,
                    697,
                    700
                ],
                "int": [
                    496,
                    762,
                    758,
                    766
                ],
                "value": [
                    644,
                    518,
                    647,
                    651,
                    524,
                    652,
                    654,
                    527,
                    528,
                    655,
                    531,
                    500,
                    501,
                    502,
                    532,
                    533,
                    538,
                    542
                ],
                "check_array_indexer": [
                    545,
                    500
                ],
                "ABCIndexClass": [
                    505
                ],
                "self._fill_value": [
                    507
                ],
                "np.ndim": [
                    508
                ],
                "Interval": [
                    1090,
                    644,
                    1228,
                    1296,
                    531,
                    566,
                    600,
                    571,
                    511
                ],
                "self._shallow_copy": [
                    513,
                    656,
                    695,
                    1178,
                    863
                ],
                "needs_float_conversion": [
                    521,
                    549,
                    517,
                    555
                ],
                "self.dtype.subtype": [
                    519,
                    522,
                    1101,
                    525,
                    1134,
                    1104
                ],
                "self.dtype": [
                    771,
                    931,
                    519,
                    522,
                    683,
                    525,
                    1101,
                    1134,
                    1104,
                    692
                ],
                "is_datetime64_any_dtype": [
                    522
                ],
                "np.datetime64": [
                    524
                ],
                "is_timedelta64_dtype": [
                    525
                ],
                "np.timedelta64": [
                    527
                ],
                "value_left": [
                    528,
                    539,
                    533,
                    551
                ],
                "value_right": [
                    528,
                    557,
                    539,
                    533
                ],
                "self._check_closed_matches": [
                    652,
                    532,
                    846
                ],
                "value.left": [
                    533,
                    654
                ],
                "value.right": [
                    533,
                    655
                ],
                "array": [
                    538,
                    539,
                    565
                ],
                "IntervalArray": [
                    538,
                    781,
                    1294
                ],
                "array.left": [
                    539
                ],
                "array.right": [
                    539
                ],
                "key": [
                    545,
                    557,
                    551
                ],
                "self.left.copy": [
                    548,
                    748
                ],
                "left.values": [
                    551
                ],
                "self._left": [
                    552,
                    945
                ],
                "self.right.copy": [
                    554,
                    749
                ],
                "right.values": [
                    557
                ],
                "self._right": [
                    953,
                    558
                ],
                "is_list_like": [
                    562
                ],
                "other": [
                    1294,
                    1296,
                    1297,
                    1301,
                    1302,
                    1307,
                    562,
                    563,
                    565,
                    566,
                    571,
                    573,
                    574,
                    577,
                    581,
                    583,
                    587,
                    1228,
                    589,
                    1231,
                    1232,
                    597,
                    610
                ],
                "np.zeros": [
                    582,
                    588,
                    593,
                    596,
                    568
                ],
                "bool": [
                    582,
                    1062,
                    588,
                    1069,
                    593,
                    596,
                    568
                ],
                "other_dtype": [
                    577,
                    580,
                    586,
                    592,
                    572,
                    574
                ],
                "other.dtype": [
                    574
                ],
                "other.categories.dtype": [
                    577
                ],
                "other.categories": [
                    577,
                    581,
                    583
                ],
                "other.categories.closed": [
                    581
                ],
                "other.categories.take": [
                    583
                ],
                "other.codes": [
                    583
                ],
                "other.closed": [
                    587
                ],
                "other.left": [
                    1307,
                    589
                ],
                "other.right": [
                    1307,
                    589
                ],
                "is_object_dtype": [
                    592
                ],
                "i": [
                    1088,
                    1090,
                    597,
                    602,
                    603,
                    605,
                    1086,
                    1087
                ],
                "obj": [
                    597,
                    600,
                    601,
                    602,
                    603
                ],
                "enumerate": [
                    597
                ],
                "obj.closed": [
                    601
                ],
                "obj.left": [
                    602
                ],
                "obj.right": [
                    603
                ],
                "self.__eq__": [
                    610
                ],
                "method": [
                    639
                ],
                "limit": [
                    641
                ],
                "getattr": [
                    651
                ],
                "self.left.fillna": [
                    654
                ],
                "self.right.fillna": [
                    655
                ],
                "IntervalDtype": [
                    660
                ],
                "self.left.dtype": [
                    660
                ],
                "property": [
                    1030,
                    939,
                    658,
                    947,
                    757,
                    1014,
                    761,
                    1050,
                    955
                ],
                "self.copy": [
                    768,
                    684
                ],
                "new_left": [
                    688,
                    695
                ],
                "self.left.astype": [
                    688
                ],
                "new_right": [
                    689,
                    695
                ],
                "self.right.astype": [
                    689
                ],
                "Categorical": [
                    697
                ],
                "astype": [
                    700
                ],
                "interval.closed": [
                    718
                ],
                "interval": [
                    723,
                    724,
                    718
                ],
                "to_concat": [
                    723,
                    724,
                    718
                ],
                "closed.pop": [
                    721
                ],
                "np.concatenate": [
                    723,
                    724
                ],
                "interval.left": [
                    723
                ],
                "interval.right": [
                    724
                ],
                "self._simple_new": [
                    738
                ],
                "from_arrays": [
                    752
                ],
                "self.left.nbytes": [
                    759
                ],
                "self.right.nbytes": [
                    759
                ],
                "self.left.size": [
                    764
                ],
                "object": [
                    1085,
                    766
                ],
                "periods": [
                    778,
                    785,
                    787,
                    789,
                    767
                ],
                "fill_value": [
                    770,
                    771,
                    841,
                    779,
                    780,
                    781,
                    843,
                    783,
                    845,
                    846,
                    847,
                    848,
                    852
                ],
                "self.dtype.na_value": [
                    771
                ],
                "empty_len": [
                    778,
                    781,
                    783
                ],
                "min": [
                    908,
                    778,
                    892
                ],
                "abs": [
                    778,
                    789
                ],
                "self.left._na_value": [
                    780,
                    844
                ],
                "empty": [
                    786,
                    781,
                    790,
                    783
                ],
                "IntervalArray.from_breaks": [
                    781
                ],
                "self._from_sequence": [
                    783
                ],
                "a": [
                    786,
                    789,
                    791
                ],
                "b": [
                    787,
                    790,
                    791
                ],
                "self._concat_same_type": [
                    791
                ],
                "ABCExtensionArray": [
                    766
                ],
                "nv.validate_take": [
                    839
                ],
                "nv": [
                    1175,
                    839
                ],
                "tuple": [
                    1175,
                    1326,
                    839
                ],
                "kwargs": [
                    839
                ],
                "fill_left": [
                    857,
                    841,
                    844,
                    847
                ],
                "fill_right": [
                    841,
                    844,
                    860,
                    847
                ],
                "allow_fill": [
                    857,
                    842,
                    860
                ],
                "is_interval": [
                    845
                ],
                "fill_value.left": [
                    847
                ],
                "fill_value.right": [
                    847
                ],
                "left_take": [
                    856,
                    863
                ],
                "take": [
                    856,
                    859
                ],
                "indices": [
                    857,
                    860
                ],
                "right_take": [
                    859,
                    863
                ],
                "value_counts": [
                    883
                ],
                "dropna": [
                    883
                ],
                "n": [
                    896,
                    898,
                    901,
                    907,
                    908,
                    909,
                    910,
                    891,
                    892
                ],
                "max_seq_items": [
                    908,
                    907,
                    892
                ],
                "get_option": [
                    892
                ],
                "formatter": [
                    899,
                    902,
                    903,
                    909,
                    910,
                    915,
                    894
                ],
                "summary": [
                    897,
                    900,
                    904,
                    913,
                    917,
                    919
                ],
                "first": [
                    904,
                    899,
                    900,
                    902
                ],
                "last": [
                    904,
                    903
                ],
                "head": [
                    909,
                    911
                ],
                "x": [
                    915,
                    909,
                    910
                ],
                "tail": [
                    912,
                    915,
                    916,
                    910
                ],
                "head_str": [
                    913,
                    911
                ],
                "join": [
                    912,
                    916,
                    911
                ],
                "tail_str": [
                    912,
                    913,
                    916,
                    917
                ],
                "self._format_data": [
                    925
                ],
                "class_name": [
                    929,
                    926
                ],
                "template": [
                    928,
                    933
                ],
                "space": [
                    936,
                    937
                ],
                "self._closed": [
                    961,
                    1083
                ],
                "_simple_new": [
                    1010
                ],
                "self.length": [
                    1039
                ],
                "mask": [
                    1082,
                    1115,
                    1116,
                    1118,
                    1087
                ],
                "self.isna": [
                    1082,
                    1115,
                    1170
                ],
                "np.empty": [
                    1085
                ],
                "range": [
                    1086
                ],
                "np.ndarray": [
                    1075
                ],
                "subtype": [
                    1107,
                    1101,
                    1110,
                    1111
                ],
                "pyarrow.from_numpy_dtype": [
                    1101
                ],
                "pyarrow": [
                    1101,
                    1108,
                    1110,
                    1111,
                    1142,
                    1118,
                    1119
                ],
                "interval_type": [
                    1131,
                    1107,
                    1142,
                    1127
                ],
                "ArrowIntervalType": [
                    1129,
                    1107
                ],
                "storage_array": [
                    1120,
                    1121,
                    1123,
                    1128,
                    1108,
                    1142,
                    1119
                ],
                "pyarrow.StructArray.from_arrays": [
                    1108
                ],
                "pyarrow.StructArray": [
                    1108,
                    1119
                ],
                "pyarrow.array": [
                    1118,
                    1110,
                    1111
                ],
                "mask.any": [
                    1116
                ],
                "null_bitmap": [
                    1122,
                    1118
                ],
                "buffers": [
                    1118
                ],
                "pyarrow.StructArray.from_buffers": [
                    1119
                ],
                "storage_array.type": [
                    1120
                ],
                "storage_array.field": [
                    1123
                ],
                "type.equals": [
                    1131,
                    1127
                ],
                "interval_type.storage_type": [
                    1127
                ],
                "type.subtype": [
                    1134
                ],
                "type.closed": [
                    1135
                ],
                "pyarrow.ExtensionArray.from_storage": [
                    1142
                ],
                "pyarrow.ExtensionArray": [
                    1142
                ],
                "tuples": [
                    1170,
                    1171,
                    1167
                ],
                "com.asarray_tuplesafe": [
                    1167
                ],
                "com": [
                    1167
                ],
                "zip": [
                    1167
                ],
                "na_tuple": [
                    1168
                ],
                "np.where": [
                    1170
                ],
                "nv.validate_repeat": [
                    1175
                ],
                "axis": [
                    1175
                ],
                "left_repeat": [
                    1176,
                    1178
                ],
                "self.left.repeat": [
                    1176
                ],
                "repeats": [
                    1176,
                    1177
                ],
                "right_repeat": [
                    1177,
                    1178
                ],
                "self.right.repeat": [
                    1177
                ],
                "_extension_array_shared_docs": [
                    1173
                ],
                "NotImplementedError": [
                    1229,
                    1295
                ],
                "self.open_left": [
                    1231
                ],
                "self.open_right": [
                    1232
                ],
                "op1": [
                    1307,
                    1301
                ],
                "self.closed_left": [
                    1301
                ],
                "other.closed_right": [
                    1301
                ],
                "le": [
                    1301,
                    1302
                ],
                "lt": [
                    1301,
                    1302
                ],
                "op2": [
                    1307,
                    1302
                ],
                "other.closed_left": [
                    1302
                ],
                "self.closed_right": [
                    1302
                ],
                "list": [
                    1326
                ],
                "np.array": [
                    1330
                ],
                "np.int64": [
                    1330
                ],
                "maybe_convert_platform": [
                    1334
                ]
            },
            "filtered_variables_in_file": {
                "_VALID_CLOSED": [
                    472,
                    46,
                    1006
                ],
                "_interval_shared_docs": [
                    256,
                    384,
                    1164,
                    1041,
                    1180,
                    1052,
                    290,
                    420,
                    47,
                    310,
                    54,
                    1213,
                    963,
                    1235,
                    985,
                    363,
                    120,
                    1144,
                    1278
                ],
                "_shared_docs_kwargs": [
                    49,
                    1052,
                    1173
                ],
                "IntervalMixin": [
                    147,
                    191
                ],
                "ExtensionArray": [
                    147
                ],
                "ndim": [
                    148
                ],
                "can_hold_na": [
                    149
                ],
                "_na_value": [
                    150
                ],
                "_fill_value": [
                    150
                ],
                "np.nan": [
                    1088,
                    1170,
                    444,
                    150
                ],
                "np": [
                    524,
                    527,
                    1170,
                    150,
                    1330,
                    1075,
                    1332,
                    568,
                    697,
                    700,
                    444,
                    1085,
                    1088,
                    582,
                    588,
                    593,
                    723,
                    596,
                    724,
                    494,
                    883,
                    508
                ],
                "data": [
                    160,
                    930,
                    164,
                    167,
                    172,
                    174,
                    925,
                    442,
                    436,
                    440,
                    154,
                    155,
                    157,
                    158,
                    159
                ],
                "ABCSeries": [
                    154
                ],
                "is_interval_dtype": [
                    580,
                    200,
                    586,
                    682,
                    531,
                    154
                ],
                "data._values": [
                    155
                ],
                "cls": [
                    446,
                    166,
                    459,
                    178,
                    308,
                    245,
                    725,
                    380,
                    157,
                    254,
                    191
                ],
                "ABCIntervalIndex": [
                    157,
                    1294
                ],
                "left": [
                    513,
                    654,
                    656,
                    158,
                    548,
                    550,
                    551,
                    552,
                    173,
                    179,
                    437,
                    440,
                    1080,
                    1085,
                    1086,
                    194,
                    1090,
                    456,
                    459,
                    204,
                    208,
                    209,
                    210,
                    211,
                    723,
                    213,
                    725,
                    215,
                    219,
                    226,
                    738,
                    229,
                    232,
                    236,
                    505,
                    748,
                    752,
                    501,
                    377,
                    506,
                    508,
                    381,
                    511
                ],
                "data.left": [
                    158
                ],
                "right": [
                    513,
                    655,
                    656,
                    159,
                    554,
                    556,
                    173,
                    557,
                    558,
                    180,
                    437,
                    440,
                    1081,
                    1090,
                    195,
                    457,
                    459,
                    205,
                    208,
                    209,
                    210,
                    211,
                    724,
                    213,
                    725,
                    216,
                    738,
                    229,
                    232,
                    237,
                    749,
                    752,
                    502,
                    378,
                    381,
                    511
                ],
                "data.right": [
                    159
                ],
                "closed": [
                    160,
                    174,
                    176,
                    308,
                    181,
                    1083,
                    193,
                    1090,
                    459,
                    718,
                    719,
                    721,
                    725,
                    1006,
                    1007,
                    238,
                    750,
                    752,
                    1011,
                    381
                ],
                "data.closed": [
                    160
                ],
                "is_scalar": [
                    848,
                    506,
                    164,
                    518
                ],
                "msg": [
                    1024,
                    1028,
                    645,
                    649,
                    1297,
                    1298,
                    542,
                    543,
                    165,
                    169,
                    691,
                    694,
                    702,
                    703,
                    451,
                    452,
                    454,
                    455,
                    201,
                    202,
                    849,
                    214,
                    854,
                    473,
                    474,
                    218,
                    476,
                    221,
                    477,
                    225,
                    481,
                    227,
                    228,
                    485,
                    230,
                    487,
                    488,
                    234,
                    1007,
                    1008
                ],
                "cls.__name__": [
                    446,
                    166
                ],
                "maybe_convert_platform_interval": [
                    377,
                    306,
                    172,
                    378
                ],
                "infer_closed": [
                    176,
                    173
                ],
                "intervals_to_interval_bounds": [
                    173
                ],
                "cls._simple_new": [
                    178,
                    380,
                    725
                ],
                "copy": [
                    194,
                    195,
                    684,
                    308,
                    245,
                    182,
                    700,
                    381
                ],
                "dtype": [
                    681,
                    682,
                    683,
                    688,
                    689,
                    308,
                    692,
                    183,
                    696,
                    700,
                    702,
                    197,
                    199,
                    200,
                    201,
                    203,
                    204,
                    205,
                    459,
                    245,
                    381
                ],
                "verify_integrity": [
                    184,
                    239
                ],
                "result": [
                    1088,
                    1090,
                    1091,
                    236,
                    237,
                    238,
                    607,
                    240,
                    241,
                    1085,
                    596,
                    605,
                    191
                ],
                "IntervalMixin.__new__": [
                    191
                ],
                "ensure_index": [
                    194,
                    195
                ],
                "pandas_dtype": [
                    681,
                    199
                ],
                "dtype.subtype": [
                    203,
                    204,
                    205,
                    688,
                    689
                ],
                "left.astype": [
                    211,
                    204,
                    550
                ],
                "right.astype": [
                    209,
                    556,
                    205
                ],
                "is_float_dtype": [
                    208,
                    210
                ],
                "is_integer_dtype": [
                    208,
                    210,
                    519
                ],
                "left.dtype": [
                    209,
                    219
                ],
                "right.dtype": [
                    211
                ],
                "is_categorical_dtype": [
                    696,
                    1331,
                    219,
                    573
                ],
                "is_string_dtype": [
                    219
                ],
                "ABCPeriodIndex": [
                    226
                ],
                "ABCDatetimeIndex": [
                    229
                ],
                "left.tz": [
                    232,
                    229
                ],
                "right.tz": [
                    232,
                    229
                ],
                "result._left": [
                    236
                ],
                "result._right": [
                    237
                ],
                "result._closed": [
                    238
                ],
                "result._validate": [
                    240
                ],
                "scalars": [
                    245
                ],
                "values": [
                    1326,
                    1331,
                    1332,
                    1334,
                    249,
                    253,
                    254
                ],
                "values.astype": [
                    253
                ],
                "original.dtype.subtype": [
                    253
                ],
                "original.dtype": [
                    253
                ],
                "original": [
                    253,
                    254
                ],
                "original.closed": [
                    254
                ],
                "textwrap.dedent": [
                    256,
                    384,
                    1216,
                    963,
                    1281,
                    293,
                    128,
                    423,
                    366,
                    1180,
                    1235,
                    310,
                    988
                ],
                "textwrap": [
                    256,
                    384,
                    1216,
                    963,
                    1281,
                    293,
                    128,
                    423,
                    366,
                    1180,
                    1235,
                    310,
                    988
                ],
                "breaks": [
                    306,
                    308
                ],
                "cls.from_arrays": [
                    459,
                    308
                ],
                "Appender": [
                    289,
                    419,
                    362,
                    1163,
                    1173,
                    119,
                    984,
                    1051,
                    1212,
                    1277
                ],
                "d": [
                    449,
                    451,
                    454,
                    442,
                    443
                ],
                "isna": [
                    770,
                    518,
                    779,
                    755,
                    506,
                    443
                ],
                "lhs": [
                    456,
                    449,
                    444
                ],
                "rhs": [
                    449,
                    444,
                    457
                ],
                "name": [
                    451,
                    454,
                    446
                ],
                "err": [
                    452,
                    1028,
                    455,
                    543,
                    1106,
                    694,
                    703
                ],
                "left.append": [
                    456
                ],
                "right.append": [
                    457
                ],
                "self.closed": [
                    738,
                    931,
                    581,
                    1061,
                    587,
                    750,
                    1135,
                    601,
                    1107,
                    472,
                    473,
                    511
                ],
                "self": [
                    513,
                    519,
                    522,
                    1036,
                    525,
                    1039,
                    532,
                    545,
                    548,
                    1061,
                    1063,
                    552,
                    1064,
                    554,
                    558,
                    1070,
                    1071,
                    563,
                    568,
                    1080,
                    1081,
                    1082,
                    1083,
                    581,
                    582,
                    587,
                    588,
                    589,
                    1101,
                    1104,
                    593,
                    1107,
                    596,
                    1110,
                    1111,
                    601,
                    602,
                    603,
                    1115,
                    610,
                    1134,
                    1135,
                    652,
                    654,
                    655,
                    656,
                    1167,
                    1170,
                    660,
                    1176,
                    1177,
                    1178,
                    683,
                    684,
                    688,
                    689,
                    692,
                    695,
                    697,
                    700,
                    702,
                    1231,
                    1232,
                    738,
                    748,
                    749,
                    750,
                    752,
                    755,
                    759,
                    764,
                    767,
                    768,
                    771,
                    778,
                    780,
                    783,
                    787,
                    789,
                    1301,
                    791,
                    1302,
                    1307,
                    844,
                    846,
                    857,
                    860,
                    863,
                    883,
                    891,
                    899,
                    902,
                    903,
                    909,
                    910,
                    915,
                    925,
                    926,
                    931,
                    936,
                    945,
                    953,
                    961,
                    472,
                    473,
                    475,
                    478,
                    479,
                    486,
                    494,
                    497,
                    1010,
                    1011,
                    500,
                    501,
                    502,
                    507,
                    1021,
                    511
                ],
                "self.left": [
                    780,
                    1036,
                    654,
                    1039,
                    1167,
                    660,
                    1176,
                    1307,
                    548,
                    1063,
                    1064,
                    1070,
                    1071,
                    688,
                    1080,
                    844,
                    589,
                    1231,
                    1110,
                    857,
                    602,
                    475,
                    478,
                    486,
                    748,
                    497,
                    755,
                    1011,
                    501,
                    759,
                    764,
                    1021
                ],
                "self.right": [
                    1036,
                    655,
                    1167,
                    1177,
                    1307,
                    1063,
                    1064,
                    554,
                    1070,
                    1071,
                    689,
                    1081,
                    589,
                    1232,
                    1111,
                    603,
                    475,
                    860,
                    479,
                    486,
                    749,
                    1011,
                    502,
                    759,
                    1021
                ],
                "left_mask": [
                    480,
                    478,
                    486
                ],
                "notna": [
                    848,
                    478,
                    479
                ],
                "right_mask": [
                    480,
                    479
                ],
                "np.asarray": [
                    494,
                    883,
                    1332,
                    697,
                    700
                ],
                "value": [
                    644,
                    518,
                    647,
                    651,
                    524,
                    652,
                    654,
                    527,
                    528,
                    655,
                    531,
                    500,
                    501,
                    502,
                    532,
                    533,
                    538,
                    542
                ],
                "check_array_indexer": [
                    545,
                    500
                ],
                "ABCIndexClass": [
                    505
                ],
                "self._fill_value": [
                    507
                ],
                "np.ndim": [
                    508
                ],
                "Interval": [
                    1090,
                    644,
                    1228,
                    1296,
                    531,
                    566,
                    600,
                    571,
                    511
                ],
                "self._shallow_copy": [
                    513,
                    656,
                    695,
                    1178,
                    863
                ],
                "needs_float_conversion": [
                    521,
                    549,
                    517,
                    555
                ],
                "self.dtype.subtype": [
                    519,
                    522,
                    1101,
                    525,
                    1134,
                    1104
                ],
                "self.dtype": [
                    771,
                    931,
                    519,
                    522,
                    683,
                    525,
                    1101,
                    1134,
                    1104,
                    692
                ],
                "is_datetime64_any_dtype": [
                    522
                ],
                "np.datetime64": [
                    524
                ],
                "is_timedelta64_dtype": [
                    525
                ],
                "np.timedelta64": [
                    527
                ],
                "value_left": [
                    528,
                    539,
                    533,
                    551
                ],
                "value_right": [
                    528,
                    557,
                    539,
                    533
                ],
                "self._check_closed_matches": [
                    652,
                    532,
                    846
                ],
                "value.left": [
                    533,
                    654
                ],
                "value.right": [
                    533,
                    655
                ],
                "array": [
                    538,
                    539,
                    565
                ],
                "IntervalArray": [
                    538,
                    781,
                    1294
                ],
                "array.left": [
                    539
                ],
                "array.right": [
                    539
                ],
                "key": [
                    545,
                    557,
                    551
                ],
                "self.left.copy": [
                    548,
                    748
                ],
                "left.values": [
                    551
                ],
                "self._left": [
                    552,
                    945
                ],
                "self.right.copy": [
                    554,
                    749
                ],
                "right.values": [
                    557
                ],
                "self._right": [
                    953,
                    558
                ],
                "is_list_like": [
                    562
                ],
                "other": [
                    1294,
                    1296,
                    1297,
                    1301,
                    1302,
                    1307,
                    562,
                    563,
                    565,
                    566,
                    571,
                    573,
                    574,
                    577,
                    581,
                    583,
                    587,
                    1228,
                    589,
                    1231,
                    1232,
                    597,
                    610
                ],
                "np.zeros": [
                    582,
                    588,
                    593,
                    596,
                    568
                ],
                "other_dtype": [
                    577,
                    580,
                    586,
                    592,
                    572,
                    574
                ],
                "other.dtype": [
                    574
                ],
                "other.categories.dtype": [
                    577
                ],
                "other.categories": [
                    577,
                    581,
                    583
                ],
                "other.categories.closed": [
                    581
                ],
                "other.categories.take": [
                    583
                ],
                "other.codes": [
                    583
                ],
                "other.closed": [
                    587
                ],
                "other.left": [
                    1307,
                    589
                ],
                "other.right": [
                    1307,
                    589
                ],
                "is_object_dtype": [
                    592
                ],
                "i": [
                    1088,
                    1090,
                    597,
                    602,
                    603,
                    605,
                    1086,
                    1087
                ],
                "obj": [
                    597,
                    600,
                    601,
                    602,
                    603
                ],
                "obj.closed": [
                    601
                ],
                "obj.left": [
                    602
                ],
                "obj.right": [
                    603
                ],
                "self.__eq__": [
                    610
                ],
                "method": [
                    639
                ],
                "limit": [
                    641
                ],
                "self.left.fillna": [
                    654
                ],
                "self.right.fillna": [
                    655
                ],
                "IntervalDtype": [
                    660
                ],
                "self.left.dtype": [
                    660
                ],
                "self.copy": [
                    768,
                    684
                ],
                "new_left": [
                    688,
                    695
                ],
                "self.left.astype": [
                    688
                ],
                "new_right": [
                    689,
                    695
                ],
                "self.right.astype": [
                    689
                ],
                "Categorical": [
                    697
                ],
                "astype": [
                    700
                ],
                "interval.closed": [
                    718
                ],
                "interval": [
                    723,
                    724,
                    718
                ],
                "to_concat": [
                    723,
                    724,
                    718
                ],
                "closed.pop": [
                    721
                ],
                "np.concatenate": [
                    723,
                    724
                ],
                "interval.left": [
                    723
                ],
                "interval.right": [
                    724
                ],
                "self._simple_new": [
                    738
                ],
                "from_arrays": [
                    752
                ],
                "self.left.nbytes": [
                    759
                ],
                "self.right.nbytes": [
                    759
                ],
                "self.left.size": [
                    764
                ],
                "periods": [
                    778,
                    785,
                    787,
                    789,
                    767
                ],
                "fill_value": [
                    770,
                    771,
                    841,
                    779,
                    780,
                    781,
                    843,
                    783,
                    845,
                    846,
                    847,
                    848,
                    852
                ],
                "self.dtype.na_value": [
                    771
                ],
                "empty_len": [
                    778,
                    781,
                    783
                ],
                "self.left._na_value": [
                    780,
                    844
                ],
                "empty": [
                    786,
                    781,
                    790,
                    783
                ],
                "IntervalArray.from_breaks": [
                    781
                ],
                "self._from_sequence": [
                    783
                ],
                "a": [
                    786,
                    789,
                    791
                ],
                "b": [
                    787,
                    790,
                    791
                ],
                "self._concat_same_type": [
                    791
                ],
                "ABCExtensionArray": [
                    766
                ],
                "nv.validate_take": [
                    839
                ],
                "nv": [
                    1175,
                    839
                ],
                "kwargs": [
                    839
                ],
                "fill_left": [
                    857,
                    841,
                    844,
                    847
                ],
                "fill_right": [
                    841,
                    844,
                    860,
                    847
                ],
                "allow_fill": [
                    857,
                    842,
                    860
                ],
                "is_interval": [
                    845
                ],
                "fill_value.left": [
                    847
                ],
                "fill_value.right": [
                    847
                ],
                "left_take": [
                    856,
                    863
                ],
                "take": [
                    856,
                    859
                ],
                "indices": [
                    857,
                    860
                ],
                "right_take": [
                    859,
                    863
                ],
                "value_counts": [
                    883
                ],
                "dropna": [
                    883
                ],
                "n": [
                    896,
                    898,
                    901,
                    907,
                    908,
                    909,
                    910,
                    891,
                    892
                ],
                "max_seq_items": [
                    908,
                    907,
                    892
                ],
                "get_option": [
                    892
                ],
                "formatter": [
                    899,
                    902,
                    903,
                    909,
                    910,
                    915,
                    894
                ],
                "summary": [
                    897,
                    900,
                    904,
                    913,
                    917,
                    919
                ],
                "first": [
                    904,
                    899,
                    900,
                    902
                ],
                "last": [
                    904,
                    903
                ],
                "head": [
                    909,
                    911
                ],
                "x": [
                    915,
                    909,
                    910
                ],
                "tail": [
                    912,
                    915,
                    916,
                    910
                ],
                "head_str": [
                    913,
                    911
                ],
                "join": [
                    912,
                    916,
                    911
                ],
                "tail_str": [
                    912,
                    913,
                    916,
                    917
                ],
                "self._format_data": [
                    925
                ],
                "class_name": [
                    929,
                    926
                ],
                "template": [
                    928,
                    933
                ],
                "space": [
                    936,
                    937
                ],
                "self._closed": [
                    961,
                    1083
                ],
                "_simple_new": [
                    1010
                ],
                "self.length": [
                    1039
                ],
                "mask": [
                    1082,
                    1115,
                    1116,
                    1118,
                    1087
                ],
                "self.isna": [
                    1082,
                    1115,
                    1170
                ],
                "np.empty": [
                    1085
                ],
                "np.ndarray": [
                    1075
                ],
                "subtype": [
                    1107,
                    1101,
                    1110,
                    1111
                ],
                "pyarrow.from_numpy_dtype": [
                    1101
                ],
                "pyarrow": [
                    1101,
                    1108,
                    1110,
                    1111,
                    1142,
                    1118,
                    1119
                ],
                "interval_type": [
                    1131,
                    1107,
                    1142,
                    1127
                ],
                "ArrowIntervalType": [
                    1129,
                    1107
                ],
                "storage_array": [
                    1120,
                    1121,
                    1123,
                    1128,
                    1108,
                    1142,
                    1119
                ],
                "pyarrow.StructArray.from_arrays": [
                    1108
                ],
                "pyarrow.StructArray": [
                    1108,
                    1119
                ],
                "pyarrow.array": [
                    1118,
                    1110,
                    1111
                ],
                "mask.any": [
                    1116
                ],
                "null_bitmap": [
                    1122,
                    1118
                ],
                "buffers": [
                    1118
                ],
                "pyarrow.StructArray.from_buffers": [
                    1119
                ],
                "storage_array.type": [
                    1120
                ],
                "storage_array.field": [
                    1123
                ],
                "type.equals": [
                    1131,
                    1127
                ],
                "interval_type.storage_type": [
                    1127
                ],
                "type.subtype": [
                    1134
                ],
                "type.closed": [
                    1135
                ],
                "pyarrow.ExtensionArray.from_storage": [
                    1142
                ],
                "pyarrow.ExtensionArray": [
                    1142
                ],
                "tuples": [
                    1170,
                    1171,
                    1167
                ],
                "com.asarray_tuplesafe": [
                    1167
                ],
                "com": [
                    1167
                ],
                "na_tuple": [
                    1168
                ],
                "np.where": [
                    1170
                ],
                "nv.validate_repeat": [
                    1175
                ],
                "axis": [
                    1175
                ],
                "left_repeat": [
                    1176,
                    1178
                ],
                "self.left.repeat": [
                    1176
                ],
                "repeats": [
                    1176,
                    1177
                ],
                "right_repeat": [
                    1177,
                    1178
                ],
                "self.right.repeat": [
                    1177
                ],
                "_extension_array_shared_docs": [
                    1173
                ],
                "self.open_left": [
                    1231
                ],
                "self.open_right": [
                    1232
                ],
                "op1": [
                    1307,
                    1301
                ],
                "self.closed_left": [
                    1301
                ],
                "other.closed_right": [
                    1301
                ],
                "le": [
                    1301,
                    1302
                ],
                "lt": [
                    1301,
                    1302
                ],
                "op2": [
                    1307,
                    1302
                ],
                "other.closed_left": [
                    1302
                ],
                "self.closed_right": [
                    1302
                ],
                "np.array": [
                    1330
                ],
                "np.int64": [
                    1330
                ],
                "maybe_convert_platform": [
                    1334
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/tests/arrays/interval/test_interval.py",
                "test_function": "test_set_na",
                "test_function_code": "    def test_set_na(self, left_right_dtypes):\n        left, right = left_right_dtypes\n        result = IntervalArray.from_arrays(left, right)\n\n        if result.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                result[0] = np.NaN\n            return\n\n        result[0] = np.nan\n\n        expected_left = Index([left._na_value] + list(left[1:]))\n        expected_right = Index([right._na_value] + list(right[1:]))\n        expected = IntervalArray.from_arrays(expected_left, expected_right)\n\n        tm.assert_extension_array_equal(result, expected)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.arrays.interval.test_interval.TestSetitem object at 0x10f8bf280>\nleft_right_dtypes = (Int64Index([0, 2, 4], dtype='int64'), Int64Index([1, 3, 5], dtype='int64'))\n\n    def test_set_na(self, left_right_dtypes):\n        left, right = left_right_dtypes\n        result = IntervalArray.from_arrays(left, right)\n    \n        if result.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n>               result[0] = np.NaN\nE               Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/arrays/interval/test_interval.py:111: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/tests/series/methods/test_convert_dtypes.py",
                "test_function": "test_convert_dtypes",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n\n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n\n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                ns[ns.notna()] = np.nan\n        else:\n            ns[ns.notna()] = np.nan\n\n        # Make sure original not changed\n        tm.assert_series_equal(series, copy)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x10fa83a60>\ndata = <IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]\nmaindtype = None, params = (True, True, True, True)\nanswerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}\n\n    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n    \n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n    \n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n>               ns[ns.notna()] = np.nan\nE               Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/series/methods/test_convert_dtypes.py:274: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('data, maindtype, answerdict', [([1, 2, 3], np.dtype('int32'), {((True, False), (True, False), (True,), (True, False)): 'Int32', ((True, False), (True, False), (False,), (True, False)): np.dtype('int32')}), ([1, 2, 3], np.dtype('int64'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('int64')}), (['x', 'y', 'z'], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), ([True, False, np.nan], np.dtype('O'), {((True, False), (True, False), (True, False), (True,)): pd.BooleanDtype(), ((True, False), (True, False), (True, False), (False,)): np.dtype('O')}), (['h', 'i', np.nan], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), (['h', 'i', 1], np.dtype('O'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([10, np.nan, 20], np.dtype('float'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('float')}), ([np.nan, 100.5, 200], np.dtype('float'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('float')}), ([3, 4, 5], 'Int8', {((True, False), (True, False), (True, False), (True, False)): 'Int8'}), ([[1, 2], [3, 4], [5]], None, {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([4, 5, 6], np.dtype('uint32'), {((True, False), (True, False), (True,), (True, False)): 'UInt32', ((True, False), (True, False), (False,), (True, False)): np.dtype('uint32')}), ([-10, 12, 13], np.dtype('i1'), {((True, False), (True, False), (True,), (True, False)): 'Int8', ((True, False), (True, False), (False,), (True, False)): np.dtype('i1')}), ([1, 2.0], object, {((True,), (True, False), (True,), (True, False)): 'Int64', ((True,), (True, False), (False,), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), ([1, 2.5], object, {((True,), (True, False), (True, False), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), (['a', 'b'], pd.CategoricalDtype(), {((True, False), (True, False), (True, False), (True, False)): pd.CategoricalDtype()}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), pd.DatetimeTZDtype(tz='UTC'), {((True, False), (True, False), (True, False), (True, False)): pd.DatetimeTZDtype(tz='UTC')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), 'datetime64[ns]', {((True, False), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), object, {((True,), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]'), ((False,), (True, False), (True, False), (True, False)): np.dtype('O')}), (pd.period_range('1/1/2011', freq='M', periods=3), None, {((True, False), (True, False), (True, False), (True, False)): pd.PeriodDtype('M')}), (pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]), None, {((True, False), (True, False), (True, False), (True, False)): pd.IntervalDtype('int64')})])",
                    "pytest.mark.parametrize('params', product(*[(True, False)] * 4))"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/tests/series/methods/test_convert_dtypes.py",
                "test_function": "test_convert_dtypes",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n\n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n\n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                ns[ns.notna()] = np.nan\n        else:\n            ns[ns.notna()] = np.nan\n\n        # Make sure original not changed\n        tm.assert_series_equal(series, copy)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x10fb5d160>\ndata = <IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]\nmaindtype = None, params = (True, True, True, False)\nanswerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}\n\n    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n    \n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n    \n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n>               ns[ns.notna()] = np.nan\nE               Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/series/methods/test_convert_dtypes.py:274: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('data, maindtype, answerdict', [([1, 2, 3], np.dtype('int32'), {((True, False), (True, False), (True,), (True, False)): 'Int32', ((True, False), (True, False), (False,), (True, False)): np.dtype('int32')}), ([1, 2, 3], np.dtype('int64'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('int64')}), (['x', 'y', 'z'], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), ([True, False, np.nan], np.dtype('O'), {((True, False), (True, False), (True, False), (True,)): pd.BooleanDtype(), ((True, False), (True, False), (True, False), (False,)): np.dtype('O')}), (['h', 'i', np.nan], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), (['h', 'i', 1], np.dtype('O'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([10, np.nan, 20], np.dtype('float'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('float')}), ([np.nan, 100.5, 200], np.dtype('float'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('float')}), ([3, 4, 5], 'Int8', {((True, False), (True, False), (True, False), (True, False)): 'Int8'}), ([[1, 2], [3, 4], [5]], None, {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([4, 5, 6], np.dtype('uint32'), {((True, False), (True, False), (True,), (True, False)): 'UInt32', ((True, False), (True, False), (False,), (True, False)): np.dtype('uint32')}), ([-10, 12, 13], np.dtype('i1'), {((True, False), (True, False), (True,), (True, False)): 'Int8', ((True, False), (True, False), (False,), (True, False)): np.dtype('i1')}), ([1, 2.0], object, {((True,), (True, False), (True,), (True, False)): 'Int64', ((True,), (True, False), (False,), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), ([1, 2.5], object, {((True,), (True, False), (True, False), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), (['a', 'b'], pd.CategoricalDtype(), {((True, False), (True, False), (True, False), (True, False)): pd.CategoricalDtype()}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), pd.DatetimeTZDtype(tz='UTC'), {((True, False), (True, False), (True, False), (True, False)): pd.DatetimeTZDtype(tz='UTC')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), 'datetime64[ns]', {((True, False), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), object, {((True,), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]'), ((False,), (True, False), (True, False), (True, False)): np.dtype('O')}), (pd.period_range('1/1/2011', freq='M', periods=3), None, {((True, False), (True, False), (True, False), (True, False)): pd.PeriodDtype('M')}), (pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]), None, {((True, False), (True, False), (True, False), (True, False)): pd.IntervalDtype('int64')})])",
                    "pytest.mark.parametrize('params', product(*[(True, False)] * 4))"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/tests/series/methods/test_convert_dtypes.py",
                "test_function": "test_convert_dtypes",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n\n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n\n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                ns[ns.notna()] = np.nan\n        else:\n            ns[ns.notna()] = np.nan\n\n        # Make sure original not changed\n        tm.assert_series_equal(series, copy)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x10fb74ee0>\ndata = <IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]\nmaindtype = None, params = (True, True, False, True)\nanswerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}\n\n    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n    \n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n    \n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n>               ns[ns.notna()] = np.nan\nE               Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/series/methods/test_convert_dtypes.py:274: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('data, maindtype, answerdict', [([1, 2, 3], np.dtype('int32'), {((True, False), (True, False), (True,), (True, False)): 'Int32', ((True, False), (True, False), (False,), (True, False)): np.dtype('int32')}), ([1, 2, 3], np.dtype('int64'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('int64')}), (['x', 'y', 'z'], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), ([True, False, np.nan], np.dtype('O'), {((True, False), (True, False), (True, False), (True,)): pd.BooleanDtype(), ((True, False), (True, False), (True, False), (False,)): np.dtype('O')}), (['h', 'i', np.nan], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), (['h', 'i', 1], np.dtype('O'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([10, np.nan, 20], np.dtype('float'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('float')}), ([np.nan, 100.5, 200], np.dtype('float'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('float')}), ([3, 4, 5], 'Int8', {((True, False), (True, False), (True, False), (True, False)): 'Int8'}), ([[1, 2], [3, 4], [5]], None, {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([4, 5, 6], np.dtype('uint32'), {((True, False), (True, False), (True,), (True, False)): 'UInt32', ((True, False), (True, False), (False,), (True, False)): np.dtype('uint32')}), ([-10, 12, 13], np.dtype('i1'), {((True, False), (True, False), (True,), (True, False)): 'Int8', ((True, False), (True, False), (False,), (True, False)): np.dtype('i1')}), ([1, 2.0], object, {((True,), (True, False), (True,), (True, False)): 'Int64', ((True,), (True, False), (False,), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), ([1, 2.5], object, {((True,), (True, False), (True, False), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), (['a', 'b'], pd.CategoricalDtype(), {((True, False), (True, False), (True, False), (True, False)): pd.CategoricalDtype()}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), pd.DatetimeTZDtype(tz='UTC'), {((True, False), (True, False), (True, False), (True, False)): pd.DatetimeTZDtype(tz='UTC')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), 'datetime64[ns]', {((True, False), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), object, {((True,), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]'), ((False,), (True, False), (True, False), (True, False)): np.dtype('O')}), (pd.period_range('1/1/2011', freq='M', periods=3), None, {((True, False), (True, False), (True, False), (True, False)): pd.PeriodDtype('M')}), (pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]), None, {((True, False), (True, False), (True, False), (True, False)): pd.IntervalDtype('int64')})])",
                    "pytest.mark.parametrize('params', product(*[(True, False)] * 4))"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/tests/series/methods/test_convert_dtypes.py",
                "test_function": "test_convert_dtypes",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n\n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n\n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                ns[ns.notna()] = np.nan\n        else:\n            ns[ns.notna()] = np.nan\n\n        # Make sure original not changed\n        tm.assert_series_equal(series, copy)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x10fbab0a0>\ndata = <IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]\nmaindtype = None, params = (True, True, False, False)\nanswerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}\n\n    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n    \n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n    \n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n>               ns[ns.notna()] = np.nan\nE               Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/series/methods/test_convert_dtypes.py:274: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('data, maindtype, answerdict', [([1, 2, 3], np.dtype('int32'), {((True, False), (True, False), (True,), (True, False)): 'Int32', ((True, False), (True, False), (False,), (True, False)): np.dtype('int32')}), ([1, 2, 3], np.dtype('int64'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('int64')}), (['x', 'y', 'z'], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), ([True, False, np.nan], np.dtype('O'), {((True, False), (True, False), (True, False), (True,)): pd.BooleanDtype(), ((True, False), (True, False), (True, False), (False,)): np.dtype('O')}), (['h', 'i', np.nan], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), (['h', 'i', 1], np.dtype('O'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([10, np.nan, 20], np.dtype('float'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('float')}), ([np.nan, 100.5, 200], np.dtype('float'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('float')}), ([3, 4, 5], 'Int8', {((True, False), (True, False), (True, False), (True, False)): 'Int8'}), ([[1, 2], [3, 4], [5]], None, {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([4, 5, 6], np.dtype('uint32'), {((True, False), (True, False), (True,), (True, False)): 'UInt32', ((True, False), (True, False), (False,), (True, False)): np.dtype('uint32')}), ([-10, 12, 13], np.dtype('i1'), {((True, False), (True, False), (True,), (True, False)): 'Int8', ((True, False), (True, False), (False,), (True, False)): np.dtype('i1')}), ([1, 2.0], object, {((True,), (True, False), (True,), (True, False)): 'Int64', ((True,), (True, False), (False,), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), ([1, 2.5], object, {((True,), (True, False), (True, False), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), (['a', 'b'], pd.CategoricalDtype(), {((True, False), (True, False), (True, False), (True, False)): pd.CategoricalDtype()}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), pd.DatetimeTZDtype(tz='UTC'), {((True, False), (True, False), (True, False), (True, False)): pd.DatetimeTZDtype(tz='UTC')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), 'datetime64[ns]', {((True, False), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), object, {((True,), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]'), ((False,), (True, False), (True, False), (True, False)): np.dtype('O')}), (pd.period_range('1/1/2011', freq='M', periods=3), None, {((True, False), (True, False), (True, False), (True, False)): pd.PeriodDtype('M')}), (pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]), None, {((True, False), (True, False), (True, False), (True, False)): pd.IntervalDtype('int64')})])",
                    "pytest.mark.parametrize('params', product(*[(True, False)] * 4))"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/tests/series/methods/test_convert_dtypes.py",
                "test_function": "test_convert_dtypes",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n\n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n\n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                ns[ns.notna()] = np.nan\n        else:\n            ns[ns.notna()] = np.nan\n\n        # Make sure original not changed\n        tm.assert_series_equal(series, copy)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x10fb3f3d0>\ndata = <IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]\nmaindtype = None, params = (True, False, True, True)\nanswerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}\n\n    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n    \n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n    \n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n>               ns[ns.notna()] = np.nan\nE               Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/series/methods/test_convert_dtypes.py:274: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('data, maindtype, answerdict', [([1, 2, 3], np.dtype('int32'), {((True, False), (True, False), (True,), (True, False)): 'Int32', ((True, False), (True, False), (False,), (True, False)): np.dtype('int32')}), ([1, 2, 3], np.dtype('int64'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('int64')}), (['x', 'y', 'z'], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), ([True, False, np.nan], np.dtype('O'), {((True, False), (True, False), (True, False), (True,)): pd.BooleanDtype(), ((True, False), (True, False), (True, False), (False,)): np.dtype('O')}), (['h', 'i', np.nan], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), (['h', 'i', 1], np.dtype('O'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([10, np.nan, 20], np.dtype('float'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('float')}), ([np.nan, 100.5, 200], np.dtype('float'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('float')}), ([3, 4, 5], 'Int8', {((True, False), (True, False), (True, False), (True, False)): 'Int8'}), ([[1, 2], [3, 4], [5]], None, {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([4, 5, 6], np.dtype('uint32'), {((True, False), (True, False), (True,), (True, False)): 'UInt32', ((True, False), (True, False), (False,), (True, False)): np.dtype('uint32')}), ([-10, 12, 13], np.dtype('i1'), {((True, False), (True, False), (True,), (True, False)): 'Int8', ((True, False), (True, False), (False,), (True, False)): np.dtype('i1')}), ([1, 2.0], object, {((True,), (True, False), (True,), (True, False)): 'Int64', ((True,), (True, False), (False,), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), ([1, 2.5], object, {((True,), (True, False), (True, False), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), (['a', 'b'], pd.CategoricalDtype(), {((True, False), (True, False), (True, False), (True, False)): pd.CategoricalDtype()}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), pd.DatetimeTZDtype(tz='UTC'), {((True, False), (True, False), (True, False), (True, False)): pd.DatetimeTZDtype(tz='UTC')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), 'datetime64[ns]', {((True, False), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), object, {((True,), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]'), ((False,), (True, False), (True, False), (True, False)): np.dtype('O')}), (pd.period_range('1/1/2011', freq='M', periods=3), None, {((True, False), (True, False), (True, False), (True, False)): pd.PeriodDtype('M')}), (pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]), None, {((True, False), (True, False), (True, False), (True, False)): pd.IntervalDtype('int64')})])",
                    "pytest.mark.parametrize('params', product(*[(True, False)] * 4))"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/tests/series/methods/test_convert_dtypes.py",
                "test_function": "test_convert_dtypes",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n\n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n\n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                ns[ns.notna()] = np.nan\n        else:\n            ns[ns.notna()] = np.nan\n\n        # Make sure original not changed\n        tm.assert_series_equal(series, copy)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x10fbeb730>\ndata = <IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]\nmaindtype = None, params = (True, False, True, False)\nanswerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}\n\n    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n    \n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n    \n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n>               ns[ns.notna()] = np.nan\nE               Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/series/methods/test_convert_dtypes.py:274: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('data, maindtype, answerdict', [([1, 2, 3], np.dtype('int32'), {((True, False), (True, False), (True,), (True, False)): 'Int32', ((True, False), (True, False), (False,), (True, False)): np.dtype('int32')}), ([1, 2, 3], np.dtype('int64'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('int64')}), (['x', 'y', 'z'], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), ([True, False, np.nan], np.dtype('O'), {((True, False), (True, False), (True, False), (True,)): pd.BooleanDtype(), ((True, False), (True, False), (True, False), (False,)): np.dtype('O')}), (['h', 'i', np.nan], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), (['h', 'i', 1], np.dtype('O'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([10, np.nan, 20], np.dtype('float'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('float')}), ([np.nan, 100.5, 200], np.dtype('float'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('float')}), ([3, 4, 5], 'Int8', {((True, False), (True, False), (True, False), (True, False)): 'Int8'}), ([[1, 2], [3, 4], [5]], None, {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([4, 5, 6], np.dtype('uint32'), {((True, False), (True, False), (True,), (True, False)): 'UInt32', ((True, False), (True, False), (False,), (True, False)): np.dtype('uint32')}), ([-10, 12, 13], np.dtype('i1'), {((True, False), (True, False), (True,), (True, False)): 'Int8', ((True, False), (True, False), (False,), (True, False)): np.dtype('i1')}), ([1, 2.0], object, {((True,), (True, False), (True,), (True, False)): 'Int64', ((True,), (True, False), (False,), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), ([1, 2.5], object, {((True,), (True, False), (True, False), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), (['a', 'b'], pd.CategoricalDtype(), {((True, False), (True, False), (True, False), (True, False)): pd.CategoricalDtype()}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), pd.DatetimeTZDtype(tz='UTC'), {((True, False), (True, False), (True, False), (True, False)): pd.DatetimeTZDtype(tz='UTC')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), 'datetime64[ns]', {((True, False), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), object, {((True,), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]'), ((False,), (True, False), (True, False), (True, False)): np.dtype('O')}), (pd.period_range('1/1/2011', freq='M', periods=3), None, {((True, False), (True, False), (True, False), (True, False)): pd.PeriodDtype('M')}), (pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]), None, {((True, False), (True, False), (True, False), (True, False)): pd.IntervalDtype('int64')})])",
                    "pytest.mark.parametrize('params', product(*[(True, False)] * 4))"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/tests/series/methods/test_convert_dtypes.py",
                "test_function": "test_convert_dtypes",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n\n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n\n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                ns[ns.notna()] = np.nan\n        else:\n            ns[ns.notna()] = np.nan\n\n        # Make sure original not changed\n        tm.assert_series_equal(series, copy)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x10fbc5ca0>\ndata = <IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]\nmaindtype = None, params = (True, False, False, True)\nanswerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}\n\n    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n    \n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n    \n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n>               ns[ns.notna()] = np.nan\nE               Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/series/methods/test_convert_dtypes.py:274: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('data, maindtype, answerdict', [([1, 2, 3], np.dtype('int32'), {((True, False), (True, False), (True,), (True, False)): 'Int32', ((True, False), (True, False), (False,), (True, False)): np.dtype('int32')}), ([1, 2, 3], np.dtype('int64'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('int64')}), (['x', 'y', 'z'], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), ([True, False, np.nan], np.dtype('O'), {((True, False), (True, False), (True, False), (True,)): pd.BooleanDtype(), ((True, False), (True, False), (True, False), (False,)): np.dtype('O')}), (['h', 'i', np.nan], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), (['h', 'i', 1], np.dtype('O'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([10, np.nan, 20], np.dtype('float'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('float')}), ([np.nan, 100.5, 200], np.dtype('float'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('float')}), ([3, 4, 5], 'Int8', {((True, False), (True, False), (True, False), (True, False)): 'Int8'}), ([[1, 2], [3, 4], [5]], None, {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([4, 5, 6], np.dtype('uint32'), {((True, False), (True, False), (True,), (True, False)): 'UInt32', ((True, False), (True, False), (False,), (True, False)): np.dtype('uint32')}), ([-10, 12, 13], np.dtype('i1'), {((True, False), (True, False), (True,), (True, False)): 'Int8', ((True, False), (True, False), (False,), (True, False)): np.dtype('i1')}), ([1, 2.0], object, {((True,), (True, False), (True,), (True, False)): 'Int64', ((True,), (True, False), (False,), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), ([1, 2.5], object, {((True,), (True, False), (True, False), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), (['a', 'b'], pd.CategoricalDtype(), {((True, False), (True, False), (True, False), (True, False)): pd.CategoricalDtype()}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), pd.DatetimeTZDtype(tz='UTC'), {((True, False), (True, False), (True, False), (True, False)): pd.DatetimeTZDtype(tz='UTC')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), 'datetime64[ns]', {((True, False), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), object, {((True,), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]'), ((False,), (True, False), (True, False), (True, False)): np.dtype('O')}), (pd.period_range('1/1/2011', freq='M', periods=3), None, {((True, False), (True, False), (True, False), (True, False)): pd.PeriodDtype('M')}), (pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]), None, {((True, False), (True, False), (True, False), (True, False)): pd.IntervalDtype('int64')})])",
                    "pytest.mark.parametrize('params', product(*[(True, False)] * 4))"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/tests/series/methods/test_convert_dtypes.py",
                "test_function": "test_convert_dtypes",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n\n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n\n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                ns[ns.notna()] = np.nan\n        else:\n            ns[ns.notna()] = np.nan\n\n        # Make sure original not changed\n        tm.assert_series_equal(series, copy)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x10fc3de50>\ndata = <IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]\nmaindtype = None, params = (True, False, False, False)\nanswerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}\n\n    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n    \n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n    \n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n>               ns[ns.notna()] = np.nan\nE               Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/series/methods/test_convert_dtypes.py:274: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('data, maindtype, answerdict', [([1, 2, 3], np.dtype('int32'), {((True, False), (True, False), (True,), (True, False)): 'Int32', ((True, False), (True, False), (False,), (True, False)): np.dtype('int32')}), ([1, 2, 3], np.dtype('int64'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('int64')}), (['x', 'y', 'z'], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), ([True, False, np.nan], np.dtype('O'), {((True, False), (True, False), (True, False), (True,)): pd.BooleanDtype(), ((True, False), (True, False), (True, False), (False,)): np.dtype('O')}), (['h', 'i', np.nan], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), (['h', 'i', 1], np.dtype('O'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([10, np.nan, 20], np.dtype('float'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('float')}), ([np.nan, 100.5, 200], np.dtype('float'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('float')}), ([3, 4, 5], 'Int8', {((True, False), (True, False), (True, False), (True, False)): 'Int8'}), ([[1, 2], [3, 4], [5]], None, {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([4, 5, 6], np.dtype('uint32'), {((True, False), (True, False), (True,), (True, False)): 'UInt32', ((True, False), (True, False), (False,), (True, False)): np.dtype('uint32')}), ([-10, 12, 13], np.dtype('i1'), {((True, False), (True, False), (True,), (True, False)): 'Int8', ((True, False), (True, False), (False,), (True, False)): np.dtype('i1')}), ([1, 2.0], object, {((True,), (True, False), (True,), (True, False)): 'Int64', ((True,), (True, False), (False,), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), ([1, 2.5], object, {((True,), (True, False), (True, False), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), (['a', 'b'], pd.CategoricalDtype(), {((True, False), (True, False), (True, False), (True, False)): pd.CategoricalDtype()}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), pd.DatetimeTZDtype(tz='UTC'), {((True, False), (True, False), (True, False), (True, False)): pd.DatetimeTZDtype(tz='UTC')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), 'datetime64[ns]', {((True, False), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), object, {((True,), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]'), ((False,), (True, False), (True, False), (True, False)): np.dtype('O')}), (pd.period_range('1/1/2011', freq='M', periods=3), None, {((True, False), (True, False), (True, False), (True, False)): pd.PeriodDtype('M')}), (pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]), None, {((True, False), (True, False), (True, False), (True, False)): pd.IntervalDtype('int64')})])",
                    "pytest.mark.parametrize('params', product(*[(True, False)] * 4))"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/tests/series/methods/test_convert_dtypes.py",
                "test_function": "test_convert_dtypes",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n\n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n\n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                ns[ns.notna()] = np.nan\n        else:\n            ns[ns.notna()] = np.nan\n\n        # Make sure original not changed\n        tm.assert_series_equal(series, copy)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x10faae250>\ndata = <IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]\nmaindtype = None, params = (False, True, True, True)\nanswerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}\n\n    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n    \n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n    \n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n>               ns[ns.notna()] = np.nan\nE               Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/series/methods/test_convert_dtypes.py:274: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('data, maindtype, answerdict', [([1, 2, 3], np.dtype('int32'), {((True, False), (True, False), (True,), (True, False)): 'Int32', ((True, False), (True, False), (False,), (True, False)): np.dtype('int32')}), ([1, 2, 3], np.dtype('int64'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('int64')}), (['x', 'y', 'z'], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), ([True, False, np.nan], np.dtype('O'), {((True, False), (True, False), (True, False), (True,)): pd.BooleanDtype(), ((True, False), (True, False), (True, False), (False,)): np.dtype('O')}), (['h', 'i', np.nan], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), (['h', 'i', 1], np.dtype('O'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([10, np.nan, 20], np.dtype('float'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('float')}), ([np.nan, 100.5, 200], np.dtype('float'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('float')}), ([3, 4, 5], 'Int8', {((True, False), (True, False), (True, False), (True, False)): 'Int8'}), ([[1, 2], [3, 4], [5]], None, {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([4, 5, 6], np.dtype('uint32'), {((True, False), (True, False), (True,), (True, False)): 'UInt32', ((True, False), (True, False), (False,), (True, False)): np.dtype('uint32')}), ([-10, 12, 13], np.dtype('i1'), {((True, False), (True, False), (True,), (True, False)): 'Int8', ((True, False), (True, False), (False,), (True, False)): np.dtype('i1')}), ([1, 2.0], object, {((True,), (True, False), (True,), (True, False)): 'Int64', ((True,), (True, False), (False,), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), ([1, 2.5], object, {((True,), (True, False), (True, False), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), (['a', 'b'], pd.CategoricalDtype(), {((True, False), (True, False), (True, False), (True, False)): pd.CategoricalDtype()}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), pd.DatetimeTZDtype(tz='UTC'), {((True, False), (True, False), (True, False), (True, False)): pd.DatetimeTZDtype(tz='UTC')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), 'datetime64[ns]', {((True, False), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), object, {((True,), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]'), ((False,), (True, False), (True, False), (True, False)): np.dtype('O')}), (pd.period_range('1/1/2011', freq='M', periods=3), None, {((True, False), (True, False), (True, False), (True, False)): pd.PeriodDtype('M')}), (pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]), None, {((True, False), (True, False), (True, False), (True, False)): pd.IntervalDtype('int64')})])",
                    "pytest.mark.parametrize('params', product(*[(True, False)] * 4))"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/tests/series/methods/test_convert_dtypes.py",
                "test_function": "test_convert_dtypes",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n\n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n\n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                ns[ns.notna()] = np.nan\n        else:\n            ns[ns.notna()] = np.nan\n\n        # Make sure original not changed\n        tm.assert_series_equal(series, copy)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x10fc2c670>\ndata = <IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]\nmaindtype = None, params = (False, True, True, False)\nanswerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}\n\n    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n    \n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n    \n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n>               ns[ns.notna()] = np.nan\nE               Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/series/methods/test_convert_dtypes.py:274: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('data, maindtype, answerdict', [([1, 2, 3], np.dtype('int32'), {((True, False), (True, False), (True,), (True, False)): 'Int32', ((True, False), (True, False), (False,), (True, False)): np.dtype('int32')}), ([1, 2, 3], np.dtype('int64'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('int64')}), (['x', 'y', 'z'], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), ([True, False, np.nan], np.dtype('O'), {((True, False), (True, False), (True, False), (True,)): pd.BooleanDtype(), ((True, False), (True, False), (True, False), (False,)): np.dtype('O')}), (['h', 'i', np.nan], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), (['h', 'i', 1], np.dtype('O'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([10, np.nan, 20], np.dtype('float'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('float')}), ([np.nan, 100.5, 200], np.dtype('float'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('float')}), ([3, 4, 5], 'Int8', {((True, False), (True, False), (True, False), (True, False)): 'Int8'}), ([[1, 2], [3, 4], [5]], None, {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([4, 5, 6], np.dtype('uint32'), {((True, False), (True, False), (True,), (True, False)): 'UInt32', ((True, False), (True, False), (False,), (True, False)): np.dtype('uint32')}), ([-10, 12, 13], np.dtype('i1'), {((True, False), (True, False), (True,), (True, False)): 'Int8', ((True, False), (True, False), (False,), (True, False)): np.dtype('i1')}), ([1, 2.0], object, {((True,), (True, False), (True,), (True, False)): 'Int64', ((True,), (True, False), (False,), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), ([1, 2.5], object, {((True,), (True, False), (True, False), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), (['a', 'b'], pd.CategoricalDtype(), {((True, False), (True, False), (True, False), (True, False)): pd.CategoricalDtype()}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), pd.DatetimeTZDtype(tz='UTC'), {((True, False), (True, False), (True, False), (True, False)): pd.DatetimeTZDtype(tz='UTC')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), 'datetime64[ns]', {((True, False), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), object, {((True,), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]'), ((False,), (True, False), (True, False), (True, False)): np.dtype('O')}), (pd.period_range('1/1/2011', freq='M', periods=3), None, {((True, False), (True, False), (True, False), (True, False)): pd.PeriodDtype('M')}), (pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]), None, {((True, False), (True, False), (True, False), (True, False)): pd.IntervalDtype('int64')})])",
                    "pytest.mark.parametrize('params', product(*[(True, False)] * 4))"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/tests/series/methods/test_convert_dtypes.py",
                "test_function": "test_convert_dtypes",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n\n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n\n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                ns[ns.notna()] = np.nan\n        else:\n            ns[ns.notna()] = np.nan\n\n        # Make sure original not changed\n        tm.assert_series_equal(series, copy)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x10fc5dd30>\ndata = <IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]\nmaindtype = None, params = (False, True, False, True)\nanswerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}\n\n    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n    \n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n    \n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n>               ns[ns.notna()] = np.nan\nE               Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/series/methods/test_convert_dtypes.py:274: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('data, maindtype, answerdict', [([1, 2, 3], np.dtype('int32'), {((True, False), (True, False), (True,), (True, False)): 'Int32', ((True, False), (True, False), (False,), (True, False)): np.dtype('int32')}), ([1, 2, 3], np.dtype('int64'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('int64')}), (['x', 'y', 'z'], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), ([True, False, np.nan], np.dtype('O'), {((True, False), (True, False), (True, False), (True,)): pd.BooleanDtype(), ((True, False), (True, False), (True, False), (False,)): np.dtype('O')}), (['h', 'i', np.nan], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), (['h', 'i', 1], np.dtype('O'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([10, np.nan, 20], np.dtype('float'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('float')}), ([np.nan, 100.5, 200], np.dtype('float'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('float')}), ([3, 4, 5], 'Int8', {((True, False), (True, False), (True, False), (True, False)): 'Int8'}), ([[1, 2], [3, 4], [5]], None, {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([4, 5, 6], np.dtype('uint32'), {((True, False), (True, False), (True,), (True, False)): 'UInt32', ((True, False), (True, False), (False,), (True, False)): np.dtype('uint32')}), ([-10, 12, 13], np.dtype('i1'), {((True, False), (True, False), (True,), (True, False)): 'Int8', ((True, False), (True, False), (False,), (True, False)): np.dtype('i1')}), ([1, 2.0], object, {((True,), (True, False), (True,), (True, False)): 'Int64', ((True,), (True, False), (False,), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), ([1, 2.5], object, {((True,), (True, False), (True, False), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), (['a', 'b'], pd.CategoricalDtype(), {((True, False), (True, False), (True, False), (True, False)): pd.CategoricalDtype()}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), pd.DatetimeTZDtype(tz='UTC'), {((True, False), (True, False), (True, False), (True, False)): pd.DatetimeTZDtype(tz='UTC')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), 'datetime64[ns]', {((True, False), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), object, {((True,), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]'), ((False,), (True, False), (True, False), (True, False)): np.dtype('O')}), (pd.period_range('1/1/2011', freq='M', periods=3), None, {((True, False), (True, False), (True, False), (True, False)): pd.PeriodDtype('M')}), (pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]), None, {((True, False), (True, False), (True, False), (True, False)): pd.IntervalDtype('int64')})])",
                    "pytest.mark.parametrize('params', product(*[(True, False)] * 4))"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/tests/series/methods/test_convert_dtypes.py",
                "test_function": "test_convert_dtypes",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n\n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n\n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                ns[ns.notna()] = np.nan\n        else:\n            ns[ns.notna()] = np.nan\n\n        # Make sure original not changed\n        tm.assert_series_equal(series, copy)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x10fb174f0>\ndata = <IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]\nmaindtype = None, params = (False, True, False, False)\nanswerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}\n\n    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n    \n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n    \n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n>               ns[ns.notna()] = np.nan\nE               Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/series/methods/test_convert_dtypes.py:274: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('data, maindtype, answerdict', [([1, 2, 3], np.dtype('int32'), {((True, False), (True, False), (True,), (True, False)): 'Int32', ((True, False), (True, False), (False,), (True, False)): np.dtype('int32')}), ([1, 2, 3], np.dtype('int64'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('int64')}), (['x', 'y', 'z'], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), ([True, False, np.nan], np.dtype('O'), {((True, False), (True, False), (True, False), (True,)): pd.BooleanDtype(), ((True, False), (True, False), (True, False), (False,)): np.dtype('O')}), (['h', 'i', np.nan], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), (['h', 'i', 1], np.dtype('O'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([10, np.nan, 20], np.dtype('float'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('float')}), ([np.nan, 100.5, 200], np.dtype('float'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('float')}), ([3, 4, 5], 'Int8', {((True, False), (True, False), (True, False), (True, False)): 'Int8'}), ([[1, 2], [3, 4], [5]], None, {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([4, 5, 6], np.dtype('uint32'), {((True, False), (True, False), (True,), (True, False)): 'UInt32', ((True, False), (True, False), (False,), (True, False)): np.dtype('uint32')}), ([-10, 12, 13], np.dtype('i1'), {((True, False), (True, False), (True,), (True, False)): 'Int8', ((True, False), (True, False), (False,), (True, False)): np.dtype('i1')}), ([1, 2.0], object, {((True,), (True, False), (True,), (True, False)): 'Int64', ((True,), (True, False), (False,), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), ([1, 2.5], object, {((True,), (True, False), (True, False), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), (['a', 'b'], pd.CategoricalDtype(), {((True, False), (True, False), (True, False), (True, False)): pd.CategoricalDtype()}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), pd.DatetimeTZDtype(tz='UTC'), {((True, False), (True, False), (True, False), (True, False)): pd.DatetimeTZDtype(tz='UTC')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), 'datetime64[ns]', {((True, False), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), object, {((True,), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]'), ((False,), (True, False), (True, False), (True, False)): np.dtype('O')}), (pd.period_range('1/1/2011', freq='M', periods=3), None, {((True, False), (True, False), (True, False), (True, False)): pd.PeriodDtype('M')}), (pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]), None, {((True, False), (True, False), (True, False), (True, False)): pd.IntervalDtype('int64')})])",
                    "pytest.mark.parametrize('params', product(*[(True, False)] * 4))"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/tests/series/methods/test_convert_dtypes.py",
                "test_function": "test_convert_dtypes",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n\n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n\n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                ns[ns.notna()] = np.nan\n        else:\n            ns[ns.notna()] = np.nan\n\n        # Make sure original not changed\n        tm.assert_series_equal(series, copy)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x10fbe1460>\ndata = <IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]\nmaindtype = None, params = (False, False, True, True)\nanswerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}\n\n    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n    \n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n    \n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n>               ns[ns.notna()] = np.nan\nE               Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/series/methods/test_convert_dtypes.py:274: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('data, maindtype, answerdict', [([1, 2, 3], np.dtype('int32'), {((True, False), (True, False), (True,), (True, False)): 'Int32', ((True, False), (True, False), (False,), (True, False)): np.dtype('int32')}), ([1, 2, 3], np.dtype('int64'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('int64')}), (['x', 'y', 'z'], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), ([True, False, np.nan], np.dtype('O'), {((True, False), (True, False), (True, False), (True,)): pd.BooleanDtype(), ((True, False), (True, False), (True, False), (False,)): np.dtype('O')}), (['h', 'i', np.nan], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), (['h', 'i', 1], np.dtype('O'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([10, np.nan, 20], np.dtype('float'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('float')}), ([np.nan, 100.5, 200], np.dtype('float'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('float')}), ([3, 4, 5], 'Int8', {((True, False), (True, False), (True, False), (True, False)): 'Int8'}), ([[1, 2], [3, 4], [5]], None, {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([4, 5, 6], np.dtype('uint32'), {((True, False), (True, False), (True,), (True, False)): 'UInt32', ((True, False), (True, False), (False,), (True, False)): np.dtype('uint32')}), ([-10, 12, 13], np.dtype('i1'), {((True, False), (True, False), (True,), (True, False)): 'Int8', ((True, False), (True, False), (False,), (True, False)): np.dtype('i1')}), ([1, 2.0], object, {((True,), (True, False), (True,), (True, False)): 'Int64', ((True,), (True, False), (False,), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), ([1, 2.5], object, {((True,), (True, False), (True, False), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), (['a', 'b'], pd.CategoricalDtype(), {((True, False), (True, False), (True, False), (True, False)): pd.CategoricalDtype()}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), pd.DatetimeTZDtype(tz='UTC'), {((True, False), (True, False), (True, False), (True, False)): pd.DatetimeTZDtype(tz='UTC')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), 'datetime64[ns]', {((True, False), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), object, {((True,), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]'), ((False,), (True, False), (True, False), (True, False)): np.dtype('O')}), (pd.period_range('1/1/2011', freq='M', periods=3), None, {((True, False), (True, False), (True, False), (True, False)): pd.PeriodDtype('M')}), (pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]), None, {((True, False), (True, False), (True, False), (True, False)): pd.IntervalDtype('int64')})])",
                    "pytest.mark.parametrize('params', product(*[(True, False)] * 4))"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/tests/series/methods/test_convert_dtypes.py",
                "test_function": "test_convert_dtypes",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n\n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n\n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                ns[ns.notna()] = np.nan\n        else:\n            ns[ns.notna()] = np.nan\n\n        # Make sure original not changed\n        tm.assert_series_equal(series, copy)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x10fa481f0>\ndata = <IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]\nmaindtype = None, params = (False, False, True, False)\nanswerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}\n\n    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n    \n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n    \n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n>               ns[ns.notna()] = np.nan\nE               Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/series/methods/test_convert_dtypes.py:274: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('data, maindtype, answerdict', [([1, 2, 3], np.dtype('int32'), {((True, False), (True, False), (True,), (True, False)): 'Int32', ((True, False), (True, False), (False,), (True, False)): np.dtype('int32')}), ([1, 2, 3], np.dtype('int64'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('int64')}), (['x', 'y', 'z'], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), ([True, False, np.nan], np.dtype('O'), {((True, False), (True, False), (True, False), (True,)): pd.BooleanDtype(), ((True, False), (True, False), (True, False), (False,)): np.dtype('O')}), (['h', 'i', np.nan], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), (['h', 'i', 1], np.dtype('O'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([10, np.nan, 20], np.dtype('float'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('float')}), ([np.nan, 100.5, 200], np.dtype('float'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('float')}), ([3, 4, 5], 'Int8', {((True, False), (True, False), (True, False), (True, False)): 'Int8'}), ([[1, 2], [3, 4], [5]], None, {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([4, 5, 6], np.dtype('uint32'), {((True, False), (True, False), (True,), (True, False)): 'UInt32', ((True, False), (True, False), (False,), (True, False)): np.dtype('uint32')}), ([-10, 12, 13], np.dtype('i1'), {((True, False), (True, False), (True,), (True, False)): 'Int8', ((True, False), (True, False), (False,), (True, False)): np.dtype('i1')}), ([1, 2.0], object, {((True,), (True, False), (True,), (True, False)): 'Int64', ((True,), (True, False), (False,), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), ([1, 2.5], object, {((True,), (True, False), (True, False), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), (['a', 'b'], pd.CategoricalDtype(), {((True, False), (True, False), (True, False), (True, False)): pd.CategoricalDtype()}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), pd.DatetimeTZDtype(tz='UTC'), {((True, False), (True, False), (True, False), (True, False)): pd.DatetimeTZDtype(tz='UTC')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), 'datetime64[ns]', {((True, False), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), object, {((True,), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]'), ((False,), (True, False), (True, False), (True, False)): np.dtype('O')}), (pd.period_range('1/1/2011', freq='M', periods=3), None, {((True, False), (True, False), (True, False), (True, False)): pd.PeriodDtype('M')}), (pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]), None, {((True, False), (True, False), (True, False), (True, False)): pd.IntervalDtype('int64')})])",
                    "pytest.mark.parametrize('params', product(*[(True, False)] * 4))"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/tests/series/methods/test_convert_dtypes.py",
                "test_function": "test_convert_dtypes",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n\n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n\n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                ns[ns.notna()] = np.nan\n        else:\n            ns[ns.notna()] = np.nan\n\n        # Make sure original not changed\n        tm.assert_series_equal(series, copy)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x10fcb0970>\ndata = <IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]\nmaindtype = None, params = (False, False, False, True)\nanswerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}\n\n    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n    \n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n    \n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n>               ns[ns.notna()] = np.nan\nE               Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/series/methods/test_convert_dtypes.py:274: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('data, maindtype, answerdict', [([1, 2, 3], np.dtype('int32'), {((True, False), (True, False), (True,), (True, False)): 'Int32', ((True, False), (True, False), (False,), (True, False)): np.dtype('int32')}), ([1, 2, 3], np.dtype('int64'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('int64')}), (['x', 'y', 'z'], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), ([True, False, np.nan], np.dtype('O'), {((True, False), (True, False), (True, False), (True,)): pd.BooleanDtype(), ((True, False), (True, False), (True, False), (False,)): np.dtype('O')}), (['h', 'i', np.nan], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), (['h', 'i', 1], np.dtype('O'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([10, np.nan, 20], np.dtype('float'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('float')}), ([np.nan, 100.5, 200], np.dtype('float'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('float')}), ([3, 4, 5], 'Int8', {((True, False), (True, False), (True, False), (True, False)): 'Int8'}), ([[1, 2], [3, 4], [5]], None, {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([4, 5, 6], np.dtype('uint32'), {((True, False), (True, False), (True,), (True, False)): 'UInt32', ((True, False), (True, False), (False,), (True, False)): np.dtype('uint32')}), ([-10, 12, 13], np.dtype('i1'), {((True, False), (True, False), (True,), (True, False)): 'Int8', ((True, False), (True, False), (False,), (True, False)): np.dtype('i1')}), ([1, 2.0], object, {((True,), (True, False), (True,), (True, False)): 'Int64', ((True,), (True, False), (False,), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), ([1, 2.5], object, {((True,), (True, False), (True, False), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), (['a', 'b'], pd.CategoricalDtype(), {((True, False), (True, False), (True, False), (True, False)): pd.CategoricalDtype()}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), pd.DatetimeTZDtype(tz='UTC'), {((True, False), (True, False), (True, False), (True, False)): pd.DatetimeTZDtype(tz='UTC')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), 'datetime64[ns]', {((True, False), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), object, {((True,), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]'), ((False,), (True, False), (True, False), (True, False)): np.dtype('O')}), (pd.period_range('1/1/2011', freq='M', periods=3), None, {((True, False), (True, False), (True, False), (True, False)): pd.PeriodDtype('M')}), (pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]), None, {((True, False), (True, False), (True, False), (True, False)): pd.IntervalDtype('int64')})])",
                    "pytest.mark.parametrize('params', product(*[(True, False)] * 4))"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_29/pandas/tests/series/methods/test_convert_dtypes.py",
                "test_function": "test_convert_dtypes",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n\n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n\n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n                ns[ns.notna()] = np.nan\n        else:\n            ns[ns.notna()] = np.nan\n\n        # Make sure original not changed\n        tm.assert_series_equal(series, copy)",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.series.methods.test_convert_dtypes.TestSeriesConvertDtypes object at 0x10fcb0340>\ndata = <IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, closed: right, dtype: interval[int64]\nmaindtype = None, params = (False, False, False, False)\nanswerdict = {((True, False), (True, False), (True, False), (True, False)): interval[int64]}\n\n    @pytest.mark.parametrize(\n        \"data, maindtype, answerdict\",\n        [\n            (\n                [1, 2, 3],\n                np.dtype(\"int32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int32\"\n                    ),\n                },\n            ),\n            (\n                [1, 2, 3],\n                np.dtype(\"int64\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"int64\"\n                    ),\n                },\n            ),\n            (\n                [\"x\", \"y\", \"z\"],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [True, False, np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True,),\n                    ): pd.BooleanDtype(),\n                    ((True, False), (True, False), (True, False), (False,)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                [\"h\", \"i\", np.nan],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True,),\n                        (True, False),\n                        (True, False),\n                    ): pd.StringDtype(),\n                    ((True, False), (False,), (True, False), (True, False)): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (  # GH32117\n                [\"h\", \"i\", 1],\n                np.dtype(\"O\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [10, np.nan, 20],\n                np.dtype(\"float\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                },\n            ),\n            (\n                [np.nan, 100.5, 200],\n                np.dtype(\"float\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"float\"),\n                },\n            ),\n            (\n                [3, 4, 5],\n                \"Int8\",\n                {((True, False), (True, False), (True, False), (True, False)): \"Int8\"},\n            ),\n            (\n                [[1, 2], [3, 4], [5]],\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"O\"),\n                },\n            ),\n            (\n                [4, 5, 6],\n                np.dtype(\"uint32\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"UInt32\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"uint32\"\n                    ),\n                },\n            ),\n            (\n                [-10, 12, 13],\n                np.dtype(\"i1\"),\n                {\n                    ((True, False), (True, False), (True,), (True, False)): \"Int8\",\n                    ((True, False), (True, False), (False,), (True, False)): np.dtype(\n                        \"i1\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.0],\n                object,\n                {\n                    ((True,), (True, False), (True,), (True, False)): \"Int64\",\n                    ((True,), (True, False), (False,), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [1, 2.5],\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"float\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False)): np.dtype(\n                        \"object\"\n                    ),\n                },\n            ),\n            (\n                [\"a\", \"b\"],\n                pd.CategoricalDtype(),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.CategoricalDtype(),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                pd.DatetimeTZDtype(tz=\"UTC\"),\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.DatetimeTZDtype(tz=\"UTC\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                \"datetime64[ns]\",\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): np.dtype(\"datetime64[ns]\"),\n                },\n            ),\n            (\n                pd.to_datetime([\"2020-01-14 10:00\", \"2020-01-15 11:11\"]),\n                object,\n                {\n                    ((True,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"datetime64[ns]\"\n                    ),\n                    ((False,), (True, False), (True, False), (True, False),): np.dtype(\n                        \"O\"\n                    ),\n                },\n            ),\n            (\n                pd.period_range(\"1/1/2011\", freq=\"M\", periods=3),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.PeriodDtype(\"M\"),\n                },\n            ),\n            (\n                pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]),\n                None,\n                {\n                    (\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                        (True, False),\n                    ): pd.IntervalDtype(\"int64\"),\n                },\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"params\", product(*[(True, False)] * 4))\n    def test_convert_dtypes(self, data, maindtype, params, answerdict):\n        if maindtype is not None:\n            series = pd.Series(data, dtype=maindtype)\n        else:\n            series = pd.Series(data)\n        answers = {k: a for (kk, a) in answerdict.items() for k in product(*kk)}\n    \n        ns = series.convert_dtypes(*params)\n        expected_dtype = answers[tuple(params)]\n        expected = pd.Series(series.values, dtype=expected_dtype)\n        tm.assert_series_equal(ns, expected)\n    \n        # Test that it is a copy\n        copy = series.copy(deep=True)\n        if is_interval_dtype(ns.dtype) and ns.dtype.subtype.kind in [\"i\", \"u\"]:\n            msg = \"Cannot set float NaN to integer-backed IntervalArray\"\n            with pytest.raises(ValueError, match=msg):\n>               ns[ns.notna()] = np.nan\nE               Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/series/methods/test_convert_dtypes.py:274: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('data, maindtype, answerdict', [([1, 2, 3], np.dtype('int32'), {((True, False), (True, False), (True,), (True, False)): 'Int32', ((True, False), (True, False), (False,), (True, False)): np.dtype('int32')}), ([1, 2, 3], np.dtype('int64'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('int64')}), (['x', 'y', 'z'], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), ([True, False, np.nan], np.dtype('O'), {((True, False), (True, False), (True, False), (True,)): pd.BooleanDtype(), ((True, False), (True, False), (True, False), (False,)): np.dtype('O')}), (['h', 'i', np.nan], np.dtype('O'), {((True, False), (True,), (True, False), (True, False)): pd.StringDtype(), ((True, False), (False,), (True, False), (True, False)): np.dtype('O')}), (['h', 'i', 1], np.dtype('O'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([10, np.nan, 20], np.dtype('float'), {((True, False), (True, False), (True,), (True, False)): 'Int64', ((True, False), (True, False), (False,), (True, False)): np.dtype('float')}), ([np.nan, 100.5, 200], np.dtype('float'), {((True, False), (True, False), (True, False), (True, False)): np.dtype('float')}), ([3, 4, 5], 'Int8', {((True, False), (True, False), (True, False), (True, False)): 'Int8'}), ([[1, 2], [3, 4], [5]], None, {((True, False), (True, False), (True, False), (True, False)): np.dtype('O')}), ([4, 5, 6], np.dtype('uint32'), {((True, False), (True, False), (True,), (True, False)): 'UInt32', ((True, False), (True, False), (False,), (True, False)): np.dtype('uint32')}), ([-10, 12, 13], np.dtype('i1'), {((True, False), (True, False), (True,), (True, False)): 'Int8', ((True, False), (True, False), (False,), (True, False)): np.dtype('i1')}), ([1, 2.0], object, {((True,), (True, False), (True,), (True, False)): 'Int64', ((True,), (True, False), (False,), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), ([1, 2.5], object, {((True,), (True, False), (True, False), (True, False)): np.dtype('float'), ((False,), (True, False), (True, False), (True, False)): np.dtype('object')}), (['a', 'b'], pd.CategoricalDtype(), {((True, False), (True, False), (True, False), (True, False)): pd.CategoricalDtype()}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), pd.DatetimeTZDtype(tz='UTC'), {((True, False), (True, False), (True, False), (True, False)): pd.DatetimeTZDtype(tz='UTC')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), 'datetime64[ns]', {((True, False), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]')}), (pd.to_datetime(['2020-01-14 10:00', '2020-01-15 11:11']), object, {((True,), (True, False), (True, False), (True, False)): np.dtype('datetime64[ns]'), ((False,), (True, False), (True, False), (True, False)): np.dtype('O')}), (pd.period_range('1/1/2011', freq='M', periods=3), None, {((True, False), (True, False), (True, False), (True, False)): pd.PeriodDtype('M')}), (pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)]), None, {((True, False), (True, False), (True, False), (True, False)): pd.IntervalDtype('int64')})])",
                    "pytest.mark.parametrize('params', product(*[(True, False)] * 4))"
                ]
            }
        ]
    }
}