{
    "pandas:103": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_103/pandas/core/groupby/generic.py": {
            "buggy_functions": [
                {
                    "function_name": "pct_change",
                    "function_code": "def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None):\n    \"\"\"Calculate pct_change of each value to previous entry in group\"\"\"\n    # TODO: Remove this conditional when #23918 is fixed\n    if freq:\n        return self.apply(\n            lambda x: x.pct_change(\n                periods=periods, fill_method=fill_method, limit=limit, freq=freq\n            )\n        )\n    filled = getattr(self, fill_method)(limit=limit)\n    fill_grp = filled.groupby(self.grouper.codes)\n    shifted = fill_grp.shift(periods=periods, freq=freq)\n\n    return (filled / shifted) - 1\n",
                    "decorators": [],
                    "docstring": "Calculate pct_change of each value to previous entry in group",
                    "start_line": 803,
                    "variables": {
                        "freq": [
                            814,
                            809,
                            806
                        ],
                        "self.apply": [
                            807
                        ],
                        "self": [
                            812,
                            813,
                            807
                        ],
                        "x.pct_change": [
                            808
                        ],
                        "x": [
                            808
                        ],
                        "periods": [
                            809,
                            814
                        ],
                        "fill_method": [
                            809,
                            812
                        ],
                        "limit": [
                            809,
                            812
                        ],
                        "filled": [
                            816,
                            812,
                            813
                        ],
                        "getattr": [
                            812
                        ],
                        "fill_grp": [
                            813,
                            814
                        ],
                        "filled.groupby": [
                            813
                        ],
                        "self.grouper.codes": [
                            813
                        ],
                        "self.grouper": [
                            813
                        ],
                        "shifted": [
                            816,
                            814
                        ],
                        "fill_grp.shift": [
                            814
                        ]
                    },
                    "filtered_variables": {
                        "freq": [
                            814,
                            809,
                            806
                        ],
                        "self.apply": [
                            807
                        ],
                        "self": [
                            812,
                            813,
                            807
                        ],
                        "x.pct_change": [
                            808
                        ],
                        "x": [
                            808
                        ],
                        "periods": [
                            809,
                            814
                        ],
                        "fill_method": [
                            809,
                            812
                        ],
                        "limit": [
                            809,
                            812
                        ],
                        "filled": [
                            816,
                            812,
                            813
                        ],
                        "fill_grp": [
                            813,
                            814
                        ],
                        "filled.groupby": [
                            813
                        ],
                        "self.grouper.codes": [
                            813
                        ],
                        "self.grouper": [
                            813
                        ],
                        "shifted": [
                            816,
                            814
                        ],
                        "fill_grp.shift": [
                            814
                        ]
                    },
                    "diff_line_number": 811,
                    "class_data": {
                        "signature": "class SeriesGroupBy(GroupBy)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def _iterate_slices(self) -> Iterable[Series]:\n    yield self._selected_obj",
                            "@property\ndef _selection_name(self):\n    \"\"\"\n    since we are a series, we by definition only have\n    a single name, but may be the result of a selection or\n    the name of our object\n    \"\"\"\n    if self._selection is None:\n        return self.obj.name\n    else:\n        return self._selection",
                            "@Appender(_apply_docs['template'].format(input='series', examples=_apply_docs['series_examples']))\ndef apply(self, func, *args, **kwargs):\n    return super().apply(func, *args, **kwargs)",
                            "@Substitution(see_also=_agg_see_also_doc, examples=_agg_examples_doc, versionadded='', klass='Series', axis='')\n@Appender(_shared_docs['aggregate'])\ndef aggregate(self, func=None, *args, **kwargs):\n    relabeling = func is None\n    columns = None\n    no_arg_message = \"Must provide 'func' or named aggregation **kwargs.\"\n    if relabeling:\n        columns = list(kwargs)\n        func = [kwargs[col] for col in columns]\n        kwargs = {}\n        if not columns:\n            raise TypeError(no_arg_message)\n    if isinstance(func, str):\n        return getattr(self, func)(*args, **kwargs)\n    elif isinstance(func, abc.Iterable):\n        func = _maybe_mangle_lambdas(func)\n        ret = self._aggregate_multiple_funcs(func)\n        if relabeling:\n            ret.columns = columns\n    else:\n        cyfunc = self._get_cython_func(func)\n        if cyfunc and (not args) and (not kwargs):\n            return getattr(self, cyfunc)()\n        if self.grouper.nkeys > 1:\n            return self._python_agg_general(func, *args, **kwargs)\n        try:\n            return self._python_agg_general(func, *args, **kwargs)\n        except (ValueError, KeyError):\n            result = self._aggregate_named(func, *args, **kwargs)\n        index = Index(sorted(result), name=self.grouper.names[0])\n        ret = create_series_with_explicit_dtype(result, index=index, dtype_if_empty=object)\n    if not self.as_index:\n        print('Warning, ignoring as_index=True')\n    if isinstance(ret, dict):\n        from pandas import concat\n        ret = concat(ret, axis=1)\n    return ret",
                            "def _aggregate_multiple_funcs(self, arg):\n    if isinstance(arg, dict):\n        if isinstance(self._selected_obj, Series):\n            raise SpecificationError('nested renamer is not supported')\n        columns = list(arg.keys())\n        arg = arg.items()\n    elif any((isinstance(x, (tuple, list)) for x in arg)):\n        arg = [(x, x) if not isinstance(x, (tuple, list)) else x for x in arg]\n        columns = next(zip(*arg))\n    else:\n        columns = []\n        for f in arg:\n            columns.append(com.get_callable_name(f) or f)\n        arg = zip(columns, arg)\n    results = OrderedDict()\n    for name, func in arg:\n        obj = self\n        if name in self._selected_obj:\n            obj = copy.copy(obj)\n            obj._reset_cache()\n            obj._selection = name\n        results[name] = obj.aggregate(func)\n    if any((isinstance(x, DataFrame) for x in results.values())):\n        return results\n    return DataFrame(results, columns=columns)",
                            "def _wrap_series_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]], index: Index) -> Union[Series, DataFrame]:\n    \"\"\"\n    Wraps the output of a SeriesGroupBy operation into the expected result.\n\n    Parameters\n    ----------\n    output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n        Data to wrap.\n    index : pd.Index\n        Index to apply to the output.\n\n    Returns\n    -------\n    Series or DataFrame\n\n    Notes\n    -----\n    In the vast majority of cases output and columns will only contain one\n    element. The exception is operations that expand dimensions, like ohlc.\n    \"\"\"\n    indexed_output = {key.position: val for key, val in output.items()}\n    columns = Index((key.label for key in output))\n    result: Union[Series, DataFrame]\n    if len(output) > 1:\n        result = DataFrame(indexed_output, index=index)\n        result.columns = columns\n    else:\n        result = Series(indexed_output[0], index=index, name=columns[0])\n    return result",
                            "def _wrap_aggregated_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> Union[Series, DataFrame]:\n    \"\"\"\n    Wraps the output of a SeriesGroupBy aggregation into the expected result.\n\n    Parameters\n    ----------\n    output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n        Data to wrap.\n\n    Returns\n    -------\n    Series or DataFrame\n\n    Notes\n    -----\n    In the vast majority of cases output will only contain one element.\n    The exception is operations that expand dimensions, like ohlc.\n    \"\"\"\n    result = self._wrap_series_output(output=output, index=self.grouper.result_index)\n    return self._reindex_output(result)._convert(datetime=True)",
                            "def _wrap_transformed_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> Series:\n    \"\"\"\n    Wraps the output of a SeriesGroupBy aggregation into the expected result.\n\n    Parameters\n    ----------\n    output : dict[base.OutputKey, Union[Series, np.ndarray]]\n        Dict with a sole key of 0 and a value of the result values.\n\n    Returns\n    -------\n    Series\n\n    Notes\n    -----\n    output should always contain one element. It is specified as a dict\n    for consistency with DataFrame methods and _wrap_aggregated_output.\n    \"\"\"\n    assert len(output) == 1\n    result = self._wrap_series_output(output=output, index=self.obj.index)\n    assert isinstance(result, Series)\n    return result",
                            "def _wrap_applied_output(self, keys, values, not_indexed_same=False):\n    if len(keys) == 0:\n        return Series([], name=self._selection_name, index=keys, dtype=np.float64)\n\n    def _get_index() -> Index:\n        if self.grouper.nkeys > 1:\n            index = MultiIndex.from_tuples(keys, names=self.grouper.names)\n        else:\n            index = Index(keys, name=self.grouper.names[0])\n        return index\n    if isinstance(values[0], dict):\n        index = _get_index()\n        result = self._reindex_output(DataFrame(values, index=index))\n        result = result.stack(dropna=self.observed)\n        result.name = self._selection_name\n        return result\n    if isinstance(values[0], Series):\n        return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n    elif isinstance(values[0], DataFrame):\n        return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n    else:\n        result = Series(data=values, index=_get_index(), name=self._selection_name)\n        return self._reindex_output(result)",
                            "def _aggregate_named(self, func, *args, **kwargs):\n    result = OrderedDict()\n    for name, group in self:\n        group.name = name\n        output = func(group, *args, **kwargs)\n        if isinstance(output, (Series, Index, np.ndarray)):\n            raise ValueError('Must produce aggregated value')\n        result[name] = output\n    return result",
                            "@Substitution(klass='Series', selected='A.')\n@Appender(_transform_template)\ndef transform(self, func, *args, **kwargs):\n    func = self._get_cython_func(func) or func\n    if not isinstance(func, str):\n        return self._transform_general(func, *args, **kwargs)\n    elif func not in base.transform_kernel_whitelist:\n        msg = f\"'{func}' is not a valid function name for transform(name)\"\n        raise ValueError(msg)\n    elif func in base.cythonized_kernels:\n        return getattr(self, func)(*args, **kwargs)\n    result = getattr(self, func)(*args, **kwargs)\n    return self._transform_fast(result, func)",
                            "def _transform_general(self, func, *args, **kwargs):\n    \"\"\"\n    Transform with a non-str `func`.\n    \"\"\"\n    klass = type(self._selected_obj)\n    results = []\n    for name, group in self:\n        object.__setattr__(group, 'name', name)\n        res = func(group, *args, **kwargs)\n        if isinstance(res, (ABCDataFrame, ABCSeries)):\n            res = res._values\n        indexer = self._get_index(name)\n        ser = klass(res, indexer)\n        results.append(ser)\n    if results:\n        from pandas.core.reshape.concat import concat\n        result = concat(results).sort_index()\n    else:\n        result = Series(dtype=np.float64)\n    dtype = self._selected_obj.dtype\n    if is_numeric_dtype(dtype):\n        result = maybe_downcast_to_dtype(result, dtype)\n    result.name = self._selected_obj.name\n    result.index = self._selected_obj.index\n    return result",
                            "def _transform_fast(self, result, func_nm: str) -> Series:\n    \"\"\"\n    fast version of transform, only applicable to\n    builtin/cythonizable functions\n    \"\"\"\n    ids, _, ngroup = self.grouper.group_info\n    cast = self._transform_should_cast(func_nm)\n    out = algorithms.take_1d(result._values, ids)\n    if cast:\n        out = self._try_cast(out, self.obj)\n    return Series(out, index=self.obj.index, name=self.obj.name)",
                            "def filter(self, func, dropna=True, *args, **kwargs):\n    \"\"\"\n    Return a copy of a Series excluding elements from groups that\n    do not satisfy the boolean criterion specified by func.\n\n    Parameters\n    ----------\n    func : function\n        To apply to each group. Should return True or False.\n    dropna : Drop groups that do not pass the filter. True by default;\n        if False, groups that evaluate False are filled with NaNs.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',\n    ...                           'foo', 'bar'],\n    ...                    'B' : [1, 2, 3, 4, 5, 6],\n    ...                    'C' : [2.0, 5., 8., 1., 2., 9.]})\n    >>> grouped = df.groupby('A')\n    >>> df.groupby('A').B.filter(lambda x: x.mean() > 3.)\n    1    2\n    3    4\n    5    6\n    Name: B, dtype: int64\n\n    Returns\n    -------\n    filtered : Series\n    \"\"\"\n    if isinstance(func, str):\n        wrapper = lambda x: getattr(x, func)(*args, **kwargs)\n    else:\n        wrapper = lambda x: func(x, *args, **kwargs)\n\n    def true_and_notna(x, *args, **kwargs) -> bool:\n        b = wrapper(x, *args, **kwargs)\n        return b and notna(b)\n    try:\n        indices = [self._get_index(name) for name, group in self if true_and_notna(group)]\n    except (ValueError, TypeError):\n        raise TypeError('the filter must return a boolean result')\n    filtered = self._apply_filter(indices, dropna)\n    return filtered",
                            "def nunique(self, dropna: bool=True) -> Series:\n    \"\"\"\n    Return number of unique elements in the group.\n\n    Returns\n    -------\n    Series\n        Number of unique values within each group.\n    \"\"\"\n    ids, _, _ = self.grouper.group_info\n    val = self.obj._internal_get_values()\n    val[isna(val)] = np.datetime64('NaT')\n    try:\n        sorter = np.lexsort((val, ids))\n    except TypeError:\n        msg = f'val.dtype must be object, got {val.dtype}'\n        assert val.dtype == object, msg\n        val, _ = algorithms.factorize(val, sort=False)\n        sorter = np.lexsort((val, ids))\n        _isna = lambda a: a == -1\n    else:\n        _isna = isna\n    ids, val = (ids[sorter], val[sorter])\n    idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]\n    inc = np.r_[1, val[1:] != val[:-1]]\n    mask = _isna(val)\n    if dropna:\n        inc[idx] = 1\n        inc[mask] = 0\n    else:\n        inc[mask & np.r_[False, mask[:-1]]] = 0\n        inc[idx] = 1\n    out = np.add.reduceat(inc, idx).astype('int64', copy=False)\n    if len(ids):\n        if ids[0] == -1:\n            res = out[1:]\n            idx = idx[np.flatnonzero(idx)]\n        else:\n            res = out\n    else:\n        res = out[1:]\n    ri = self.grouper.result_index\n    if len(res) != len(ri):\n        res, out = (np.zeros(len(ri), dtype=out.dtype), res)\n        res[ids[idx]] = out\n    result = Series(res, index=ri, name=self._selection_name)\n    return self._reindex_output(result, fill_value=0)",
                            "@Appender(Series.describe.__doc__)\ndef describe(self, **kwargs):\n    result = self.apply(lambda x: x.describe(**kwargs))\n    if self.axis == 1:\n        return result.T\n    return result.unstack()",
                            "def value_counts(self, normalize=False, sort=True, ascending=False, bins=None, dropna=True):\n    from pandas.core.reshape.tile import cut\n    from pandas.core.reshape.merge import _get_join_indexers\n    if bins is not None and (not np.iterable(bins)):\n        return self.apply(Series.value_counts, normalize=normalize, sort=sort, ascending=ascending, bins=bins)\n    ids, _, _ = self.grouper.group_info\n    val = self.obj._internal_get_values()\n    mask = ids != -1\n    ids, val = (ids[mask], val[mask])\n    if bins is None:\n        lab, lev = algorithms.factorize(val, sort=True)\n        llab = lambda lab, inc: lab[inc]\n    else:\n        lab = cut(Series(val), bins, include_lowest=True)\n        lev = lab.cat.categories\n        lab = lev.take(lab.cat.codes)\n        llab = lambda lab, inc: lab[inc]._multiindex.codes[-1]\n    if is_interval_dtype(lab):\n        sorter = np.lexsort((lab.left, lab.right, ids))\n    else:\n        sorter = np.lexsort((lab, ids))\n    ids, lab = (ids[sorter], lab[sorter])\n    idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]\n    lchanges = llab(lab, slice(1, None)) != llab(lab, slice(None, -1))\n    inc = np.r_[True, lchanges]\n    inc[idx] = True\n    out = np.diff(np.nonzero(np.r_[inc, True])[0])\n    rep = partial(np.repeat, repeats=np.add.reduceat(inc, idx))\n    codes = self.grouper.reconstructed_codes\n    codes = [rep(level_codes) for level_codes in codes] + [llab(lab, inc)]\n    levels = [ping.group_index for ping in self.grouper.groupings] + [lev]\n    names = self.grouper.names + [self._selection_name]\n    if dropna:\n        mask = codes[-1] != -1\n        if mask.all():\n            dropna = False\n        else:\n            out, codes = (out[mask], [level_codes[mask] for level_codes in codes])\n    if normalize:\n        out = out.astype('float')\n        d = np.diff(np.r_[idx, len(ids)])\n        if dropna:\n            m = ids[lab == -1]\n            np.add.at(d, m, -1)\n            acc = rep(d)[mask]\n        else:\n            acc = rep(d)\n        out /= acc\n    if sort and bins is None:\n        cat = ids[inc][mask] if dropna else ids[inc]\n        sorter = np.lexsort((out if ascending else -out, cat))\n        out, codes[-1] = (out[sorter], codes[-1][sorter])\n    if bins is None:\n        mi = MultiIndex(levels=levels, codes=codes, names=names, verify_integrity=False)\n        if is_integer_dtype(out):\n            out = ensure_int64(out)\n        return Series(out, index=mi, name=self._selection_name)\n    diff = np.zeros(len(out), dtype='bool')\n    for level_codes in codes[:-1]:\n        diff |= np.r_[True, level_codes[1:] != level_codes[:-1]]\n    ncat, nbin = (diff.sum(), len(levels[-1]))\n    left = [np.repeat(np.arange(ncat), nbin), np.tile(np.arange(nbin), ncat)]\n    right = [diff.cumsum() - 1, codes[-1]]\n    _, idx = _get_join_indexers(left, right, sort=False, how='left')\n    out = np.where(idx != -1, out[idx], 0)\n    if sort:\n        sorter = np.lexsort((out if ascending else -out, left[0]))\n        out, left[-1] = (out[sorter], left[-1][sorter])\n\n    def build_codes(lev_codes: np.ndarray) -> np.ndarray:\n        return np.repeat(lev_codes[diff], nbin)\n    codes = [build_codes(lev_codes) for lev_codes in codes[:-1]]\n    codes.append(left[-1])\n    mi = MultiIndex(levels=levels, codes=codes, names=names, verify_integrity=False)\n    if is_integer_dtype(out):\n        out = ensure_int64(out)\n    return Series(out, index=mi, name=self._selection_name)",
                            "def count(self) -> Series:\n    \"\"\"\n    Compute count of group, excluding missing values.\n\n    Returns\n    -------\n    Series\n        Count of values within each group.\n    \"\"\"\n    ids, _, ngroups = self.grouper.group_info\n    val = self.obj._internal_get_values()\n    mask = (ids != -1) & ~isna(val)\n    ids = ensure_platform_int(ids)\n    minlength = ngroups or 0\n    out = np.bincount(ids[mask], minlength=minlength)\n    result = Series(out, index=self.grouper.result_index, name=self._selection_name, dtype='int64')\n    return self._reindex_output(result, fill_value=0)",
                            "def _apply_to_column_groupbys(self, func):\n    \"\"\" return a pass thru \"\"\"\n    return func(self)",
                            "def pct_change(self, periods=1, fill_method='pad', limit=None, freq=None):\n    \"\"\"Calculate pct_change of each value to previous entry in group\"\"\"\n    if freq:\n        return self.apply(lambda x: x.pct_change(periods=periods, fill_method=fill_method, limit=limit, freq=freq))\n    filled = getattr(self, fill_method)(limit=limit)\n    fill_grp = filled.groupby(self.grouper.codes)\n    shifted = fill_grp.shift(periods=periods, freq=freq)\n    return filled / shifted - 1",
                            "def _get_index() -> Index:\n    if self.grouper.nkeys > 1:\n        index = MultiIndex.from_tuples(keys, names=self.grouper.names)\n    else:\n        index = Index(keys, name=self.grouper.names[0])\n    return index",
                            "def true_and_notna(x, *args, **kwargs) -> bool:\n    b = wrapper(x, *args, **kwargs)\n    return b and notna(b)",
                            "def build_codes(lev_codes: np.ndarray) -> np.ndarray:\n    return np.repeat(lev_codes[diff], nbin)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_apply_whitelist",
                            "_agg_see_also_doc",
                            "_agg_examples_doc",
                            "agg"
                        ],
                        "class_decorators": [
                            "pin_whitelisted_properties(Series, base.series_apply_whitelist)"
                        ],
                        "function_signatures": [
                            "_iterate_slices(self) -> Iterable[Series]",
                            "_selection_name(self)",
                            "apply(self, func, *args, **kwargs)",
                            "aggregate(self, func=None, *args, **kwargs)",
                            "_aggregate_multiple_funcs(self, arg)",
                            "_wrap_series_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]], index: Index) -> Union[Series, DataFrame]",
                            "_wrap_aggregated_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> Union[Series, DataFrame]",
                            "_wrap_transformed_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> Series",
                            "_wrap_applied_output(self, keys, values, not_indexed_same=False)",
                            "_aggregate_named(self, func, *args, **kwargs)",
                            "transform(self, func, *args, **kwargs)",
                            "_transform_general(self, func, *args, **kwargs)",
                            "_transform_fast(self, result, func_nm: str) -> Series",
                            "filter(self, func, dropna=True, *args, **kwargs)",
                            "nunique(self, dropna: bool=True) -> Series",
                            "describe(self, **kwargs)",
                            "value_counts(self, normalize=False, sort=True, ascending=False, bins=None, dropna=True)",
                            "count(self) -> Series",
                            "_apply_to_column_groupbys(self, func)",
                            "pct_change(self, periods=1, fill_method='pad', limit=None, freq=None)",
                            "_get_index() -> Index",
                            "true_and_notna(x, *args, **kwargs) -> bool",
                            "build_codes(lev_codes: np.ndarray) -> np.ndarray"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x113d6be50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x113d6be50>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x113d6bd00>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x113d6be50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x113d6be50>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      3.0\n2      3.0\n3      3.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8     10.0\n9      4.0\n10     3.0\n11     3.0\n12     3.0\n13     3.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18    10.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x113d71b80>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      3.0\n2      3.0\n3      3.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8     10.0\n9      4.0\n10     3.0\n11     3.0\n12     3.0\n13     3.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18    10.0\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x113d6bd00>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      NaN\n1      3.0\n2      3.0\n3      3.0\n4      3.0\n5      1.0\n6      2.0\n7      4.0\n8     10.0\n9     10.0\n10     NaN\n11     3.0\n12     3.0\n13     3.0\n14     3.0\n15     1.0\n16     2.0\n17     4.0\n18    10.0\n19    10.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x113d71b80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x113d6b400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x113d6b400>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x113d6b3a0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x113d6b400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x113d6b400>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x113d6b3a0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bf70f70>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bf70f70>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bf706a0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bf70f70>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bf70f70>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      3.0\n2      3.0\n3      3.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8     10.0\n9      4.0\n10     3.0\n11     3.0\n12     3.0\n13     3.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18    10.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bf70250>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      3.0\n2      3.0\n3      3.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8     10.0\n9      4.0\n10     3.0\n11     3.0\n12     3.0\n13     3.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18    10.0\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bf706a0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      3.0\n1      3.0\n2      3.0\n3      1.0\n4      2.0\n5      4.0\n6     10.0\n7     10.0\n8      4.0\n9      NaN\n10     3.0\n11     3.0\n12     3.0\n13     1.0\n14     2.0\n15     4.0\n16    10.0\n17    10.0\n18     4.0\n19     NaN\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bf70250>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bf700a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bf700a0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bf70a60>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bf700a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bf700a0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bf70a60>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x113e11730>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x113e11730>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x113e114f0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x113e11730>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x113e11730>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      1.0\n2      1.0\n3      1.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      4.0\n9      4.0\n10     3.0\n11     1.0\n12     1.0\n13     1.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     4.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x113e11040>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      1.0\n2      1.0\n3      1.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      4.0\n9      4.0\n10     3.0\n11     1.0\n12     1.0\n13     1.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     4.0\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x113e114f0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      NaN\n1      3.0\n2      1.0\n3      1.0\n4      1.0\n5      1.0\n6      2.0\n7      4.0\n8     10.0\n9      4.0\n10     NaN\n11     3.0\n12     1.0\n13     1.0\n14     1.0\n15     1.0\n16     2.0\n17     4.0\n18    10.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x113e11040>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x113e11580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x113e11580>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x113e118e0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x113e11580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x113e11580>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x113e118e0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c0143a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c0143a0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11c014160>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c0143a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c0143a0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      1.0\n2      1.0\n3      1.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      4.0\n9      4.0\n10     3.0\n11     1.0\n12     1.0\n13     1.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     4.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c014d60>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      1.0\n2      1.0\n3      1.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      4.0\n9      4.0\n10     3.0\n11     1.0\n12     1.0\n13     1.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     4.0\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11c014160>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      1.0\n1      1.0\n2      1.0\n3      1.0\n4      2.0\n5      4.0\n6     10.0\n7      4.0\n8      4.0\n9      NaN\n10     1.0\n11     1.0\n12     1.0\n13     1.0\n14     2.0\n15     4.0\n16    10.0\n17     4.0\n18     4.0\n19     NaN\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c014d60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c0141f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c0141f0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11c014250>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c0141f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c0141f0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11c014250>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c5bd7c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c5bd7c0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11c5bd8e0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c5bd7c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c5bd7c0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11c5bd8e0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x113e070a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x113e070a0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x113e07490>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x113e070a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x113e070a0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x113e07490>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c670f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c670f10>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11c670b50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c670f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c670f10>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      3.0\n2      NaN\n3      NaN\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8     10.0\n9      4.0\n10     3.0\n11     3.0\n12     NaN\n13     NaN\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18    10.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c6704c0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      3.0\n2      NaN\n3      NaN\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8     10.0\n9      4.0\n10     3.0\n11     3.0\n12     NaN\n13     NaN\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18    10.0\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11c670b50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      NaN\n1      3.0\n2      3.0\n3      NaN\n4      NaN\n5      1.0\n6      2.0\n7      4.0\n8     10.0\n9     10.0\n10     NaN\n11     3.0\n12     3.0\n13     NaN\n14     NaN\n15     1.0\n16     2.0\n17     4.0\n18    10.0\n19    10.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c6704c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c670bb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c670bb0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11c670a30>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c670bb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c670bb0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11c670a30>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c4023d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c4023d0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11c402190>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c4023d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c4023d0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      3.0\n2      NaN\n3      NaN\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8     10.0\n9      4.0\n10     3.0\n11     3.0\n12     NaN\n13     NaN\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18    10.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c402d00>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      3.0\n2      NaN\n3      NaN\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8     10.0\n9      4.0\n10     3.0\n11     3.0\n12     NaN\n13     NaN\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18    10.0\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11c402190>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      3.0\n1      NaN\n2      NaN\n3      1.0\n4      2.0\n5      4.0\n6     10.0\n7     10.0\n8      4.0\n9      NaN\n10     3.0\n11     NaN\n12     NaN\n13     1.0\n14     2.0\n15     4.0\n16    10.0\n17    10.0\n18     4.0\n19     NaN\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c402d00>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c402160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c402160>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11c4021c0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c402160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c402160>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11c4021c0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bfebd90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bfebd90>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bfebf40>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bfebd90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bfebd90>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      NaN\n2      NaN\n3      1.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      4.0\n9      4.0\n10     3.0\n11     NaN\n12     NaN\n13     1.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     4.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bfeb8b0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      NaN\n2      NaN\n3      1.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      4.0\n9      4.0\n10     3.0\n11     NaN\n12     NaN\n13     1.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     4.0\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bfebf40>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      NaN\n1      3.0\n2      NaN\n3      NaN\n4      1.0\n5      1.0\n6      2.0\n7      4.0\n8     10.0\n9      4.0\n10     NaN\n11     3.0\n12     NaN\n13     NaN\n14     1.0\n15     1.0\n16     2.0\n17     4.0\n18    10.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bfeb8b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bfebbe0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bfebbe0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bfebca0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bfebbe0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bfebbe0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bfebca0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11410c070>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11410c070>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11410c1c0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11410c070>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11410c070>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      NaN\n2      NaN\n3      1.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      4.0\n9      4.0\n10     3.0\n11     NaN\n12     NaN\n13     1.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     4.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11410cb20>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      NaN\n2      NaN\n3      1.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      4.0\n9      4.0\n10     3.0\n11     NaN\n12     NaN\n13     1.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     4.0\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11410c1c0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      NaN\n1      NaN\n2      1.0\n3      1.0\n4      2.0\n5      4.0\n6     10.0\n7      4.0\n8      4.0\n9      NaN\n10     NaN\n11     NaN\n12     1.0\n13     1.0\n14     2.0\n15     4.0\n16    10.0\n17     4.0\n18     4.0\n19     NaN\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11410cb20>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11410c130>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11410c130>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11410ce50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11410c130>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11410c130>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11410ce50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bf63fa0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bf63fa0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bf639d0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bf63fa0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bf63fa0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bf639d0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c7ac1c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c7ac1c0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11c7ac670>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11c7ac1c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11c7ac1c0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11c7ac670>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11b8d6e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b8d6e80>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b8d6d90>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11b8d6e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b8d6e80>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      3.0\n2      3.0\n3      3.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8     10.0\n9      4.0\n10     3.0\n11     3.0\n12     3.0\n13     3.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18    10.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b8d6520>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      3.0\n2      3.0\n3      3.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8     10.0\n9      4.0\n10     3.0\n11     3.0\n12     3.0\n13     3.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18    10.0\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b8d6d90>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      NaN\n1      3.0\n2      3.0\n3      3.0\n4      3.0\n5      1.0\n6      2.0\n7      4.0\n8     10.0\n9     10.0\n10     NaN\n11     3.0\n12     3.0\n13     3.0\n14     3.0\n15     1.0\n16     2.0\n17     4.0\n18    10.0\n19    10.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11b8d6520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11b8d6220>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b8d6220>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b8d6250>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11b8d6220>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b8d6220>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b8d6250>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1242de040>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1242de040>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1242de100>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1242de040>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1242de040>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      3.0\n2      3.0\n3      3.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8     10.0\n9      4.0\n10     3.0\n11     3.0\n12     3.0\n13     3.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18    10.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1242de460>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      3.0\n2      3.0\n3      3.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8     10.0\n9      4.0\n10     3.0\n11     3.0\n12     3.0\n13     3.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18    10.0\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1242de100>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      3.0\n1      3.0\n2      3.0\n3      1.0\n4      2.0\n5      4.0\n6     10.0\n7     10.0\n8      4.0\n9      NaN\n10     3.0\n11     3.0\n12     3.0\n13     1.0\n14     2.0\n15     4.0\n16    10.0\n17    10.0\n18     4.0\n19     NaN\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1242de460>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1242de7c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1242de7c0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1242de4c0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1242de7c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1242de7c0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1242de4c0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bb31910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bb31910>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bb316d0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bb31910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bb31910>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      1.0\n2      1.0\n3      1.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      4.0\n9      4.0\n10     3.0\n11     1.0\n12     1.0\n13     1.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     4.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bb31250>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      1.0\n2      1.0\n3      1.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      4.0\n9      4.0\n10     3.0\n11     1.0\n12     1.0\n13     1.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     4.0\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bb316d0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      NaN\n1      3.0\n2      1.0\n3      1.0\n4      1.0\n5      1.0\n6      2.0\n7      4.0\n8     10.0\n9      4.0\n10     NaN\n11     3.0\n12     1.0\n13     1.0\n14     1.0\n15     1.0\n16     2.0\n17     4.0\n18    10.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bb31250>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bb31760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bb31760>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bb31ac0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bb31760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bb31760>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bb31ac0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x123b3beb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x123b3beb0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x123b3bac0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x123b3beb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x123b3beb0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      1.0\n2      1.0\n3      1.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      4.0\n9      4.0\n10     3.0\n11     1.0\n12     1.0\n13     1.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     4.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x123b3b490>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      1.0\n2      1.0\n3      1.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      4.0\n9      4.0\n10     3.0\n11     1.0\n12     1.0\n13     1.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     4.0\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x123b3bac0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      1.0\n1      1.0\n2      1.0\n3      1.0\n4      2.0\n5      4.0\n6     10.0\n7      4.0\n8      4.0\n9      NaN\n10     1.0\n11     1.0\n12     1.0\n13     1.0\n14     2.0\n15     4.0\n16    10.0\n17     4.0\n18     4.0\n19     NaN\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x123b3b490>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x123b3b100>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x123b3b100>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x123b3be50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x123b3b100>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x123b3b100>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x123b3be50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1245bbd90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1245bbd90>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1245bbe20>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1245bbd90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1245bbd90>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'pad'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "limit": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      NaN\n2      NaN\n3      NaN\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      NaN\n9      4.0\n10     3.0\n11     NaN\n12     NaN\n13     NaN\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     NaN\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1245bb1c0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      NaN\n2      NaN\n3      NaN\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      NaN\n9      4.0\n10     3.0\n11     NaN\n12     NaN\n13     NaN\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     NaN\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1245bbe20>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      NaN\n1      3.0\n2      NaN\n3      NaN\n4      NaN\n5      1.0\n6      2.0\n7      4.0\n8     10.0\n9      NaN\n10     NaN\n11     3.0\n12     NaN\n13     NaN\n14     NaN\n15     1.0\n16     2.0\n17     4.0\n18    10.0\n19     NaN\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1245bb1c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1245bb730>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1245bb730>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1245bb9d0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1245bb730>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1245bb730>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1245bb9d0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bb8c4c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bb8c4c0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bb8cf10>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bb8c4c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bb8c4c0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'pad'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "limit": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      NaN\n2      NaN\n3      NaN\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      NaN\n9      4.0\n10     3.0\n11     NaN\n12     NaN\n13     NaN\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     NaN\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bd44520>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      NaN\n2      NaN\n3      NaN\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      NaN\n9      4.0\n10     3.0\n11     NaN\n12     NaN\n13     NaN\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     NaN\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bb8cf10>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      NaN\n1      NaN\n2      NaN\n3      1.0\n4      2.0\n5      4.0\n6     10.0\n7      NaN\n8      4.0\n9      NaN\n10     NaN\n11     NaN\n12     NaN\n13     1.0\n14     2.0\n15     4.0\n16    10.0\n17     NaN\n18     4.0\n19     NaN\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bd44520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bd44820>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bd44820>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bd44520>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11bd44820>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11bd44820>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11bd44520>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x124043820>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x124043820>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1240435e0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x124043820>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x124043820>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      3.0\n2      NaN\n3      NaN\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8     10.0\n9      4.0\n10     3.0\n11     3.0\n12     NaN\n13     NaN\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18    10.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x124043160>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      3.0\n2      NaN\n3      NaN\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8     10.0\n9      4.0\n10     3.0\n11     3.0\n12     NaN\n13     NaN\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18    10.0\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1240435e0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      NaN\n1      3.0\n2      3.0\n3      NaN\n4      NaN\n5      1.0\n6      2.0\n7      4.0\n8     10.0\n9     10.0\n10     NaN\n11     3.0\n12     3.0\n13     NaN\n14     NaN\n15     1.0\n16     2.0\n17     4.0\n18    10.0\n19    10.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x124043160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1240436a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1240436a0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x124043700>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1240436a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1240436a0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x124043700>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x124616730>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x124616730>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1246164f0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x124616730>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x124616730>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      3.0\n2      NaN\n3      NaN\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8     10.0\n9      4.0\n10     3.0\n11     3.0\n12     NaN\n13     NaN\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18    10.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x124616070>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      3.0\n2      NaN\n3      NaN\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8     10.0\n9      4.0\n10     3.0\n11     3.0\n12     NaN\n13     NaN\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18    10.0\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1246164f0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      3.0\n1      NaN\n2      NaN\n3      1.0\n4      2.0\n5      4.0\n6     10.0\n7     10.0\n8      4.0\n9      NaN\n10     3.0\n11     NaN\n12     NaN\n13     1.0\n14     2.0\n15     4.0\n16    10.0\n17    10.0\n18     4.0\n19     NaN\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x124616070>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x124616580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x124616580>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1246165e0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x124616580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x124616580>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1246165e0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x124412370>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x124412370>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x124412130>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x124412370>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x124412370>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      NaN\n2      NaN\n3      1.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      4.0\n9      4.0\n10     3.0\n11     NaN\n12     NaN\n13     1.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     4.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x124412d30>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      NaN\n2      NaN\n3      1.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      4.0\n9      4.0\n10     3.0\n11     NaN\n12     NaN\n13     1.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     4.0\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x124412130>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      NaN\n1      3.0\n2      NaN\n3      NaN\n4      1.0\n5      1.0\n6      2.0\n7      4.0\n8     10.0\n9      4.0\n10     NaN\n11     3.0\n12     NaN\n13     NaN\n14     1.0\n15     1.0\n16     2.0\n17     4.0\n18    10.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x124412d30>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1244121c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1244121c0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x124412220>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1244121c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1244121c0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x124412220>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x12466d6a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x12466d6a0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12466d4c0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x12466d6a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x12466d6a0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      NaN\n2      NaN\n3      1.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      4.0\n9      4.0\n10     3.0\n11     NaN\n12     NaN\n13     1.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     4.0\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x12466d0d0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      NaN\n2      NaN\n3      1.0\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      4.0\n9      4.0\n10     3.0\n11     NaN\n12     NaN\n13     1.0\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     4.0\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12466d4c0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      NaN\n1      NaN\n2      1.0\n3      1.0\n4      2.0\n5      4.0\n6     10.0\n7      4.0\n8      4.0\n9      NaN\n10     NaN\n11     NaN\n12     1.0\n13     1.0\n14     2.0\n15     4.0\n16    10.0\n17     4.0\n18     4.0\n19     NaN\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x12466d0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x12466d430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x12466d430>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12466d250>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x12466d430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x12466d430>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12466d250>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11b900fd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b900fd0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b900eb0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x11b900fd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b900fd0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'pad'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "limit": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      NaN\n2      NaN\n3      NaN\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      NaN\n9      4.0\n10     3.0\n11     NaN\n12     NaN\n13     NaN\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     NaN\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1246b45e0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      NaN\n2      NaN\n3      NaN\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      NaN\n9      4.0\n10     3.0\n11     NaN\n12     NaN\n13     NaN\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     NaN\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b900eb0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      NaN\n1      3.0\n2      NaN\n3      NaN\n4      NaN\n5      1.0\n6      2.0\n7      4.0\n8     10.0\n9      NaN\n10     NaN\n11     3.0\n12     NaN\n13     NaN\n14     NaN\n15     1.0\n16     2.0\n17     4.0\n18    10.0\n19     NaN\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1246b45e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1246b4880>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1246b4880>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1246b45e0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1246b4880>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1246b4880>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1246b45e0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1244cc6a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1244cc6a0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1244cc5b0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1244cc6a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1244cc6a0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'pad'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "limit": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "0      3.0\n1      NaN\n2      NaN\n3      NaN\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      NaN\n9      4.0\n10     3.0\n11     NaN\n12     NaN\n13     NaN\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     NaN\n19     4.0\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1244cceb0>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of 0      3.0\n1      NaN\n2      NaN\n3      NaN\n4      1.0\n5      2.0\n6      4.0\n7     10.0\n8      NaN\n9      4.0\n10     3.0\n11     NaN\n12     NaN\n13     NaN\n14     1.0\n15     2.0\n16     4.0\n17    10.0\n18     NaN\n19     4.0\nName: vals, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1244cc5b0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "0      NaN\n1      NaN\n2      NaN\n3      1.0\n4      2.0\n5      4.0\n6     10.0\n7      NaN\n8      4.0\n9      NaN\n10     NaN\n11     NaN\n12     NaN\n13     1.0\n14     2.0\n15     4.0\n16    10.0\n17     NaN\n18     4.0\n19     NaN\nName: vals, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1244cceb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1244cc370>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1244cc370>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1244cc940>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.apply": {
                                    "variable_value": "<bound method SeriesGroupBy.apply of <pandas.core.groupby.generic.SeriesGroupBy object at 0x1244cc370>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1244cc370>",
                                    "variable_type": "SeriesGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1244cc940>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def generate_property(name: str, klass: Type[FrameOrSeries]):\n    \"\"\"\n    Create a property for a GroupBy subclass to dispatch to DataFrame/Series.\n\n    Parameters\n    ----------\n    name : str\n    klass : {DataFrame, Series}\n\n    Returns\n    -------\n    property\n    \"\"\"\n\n    def prop(self):\n        return self._make_wrapper(name)\n\n    parent_method = getattr(klass, name)\n    prop.__doc__ = parent_method.__doc__ or \"\"\n    prop.__name__ = name\n    return property(prop)",
                "def pin_whitelisted_properties(klass: Type[FrameOrSeries], whitelist: FrozenSet[str]):\n    \"\"\"\n    Create GroupBy member defs for DataFrame/Series names in a whitelist.\n\n    Parameters\n    ----------\n    klass : DataFrame or Series class\n        class where members are defined.\n    whitelist : frozenset[str]\n        Set of names of klass methods to be constructed\n\n    Returns\n    -------\n    class decorator\n\n    Notes\n    -----\n    Since we don't want to override methods explicitly defined in the\n    base class, any such name is skipped.\n    \"\"\"\n\n    def pinner(cls):\n        for name in whitelist:\n            if hasattr(cls, name):\n                # don't override anything that was explicitly defined\n                #  in the base class\n                continue\n\n            prop = generate_property(name, klass)\n            setattr(cls, name, prop)\n\n        return cls\n\n    return pinner",
                "def _is_multi_agg_with_relabel(**kwargs) -> bool:\n    \"\"\"\n    Check whether kwargs passed to .agg look like multi-agg with relabeling.\n\n    Parameters\n    ----------\n    **kwargs : dict\n\n    Returns\n    -------\n    bool\n\n    Examples\n    --------\n    >>> _is_multi_agg_with_relabel(a='max')\n    False\n    >>> _is_multi_agg_with_relabel(a_max=('a', 'max'),\n    ...                            a_min=('a', 'min'))\n    True\n    >>> _is_multi_agg_with_relabel()\n    False\n    \"\"\"\n    return all(isinstance(v, tuple) and len(v) == 2 for v in kwargs.values()) and (\n        len(kwargs) > 0\n    )",
                "def _normalize_keyword_aggregation(kwargs):\n    \"\"\"\n    Normalize user-provided \"named aggregation\" kwargs.\n\n    Transforms from the new ``Mapping[str, NamedAgg]`` style kwargs\n    to the old OrderedDict[str, List[scalar]]].\n\n    Parameters\n    ----------\n    kwargs : dict\n\n    Returns\n    -------\n    aggspec : dict\n        The transformed kwargs.\n    columns : List[str]\n        The user-provided keys.\n    col_idx_order : List[int]\n        List of columns indices.\n\n    Examples\n    --------\n    >>> _normalize_keyword_aggregation({'output': ('input', 'sum')})\n    (OrderedDict([('input', ['sum'])]), ('output',), [('input', 'sum')])\n    \"\"\"\n    # Normalize the aggregation functions as Mapping[column, List[func]],\n    # process normally, then fixup the names.\n    # TODO: aggspec type: typing.OrderedDict[str, List[AggScalar]]\n    # May be hitting https://github.com/python/mypy/issues/5958\n    # saying it doesn't have an attribute __name__\n    aggspec = defaultdict(list)\n    order = []\n    columns, pairs = list(zip(*kwargs.items()))\n\n    for name, (column, aggfunc) in zip(columns, pairs):\n        aggspec[column].append(aggfunc)\n        order.append((column, com.get_callable_name(aggfunc) or aggfunc))\n\n    # uniquify aggfunc name if duplicated in order list\n    uniquified_order = _make_unique(order)\n\n    # GH 25719, due to aggspec will change the order of assigned columns in aggregation\n    # uniquified_aggspec will store uniquified order list and will compare it with order\n    # based on index\n    aggspec_order = [\n        (column, com.get_callable_name(aggfunc) or aggfunc)\n        for column, aggfuncs in aggspec.items()\n        for aggfunc in aggfuncs\n    ]\n    uniquified_aggspec = _make_unique(aggspec_order)\n\n    # get the new indice of columns by comparison\n    col_idx_order = Index(uniquified_aggspec).get_indexer(uniquified_order)\n    return aggspec, columns, col_idx_order",
                "def _make_unique(seq):\n    \"\"\"Uniquify aggfunc name of the pairs in the order list\n\n    Examples:\n    --------\n    >>> _make_unique([('a', '<lambda>'), ('a', '<lambda>'), ('b', '<lambda>')])\n    [('a', '<lambda>_0'), ('a', '<lambda>_1'), ('b', '<lambda>')]\n    \"\"\"\n    return [\n        (pair[0], \"_\".join([pair[1], str(seq[:i].count(pair))]))\n        if seq.count(pair) > 1\n        else pair\n        for i, pair in enumerate(seq)\n    ]",
                "def _managle_lambda_list(aggfuncs: Sequence[Any]) -> Sequence[Any]:\n    \"\"\"\n    Possibly mangle a list of aggfuncs.\n\n    Parameters\n    ----------\n    aggfuncs : Sequence\n\n    Returns\n    -------\n    mangled: list-like\n        A new AggSpec sequence, where lambdas have been converted\n        to have unique names.\n\n    Notes\n    -----\n    If just one aggfunc is passed, the name will not be mangled.\n    \"\"\"\n    if len(aggfuncs) <= 1:\n        # don't mangle for .agg([lambda x: .])\n        return aggfuncs\n    i = 0\n    mangled_aggfuncs = []\n    for aggfunc in aggfuncs:\n        if com.get_callable_name(aggfunc) == \"<lambda>\":\n            aggfunc = partial(aggfunc)\n            aggfunc.__name__ = f\"<lambda_{i}>\"\n            i += 1\n        mangled_aggfuncs.append(aggfunc)\n\n    return mangled_aggfuncs",
                "def _maybe_mangle_lambdas(agg_spec: Any) -> Any:\n    \"\"\"\n    Make new lambdas with unique names.\n\n    Parameters\n    ----------\n    agg_spec : Any\n        An argument to GroupBy.agg.\n        Non-dict-like `agg_spec` are pass through as is.\n        For dict-like `agg_spec` a new spec is returned\n        with name-mangled lambdas.\n\n    Returns\n    -------\n    mangled : Any\n        Same type as the input.\n\n    Examples\n    --------\n    >>> _maybe_mangle_lambdas('sum')\n    'sum'\n\n    >>> _maybe_mangle_lambdas([lambda: 1, lambda: 2])  # doctest: +SKIP\n    [<function __main__.<lambda_0>,\n     <function pandas...._make_lambda.<locals>.f(*args, **kwargs)>]\n    \"\"\"\n    is_dict = is_dict_like(agg_spec)\n    if not (is_dict or is_list_like(agg_spec)):\n        return agg_spec\n    mangled_aggspec = type(agg_spec)()  # dict or OrderdDict\n\n    if is_dict:\n        for key, aggfuncs in agg_spec.items():\n            if is_list_like(aggfuncs) and not is_dict_like(aggfuncs):\n                mangled_aggfuncs = _managle_lambda_list(aggfuncs)\n            else:\n                mangled_aggfuncs = aggfuncs\n\n            mangled_aggspec[key] = mangled_aggfuncs\n    else:\n        mangled_aggspec = _managle_lambda_list(agg_spec)\n\n    return mangled_aggspec",
                "def _recast_datetimelike_result(result: DataFrame) -> DataFrame:\n    \"\"\"\n    If we have date/time like in the original, then coerce dates\n    as we are stacking can easily have object dtypes here.\n\n    Parameters\n    ----------\n    result : DataFrame\n\n    Returns\n    -------\n    DataFrame\n\n    Notes\n    -----\n    - Assumes Groupby._selected_obj has ndim==2 and at least one\n    datetimelike column\n    \"\"\"\n    result = result.copy()\n\n    obj_cols = [\n        idx\n        for idx in range(len(result.columns))\n        if is_object_dtype(result.dtypes.iloc[idx])\n    ]\n\n    # See GH#26285\n    for n in obj_cols:\n        converted = maybe_convert_objects(\n            result.iloc[:, n].values, convert_numeric=False\n        )\n\n        result.iloc[:, n] = converted\n    return result",
                "def prop(self):\n    return self._make_wrapper(name)",
                "def pinner(cls):\n    for name in whitelist:\n        if hasattr(cls, name):\n            # don't override anything that was explicitly defined\n            #  in the base class\n            continue\n\n        prop = generate_property(name, klass)\n        setattr(cls, name, prop)\n\n    return cls",
                "def _iterate_slices(self) -> Iterable[Series]:\n    yield self._selected_obj",
                "@property\ndef _selection_name(self):\n    \"\"\"\n    since we are a series, we by definition only have\n    a single name, but may be the result of a selection or\n    the name of our object\n    \"\"\"\n    if self._selection is None:\n        return self.obj.name\n    else:\n        return self._selection",
                "@Appender(\n    _apply_docs[\"template\"].format(\n        input=\"series\", examples=_apply_docs[\"series_examples\"]\n    )\n)\ndef apply(self, func, *args, **kwargs):\n    return super().apply(func, *args, **kwargs)",
                "@Substitution(\n    see_also=_agg_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\",\n    klass=\"Series\",\n    axis=\"\",\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, func=None, *args, **kwargs):\n\n    relabeling = func is None\n    columns = None\n    no_arg_message = \"Must provide 'func' or named aggregation **kwargs.\"\n    if relabeling:\n        columns = list(kwargs)\n        func = [kwargs[col] for col in columns]\n        kwargs = {}\n        if not columns:\n            raise TypeError(no_arg_message)\n\n    if isinstance(func, str):\n        return getattr(self, func)(*args, **kwargs)\n\n    elif isinstance(func, abc.Iterable):\n        # Catch instances of lists / tuples\n        # but not the class list / tuple itself.\n        func = _maybe_mangle_lambdas(func)\n        ret = self._aggregate_multiple_funcs(func)\n        if relabeling:\n            ret.columns = columns\n    else:\n        cyfunc = self._get_cython_func(func)\n        if cyfunc and not args and not kwargs:\n            return getattr(self, cyfunc)()\n\n        if self.grouper.nkeys > 1:\n            return self._python_agg_general(func, *args, **kwargs)\n\n        try:\n            return self._python_agg_general(func, *args, **kwargs)\n        except (ValueError, KeyError):\n            # TODO: KeyError is raised in _python_agg_general,\n            #  see see test_groupby.test_basic\n            result = self._aggregate_named(func, *args, **kwargs)\n\n        index = Index(sorted(result), name=self.grouper.names[0])\n        ret = create_series_with_explicit_dtype(\n            result, index=index, dtype_if_empty=object\n        )\n\n    if not self.as_index:  # pragma: no cover\n        print(\"Warning, ignoring as_index=True\")\n\n    if isinstance(ret, dict):\n        from pandas import concat\n\n        ret = concat(ret, axis=1)\n    return ret",
                "def _aggregate_multiple_funcs(self, arg):\n    if isinstance(arg, dict):\n\n        # show the deprecation, but only if we\n        # have not shown a higher level one\n        # GH 15931\n        if isinstance(self._selected_obj, Series):\n            raise SpecificationError(\"nested renamer is not supported\")\n\n        columns = list(arg.keys())\n        arg = arg.items()\n    elif any(isinstance(x, (tuple, list)) for x in arg):\n        arg = [(x, x) if not isinstance(x, (tuple, list)) else x for x in arg]\n\n        # indicated column order\n        columns = next(zip(*arg))\n    else:\n        # list of functions / function names\n        columns = []\n        for f in arg:\n            columns.append(com.get_callable_name(f) or f)\n\n        arg = zip(columns, arg)\n\n    results = OrderedDict()\n    for name, func in arg:\n        obj = self\n\n        # reset the cache so that we\n        # only include the named selection\n        if name in self._selected_obj:\n            obj = copy.copy(obj)\n            obj._reset_cache()\n            obj._selection = name\n        results[name] = obj.aggregate(func)\n\n    if any(isinstance(x, DataFrame) for x in results.values()):\n        # let higher level handle\n        return results\n\n    return DataFrame(results, columns=columns)",
                "def _wrap_series_output(\n    self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]], index: Index,\n) -> Union[Series, DataFrame]:\n    \"\"\"\n    Wraps the output of a SeriesGroupBy operation into the expected result.\n\n    Parameters\n    ----------\n    output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n        Data to wrap.\n    index : pd.Index\n        Index to apply to the output.\n\n    Returns\n    -------\n    Series or DataFrame\n\n    Notes\n    -----\n    In the vast majority of cases output and columns will only contain one\n    element. The exception is operations that expand dimensions, like ohlc.\n    \"\"\"\n    indexed_output = {key.position: val for key, val in output.items()}\n    columns = Index(key.label for key in output)\n\n    result: Union[Series, DataFrame]\n    if len(output) > 1:\n        result = DataFrame(indexed_output, index=index)\n        result.columns = columns\n    else:\n        result = Series(indexed_output[0], index=index, name=columns[0])\n\n    return result",
                "def _wrap_aggregated_output(\n    self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]\n) -> Union[Series, DataFrame]:\n    \"\"\"\n    Wraps the output of a SeriesGroupBy aggregation into the expected result.\n\n    Parameters\n    ----------\n    output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n        Data to wrap.\n\n    Returns\n    -------\n    Series or DataFrame\n\n    Notes\n    -----\n    In the vast majority of cases output will only contain one element.\n    The exception is operations that expand dimensions, like ohlc.\n    \"\"\"\n    result = self._wrap_series_output(\n        output=output, index=self.grouper.result_index\n    )\n    return self._reindex_output(result)._convert(datetime=True)",
                "def _wrap_transformed_output(\n    self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]\n) -> Series:\n    \"\"\"\n    Wraps the output of a SeriesGroupBy aggregation into the expected result.\n\n    Parameters\n    ----------\n    output : dict[base.OutputKey, Union[Series, np.ndarray]]\n        Dict with a sole key of 0 and a value of the result values.\n\n    Returns\n    -------\n    Series\n\n    Notes\n    -----\n    output should always contain one element. It is specified as a dict\n    for consistency with DataFrame methods and _wrap_aggregated_output.\n    \"\"\"\n    assert len(output) == 1\n    result = self._wrap_series_output(output=output, index=self.obj.index)\n\n    # No transformations increase the ndim of the result\n    assert isinstance(result, Series)\n    return result",
                "def _wrap_applied_output(self, keys, values, not_indexed_same=False):\n    if len(keys) == 0:\n        # GH #6265\n        return Series([], name=self._selection_name, index=keys, dtype=np.float64)\n\n    def _get_index() -> Index:\n        if self.grouper.nkeys > 1:\n            index = MultiIndex.from_tuples(keys, names=self.grouper.names)\n        else:\n            index = Index(keys, name=self.grouper.names[0])\n        return index\n\n    if isinstance(values[0], dict):\n        # GH #823 #24880\n        index = _get_index()\n        result = self._reindex_output(DataFrame(values, index=index))\n        # if self.observed is False,\n        # keep all-NaN rows created while re-indexing\n        result = result.stack(dropna=self.observed)\n        result.name = self._selection_name\n        return result\n\n    if isinstance(values[0], Series):\n        return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n    elif isinstance(values[0], DataFrame):\n        # possible that Series -> DataFrame by applied function\n        return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n    else:\n        # GH #6265 #24880\n        result = Series(data=values, index=_get_index(), name=self._selection_name)\n        return self._reindex_output(result)",
                "def _aggregate_named(self, func, *args, **kwargs):\n    result = OrderedDict()\n\n    for name, group in self:\n        group.name = name\n        output = func(group, *args, **kwargs)\n        if isinstance(output, (Series, Index, np.ndarray)):\n            raise ValueError(\"Must produce aggregated value\")\n        result[name] = output\n\n    return result",
                "@Substitution(klass=\"Series\", selected=\"A.\")\n@Appender(_transform_template)\ndef transform(self, func, *args, **kwargs):\n    func = self._get_cython_func(func) or func\n\n    if not isinstance(func, str):\n        return self._transform_general(func, *args, **kwargs)\n\n    elif func not in base.transform_kernel_whitelist:\n        msg = f\"'{func}' is not a valid function name for transform(name)\"\n        raise ValueError(msg)\n    elif func in base.cythonized_kernels:\n        # cythonized transform or canned \"agg+broadcast\"\n        return getattr(self, func)(*args, **kwargs)\n\n    # If func is a reduction, we need to broadcast the\n    # result to the whole group. Compute func result\n    # and deal with possible broadcasting below.\n    result = getattr(self, func)(*args, **kwargs)\n    return self._transform_fast(result, func)",
                "def _transform_general(self, func, *args, **kwargs):\n    \"\"\"\n    Transform with a non-str `func`.\n    \"\"\"\n    klass = type(self._selected_obj)\n\n    results = []\n    for name, group in self:\n        object.__setattr__(group, \"name\", name)\n        res = func(group, *args, **kwargs)\n\n        if isinstance(res, (ABCDataFrame, ABCSeries)):\n            res = res._values\n\n        indexer = self._get_index(name)\n        ser = klass(res, indexer)\n        results.append(ser)\n\n    # check for empty \"results\" to avoid concat ValueError\n    if results:\n        from pandas.core.reshape.concat import concat\n\n        result = concat(results).sort_index()\n    else:\n        result = Series(dtype=np.float64)\n\n    # we will only try to coerce the result type if\n    # we have a numeric dtype, as these are *always* user-defined funcs\n    # the cython take a different path (and casting)\n    dtype = self._selected_obj.dtype\n    if is_numeric_dtype(dtype):\n        result = maybe_downcast_to_dtype(result, dtype)\n\n    result.name = self._selected_obj.name\n    result.index = self._selected_obj.index\n    return result",
                "def _transform_fast(self, result, func_nm: str) -> Series:\n    \"\"\"\n    fast version of transform, only applicable to\n    builtin/cythonizable functions\n    \"\"\"\n    ids, _, ngroup = self.grouper.group_info\n    cast = self._transform_should_cast(func_nm)\n    out = algorithms.take_1d(result._values, ids)\n    if cast:\n        out = self._try_cast(out, self.obj)\n    return Series(out, index=self.obj.index, name=self.obj.name)",
                "def filter(self, func, dropna=True, *args, **kwargs):\n    \"\"\"\n    Return a copy of a Series excluding elements from groups that\n    do not satisfy the boolean criterion specified by func.\n\n    Parameters\n    ----------\n    func : function\n        To apply to each group. Should return True or False.\n    dropna : Drop groups that do not pass the filter. True by default;\n        if False, groups that evaluate False are filled with NaNs.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',\n    ...                           'foo', 'bar'],\n    ...                    'B' : [1, 2, 3, 4, 5, 6],\n    ...                    'C' : [2.0, 5., 8., 1., 2., 9.]})\n    >>> grouped = df.groupby('A')\n    >>> df.groupby('A').B.filter(lambda x: x.mean() > 3.)\n    1    2\n    3    4\n    5    6\n    Name: B, dtype: int64\n\n    Returns\n    -------\n    filtered : Series\n    \"\"\"\n    if isinstance(func, str):\n        wrapper = lambda x: getattr(x, func)(*args, **kwargs)\n    else:\n        wrapper = lambda x: func(x, *args, **kwargs)\n\n    # Interpret np.nan as False.\n    def true_and_notna(x, *args, **kwargs) -> bool:\n        b = wrapper(x, *args, **kwargs)\n        return b and notna(b)\n\n    try:\n        indices = [\n            self._get_index(name) for name, group in self if true_and_notna(group)\n        ]\n    except (ValueError, TypeError):\n        raise TypeError(\"the filter must return a boolean result\")\n\n    filtered = self._apply_filter(indices, dropna)\n    return filtered",
                "def nunique(self, dropna: bool = True) -> Series:\n    \"\"\"\n    Return number of unique elements in the group.\n\n    Returns\n    -------\n    Series\n        Number of unique values within each group.\n    \"\"\"\n    ids, _, _ = self.grouper.group_info\n\n    val = self.obj._internal_get_values()\n\n    # GH 27951\n    # temporary fix while we wait for NumPy bug 12629 to be fixed\n    val[isna(val)] = np.datetime64(\"NaT\")\n\n    try:\n        sorter = np.lexsort((val, ids))\n    except TypeError:  # catches object dtypes\n        msg = f\"val.dtype must be object, got {val.dtype}\"\n        assert val.dtype == object, msg\n        val, _ = algorithms.factorize(val, sort=False)\n        sorter = np.lexsort((val, ids))\n        _isna = lambda a: a == -1\n    else:\n        _isna = isna\n\n    ids, val = ids[sorter], val[sorter]\n\n    # group boundaries are where group ids change\n    # unique observations are where sorted values change\n    idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]\n    inc = np.r_[1, val[1:] != val[:-1]]\n\n    # 1st item of each group is a new unique observation\n    mask = _isna(val)\n    if dropna:\n        inc[idx] = 1\n        inc[mask] = 0\n    else:\n        inc[mask & np.r_[False, mask[:-1]]] = 0\n        inc[idx] = 1\n\n    out = np.add.reduceat(inc, idx).astype(\"int64\", copy=False)\n    if len(ids):\n        # NaN/NaT group exists if the head of ids is -1,\n        # so remove it from res and exclude its index from idx\n        if ids[0] == -1:\n            res = out[1:]\n            idx = idx[np.flatnonzero(idx)]\n        else:\n            res = out\n    else:\n        res = out[1:]\n    ri = self.grouper.result_index\n\n    # we might have duplications among the bins\n    if len(res) != len(ri):\n        res, out = np.zeros(len(ri), dtype=out.dtype), res\n        res[ids[idx]] = out\n\n    result = Series(res, index=ri, name=self._selection_name)\n    return self._reindex_output(result, fill_value=0)",
                "@Appender(Series.describe.__doc__)\ndef describe(self, **kwargs):\n    result = self.apply(lambda x: x.describe(**kwargs))\n    if self.axis == 1:\n        return result.T\n    return result.unstack()",
                "def value_counts(\n    self, normalize=False, sort=True, ascending=False, bins=None, dropna=True\n):\n\n    from pandas.core.reshape.tile import cut\n    from pandas.core.reshape.merge import _get_join_indexers\n\n    if bins is not None and not np.iterable(bins):\n        # scalar bins cannot be done at top level\n        # in a backward compatible way\n        return self.apply(\n            Series.value_counts,\n            normalize=normalize,\n            sort=sort,\n            ascending=ascending,\n            bins=bins,\n        )\n\n    ids, _, _ = self.grouper.group_info\n    val = self.obj._internal_get_values()\n\n    # groupby removes null keys from groupings\n    mask = ids != -1\n    ids, val = ids[mask], val[mask]\n\n    if bins is None:\n        lab, lev = algorithms.factorize(val, sort=True)\n        llab = lambda lab, inc: lab[inc]\n    else:\n\n        # lab is a Categorical with categories an IntervalIndex\n        lab = cut(Series(val), bins, include_lowest=True)\n        lev = lab.cat.categories\n        lab = lev.take(lab.cat.codes)\n        llab = lambda lab, inc: lab[inc]._multiindex.codes[-1]\n\n    if is_interval_dtype(lab):\n        # TODO: should we do this inside II?\n        sorter = np.lexsort((lab.left, lab.right, ids))\n    else:\n        sorter = np.lexsort((lab, ids))\n\n    ids, lab = ids[sorter], lab[sorter]\n\n    # group boundaries are where group ids change\n    idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]\n\n    # new values are where sorted labels change\n    lchanges = llab(lab, slice(1, None)) != llab(lab, slice(None, -1))\n    inc = np.r_[True, lchanges]\n    inc[idx] = True  # group boundaries are also new values\n    out = np.diff(np.nonzero(np.r_[inc, True])[0])  # value counts\n\n    # num. of times each group should be repeated\n    rep = partial(np.repeat, repeats=np.add.reduceat(inc, idx))\n\n    # multi-index components\n    codes = self.grouper.reconstructed_codes\n    codes = [rep(level_codes) for level_codes in codes] + [llab(lab, inc)]\n    levels = [ping.group_index for ping in self.grouper.groupings] + [lev]\n    names = self.grouper.names + [self._selection_name]\n\n    if dropna:\n        mask = codes[-1] != -1\n        if mask.all():\n            dropna = False\n        else:\n            out, codes = out[mask], [level_codes[mask] for level_codes in codes]\n\n    if normalize:\n        out = out.astype(\"float\")\n        d = np.diff(np.r_[idx, len(ids)])\n        if dropna:\n            m = ids[lab == -1]\n            np.add.at(d, m, -1)\n            acc = rep(d)[mask]\n        else:\n            acc = rep(d)\n        out /= acc\n\n    if sort and bins is None:\n        cat = ids[inc][mask] if dropna else ids[inc]\n        sorter = np.lexsort((out if ascending else -out, cat))\n        out, codes[-1] = out[sorter], codes[-1][sorter]\n\n    if bins is None:\n        mi = MultiIndex(\n            levels=levels, codes=codes, names=names, verify_integrity=False\n        )\n\n        if is_integer_dtype(out):\n            out = ensure_int64(out)\n        return Series(out, index=mi, name=self._selection_name)\n\n    # for compat. with libgroupby.value_counts need to ensure every\n    # bin is present at every index level, null filled with zeros\n    diff = np.zeros(len(out), dtype=\"bool\")\n    for level_codes in codes[:-1]:\n        diff |= np.r_[True, level_codes[1:] != level_codes[:-1]]\n\n    ncat, nbin = diff.sum(), len(levels[-1])\n\n    left = [np.repeat(np.arange(ncat), nbin), np.tile(np.arange(nbin), ncat)]\n\n    right = [diff.cumsum() - 1, codes[-1]]\n\n    _, idx = _get_join_indexers(left, right, sort=False, how=\"left\")\n    out = np.where(idx != -1, out[idx], 0)\n\n    if sort:\n        sorter = np.lexsort((out if ascending else -out, left[0]))\n        out, left[-1] = out[sorter], left[-1][sorter]\n\n    # build the multi-index w/ full levels\n    def build_codes(lev_codes: np.ndarray) -> np.ndarray:\n        return np.repeat(lev_codes[diff], nbin)\n\n    codes = [build_codes(lev_codes) for lev_codes in codes[:-1]]\n    codes.append(left[-1])\n\n    mi = MultiIndex(levels=levels, codes=codes, names=names, verify_integrity=False)\n\n    if is_integer_dtype(out):\n        out = ensure_int64(out)\n    return Series(out, index=mi, name=self._selection_name)",
                "def count(self) -> Series:\n    \"\"\"\n    Compute count of group, excluding missing values.\n\n    Returns\n    -------\n    Series\n        Count of values within each group.\n    \"\"\"\n    ids, _, ngroups = self.grouper.group_info\n    val = self.obj._internal_get_values()\n\n    mask = (ids != -1) & ~isna(val)\n    ids = ensure_platform_int(ids)\n    minlength = ngroups or 0\n    out = np.bincount(ids[mask], minlength=minlength)\n\n    result = Series(\n        out,\n        index=self.grouper.result_index,\n        name=self._selection_name,\n        dtype=\"int64\",\n    )\n    return self._reindex_output(result, fill_value=0)",
                "def _apply_to_column_groupbys(self, func):\n    \"\"\" return a pass thru \"\"\"\n    return func(self)",
                "def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None):\n    \"\"\"Calculate pct_change of each value to previous entry in group\"\"\"\n    # TODO: Remove this conditional when #23918 is fixed\n    if freq:\n        return self.apply(\n            lambda x: x.pct_change(\n                periods=periods, fill_method=fill_method, limit=limit, freq=freq\n            )\n        )\n    filled = getattr(self, fill_method)(limit=limit)\n    fill_grp = filled.groupby(self.grouper.codes)\n    shifted = fill_grp.shift(periods=periods, freq=freq)\n\n    return (filled / shifted) - 1",
                "@Substitution(\n    see_also=_agg_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\",\n    klass=\"DataFrame\",\n    axis=\"\",\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, func=None, *args, **kwargs):\n\n    relabeling = func is None and _is_multi_agg_with_relabel(**kwargs)\n    if relabeling:\n        func, columns, order = _normalize_keyword_aggregation(kwargs)\n\n        kwargs = {}\n    elif isinstance(func, list) and len(func) > len(set(func)):\n\n        # GH 28426 will raise error if duplicated function names are used and\n        # there is no reassigned name\n        raise SpecificationError(\n            \"Function names must be unique if there is no new column \"\n            \"names assigned\"\n        )\n    elif func is None:\n        # nicer error message\n        raise TypeError(\"Must provide 'func' or tuples of '(column, aggfunc).\")\n\n    func = _maybe_mangle_lambdas(func)\n\n    result, how = self._aggregate(func, *args, **kwargs)\n    if how is None:\n        return result\n\n    if result is None:\n\n        # grouper specific aggregations\n        if self.grouper.nkeys > 1:\n            return self._python_agg_general(func, *args, **kwargs)\n        elif args or kwargs:\n            result = self._aggregate_frame(func, *args, **kwargs)\n\n        elif self.axis == 1:\n            # _aggregate_multiple_funcs does not allow self.axis == 1\n            result = self._aggregate_frame(func)\n\n        else:\n\n            # try to treat as if we are passing a list\n            try:\n                result = self._aggregate_multiple_funcs([func], _axis=self.axis)\n            except ValueError as err:\n                if \"no results\" not in str(err):\n                    # raised directly by _aggregate_multiple_funcs\n                    raise\n                result = self._aggregate_frame(func)\n            else:\n                result.columns = Index(\n                    result.columns.levels[0], name=self._selected_obj.columns.name\n                )\n\n    if not self.as_index:\n        self._insert_inaxis_grouper_inplace(result)\n        result.index = np.arange(len(result))\n\n    if relabeling:\n\n        # used reordered index of columns\n        result = result.iloc[:, order]\n        result.columns = columns\n\n    return result._convert(datetime=True)",
                "def _iterate_slices(self) -> Iterable[Series]:\n    obj = self._selected_obj\n    if self.axis == 1:\n        obj = obj.T\n\n    if isinstance(obj, Series) and obj.name not in self.exclusions:\n        # Occurs when doing DataFrameGroupBy(...)[\"X\"]\n        yield obj\n    else:\n        for label, values in obj.items():\n            if label in self.exclusions:\n                continue\n\n            yield values",
                "def _cython_agg_general(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> DataFrame:\n    agg_blocks, agg_items = self._cython_agg_blocks(\n        how, alt=alt, numeric_only=numeric_only, min_count=min_count\n    )\n    return self._wrap_agged_blocks(agg_blocks, items=agg_items)",
                "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    no_result = object()\n    for block in data.blocks:\n        # Avoid inheriting result from earlier in the loop\n        result = no_result\n        locs = block.mgr_locs.as_array\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            # generally if we have numeric_only=False\n            # and non-applicable functions\n            # try to python agg\n\n            if alt is None:\n                # we cannot perform the operation\n                # in an alternate way, exclude the block\n                assert how == \"ohlc\"\n                deleted_items.append(locs)\n                continue\n\n            # call our grouper again with only this block\n            obj = self.obj[data.items[locs]]\n            if obj.shape[1] == 1:\n                # Avoid call to self.values that can occur in DataFrame\n                #  reductions; see GH#28949\n                obj = obj.iloc[:, 0]\n\n            s = get_groupby(obj, self.grouper)\n            try:\n                result = s.aggregate(lambda x: alt(x, axis=self.axis))\n            except TypeError:\n                # we may have an exception in trying to aggregate\n                # continue and exclude the block\n                deleted_items.append(locs)\n                continue\n            else:\n                result = cast(DataFrame, result)\n                # unwrap DataFrame to get array\n                assert len(result._data.blocks) == 1\n                result = result._data.blocks[0].values\n                if isinstance(result, np.ndarray) and result.ndim == 1:\n                    result = result.reshape(1, -1)\n\n        finally:\n            assert not isinstance(result, DataFrame)\n\n            if result is not no_result:\n                # see if we can cast the block back to the original dtype\n                result = maybe_downcast_numeric(result, block.dtype)\n\n                if block.is_extension and isinstance(result, np.ndarray):\n                    # e.g. block.values was an IntegerArray\n                    # (1, N) case can occur if block.values was Categorical\n                    #  and result is ndarray[object]\n                    assert result.ndim == 1 or result.shape[0] == 1\n                    try:\n                        # Cast back if feasible\n                        result = type(block.values)._from_sequence(\n                            result.ravel(), dtype=block.values.dtype\n                        )\n                    except ValueError:\n                        # reshape to be valid for non-Extension Block\n                        result = result.reshape(1, -1)\n\n                agg_block: Block = block.make_block(result)\n\n        new_items.append(locs)\n        agg_blocks.append(agg_block)\n\n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n\n    # reset the locs in the blocks to correspond to our\n    # current ordering\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(np.sort(indexer))\n\n    if deleted_items:\n\n        # we need to adjust the indexer to account for the\n        # items we have removed\n        # really should be done in internals :<\n\n        deleted = np.concatenate(deleted_items)\n        ai = np.arange(len(data))\n        mask = np.zeros(len(data))\n        mask[deleted] = 1\n        indexer = (ai - mask.cumsum())[indexer]\n\n    offset = 0\n    for blk in agg_blocks:\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = indexer[offset : (offset + loc)]\n        offset += loc\n\n    return agg_blocks, agg_items",
                "def _aggregate_frame(self, func, *args, **kwargs) -> DataFrame:\n    if self.grouper.nkeys != 1:\n        raise AssertionError(\"Number of keys must be 1\")\n\n    axis = self.axis\n    obj = self._obj_with_exclusions\n\n    result: OrderedDict = OrderedDict()\n    if axis != obj._info_axis_number:\n        for name, data in self:\n            fres = func(data, *args, **kwargs)\n            result[name] = fres\n    else:\n        for name in self.indices:\n            data = self.get_group(name, obj=obj)\n            fres = func(data, *args, **kwargs)\n            result[name] = fres\n\n    return self._wrap_frame_output(result, obj)",
                "def _aggregate_item_by_item(self, func, *args, **kwargs) -> DataFrame:\n    # only for axis==0\n\n    obj = self._obj_with_exclusions\n    result: OrderedDict = OrderedDict()\n    cannot_agg = []\n    for item in obj:\n        data = obj[item]\n        colg = SeriesGroupBy(data, selection=item, grouper=self.grouper)\n\n        cast = self._transform_should_cast(func)\n        try:\n            result[item] = colg.aggregate(func, *args, **kwargs)\n\n        except ValueError as err:\n            if \"Must produce aggregated value\" in str(err):\n                # raised in _aggregate_named, handle at higher level\n                #  see test_apply_with_mutated_index\n                raise\n            # otherwise we get here from an AttributeError in _make_wrapper\n            cannot_agg.append(item)\n            continue\n\n        else:\n            if cast:\n                result[item] = self._try_cast(result[item], data)\n\n    result_columns = obj.columns\n    if cannot_agg:\n        result_columns = result_columns.drop(cannot_agg)\n\n    return DataFrame(result, columns=result_columns)",
                "def _wrap_applied_output(self, keys, values, not_indexed_same=False):\n    if len(keys) == 0:\n        return DataFrame(index=keys)\n\n    key_names = self.grouper.names\n\n    # GH12824.\n    def first_not_none(values):\n        try:\n            return next(com.not_none(*values))\n        except StopIteration:\n            return None\n\n    v = first_not_none(values)\n\n    if v is None:\n        # GH9684. If all values are None, then this will throw an error.\n        # We'd prefer it return an empty dataframe.\n        return DataFrame()\n    elif isinstance(v, DataFrame):\n        return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n    elif self.grouper.groupings is not None:\n        if len(self.grouper.groupings) > 1:\n            key_index = self.grouper.result_index\n\n        else:\n            ping = self.grouper.groupings[0]\n            if len(keys) == ping.ngroups:\n                key_index = ping.group_index\n                key_index.name = key_names[0]\n\n                key_lookup = Index(keys)\n                indexer = key_lookup.get_indexer(key_index)\n\n                # reorder the values\n                values = [values[i] for i in indexer]\n            else:\n\n                key_index = Index(keys, name=key_names[0])\n\n            # don't use the key indexer\n            if not self.as_index:\n                key_index = None\n\n        # make Nones an empty object\n        v = first_not_none(values)\n        if v is None:\n            return DataFrame()\n        elif isinstance(v, NDFrame):\n\n            # this is to silence a DeprecationWarning\n            # TODO: Remove when default dtype of empty Series is object\n            kwargs = v._construct_axes_dict()\n            if v._constructor is Series:\n                backup = create_series_with_explicit_dtype(\n                    **kwargs, dtype_if_empty=object\n                )\n            else:\n                backup = v._constructor(**kwargs)\n\n            values = [x if (x is not None) else backup for x in values]\n\n        v = values[0]\n\n        if isinstance(v, (np.ndarray, Index, Series)):\n            if isinstance(v, Series):\n                applied_index = self._selected_obj._get_axis(self.axis)\n                all_indexed_same = all_indexes_same([x.index for x in values])\n                singular_series = len(values) == 1 and applied_index.nlevels == 1\n\n                # GH3596\n                # provide a reduction (Frame -> Series) if groups are\n                # unique\n                if self.squeeze:\n                    # assign the name to this series\n                    if singular_series:\n                        values[0].name = keys[0]\n\n                        # GH2893\n                        # we have series in the values array, we want to\n                        # produce a series:\n                        # if any of the sub-series are not indexed the same\n                        # OR we don't have a multi-index and we have only a\n                        # single values\n                        return self._concat_objects(\n                            keys, values, not_indexed_same=not_indexed_same\n                        )\n\n                    # still a series\n                    # path added as of GH 5545\n                    elif all_indexed_same:\n                        from pandas.core.reshape.concat import concat\n\n                        return concat(values)\n\n                if not all_indexed_same:\n                    # GH 8467\n                    return self._concat_objects(keys, values, not_indexed_same=True)\n\n            if self.axis == 0 and isinstance(v, ABCSeries):\n                # GH6124 if the list of Series have a consistent name,\n                # then propagate that name to the result.\n                index = v.index.copy()\n                if index.name is None:\n                    # Only propagate the series name to the result\n                    # if all series have a consistent name.  If the\n                    # series do not have a consistent name, do\n                    # nothing.\n                    names = {v.name for v in values}\n                    if len(names) == 1:\n                        index.name = list(names)[0]\n\n                # normally use vstack as its faster than concat\n                # and if we have mi-columns\n                if (\n                    isinstance(v.index, MultiIndex)\n                    or key_index is None\n                    or isinstance(key_index, MultiIndex)\n                ):\n                    stacked_values = np.vstack([np.asarray(v) for v in values])\n                    result = DataFrame(\n                        stacked_values, index=key_index, columns=index\n                    )\n                else:\n                    # GH5788 instead of stacking; concat gets the\n                    # dtypes correct\n                    from pandas.core.reshape.concat import concat\n\n                    result = concat(\n                        values,\n                        keys=key_index,\n                        names=key_index.names,\n                        axis=self.axis,\n                    ).unstack()\n                    result.columns = index\n            elif isinstance(v, ABCSeries):\n                stacked_values = np.vstack([np.asarray(v) for v in values])\n                result = DataFrame(\n                    stacked_values.T, index=v.index, columns=key_index\n                )\n            else:\n                # GH#1738: values is list of arrays of unequal lengths\n                #  fall through to the outer else clause\n                # TODO: sure this is right?  we used to do this\n                #  after raising AttributeError above\n                return Series(values, index=key_index, name=self._selection_name)\n\n            # if we have date/time like in the original, then coerce dates\n            # as we are stacking can easily have object dtypes here\n            so = self._selected_obj\n            if so.ndim == 2 and so.dtypes.apply(needs_i8_conversion).any():\n                result = _recast_datetimelike_result(result)\n            else:\n                result = result._convert(datetime=True)\n\n            return self._reindex_output(result)\n\n        # values are not series or array-like but scalars\n        else:\n            # only coerce dates if we find at least 1 datetime\n            should_coerce = any(isinstance(x, Timestamp) for x in values)\n            # self._selection_name not passed through to Series as the\n            # result should not take the name of original selection\n            # of columns\n            return Series(values, index=key_index)._convert(\n                datetime=True, coerce=should_coerce\n            )\n\n    else:\n        # Handle cases like BinGrouper\n        return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)",
                "def _transform_general(self, func, *args, **kwargs):\n    from pandas.core.reshape.concat import concat\n\n    applied = []\n    obj = self._obj_with_exclusions\n    gen = self.grouper.get_iterator(obj, axis=self.axis)\n    fast_path, slow_path = self._define_paths(func, *args, **kwargs)\n\n    path = None\n    for name, group in gen:\n        object.__setattr__(group, \"name\", name)\n\n        if path is None:\n            # Try slow path and fast path.\n            try:\n                path, res = self._choose_path(fast_path, slow_path, group)\n            except TypeError:\n                return self._transform_item_by_item(obj, fast_path)\n            except ValueError:\n                msg = \"transform must return a scalar value for each group\"\n                raise ValueError(msg)\n        else:\n            res = path(group)\n\n        if isinstance(res, Series):\n\n            # we need to broadcast across the\n            # other dimension; this will preserve dtypes\n            # GH14457\n            if not np.prod(group.shape):\n                continue\n            elif res.index.is_(obj.index):\n                r = concat([res] * len(group.columns), axis=1)\n                r.columns = group.columns\n                r.index = group.index\n            else:\n                r = DataFrame(\n                    np.concatenate([res.values] * len(group.index)).reshape(\n                        group.shape\n                    ),\n                    columns=group.columns,\n                    index=group.index,\n                )\n\n            applied.append(r)\n        else:\n            applied.append(res)\n\n    concat_index = obj.columns if self.axis == 0 else obj.index\n    other_axis = 1 if self.axis == 0 else 0  # switches between 0 & 1\n    concatenated = concat(applied, axis=self.axis, verify_integrity=False)\n    concatenated = concatenated.reindex(concat_index, axis=other_axis, copy=False)\n    return self._set_result_index_ordered(concatenated)",
                "@Substitution(klass=\"DataFrame\", selected=\"\")\n@Appender(_transform_template)\ndef transform(self, func, *args, **kwargs):\n\n    # optimized transforms\n    func = self._get_cython_func(func) or func\n\n    if not isinstance(func, str):\n        return self._transform_general(func, *args, **kwargs)\n\n    elif func not in base.transform_kernel_whitelist:\n        msg = f\"'{func}' is not a valid function name for transform(name)\"\n        raise ValueError(msg)\n    elif func in base.cythonized_kernels:\n        # cythonized transformation or canned \"reduction+broadcast\"\n        return getattr(self, func)(*args, **kwargs)\n\n    # If func is a reduction, we need to broadcast the\n    # result to the whole group. Compute func result\n    # and deal with possible broadcasting below.\n    result = getattr(self, func)(*args, **kwargs)\n\n    # a reduction transform\n    if not isinstance(result, DataFrame):\n        return self._transform_general(func, *args, **kwargs)\n\n    obj = self._obj_with_exclusions\n\n    # nuisance columns\n    if not result.columns.equals(obj.columns):\n        return self._transform_general(func, *args, **kwargs)\n\n    return self._transform_fast(result, func)",
                "def _transform_fast(self, result: DataFrame, func_nm: str) -> DataFrame:\n    \"\"\"\n    Fast transform path for aggregations\n    \"\"\"\n    # if there were groups with no observations (Categorical only?)\n    # try casting data to original dtype\n    cast = self._transform_should_cast(func_nm)\n\n    obj = self._obj_with_exclusions\n\n    # for each col, reshape to to size of original frame\n    # by take operation\n    ids, _, ngroup = self.grouper.group_info\n    output = []\n    for i, _ in enumerate(result.columns):\n        res = algorithms.take_1d(result.iloc[:, i].values, ids)\n        # TODO: we have no test cases that get here with EA dtypes;\n        #  try_cast may not be needed if EAs never get here\n        if cast:\n            res = self._try_cast(res, obj.iloc[:, i])\n        output.append(res)\n\n    return DataFrame._from_arrays(output, columns=result.columns, index=obj.index)",
                "def _define_paths(self, func, *args, **kwargs):\n    if isinstance(func, str):\n        fast_path = lambda group: getattr(group, func)(*args, **kwargs)\n        slow_path = lambda group: group.apply(\n            lambda x: getattr(x, func)(*args, **kwargs), axis=self.axis\n        )\n    else:\n        fast_path = lambda group: func(group, *args, **kwargs)\n        slow_path = lambda group: group.apply(\n            lambda x: func(x, *args, **kwargs), axis=self.axis\n        )\n    return fast_path, slow_path",
                "def _choose_path(self, fast_path: Callable, slow_path: Callable, group: DataFrame):\n    path = slow_path\n    res = slow_path(group)\n\n    # if we make it here, test if we can use the fast path\n    try:\n        res_fast = fast_path(group)\n    except AssertionError:\n        raise\n    except Exception:\n        # GH#29631 For user-defined function, we cant predict what may be\n        #  raised; see test_transform.test_transform_fastpath_raises\n        return path, res\n\n    # verify fast path does not change columns (and names), otherwise\n    # its results cannot be joined with those of the slow path\n    if not isinstance(res_fast, DataFrame):\n        return path, res\n\n    if not res_fast.columns.equals(group.columns):\n        return path, res\n\n    if res_fast.equals(res):\n        path = fast_path\n\n    return path, res",
                "def _transform_item_by_item(self, obj: DataFrame, wrapper) -> DataFrame:\n    # iterate through columns\n    output = {}\n    inds = []\n    for i, col in enumerate(obj):\n        try:\n            output[col] = self[col].transform(wrapper)\n        except TypeError:\n            # e.g. trying to call nanmean with string values\n            pass\n        else:\n            inds.append(i)\n\n    if len(output) == 0:\n        raise TypeError(\"Transform function invalid for data types\")\n\n    columns = obj.columns\n    if len(output) < len(obj.columns):\n        columns = columns.take(inds)\n\n    return DataFrame(output, index=obj.index, columns=columns)",
                "def filter(self, func, dropna=True, *args, **kwargs):\n    \"\"\"\n    Return a copy of a DataFrame excluding elements from groups that\n    do not satisfy the boolean criterion specified by func.\n\n    Parameters\n    ----------\n    f : function\n        Function to apply to each subframe. Should return True or False.\n    dropna : Drop groups that do not pass the filter. True by default;\n        If False, groups that evaluate False are filled with NaNs.\n\n    Returns\n    -------\n    filtered : DataFrame\n\n    Notes\n    -----\n    Each subframe is endowed the attribute 'name' in case you need to know\n    which group you are working on.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',\n    ...                           'foo', 'bar'],\n    ...                    'B' : [1, 2, 3, 4, 5, 6],\n    ...                    'C' : [2.0, 5., 8., 1., 2., 9.]})\n    >>> grouped = df.groupby('A')\n    >>> grouped.filter(lambda x: x['B'].mean() > 3.)\n         A  B    C\n    1  bar  2  5.0\n    3  bar  4  1.0\n    5  bar  6  9.0\n    \"\"\"\n\n    indices = []\n\n    obj = self._selected_obj\n    gen = self.grouper.get_iterator(obj, axis=self.axis)\n\n    for name, group in gen:\n        object.__setattr__(group, \"name\", name)\n\n        res = func(group, *args, **kwargs)\n\n        try:\n            res = res.squeeze()\n        except AttributeError:  # allow e.g., scalars and frames to pass\n            pass\n\n        # interpret the result of the filter\n        if is_bool(res) or (is_scalar(res) and isna(res)):\n            if res and notna(res):\n                indices.append(self._get_index(name))\n        else:\n            # non scalars aren't allowed\n            raise TypeError(\n                f\"filter function returned a {type(res).__name__}, \"\n                \"but expected a scalar bool\"\n            )\n\n    return self._apply_filter(indices, dropna)",
                "def _gotitem(self, key, ndim: int, subset=None):\n    \"\"\"\n    sub-classes to define\n    return a sliced object\n\n    Parameters\n    ----------\n    key : string / list of selections\n    ndim : 1,2\n        requested ndim of result\n    subset : object, default None\n        subset to act on\n    \"\"\"\n\n    if ndim == 2:\n        if subset is None:\n            subset = self.obj\n        return DataFrameGroupBy(\n            subset,\n            self.grouper,\n            selection=key,\n            grouper=self.grouper,\n            exclusions=self.exclusions,\n            as_index=self.as_index,\n            observed=self.observed,\n        )\n    elif ndim == 1:\n        if subset is None:\n            subset = self.obj[key]\n        return SeriesGroupBy(\n            subset, selection=key, grouper=self.grouper, observed=self.observed\n        )\n\n    raise AssertionError(\"invalid ndim for _gotitem\")",
                "def _wrap_frame_output(self, result, obj) -> DataFrame:\n    result_index = self.grouper.levels[0]\n\n    if self.axis == 0:\n        return DataFrame(result, index=obj.columns, columns=result_index).T\n    else:\n        return DataFrame(result, index=obj.index, columns=result_index)",
                "def _get_data_to_aggregate(self) -> BlockManager:\n    obj = self._obj_with_exclusions\n    if self.axis == 1:\n        return obj.T._data\n    else:\n        return obj._data",
                "def _insert_inaxis_grouper_inplace(self, result):\n    # zip in reverse so we can always insert at loc 0\n    izip = zip(\n        *map(\n            reversed,\n            (\n                self.grouper.names,\n                self.grouper.get_group_levels(),\n                [grp.in_axis for grp in self.grouper.groupings],\n            ),\n        )\n    )\n\n    for name, lev, in_axis in izip:\n        if in_axis:\n            result.insert(0, name, lev)",
                "def _wrap_aggregated_output(\n    self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]\n) -> DataFrame:\n    \"\"\"\n    Wraps the output of DataFrameGroupBy aggregations into the expected result.\n\n    Parameters\n    ----------\n    output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n       Data to wrap.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    indexed_output = {key.position: val for key, val in output.items()}\n    columns = Index(key.label for key in output)\n\n    result = DataFrame(indexed_output)\n    result.columns = columns\n\n    if not self.as_index:\n        self._insert_inaxis_grouper_inplace(result)\n        result = result._consolidate()\n    else:\n        index = self.grouper.result_index\n        result.index = index\n\n    if self.axis == 1:\n        result = result.T\n\n    return self._reindex_output(result)._convert(datetime=True)",
                "def _wrap_transformed_output(\n    self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]\n) -> DataFrame:\n    \"\"\"\n    Wraps the output of DataFrameGroupBy transformations into the expected result.\n\n    Parameters\n    ----------\n    output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n        Data to wrap.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    indexed_output = {key.position: val for key, val in output.items()}\n    columns = Index(key.label for key in output)\n\n    result = DataFrame(indexed_output)\n    result.columns = columns\n    result.index = self.obj.index\n\n    return result",
                "def _wrap_agged_blocks(self, blocks: \"Sequence[Block]\", items: Index) -> DataFrame:\n    if not self.as_index:\n        index = np.arange(blocks[0].values.shape[-1])\n        mgr = BlockManager(blocks, axes=[items, index])\n        result = DataFrame(mgr)\n\n        self._insert_inaxis_grouper_inplace(result)\n        result = result._consolidate()\n    else:\n        index = self.grouper.result_index\n        mgr = BlockManager(blocks, axes=[items, index])\n        result = DataFrame(mgr)\n\n    if self.axis == 1:\n        result = result.T\n\n    return self._reindex_output(result)._convert(datetime=True)",
                "def _iterate_column_groupbys(self):\n    for i, colname in enumerate(self._selected_obj.columns):\n        yield colname, SeriesGroupBy(\n            self._selected_obj.iloc[:, i],\n            selection=colname,\n            grouper=self.grouper,\n            exclusions=self.exclusions,\n        )",
                "def _apply_to_column_groupbys(self, func):\n    from pandas.core.reshape.concat import concat\n\n    return concat(\n        (func(col_groupby) for _, col_groupby in self._iterate_column_groupbys()),\n        keys=self._selected_obj.columns,\n        axis=1,\n    )",
                "def count(self):\n    \"\"\"\n    Compute count of group, excluding missing values.\n\n    Returns\n    -------\n    DataFrame\n        Count of values within each group.\n    \"\"\"\n    data = self._get_data_to_aggregate()\n    ids, _, ngroups = self.grouper.group_info\n    mask = ids != -1\n\n    vals = (\n        (mask & ~_isna_ndarraylike(np.atleast_2d(blk.get_values())))\n        for blk in data.blocks\n    )\n    locs = (blk.mgr_locs for blk in data.blocks)\n\n    counted = (\n        lib.count_level_2d(x, labels=ids, max_bin=ngroups, axis=1) for x in vals\n    )\n    blocks = [make_block(val, placement=loc) for val, loc in zip(counted, locs)]\n\n    return self._wrap_agged_blocks(blocks, items=data.items)",
                "def nunique(self, dropna: bool = True):\n    \"\"\"\n    Return DataFrame with number of distinct observations per group for\n    each column.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't include NaN in the counts.\n\n    Returns\n    -------\n    nunique: DataFrame\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'id': ['spam', 'egg', 'egg', 'spam',\n    ...                           'ham', 'ham'],\n    ...                    'value1': [1, 5, 5, 2, 5, 5],\n    ...                    'value2': list('abbaxy')})\n    >>> df\n         id  value1 value2\n    0  spam       1      a\n    1   egg       5      b\n    2   egg       5      b\n    3  spam       2      a\n    4   ham       5      x\n    5   ham       5      y\n\n    >>> df.groupby('id').nunique()\n        id  value1  value2\n    id\n    egg    1       1       1\n    ham    1       1       2\n    spam   1       2       1\n\n    Check for rows with the same id but conflicting values:\n\n    >>> df.groupby('id').filter(lambda g: (g.nunique() > 1).any())\n         id  value1 value2\n    0  spam       1      a\n    3  spam       2      a\n    4   ham       5      x\n    5   ham       5      y\n    \"\"\"\n\n    obj = self._selected_obj\n\n    def groupby_series(obj, col=None):\n        return SeriesGroupBy(obj, selection=col, grouper=self.grouper).nunique(\n            dropna=dropna\n        )\n\n    if isinstance(obj, Series):\n        results = groupby_series(obj)\n    else:\n        # TODO: this is duplicative of how GroupBy naturally works\n        # Try to consolidate with normal wrapping functions\n        from pandas.core.reshape.concat import concat\n\n        axis_number = obj._get_axis_number(self.axis)\n        other_axis = int(not axis_number)\n        if axis_number == 0:\n            iter_func = obj.items\n        else:\n            iter_func = obj.iterrows\n\n        results = [groupby_series(content, label) for label, content in iter_func()]\n        results = concat(results, axis=1)\n\n        if axis_number == 1:\n            results = results.T\n\n        results._get_axis(other_axis).names = obj._get_axis(other_axis).names\n\n    if not self.as_index:\n        results.index = ibase.default_index(len(results))\n    return results",
                "def _get_index() -> Index:\n    if self.grouper.nkeys > 1:\n        index = MultiIndex.from_tuples(keys, names=self.grouper.names)\n    else:\n        index = Index(keys, name=self.grouper.names[0])\n    return index",
                "def true_and_notna(x, *args, **kwargs) -> bool:\n    b = wrapper(x, *args, **kwargs)\n    return b and notna(b)",
                "def build_codes(lev_codes: np.ndarray) -> np.ndarray:\n    return np.repeat(lev_codes[diff], nbin)",
                "def first_not_none(values):\n    try:\n        return next(com.not_none(*values))\n    except StopIteration:\n        return None",
                "def groupby_series(obj, col=None):\n    return SeriesGroupBy(obj, selection=col, grouper=self.grouper).nunique(\n        dropna=dropna\n    )"
            ],
            "inscope_function_signatures": [
                "generate_property(name: str, klass: Type[FrameOrSeries])",
                "pin_whitelisted_properties(klass: Type[FrameOrSeries], whitelist: FrozenSet[str])",
                "_is_multi_agg_with_relabel(**kwargs) -> bool",
                "_normalize_keyword_aggregation(kwargs)",
                "_make_unique(seq)",
                "_managle_lambda_list(aggfuncs: Sequence[Any]) -> Sequence[Any]",
                "_maybe_mangle_lambdas(agg_spec: Any) -> Any",
                "_recast_datetimelike_result(result: DataFrame) -> DataFrame",
                "prop(self)",
                "pinner(cls)",
                "_iterate_slices(self) -> Iterable[Series]",
                "_selection_name(self)",
                "apply(self, func, *args, **kwargs)",
                "aggregate(self, func=None, *args, **kwargs)",
                "_aggregate_multiple_funcs(self, arg)",
                "_wrap_series_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]], index: Index) -> Union[Series, DataFrame]",
                "_wrap_aggregated_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> Union[Series, DataFrame]",
                "_wrap_transformed_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> Series",
                "_wrap_applied_output(self, keys, values, not_indexed_same=False)",
                "_aggregate_named(self, func, *args, **kwargs)",
                "transform(self, func, *args, **kwargs)",
                "_transform_general(self, func, *args, **kwargs)",
                "_transform_fast(self, result, func_nm: str) -> Series",
                "filter(self, func, dropna=True, *args, **kwargs)",
                "nunique(self, dropna: bool=True) -> Series",
                "describe(self, **kwargs)",
                "value_counts(self, normalize=False, sort=True, ascending=False, bins=None, dropna=True)",
                "count(self) -> Series",
                "_apply_to_column_groupbys(self, func)",
                "pct_change(self, periods=1, fill_method='pad', limit=None, freq=None)",
                "aggregate(self, func=None, *args, **kwargs)",
                "_iterate_slices(self) -> Iterable[Series]",
                "_cython_agg_general(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1) -> DataFrame",
                "_cython_agg_blocks(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1) -> 'Tuple[List[Block], Index]'",
                "_aggregate_frame(self, func, *args, **kwargs) -> DataFrame",
                "_aggregate_item_by_item(self, func, *args, **kwargs) -> DataFrame",
                "_wrap_applied_output(self, keys, values, not_indexed_same=False)",
                "_transform_general(self, func, *args, **kwargs)",
                "transform(self, func, *args, **kwargs)",
                "_transform_fast(self, result: DataFrame, func_nm: str) -> DataFrame",
                "_define_paths(self, func, *args, **kwargs)",
                "_choose_path(self, fast_path: Callable, slow_path: Callable, group: DataFrame)",
                "_transform_item_by_item(self, obj: DataFrame, wrapper) -> DataFrame",
                "filter(self, func, dropna=True, *args, **kwargs)",
                "_gotitem(self, key, ndim: int, subset=None)",
                "_wrap_frame_output(self, result, obj) -> DataFrame",
                "_get_data_to_aggregate(self) -> BlockManager",
                "_insert_inaxis_grouper_inplace(self, result)",
                "_wrap_aggregated_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> DataFrame",
                "_wrap_transformed_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> DataFrame",
                "_wrap_agged_blocks(self, blocks: 'Sequence[Block]', items: Index) -> DataFrame",
                "_iterate_column_groupbys(self)",
                "_apply_to_column_groupbys(self, func)",
                "count(self)",
                "nunique(self, dropna: bool=True)",
                "_get_index() -> Index",
                "true_and_notna(x, *args, **kwargs) -> bool",
                "build_codes(lev_codes: np.ndarray) -> np.ndarray",
                "first_not_none(values)",
                "groupby_series(obj, col=None)"
            ],
            "variables_in_file": {
                "TYPE_CHECKING": [
                    74
                ],
                "NamedAgg": [
                    78
                ],
                "namedtuple": [
                    78
                ],
                "AggScalar": [
                    80
                ],
                "Union": [
                    352,
                    387,
                    328,
                    329,
                    362,
                    363,
                    1645,
                    1678,
                    80
                ],
                "str": [
                    515,
                    996,
                    556,
                    1004,
                    462,
                    110,
                    80,
                    1453,
                    1937,
                    244,
                    1428,
                    87,
                    1401,
                    957,
                    1150
                ],
                "Callable": [
                    80,
                    1465
                ],
                "Any": [
                    80,
                    1984,
                    1951
                ],
                "ScalarResult": [
                    84
                ],
                "typing.TypeVar": [
                    84
                ],
                "typing": [
                    84
                ],
                "Type": [
                    110,
                    87
                ],
                "FrameOrSeries": [
                    110,
                    87
                ],
                "self._make_wrapper": [
                    102
                ],
                "self": [
                    512,
                    520,
                    521,
                    524,
                    525,
                    1039,
                    1551,
                    1552,
                    1045,
                    1047,
                    1023,
                    1567,
                    1575,
                    568,
                    1593,
                    1596,
                    573,
                    1598,
                    1599,
                    1600,
                    1601,
                    1605,
                    1607,
                    585,
                    587,
                    1613,
                    1615,
                    1621,
                    1622,
                    1116,
                    1119,
                    1120,
                    1633,
                    1634,
                    1635,
                    1124,
                    102,
                    1128,
                    1129,
                    1133,
                    1138,
                    631,
                    1143,
                    1145,
                    638,
                    639,
                    1665,
                    1666,
                    643,
                    644,
                    1669,
                    1160,
                    1672,
                    1675,
                    658,
                    1172,
                    151,
                    666,
                    667,
                    160,
                    161,
                    1697,
                    163,
                    1188,
                    1189,
                    1190,
                    1191,
                    1702,
                    1194,
                    1707,
                    1710,
                    1714,
                    1717,
                    1720,
                    1209,
                    1722,
                    1724,
                    1725,
                    705,
                    707,
                    708,
                    1732,
                    1733,
                    1234,
                    1746,
                    1747,
                    1241,
                    1761,
                    740,
                    1252,
                    1265,
                    1267,
                    245,
                    251,
                    255,
                    257,
                    259,
                    260,
                    772,
                    263,
                    267,
                    269,
                    783,
                    784,
                    1809,
                    274,
                    1300,
                    1812,
                    793,
                    794,
                    797,
                    1823,
                    801,
                    1313,
                    291,
                    1317,
                    807,
                    1323,
                    812,
                    813,
                    1838,
                    311,
                    1338,
                    315,
                    1344,
                    1345,
                    1346,
                    1355,
                    1357,
                    1388,
                    1389,
                    1390,
                    1392,
                    1399,
                    1402,
                    381,
                    382,
                    384,
                    1409,
                    1414,
                    1418,
                    1420,
                    1424,
                    1426,
                    407,
                    1434,
                    1436,
                    416,
                    1440,
                    419,
                    420,
                    422,
                    935,
                    1447,
                    428,
                    942,
                    431,
                    432,
                    943,
                    945,
                    947,
                    436,
                    949,
                    1456,
                    439,
                    1461,
                    442,
                    443,
                    955,
                    448,
                    960,
                    963,
                    966,
                    967,
                    460,
                    463,
                    981,
                    470,
                    982,
                    985,
                    1498,
                    475,
                    476,
                    990,
                    482,
                    485,
                    998,
                    1001,
                    492,
                    1009,
                    507,
                    511
                ],
                "name": [
                    132,
                    133,
                    138,
                    139,
                    1554,
                    1555,
                    1567,
                    310,
                    568,
                    315,
                    318,
                    319,
                    448,
                    449,
                    453,
                    1349,
                    1350,
                    1244,
                    1124,
                    485,
                    102,
                    486,
                    104,
                    1126,
                    106,
                    1128,
                    492,
                    1129,
                    1131,
                    1640,
                    1642,
                    1906
                ],
                "parent_method": [
                    104,
                    105
                ],
                "getattr": [
                    257,
                    1409,
                    1414,
                    104,
                    812,
                    557,
                    1454,
                    1456,
                    245,
                    470,
                    475
                ],
                "klass": [
                    104,
                    138,
                    482,
                    493
                ],
                "prop.__doc__": [
                    105
                ],
                "prop": [
                    105,
                    106,
                    107,
                    139,
                    138
                ],
                "parent_method.__doc__": [
                    105
                ],
                "prop.__name__": [
                    106
                ],
                "property": [
                    153,
                    107
                ],
                "FrozenSet": [
                    110
                ],
                "whitelist": [
                    132
                ],
                "hasattr": [
                    133
                ],
                "cls": [
                    139,
                    133,
                    141
                ],
                "generate_property": [
                    138
                ],
                "setattr": [
                    139
                ],
                "pinner": [
                    143
                ],
                "GroupBy": [
                    147,
                    820
                ],
                "_apply_whitelist": [
                    148,
                    822
                ],
                "base.series_apply_whitelist": [
                    146,
                    148
                ],
                "base": [
                    387,
                    328,
                    362,
                    1645,
                    1678,
                    465,
                    146,
                    819,
                    148,
                    468,
                    822,
                    1404,
                    1407
                ],
                "self._selected_obj": [
                    512,
                    482,
                    291,
                    963,
                    1317,
                    1733,
                    1720,
                    1551,
                    1809,
                    1234,
                    981,
                    507,
                    151,
                    1722,
                    315,
                    511
                ],
                "Iterable": [
                    980,
                    150
                ],
                "Series": [
                    641,
                    387,
                    388,
                    515,
                    772,
                    774,
                    525,
                    1678,
                    146,
                    659,
                    150,
                    791,
                    1816,
                    410,
                    416,
                    1313,
                    291,
                    679,
                    435,
                    1332,
                    442,
                    576,
                    451,
                    1221,
                    328,
                    329,
                    1232,
                    1233,
                    980,
                    1364,
                    985,
                    352,
                    740,
                    357,
                    362,
                    363,
                    1645,
                    502,
                    638
                ],
                "self._selection": [
                    160,
                    163
                ],
                "self.obj.name": [
                    161,
                    525
                ],
                "self.obj": [
                    161,
                    1697,
                    1605,
                    587,
                    524,
                    525,
                    1039,
                    784,
                    407,
                    1593,
                    667
                ],
                "_agg_see_also_doc": [
                    824,
                    225,
                    907,
                    165
                ],
                "dedent": [
                    824,
                    834,
                    165,
                    175
                ],
                "_agg_examples_doc": [
                    226,
                    908,
                    834,
                    175
                ],
                "apply": [
                    222
                ],
                "super": [
                    222
                ],
                "func": [
                    1409,
                    260,
                    1414,
                    263,
                    1401,
                    1418,
                    267,
                    1147,
                    1402,
                    1424,
                    1426,
                    916,
                    1557,
                    918,
                    921,
                    1405,
                    801,
                    929,
                    933,
                    935,
                    1407,
                    556,
                    557,
                    1453,
                    559,
                    943,
                    945,
                    1454,
                    1456,
                    1459,
                    949,
                    310,
                    1461,
                    955,
                    319,
                    960,
                    450,
                    1346,
                    1732,
                    460,
                    462,
                    463,
                    465,
                    466,
                    468,
                    470,
                    475,
                    476,
                    222,
                    1125,
                    487,
                    234,
                    1130,
                    239,
                    244,
                    245,
                    247,
                    1145,
                    250,
                    251,
                    1404,
                    1399,
                    255
                ],
                "args": [
                    256,
                    1409,
                    260,
                    1414,
                    263,
                    1418,
                    267,
                    1424,
                    1557,
                    935,
                    557,
                    1454,
                    559,
                    943,
                    944,
                    945,
                    563,
                    1456,
                    1459,
                    1461,
                    450,
                    1346,
                    463,
                    470,
                    475,
                    222,
                    1125,
                    487,
                    1130,
                    245,
                    1402,
                    1147
                ],
                "kwargs": [
                    256,
                    1409,
                    643,
                    260,
                    1414,
                    263,
                    1418,
                    267,
                    1424,
                    916,
                    1557,
                    918,
                    920,
                    935,
                    557,
                    1454,
                    559,
                    943,
                    944,
                    945,
                    563,
                    1456,
                    1459,
                    1461,
                    450,
                    1346,
                    1220,
                    1223,
                    1226,
                    1867,
                    1868,
                    463,
                    470,
                    475,
                    222,
                    1125,
                    487,
                    1130,
                    238,
                    239,
                    240,
                    1904,
                    245,
                    1402,
                    1147
                ],
                "Appender": [
                    641,
                    231,
                    458,
                    913,
                    1395,
                    216
                ],
                "format": [
                    217
                ],
                "_apply_docs": [
                    217,
                    218
                ],
                "relabeling": [
                    234,
                    970,
                    237,
                    916,
                    917,
                    252
                ],
                "columns": [
                    1925,
                    918,
                    1693,
                    1696,
                    294,
                    300,
                    303,
                    305,
                    307,
                    325,
                    974,
                    350,
                    355,
                    1508,
                    357,
                    1510,
                    1512,
                    235,
                    238,
                    239,
                    1904,
                    241,
                    1906,
                    1660,
                    253,
                    1663
                ],
                "no_arg_message": [
                    242,
                    236
                ],
                "list": [
                    294,
                    296,
                    297,
                    238,
                    1902,
                    1904,
                    921,
                    1278
                ],
                "col": [
                    1496,
                    1498,
                    1812,
                    239
                ],
                "TypeError": [
                    1506,
                    931,
                    1570,
                    1356,
                    242,
                    595,
                    1499,
                    1048,
                    570,
                    571
                ],
                "isinstance": [
                    1283,
                    1285,
                    1417,
                    277,
                    1303,
                    1816,
                    921,
                    410,
                    286,
                    1058,
                    291,
                    1187,
                    1062,
                    296,
                    297,
                    425,
                    556,
                    1068,
                    1453,
                    1328,
                    435,
                    437,
                    1216,
                    321,
                    451,
                    1481,
                    1867,
                    462,
                    1232,
                    1233,
                    1364,
                    985,
                    489,
                    1267,
                    244,
                    247,
                    1401
                ],
                "abc.Iterable": [
                    247
                ],
                "abc": [
                    247
                ],
                "_maybe_mangle_lambdas": [
                    250,
                    933
                ],
                "ret": [
                    270,
                    277,
                    280,
                    281,
                    251,
                    253
                ],
                "self._aggregate_multiple_funcs": [
                    251,
                    955
                ],
                "ret.columns": [
                    253
                ],
                "cyfunc": [
                    256,
                    257,
                    255
                ],
                "self._get_cython_func": [
                    460,
                    1399,
                    255
                ],
                "self.grouper.nkeys": [
                    259,
                    1116,
                    419,
                    942
                ],
                "self.grouper": [
                    259,
                    1669,
                    520,
                    269,
                    783,
                    1552,
                    1172,
                    1045,
                    1812,
                    793,
                    666,
                    1440,
                    419,
                    420,
                    1189,
                    422,
                    1190,
                    1191,
                    1194,
                    813,
                    942,
                    1710,
                    1596,
                    1724,
                    1598,
                    705,
                    1345,
                    707,
                    708,
                    1607,
                    585,
                    1613,
                    1747,
                    1143,
                    1116,
                    1633,
                    1634,
                    1635,
                    631,
                    382,
                    1023
                ],
                "self._python_agg_general": [
                    943,
                    260,
                    263
                ],
                "ValueError": [
                    452,
                    264,
                    1358,
                    1360,
                    467,
                    1078,
                    570,
                    956,
                    1149,
                    1406
                ],
                "KeyError": [
                    264
                ],
                "result": [
                    512,
                    513,
                    2051,
                    2052,
                    522,
                    511,
                    2058,
                    2061,
                    2062,
                    1047,
                    1054,
                    1056,
                    1057,
                    1058,
                    1059,
                    1062,
                    1064,
                    1066,
                    1068,
                    1072,
                    1075,
                    1076,
                    1080,
                    1082,
                    2047,
                    1616,
                    1618,
                    1122,
                    1126,
                    1642,
                    1131,
                    1133,
                    1139,
                    1147,
                    638,
                    639,
                    1662,
                    1663,
                    1666,
                    643,
                    1667,
                    645,
                    646,
                    1670,
                    1160,
                    1673,
                    1675,
                    1166,
                    1695,
                    1696,
                    1697,
                    1699,
                    1705,
                    1707,
                    1708,
                    1712,
                    1715,
                    1717,
                    1288,
                    267,
                    269,
                    271,
                    1296,
                    1302,
                    791,
                    1305,
                    797,
                    1319,
                    1321,
                    1323,
                    352,
                    354,
                    355,
                    357,
                    359,
                    381,
                    384,
                    1414,
                    1417,
                    1423,
                    1426,
                    407,
                    410,
                    411,
                    1442,
                    1443,
                    935,
                    937,
                    1450,
                    939,
                    428,
                    431,
                    432,
                    433,
                    945,
                    949,
                    442,
                    443,
                    955,
                    446,
                    960,
                    962,
                    963,
                    453,
                    455,
                    967,
                    968,
                    973,
                    974,
                    976,
                    475,
                    476,
                    500,
                    502,
                    1020,
                    509,
                    1023
                ],
                "self._aggregate_named": [
                    267
                ],
                "index": [
                    1669,
                    1670,
                    1289,
                    269,
                    271,
                    1302,
                    420,
                    422,
                    423,
                    1703,
                    1704,
                    427,
                    428,
                    1710,
                    1711,
                    354,
                    357,
                    1270,
                    1271,
                    1278
                ],
                "Index": [
                    418,
                    451,
                    962,
                    1701,
                    422,
                    1924,
                    328,
                    269,
                    1199,
                    1232,
                    1206,
                    1660,
                    1693,
                    350
                ],
                "sorted": [
                    269
                ],
                "self.grouper.names": [
                    1633,
                    708,
                    420,
                    422,
                    269,
                    1172
                ],
                "create_series_with_explicit_dtype": [
                    1222,
                    270
                ],
                "object": [
                    486,
                    1223,
                    1350,
                    271,
                    1555,
                    597,
                    1017
                ],
                "self.as_index": [
                    1600,
                    1665,
                    966,
                    1702,
                    1838,
                    274,
                    1209
                ],
                "print": [
                    275
                ],
                "dict": [
                    425,
                    277,
                    286
                ],
                "concat": [
                    1731,
                    1831,
                    1261,
                    1390,
                    1296,
                    500,
                    280,
                    1372
                ],
                "Substitution": [
                    224,
                    457,
                    906,
                    1394
                ],
                "_shared_docs": [
                    913,
                    231
                ],
                "agg": [
                    978,
                    283
                ],
                "aggregate": [
                    978,
                    283
                ],
                "arg": [
                    294,
                    295,
                    296,
                    297,
                    300,
                    304,
                    307,
                    310,
                    286
                ],
                "SpecificationError": [
                    292,
                    925
                ],
                "arg.keys": [
                    294
                ],
                "arg.items": [
                    295
                ],
                "any": [
                    296,
                    321,
                    1328,
                    1318
                ],
                "x": [
                    321,
                    643,
                    296,
                    297,
                    808,
                    1228,
                    557,
                    559,
                    1328,
                    1456,
                    563,
                    1235,
                    1461,
                    1047,
                    1757
                ],
                "tuple": [
                    296,
                    297,
                    1867
                ],
                "next": [
                    1177,
                    300
                ],
                "zip": [
                    300,
                    1904,
                    1906,
                    307,
                    1629,
                    1759
                ],
                "f": [
                    304,
                    305
                ],
                "columns.append": [
                    305
                ],
                "com.get_callable_name": [
                    305,
                    1908,
                    1917,
                    1975
                ],
                "com": [
                    305,
                    1908,
                    1975,
                    1177,
                    1917
                ],
                "results": [
                    321,
                    323,
                    484,
                    325,
                    1830,
                    1831,
                    1834,
                    1836,
                    494,
                    1839,
                    1840,
                    497,
                    500,
                    309,
                    1817,
                    319
                ],
                "OrderedDict": [
                    1122,
                    1139,
                    309,
                    446
                ],
                "obj": [
                    1162,
                    1420,
                    1039,
                    1040,
                    1423,
                    1551,
                    1043,
                    1552,
                    1045,
                    1809,
                    1812,
                    1816,
                    1817,
                    1436,
                    1823,
                    1826,
                    1828,
                    1447,
                    1450,
                    1836,
                    311,
                    316,
                    317,
                    318,
                    319,
                    1344,
                    1345,
                    1357,
                    1616,
                    1618,
                    981,
                    1621,
                    983,
                    1496,
                    985,
                    1623,
                    987,
                    1371,
                    989,
                    1625,
                    1120,
                    1123,
                    1508,
                    1509,
                    1512,
                    1129,
                    1388,
                    1133,
                    1138,
                    1141,
                    1142
                ],
                "copy.copy": [
                    316
                ],
                "copy": [
                    316
                ],
                "obj._reset_cache": [
                    317
                ],
                "obj._selection": [
                    318
                ],
                "obj.aggregate": [
                    319
                ],
                "DataFrame": [
                    1288,
                    1417,
                    1166,
                    1679,
                    1170,
                    1428,
                    1305,
                    1054,
                    1695,
                    1186,
                    1187,
                    1701,
                    1062,
                    1705,
                    1450,
                    428,
                    1712,
                    819,
                    437,
                    1465,
                    1215,
                    321,
                    325,
                    329,
                    1481,
                    1612,
                    1616,
                    1618,
                    1492,
                    1115,
                    352,
                    1376,
                    354,
                    997,
                    1512,
                    363,
                    2029,
                    1646,
                    1135,
                    1662
                ],
                "results.values": [
                    321
                ],
                "Mapping": [
                    387,
                    328,
                    362,
                    1645,
                    1678
                ],
                "base.OutputKey": [
                    387,
                    328,
                    362,
                    1645,
                    1678
                ],
                "np.ndarray": [
                    1058,
                    387,
                    451,
                    328,
                    362,
                    1068,
                    1645,
                    1678,
                    1232,
                    1015,
                    1016,
                    762
                ],
                "np": [
                    387,
                    1287,
                    1678,
                    655,
                    789,
                    1304,
                    416,
                    1058,
                    1703,
                    1068,
                    686,
                    688,
                    693,
                    697,
                    699,
                    702,
                    451,
                    1092,
                    1093,
                    328,
                    968,
                    1101,
                    1102,
                    591,
                    719,
                    1103,
                    594,
                    722,
                    1232,
                    599,
                    1751,
                    1369,
                    730,
                    608,
                    609,
                    1377,
                    744,
                    617,
                    362,
                    746,
                    620,
                    1645,
                    750,
                    626,
                    755,
                    1015,
                    502,
                    758,
                    1016,
                    762,
                    635,
                    763
                ],
                "indexed_output": [
                    354,
                    357,
                    1659,
                    1692,
                    349,
                    1662,
                    1695
                ],
                "key.position": [
                    1659,
                    1692,
                    349
                ],
                "key": [
                    1660,
                    1692,
                    2016,
                    1605,
                    1693,
                    1607,
                    2022,
                    1659,
                    349,
                    1597,
                    350
                ],
                "val": [
                    784,
                    786,
                    667,
                    1692,
                    671,
                    674,
                    679,
                    587,
                    591,
                    594,
                    596,
                    597,
                    598,
                    599,
                    604,
                    349,
                    1759,
                    609,
                    612,
                    1659
                ],
                "output.items": [
                    1659,
                    1692,
                    349
                ],
                "output": [
                    406,
                    407,
                    1692,
                    1693,
                    1441,
                    1448,
                    1450,
                    450,
                    451,
                    453,
                    1494,
                    1498,
                    349,
                    350,
                    353,
                    1505,
                    1509,
                    1512,
                    1659,
                    1660,
                    382
                ],
                "key.label": [
                    1660,
                    1693,
                    350
                ],
                "len": [
                    2051,
                    1169,
                    406,
                    921,
                    414,
                    1056,
                    1190,
                    1195,
                    1839,
                    1969,
                    968,
                    1867,
                    1868,
                    1102,
                    719,
                    1103,
                    1236,
                    1109,
                    1372,
                    353,
                    1377,
                    1505,
                    1509,
                    744,
                    748,
                    621,
                    634,
                    635,
                    1277
                ],
                "result.columns": [
                    1696,
                    962,
                    355,
                    963,
                    1442,
                    2051,
                    1450,
                    974,
                    1423,
                    1302,
                    1663
                ],
                "self._wrap_series_output": [
                    381,
                    407
                ],
                "self.grouper.result_index": [
                    1669,
                    1191,
                    1710,
                    631,
                    793,
                    382
                ],
                "_convert": [
                    384,
                    1675,
                    1332,
                    1717
                ],
                "self._reindex_output": [
                    384,
                    1323,
                    428,
                    1675,
                    1717,
                    443,
                    797,
                    639
                ],
                "self.obj.index": [
                    1697,
                    525,
                    407
                ],
                "keys": [
                    416,
                    420,
                    1188,
                    422,
                    1253,
                    1195,
                    1199,
                    1169,
                    1170,
                    1265,
                    436,
                    1206,
                    439,
                    1338,
                    1244,
                    414
                ],
                "self._selection_name": [
                    416,
                    1313,
                    708,
                    740,
                    772,
                    432,
                    442,
                    794,
                    638
                ],
                "np.float64": [
                    416,
                    502
                ],
                "MultiIndex.from_tuples": [
                    420
                ],
                "MultiIndex": [
                    768,
                    1283,
                    420,
                    1285,
                    734
                ],
                "values": [
                    1287,
                    2058,
                    1297,
                    1304,
                    1177,
                    1181,
                    1057,
                    1313,
                    1443,
                    1188,
                    1703,
                    425,
                    428,
                    1328,
                    435,
                    436,
                    437,
                    1203,
                    439,
                    1332,
                    442,
                    1338,
                    1213,
                    1228,
                    1230,
                    1235,
                    1236,
                    1244,
                    989,
                    993,
                    1253,
                    1261,
                    1265,
                    1276
                ],
                "_get_index": [
                    442,
                    427
                ],
                "result.stack": [
                    431
                ],
                "self.observed": [
                    1601,
                    1607,
                    431
                ],
                "result.name": [
                    432,
                    511
                ],
                "self._concat_objects": [
                    1188,
                    1252,
                    1265,
                    436,
                    439,
                    1338
                ],
                "not_indexed_same": [
                    1188,
                    1253,
                    436,
                    439,
                    1338
                ],
                "group": [
                    1554,
                    1555,
                    1557,
                    1454,
                    1455,
                    1459,
                    1460,
                    568,
                    1467,
                    1471,
                    448,
                    449,
                    450,
                    1349,
                    1350,
                    1355,
                    1484,
                    1362,
                    1369,
                    1372,
                    1373,
                    1374,
                    1377,
                    1378,
                    1380,
                    485,
                    486,
                    487,
                    1381
                ],
                "group.name": [
                    449
                ],
                "self._transform_general": [
                    1424,
                    1402,
                    1418,
                    463
                ],
                "base.transform_kernel_whitelist": [
                    465,
                    1404
                ],
                "msg": [
                    1359,
                    1360,
                    466,
                    467,
                    596,
                    597,
                    1405,
                    1406
                ],
                "base.cythonized_kernels": [
                    468,
                    1407
                ],
                "self._transform_fast": [
                    1426,
                    476
                ],
                "_transform_template": [
                    458,
                    1395
                ],
                "type": [
                    1571,
                    482,
                    1075,
                    2013
                ],
                "object.__setattr__": [
                    1350,
                    1555,
                    486
                ],
                "res": [
                    1557,
                    1560,
                    1565,
                    1566,
                    1443,
                    1571,
                    1447,
                    1448,
                    1467,
                    1477,
                    1482,
                    1355,
                    1485,
                    1487,
                    1362,
                    1490,
                    1364,
                    1371,
                    1372,
                    1377,
                    487,
                    489,
                    490,
                    1386,
                    493,
                    625,
                    628,
                    630,
                    634,
                    635,
                    636,
                    638
                ],
                "ABCDataFrame": [
                    489
                ],
                "ABCSeries": [
                    489,
                    1267,
                    1303
                ],
                "res._values": [
                    490
                ],
                "indexer": [
                    1092,
                    1093,
                    492,
                    493,
                    1200,
                    1105,
                    1203,
                    1110
                ],
                "self._get_index": [
                    568,
                    492,
                    1567
                ],
                "ser": [
                    493,
                    494
                ],
                "results.append": [
                    494
                ],
                "sort_index": [
                    500
                ],
                "dtype": [
                    507,
                    508,
                    509
                ],
                "self._selected_obj.dtype": [
                    507
                ],
                "is_numeric_dtype": [
                    508
                ],
                "maybe_downcast_to_dtype": [
                    509
                ],
                "self._selected_obj.name": [
                    511
                ],
                "result.index": [
                    512,
                    1697,
                    1670,
                    968
                ],
                "self._selected_obj.index": [
                    512
                ],
                "ids": [
                    520,
                    522,
                    783,
                    786,
                    787,
                    789,
                    666,
                    670,
                    671,
                    1440,
                    1443,
                    686,
                    688,
                    690,
                    693,
                    585,
                    719,
                    721,
                    594,
                    1747,
                    1748,
                    599,
                    729,
                    604,
                    1757,
                    608,
                    621,
                    624,
                    636
                ],
                "_": [
                    1440,
                    1442,
                    1732,
                    520,
                    585,
                    783,
                    754,
                    1747,
                    598,
                    666,
                    1023
                ],
                "ngroup": [
                    520,
                    1440
                ],
                "self.grouper.group_info": [
                    1440,
                    520,
                    585,
                    783,
                    1747,
                    666
                ],
                "cast": [
                    1446,
                    1159,
                    521,
                    523,
                    1145,
                    1434,
                    1054
                ],
                "self._transform_should_cast": [
                    521,
                    1434,
                    1145
                ],
                "func_nm": [
                    521,
                    1434
                ],
                "out": [
                    770,
                    771,
                    772,
                    522,
                    524,
                    525,
                    789,
                    792,
                    699,
                    715,
                    718,
                    726,
                    730,
                    731,
                    738,
                    739,
                    740,
                    744,
                    759,
                    620,
                    625,
                    755,
                    628,
                    630,
                    758,
                    635,
                    636
                ],
                "algorithms.take_1d": [
                    522,
                    1443
                ],
                "algorithms": [
                    674,
                    522,
                    1443,
                    598
                ],
                "result._values": [
                    522
                ],
                "self._try_cast": [
                    1160,
                    524,
                    1447
                ],
                "wrapper": [
                    1498,
                    563,
                    557,
                    559
                ],
                "b": [
                    563,
                    564
                ],
                "notna": [
                    564,
                    1566
                ],
                "bool": [
                    576,
                    1763,
                    996,
                    1004,
                    562,
                    1845
                ],
                "indices": [
                    1575,
                    1549,
                    567,
                    573,
                    1567
                ],
                "true_and_notna": [
                    568
                ],
                "filtered": [
                    573,
                    574
                ],
                "self._apply_filter": [
                    573,
                    1575
                ],
                "dropna": [
                    613,
                    710,
                    1575,
                    713,
                    720,
                    1813,
                    729,
                    573
                ],
                "self.obj._internal_get_values": [
                    784,
                    587,
                    667
                ],
                "isna": [
                    602,
                    786,
                    1565,
                    591
                ],
                "np.datetime64": [
                    591
                ],
                "sorter": [
                    759,
                    686,
                    688,
                    594,
                    690,
                    758,
                    599,
                    730,
                    731,
                    604
                ],
                "np.lexsort": [
                    686,
                    688,
                    594,
                    758,
                    599,
                    730
                ],
                "val.dtype": [
                    596,
                    597
                ],
                "algorithms.factorize": [
                    674,
                    598
                ],
                "_isna": [
                    600,
                    602,
                    612
                ],
                "a": [
                    600
                ],
                "idx": [
                    608,
                    2050,
                    2051,
                    2052,
                    614,
                    618,
                    620,
                    719,
                    626,
                    754,
                    755,
                    693,
                    698,
                    636,
                    702
                ],
                "np.r_": [
                    608,
                    609,
                    617,
                    746,
                    719,
                    693,
                    697,
                    699
                ],
                "np.nonzero": [
                    608,
                    699,
                    693
                ],
                "inc": [
                    609,
                    706,
                    675,
                    614,
                    615,
                    617,
                    618,
                    682,
                    620,
                    729,
                    697,
                    698,
                    699,
                    702
                ],
                "mask": [
                    612,
                    615,
                    711,
                    617,
                    712,
                    715,
                    1103,
                    1104,
                    1105,
                    786,
                    723,
                    1748,
                    789,
                    1751,
                    729,
                    670,
                    671
                ],
                "astype": [
                    620
                ],
                "np.add.reduceat": [
                    620,
                    702
                ],
                "np.add": [
                    722,
                    620,
                    702
                ],
                "np.flatnonzero": [
                    626
                ],
                "ri": [
                    634,
                    635,
                    638,
                    631
                ],
                "np.zeros": [
                    744,
                    635,
                    1103
                ],
                "out.dtype": [
                    635
                ],
                "self.apply": [
                    658,
                    643,
                    807
                ],
                "x.describe": [
                    643
                ],
                "self.axis": [
                    644,
                    1672,
                    1552,
                    1300,
                    1047,
                    1823,
                    1456,
                    1714,
                    947,
                    1461,
                    955,
                    1345,
                    1615,
                    1234,
                    982,
                    1622,
                    1119,
                    1388,
                    1389,
                    1390,
                    1267
                ],
                "result.T": [
                    1673,
                    1715,
                    645
                ],
                "result.unstack": [
                    646
                ],
                "Series.describe.__doc__": [
                    641
                ],
                "Series.describe": [
                    641
                ],
                "bins": [
                    673,
                    679,
                    655,
                    663,
                    728,
                    733
                ],
                "np.iterable": [
                    655
                ],
                "Series.value_counts": [
                    659
                ],
                "normalize": [
                    660,
                    717
                ],
                "sort": [
                    728,
                    757,
                    661
                ],
                "ascending": [
                    730,
                    662,
                    758
                ],
                "lab": [
                    674,
                    675,
                    706,
                    679,
                    680,
                    681,
                    682,
                    684,
                    686,
                    688,
                    721,
                    690,
                    696
                ],
                "lev": [
                    674,
                    707,
                    680,
                    681,
                    1640,
                    1642
                ],
                "llab": [
                    696,
                    706,
                    682,
                    675
                ],
                "cut": [
                    679
                ],
                "lab.cat.categories": [
                    680
                ],
                "lab.cat": [
                    680,
                    681
                ],
                "lev.take": [
                    681
                ],
                "lab.cat.codes": [
                    681
                ],
                "_multiindex.codes": [
                    682
                ],
                "_multiindex": [
                    682
                ],
                "is_interval_dtype": [
                    684
                ],
                "lab.left": [
                    686
                ],
                "lab.right": [
                    686
                ],
                "lchanges": [
                    696,
                    697
                ],
                "slice": [
                    696
                ],
                "np.diff": [
                    699,
                    719
                ],
                "rep": [
                    706,
                    723,
                    725,
                    702
                ],
                "partial": [
                    1976,
                    702
                ],
                "np.repeat": [
                    763,
                    702,
                    750
                ],
                "codes": [
                    768,
                    705,
                    706,
                    711,
                    745,
                    715,
                    752,
                    731,
                    765,
                    766,
                    735
                ],
                "self.grouper.reconstructed_codes": [
                    705
                ],
                "level_codes": [
                    746,
                    745,
                    706,
                    715
                ],
                "levels": [
                    768,
                    707,
                    748,
                    735
                ],
                "ping.group_index": [
                    707,
                    1196
                ],
                "ping": [
                    1194,
                    707,
                    1196,
                    1195
                ],
                "self.grouper.groupings": [
                    1635,
                    707,
                    1189,
                    1190,
                    1194
                ],
                "names": [
                    768,
                    708,
                    1836,
                    1276,
                    1277,
                    1278,
                    735
                ],
                "mask.all": [
                    712
                ],
                "out.astype": [
                    718
                ],
                "d": [
                    722,
                    723,
                    725,
                    719
                ],
                "m": [
                    721,
                    722
                ],
                "np.add.at": [
                    722
                ],
                "acc": [
                    723,
                    725,
                    726
                ],
                "cat": [
                    729,
                    730
                ],
                "mi": [
                    768,
                    740,
                    772,
                    734
                ],
                "is_integer_dtype": [
                    738,
                    770
                ],
                "ensure_int64": [
                    771,
                    739
                ],
                "diff": [
                    744,
                    746,
                    748,
                    752,
                    763
                ],
                "ncat": [
                    748,
                    750
                ],
                "nbin": [
                    763,
                    748,
                    750
                ],
                "diff.sum": [
                    748
                ],
                "left": [
                    750,
                    754,
                    758,
                    759,
                    766
                ],
                "np.arange": [
                    968,
                    1102,
                    750,
                    1703
                ],
                "np.tile": [
                    750
                ],
                "right": [
                    752,
                    754
                ],
                "diff.cumsum": [
                    752
                ],
                "_get_join_indexers": [
                    754
                ],
                "np.where": [
                    755
                ],
                "lev_codes": [
                    763,
                    765
                ],
                "build_codes": [
                    765
                ],
                "codes.append": [
                    766
                ],
                "ngroups": [
                    1747,
                    788,
                    1757,
                    783
                ],
                "ensure_platform_int": [
                    787
                ],
                "minlength": [
                    788,
                    789
                ],
                "np.bincount": [
                    789
                ],
                "freq": [
                    814,
                    809,
                    806
                ],
                "x.pct_change": [
                    808
                ],
                "periods": [
                    809,
                    814
                ],
                "fill_method": [
                    809,
                    812
                ],
                "limit": [
                    809,
                    812
                ],
                "filled": [
                    816,
                    812,
                    813
                ],
                "fill_grp": [
                    813,
                    814
                ],
                "filled.groupby": [
                    813
                ],
                "self.grouper.codes": [
                    813
                ],
                "shifted": [
                    816,
                    814
                ],
                "fill_grp.shift": [
                    814
                ],
                "pin_whitelisted_properties": [
                    146,
                    819
                ],
                "base.dataframe_apply_whitelist": [
                    819,
                    822
                ],
                "_is_multi_agg_with_relabel": [
                    916
                ],
                "order": [
                    973,
                    1903,
                    1908,
                    918,
                    1911
                ],
                "_normalize_keyword_aggregation": [
                    918
                ],
                "set": [
                    921
                ],
                "how": [
                    1024,
                    999,
                    936,
                    935,
                    1034
                ],
                "self._aggregate": [
                    935
                ],
                "self._aggregate_frame": [
                    960,
                    945,
                    949
                ],
                "err": [
                    957,
                    1150
                ],
                "result.columns.levels": [
                    963
                ],
                "self._selected_obj.columns.name": [
                    963
                ],
                "self._selected_obj.columns": [
                    1720,
                    963,
                    1733
                ],
                "self._insert_inaxis_grouper_inplace": [
                    1666,
                    1707,
                    967
                ],
                "result.iloc": [
                    2061,
                    2058,
                    1443,
                    973
                ],
                "result._convert": [
                    976,
                    1321
                ],
                "obj.T": [
                    1623,
                    983
                ],
                "obj.name": [
                    985
                ],
                "self.exclusions": [
                    985,
                    1725,
                    990,
                    1599
                ],
                "label": [
                    1830,
                    989,
                    990
                ],
                "obj.items": [
                    1826,
                    989
                ],
                "int": [
                    1824,
                    1577,
                    996,
                    1004
                ],
                "agg_blocks": [
                    998,
                    1001,
                    1108,
                    1014,
                    1113,
                    1085,
                    1087
                ],
                "agg_items": [
                    1113,
                    1001,
                    1093,
                    998
                ],
                "self._cython_agg_blocks": [
                    998
                ],
                "alt": [
                    1031,
                    1047,
                    999
                ],
                "numeric_only": [
                    1011,
                    999
                ],
                "min_count": [
                    1024,
                    999
                ],
                "self._wrap_agged_blocks": [
                    1001,
                    1761
                ],
                "data": [
                    1761,
                    1124,
                    1093,
                    1125,
                    1160,
                    1129,
                    1130,
                    1102,
                    1039,
                    1103,
                    1009,
                    1746,
                    1012,
                    1142,
                    1143,
                    1752,
                    1754,
                    1018
                ],
                "BlockManager": [
                    1704,
                    1009,
                    1620,
                    1711
                ],
                "self._get_data_to_aggregate": [
                    1009,
                    1746
                ],
                "data.get_numeric_data": [
                    1012
                ],
                "List": [
                    1016,
                    1014,
                    1015
                ],
                "Block": [
                    1082,
                    1014
                ],
                "new_items": [
                    1084,
                    1092,
                    1015
                ],
                "deleted_items": [
                    1095,
                    1035,
                    1101,
                    1016,
                    1051
                ],
                "no_result": [
                    1064,
                    1017,
                    1020
                ],
                "block": [
                    1024,
                    1082,
                    1066,
                    1068,
                    1075,
                    1076,
                    1018,
                    1021
                ],
                "data.blocks": [
                    1752,
                    1754,
                    1018
                ],
                "locs": [
                    1035,
                    1039,
                    1754,
                    1051,
                    1084,
                    1021,
                    1759
                ],
                "block.mgr_locs.as_array": [
                    1021
                ],
                "block.mgr_locs": [
                    1021
                ],
                "self.grouper.aggregate": [
                    1023
                ],
                "block.values": [
                    1024,
                    1075,
                    1076
                ],
                "NotImplementedError": [
                    1026
                ],
                "deleted_items.append": [
                    1051,
                    1035
                ],
                "data.items": [
                    1761,
                    1093,
                    1039
                ],
                "obj.shape": [
                    1040
                ],
                "obj.iloc": [
                    1043,
                    1447
                ],
                "s": [
                    1045,
                    1047
                ],
                "get_groupby": [
                    1045
                ],
                "s.aggregate": [
                    1047
                ],
                "result._data.blocks": [
                    1056,
                    1057
                ],
                "result._data": [
                    1056,
                    1057
                ],
                "result.ndim": [
                    1072,
                    1058
                ],
                "result.reshape": [
                    1080,
                    1059
                ],
                "maybe_downcast_numeric": [
                    1066
                ],
                "block.dtype": [
                    1066
                ],
                "block.is_extension": [
                    1068
                ],
                "result.shape": [
                    1072
                ],
                "_from_sequence": [
                    1075
                ],
                "result.ravel": [
                    1076
                ],
                "block.values.dtype": [
                    1076
                ],
                "agg_block": [
                    1082,
                    1085
                ],
                "block.make_block": [
                    1082
                ],
                "new_items.append": [
                    1084
                ],
                "agg_blocks.append": [
                    1085
                ],
                "DataError": [
                    1088
                ],
                "np.concatenate": [
                    1377,
                    1092,
                    1101
                ],
                "data.items.take": [
                    1093
                ],
                "np.sort": [
                    1093
                ],
                "deleted": [
                    1104,
                    1101
                ],
                "ai": [
                    1105,
                    1102
                ],
                "mask.cumsum": [
                    1105
                ],
                "offset": [
                    1107,
                    1110,
                    1111
                ],
                "blk": [
                    1108,
                    1109,
                    1110,
                    1751,
                    1752,
                    1754
                ],
                "loc": [
                    1759,
                    1109,
                    1110,
                    1111
                ],
                "blk.mgr_locs": [
                    1754,
                    1109,
                    1110
                ],
                "AssertionError": [
                    1472,
                    1610,
                    1117
                ],
                "axis": [
                    1123,
                    1119
                ],
                "self._obj_with_exclusions": [
                    1120,
                    1344,
                    1420,
                    1138,
                    1621,
                    1436
                ],
                "obj._info_axis_number": [
                    1123
                ],
                "fres": [
                    1130,
                    1131,
                    1125,
                    1126
                ],
                "self.indices": [
                    1128
                ],
                "self.get_group": [
                    1129
                ],
                "self._wrap_frame_output": [
                    1133
                ],
                "cannot_agg": [
                    1164,
                    1155,
                    1140,
                    1163
                ],
                "item": [
                    1155,
                    1160,
                    1141,
                    1142,
                    1143,
                    1147
                ],
                "colg": [
                    1147,
                    1143
                ],
                "SeriesGroupBy": [
                    1721,
                    1812,
                    1606,
                    1143
                ],
                "colg.aggregate": [
                    1147
                ],
                "cannot_agg.append": [
                    1155
                ],
                "result_columns": [
                    1162,
                    1164,
                    1166
                ],
                "obj.columns": [
                    1508,
                    1509,
                    1162,
                    1388,
                    1423,
                    1616
                ],
                "result_columns.drop": [
                    1164
                ],
                "key_names": [
                    1172,
                    1197,
                    1206
                ],
                "com.not_none": [
                    1177
                ],
                "StopIteration": [
                    1178
                ],
                "v": [
                    1283,
                    1287,
                    1303,
                    1304,
                    1306,
                    1181,
                    1183,
                    1187,
                    1213,
                    1214,
                    1216,
                    1220,
                    1221,
                    1226,
                    1867,
                    1230,
                    1232,
                    1233,
                    1267,
                    1270,
                    1276
                ],
                "first_not_none": [
                    1181,
                    1213
                ],
                "key_index": [
                    1313,
                    1284,
                    1285,
                    1191,
                    1289,
                    1306,
                    1196,
                    1197,
                    1200,
                    1298,
                    1299,
                    1332,
                    1206,
                    1210
                ],
                "ping.ngroups": [
                    1195
                ],
                "key_index.name": [
                    1197
                ],
                "key_lookup": [
                    1200,
                    1199
                ],
                "key_lookup.get_indexer": [
                    1200
                ],
                "i": [
                    1978,
                    1442,
                    1443,
                    1447,
                    1720,
                    1937,
                    1203,
                    1940,
                    1972,
                    1496,
                    1977,
                    1722,
                    1503
                ],
                "NDFrame": [
                    1216
                ],
                "v._construct_axes_dict": [
                    1220
                ],
                "v._constructor": [
                    1226,
                    1221
                ],
                "backup": [
                    1226,
                    1228,
                    1222
                ],
                "applied_index": [
                    1234,
                    1236
                ],
                "self._selected_obj._get_axis": [
                    1234
                ],
                "all_indexed_same": [
                    1258,
                    1235,
                    1263
                ],
                "all_indexes_same": [
                    1235
                ],
                "x.index": [
                    1235
                ],
                "singular_series": [
                    1243,
                    1236
                ],
                "applied_index.nlevels": [
                    1236
                ],
                "self.squeeze": [
                    1241
                ],
                "v.index.copy": [
                    1270
                ],
                "v.index": [
                    1306,
                    1283,
                    1270
                ],
                "index.name": [
                    1278,
                    1271
                ],
                "v.name": [
                    1276
                ],
                "stacked_values": [
                    1304,
                    1289,
                    1306,
                    1287
                ],
                "np.vstack": [
                    1304,
                    1287
                ],
                "np.asarray": [
                    1304,
                    1287
                ],
                "unstack": [
                    1296
                ],
                "key_index.names": [
                    1299
                ],
                "stacked_values.T": [
                    1306
                ],
                "so": [
                    1317,
                    1318
                ],
                "so.ndim": [
                    1318
                ],
                "so.dtypes.apply": [
                    1318
                ],
                "so.dtypes": [
                    1318
                ],
                "needs_i8_conversion": [
                    1318
                ],
                "_recast_datetimelike_result": [
                    1319
                ],
                "should_coerce": [
                    1328,
                    1333
                ],
                "Timestamp": [
                    1328
                ],
                "applied": [
                    1384,
                    1386,
                    1390,
                    1343
                ],
                "gen": [
                    1552,
                    1345,
                    1554,
                    1349
                ],
                "self.grouper.get_iterator": [
                    1552,
                    1345
                ],
                "fast_path": [
                    1346,
                    1355,
                    1357,
                    1454,
                    1488,
                    1459,
                    1463,
                    1471
                ],
                "slow_path": [
                    1346,
                    1355,
                    1455,
                    1460,
                    1463,
                    1466,
                    1467
                ],
                "self._define_paths": [
                    1346
                ],
                "path": [
                    1348,
                    1477,
                    1352,
                    1482,
                    1355,
                    1485,
                    1488,
                    1362,
                    1490,
                    1466
                ],
                "self._choose_path": [
                    1355
                ],
                "self._transform_item_by_item": [
                    1357
                ],
                "np.prod": [
                    1369
                ],
                "group.shape": [
                    1369,
                    1378
                ],
                "res.index.is_": [
                    1371
                ],
                "res.index": [
                    1371
                ],
                "obj.index": [
                    1512,
                    1450,
                    1388,
                    1618,
                    1371
                ],
                "r": [
                    1376,
                    1384,
                    1372,
                    1373,
                    1374
                ],
                "group.columns": [
                    1380,
                    1484,
                    1372,
                    1373
                ],
                "r.columns": [
                    1373
                ],
                "r.index": [
                    1374
                ],
                "group.index": [
                    1377,
                    1381,
                    1374
                ],
                "reshape": [
                    1377
                ],
                "res.values": [
                    1377
                ],
                "applied.append": [
                    1384,
                    1386
                ],
                "concat_index": [
                    1388,
                    1391
                ],
                "other_axis": [
                    1824,
                    1836,
                    1389,
                    1391
                ],
                "concatenated": [
                    1392,
                    1390,
                    1391
                ],
                "concatenated.reindex": [
                    1391
                ],
                "self._set_result_index_ordered": [
                    1392
                ],
                "result.columns.equals": [
                    1423
                ],
                "enumerate": [
                    1496,
                    1442,
                    1940,
                    1720
                ],
                "output.append": [
                    1448
                ],
                "DataFrame._from_arrays": [
                    1450
                ],
                "group.apply": [
                    1460,
                    1455
                ],
                "res_fast": [
                    1481,
                    1487,
                    1484,
                    1471
                ],
                "Exception": [
                    1474
                ],
                "res_fast.columns.equals": [
                    1484
                ],
                "res_fast.columns": [
                    1484
                ],
                "res_fast.equals": [
                    1487
                ],
                "inds": [
                    1503,
                    1510,
                    1495
                ],
                "transform": [
                    1498
                ],
                "inds.append": [
                    1503
                ],
                "columns.take": [
                    1510
                ],
                "res.squeeze": [
                    1560
                ],
                "AttributeError": [
                    1561
                ],
                "is_bool": [
                    1565
                ],
                "is_scalar": [
                    1565
                ],
                "indices.append": [
                    1567
                ],
                "__name__": [
                    1571
                ],
                "ndim": [
                    1603,
                    1591
                ],
                "subset": [
                    1604,
                    1605,
                    1607,
                    1592,
                    1593,
                    1595
                ],
                "DataFrameGroupBy": [
                    1594
                ],
                "result_index": [
                    1616,
                    1618,
                    1613
                ],
                "self.grouper.levels": [
                    1613
                ],
                "T": [
                    1616
                ],
                "obj.T._data": [
                    1623
                ],
                "obj._data": [
                    1625
                ],
                "izip": [
                    1640,
                    1629
                ],
                "map": [
                    1630
                ],
                "reversed": [
                    1631
                ],
                "self.grouper.get_group_levels": [
                    1634
                ],
                "grp.in_axis": [
                    1635
                ],
                "grp": [
                    1635
                ],
                "in_axis": [
                    1640,
                    1641
                ],
                "result.insert": [
                    1642
                ],
                "result._consolidate": [
                    1667,
                    1708
                ],
                "values.shape": [
                    1703
                ],
                "blocks": [
                    1761,
                    1703,
                    1704,
                    1711,
                    1759
                ],
                "mgr": [
                    1704,
                    1705,
                    1712,
                    1711
                ],
                "items": [
                    1704,
                    1711
                ],
                "colname": [
                    1720,
                    1721,
                    1723
                ],
                "self._selected_obj.iloc": [
                    1722
                ],
                "col_groupby": [
                    1732
                ],
                "self._iterate_column_groupbys": [
                    1732
                ],
                "vals": [
                    1757,
                    1750
                ],
                "_isna_ndarraylike": [
                    1751
                ],
                "np.atleast_2d": [
                    1751
                ],
                "blk.get_values": [
                    1751
                ],
                "counted": [
                    1756,
                    1759
                ],
                "lib.count_level_2d": [
                    1757
                ],
                "lib": [
                    1757
                ],
                "make_block": [
                    1759
                ],
                "nunique": [
                    1812
                ],
                "groupby_series": [
                    1817,
                    1830
                ],
                "axis_number": [
                    1824,
                    1825,
                    1833,
                    1823
                ],
                "obj._get_axis_number": [
                    1823
                ],
                "iter_func": [
                    1826,
                    1828,
                    1830
                ],
                "obj.iterrows": [
                    1828
                ],
                "content": [
                    1830
                ],
                "results.T": [
                    1834
                ],
                "results._get_axis": [
                    1836
                ],
                "obj._get_axis": [
                    1836
                ],
                "results.index": [
                    1839
                ],
                "ibase.default_index": [
                    1839
                ],
                "ibase": [
                    1839
                ],
                "boxplot": [
                    1842
                ],
                "boxplot_frame_groupby": [
                    1842
                ],
                "all": [
                    1867
                ],
                "kwargs.values": [
                    1867
                ],
                "aggspec": [
                    1918,
                    1907,
                    1925,
                    1902
                ],
                "defaultdict": [
                    1902
                ],
                "pairs": [
                    1904,
                    1906
                ],
                "kwargs.items": [
                    1904
                ],
                "column": [
                    1906,
                    1907,
                    1908,
                    1917,
                    1918
                ],
                "aggfunc": [
                    1906,
                    1907,
                    1908,
                    1974,
                    1975,
                    1976,
                    1977,
                    1979,
                    1917,
                    1919
                ],
                "append": [
                    1907
                ],
                "order.append": [
                    1908
                ],
                "uniquified_order": [
                    1924,
                    1911
                ],
                "_make_unique": [
                    1921,
                    1911
                ],
                "aggspec_order": [
                    1921,
                    1916
                ],
                "aggfuncs": [
                    2016,
                    2017,
                    2018,
                    2020,
                    1969,
                    1971,
                    1974,
                    1918,
                    1919
                ],
                "aggspec.items": [
                    1918
                ],
                "uniquified_aggspec": [
                    1921,
                    1924
                ],
                "col_idx_order": [
                    1924,
                    1925
                ],
                "get_indexer": [
                    1924
                ],
                "seq.count": [
                    1938
                ],
                "seq": [
                    1937,
                    1938,
                    1940
                ],
                "pair": [
                    1937,
                    1938,
                    1939,
                    1940
                ],
                "join": [
                    1937
                ],
                "count": [
                    1937
                ],
                "Sequence": [
                    1951
                ],
                "mangled_aggfuncs": [
                    2018,
                    2020,
                    2022,
                    1973,
                    1979,
                    1981
                ],
                "aggfunc.__name__": [
                    1977
                ],
                "mangled_aggfuncs.append": [
                    1979
                ],
                "is_dict": [
                    2010,
                    2011,
                    2015
                ],
                "is_dict_like": [
                    2017,
                    2010
                ],
                "agg_spec": [
                    2016,
                    2024,
                    2010,
                    2011,
                    2012,
                    2013
                ],
                "is_list_like": [
                    2017,
                    2011
                ],
                "mangled_aggspec": [
                    2024,
                    2026,
                    2013,
                    2022
                ],
                "agg_spec.items": [
                    2016
                ],
                "_managle_lambda_list": [
                    2024,
                    2018
                ],
                "result.copy": [
                    2047
                ],
                "obj_cols": [
                    2056,
                    2049
                ],
                "range": [
                    2051
                ],
                "is_object_dtype": [
                    2052
                ],
                "result.dtypes.iloc": [
                    2052
                ],
                "result.dtypes": [
                    2052
                ],
                "n": [
                    2056,
                    2058,
                    2061
                ],
                "converted": [
                    2057,
                    2061
                ],
                "maybe_convert_objects": [
                    2057
                ]
            },
            "filtered_variables_in_file": {
                "TYPE_CHECKING": [
                    74
                ],
                "NamedAgg": [
                    78
                ],
                "namedtuple": [
                    78
                ],
                "AggScalar": [
                    80
                ],
                "Union": [
                    352,
                    387,
                    328,
                    329,
                    362,
                    363,
                    1645,
                    1678,
                    80
                ],
                "Callable": [
                    80,
                    1465
                ],
                "Any": [
                    80,
                    1984,
                    1951
                ],
                "ScalarResult": [
                    84
                ],
                "typing.TypeVar": [
                    84
                ],
                "typing": [
                    84
                ],
                "Type": [
                    110,
                    87
                ],
                "FrameOrSeries": [
                    110,
                    87
                ],
                "self._make_wrapper": [
                    102
                ],
                "self": [
                    512,
                    520,
                    521,
                    524,
                    525,
                    1039,
                    1551,
                    1552,
                    1045,
                    1047,
                    1023,
                    1567,
                    1575,
                    568,
                    1593,
                    1596,
                    573,
                    1598,
                    1599,
                    1600,
                    1601,
                    1605,
                    1607,
                    585,
                    587,
                    1613,
                    1615,
                    1621,
                    1622,
                    1116,
                    1119,
                    1120,
                    1633,
                    1634,
                    1635,
                    1124,
                    102,
                    1128,
                    1129,
                    1133,
                    1138,
                    631,
                    1143,
                    1145,
                    638,
                    639,
                    1665,
                    1666,
                    643,
                    644,
                    1669,
                    1160,
                    1672,
                    1675,
                    658,
                    1172,
                    151,
                    666,
                    667,
                    160,
                    161,
                    1697,
                    163,
                    1188,
                    1189,
                    1190,
                    1191,
                    1702,
                    1194,
                    1707,
                    1710,
                    1714,
                    1717,
                    1720,
                    1209,
                    1722,
                    1724,
                    1725,
                    705,
                    707,
                    708,
                    1732,
                    1733,
                    1234,
                    1746,
                    1747,
                    1241,
                    1761,
                    740,
                    1252,
                    1265,
                    1267,
                    245,
                    251,
                    255,
                    257,
                    259,
                    260,
                    772,
                    263,
                    267,
                    269,
                    783,
                    784,
                    1809,
                    274,
                    1300,
                    1812,
                    793,
                    794,
                    797,
                    1823,
                    801,
                    1313,
                    291,
                    1317,
                    807,
                    1323,
                    812,
                    813,
                    1838,
                    311,
                    1338,
                    315,
                    1344,
                    1345,
                    1346,
                    1355,
                    1357,
                    1388,
                    1389,
                    1390,
                    1392,
                    1399,
                    1402,
                    381,
                    382,
                    384,
                    1409,
                    1414,
                    1418,
                    1420,
                    1424,
                    1426,
                    407,
                    1434,
                    1436,
                    416,
                    1440,
                    419,
                    420,
                    422,
                    935,
                    1447,
                    428,
                    942,
                    431,
                    432,
                    943,
                    945,
                    947,
                    436,
                    949,
                    1456,
                    439,
                    1461,
                    442,
                    443,
                    955,
                    448,
                    960,
                    963,
                    966,
                    967,
                    460,
                    463,
                    981,
                    470,
                    982,
                    985,
                    1498,
                    475,
                    476,
                    990,
                    482,
                    485,
                    998,
                    1001,
                    492,
                    1009,
                    507,
                    511
                ],
                "name": [
                    132,
                    133,
                    138,
                    139,
                    1554,
                    1555,
                    1567,
                    310,
                    568,
                    315,
                    318,
                    319,
                    448,
                    449,
                    453,
                    1349,
                    1350,
                    1244,
                    1124,
                    485,
                    102,
                    486,
                    104,
                    1126,
                    106,
                    1128,
                    492,
                    1129,
                    1131,
                    1640,
                    1642,
                    1906
                ],
                "parent_method": [
                    104,
                    105
                ],
                "klass": [
                    104,
                    138,
                    482,
                    493
                ],
                "prop.__doc__": [
                    105
                ],
                "prop": [
                    105,
                    106,
                    107,
                    139,
                    138
                ],
                "parent_method.__doc__": [
                    105
                ],
                "prop.__name__": [
                    106
                ],
                "FrozenSet": [
                    110
                ],
                "whitelist": [
                    132
                ],
                "cls": [
                    139,
                    133,
                    141
                ],
                "generate_property": [
                    138
                ],
                "pinner": [
                    143
                ],
                "GroupBy": [
                    147,
                    820
                ],
                "_apply_whitelist": [
                    148,
                    822
                ],
                "base.series_apply_whitelist": [
                    146,
                    148
                ],
                "base": [
                    387,
                    328,
                    362,
                    1645,
                    1678,
                    465,
                    146,
                    819,
                    148,
                    468,
                    822,
                    1404,
                    1407
                ],
                "self._selected_obj": [
                    512,
                    482,
                    291,
                    963,
                    1317,
                    1733,
                    1720,
                    1551,
                    1809,
                    1234,
                    981,
                    507,
                    151,
                    1722,
                    315,
                    511
                ],
                "Iterable": [
                    980,
                    150
                ],
                "Series": [
                    641,
                    387,
                    388,
                    515,
                    772,
                    774,
                    525,
                    1678,
                    146,
                    659,
                    150,
                    791,
                    1816,
                    410,
                    416,
                    1313,
                    291,
                    679,
                    435,
                    1332,
                    442,
                    576,
                    451,
                    1221,
                    328,
                    329,
                    1232,
                    1233,
                    980,
                    1364,
                    985,
                    352,
                    740,
                    357,
                    362,
                    363,
                    1645,
                    502,
                    638
                ],
                "self._selection": [
                    160,
                    163
                ],
                "self.obj.name": [
                    161,
                    525
                ],
                "self.obj": [
                    161,
                    1697,
                    1605,
                    587,
                    524,
                    525,
                    1039,
                    784,
                    407,
                    1593,
                    667
                ],
                "_agg_see_also_doc": [
                    824,
                    225,
                    907,
                    165
                ],
                "dedent": [
                    824,
                    834,
                    165,
                    175
                ],
                "_agg_examples_doc": [
                    226,
                    908,
                    834,
                    175
                ],
                "apply": [
                    222
                ],
                "func": [
                    1409,
                    260,
                    1414,
                    263,
                    1401,
                    1418,
                    267,
                    1147,
                    1402,
                    1424,
                    1426,
                    916,
                    1557,
                    918,
                    921,
                    1405,
                    801,
                    929,
                    933,
                    935,
                    1407,
                    556,
                    557,
                    1453,
                    559,
                    943,
                    945,
                    1454,
                    1456,
                    1459,
                    949,
                    310,
                    1461,
                    955,
                    319,
                    960,
                    450,
                    1346,
                    1732,
                    460,
                    462,
                    463,
                    465,
                    466,
                    468,
                    470,
                    475,
                    476,
                    222,
                    1125,
                    487,
                    234,
                    1130,
                    239,
                    244,
                    245,
                    247,
                    1145,
                    250,
                    251,
                    1404,
                    1399,
                    255
                ],
                "args": [
                    256,
                    1409,
                    260,
                    1414,
                    263,
                    1418,
                    267,
                    1424,
                    1557,
                    935,
                    557,
                    1454,
                    559,
                    943,
                    944,
                    945,
                    563,
                    1456,
                    1459,
                    1461,
                    450,
                    1346,
                    463,
                    470,
                    475,
                    222,
                    1125,
                    487,
                    1130,
                    245,
                    1402,
                    1147
                ],
                "kwargs": [
                    256,
                    1409,
                    643,
                    260,
                    1414,
                    263,
                    1418,
                    267,
                    1424,
                    916,
                    1557,
                    918,
                    920,
                    935,
                    557,
                    1454,
                    559,
                    943,
                    944,
                    945,
                    563,
                    1456,
                    1459,
                    1461,
                    450,
                    1346,
                    1220,
                    1223,
                    1226,
                    1867,
                    1868,
                    463,
                    470,
                    475,
                    222,
                    1125,
                    487,
                    1130,
                    238,
                    239,
                    240,
                    1904,
                    245,
                    1402,
                    1147
                ],
                "Appender": [
                    641,
                    231,
                    458,
                    913,
                    1395,
                    216
                ],
                "_apply_docs": [
                    217,
                    218
                ],
                "relabeling": [
                    234,
                    970,
                    237,
                    916,
                    917,
                    252
                ],
                "columns": [
                    1925,
                    918,
                    1693,
                    1696,
                    294,
                    300,
                    303,
                    305,
                    307,
                    325,
                    974,
                    350,
                    355,
                    1508,
                    357,
                    1510,
                    1512,
                    235,
                    238,
                    239,
                    1904,
                    241,
                    1906,
                    1660,
                    253,
                    1663
                ],
                "no_arg_message": [
                    242,
                    236
                ],
                "col": [
                    1496,
                    1498,
                    1812,
                    239
                ],
                "abc.Iterable": [
                    247
                ],
                "abc": [
                    247
                ],
                "_maybe_mangle_lambdas": [
                    250,
                    933
                ],
                "ret": [
                    270,
                    277,
                    280,
                    281,
                    251,
                    253
                ],
                "self._aggregate_multiple_funcs": [
                    251,
                    955
                ],
                "ret.columns": [
                    253
                ],
                "cyfunc": [
                    256,
                    257,
                    255
                ],
                "self._get_cython_func": [
                    460,
                    1399,
                    255
                ],
                "self.grouper.nkeys": [
                    259,
                    1116,
                    419,
                    942
                ],
                "self.grouper": [
                    259,
                    1669,
                    520,
                    269,
                    783,
                    1552,
                    1172,
                    1045,
                    1812,
                    793,
                    666,
                    1440,
                    419,
                    420,
                    1189,
                    422,
                    1190,
                    1191,
                    1194,
                    813,
                    942,
                    1710,
                    1596,
                    1724,
                    1598,
                    705,
                    1345,
                    707,
                    708,
                    1607,
                    585,
                    1613,
                    1747,
                    1143,
                    1116,
                    1633,
                    1634,
                    1635,
                    631,
                    382,
                    1023
                ],
                "self._python_agg_general": [
                    943,
                    260,
                    263
                ],
                "result": [
                    512,
                    513,
                    2051,
                    2052,
                    522,
                    511,
                    2058,
                    2061,
                    2062,
                    1047,
                    1054,
                    1056,
                    1057,
                    1058,
                    1059,
                    1062,
                    1064,
                    1066,
                    1068,
                    1072,
                    1075,
                    1076,
                    1080,
                    1082,
                    2047,
                    1616,
                    1618,
                    1122,
                    1126,
                    1642,
                    1131,
                    1133,
                    1139,
                    1147,
                    638,
                    639,
                    1662,
                    1663,
                    1666,
                    643,
                    1667,
                    645,
                    646,
                    1670,
                    1160,
                    1673,
                    1675,
                    1166,
                    1695,
                    1696,
                    1697,
                    1699,
                    1705,
                    1707,
                    1708,
                    1712,
                    1715,
                    1717,
                    1288,
                    267,
                    269,
                    271,
                    1296,
                    1302,
                    791,
                    1305,
                    797,
                    1319,
                    1321,
                    1323,
                    352,
                    354,
                    355,
                    357,
                    359,
                    381,
                    384,
                    1414,
                    1417,
                    1423,
                    1426,
                    407,
                    410,
                    411,
                    1442,
                    1443,
                    935,
                    937,
                    1450,
                    939,
                    428,
                    431,
                    432,
                    433,
                    945,
                    949,
                    442,
                    443,
                    955,
                    446,
                    960,
                    962,
                    963,
                    453,
                    455,
                    967,
                    968,
                    973,
                    974,
                    976,
                    475,
                    476,
                    500,
                    502,
                    1020,
                    509,
                    1023
                ],
                "self._aggregate_named": [
                    267
                ],
                "index": [
                    1669,
                    1670,
                    1289,
                    269,
                    271,
                    1302,
                    420,
                    422,
                    423,
                    1703,
                    1704,
                    427,
                    428,
                    1710,
                    1711,
                    354,
                    357,
                    1270,
                    1271,
                    1278
                ],
                "Index": [
                    418,
                    451,
                    962,
                    1701,
                    422,
                    1924,
                    328,
                    269,
                    1199,
                    1232,
                    1206,
                    1660,
                    1693,
                    350
                ],
                "self.grouper.names": [
                    1633,
                    708,
                    420,
                    422,
                    269,
                    1172
                ],
                "create_series_with_explicit_dtype": [
                    1222,
                    270
                ],
                "self.as_index": [
                    1600,
                    1665,
                    966,
                    1702,
                    1838,
                    274,
                    1209
                ],
                "concat": [
                    1731,
                    1831,
                    1261,
                    1390,
                    1296,
                    500,
                    280,
                    1372
                ],
                "Substitution": [
                    224,
                    457,
                    906,
                    1394
                ],
                "_shared_docs": [
                    913,
                    231
                ],
                "agg": [
                    978,
                    283
                ],
                "aggregate": [
                    978,
                    283
                ],
                "arg": [
                    294,
                    295,
                    296,
                    297,
                    300,
                    304,
                    307,
                    310,
                    286
                ],
                "SpecificationError": [
                    292,
                    925
                ],
                "arg.keys": [
                    294
                ],
                "arg.items": [
                    295
                ],
                "x": [
                    321,
                    643,
                    296,
                    297,
                    808,
                    1228,
                    557,
                    559,
                    1328,
                    1456,
                    563,
                    1235,
                    1461,
                    1047,
                    1757
                ],
                "f": [
                    304,
                    305
                ],
                "columns.append": [
                    305
                ],
                "com.get_callable_name": [
                    305,
                    1908,
                    1917,
                    1975
                ],
                "com": [
                    305,
                    1908,
                    1975,
                    1177,
                    1917
                ],
                "results": [
                    321,
                    323,
                    484,
                    325,
                    1830,
                    1831,
                    1834,
                    1836,
                    494,
                    1839,
                    1840,
                    497,
                    500,
                    309,
                    1817,
                    319
                ],
                "OrderedDict": [
                    1122,
                    1139,
                    309,
                    446
                ],
                "obj": [
                    1162,
                    1420,
                    1039,
                    1040,
                    1423,
                    1551,
                    1043,
                    1552,
                    1045,
                    1809,
                    1812,
                    1816,
                    1817,
                    1436,
                    1823,
                    1826,
                    1828,
                    1447,
                    1450,
                    1836,
                    311,
                    316,
                    317,
                    318,
                    319,
                    1344,
                    1345,
                    1357,
                    1616,
                    1618,
                    981,
                    1621,
                    983,
                    1496,
                    985,
                    1623,
                    987,
                    1371,
                    989,
                    1625,
                    1120,
                    1123,
                    1508,
                    1509,
                    1512,
                    1129,
                    1388,
                    1133,
                    1138,
                    1141,
                    1142
                ],
                "copy.copy": [
                    316
                ],
                "copy": [
                    316
                ],
                "obj._reset_cache": [
                    317
                ],
                "obj._selection": [
                    318
                ],
                "obj.aggregate": [
                    319
                ],
                "DataFrame": [
                    1288,
                    1417,
                    1166,
                    1679,
                    1170,
                    1428,
                    1305,
                    1054,
                    1695,
                    1186,
                    1187,
                    1701,
                    1062,
                    1705,
                    1450,
                    428,
                    1712,
                    819,
                    437,
                    1465,
                    1215,
                    321,
                    325,
                    329,
                    1481,
                    1612,
                    1616,
                    1618,
                    1492,
                    1115,
                    352,
                    1376,
                    354,
                    997,
                    1512,
                    363,
                    2029,
                    1646,
                    1135,
                    1662
                ],
                "results.values": [
                    321
                ],
                "Mapping": [
                    387,
                    328,
                    362,
                    1645,
                    1678
                ],
                "base.OutputKey": [
                    387,
                    328,
                    362,
                    1645,
                    1678
                ],
                "np.ndarray": [
                    1058,
                    387,
                    451,
                    328,
                    362,
                    1068,
                    1645,
                    1678,
                    1232,
                    1015,
                    1016,
                    762
                ],
                "np": [
                    387,
                    1287,
                    1678,
                    655,
                    789,
                    1304,
                    416,
                    1058,
                    1703,
                    1068,
                    686,
                    688,
                    693,
                    697,
                    699,
                    702,
                    451,
                    1092,
                    1093,
                    328,
                    968,
                    1101,
                    1102,
                    591,
                    719,
                    1103,
                    594,
                    722,
                    1232,
                    599,
                    1751,
                    1369,
                    730,
                    608,
                    609,
                    1377,
                    744,
                    617,
                    362,
                    746,
                    620,
                    1645,
                    750,
                    626,
                    755,
                    1015,
                    502,
                    758,
                    1016,
                    762,
                    635,
                    763
                ],
                "indexed_output": [
                    354,
                    357,
                    1659,
                    1692,
                    349,
                    1662,
                    1695
                ],
                "key.position": [
                    1659,
                    1692,
                    349
                ],
                "key": [
                    1660,
                    1692,
                    2016,
                    1605,
                    1693,
                    1607,
                    2022,
                    1659,
                    349,
                    1597,
                    350
                ],
                "val": [
                    784,
                    786,
                    667,
                    1692,
                    671,
                    674,
                    679,
                    587,
                    591,
                    594,
                    596,
                    597,
                    598,
                    599,
                    604,
                    349,
                    1759,
                    609,
                    612,
                    1659
                ],
                "output.items": [
                    1659,
                    1692,
                    349
                ],
                "output": [
                    406,
                    407,
                    1692,
                    1693,
                    1441,
                    1448,
                    1450,
                    450,
                    451,
                    453,
                    1494,
                    1498,
                    349,
                    350,
                    353,
                    1505,
                    1509,
                    1512,
                    1659,
                    1660,
                    382
                ],
                "key.label": [
                    1660,
                    1693,
                    350
                ],
                "result.columns": [
                    1696,
                    962,
                    355,
                    963,
                    1442,
                    2051,
                    1450,
                    974,
                    1423,
                    1302,
                    1663
                ],
                "self._wrap_series_output": [
                    381,
                    407
                ],
                "self.grouper.result_index": [
                    1669,
                    1191,
                    1710,
                    631,
                    793,
                    382
                ],
                "_convert": [
                    384,
                    1675,
                    1332,
                    1717
                ],
                "self._reindex_output": [
                    384,
                    1323,
                    428,
                    1675,
                    1717,
                    443,
                    797,
                    639
                ],
                "self.obj.index": [
                    1697,
                    525,
                    407
                ],
                "keys": [
                    416,
                    420,
                    1188,
                    422,
                    1253,
                    1195,
                    1199,
                    1169,
                    1170,
                    1265,
                    436,
                    1206,
                    439,
                    1338,
                    1244,
                    414
                ],
                "self._selection_name": [
                    416,
                    1313,
                    708,
                    740,
                    772,
                    432,
                    442,
                    794,
                    638
                ],
                "np.float64": [
                    416,
                    502
                ],
                "MultiIndex.from_tuples": [
                    420
                ],
                "MultiIndex": [
                    768,
                    1283,
                    420,
                    1285,
                    734
                ],
                "values": [
                    1287,
                    2058,
                    1297,
                    1304,
                    1177,
                    1181,
                    1057,
                    1313,
                    1443,
                    1188,
                    1703,
                    425,
                    428,
                    1328,
                    435,
                    436,
                    437,
                    1203,
                    439,
                    1332,
                    442,
                    1338,
                    1213,
                    1228,
                    1230,
                    1235,
                    1236,
                    1244,
                    989,
                    993,
                    1253,
                    1261,
                    1265,
                    1276
                ],
                "_get_index": [
                    442,
                    427
                ],
                "result.stack": [
                    431
                ],
                "self.observed": [
                    1601,
                    1607,
                    431
                ],
                "result.name": [
                    432,
                    511
                ],
                "self._concat_objects": [
                    1188,
                    1252,
                    1265,
                    436,
                    439,
                    1338
                ],
                "not_indexed_same": [
                    1188,
                    1253,
                    436,
                    439,
                    1338
                ],
                "group": [
                    1554,
                    1555,
                    1557,
                    1454,
                    1455,
                    1459,
                    1460,
                    568,
                    1467,
                    1471,
                    448,
                    449,
                    450,
                    1349,
                    1350,
                    1355,
                    1484,
                    1362,
                    1369,
                    1372,
                    1373,
                    1374,
                    1377,
                    1378,
                    1380,
                    485,
                    486,
                    487,
                    1381
                ],
                "group.name": [
                    449
                ],
                "self._transform_general": [
                    1424,
                    1402,
                    1418,
                    463
                ],
                "base.transform_kernel_whitelist": [
                    465,
                    1404
                ],
                "msg": [
                    1359,
                    1360,
                    466,
                    467,
                    596,
                    597,
                    1405,
                    1406
                ],
                "base.cythonized_kernels": [
                    468,
                    1407
                ],
                "self._transform_fast": [
                    1426,
                    476
                ],
                "_transform_template": [
                    458,
                    1395
                ],
                "object.__setattr__": [
                    1350,
                    1555,
                    486
                ],
                "res": [
                    1557,
                    1560,
                    1565,
                    1566,
                    1443,
                    1571,
                    1447,
                    1448,
                    1467,
                    1477,
                    1482,
                    1355,
                    1485,
                    1487,
                    1362,
                    1490,
                    1364,
                    1371,
                    1372,
                    1377,
                    487,
                    489,
                    490,
                    1386,
                    493,
                    625,
                    628,
                    630,
                    634,
                    635,
                    636,
                    638
                ],
                "ABCDataFrame": [
                    489
                ],
                "ABCSeries": [
                    489,
                    1267,
                    1303
                ],
                "res._values": [
                    490
                ],
                "indexer": [
                    1092,
                    1093,
                    492,
                    493,
                    1200,
                    1105,
                    1203,
                    1110
                ],
                "self._get_index": [
                    568,
                    492,
                    1567
                ],
                "ser": [
                    493,
                    494
                ],
                "results.append": [
                    494
                ],
                "sort_index": [
                    500
                ],
                "dtype": [
                    507,
                    508,
                    509
                ],
                "self._selected_obj.dtype": [
                    507
                ],
                "is_numeric_dtype": [
                    508
                ],
                "maybe_downcast_to_dtype": [
                    509
                ],
                "self._selected_obj.name": [
                    511
                ],
                "result.index": [
                    512,
                    1697,
                    1670,
                    968
                ],
                "self._selected_obj.index": [
                    512
                ],
                "ids": [
                    520,
                    522,
                    783,
                    786,
                    787,
                    789,
                    666,
                    670,
                    671,
                    1440,
                    1443,
                    686,
                    688,
                    690,
                    693,
                    585,
                    719,
                    721,
                    594,
                    1747,
                    1748,
                    599,
                    729,
                    604,
                    1757,
                    608,
                    621,
                    624,
                    636
                ],
                "_": [
                    1440,
                    1442,
                    1732,
                    520,
                    585,
                    783,
                    754,
                    1747,
                    598,
                    666,
                    1023
                ],
                "ngroup": [
                    520,
                    1440
                ],
                "self.grouper.group_info": [
                    1440,
                    520,
                    585,
                    783,
                    1747,
                    666
                ],
                "cast": [
                    1446,
                    1159,
                    521,
                    523,
                    1145,
                    1434,
                    1054
                ],
                "self._transform_should_cast": [
                    521,
                    1434,
                    1145
                ],
                "func_nm": [
                    521,
                    1434
                ],
                "out": [
                    770,
                    771,
                    772,
                    522,
                    524,
                    525,
                    789,
                    792,
                    699,
                    715,
                    718,
                    726,
                    730,
                    731,
                    738,
                    739,
                    740,
                    744,
                    759,
                    620,
                    625,
                    755,
                    628,
                    630,
                    758,
                    635,
                    636
                ],
                "algorithms.take_1d": [
                    522,
                    1443
                ],
                "algorithms": [
                    674,
                    522,
                    1443,
                    598
                ],
                "result._values": [
                    522
                ],
                "self._try_cast": [
                    1160,
                    524,
                    1447
                ],
                "wrapper": [
                    1498,
                    563,
                    557,
                    559
                ],
                "b": [
                    563,
                    564
                ],
                "notna": [
                    564,
                    1566
                ],
                "indices": [
                    1575,
                    1549,
                    567,
                    573,
                    1567
                ],
                "true_and_notna": [
                    568
                ],
                "filtered": [
                    573,
                    574
                ],
                "self._apply_filter": [
                    573,
                    1575
                ],
                "dropna": [
                    613,
                    710,
                    1575,
                    713,
                    720,
                    1813,
                    729,
                    573
                ],
                "self.obj._internal_get_values": [
                    784,
                    587,
                    667
                ],
                "isna": [
                    602,
                    786,
                    1565,
                    591
                ],
                "np.datetime64": [
                    591
                ],
                "sorter": [
                    759,
                    686,
                    688,
                    594,
                    690,
                    758,
                    599,
                    730,
                    731,
                    604
                ],
                "np.lexsort": [
                    686,
                    688,
                    594,
                    758,
                    599,
                    730
                ],
                "val.dtype": [
                    596,
                    597
                ],
                "algorithms.factorize": [
                    674,
                    598
                ],
                "_isna": [
                    600,
                    602,
                    612
                ],
                "a": [
                    600
                ],
                "idx": [
                    608,
                    2050,
                    2051,
                    2052,
                    614,
                    618,
                    620,
                    719,
                    626,
                    754,
                    755,
                    693,
                    698,
                    636,
                    702
                ],
                "np.r_": [
                    608,
                    609,
                    617,
                    746,
                    719,
                    693,
                    697,
                    699
                ],
                "np.nonzero": [
                    608,
                    699,
                    693
                ],
                "inc": [
                    609,
                    706,
                    675,
                    614,
                    615,
                    617,
                    618,
                    682,
                    620,
                    729,
                    697,
                    698,
                    699,
                    702
                ],
                "mask": [
                    612,
                    615,
                    711,
                    617,
                    712,
                    715,
                    1103,
                    1104,
                    1105,
                    786,
                    723,
                    1748,
                    789,
                    1751,
                    729,
                    670,
                    671
                ],
                "astype": [
                    620
                ],
                "np.add.reduceat": [
                    620,
                    702
                ],
                "np.add": [
                    722,
                    620,
                    702
                ],
                "np.flatnonzero": [
                    626
                ],
                "ri": [
                    634,
                    635,
                    638,
                    631
                ],
                "np.zeros": [
                    744,
                    635,
                    1103
                ],
                "out.dtype": [
                    635
                ],
                "self.apply": [
                    658,
                    643,
                    807
                ],
                "x.describe": [
                    643
                ],
                "self.axis": [
                    644,
                    1672,
                    1552,
                    1300,
                    1047,
                    1823,
                    1456,
                    1714,
                    947,
                    1461,
                    955,
                    1345,
                    1615,
                    1234,
                    982,
                    1622,
                    1119,
                    1388,
                    1389,
                    1390,
                    1267
                ],
                "result.T": [
                    1673,
                    1715,
                    645
                ],
                "result.unstack": [
                    646
                ],
                "Series.describe.__doc__": [
                    641
                ],
                "Series.describe": [
                    641
                ],
                "bins": [
                    673,
                    679,
                    655,
                    663,
                    728,
                    733
                ],
                "np.iterable": [
                    655
                ],
                "Series.value_counts": [
                    659
                ],
                "normalize": [
                    660,
                    717
                ],
                "sort": [
                    728,
                    757,
                    661
                ],
                "ascending": [
                    730,
                    662,
                    758
                ],
                "lab": [
                    674,
                    675,
                    706,
                    679,
                    680,
                    681,
                    682,
                    684,
                    686,
                    688,
                    721,
                    690,
                    696
                ],
                "lev": [
                    674,
                    707,
                    680,
                    681,
                    1640,
                    1642
                ],
                "llab": [
                    696,
                    706,
                    682,
                    675
                ],
                "cut": [
                    679
                ],
                "lab.cat.categories": [
                    680
                ],
                "lab.cat": [
                    680,
                    681
                ],
                "lev.take": [
                    681
                ],
                "lab.cat.codes": [
                    681
                ],
                "_multiindex.codes": [
                    682
                ],
                "_multiindex": [
                    682
                ],
                "is_interval_dtype": [
                    684
                ],
                "lab.left": [
                    686
                ],
                "lab.right": [
                    686
                ],
                "lchanges": [
                    696,
                    697
                ],
                "np.diff": [
                    699,
                    719
                ],
                "rep": [
                    706,
                    723,
                    725,
                    702
                ],
                "partial": [
                    1976,
                    702
                ],
                "np.repeat": [
                    763,
                    702,
                    750
                ],
                "codes": [
                    768,
                    705,
                    706,
                    711,
                    745,
                    715,
                    752,
                    731,
                    765,
                    766,
                    735
                ],
                "self.grouper.reconstructed_codes": [
                    705
                ],
                "level_codes": [
                    746,
                    745,
                    706,
                    715
                ],
                "levels": [
                    768,
                    707,
                    748,
                    735
                ],
                "ping.group_index": [
                    707,
                    1196
                ],
                "ping": [
                    1194,
                    707,
                    1196,
                    1195
                ],
                "self.grouper.groupings": [
                    1635,
                    707,
                    1189,
                    1190,
                    1194
                ],
                "names": [
                    768,
                    708,
                    1836,
                    1276,
                    1277,
                    1278,
                    735
                ],
                "mask.all": [
                    712
                ],
                "out.astype": [
                    718
                ],
                "d": [
                    722,
                    723,
                    725,
                    719
                ],
                "m": [
                    721,
                    722
                ],
                "np.add.at": [
                    722
                ],
                "acc": [
                    723,
                    725,
                    726
                ],
                "cat": [
                    729,
                    730
                ],
                "mi": [
                    768,
                    740,
                    772,
                    734
                ],
                "is_integer_dtype": [
                    738,
                    770
                ],
                "ensure_int64": [
                    771,
                    739
                ],
                "diff": [
                    744,
                    746,
                    748,
                    752,
                    763
                ],
                "ncat": [
                    748,
                    750
                ],
                "nbin": [
                    763,
                    748,
                    750
                ],
                "diff.sum": [
                    748
                ],
                "left": [
                    750,
                    754,
                    758,
                    759,
                    766
                ],
                "np.arange": [
                    968,
                    1102,
                    750,
                    1703
                ],
                "np.tile": [
                    750
                ],
                "right": [
                    752,
                    754
                ],
                "diff.cumsum": [
                    752
                ],
                "_get_join_indexers": [
                    754
                ],
                "np.where": [
                    755
                ],
                "lev_codes": [
                    763,
                    765
                ],
                "build_codes": [
                    765
                ],
                "codes.append": [
                    766
                ],
                "ngroups": [
                    1747,
                    788,
                    1757,
                    783
                ],
                "ensure_platform_int": [
                    787
                ],
                "minlength": [
                    788,
                    789
                ],
                "np.bincount": [
                    789
                ],
                "freq": [
                    814,
                    809,
                    806
                ],
                "x.pct_change": [
                    808
                ],
                "periods": [
                    809,
                    814
                ],
                "fill_method": [
                    809,
                    812
                ],
                "limit": [
                    809,
                    812
                ],
                "filled": [
                    816,
                    812,
                    813
                ],
                "fill_grp": [
                    813,
                    814
                ],
                "filled.groupby": [
                    813
                ],
                "self.grouper.codes": [
                    813
                ],
                "shifted": [
                    816,
                    814
                ],
                "fill_grp.shift": [
                    814
                ],
                "pin_whitelisted_properties": [
                    146,
                    819
                ],
                "base.dataframe_apply_whitelist": [
                    819,
                    822
                ],
                "_is_multi_agg_with_relabel": [
                    916
                ],
                "order": [
                    973,
                    1903,
                    1908,
                    918,
                    1911
                ],
                "_normalize_keyword_aggregation": [
                    918
                ],
                "how": [
                    1024,
                    999,
                    936,
                    935,
                    1034
                ],
                "self._aggregate": [
                    935
                ],
                "self._aggregate_frame": [
                    960,
                    945,
                    949
                ],
                "err": [
                    957,
                    1150
                ],
                "result.columns.levels": [
                    963
                ],
                "self._selected_obj.columns.name": [
                    963
                ],
                "self._selected_obj.columns": [
                    1720,
                    963,
                    1733
                ],
                "self._insert_inaxis_grouper_inplace": [
                    1666,
                    1707,
                    967
                ],
                "result.iloc": [
                    2061,
                    2058,
                    1443,
                    973
                ],
                "result._convert": [
                    976,
                    1321
                ],
                "obj.T": [
                    1623,
                    983
                ],
                "obj.name": [
                    985
                ],
                "self.exclusions": [
                    985,
                    1725,
                    990,
                    1599
                ],
                "label": [
                    1830,
                    989,
                    990
                ],
                "obj.items": [
                    1826,
                    989
                ],
                "agg_blocks": [
                    998,
                    1001,
                    1108,
                    1014,
                    1113,
                    1085,
                    1087
                ],
                "agg_items": [
                    1113,
                    1001,
                    1093,
                    998
                ],
                "self._cython_agg_blocks": [
                    998
                ],
                "alt": [
                    1031,
                    1047,
                    999
                ],
                "numeric_only": [
                    1011,
                    999
                ],
                "min_count": [
                    1024,
                    999
                ],
                "self._wrap_agged_blocks": [
                    1001,
                    1761
                ],
                "data": [
                    1761,
                    1124,
                    1093,
                    1125,
                    1160,
                    1129,
                    1130,
                    1102,
                    1039,
                    1103,
                    1009,
                    1746,
                    1012,
                    1142,
                    1143,
                    1752,
                    1754,
                    1018
                ],
                "BlockManager": [
                    1704,
                    1009,
                    1620,
                    1711
                ],
                "self._get_data_to_aggregate": [
                    1009,
                    1746
                ],
                "data.get_numeric_data": [
                    1012
                ],
                "List": [
                    1016,
                    1014,
                    1015
                ],
                "Block": [
                    1082,
                    1014
                ],
                "new_items": [
                    1084,
                    1092,
                    1015
                ],
                "deleted_items": [
                    1095,
                    1035,
                    1101,
                    1016,
                    1051
                ],
                "no_result": [
                    1064,
                    1017,
                    1020
                ],
                "block": [
                    1024,
                    1082,
                    1066,
                    1068,
                    1075,
                    1076,
                    1018,
                    1021
                ],
                "data.blocks": [
                    1752,
                    1754,
                    1018
                ],
                "locs": [
                    1035,
                    1039,
                    1754,
                    1051,
                    1084,
                    1021,
                    1759
                ],
                "block.mgr_locs.as_array": [
                    1021
                ],
                "block.mgr_locs": [
                    1021
                ],
                "self.grouper.aggregate": [
                    1023
                ],
                "block.values": [
                    1024,
                    1075,
                    1076
                ],
                "deleted_items.append": [
                    1051,
                    1035
                ],
                "data.items": [
                    1761,
                    1093,
                    1039
                ],
                "obj.shape": [
                    1040
                ],
                "obj.iloc": [
                    1043,
                    1447
                ],
                "s": [
                    1045,
                    1047
                ],
                "get_groupby": [
                    1045
                ],
                "s.aggregate": [
                    1047
                ],
                "result._data.blocks": [
                    1056,
                    1057
                ],
                "result._data": [
                    1056,
                    1057
                ],
                "result.ndim": [
                    1072,
                    1058
                ],
                "result.reshape": [
                    1080,
                    1059
                ],
                "maybe_downcast_numeric": [
                    1066
                ],
                "block.dtype": [
                    1066
                ],
                "block.is_extension": [
                    1068
                ],
                "result.shape": [
                    1072
                ],
                "_from_sequence": [
                    1075
                ],
                "result.ravel": [
                    1076
                ],
                "block.values.dtype": [
                    1076
                ],
                "agg_block": [
                    1082,
                    1085
                ],
                "block.make_block": [
                    1082
                ],
                "new_items.append": [
                    1084
                ],
                "agg_blocks.append": [
                    1085
                ],
                "DataError": [
                    1088
                ],
                "np.concatenate": [
                    1377,
                    1092,
                    1101
                ],
                "data.items.take": [
                    1093
                ],
                "np.sort": [
                    1093
                ],
                "deleted": [
                    1104,
                    1101
                ],
                "ai": [
                    1105,
                    1102
                ],
                "mask.cumsum": [
                    1105
                ],
                "offset": [
                    1107,
                    1110,
                    1111
                ],
                "blk": [
                    1108,
                    1109,
                    1110,
                    1751,
                    1752,
                    1754
                ],
                "loc": [
                    1759,
                    1109,
                    1110,
                    1111
                ],
                "blk.mgr_locs": [
                    1754,
                    1109,
                    1110
                ],
                "axis": [
                    1123,
                    1119
                ],
                "self._obj_with_exclusions": [
                    1120,
                    1344,
                    1420,
                    1138,
                    1621,
                    1436
                ],
                "obj._info_axis_number": [
                    1123
                ],
                "fres": [
                    1130,
                    1131,
                    1125,
                    1126
                ],
                "self.indices": [
                    1128
                ],
                "self.get_group": [
                    1129
                ],
                "self._wrap_frame_output": [
                    1133
                ],
                "cannot_agg": [
                    1164,
                    1155,
                    1140,
                    1163
                ],
                "item": [
                    1155,
                    1160,
                    1141,
                    1142,
                    1143,
                    1147
                ],
                "colg": [
                    1147,
                    1143
                ],
                "SeriesGroupBy": [
                    1721,
                    1812,
                    1606,
                    1143
                ],
                "colg.aggregate": [
                    1147
                ],
                "cannot_agg.append": [
                    1155
                ],
                "result_columns": [
                    1162,
                    1164,
                    1166
                ],
                "obj.columns": [
                    1508,
                    1509,
                    1162,
                    1388,
                    1423,
                    1616
                ],
                "result_columns.drop": [
                    1164
                ],
                "key_names": [
                    1172,
                    1197,
                    1206
                ],
                "com.not_none": [
                    1177
                ],
                "v": [
                    1283,
                    1287,
                    1303,
                    1304,
                    1306,
                    1181,
                    1183,
                    1187,
                    1213,
                    1214,
                    1216,
                    1220,
                    1221,
                    1226,
                    1867,
                    1230,
                    1232,
                    1233,
                    1267,
                    1270,
                    1276
                ],
                "first_not_none": [
                    1181,
                    1213
                ],
                "key_index": [
                    1313,
                    1284,
                    1285,
                    1191,
                    1289,
                    1306,
                    1196,
                    1197,
                    1200,
                    1298,
                    1299,
                    1332,
                    1206,
                    1210
                ],
                "ping.ngroups": [
                    1195
                ],
                "key_index.name": [
                    1197
                ],
                "key_lookup": [
                    1200,
                    1199
                ],
                "key_lookup.get_indexer": [
                    1200
                ],
                "i": [
                    1978,
                    1442,
                    1443,
                    1447,
                    1720,
                    1937,
                    1203,
                    1940,
                    1972,
                    1496,
                    1977,
                    1722,
                    1503
                ],
                "NDFrame": [
                    1216
                ],
                "v._construct_axes_dict": [
                    1220
                ],
                "v._constructor": [
                    1226,
                    1221
                ],
                "backup": [
                    1226,
                    1228,
                    1222
                ],
                "applied_index": [
                    1234,
                    1236
                ],
                "self._selected_obj._get_axis": [
                    1234
                ],
                "all_indexed_same": [
                    1258,
                    1235,
                    1263
                ],
                "all_indexes_same": [
                    1235
                ],
                "x.index": [
                    1235
                ],
                "singular_series": [
                    1243,
                    1236
                ],
                "applied_index.nlevels": [
                    1236
                ],
                "self.squeeze": [
                    1241
                ],
                "v.index.copy": [
                    1270
                ],
                "v.index": [
                    1306,
                    1283,
                    1270
                ],
                "index.name": [
                    1278,
                    1271
                ],
                "v.name": [
                    1276
                ],
                "stacked_values": [
                    1304,
                    1289,
                    1306,
                    1287
                ],
                "np.vstack": [
                    1304,
                    1287
                ],
                "np.asarray": [
                    1304,
                    1287
                ],
                "unstack": [
                    1296
                ],
                "key_index.names": [
                    1299
                ],
                "stacked_values.T": [
                    1306
                ],
                "so": [
                    1317,
                    1318
                ],
                "so.ndim": [
                    1318
                ],
                "so.dtypes.apply": [
                    1318
                ],
                "so.dtypes": [
                    1318
                ],
                "needs_i8_conversion": [
                    1318
                ],
                "_recast_datetimelike_result": [
                    1319
                ],
                "should_coerce": [
                    1328,
                    1333
                ],
                "Timestamp": [
                    1328
                ],
                "applied": [
                    1384,
                    1386,
                    1390,
                    1343
                ],
                "gen": [
                    1552,
                    1345,
                    1554,
                    1349
                ],
                "self.grouper.get_iterator": [
                    1552,
                    1345
                ],
                "fast_path": [
                    1346,
                    1355,
                    1357,
                    1454,
                    1488,
                    1459,
                    1463,
                    1471
                ],
                "slow_path": [
                    1346,
                    1355,
                    1455,
                    1460,
                    1463,
                    1466,
                    1467
                ],
                "self._define_paths": [
                    1346
                ],
                "path": [
                    1348,
                    1477,
                    1352,
                    1482,
                    1355,
                    1485,
                    1488,
                    1362,
                    1490,
                    1466
                ],
                "self._choose_path": [
                    1355
                ],
                "self._transform_item_by_item": [
                    1357
                ],
                "np.prod": [
                    1369
                ],
                "group.shape": [
                    1369,
                    1378
                ],
                "res.index.is_": [
                    1371
                ],
                "res.index": [
                    1371
                ],
                "obj.index": [
                    1512,
                    1450,
                    1388,
                    1618,
                    1371
                ],
                "r": [
                    1376,
                    1384,
                    1372,
                    1373,
                    1374
                ],
                "group.columns": [
                    1380,
                    1484,
                    1372,
                    1373
                ],
                "r.columns": [
                    1373
                ],
                "r.index": [
                    1374
                ],
                "group.index": [
                    1377,
                    1381,
                    1374
                ],
                "reshape": [
                    1377
                ],
                "res.values": [
                    1377
                ],
                "applied.append": [
                    1384,
                    1386
                ],
                "concat_index": [
                    1388,
                    1391
                ],
                "other_axis": [
                    1824,
                    1836,
                    1389,
                    1391
                ],
                "concatenated": [
                    1392,
                    1390,
                    1391
                ],
                "concatenated.reindex": [
                    1391
                ],
                "self._set_result_index_ordered": [
                    1392
                ],
                "result.columns.equals": [
                    1423
                ],
                "output.append": [
                    1448
                ],
                "DataFrame._from_arrays": [
                    1450
                ],
                "group.apply": [
                    1460,
                    1455
                ],
                "res_fast": [
                    1481,
                    1487,
                    1484,
                    1471
                ],
                "res_fast.columns.equals": [
                    1484
                ],
                "res_fast.columns": [
                    1484
                ],
                "res_fast.equals": [
                    1487
                ],
                "inds": [
                    1503,
                    1510,
                    1495
                ],
                "transform": [
                    1498
                ],
                "inds.append": [
                    1503
                ],
                "columns.take": [
                    1510
                ],
                "res.squeeze": [
                    1560
                ],
                "is_bool": [
                    1565
                ],
                "is_scalar": [
                    1565
                ],
                "indices.append": [
                    1567
                ],
                "ndim": [
                    1603,
                    1591
                ],
                "subset": [
                    1604,
                    1605,
                    1607,
                    1592,
                    1593,
                    1595
                ],
                "DataFrameGroupBy": [
                    1594
                ],
                "result_index": [
                    1616,
                    1618,
                    1613
                ],
                "self.grouper.levels": [
                    1613
                ],
                "T": [
                    1616
                ],
                "obj.T._data": [
                    1623
                ],
                "obj._data": [
                    1625
                ],
                "izip": [
                    1640,
                    1629
                ],
                "self.grouper.get_group_levels": [
                    1634
                ],
                "grp.in_axis": [
                    1635
                ],
                "grp": [
                    1635
                ],
                "in_axis": [
                    1640,
                    1641
                ],
                "result.insert": [
                    1642
                ],
                "result._consolidate": [
                    1667,
                    1708
                ],
                "values.shape": [
                    1703
                ],
                "blocks": [
                    1761,
                    1703,
                    1704,
                    1711,
                    1759
                ],
                "mgr": [
                    1704,
                    1705,
                    1712,
                    1711
                ],
                "items": [
                    1704,
                    1711
                ],
                "colname": [
                    1720,
                    1721,
                    1723
                ],
                "self._selected_obj.iloc": [
                    1722
                ],
                "col_groupby": [
                    1732
                ],
                "self._iterate_column_groupbys": [
                    1732
                ],
                "vals": [
                    1757,
                    1750
                ],
                "_isna_ndarraylike": [
                    1751
                ],
                "np.atleast_2d": [
                    1751
                ],
                "blk.get_values": [
                    1751
                ],
                "counted": [
                    1756,
                    1759
                ],
                "lib.count_level_2d": [
                    1757
                ],
                "lib": [
                    1757
                ],
                "make_block": [
                    1759
                ],
                "nunique": [
                    1812
                ],
                "groupby_series": [
                    1817,
                    1830
                ],
                "axis_number": [
                    1824,
                    1825,
                    1833,
                    1823
                ],
                "obj._get_axis_number": [
                    1823
                ],
                "iter_func": [
                    1826,
                    1828,
                    1830
                ],
                "obj.iterrows": [
                    1828
                ],
                "content": [
                    1830
                ],
                "results.T": [
                    1834
                ],
                "results._get_axis": [
                    1836
                ],
                "obj._get_axis": [
                    1836
                ],
                "results.index": [
                    1839
                ],
                "ibase.default_index": [
                    1839
                ],
                "ibase": [
                    1839
                ],
                "boxplot": [
                    1842
                ],
                "boxplot_frame_groupby": [
                    1842
                ],
                "kwargs.values": [
                    1867
                ],
                "aggspec": [
                    1918,
                    1907,
                    1925,
                    1902
                ],
                "defaultdict": [
                    1902
                ],
                "pairs": [
                    1904,
                    1906
                ],
                "kwargs.items": [
                    1904
                ],
                "column": [
                    1906,
                    1907,
                    1908,
                    1917,
                    1918
                ],
                "aggfunc": [
                    1906,
                    1907,
                    1908,
                    1974,
                    1975,
                    1976,
                    1977,
                    1979,
                    1917,
                    1919
                ],
                "append": [
                    1907
                ],
                "order.append": [
                    1908
                ],
                "uniquified_order": [
                    1924,
                    1911
                ],
                "_make_unique": [
                    1921,
                    1911
                ],
                "aggspec_order": [
                    1921,
                    1916
                ],
                "aggfuncs": [
                    2016,
                    2017,
                    2018,
                    2020,
                    1969,
                    1971,
                    1974,
                    1918,
                    1919
                ],
                "aggspec.items": [
                    1918
                ],
                "uniquified_aggspec": [
                    1921,
                    1924
                ],
                "col_idx_order": [
                    1924,
                    1925
                ],
                "get_indexer": [
                    1924
                ],
                "seq.count": [
                    1938
                ],
                "seq": [
                    1937,
                    1938,
                    1940
                ],
                "pair": [
                    1937,
                    1938,
                    1939,
                    1940
                ],
                "join": [
                    1937
                ],
                "count": [
                    1937
                ],
                "Sequence": [
                    1951
                ],
                "mangled_aggfuncs": [
                    2018,
                    2020,
                    2022,
                    1973,
                    1979,
                    1981
                ],
                "aggfunc.__name__": [
                    1977
                ],
                "mangled_aggfuncs.append": [
                    1979
                ],
                "is_dict": [
                    2010,
                    2011,
                    2015
                ],
                "is_dict_like": [
                    2017,
                    2010
                ],
                "agg_spec": [
                    2016,
                    2024,
                    2010,
                    2011,
                    2012,
                    2013
                ],
                "is_list_like": [
                    2017,
                    2011
                ],
                "mangled_aggspec": [
                    2024,
                    2026,
                    2013,
                    2022
                ],
                "agg_spec.items": [
                    2016
                ],
                "_managle_lambda_list": [
                    2024,
                    2018
                ],
                "result.copy": [
                    2047
                ],
                "obj_cols": [
                    2056,
                    2049
                ],
                "is_object_dtype": [
                    2052
                ],
                "result.dtypes.iloc": [
                    2052
                ],
                "result.dtypes": [
                    2052
                ],
                "n": [
                    2056,
                    2058,
                    2061
                ],
                "converted": [
                    2057,
                    2061
                ],
                "maybe_convert_objects": [
                    2057
                ]
            }
        },
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_103/pandas/core/groupby/groupby.py": {
            "buggy_functions": [
                {
                    "function_name": "pct_change",
                    "function_code": "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None, axis=0):\n    \"\"\"\n    Calculate pct_change of each value to previous entry in group.\n\n    Returns\n    -------\n    Series or DataFrame\n        Percentage changes within each group.\n    \"\"\"\n    if freq is not None or axis != 0:\n        return self.apply(\n            lambda x: x.pct_change(\n                periods=periods,\n                fill_method=fill_method,\n                limit=limit,\n                freq=freq,\n                axis=axis,\n            )\n        )\n    filled = getattr(self, fill_method)(limit=limit)\n    fill_grp = filled.groupby(self.grouper.codes)\n    shifted = fill_grp.shift(periods=periods, freq=freq)\n    return (filled / shifted) - 1\n",
                    "decorators": [
                        "Substitution(name='groupby')",
                        "Appender(_common_see_also)"
                    ],
                    "docstring": "Calculate pct_change of each value to previous entry in group.\n\nReturns\n-------\nSeries or DataFrame\n    Percentage changes within each group.",
                    "start_line": 2344,
                    "variables": {
                        "freq": [
                            2361,
                            2355,
                            2367
                        ],
                        "axis": [
                            2362,
                            2355
                        ],
                        "self.apply": [
                            2356
                        ],
                        "self": [
                            2356,
                            2365,
                            2366
                        ],
                        "x.pct_change": [
                            2357
                        ],
                        "x": [
                            2357
                        ],
                        "periods": [
                            2358,
                            2367
                        ],
                        "fill_method": [
                            2365,
                            2359
                        ],
                        "limit": [
                            2360,
                            2365
                        ],
                        "filled": [
                            2368,
                            2365,
                            2366
                        ],
                        "getattr": [
                            2365
                        ],
                        "fill_grp": [
                            2366,
                            2367
                        ],
                        "filled.groupby": [
                            2366
                        ],
                        "self.grouper.codes": [
                            2366
                        ],
                        "self.grouper": [
                            2366
                        ],
                        "shifted": [
                            2368,
                            2367
                        ],
                        "fill_grp.shift": [
                            2367
                        ],
                        "Substitution": [
                            2344
                        ],
                        "Appender": [
                            2345
                        ],
                        "_common_see_also": [
                            2345
                        ]
                    },
                    "filtered_variables": {
                        "freq": [
                            2361,
                            2355,
                            2367
                        ],
                        "axis": [
                            2362,
                            2355
                        ],
                        "self.apply": [
                            2356
                        ],
                        "self": [
                            2356,
                            2365,
                            2366
                        ],
                        "x.pct_change": [
                            2357
                        ],
                        "x": [
                            2357
                        ],
                        "periods": [
                            2358,
                            2367
                        ],
                        "fill_method": [
                            2365,
                            2359
                        ],
                        "limit": [
                            2360,
                            2365
                        ],
                        "filled": [
                            2368,
                            2365,
                            2366
                        ],
                        "fill_grp": [
                            2366,
                            2367
                        ],
                        "filled.groupby": [
                            2366
                        ],
                        "self.grouper.codes": [
                            2366
                        ],
                        "self.grouper": [
                            2366
                        ],
                        "shifted": [
                            2368,
                            2367
                        ],
                        "fill_grp.shift": [
                            2367
                        ],
                        "Substitution": [
                            2344
                        ],
                        "Appender": [
                            2345
                        ],
                        "_common_see_also": [
                            2345
                        ]
                    },
                    "diff_line_number": 2364,
                    "class_data": {
                        "signature": "class GroupBy(_GroupBy)",
                        "docstring": "Class for grouping and aggregating relational data.\n\nSee aggregate, transform, and apply functions on this object.\n\nIt's easiest to use obj.groupby(...) to use GroupBy, but you can also do:\n\n::\n\n    grouped = groupby(obj, ...)\n\nParameters\n----------\nobj : pandas object\naxis : int, default 0\nlevel : int, default None\n    Level of MultiIndex\ngroupings : list of Grouping objects\n    Most users should ignore this\nexclusions : array-like, optional\n    List of columns to exclude\nname : str\n    Most users should ignore this\n\nReturns\n-------\n**Attributes**\ngroups : dict\n    {group name -> group labels}\nlen(grouped) : int\n    Number of groups\n\nNotes\n-----\nAfter grouping, see aggregate, apply, and transform functions. Here are\nsome other brief notes about usage. When grouping by multiple groups, the\nresult index will be a MultiIndex (hierarchical) by default.\n\nIteration produces (key, group) tuples, i.e. chunking the data by group. So\nyou can write code like:\n\n::\n\n    grouped = obj.groupby(keys, axis=axis)\n    for key, group in grouped:\n        # do something with the data\n\nFunction calls on GroupBy, if not specially implemented, \"dispatch\" to the\ngrouped data. So if you group a DataFrame and wish to invoke the std()\nmethod on each group, you can simply do:\n\n::\n\n    df.groupby(mapper).std()\n\nrather than\n\n::\n\n    df.groupby(mapper).aggregate(np.std)\n\nYou can pass arguments to these \"wrapped\" functions, too.\n\nSee the online documentation for full exposition on these topics and much\nmore",
                        "constructor_docstring": null,
                        "functions": [
                            "def _bool_agg(self, val_test, skipna):\n    \"\"\"\n    Shared func to call any / all Cython GroupBy implementations.\n    \"\"\"\n\n    def objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]:\n        if is_object_dtype(vals):\n            vals = np.array([bool(x) for x in vals])\n        else:\n            vals = vals.astype(np.bool)\n        return (vals.view(np.uint8), np.bool)\n\n    def result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray:\n        return result.astype(inference, copy=False)\n    return self._get_cythonized_result('group_any_all', aggregate=True, cython_dtype=np.dtype(np.uint8), needs_values=True, needs_mask=True, pre_processing=objs_to_bool, post_processing=result_to_bool, val_test=val_test, skipna=skipna)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef any(self, skipna: bool=True):\n    \"\"\"\n    Return True if any value in the group is truthful, else False.\n\n    Parameters\n    ----------\n    skipna : bool, default True\n        Flag to ignore nan values during truth testing.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return self._bool_agg('any', skipna)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef all(self, skipna: bool=True):\n    \"\"\"\n    Return True if all values in the group are truthful, else False.\n\n    Parameters\n    ----------\n    skipna : bool, default True\n        Flag to ignore nan values during truth testing.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return self._bool_agg('all', skipna)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef count(self):\n    \"\"\"\n    Compute count of group, excluding missing values.\n\n    Returns\n    -------\n    Series or DataFrame\n        Count of values within each group.\n    \"\"\"\n    raise NotImplementedError",
                            "@Substitution(name='groupby')\n@Substitution(see_also=_common_see_also)\ndef mean(self, *args, **kwargs):\n    \"\"\"\n    Compute mean of groups, excluding missing values.\n\n    Returns\n    -------\n    pandas.Series or pandas.DataFrame\n    %(see_also)s\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 1, 2, 1, 2],\n    ...                    'B': [np.nan, 2, 3, 4, 5],\n    ...                    'C': [1, 2, 1, 1, 2]}, columns=['A', 'B', 'C'])\n\n    Groupby one column and return the mean of the remaining columns in\n    each group.\n\n    >>> df.groupby('A').mean()\n         B         C\n    A\n    1  3.0  1.333333\n    2  4.0  1.500000\n\n    Groupby two columns and return the mean of the remaining column.\n\n    >>> df.groupby(['A', 'B']).mean()\n           C\n    A B\n    1 2.0  2\n      4.0  1\n    2 3.0  1\n      5.0  2\n\n    Groupby one column and return the mean of only particular column in\n    the group.\n\n    >>> df.groupby('A')['B'].mean()\n    A\n    1    3.0\n    2    4.0\n    Name: B, dtype: float64\n    \"\"\"\n    nv.validate_groupby_func('mean', args, kwargs, ['numeric_only'])\n    return self._cython_agg_general('mean', alt=lambda x, axis: Series(x).mean(**kwargs), **kwargs)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef median(self, **kwargs):\n    \"\"\"\n    Compute median of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex\n\n    Returns\n    -------\n    Series or DataFrame\n        Median of values within each group.\n    \"\"\"\n    return self._cython_agg_general('median', alt=lambda x, axis: Series(x).median(axis=axis, **kwargs), **kwargs)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef std(self, ddof: int=1, *args, **kwargs):\n    \"\"\"\n    Compute standard deviation of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    Series or DataFrame\n        Standard deviation of values within each group.\n    \"\"\"\n    nv.validate_groupby_func('std', args, kwargs)\n    return np.sqrt(self.var(ddof=ddof, **kwargs))",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef var(self, ddof: int=1, *args, **kwargs):\n    \"\"\"\n    Compute variance of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    Series or DataFrame\n        Variance of values within each group.\n    \"\"\"\n    nv.validate_groupby_func('var', args, kwargs)\n    if ddof == 1:\n        return self._cython_agg_general('var', alt=lambda x, axis: Series(x).var(ddof=ddof, **kwargs), **kwargs)\n    else:\n        f = lambda x: x.var(ddof=ddof, **kwargs)\n        with _group_selection_context(self):\n            return self._python_agg_general(f)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef sem(self, ddof: int=1):\n    \"\"\"\n    Compute standard error of the mean of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    Series or DataFrame\n        Standard error of the mean of values within each group.\n    \"\"\"\n    return self.std(ddof=ddof) / np.sqrt(self.count())",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef size(self):\n    \"\"\"\n    Compute group sizes.\n\n    Returns\n    -------\n    Series\n        Number of rows in each group.\n    \"\"\"\n    result = self.grouper.size()\n    if isinstance(self.obj, Series):\n        result.name = self.obj.name\n    return self._reindex_output(result, fill_value=0)",
                            "@classmethod\ndef _add_numeric_operations(cls):\n    \"\"\"\n    Add numeric operations to the GroupBy generically.\n    \"\"\"\n\n    def groupby_function(name: str, alias: str, npfunc, numeric_only: bool=True, min_count: int=-1):\n        _local_template = '\\n            Compute %(f)s of group values.\\n\\n            Returns\\n            -------\\n            Series or DataFrame\\n                Computed %(f)s of values within each group.\\n            '\n\n        @Substitution(name='groupby', f=name)\n        @Appender(_common_see_also)\n        @Appender(_local_template)\n        def f(self, **kwargs):\n            if 'numeric_only' not in kwargs:\n                kwargs['numeric_only'] = numeric_only\n            if 'min_count' not in kwargs:\n                kwargs['min_count'] = min_count\n            self._set_group_selection()\n            try:\n                return self._cython_agg_general(alias, alt=npfunc, **kwargs)\n            except DataError:\n                pass\n            except NotImplementedError as err:\n                if 'function is not implemented for this dtype' in str(err):\n                    pass\n                else:\n                    raise\n            result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n            return result\n        set_function_name(f, name, cls)\n        return f\n\n    def first_compat(x, axis=0):\n\n        def first(x):\n            x = x.to_numpy()\n            x = x[notna(x)]\n            if len(x) == 0:\n                return np.nan\n            return x[0]\n        if isinstance(x, DataFrame):\n            return x.apply(first, axis=axis)\n        else:\n            return first(x)\n\n    def last_compat(x, axis=0):\n\n        def last(x):\n            x = x.to_numpy()\n            x = x[notna(x)]\n            if len(x) == 0:\n                return np.nan\n            return x[-1]\n        if isinstance(x, DataFrame):\n            return x.apply(last, axis=axis)\n        else:\n            return last(x)\n    cls.sum = groupby_function('sum', 'add', np.sum, min_count=0)\n    cls.prod = groupby_function('prod', 'prod', np.prod, min_count=0)\n    cls.min = groupby_function('min', 'min', np.min, numeric_only=False)\n    cls.max = groupby_function('max', 'max', np.max, numeric_only=False)\n    cls.first = groupby_function('first', 'first', first_compat, numeric_only=False)\n    cls.last = groupby_function('last', 'last', last_compat, numeric_only=False)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef ohlc(self) -> DataFrame:\n    \"\"\"\n    Compute sum of values, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex\n\n    Returns\n    -------\n    DataFrame\n        Open, high, low and close values within each group.\n    \"\"\"\n    return self._apply_to_column_groupbys(lambda x: x._cython_agg_general('ohlc'))",
                            "@Appender(DataFrame.describe.__doc__)\ndef describe(self, **kwargs):\n    with _group_selection_context(self):\n        result = self.apply(lambda x: x.describe(**kwargs))\n        if self.axis == 1:\n            return result.T\n        return result.unstack()",
                            "def resample(self, rule, *args, **kwargs):\n    \"\"\"\n    Provide resampling when using a TimeGrouper.\n\n    Given a grouper, the function resamples it according to a string\n    \"string\" -> \"frequency\".\n\n    See the :ref:`frequency aliases <timeseries.offset_aliases>`\n    documentation for more details.\n\n    Parameters\n    ----------\n    rule : str or DateOffset\n        The offset string or object representing target grouper conversion.\n    *args, **kwargs\n        Possible arguments are `how`, `fill_method`, `limit`, `kind` and\n        `on`, and other arguments of `TimeGrouper`.\n\n    Returns\n    -------\n    Grouper\n        Return a new grouper with our resampler appended.\n\n    See Also\n    --------\n    Grouper : Specify a frequency to resample with when\n        grouping by a key.\n    DatetimeIndex.resample : Frequency conversion and resampling of\n        time series.\n\n    Examples\n    --------\n    >>> idx = pd.date_range('1/1/2000', periods=4, freq='T')\n    >>> df = pd.DataFrame(data=4 * [range(2)],\n    ...                   index=idx,\n    ...                   columns=['a', 'b'])\n    >>> df.iloc[2, 0] = 5\n    >>> df\n                        a  b\n    2000-01-01 00:00:00  0  1\n    2000-01-01 00:01:00  0  1\n    2000-01-01 00:02:00  5  1\n    2000-01-01 00:03:00  0  1\n\n    Downsample the DataFrame into 3 minute bins and sum the values of\n    the timestamps falling into a bin.\n\n    >>> df.groupby('a').resample('3T').sum()\n                             a  b\n    a\n    0   2000-01-01 00:00:00  0  2\n        2000-01-01 00:03:00  0  1\n    5   2000-01-01 00:00:00  5  1\n\n    Upsample the series into 30 second bins.\n\n    >>> df.groupby('a').resample('30S').sum()\n                        a  b\n    a\n    0   2000-01-01 00:00:00  0  1\n        2000-01-01 00:00:30  0  0\n        2000-01-01 00:01:00  0  1\n        2000-01-01 00:01:30  0  0\n        2000-01-01 00:02:00  0  0\n        2000-01-01 00:02:30  0  0\n        2000-01-01 00:03:00  0  1\n    5   2000-01-01 00:02:00  5  1\n\n    Resample by month. Values are assigned to the month of the period.\n\n    >>> df.groupby('a').resample('M').sum()\n                a  b\n    a\n    0   2000-01-31  0  3\n    5   2000-01-31  5  1\n\n    Downsample the series into 3 minute bins as above, but close the right\n    side of the bin interval.\n\n    >>> df.groupby('a').resample('3T', closed='right').sum()\n                             a  b\n    a\n    0   1999-12-31 23:57:00  0  1\n        2000-01-01 00:00:00  0  2\n    5   2000-01-01 00:00:00  5  1\n\n    Downsample the series into 3 minute bins and close the right side of\n    the bin interval, but label each bin using the right edge instead of\n    the left.\n\n    >>> df.groupby('a').resample('3T', closed='right', label='right').sum()\n                             a  b\n    a\n    0   2000-01-01 00:00:00  0  1\n        2000-01-01 00:03:00  0  2\n    5   2000-01-01 00:03:00  5  1\n\n    Add an offset of twenty seconds.\n\n    >>> df.groupby('a').resample('3T', loffset='20s').sum()\n                           a  b\n    a\n    0   2000-01-01 00:00:20  0  2\n        2000-01-01 00:03:20  0  1\n    5   2000-01-01 00:00:20  5  1\n    \"\"\"\n    from pandas.core.resample import get_resampler_for_grouping\n    return get_resampler_for_grouping(self, rule, *args, **kwargs)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef rolling(self, *args, **kwargs):\n    \"\"\"\n    Return a rolling grouper, providing rolling functionality per group.\n    \"\"\"\n    from pandas.core.window import RollingGroupby\n    return RollingGroupby(self, *args, **kwargs)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef expanding(self, *args, **kwargs):\n    \"\"\"\n    Return an expanding grouper, providing expanding\n    functionality per group.\n    \"\"\"\n    from pandas.core.window import ExpandingGroupby\n    return ExpandingGroupby(self, *args, **kwargs)",
                            "def _fill(self, direction, limit=None):\n    \"\"\"\n    Shared function for `pad` and `backfill` to call Cython method.\n\n    Parameters\n    ----------\n    direction : {'ffill', 'bfill'}\n        Direction passed to underlying Cython function. `bfill` will cause\n        values to be filled backwards. `ffill` and any other values will\n        default to a forward fill\n    limit : int, default None\n        Maximum number of consecutive values to fill. If `None`, this\n        method will convert to -1 prior to passing to Cython\n\n    Returns\n    -------\n    `Series` or `DataFrame` with filled values\n\n    See Also\n    --------\n    pad\n    backfill\n    \"\"\"\n    if limit is None:\n        limit = -1\n    return self._get_cythonized_result('group_fillna_indexer', needs_mask=True, cython_dtype=np.dtype(np.int64), result_is_index=True, direction=direction, limit=limit)",
                            "@Substitution(name='groupby')\ndef pad(self, limit=None):\n    \"\"\"\n    Forward fill the values.\n\n    Parameters\n    ----------\n    limit : int, optional\n        Limit of how many values to fill.\n\n    Returns\n    -------\n    Series or DataFrame\n        Object with missing values filled.\n\n    See Also\n    --------\n    Series.pad\n    DataFrame.pad\n    Series.fillna\n    DataFrame.fillna\n    \"\"\"\n    return self._fill('ffill', limit=limit)",
                            "@Substitution(name='groupby')\ndef backfill(self, limit=None):\n    \"\"\"\n    Backward fill the values.\n\n    Parameters\n    ----------\n    limit : int, optional\n        Limit of how many values to fill.\n\n    Returns\n    -------\n    Series or DataFrame\n        Object with missing values filled.\n\n    See Also\n    --------\n    Series.backfill\n    DataFrame.backfill\n    Series.fillna\n    DataFrame.fillna\n    \"\"\"\n    return self._fill('bfill', limit=limit)",
                            "@Substitution(name='groupby')\n@Substitution(see_also=_common_see_also)\ndef nth(self, n: Union[int, List[int]], dropna: Optional[str]=None) -> DataFrame:\n    \"\"\"\n    Take the nth row from each group if n is an int, or a subset of rows\n    if n is a list of ints.\n\n    If dropna, will take the nth non-null row, dropna is either\n    'all' or 'any'; this is equivalent to calling dropna(how=dropna)\n    before the groupby.\n\n    Parameters\n    ----------\n    n : int or list of ints\n        A single nth value for the row or a list of nth values.\n    dropna : None or str, optional\n        Apply the specified dropna operation before counting which row is\n        the nth row. Needs to be None, 'any' or 'all'.\n\n    Returns\n    -------\n    Series or DataFrame\n        N-th value within each group.\n    %(see_also)s\n    Examples\n    --------\n\n    >>> df = pd.DataFrame({'A': [1, 1, 2, 1, 2],\n    ...                    'B': [np.nan, 2, 3, 4, 5]}, columns=['A', 'B'])\n    >>> g = df.groupby('A')\n    >>> g.nth(0)\n         B\n    A\n    1  NaN\n    2  3.0\n    >>> g.nth(1)\n         B\n    A\n    1  2.0\n    2  5.0\n    >>> g.nth(-1)\n         B\n    A\n    1  4.0\n    2  5.0\n    >>> g.nth([0, 1])\n         B\n    A\n    1  NaN\n    1  2.0\n    2  3.0\n    2  5.0\n\n    Specifying `dropna` allows count ignoring ``NaN``\n\n    >>> g.nth(0, dropna='any')\n         B\n    A\n    1  2.0\n    2  3.0\n\n    NaNs denote group exhausted when using dropna\n\n    >>> g.nth(3, dropna='any')\n        B\n    A\n    1 NaN\n    2 NaN\n\n    Specifying `as_index=False` in `groupby` keeps the original index.\n\n    >>> df.groupby('A', as_index=False).nth(1)\n       A    B\n    1  1  2.0\n    4  2  5.0\n    \"\"\"\n    valid_containers = (set, list, tuple)\n    if not isinstance(n, (valid_containers, int)):\n        raise TypeError('n needs to be an int or a list/set/tuple of ints')\n    if not dropna:\n        if isinstance(n, int):\n            nth_values = [n]\n        elif isinstance(n, valid_containers):\n            nth_values = list(set(n))\n        nth_array = np.array(nth_values, dtype=np.intp)\n        self._set_group_selection()\n        mask_left = np.in1d(self._cumcount_array(), nth_array)\n        mask_right = np.in1d(self._cumcount_array(ascending=False) + 1, -nth_array)\n        mask = mask_left | mask_right\n        ids, _, _ = self.grouper.group_info\n        mask = mask & (ids != -1)\n        out = self._selected_obj[mask]\n        if not self.as_index:\n            return out\n        result_index = self.grouper.result_index\n        out.index = result_index[ids[mask]]\n        if not self.observed and isinstance(result_index, CategoricalIndex):\n            out = out.reindex(result_index)\n        out = self._reindex_output(out)\n        return out.sort_index() if self.sort else out\n    if isinstance(n, valid_containers):\n        raise ValueError('dropna option with a list of nth values is not supported')\n    if dropna not in ['any', 'all']:\n        raise ValueError(f\"For a DataFrame groupby, dropna must be either None, 'any' or 'all', (was passed {dropna}).\")\n    max_len = n if n >= 0 else -1 - n\n    dropped = self.obj.dropna(how=dropna, axis=self.axis)\n    if self.keys is None and self.level is None:\n        axis = self.grouper.axis\n        grouper = axis[axis.isin(dropped.index)]\n    else:\n        from pandas.core.groupby.grouper import get_grouper\n        grouper, _, _ = get_grouper(dropped, key=self.keys, axis=self.axis, level=self.level, sort=self.sort, mutated=self.mutated)\n    grb = dropped.groupby(grouper, as_index=self.as_index, sort=self.sort)\n    sizes, result = (grb.size(), grb.nth(n))\n    mask = (sizes < max_len).values\n    if len(result) and mask.any():\n        result.loc[mask] = np.nan\n    if len(self.obj) == len(dropped) or len(result) == len(self.grouper.result_index):\n        result.index = self.grouper.result_index\n    else:\n        result = result.reindex(self.grouper.result_index)\n    return result",
                            "def quantile(self, q=0.5, interpolation: str='linear'):\n    \"\"\"\n    Return group values at the given quantile, a la numpy.percentile.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value(s) between 0 and 1 providing the quantile(s) to compute.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        Method to use when the desired quantile falls between two points.\n\n    Returns\n    -------\n    Series or DataFrame\n        Return type determined by caller of GroupBy object.\n\n    See Also\n    --------\n    Series.quantile : Similar method for Series.\n    DataFrame.quantile : Similar method for DataFrame.\n    numpy.percentile : NumPy method to compute qth percentile.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([\n    ...     ['a', 1], ['a', 2], ['a', 3],\n    ...     ['b', 1], ['b', 3], ['b', 5]\n    ... ], columns=['key', 'val'])\n    >>> df.groupby('key').quantile()\n        val\n    key\n    a    2.0\n    b    3.0\n    \"\"\"\n    from pandas import concat\n\n    def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n        if is_object_dtype(vals):\n            raise TypeError(\"'quantile' cannot be performed against 'object' dtypes!\")\n        inference = None\n        if is_integer_dtype(vals):\n            inference = np.int64\n        elif is_datetime64_dtype(vals):\n            inference = 'datetime64[ns]'\n            vals = vals.astype(np.float)\n        return (vals, inference)\n\n    def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n        if inference:\n            if not (is_integer_dtype(inference) and interpolation in {'linear', 'midpoint'}):\n                vals = vals.astype(inference)\n        return vals\n    if is_scalar(q):\n        return self._get_cythonized_result('group_quantile', aggregate=True, needs_values=True, needs_mask=True, cython_dtype=np.dtype(np.float64), pre_processing=pre_processor, post_processing=post_processor, q=q, interpolation=interpolation)\n    else:\n        results = [self._get_cythonized_result('group_quantile', aggregate=True, needs_values=True, needs_mask=True, cython_dtype=np.dtype(np.float64), pre_processing=pre_processor, post_processing=post_processor, q=qi, interpolation=interpolation) for qi in q]\n        result = concat(results, axis=0, keys=q)\n        order = list(range(1, result.index.nlevels)) + [0]\n        index_names = np.array(result.index.names)\n        result.index.names = np.arange(len(index_names))\n        result = result.reorder_levels(order)\n        result.index.names = index_names[order]\n        indices = np.arange(len(result)).reshape([len(q), self.ngroups]).T.flatten()\n        return result.take(indices)",
                            "@Substitution(name='groupby')\ndef ngroup(self, ascending: bool=True):\n    \"\"\"\n    Number each group from 0 to the number of groups - 1.\n\n    This is the enumerative complement of cumcount.  Note that the\n    numbers given to the groups match the order in which the groups\n    would be seen when iterating over the groupby object, not the\n    order they are first observed.\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        If False, number in reverse, from number of group - 1 to 0.\n\n    Returns\n    -------\n    Series\n        Unique numbers for each group.\n\n    See Also\n    --------\n    .cumcount : Number the rows in each group.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame({\"A\": list(\"aaabba\")})\n    >>> df\n       A\n    0  a\n    1  a\n    2  a\n    3  b\n    4  b\n    5  a\n    >>> df.groupby('A').ngroup()\n    0    0\n    1    0\n    2    0\n    3    1\n    4    1\n    5    0\n    dtype: int64\n    >>> df.groupby('A').ngroup(ascending=False)\n    0    1\n    1    1\n    2    1\n    3    0\n    4    0\n    5    1\n    dtype: int64\n    >>> df.groupby([\"A\", [1,1,2,3,2,1]]).ngroup()\n    0    0\n    1    0\n    2    1\n    3    3\n    4    2\n    5    0\n    dtype: int64\n    \"\"\"\n    with _group_selection_context(self):\n        index = self._selected_obj.index\n        result = Series(self.grouper.group_info[0], index)\n        if not ascending:\n            result = self.ngroups - 1 - result\n        return result",
                            "@Substitution(name='groupby')\ndef cumcount(self, ascending: bool=True):\n    \"\"\"\n    Number each item in each group from 0 to the length of that group - 1.\n\n    Essentially this is equivalent to\n\n    >>> self.apply(lambda x: pd.Series(np.arange(len(x)), x.index))\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        If False, number in reverse, from length of group - 1 to 0.\n\n    Returns\n    -------\n    Series\n        Sequence number of each element within each group.\n\n    See Also\n    --------\n    .ngroup : Number the groups themselves.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([['a'], ['a'], ['a'], ['b'], ['b'], ['a']],\n    ...                   columns=['A'])\n    >>> df\n       A\n    0  a\n    1  a\n    2  a\n    3  b\n    4  b\n    5  a\n    >>> df.groupby('A').cumcount()\n    0    0\n    1    1\n    2    2\n    3    0\n    4    1\n    5    3\n    dtype: int64\n    >>> df.groupby('A').cumcount(ascending=False)\n    0    3\n    1    2\n    2    1\n    3    1\n    4    0\n    5    0\n    dtype: int64\n    \"\"\"\n    with _group_selection_context(self):\n        index = self._selected_obj.index\n        cumcounts = self._cumcount_array(ascending=ascending)\n        return Series(cumcounts, index)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef rank(self, method: str='average', ascending: bool=True, na_option: str='keep', pct: bool=False, axis: int=0):\n    \"\"\"\n    Provide the rank of values within each group.\n\n    Parameters\n    ----------\n    method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n        * average: average rank of group\n        * min: lowest rank in group\n        * max: highest rank in group\n        * first: ranks assigned in order they appear in the array\n        * dense: like 'min', but rank always increases by 1 between groups\n    ascending : bool, default True\n        False for ranks by high (1) to low (N).\n    na_option : {'keep', 'top', 'bottom'}, default 'keep'\n        * keep: leave NA values where they are\n        * top: smallest rank if ascending\n        * bottom: smallest rank if descending\n    pct : bool, default False\n        Compute percentage rank of data within each group.\n    axis : int, default 0\n        The axis of the object over which to compute the rank.\n\n    Returns\n    -------\n    DataFrame with ranking of values within each group\n    \"\"\"\n    if na_option not in {'keep', 'top', 'bottom'}:\n        msg = \"na_option must be one of 'keep', 'top', or 'bottom'\"\n        raise ValueError(msg)\n    return self._cython_transform('rank', numeric_only=False, ties_method=method, ascending=ascending, na_option=na_option, pct=pct, axis=axis)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef cumprod(self, axis=0, *args, **kwargs):\n    \"\"\"\n    Cumulative product for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    nv.validate_groupby_func('cumprod', args, kwargs, ['numeric_only', 'skipna'])\n    if axis != 0:\n        return self.apply(lambda x: x.cumprod(axis=axis, **kwargs))\n    return self._cython_transform('cumprod', **kwargs)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef cumsum(self, axis=0, *args, **kwargs):\n    \"\"\"\n    Cumulative sum for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    nv.validate_groupby_func('cumsum', args, kwargs, ['numeric_only', 'skipna'])\n    if axis != 0:\n        return self.apply(lambda x: x.cumsum(axis=axis, **kwargs))\n    return self._cython_transform('cumsum', **kwargs)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef cummin(self, axis=0, **kwargs):\n    \"\"\"\n    Cumulative min for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    if axis != 0:\n        return self.apply(lambda x: np.minimum.accumulate(x, axis))\n    return self._cython_transform('cummin', numeric_only=False)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef cummax(self, axis=0, **kwargs):\n    \"\"\"\n    Cumulative max for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    if axis != 0:\n        return self.apply(lambda x: np.maximum.accumulate(x, axis))\n    return self._cython_transform('cummax', numeric_only=False)",
                            "def _get_cythonized_result(self, how: str, cython_dtype: np.dtype, aggregate: bool=False, needs_values: bool=False, needs_mask: bool=False, needs_ngroups: bool=False, result_is_index: bool=False, pre_processing=None, post_processing=None, **kwargs):\n    \"\"\"\n    Get result for Cythonized functions.\n\n    Parameters\n    ----------\n    how : str, Cythonized function name to be called\n    cython_dtype : np.dtype\n        Type of the array that will be modified by the Cython call.\n    aggregate : bool, default False\n        Whether the result should be aggregated to match the number of\n        groups\n    needs_values : bool, default False\n        Whether the values should be a part of the Cython call\n        signature\n    needs_mask : bool, default False\n        Whether boolean mask needs to be part of the Cython call\n        signature\n    needs_ngroups : bool, default False\n        Whether number of groups is part of the Cython call signature\n    result_is_index : bool, default False\n        Whether the result of the Cython operation is an index of\n        values to be retrieved, instead of the actual values themselves\n    pre_processing : function, default None\n        Function to be applied to `values` prior to passing to Cython.\n        Function should return a tuple where the first element is the\n        values to be passed to Cython and the second element is an optional\n        type which the values should be converted to after being returned\n        by the Cython operation. Raises if `needs_values` is False.\n    post_processing : function, default None\n        Function to be applied to result of Cython function. Should accept\n        an array of values as the first argument and type inferences as its\n        second argument, i.e. the signature should be\n        (ndarray, Type).\n    **kwargs : dict\n        Extra arguments to be passed back to Cython funcs\n\n    Returns\n    -------\n    `Series` or `DataFrame`  with filled values\n    \"\"\"\n    if result_is_index and aggregate:\n        raise ValueError(\"'result_is_index' and 'aggregate' cannot both be True!\")\n    if post_processing:\n        if not callable(pre_processing):\n            raise ValueError(\"'post_processing' must be a callable!\")\n    if pre_processing:\n        if not callable(pre_processing):\n            raise ValueError(\"'pre_processing' must be a callable!\")\n        if not needs_values:\n            raise ValueError(\"Cannot use 'pre_processing' without specifying 'needs_values'!\")\n    grouper = self.grouper\n    labels, _, ngroups = grouper.group_info\n    output: Dict[base.OutputKey, np.ndarray] = {}\n    base_func = getattr(libgroupby, how)\n    for idx, obj in enumerate(self._iterate_slices()):\n        name = obj.name\n        values = obj._data._values\n        if aggregate:\n            result_sz = ngroups\n        else:\n            result_sz = len(values)\n        result = np.zeros(result_sz, dtype=cython_dtype)\n        func = partial(base_func, result, labels)\n        inferences = None\n        if needs_values:\n            vals = values\n            if pre_processing:\n                vals, inferences = pre_processing(vals)\n            func = partial(func, vals)\n        if needs_mask:\n            mask = isna(values).view(np.uint8)\n            func = partial(func, mask)\n        if needs_ngroups:\n            func = partial(func, ngroups)\n        func(**kwargs)\n        if result_is_index:\n            result = algorithms.take_nd(values, result)\n        if post_processing:\n            result = post_processing(result, inferences)\n        key = base.OutputKey(label=name, position=idx)\n        output[key] = result\n    if aggregate:\n        return self._wrap_aggregated_output(output)\n    else:\n        return self._wrap_transformed_output(output)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef shift(self, periods=1, freq=None, axis=0, fill_value=None):\n    \"\"\"\n    Shift each group by periods observations.\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Number of periods to shift.\n    freq : frequency string\n    axis : axis to shift, default 0\n    fill_value : optional\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series or DataFrame\n        Object shifted within each group.\n    \"\"\"\n    if freq is not None or axis != 0 or (not isna(fill_value)):\n        return self.apply(lambda x: x.shift(periods, freq, axis, fill_value))\n    return self._get_cythonized_result('group_shift_indexer', cython_dtype=np.dtype(np.int64), needs_ngroups=True, result_is_index=True, periods=periods)",
                            "@Substitution(name='groupby')\n@Appender(_common_see_also)\ndef pct_change(self, periods=1, fill_method='pad', limit=None, freq=None, axis=0):\n    \"\"\"\n    Calculate pct_change of each value to previous entry in group.\n\n    Returns\n    -------\n    Series or DataFrame\n        Percentage changes within each group.\n    \"\"\"\n    if freq is not None or axis != 0:\n        return self.apply(lambda x: x.pct_change(periods=periods, fill_method=fill_method, limit=limit, freq=freq, axis=axis))\n    filled = getattr(self, fill_method)(limit=limit)\n    fill_grp = filled.groupby(self.grouper.codes)\n    shifted = fill_grp.shift(periods=periods, freq=freq)\n    return filled / shifted - 1",
                            "@Substitution(name='groupby')\n@Substitution(see_also=_common_see_also)\ndef head(self, n=5):\n    \"\"\"\n    Return first n rows of each group.\n\n    Similar to ``.apply(lambda x: x.head(n))``, but it returns a subset of rows\n    from the original DataFrame with original index and order preserved\n    (``as_index`` flag is ignored).\n\n    Does not work for negative values of `n`.\n\n    Returns\n    -------\n    Series or DataFrame\n    %(see_also)s\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([[1, 2], [1, 4], [5, 6]],\n    ...                   columns=['A', 'B'])\n    >>> df.groupby('A').head(1)\n       A  B\n    0  1  2\n    2  5  6\n    >>> df.groupby('A').head(-1)\n    Empty DataFrame\n    Columns: [A, B]\n    Index: []\n    \"\"\"\n    self._reset_group_selection()\n    mask = self._cumcount_array() < n\n    return self._selected_obj[mask]",
                            "@Substitution(name='groupby')\n@Substitution(see_also=_common_see_also)\ndef tail(self, n=5):\n    \"\"\"\n    Return last n rows of each group.\n\n    Similar to ``.apply(lambda x: x.tail(n))``, but it returns a subset of rows\n    from the original DataFrame with original index and order preserved\n    (``as_index`` flag is ignored).\n\n    Does not work for negative values of `n`.\n\n    Returns\n    -------\n    Series or DataFrame\n    %(see_also)s\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([['a', 1], ['a', 2], ['b', 1], ['b', 2]],\n    ...                   columns=['A', 'B'])\n    >>> df.groupby('A').tail(1)\n       A  B\n    1  a  2\n    3  b  2\n    >>> df.groupby('A').tail(-1)\n    Empty DataFrame\n    Columns: [A, B]\n    Index: []\n    \"\"\"\n    self._reset_group_selection()\n    mask = self._cumcount_array(ascending=False) < n\n    return self._selected_obj[mask]",
                            "def _reindex_output(self, output: FrameOrSeries, fill_value: Scalar=np.NaN) -> FrameOrSeries:\n    \"\"\"\n    If we have categorical groupers, then we might want to make sure that\n    we have a fully re-indexed output to the levels. This means expanding\n    the output space to accommodate all values in the cartesian product of\n    our groups, regardless of whether they were observed in the data or\n    not. This will expand the output space if there are missing groups.\n\n    The method returns early without modifying the input if the number of\n    groupings is less than 2, self.observed == True or none of the groupers\n    are categorical.\n\n    Parameters\n    ----------\n    output : Series or DataFrame\n        Object resulting from grouping and applying an operation.\n    fill_value : scalar, default np.NaN\n        Value to use for unobserved categories if self.observed is False.\n\n    Returns\n    -------\n    Series or DataFrame\n        Object (potentially) re-indexed to include all possible groups.\n    \"\"\"\n    groupings = self.grouper.groupings\n    if groupings is None:\n        return output\n    elif len(groupings) == 1:\n        return output\n    elif self.observed:\n        return output\n    elif not any((isinstance(ping.grouper, (Categorical, CategoricalIndex)) for ping in groupings)):\n        return output\n    levels_list = [ping.group_index for ping in groupings]\n    index, _ = MultiIndex.from_product(levels_list, names=self.grouper.names).sortlevel()\n    if self.as_index:\n        d = {self.obj._get_axis_name(self.axis): index, 'copy': False, 'fill_value': fill_value}\n        return output.reindex(**d)\n    in_axis_grps = ((i, ping.name) for i, ping in enumerate(groupings) if ping.in_axis)\n    g_nums, g_names = zip(*in_axis_grps)\n    output = output.drop(labels=list(g_names), axis=1)\n    output = output.set_index(self.grouper.result_index).reindex(index, copy=False, fill_value=fill_value)\n    output = output.reset_index(level=g_nums)\n    return output.reset_index(drop=True)",
                            "def objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]:\n    if is_object_dtype(vals):\n        vals = np.array([bool(x) for x in vals])\n    else:\n        vals = vals.astype(np.bool)\n    return (vals.view(np.uint8), np.bool)",
                            "def result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray:\n    return result.astype(inference, copy=False)",
                            "def groupby_function(name: str, alias: str, npfunc, numeric_only: bool=True, min_count: int=-1):\n    _local_template = '\\n            Compute %(f)s of group values.\\n\\n            Returns\\n            -------\\n            Series or DataFrame\\n                Computed %(f)s of values within each group.\\n            '\n\n    @Substitution(name='groupby', f=name)\n    @Appender(_common_see_also)\n    @Appender(_local_template)\n    def f(self, **kwargs):\n        if 'numeric_only' not in kwargs:\n            kwargs['numeric_only'] = numeric_only\n        if 'min_count' not in kwargs:\n            kwargs['min_count'] = min_count\n        self._set_group_selection()\n        try:\n            return self._cython_agg_general(alias, alt=npfunc, **kwargs)\n        except DataError:\n            pass\n        except NotImplementedError as err:\n            if 'function is not implemented for this dtype' in str(err):\n                pass\n            else:\n                raise\n        result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n        return result\n    set_function_name(f, name, cls)\n    return f",
                            "def first_compat(x, axis=0):\n\n    def first(x):\n        x = x.to_numpy()\n        x = x[notna(x)]\n        if len(x) == 0:\n            return np.nan\n        return x[0]\n    if isinstance(x, DataFrame):\n        return x.apply(first, axis=axis)\n    else:\n        return first(x)",
                            "def last_compat(x, axis=0):\n\n    def last(x):\n        x = x.to_numpy()\n        x = x[notna(x)]\n        if len(x) == 0:\n            return np.nan\n        return x[-1]\n    if isinstance(x, DataFrame):\n        return x.apply(last, axis=axis)\n    else:\n        return last(x)",
                            "def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n    if is_object_dtype(vals):\n        raise TypeError(\"'quantile' cannot be performed against 'object' dtypes!\")\n    inference = None\n    if is_integer_dtype(vals):\n        inference = np.int64\n    elif is_datetime64_dtype(vals):\n        inference = 'datetime64[ns]'\n        vals = vals.astype(np.float)\n    return (vals, inference)",
                            "def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n    if inference:\n        if not (is_integer_dtype(inference) and interpolation in {'linear', 'midpoint'}):\n            vals = vals.astype(inference)\n    return vals",
                            "@Substitution(name='groupby', f=name)\n@Appender(_common_see_also)\n@Appender(_local_template)\ndef f(self, **kwargs):\n    if 'numeric_only' not in kwargs:\n        kwargs['numeric_only'] = numeric_only\n    if 'min_count' not in kwargs:\n        kwargs['min_count'] = min_count\n    self._set_group_selection()\n    try:\n        return self._cython_agg_general(alias, alt=npfunc, **kwargs)\n    except DataError:\n        pass\n    except NotImplementedError as err:\n        if 'function is not implemented for this dtype' in str(err):\n            pass\n        else:\n            raise\n    result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n    return result",
                            "def first(x):\n    x = x.to_numpy()\n    x = x[notna(x)]\n    if len(x) == 0:\n        return np.nan\n    return x[0]",
                            "def last(x):\n    x = x.to_numpy()\n    x = x[notna(x)]\n    if len(x) == 0:\n        return np.nan\n    return x[-1]"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "ffill",
                            "bfill"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "_bool_agg(self, val_test, skipna)",
                            "any(self, skipna: bool=True)",
                            "all(self, skipna: bool=True)",
                            "count(self)",
                            "mean(self, *args, **kwargs)",
                            "median(self, **kwargs)",
                            "std(self, ddof: int=1, *args, **kwargs)",
                            "var(self, ddof: int=1, *args, **kwargs)",
                            "sem(self, ddof: int=1)",
                            "size(self)",
                            "_add_numeric_operations(cls)",
                            "ohlc(self) -> DataFrame",
                            "describe(self, **kwargs)",
                            "resample(self, rule, *args, **kwargs)",
                            "rolling(self, *args, **kwargs)",
                            "expanding(self, *args, **kwargs)",
                            "_fill(self, direction, limit=None)",
                            "pad(self, limit=None)",
                            "backfill(self, limit=None)",
                            "nth(self, n: Union[int, List[int]], dropna: Optional[str]=None) -> DataFrame",
                            "quantile(self, q=0.5, interpolation: str='linear')",
                            "ngroup(self, ascending: bool=True)",
                            "cumcount(self, ascending: bool=True)",
                            "rank(self, method: str='average', ascending: bool=True, na_option: str='keep', pct: bool=False, axis: int=0)",
                            "cumprod(self, axis=0, *args, **kwargs)",
                            "cumsum(self, axis=0, *args, **kwargs)",
                            "cummin(self, axis=0, **kwargs)",
                            "cummax(self, axis=0, **kwargs)",
                            "_get_cythonized_result(self, how: str, cython_dtype: np.dtype, aggregate: bool=False, needs_values: bool=False, needs_mask: bool=False, needs_ngroups: bool=False, result_is_index: bool=False, pre_processing=None, post_processing=None, **kwargs)",
                            "shift(self, periods=1, freq=None, axis=0, fill_value=None)",
                            "pct_change(self, periods=1, fill_method='pad', limit=None, freq=None, axis=0)",
                            "head(self, n=5)",
                            "tail(self, n=5)",
                            "_reindex_output(self, output: FrameOrSeries, fill_value: Scalar=np.NaN) -> FrameOrSeries",
                            "objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]",
                            "result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray",
                            "groupby_function(name: str, alias: str, npfunc, numeric_only: bool=True, min_count: int=-1)",
                            "first_compat(x, axis=0)",
                            "last_compat(x, axis=0)",
                            "pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]",
                            "post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray",
                            "f(self, **kwargs)",
                            "first(x)",
                            "last(x)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121a89700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121a89700>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121a89760>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121a89700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121a89700>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    3.0\n2    3.0\n3    3.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8   10.0\n9    4.0\n10   3.0\n11   3.0\n12   3.0\n13   3.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18  10.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121a89f10>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    3.0\n2    3.0\n3    3.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8   10.0\n9    4.0\n10   3.0\n11   3.0\n12   3.0\n13   3.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18  10.0\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121a89760>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    NaN\n1    3.0\n2    3.0\n3    3.0\n4    3.0\n5    1.0\n6    2.0\n7    4.0\n8   10.0\n9   10.0\n10   NaN\n11   3.0\n12   3.0\n13   3.0\n14   3.0\n15   1.0\n16   2.0\n17   4.0\n18  10.0\n19  10.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121a89f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x129ed2df0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x129ed2df0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a432130>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x129ed2df0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x129ed2df0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a432130>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x129fa0e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x129fa0e50>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a3c60a0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x129fa0e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x129fa0e50>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    3.0\n2    3.0\n3    3.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8   10.0\n9    4.0\n10   3.0\n11   3.0\n12   3.0\n13   3.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18  10.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a3c6a60>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    3.0\n2    3.0\n3    3.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8   10.0\n9    4.0\n10   3.0\n11   3.0\n12   3.0\n13   3.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18  10.0\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a3c60a0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    3.0\n1    3.0\n2    3.0\n3    1.0\n4    2.0\n5    4.0\n6   10.0\n7   10.0\n8    4.0\n9    NaN\n10   3.0\n11   3.0\n12   3.0\n13   1.0\n14   2.0\n15   4.0\n16  10.0\n17  10.0\n18   4.0\n19   NaN",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a3c6a60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a259310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a259310>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a259190>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a259310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a259310>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a259190>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121e2b850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121e2b850>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121e2b5b0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121e2b850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121e2b850>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    1.0\n2    1.0\n3    1.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    4.0\n9    4.0\n10   3.0\n11   1.0\n12   1.0\n13   1.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   4.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121bff2b0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    1.0\n2    1.0\n3    1.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    4.0\n9    4.0\n10   3.0\n11   1.0\n12   1.0\n13   1.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   4.0\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121e2b5b0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    NaN\n1    3.0\n2    1.0\n3    1.0\n4    1.0\n5    1.0\n6    2.0\n7    4.0\n8   10.0\n9    4.0\n10   NaN\n11   3.0\n12   1.0\n13   1.0\n14   1.0\n15   1.0\n16   2.0\n17   4.0\n18  10.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121bff2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a510d30>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a510d30>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x129c738e0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a510d30>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a510d30>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x129c738e0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x129ea5be0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x129ea5be0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x129ea5880>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x129ea5be0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x129ea5be0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    1.0\n2    1.0\n3    1.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    4.0\n9    4.0\n10   3.0\n11   1.0\n12   1.0\n13   1.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   4.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a661280>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    1.0\n2    1.0\n3    1.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    4.0\n9    4.0\n10   3.0\n11   1.0\n12   1.0\n13   1.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   4.0\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x129ea5880>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    1.0\n1    1.0\n2    1.0\n3    1.0\n4    2.0\n5    4.0\n6   10.0\n7    4.0\n8    4.0\n9    NaN\n10   1.0\n11   1.0\n12   1.0\n13   1.0\n14   2.0\n15   4.0\n16  10.0\n17   4.0\n18   4.0\n19   NaN",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a661280>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a823d60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a823d60>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a823910>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a823d60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a823d60>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a823910>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121e6a340>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121e6a340>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121e6ad30>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121e6a340>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121e6a340>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121e6ad30>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a93df40>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a93df40>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a93deb0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a93df40>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a93df40>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a93deb0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a7dcbe0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a7dcbe0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a7dce80>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a7dcbe0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a7dcbe0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    3.0\n2    NaN\n3    NaN\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8   10.0\n9    4.0\n10   3.0\n11   3.0\n12   NaN\n13   NaN\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18  10.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a37f4c0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    3.0\n2    NaN\n3    NaN\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8   10.0\n9    4.0\n10   3.0\n11   3.0\n12   NaN\n13   NaN\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18  10.0\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a7dce80>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    NaN\n1    3.0\n2    3.0\n3    NaN\n4    NaN\n5    1.0\n6    2.0\n7    4.0\n8   10.0\n9   10.0\n10   NaN\n11   3.0\n12   3.0\n13   NaN\n14   NaN\n15   1.0\n16   2.0\n17   4.0\n18  10.0\n19  10.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a37f4c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x129f1b610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x129f1b610>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a86e970>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x129f1b610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x129f1b610>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a86e970>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a455310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a455310>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a455280>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a455310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a455310>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    3.0\n2    NaN\n3    NaN\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8   10.0\n9    4.0\n10   3.0\n11   3.0\n12   NaN\n13   NaN\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18  10.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x129d039d0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    3.0\n2    NaN\n3    NaN\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8   10.0\n9    4.0\n10   3.0\n11   3.0\n12   NaN\n13   NaN\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18  10.0\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a455280>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    3.0\n1    NaN\n2    NaN\n3    1.0\n4    2.0\n5    4.0\n6   10.0\n7   10.0\n8    4.0\n9    NaN\n10   3.0\n11   NaN\n12   NaN\n13   1.0\n14   2.0\n15   4.0\n16  10.0\n17  10.0\n18   4.0\n19   NaN",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x129d039d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a75bd30>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a75bd30>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a75b940>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a75bd30>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a75bd30>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a75b940>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a6d0dc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a6d0dc0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a6d0c70>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a6d0dc0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a6d0dc0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    NaN\n2    NaN\n3    1.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    4.0\n9    4.0\n10   3.0\n11   NaN\n12   NaN\n13   1.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   4.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121e318b0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    NaN\n2    NaN\n3    1.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    4.0\n9    4.0\n10   3.0\n11   NaN\n12   NaN\n13   1.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   4.0\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a6d0c70>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    NaN\n1    3.0\n2    NaN\n3    NaN\n4    1.0\n5    1.0\n6    2.0\n7    4.0\n8   10.0\n9    4.0\n10   NaN\n11   3.0\n12   NaN\n13   NaN\n14   1.0\n15   1.0\n16   2.0\n17   4.0\n18  10.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121e318b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a7f2fa0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a7f2fa0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a57d250>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a7f2fa0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a7f2fa0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a57d250>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ba8340>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ba8340>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121ba8250>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ba8340>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ba8340>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    NaN\n2    NaN\n3    1.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    4.0\n9    4.0\n10   3.0\n11   NaN\n12   NaN\n13   1.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   4.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ba8d60>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    NaN\n2    NaN\n3    1.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    4.0\n9    4.0\n10   3.0\n11   NaN\n12   NaN\n13   1.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   4.0\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121ba8250>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    NaN\n1    NaN\n2    1.0\n3    1.0\n4    2.0\n5    4.0\n6   10.0\n7    4.0\n8    4.0\n9    NaN\n10   NaN\n11   NaN\n12   1.0\n13   1.0\n14   2.0\n15   4.0\n16  10.0\n17   4.0\n18   4.0\n19   NaN",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ba8d60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a494af0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a494af0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a494e80>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a494af0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12a494af0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12a494e80>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x129caa460>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x129caa460>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x129caa1f0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x129caa460>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x129caa460>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x129caa1f0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x129ca2430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x129ca2430>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121eca1c0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x129ca2430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x129ca2430>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121eca1c0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11934f7c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11934f7c0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11934f790>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11934f7c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11934f7c0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    3.0\n2    3.0\n3    3.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8   10.0\n9    4.0\n10   3.0\n11   3.0\n12   3.0\n13   3.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18  10.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11934ffd0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    3.0\n2    3.0\n3    3.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8   10.0\n9    4.0\n10   3.0\n11   3.0\n12   3.0\n13   3.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18  10.0\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11934f790>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    NaN\n1    3.0\n2    3.0\n3    3.0\n4    3.0\n5    1.0\n6    2.0\n7    4.0\n8   10.0\n9   10.0\n10   NaN\n11   3.0\n12   3.0\n13   3.0\n14   3.0\n15   1.0\n16   2.0\n17   4.0\n18  10.0\n19  10.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11934ffd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121bb0bb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121bb0bb0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121bb0820>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121bb0bb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121bb0bb0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121bb0820>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ca90d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ca90d0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121ca9250>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ca90d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ca90d0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    3.0\n2    3.0\n3    3.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8   10.0\n9    4.0\n10   3.0\n11   3.0\n12   3.0\n13   3.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18  10.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ca9c10>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    3.0\n2    3.0\n3    3.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8   10.0\n9    4.0\n10   3.0\n11   3.0\n12   3.0\n13   3.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18  10.0\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121ca9250>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    3.0\n1    3.0\n2    3.0\n3    1.0\n4    2.0\n5    4.0\n6   10.0\n7   10.0\n8    4.0\n9    NaN\n10   3.0\n11   3.0\n12   3.0\n13   1.0\n14   2.0\n15   4.0\n16  10.0\n17  10.0\n18   4.0\n19   NaN",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ca9c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x1193ded30>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x1193ded30>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121ac5130>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x1193ded30>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x1193ded30>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121ac5130>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x1195f1a00>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x1195f1a00>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1195f1760>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x1195f1a00>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x1195f1a00>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    1.0\n2    1.0\n3    1.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    4.0\n9    4.0\n10   3.0\n11   1.0\n12   1.0\n13   1.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   4.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x122121b50>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    1.0\n2    1.0\n3    1.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    4.0\n9    4.0\n10   3.0\n11   1.0\n12   1.0\n13   1.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   4.0\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1195f1760>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    NaN\n1    3.0\n2    1.0\n3    1.0\n4    1.0\n5    1.0\n6    2.0\n7    4.0\n8   10.0\n9    4.0\n10   NaN\n11   3.0\n12   1.0\n13   1.0\n14   1.0\n15   1.0\n16   2.0\n17   4.0\n18  10.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x122121b50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11948be50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11948be50>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121916d30>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11948be50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11948be50>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121916d30>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121509a30>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121509a30>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121509e50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121509a30>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121509a30>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    1.0\n2    1.0\n3    1.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    4.0\n9    4.0\n10   3.0\n11   1.0\n12   1.0\n13   1.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   4.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x1220fc5e0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    1.0\n2    1.0\n3    1.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    4.0\n9    4.0\n10   3.0\n11   1.0\n12   1.0\n13   1.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   4.0\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121509e50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    1.0\n1    1.0\n2    1.0\n3    1.0\n4    2.0\n5    4.0\n6   10.0\n7    4.0\n8    4.0\n9    NaN\n10   1.0\n11   1.0\n12   1.0\n13   1.0\n14   2.0\n15   4.0\n16  10.0\n17   4.0\n18   4.0\n19   NaN",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x1220fc5e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121c06d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121c06d90>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11942fd30>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121c06d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121c06d90>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11942fd30>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12145a910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12145a910>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12145ac70>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12145a910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12145a910>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'pad'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "limit": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    NaN\n2    NaN\n3    NaN\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    NaN\n9    4.0\n10   3.0\n11   NaN\n12   NaN\n13   NaN\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   NaN\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12145a3d0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    NaN\n2    NaN\n3    NaN\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    NaN\n9    4.0\n10   3.0\n11   NaN\n12   NaN\n13   NaN\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   NaN\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12145ac70>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    NaN\n1    3.0\n2    NaN\n3    NaN\n4    NaN\n5    1.0\n6    2.0\n7    4.0\n8   10.0\n9    NaN\n10   NaN\n11   3.0\n12   NaN\n13   NaN\n14   NaN\n15   1.0\n16   2.0\n17   4.0\n18  10.0\n19   NaN",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12145a3d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121e9e8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121e9e8e0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121e9e940>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121e9e8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121e9e8e0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121e9e940>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121b61190>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121b61190>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121b61250>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121b61190>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121b61190>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'pad'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "limit": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    NaN\n2    NaN\n3    NaN\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    NaN\n9    4.0\n10   3.0\n11   NaN\n12   NaN\n13   NaN\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   NaN\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121b61e80>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    NaN\n2    NaN\n3    NaN\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    NaN\n9    4.0\n10   3.0\n11   NaN\n12   NaN\n13   NaN\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   NaN\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121b61250>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    NaN\n1    NaN\n2    NaN\n3    1.0\n4    2.0\n5    4.0\n6   10.0\n7    NaN\n8    4.0\n9    NaN\n10   NaN\n11   NaN\n12   NaN\n13   1.0\n14   2.0\n15   4.0\n16  10.0\n17   NaN\n18   4.0\n19   NaN",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121b61e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121a6dbb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121a6dbb0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121a6db50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121a6dbb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121a6dbb0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121a6db50>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12154c940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12154c940>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12154c730>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12154c940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x12154c940>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    3.0\n2    NaN\n3    NaN\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8   10.0\n9    4.0\n10   3.0\n11   3.0\n12   NaN\n13   NaN\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18  10.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ffa070>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    3.0\n2    NaN\n3    NaN\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8   10.0\n9    4.0\n10   3.0\n11   3.0\n12   NaN\n13   NaN\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18  10.0\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x12154c730>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    NaN\n1    3.0\n2    3.0\n3    NaN\n4    NaN\n5    1.0\n6    2.0\n7    4.0\n8   10.0\n9   10.0\n10   NaN\n11   3.0\n12   3.0\n13   NaN\n14   NaN\n15   1.0\n16   2.0\n17   4.0\n18  10.0\n19  10.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ffa070>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ed7670>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ed7670>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121ed72b0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ed7670>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121ed7670>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121ed72b0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121f34eb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121f34eb0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121f34c10>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121f34eb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121f34eb0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    3.0\n2    NaN\n3    NaN\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8   10.0\n9    4.0\n10   3.0\n11   3.0\n12   NaN\n13   NaN\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18  10.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121fce0d0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    3.0\n2    NaN\n3    NaN\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8   10.0\n9    4.0\n10   3.0\n11   3.0\n12   NaN\n13   NaN\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18  10.0\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121f34c10>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    3.0\n1    NaN\n2    NaN\n3    1.0\n4    2.0\n5    4.0\n6   10.0\n7   10.0\n8    4.0\n9    NaN\n10   3.0\n11   NaN\n12   NaN\n13   1.0\n14   2.0\n15   4.0\n16  10.0\n17  10.0\n18   4.0\n19   NaN",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121fce0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121f87c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121f87c10>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121a31bb0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121f87c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121f87c10>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'ffill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121a31bb0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121480a90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121480a90>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121480820>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121480a90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121480a90>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    NaN\n2    NaN\n3    1.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    4.0\n9    4.0\n10   3.0\n11   NaN\n12   NaN\n13   1.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   4.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x119440a60>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    NaN\n2    NaN\n3    1.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    4.0\n9    4.0\n10   3.0\n11   NaN\n12   NaN\n13   1.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   4.0\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121480820>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    NaN\n1    3.0\n2    NaN\n3    NaN\n4    1.0\n5    1.0\n6    2.0\n7    4.0\n8   10.0\n9    4.0\n10   NaN\n11   3.0\n12   NaN\n13   NaN\n14   1.0\n15   1.0\n16   2.0\n17   4.0\n18  10.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x119440a60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121dbbee0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121dbbee0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121dbbbe0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121dbbee0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121dbbee0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121dbbbe0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121addd60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121addd60>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121add490>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121addd60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121addd60>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    NaN\n2    NaN\n3    1.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    4.0\n9    4.0\n10   3.0\n11   NaN\n12   NaN\n13   1.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   4.0\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x1195122b0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    NaN\n2    NaN\n3    1.0\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    4.0\n9    4.0\n10   3.0\n11   NaN\n12   NaN\n13   1.0\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   4.0\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121add490>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    NaN\n1    NaN\n2    1.0\n3    1.0\n4    2.0\n5    4.0\n6   10.0\n7    4.0\n8    4.0\n9    NaN\n10   NaN\n11   NaN\n12   1.0\n13   1.0\n14   2.0\n15   4.0\n16  10.0\n17   4.0\n18   4.0\n19   NaN",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x1195122b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x1213e8be0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x1213e8be0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1213e87f0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x1213e8be0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x1213e8be0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'bfill'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1213e87f0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121c1c130>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121c1c130>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121c1c1f0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121c1c130>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121c1c130>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'pad'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "limit": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    NaN\n2    NaN\n3    NaN\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    NaN\n9    4.0\n10   3.0\n11   NaN\n12   NaN\n13   NaN\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   NaN\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121c1cd90>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    NaN\n2    NaN\n3    NaN\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    NaN\n9    4.0\n10   3.0\n11   NaN\n12   NaN\n13   NaN\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   NaN\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121c1c1f0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    NaN\n1    3.0\n2    NaN\n3    NaN\n4    NaN\n5    1.0\n6    2.0\n7    4.0\n8   10.0\n9    NaN\n10   NaN\n11   3.0\n12   NaN\n13   NaN\n14   NaN\n15   1.0\n16   2.0\n17   4.0\n18  10.0\n19   NaN",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121c1cd90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x1217805e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x1217805e0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121780310>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x1217805e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x1217805e0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121780310>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x1218514f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x1218514f0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1218518b0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x1218514f0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x1218514f0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "'pad'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "limit": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": "    vals\n0    3.0\n1    NaN\n2    NaN\n3    NaN\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    NaN\n9    4.0\n10   3.0\n11   NaN\n12   NaN\n13   NaN\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   NaN\n19   4.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x1218510a0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "filled.groupby": {
                                    "variable_value": "<bound method NDFrame.groupby of     vals\n0    3.0\n1    NaN\n2    NaN\n3    NaN\n4    1.0\n5    2.0\n6    4.0\n7   10.0\n8    NaN\n9    4.0\n10   3.0\n11   NaN\n12   NaN\n13   NaN\n14   1.0\n15   2.0\n16   4.0\n17  10.0\n18   NaN\n19   4.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x1218518b0>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": "    vals\n0    NaN\n1    NaN\n2    NaN\n3    1.0\n4    2.0\n5    4.0\n6   10.0\n7    NaN\n8    4.0\n9    NaN\n10   NaN\n11   NaN\n12   NaN\n13   1.0\n14   2.0\n15   4.0\n16  10.0\n17   NaN\n18   4.0\n19   NaN",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "20"
                                },
                                "fill_grp.shift": {
                                    "variable_value": "<bound method GroupBy.shift of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x1218510a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121dddbe0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121dddbe0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121ddde20>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "axis": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.apply": {
                                    "variable_value": "<bound method _GroupBy.apply of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x121dddbe0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x121dddbe0>",
                                    "variable_type": "DataFrameGroupBy",
                                    "variable_shape": "2"
                                },
                                "x.pct_change": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "periods": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fill_method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "filled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filled.groupby": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.grouper.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x121ddde20>",
                                    "variable_type": "BaseGrouper",
                                    "variable_shape": "(2,)"
                                },
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_grp.shift": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Substitution": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_common_see_also": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "@contextmanager\ndef _group_selection_context(groupby):\n    \"\"\"\n    Set / reset the _group_selection_context.\n    \"\"\"\n    groupby._set_group_selection()\n    yield groupby\n    groupby._reset_group_selection()",
                "@Appender(GroupBy.__doc__)\ndef get_groupby(\n    obj: NDFrame,\n    by: Optional[_KeysArgType] = None,\n    axis: int = 0,\n    level=None,\n    grouper: \"Optional[ops.BaseGrouper]\" = None,\n    exclusions=None,\n    selection=None,\n    as_index: bool = True,\n    sort: bool = True,\n    group_keys: bool = True,\n    squeeze: bool = False,\n    observed: bool = False,\n    mutated: bool = False,\n) -> GroupBy:\n\n    klass: Type[GroupBy]\n    if isinstance(obj, Series):\n        from pandas.core.groupby.generic import SeriesGroupBy\n\n        klass = SeriesGroupBy\n    elif isinstance(obj, DataFrame):\n        from pandas.core.groupby.generic import DataFrameGroupBy\n\n        klass = DataFrameGroupBy\n    else:\n        raise TypeError(f\"invalid type: {obj}\")\n\n    return klass(\n        obj=obj,\n        keys=by,\n        axis=axis,\n        level=level,\n        grouper=grouper,\n        exclusions=exclusions,\n        selection=selection,\n        as_index=as_index,\n        sort=sort,\n        group_keys=group_keys,\n        squeeze=squeeze,\n        observed=observed,\n        mutated=mutated,\n    )",
                "def __init__(self, groupby):\n    self._groupby = groupby",
                "def __call__(self, *args, **kwargs):\n    def f(self):\n        return self.plot(*args, **kwargs)\n\n    f.__name__ = \"plot\"\n    return self._groupby.apply(f)",
                "def __getattr__(self, name: str):\n    def attr(*args, **kwargs):\n        def f(self):\n            return getattr(self.plot, name)(*args, **kwargs)\n\n        return self._groupby.apply(f)\n\n    return attr",
                "def __init__(\n    self,\n    obj: NDFrame,\n    keys: Optional[_KeysArgType] = None,\n    axis: int = 0,\n    level=None,\n    grouper: \"Optional[ops.BaseGrouper]\" = None,\n    exclusions=None,\n    selection=None,\n    as_index: bool = True,\n    sort: bool = True,\n    group_keys: bool = True,\n    squeeze: bool = False,\n    observed: bool = False,\n    mutated: bool = False,\n):\n\n    self._selection = selection\n\n    assert isinstance(obj, NDFrame), type(obj)\n    obj._consolidate_inplace()\n\n    self.level = level\n\n    if not as_index:\n        if not isinstance(obj, DataFrame):\n            raise TypeError(\"as_index=False only valid with DataFrame\")\n        if axis != 0:\n            raise ValueError(\"as_index=False only valid for axis=0\")\n\n    self.as_index = as_index\n    self.keys = keys\n    self.sort = sort\n    self.group_keys = group_keys\n    self.squeeze = squeeze\n    self.observed = observed\n    self.mutated = mutated\n\n    if grouper is None:\n        from pandas.core.groupby.grouper import get_grouper\n\n        grouper, exclusions, obj = get_grouper(\n            obj,\n            keys,\n            axis=axis,\n            level=level,\n            sort=sort,\n            observed=observed,\n            mutated=self.mutated,\n        )\n\n    self.obj = obj\n    self.axis = obj._get_axis_number(axis)\n    self.grouper = grouper\n    self.exclusions = set(exclusions) if exclusions else set()",
                "def __len__(self) -> int:\n    return len(self.groups)",
                "def __repr__(self) -> str:\n    # TODO: Better repr for GroupBy object\n    return object.__repr__(self)",
                "def _assure_grouper(self):\n    \"\"\"\n    We create the grouper on instantiation sub-classes may have a\n    different policy.\n    \"\"\"\n    pass",
                "@property\ndef groups(self):\n    \"\"\"\n    Dict {group name -> group labels}.\n    \"\"\"\n    self._assure_grouper()\n    return self.grouper.groups",
                "@property\ndef ngroups(self):\n    self._assure_grouper()\n    return self.grouper.ngroups",
                "@property\ndef indices(self):\n    \"\"\"\n    Dict {group name -> group indices}.\n    \"\"\"\n    self._assure_grouper()\n    return self.grouper.indices",
                "def _get_indices(self, names):\n    \"\"\"\n    Safe get multiple indices, translate keys for\n    datelike to underlying repr.\n    \"\"\"\n\n    def get_converter(s):\n        # possibly convert to the actual key types\n        # in the indices, could be a Timestamp or a np.datetime64\n        if isinstance(s, datetime.datetime):\n            return lambda key: Timestamp(key)\n        elif isinstance(s, np.datetime64):\n            return lambda key: Timestamp(key).asm8\n        else:\n            return lambda key: key\n\n    if len(names) == 0:\n        return []\n\n    if len(self.indices) > 0:\n        index_sample = next(iter(self.indices))\n    else:\n        index_sample = None  # Dummy sample\n\n    name_sample = names[0]\n    if isinstance(index_sample, tuple):\n        if not isinstance(name_sample, tuple):\n            msg = \"must supply a tuple to get_group with multiple grouping keys\"\n            raise ValueError(msg)\n        if not len(name_sample) == len(index_sample):\n            try:\n                # If the original grouper was a tuple\n                return [self.indices[name] for name in names]\n            except KeyError:\n                # turns out it wasn't a tuple\n                msg = (\n                    \"must supply a same-length tuple to get_group\"\n                    \" with multiple grouping keys\"\n                )\n                raise ValueError(msg)\n\n        converters = [get_converter(s) for s in index_sample]\n        names = (tuple(f(n) for f, n in zip(converters, name)) for name in names)\n\n    else:\n        converter = get_converter(index_sample)\n        names = (converter(name) for name in names)\n\n    return [self.indices.get(name, []) for name in names]",
                "def _get_index(self, name):\n    \"\"\"\n    Safe get index, translate keys for datelike to underlying repr.\n    \"\"\"\n    return self._get_indices([name])[0]",
                "@cache_readonly\ndef _selected_obj(self):\n    # Note: _selected_obj is always just `self.obj` for SeriesGroupBy\n\n    if self._selection is None or isinstance(self.obj, Series):\n        if self._group_selection is not None:\n            return self.obj[self._group_selection]\n        return self.obj\n    else:\n        return self.obj[self._selection]",
                "def _reset_group_selection(self):\n    \"\"\"\n    Clear group based selection.\n\n    Used for methods needing to return info on each group regardless of\n    whether a group selection was previously set.\n    \"\"\"\n    if self._group_selection is not None:\n        # GH12839 clear cached selection too when changing group selection\n        self._group_selection = None\n        self._reset_cache(\"_selected_obj\")",
                "def _set_group_selection(self):\n    \"\"\"\n    Create group based selection.\n\n    Used when selection is not passed directly but instead via a grouper.\n\n    NOTE: this should be paired with a call to _reset_group_selection\n    \"\"\"\n    grp = self.grouper\n    if not (\n        self.as_index\n        and getattr(grp, \"groupings\", None) is not None\n        and self.obj.ndim > 1\n        and self._group_selection is None\n    ):\n        return\n\n    ax = self.obj._info_axis\n    groupers = [g.name for g in grp.groupings if g.level is None and g.in_axis]\n\n    if len(groupers):\n        # GH12839 clear selected obj cache when group selection changes\n        self._group_selection = ax.difference(Index(groupers), sort=False).tolist()\n        self._reset_cache(\"_selected_obj\")",
                "def _set_result_index_ordered(self, result):\n    # set the result index on the passed values object and\n    # return the new object, xref 8046\n\n    # the values/counts are repeated according to the group index\n    # shortcut if we have an already ordered grouper\n    if not self.grouper.is_monotonic:\n        index = Index(np.concatenate(self._get_indices(self.grouper.result_index)))\n        result.set_axis(index, axis=self.axis, inplace=True)\n        result = result.sort_index(axis=self.axis)\n\n    result.set_axis(self.obj._get_axis(self.axis), axis=self.axis, inplace=True)\n    return result",
                "def _dir_additions(self):\n    return self.obj._dir_additions() | self._apply_whitelist",
                "def __getattr__(self, attr: str):\n    if attr in self._internal_names_set:\n        return object.__getattribute__(self, attr)\n    if attr in self.obj:\n        return self[attr]\n\n    raise AttributeError(\n        f\"'{type(self).__name__}' object has no attribute '{attr}'\"\n    )",
                "    @Substitution(\n        klass=\"GroupBy\",\n        versionadded=\".. versionadded:: 0.21.0\",\n        examples=\"\"\"\\\n>>> df = pd.DataFrame({'A': 'a b a b'.split(), 'B': [1, 2, 3, 4]})\n>>> df\n   A  B\n0  a  1\n1  b  2\n2  a  3\n3  b  4\n\nTo get the difference between each groups maximum and minimum value in one\npass, you can do\n\n>>> df.groupby('A').pipe(lambda x: x.max() - x.min())\n   B\nA\na  2\nb  2\"\"\",\n    )\n    @Appender(_pipe_template)\n    def pipe(self, func, *args, **kwargs):\n        return com.pipe(self, func, *args, **kwargs)",
                "def _make_wrapper(self, name):\n    assert name in self._apply_whitelist\n\n    self._set_group_selection()\n\n    # need to setup the selection\n    # as are not passed directly but in the grouper\n    f = getattr(self._selected_obj, name)\n    if not isinstance(f, types.MethodType):\n        return self.apply(lambda self: getattr(self, name))\n\n    f = getattr(type(self._selected_obj), name)\n    sig = inspect.signature(f)\n\n    def wrapper(*args, **kwargs):\n        # a little trickery for aggregation functions that need an axis\n        # argument\n        if \"axis\" in sig.parameters:\n            if kwargs.get(\"axis\", None) is None:\n                kwargs[\"axis\"] = self.axis\n\n        def curried(x):\n            return f(x, *args, **kwargs)\n\n        # preserve the name so we can detect it when calling plot methods,\n        # to avoid duplicates\n        curried.__name__ = name\n\n        # special case otherwise extra plots are created when catching the\n        # exception below\n        if name in base.plotting_methods:\n            return self.apply(curried)\n\n        try:\n            return self.apply(curried)\n        except TypeError as err:\n            if not re.search(\n                \"reduction operation '.*' not allowed for this dtype\", str(err)\n            ):\n                # We don't have a cython implementation\n                # TODO: is the above comment accurate?\n                raise\n\n        if self.obj.ndim == 1:\n            # this can be called recursively, so need to raise ValueError\n            raise ValueError\n\n        # GH#3688 try to operate item-by-item\n        result = self._aggregate_item_by_item(name, *args, **kwargs)\n        return result\n\n    wrapper.__name__ = name\n    return wrapper",
                "def get_group(self, name, obj=None):\n    \"\"\"\n    Construct DataFrame from group with provided name.\n\n    Parameters\n    ----------\n    name : object\n        The name of the group to get as a DataFrame.\n    obj : DataFrame, default None\n        The DataFrame to take the DataFrame out of.  If\n        it is None, the object groupby was called on will\n        be used.\n\n    Returns\n    -------\n    group : same type as obj\n    \"\"\"\n    if obj is None:\n        obj = self._selected_obj\n\n    inds = self._get_index(name)\n    if not len(inds):\n        raise KeyError(name)\n\n    return obj.take(inds, axis=self.axis)",
                "def __iter__(self):\n    \"\"\"\n    Groupby iterator.\n\n    Returns\n    -------\n    Generator yielding sequence of (name, subsetted object)\n    for each group\n    \"\"\"\n    return self.grouper.get_iterator(self.obj, axis=self.axis)",
                "@Appender(\n    _apply_docs[\"template\"].format(\n        input=\"dataframe\", examples=_apply_docs[\"dataframe_examples\"]\n    )\n)\ndef apply(self, func, *args, **kwargs):\n\n    func = self._is_builtin_func(func)\n\n    # this is needed so we don't try and wrap strings. If we could\n    # resolve functions to their callable functions prior, this\n    # wouldn't be needed\n    if args or kwargs:\n        if callable(func):\n\n            @wraps(func)\n            def f(g):\n                with np.errstate(all=\"ignore\"):\n                    return func(g, *args, **kwargs)\n\n        elif hasattr(nanops, \"nan\" + func):\n            # TODO: should we wrap this in to e.g. _is_builtin_func?\n            f = getattr(nanops, \"nan\" + func)\n\n        else:\n            raise ValueError(\n                \"func must be a callable if args or kwargs are supplied\"\n            )\n    else:\n        f = func\n\n    # ignore SettingWithCopy here in case the user mutates\n    with option_context(\"mode.chained_assignment\", None):\n        try:\n            result = self._python_apply_general(f)\n        except TypeError:\n            # gh-20949\n            # try again, with .apply acting as a filtering\n            # operation, by excluding the grouping column\n            # This would normally not be triggered\n            # except if the udf is trying an operation that\n            # fails on *some* columns, e.g. a numeric operation\n            # on a string grouper column\n\n            with _group_selection_context(self):\n                return self._python_apply_general(f)\n\n    return result",
                "def _python_apply_general(self, f):\n    keys, values, mutated = self.grouper.apply(f, self._selected_obj, self.axis)\n\n    return self._wrap_applied_output(\n        keys, values, not_indexed_same=mutated or self.mutated\n    )",
                "def _iterate_slices(self) -> Iterable[Series]:\n    raise AbstractMethodError(self)",
                "def transform(self, func, *args, **kwargs):\n    raise AbstractMethodError(self)",
                "def _cumcount_array(self, ascending: bool = True):\n    \"\"\"\n    Parameters\n    ----------\n    ascending : bool, default True\n        If False, number in reverse, from length of group - 1 to 0.\n\n    Notes\n    -----\n    this is currently implementing sort=False\n    (though the default is sort=True) for groupby in general\n    \"\"\"\n    ids, _, ngroups = self.grouper.group_info\n    sorter = get_group_index_sorter(ids, ngroups)\n    ids, count = ids[sorter], len(ids)\n\n    if count == 0:\n        return np.empty(0, dtype=np.int64)\n\n    run = np.r_[True, ids[:-1] != ids[1:]]\n    rep = np.diff(np.r_[np.nonzero(run)[0], count])\n    out = (~run).cumsum()\n\n    if ascending:\n        out -= np.repeat(out[run], rep)\n    else:\n        out = np.repeat(out[np.r_[run[1:], True]], rep) - out\n\n    rev = np.empty(count, dtype=np.intp)\n    rev[sorter] = np.arange(count, dtype=np.intp)\n    return out[rev].astype(np.int64, copy=False)",
                "def _try_cast(self, result, obj, numeric_only: bool = False):\n    \"\"\"\n    Try to cast the result to our obj original type,\n    we may have roundtripped through object in the mean-time.\n\n    If numeric_only is True, then only try to cast numerics\n    and not datetimelikes.\n\n    \"\"\"\n    if obj.ndim > 1:\n        dtype = obj._values.dtype\n    else:\n        dtype = obj.dtype\n\n    if not is_scalar(result):\n        if is_extension_array_dtype(dtype) and dtype.kind != \"M\":\n            # The function can return something of any type, so check\n            #  if the type is compatible with the calling EA.\n            # datetime64tz is handled correctly in agg_series,\n            #  so is excluded here.\n\n            # return the same type (Series) as our caller\n            cls = dtype.construct_array_type()\n            result = try_cast_to_ea(cls, result, dtype=dtype)\n        elif numeric_only and is_numeric_dtype(dtype) or not numeric_only:\n            result = maybe_downcast_to_dtype(result, dtype)\n\n    return result",
                "def _transform_should_cast(self, func_nm: str) -> bool:\n    \"\"\"\n    Parameters\n    ----------\n    func_nm: str\n        The name of the aggregation function being performed\n\n    Returns\n    -------\n    bool\n        Whether transform should attempt to cast the result of aggregation\n    \"\"\"\n    return (self.size().fillna(0) > 0).any() and (\n        func_nm not in base.cython_cast_blacklist\n    )",
                "def _cython_transform(self, how: str, numeric_only: bool = True, **kwargs):\n    output: Dict[base.OutputKey, np.ndarray] = {}\n    for idx, obj in enumerate(self._iterate_slices()):\n        name = obj.name\n        is_numeric = is_numeric_dtype(obj.dtype)\n        if numeric_only and not is_numeric:\n            continue\n\n        try:\n            result, _ = self.grouper.transform(obj.values, how, **kwargs)\n        except NotImplementedError:\n            continue\n\n        if self._transform_should_cast(how):\n            result = self._try_cast(result, obj)\n\n        key = base.OutputKey(label=name, position=idx)\n        output[key] = result\n\n    if len(output) == 0:\n        raise DataError(\"No numeric types to aggregate\")\n\n    return self._wrap_transformed_output(output)",
                "def _wrap_aggregated_output(self, output: Mapping[base.OutputKey, np.ndarray]):\n    raise AbstractMethodError(self)",
                "def _wrap_transformed_output(self, output: Mapping[base.OutputKey, np.ndarray]):\n    raise AbstractMethodError(self)",
                "def _wrap_applied_output(self, keys, values, not_indexed_same: bool = False):\n    raise AbstractMethodError(self)",
                "def _cython_agg_general(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n):\n    output: Dict[base.OutputKey, Union[np.ndarray, DatetimeArray]] = {}\n    # Ideally we would be able to enumerate self._iterate_slices and use\n    # the index from enumeration as the key of output, but ohlc in particular\n    # returns a (n x 4) array. Output requires 1D ndarrays as values, so we\n    # need to slice that up into 1D arrays\n    idx = 0\n    for obj in self._iterate_slices():\n        name = obj.name\n        is_numeric = is_numeric_dtype(obj.dtype)\n        if numeric_only and not is_numeric:\n            continue\n\n        result, agg_names = self.grouper.aggregate(\n            obj._values, how, min_count=min_count\n        )\n\n        if agg_names:\n            # e.g. ohlc\n            assert len(agg_names) == result.shape[1]\n            for result_column, result_name in zip(result.T, agg_names):\n                key = base.OutputKey(label=result_name, position=idx)\n                output[key] = self._try_cast(result_column, obj)\n                idx += 1\n        else:\n            assert result.ndim == 1\n            key = base.OutputKey(label=name, position=idx)\n            output[key] = self._try_cast(result, obj)\n            idx += 1\n\n    if len(output) == 0:\n        raise DataError(\"No numeric types to aggregate\")\n\n    return self._wrap_aggregated_output(output)",
                "def _python_agg_general(self, func, *args, **kwargs):\n    func = self._is_builtin_func(func)\n    f = lambda x: func(x, *args, **kwargs)\n\n    # iterate through \"columns\" ex exclusions to populate output dict\n    output: Dict[base.OutputKey, np.ndarray] = {}\n\n    for idx, obj in enumerate(self._iterate_slices()):\n        name = obj.name\n        if self.grouper.ngroups == 0:\n            # agg_series below assumes ngroups > 0\n            continue\n\n        try:\n            # if this function is invalid for this dtype, we will ignore it.\n            func(obj[:0])\n        except TypeError:\n            continue\n        except AssertionError:\n            raise\n        except Exception:\n            # Our function depends on having a non-empty argument\n            #  See test_groupby_agg_err_catching\n            pass\n\n        result, counts = self.grouper.agg_series(obj, f)\n        assert result is not None\n        key = base.OutputKey(label=name, position=idx)\n        output[key] = self._try_cast(result, obj, numeric_only=True)\n\n    if len(output) == 0:\n        return self._python_apply_general(f)\n\n    if self.grouper._filter_empty_groups:\n\n        mask = counts.ravel() > 0\n        for key, result in output.items():\n\n            # since we are masking, make sure that we have a float object\n            values = result\n            if is_numeric_dtype(values.dtype):\n                values = ensure_float(values)\n\n            output[key] = self._try_cast(values[mask], result)\n\n    return self._wrap_aggregated_output(output)",
                "def _concat_objects(self, keys, values, not_indexed_same: bool = False):\n    from pandas.core.reshape.concat import concat\n\n    def reset_identity(values):\n        # reset the identities of the components\n        # of the values to prevent aliasing\n        for v in com.not_none(*values):\n            ax = v._get_axis(self.axis)\n            ax._reset_identity()\n        return values\n\n    if not not_indexed_same:\n        result = concat(values, axis=self.axis)\n        ax = self._selected_obj._get_axis(self.axis)\n\n        if isinstance(result, Series):\n            result = result.reindex(ax)\n        else:\n\n            # this is a very unfortunate situation\n            # we have a multi-index that is NOT lexsorted\n            # and we have a result which is duplicated\n            # we can't reindex, so we resort to this\n            # GH 14776\n            if isinstance(ax, MultiIndex) and not ax.is_unique:\n                indexer = algorithms.unique1d(\n                    result.index.get_indexer_for(ax.values)\n                )\n                result = result.take(indexer, axis=self.axis)\n            else:\n                result = result.reindex(ax, axis=self.axis)\n\n    elif self.group_keys:\n\n        values = reset_identity(values)\n        if self.as_index:\n\n            # possible MI return case\n            group_keys = keys\n            group_levels = self.grouper.levels\n            group_names = self.grouper.names\n\n            result = concat(\n                values,\n                axis=self.axis,\n                keys=group_keys,\n                levels=group_levels,\n                names=group_names,\n                sort=False,\n            )\n        else:\n\n            # GH5610, returns a MI, with the first level being a\n            # range index\n            keys = list(range(len(values)))\n            result = concat(values, axis=self.axis, keys=keys)\n    else:\n        values = reset_identity(values)\n        result = concat(values, axis=self.axis)\n\n    if isinstance(result, Series) and self._selection_name is not None:\n\n        result.name = self._selection_name\n\n    return result",
                "def _apply_filter(self, indices, dropna):\n    if len(indices) == 0:\n        indices = np.array([], dtype=\"int64\")\n    else:\n        indices = np.sort(np.concatenate(indices))\n    if dropna:\n        filtered = self._selected_obj.take(indices, axis=self.axis)\n    else:\n        mask = np.empty(len(self._selected_obj.index), dtype=bool)\n        mask.fill(False)\n        mask[indices.astype(int)] = True\n        # mask fails to broadcast when passed to where; broadcast manually.\n        mask = np.tile(mask, list(self._selected_obj.shape[1:]) + [1]).T\n        filtered = self._selected_obj.where(mask)  # Fill with NaNs.\n    return filtered",
                "def _bool_agg(self, val_test, skipna):\n    \"\"\"\n    Shared func to call any / all Cython GroupBy implementations.\n    \"\"\"\n\n    def objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]:\n        if is_object_dtype(vals):\n            vals = np.array([bool(x) for x in vals])\n        else:\n            vals = vals.astype(np.bool)\n\n        return vals.view(np.uint8), np.bool\n\n    def result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray:\n        return result.astype(inference, copy=False)\n\n    return self._get_cythonized_result(\n        \"group_any_all\",\n        aggregate=True,\n        cython_dtype=np.dtype(np.uint8),\n        needs_values=True,\n        needs_mask=True,\n        pre_processing=objs_to_bool,\n        post_processing=result_to_bool,\n        val_test=val_test,\n        skipna=skipna,\n    )",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef any(self, skipna: bool = True):\n    \"\"\"\n    Return True if any value in the group is truthful, else False.\n\n    Parameters\n    ----------\n    skipna : bool, default True\n        Flag to ignore nan values during truth testing.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return self._bool_agg(\"any\", skipna)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef all(self, skipna: bool = True):\n    \"\"\"\n    Return True if all values in the group are truthful, else False.\n\n    Parameters\n    ----------\n    skipna : bool, default True\n        Flag to ignore nan values during truth testing.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return self._bool_agg(\"all\", skipna)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef count(self):\n    \"\"\"\n    Compute count of group, excluding missing values.\n\n    Returns\n    -------\n    Series or DataFrame\n        Count of values within each group.\n    \"\"\"\n\n    # defined here for API doc\n    raise NotImplementedError",
                "@Substitution(name=\"groupby\")\n@Substitution(see_also=_common_see_also)\ndef mean(self, *args, **kwargs):\n    \"\"\"\n    Compute mean of groups, excluding missing values.\n\n    Returns\n    -------\n    pandas.Series or pandas.DataFrame\n    %(see_also)s\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 1, 2, 1, 2],\n    ...                    'B': [np.nan, 2, 3, 4, 5],\n    ...                    'C': [1, 2, 1, 1, 2]}, columns=['A', 'B', 'C'])\n\n    Groupby one column and return the mean of the remaining columns in\n    each group.\n\n    >>> df.groupby('A').mean()\n         B         C\n    A\n    1  3.0  1.333333\n    2  4.0  1.500000\n\n    Groupby two columns and return the mean of the remaining column.\n\n    >>> df.groupby(['A', 'B']).mean()\n           C\n    A B\n    1 2.0  2\n      4.0  1\n    2 3.0  1\n      5.0  2\n\n    Groupby one column and return the mean of only particular column in\n    the group.\n\n    >>> df.groupby('A')['B'].mean()\n    A\n    1    3.0\n    2    4.0\n    Name: B, dtype: float64\n    \"\"\"\n    nv.validate_groupby_func(\"mean\", args, kwargs, [\"numeric_only\"])\n    return self._cython_agg_general(\n        \"mean\", alt=lambda x, axis: Series(x).mean(**kwargs), **kwargs\n    )",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef median(self, **kwargs):\n    \"\"\"\n    Compute median of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex\n\n    Returns\n    -------\n    Series or DataFrame\n        Median of values within each group.\n    \"\"\"\n    return self._cython_agg_general(\n        \"median\",\n        alt=lambda x, axis: Series(x).median(axis=axis, **kwargs),\n        **kwargs,\n    )",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef std(self, ddof: int = 1, *args, **kwargs):\n    \"\"\"\n    Compute standard deviation of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    Series or DataFrame\n        Standard deviation of values within each group.\n    \"\"\"\n\n    # TODO: implement at Cython level?\n    nv.validate_groupby_func(\"std\", args, kwargs)\n    return np.sqrt(self.var(ddof=ddof, **kwargs))",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef var(self, ddof: int = 1, *args, **kwargs):\n    \"\"\"\n    Compute variance of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    Series or DataFrame\n        Variance of values within each group.\n    \"\"\"\n    nv.validate_groupby_func(\"var\", args, kwargs)\n    if ddof == 1:\n        return self._cython_agg_general(\n            \"var\", alt=lambda x, axis: Series(x).var(ddof=ddof, **kwargs), **kwargs\n        )\n    else:\n        f = lambda x: x.var(ddof=ddof, **kwargs)\n        with _group_selection_context(self):\n            return self._python_agg_general(f)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef sem(self, ddof: int = 1):\n    \"\"\"\n    Compute standard error of the mean of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    Series or DataFrame\n        Standard error of the mean of values within each group.\n    \"\"\"\n    return self.std(ddof=ddof) / np.sqrt(self.count())",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef size(self):\n    \"\"\"\n    Compute group sizes.\n\n    Returns\n    -------\n    Series\n        Number of rows in each group.\n    \"\"\"\n    result = self.grouper.size()\n\n    if isinstance(self.obj, Series):\n        result.name = self.obj.name\n    return self._reindex_output(result, fill_value=0)",
                "@classmethod\ndef _add_numeric_operations(cls):\n    \"\"\"\n    Add numeric operations to the GroupBy generically.\n    \"\"\"\n\n    def groupby_function(\n        name: str,\n        alias: str,\n        npfunc,\n        numeric_only: bool = True,\n        min_count: int = -1,\n    ):\n\n        _local_template = \"\"\"\n        Compute %(f)s of group values.\n\n        Returns\n        -------\n        Series or DataFrame\n            Computed %(f)s of values within each group.\n        \"\"\"\n\n        @Substitution(name=\"groupby\", f=name)\n        @Appender(_common_see_also)\n        @Appender(_local_template)\n        def f(self, **kwargs):\n            if \"numeric_only\" not in kwargs:\n                kwargs[\"numeric_only\"] = numeric_only\n            if \"min_count\" not in kwargs:\n                kwargs[\"min_count\"] = min_count\n\n            self._set_group_selection()\n\n            # try a cython aggregation if we can\n            try:\n                return self._cython_agg_general(alias, alt=npfunc, **kwargs)\n            except DataError:\n                pass\n            except NotImplementedError as err:\n                if \"function is not implemented for this dtype\" in str(err):\n                    # raised in _get_cython_function, in some cases can\n                    #  be trimmed by implementing cython funcs for more dtypes\n                    pass\n                else:\n                    raise\n\n            # apply a non-cython aggregation\n            result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n            return result\n\n        set_function_name(f, name, cls)\n\n        return f\n\n    def first_compat(x, axis=0):\n        def first(x):\n            x = x.to_numpy()\n\n            x = x[notna(x)]\n            if len(x) == 0:\n                return np.nan\n            return x[0]\n\n        if isinstance(x, DataFrame):\n            return x.apply(first, axis=axis)\n        else:\n            return first(x)\n\n    def last_compat(x, axis=0):\n        def last(x):\n            x = x.to_numpy()\n            x = x[notna(x)]\n            if len(x) == 0:\n                return np.nan\n            return x[-1]\n\n        if isinstance(x, DataFrame):\n            return x.apply(last, axis=axis)\n        else:\n            return last(x)\n\n    cls.sum = groupby_function(\"sum\", \"add\", np.sum, min_count=0)\n    cls.prod = groupby_function(\"prod\", \"prod\", np.prod, min_count=0)\n    cls.min = groupby_function(\"min\", \"min\", np.min, numeric_only=False)\n    cls.max = groupby_function(\"max\", \"max\", np.max, numeric_only=False)\n    cls.first = groupby_function(\"first\", \"first\", first_compat, numeric_only=False)\n    cls.last = groupby_function(\"last\", \"last\", last_compat, numeric_only=False)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef ohlc(self) -> DataFrame:\n    \"\"\"\n    Compute sum of values, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex\n\n    Returns\n    -------\n    DataFrame\n        Open, high, low and close values within each group.\n    \"\"\"\n\n    return self._apply_to_column_groupbys(lambda x: x._cython_agg_general(\"ohlc\"))",
                "@Appender(DataFrame.describe.__doc__)\ndef describe(self, **kwargs):\n    with _group_selection_context(self):\n        result = self.apply(lambda x: x.describe(**kwargs))\n        if self.axis == 1:\n            return result.T\n        return result.unstack()",
                "def resample(self, rule, *args, **kwargs):\n    \"\"\"\n    Provide resampling when using a TimeGrouper.\n\n    Given a grouper, the function resamples it according to a string\n    \"string\" -> \"frequency\".\n\n    See the :ref:`frequency aliases <timeseries.offset_aliases>`\n    documentation for more details.\n\n    Parameters\n    ----------\n    rule : str or DateOffset\n        The offset string or object representing target grouper conversion.\n    *args, **kwargs\n        Possible arguments are `how`, `fill_method`, `limit`, `kind` and\n        `on`, and other arguments of `TimeGrouper`.\n\n    Returns\n    -------\n    Grouper\n        Return a new grouper with our resampler appended.\n\n    See Also\n    --------\n    Grouper : Specify a frequency to resample with when\n        grouping by a key.\n    DatetimeIndex.resample : Frequency conversion and resampling of\n        time series.\n\n    Examples\n    --------\n    >>> idx = pd.date_range('1/1/2000', periods=4, freq='T')\n    >>> df = pd.DataFrame(data=4 * [range(2)],\n    ...                   index=idx,\n    ...                   columns=['a', 'b'])\n    >>> df.iloc[2, 0] = 5\n    >>> df\n                        a  b\n    2000-01-01 00:00:00  0  1\n    2000-01-01 00:01:00  0  1\n    2000-01-01 00:02:00  5  1\n    2000-01-01 00:03:00  0  1\n\n    Downsample the DataFrame into 3 minute bins and sum the values of\n    the timestamps falling into a bin.\n\n    >>> df.groupby('a').resample('3T').sum()\n                             a  b\n    a\n    0   2000-01-01 00:00:00  0  2\n        2000-01-01 00:03:00  0  1\n    5   2000-01-01 00:00:00  5  1\n\n    Upsample the series into 30 second bins.\n\n    >>> df.groupby('a').resample('30S').sum()\n                        a  b\n    a\n    0   2000-01-01 00:00:00  0  1\n        2000-01-01 00:00:30  0  0\n        2000-01-01 00:01:00  0  1\n        2000-01-01 00:01:30  0  0\n        2000-01-01 00:02:00  0  0\n        2000-01-01 00:02:30  0  0\n        2000-01-01 00:03:00  0  1\n    5   2000-01-01 00:02:00  5  1\n\n    Resample by month. Values are assigned to the month of the period.\n\n    >>> df.groupby('a').resample('M').sum()\n                a  b\n    a\n    0   2000-01-31  0  3\n    5   2000-01-31  5  1\n\n    Downsample the series into 3 minute bins as above, but close the right\n    side of the bin interval.\n\n    >>> df.groupby('a').resample('3T', closed='right').sum()\n                             a  b\n    a\n    0   1999-12-31 23:57:00  0  1\n        2000-01-01 00:00:00  0  2\n    5   2000-01-01 00:00:00  5  1\n\n    Downsample the series into 3 minute bins and close the right side of\n    the bin interval, but label each bin using the right edge instead of\n    the left.\n\n    >>> df.groupby('a').resample('3T', closed='right', label='right').sum()\n                             a  b\n    a\n    0   2000-01-01 00:00:00  0  1\n        2000-01-01 00:03:00  0  2\n    5   2000-01-01 00:03:00  5  1\n\n    Add an offset of twenty seconds.\n\n    >>> df.groupby('a').resample('3T', loffset='20s').sum()\n                           a  b\n    a\n    0   2000-01-01 00:00:20  0  2\n        2000-01-01 00:03:20  0  1\n    5   2000-01-01 00:00:20  5  1\n    \"\"\"\n    from pandas.core.resample import get_resampler_for_grouping\n\n    return get_resampler_for_grouping(self, rule, *args, **kwargs)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef rolling(self, *args, **kwargs):\n    \"\"\"\n    Return a rolling grouper, providing rolling functionality per group.\n    \"\"\"\n    from pandas.core.window import RollingGroupby\n\n    return RollingGroupby(self, *args, **kwargs)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef expanding(self, *args, **kwargs):\n    \"\"\"\n    Return an expanding grouper, providing expanding\n    functionality per group.\n    \"\"\"\n    from pandas.core.window import ExpandingGroupby\n\n    return ExpandingGroupby(self, *args, **kwargs)",
                "def _fill(self, direction, limit=None):\n    \"\"\"\n    Shared function for `pad` and `backfill` to call Cython method.\n\n    Parameters\n    ----------\n    direction : {'ffill', 'bfill'}\n        Direction passed to underlying Cython function. `bfill` will cause\n        values to be filled backwards. `ffill` and any other values will\n        default to a forward fill\n    limit : int, default None\n        Maximum number of consecutive values to fill. If `None`, this\n        method will convert to -1 prior to passing to Cython\n\n    Returns\n    -------\n    `Series` or `DataFrame` with filled values\n\n    See Also\n    --------\n    pad\n    backfill\n    \"\"\"\n    # Need int value for Cython\n    if limit is None:\n        limit = -1\n\n    return self._get_cythonized_result(\n        \"group_fillna_indexer\",\n        needs_mask=True,\n        cython_dtype=np.dtype(np.int64),\n        result_is_index=True,\n        direction=direction,\n        limit=limit,\n    )",
                "@Substitution(name=\"groupby\")\ndef pad(self, limit=None):\n    \"\"\"\n    Forward fill the values.\n\n    Parameters\n    ----------\n    limit : int, optional\n        Limit of how many values to fill.\n\n    Returns\n    -------\n    Series or DataFrame\n        Object with missing values filled.\n\n    See Also\n    --------\n    Series.pad\n    DataFrame.pad\n    Series.fillna\n    DataFrame.fillna\n    \"\"\"\n    return self._fill(\"ffill\", limit=limit)",
                "@Substitution(name=\"groupby\")\ndef backfill(self, limit=None):\n    \"\"\"\n    Backward fill the values.\n\n    Parameters\n    ----------\n    limit : int, optional\n        Limit of how many values to fill.\n\n    Returns\n    -------\n    Series or DataFrame\n        Object with missing values filled.\n\n    See Also\n    --------\n    Series.backfill\n    DataFrame.backfill\n    Series.fillna\n    DataFrame.fillna\n    \"\"\"\n    return self._fill(\"bfill\", limit=limit)",
                "@Substitution(name=\"groupby\")\n@Substitution(see_also=_common_see_also)\ndef nth(self, n: Union[int, List[int]], dropna: Optional[str] = None) -> DataFrame:\n    \"\"\"\n    Take the nth row from each group if n is an int, or a subset of rows\n    if n is a list of ints.\n\n    If dropna, will take the nth non-null row, dropna is either\n    'all' or 'any'; this is equivalent to calling dropna(how=dropna)\n    before the groupby.\n\n    Parameters\n    ----------\n    n : int or list of ints\n        A single nth value for the row or a list of nth values.\n    dropna : None or str, optional\n        Apply the specified dropna operation before counting which row is\n        the nth row. Needs to be None, 'any' or 'all'.\n\n    Returns\n    -------\n    Series or DataFrame\n        N-th value within each group.\n    %(see_also)s\n    Examples\n    --------\n\n    >>> df = pd.DataFrame({'A': [1, 1, 2, 1, 2],\n    ...                    'B': [np.nan, 2, 3, 4, 5]}, columns=['A', 'B'])\n    >>> g = df.groupby('A')\n    >>> g.nth(0)\n         B\n    A\n    1  NaN\n    2  3.0\n    >>> g.nth(1)\n         B\n    A\n    1  2.0\n    2  5.0\n    >>> g.nth(-1)\n         B\n    A\n    1  4.0\n    2  5.0\n    >>> g.nth([0, 1])\n         B\n    A\n    1  NaN\n    1  2.0\n    2  3.0\n    2  5.0\n\n    Specifying `dropna` allows count ignoring ``NaN``\n\n    >>> g.nth(0, dropna='any')\n         B\n    A\n    1  2.0\n    2  3.0\n\n    NaNs denote group exhausted when using dropna\n\n    >>> g.nth(3, dropna='any')\n        B\n    A\n    1 NaN\n    2 NaN\n\n    Specifying `as_index=False` in `groupby` keeps the original index.\n\n    >>> df.groupby('A', as_index=False).nth(1)\n       A    B\n    1  1  2.0\n    4  2  5.0\n    \"\"\"\n\n    valid_containers = (set, list, tuple)\n    if not isinstance(n, (valid_containers, int)):\n        raise TypeError(\"n needs to be an int or a list/set/tuple of ints\")\n\n    if not dropna:\n\n        if isinstance(n, int):\n            nth_values = [n]\n        elif isinstance(n, valid_containers):\n            nth_values = list(set(n))\n\n        nth_array = np.array(nth_values, dtype=np.intp)\n        self._set_group_selection()\n\n        mask_left = np.in1d(self._cumcount_array(), nth_array)\n        mask_right = np.in1d(self._cumcount_array(ascending=False) + 1, -nth_array)\n        mask = mask_left | mask_right\n\n        ids, _, _ = self.grouper.group_info\n\n        # Drop NA values in grouping\n        mask = mask & (ids != -1)\n\n        out = self._selected_obj[mask]\n        if not self.as_index:\n            return out\n\n        result_index = self.grouper.result_index\n        out.index = result_index[ids[mask]]\n\n        if not self.observed and isinstance(result_index, CategoricalIndex):\n            out = out.reindex(result_index)\n\n        out = self._reindex_output(out)\n        return out.sort_index() if self.sort else out\n\n    # dropna is truthy\n    if isinstance(n, valid_containers):\n        raise ValueError(\"dropna option with a list of nth values is not supported\")\n\n    if dropna not in [\"any\", \"all\"]:\n        # Note: when agg-ing picker doesn't raise this, just returns NaN\n        raise ValueError(\n            \"For a DataFrame groupby, dropna must be \"\n            \"either None, 'any' or 'all', \"\n            f\"(was passed {dropna}).\"\n        )\n\n    # old behaviour, but with all and any support for DataFrames.\n    # modified in GH 7559 to have better perf\n    max_len = n if n >= 0 else -1 - n\n    dropped = self.obj.dropna(how=dropna, axis=self.axis)\n\n    # get a new grouper for our dropped obj\n    if self.keys is None and self.level is None:\n\n        # we don't have the grouper info available\n        # (e.g. we have selected out\n        # a column that is not in the current object)\n        axis = self.grouper.axis\n        grouper = axis[axis.isin(dropped.index)]\n\n    else:\n\n        # create a grouper with the original parameters, but on dropped\n        # object\n        from pandas.core.groupby.grouper import get_grouper\n\n        grouper, _, _ = get_grouper(\n            dropped,\n            key=self.keys,\n            axis=self.axis,\n            level=self.level,\n            sort=self.sort,\n            mutated=self.mutated,\n        )\n\n    grb = dropped.groupby(grouper, as_index=self.as_index, sort=self.sort)\n    sizes, result = grb.size(), grb.nth(n)\n    mask = (sizes < max_len).values\n\n    # set the results which don't meet the criteria\n    if len(result) and mask.any():\n        result.loc[mask] = np.nan\n\n    # reset/reindex to the original groups\n    if len(self.obj) == len(dropped) or len(result) == len(\n        self.grouper.result_index\n    ):\n        result.index = self.grouper.result_index\n    else:\n        result = result.reindex(self.grouper.result_index)\n\n    return result",
                "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n    \"\"\"\n    Return group values at the given quantile, a la numpy.percentile.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value(s) between 0 and 1 providing the quantile(s) to compute.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        Method to use when the desired quantile falls between two points.\n\n    Returns\n    -------\n    Series or DataFrame\n        Return type determined by caller of GroupBy object.\n\n    See Also\n    --------\n    Series.quantile : Similar method for Series.\n    DataFrame.quantile : Similar method for DataFrame.\n    numpy.percentile : NumPy method to compute qth percentile.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([\n    ...     ['a', 1], ['a', 2], ['a', 3],\n    ...     ['b', 1], ['b', 3], ['b', 5]\n    ... ], columns=['key', 'val'])\n    >>> df.groupby('key').quantile()\n        val\n    key\n    a    2.0\n    b    3.0\n    \"\"\"\n    from pandas import concat\n\n    def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n        if is_object_dtype(vals):\n            raise TypeError(\n                \"'quantile' cannot be performed against 'object' dtypes!\"\n            )\n\n        inference = None\n        if is_integer_dtype(vals):\n            inference = np.int64\n        elif is_datetime64_dtype(vals):\n            inference = \"datetime64[ns]\"\n            vals = vals.astype(np.float)\n\n        return vals, inference\n\n    def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n        if inference:\n            # Check for edge case\n            if not (\n                is_integer_dtype(inference)\n                and interpolation in {\"linear\", \"midpoint\"}\n            ):\n                vals = vals.astype(inference)\n\n        return vals\n\n    if is_scalar(q):\n        return self._get_cythonized_result(\n            \"group_quantile\",\n            aggregate=True,\n            needs_values=True,\n            needs_mask=True,\n            cython_dtype=np.dtype(np.float64),\n            pre_processing=pre_processor,\n            post_processing=post_processor,\n            q=q,\n            interpolation=interpolation,\n        )\n    else:\n        results = [\n            self._get_cythonized_result(\n                \"group_quantile\",\n                aggregate=True,\n                needs_values=True,\n                needs_mask=True,\n                cython_dtype=np.dtype(np.float64),\n                pre_processing=pre_processor,\n                post_processing=post_processor,\n                q=qi,\n                interpolation=interpolation,\n            )\n            for qi in q\n        ]\n        result = concat(results, axis=0, keys=q)\n        # fix levels to place quantiles on the inside\n        # TODO(GH-10710): Ideally, we could write this as\n        #  >>> result.stack(0).loc[pd.IndexSlice[:, ..., q], :]\n        #  but this hits https://github.com/pandas-dev/pandas/issues/10710\n        #  which doesn't reorder the list-like `q` on the inner level.\n        order = list(range(1, result.index.nlevels)) + [0]\n\n        # temporarily saves the index names\n        index_names = np.array(result.index.names)\n\n        # set index names to positions to avoid confusion\n        result.index.names = np.arange(len(index_names))\n\n        # place quantiles on the inside\n        result = result.reorder_levels(order)\n\n        # restore the index names in order\n        result.index.names = index_names[order]\n\n        # reorder rows to keep things sorted\n        indices = np.arange(len(result)).reshape([len(q), self.ngroups]).T.flatten()\n        return result.take(indices)",
                "@Substitution(name=\"groupby\")\ndef ngroup(self, ascending: bool = True):\n    \"\"\"\n    Number each group from 0 to the number of groups - 1.\n\n    This is the enumerative complement of cumcount.  Note that the\n    numbers given to the groups match the order in which the groups\n    would be seen when iterating over the groupby object, not the\n    order they are first observed.\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        If False, number in reverse, from number of group - 1 to 0.\n\n    Returns\n    -------\n    Series\n        Unique numbers for each group.\n\n    See Also\n    --------\n    .cumcount : Number the rows in each group.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame({\"A\": list(\"aaabba\")})\n    >>> df\n       A\n    0  a\n    1  a\n    2  a\n    3  b\n    4  b\n    5  a\n    >>> df.groupby('A').ngroup()\n    0    0\n    1    0\n    2    0\n    3    1\n    4    1\n    5    0\n    dtype: int64\n    >>> df.groupby('A').ngroup(ascending=False)\n    0    1\n    1    1\n    2    1\n    3    0\n    4    0\n    5    1\n    dtype: int64\n    >>> df.groupby([\"A\", [1,1,2,3,2,1]]).ngroup()\n    0    0\n    1    0\n    2    1\n    3    3\n    4    2\n    5    0\n    dtype: int64\n    \"\"\"\n\n    with _group_selection_context(self):\n        index = self._selected_obj.index\n        result = Series(self.grouper.group_info[0], index)\n        if not ascending:\n            result = self.ngroups - 1 - result\n        return result",
                "@Substitution(name=\"groupby\")\ndef cumcount(self, ascending: bool = True):\n    \"\"\"\n    Number each item in each group from 0 to the length of that group - 1.\n\n    Essentially this is equivalent to\n\n    >>> self.apply(lambda x: pd.Series(np.arange(len(x)), x.index))\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        If False, number in reverse, from length of group - 1 to 0.\n\n    Returns\n    -------\n    Series\n        Sequence number of each element within each group.\n\n    See Also\n    --------\n    .ngroup : Number the groups themselves.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([['a'], ['a'], ['a'], ['b'], ['b'], ['a']],\n    ...                   columns=['A'])\n    >>> df\n       A\n    0  a\n    1  a\n    2  a\n    3  b\n    4  b\n    5  a\n    >>> df.groupby('A').cumcount()\n    0    0\n    1    1\n    2    2\n    3    0\n    4    1\n    5    3\n    dtype: int64\n    >>> df.groupby('A').cumcount(ascending=False)\n    0    3\n    1    2\n    2    1\n    3    1\n    4    0\n    5    0\n    dtype: int64\n    \"\"\"\n\n    with _group_selection_context(self):\n        index = self._selected_obj.index\n        cumcounts = self._cumcount_array(ascending=ascending)\n        return Series(cumcounts, index)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef rank(\n    self,\n    method: str = \"average\",\n    ascending: bool = True,\n    na_option: str = \"keep\",\n    pct: bool = False,\n    axis: int = 0,\n):\n    \"\"\"\n    Provide the rank of values within each group.\n\n    Parameters\n    ----------\n    method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n        * average: average rank of group\n        * min: lowest rank in group\n        * max: highest rank in group\n        * first: ranks assigned in order they appear in the array\n        * dense: like 'min', but rank always increases by 1 between groups\n    ascending : bool, default True\n        False for ranks by high (1) to low (N).\n    na_option : {'keep', 'top', 'bottom'}, default 'keep'\n        * keep: leave NA values where they are\n        * top: smallest rank if ascending\n        * bottom: smallest rank if descending\n    pct : bool, default False\n        Compute percentage rank of data within each group.\n    axis : int, default 0\n        The axis of the object over which to compute the rank.\n\n    Returns\n    -------\n    DataFrame with ranking of values within each group\n    \"\"\"\n    if na_option not in {\"keep\", \"top\", \"bottom\"}:\n        msg = \"na_option must be one of 'keep', 'top', or 'bottom'\"\n        raise ValueError(msg)\n    return self._cython_transform(\n        \"rank\",\n        numeric_only=False,\n        ties_method=method,\n        ascending=ascending,\n        na_option=na_option,\n        pct=pct,\n        axis=axis,\n    )",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef cumprod(self, axis=0, *args, **kwargs):\n    \"\"\"\n    Cumulative product for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    nv.validate_groupby_func(\"cumprod\", args, kwargs, [\"numeric_only\", \"skipna\"])\n    if axis != 0:\n        return self.apply(lambda x: x.cumprod(axis=axis, **kwargs))\n\n    return self._cython_transform(\"cumprod\", **kwargs)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef cumsum(self, axis=0, *args, **kwargs):\n    \"\"\"\n    Cumulative sum for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    nv.validate_groupby_func(\"cumsum\", args, kwargs, [\"numeric_only\", \"skipna\"])\n    if axis != 0:\n        return self.apply(lambda x: x.cumsum(axis=axis, **kwargs))\n\n    return self._cython_transform(\"cumsum\", **kwargs)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef cummin(self, axis=0, **kwargs):\n    \"\"\"\n    Cumulative min for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    if axis != 0:\n        return self.apply(lambda x: np.minimum.accumulate(x, axis))\n\n    return self._cython_transform(\"cummin\", numeric_only=False)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef cummax(self, axis=0, **kwargs):\n    \"\"\"\n    Cumulative max for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    if axis != 0:\n        return self.apply(lambda x: np.maximum.accumulate(x, axis))\n\n    return self._cython_transform(\"cummax\", numeric_only=False)",
                "def _get_cythonized_result(\n    self,\n    how: str,\n    cython_dtype: np.dtype,\n    aggregate: bool = False,\n    needs_values: bool = False,\n    needs_mask: bool = False,\n    needs_ngroups: bool = False,\n    result_is_index: bool = False,\n    pre_processing=None,\n    post_processing=None,\n    **kwargs,\n):\n    \"\"\"\n    Get result for Cythonized functions.\n\n    Parameters\n    ----------\n    how : str, Cythonized function name to be called\n    cython_dtype : np.dtype\n        Type of the array that will be modified by the Cython call.\n    aggregate : bool, default False\n        Whether the result should be aggregated to match the number of\n        groups\n    needs_values : bool, default False\n        Whether the values should be a part of the Cython call\n        signature\n    needs_mask : bool, default False\n        Whether boolean mask needs to be part of the Cython call\n        signature\n    needs_ngroups : bool, default False\n        Whether number of groups is part of the Cython call signature\n    result_is_index : bool, default False\n        Whether the result of the Cython operation is an index of\n        values to be retrieved, instead of the actual values themselves\n    pre_processing : function, default None\n        Function to be applied to `values` prior to passing to Cython.\n        Function should return a tuple where the first element is the\n        values to be passed to Cython and the second element is an optional\n        type which the values should be converted to after being returned\n        by the Cython operation. Raises if `needs_values` is False.\n    post_processing : function, default None\n        Function to be applied to result of Cython function. Should accept\n        an array of values as the first argument and type inferences as its\n        second argument, i.e. the signature should be\n        (ndarray, Type).\n    **kwargs : dict\n        Extra arguments to be passed back to Cython funcs\n\n    Returns\n    -------\n    `Series` or `DataFrame`  with filled values\n    \"\"\"\n    if result_is_index and aggregate:\n        raise ValueError(\"'result_is_index' and 'aggregate' cannot both be True!\")\n    if post_processing:\n        if not callable(pre_processing):\n            raise ValueError(\"'post_processing' must be a callable!\")\n    if pre_processing:\n        if not callable(pre_processing):\n            raise ValueError(\"'pre_processing' must be a callable!\")\n        if not needs_values:\n            raise ValueError(\n                \"Cannot use 'pre_processing' without specifying 'needs_values'!\"\n            )\n\n    grouper = self.grouper\n\n    labels, _, ngroups = grouper.group_info\n    output: Dict[base.OutputKey, np.ndarray] = {}\n    base_func = getattr(libgroupby, how)\n\n    for idx, obj in enumerate(self._iterate_slices()):\n        name = obj.name\n        values = obj._data._values\n\n        if aggregate:\n            result_sz = ngroups\n        else:\n            result_sz = len(values)\n\n        result = np.zeros(result_sz, dtype=cython_dtype)\n        func = partial(base_func, result, labels)\n        inferences = None\n\n        if needs_values:\n            vals = values\n            if pre_processing:\n                vals, inferences = pre_processing(vals)\n            func = partial(func, vals)\n\n        if needs_mask:\n            mask = isna(values).view(np.uint8)\n            func = partial(func, mask)\n\n        if needs_ngroups:\n            func = partial(func, ngroups)\n\n        func(**kwargs)  # Call func to modify indexer values in place\n\n        if result_is_index:\n            result = algorithms.take_nd(values, result)\n\n        if post_processing:\n            result = post_processing(result, inferences)\n\n        key = base.OutputKey(label=name, position=idx)\n        output[key] = result\n\n    if aggregate:\n        return self._wrap_aggregated_output(output)\n    else:\n        return self._wrap_transformed_output(output)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef shift(self, periods=1, freq=None, axis=0, fill_value=None):\n    \"\"\"\n    Shift each group by periods observations.\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Number of periods to shift.\n    freq : frequency string\n    axis : axis to shift, default 0\n    fill_value : optional\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series or DataFrame\n        Object shifted within each group.\n    \"\"\"\n\n    if freq is not None or axis != 0 or not isna(fill_value):\n        return self.apply(lambda x: x.shift(periods, freq, axis, fill_value))\n\n    return self._get_cythonized_result(\n        \"group_shift_indexer\",\n        cython_dtype=np.dtype(np.int64),\n        needs_ngroups=True,\n        result_is_index=True,\n        periods=periods,\n    )",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None, axis=0):\n    \"\"\"\n    Calculate pct_change of each value to previous entry in group.\n\n    Returns\n    -------\n    Series or DataFrame\n        Percentage changes within each group.\n    \"\"\"\n    if freq is not None or axis != 0:\n        return self.apply(\n            lambda x: x.pct_change(\n                periods=periods,\n                fill_method=fill_method,\n                limit=limit,\n                freq=freq,\n                axis=axis,\n            )\n        )\n    filled = getattr(self, fill_method)(limit=limit)\n    fill_grp = filled.groupby(self.grouper.codes)\n    shifted = fill_grp.shift(periods=periods, freq=freq)\n    return (filled / shifted) - 1",
                "@Substitution(name=\"groupby\")\n@Substitution(see_also=_common_see_also)\ndef head(self, n=5):\n    \"\"\"\n    Return first n rows of each group.\n\n    Similar to ``.apply(lambda x: x.head(n))``, but it returns a subset of rows\n    from the original DataFrame with original index and order preserved\n    (``as_index`` flag is ignored).\n\n    Does not work for negative values of `n`.\n\n    Returns\n    -------\n    Series or DataFrame\n    %(see_also)s\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([[1, 2], [1, 4], [5, 6]],\n    ...                   columns=['A', 'B'])\n    >>> df.groupby('A').head(1)\n       A  B\n    0  1  2\n    2  5  6\n    >>> df.groupby('A').head(-1)\n    Empty DataFrame\n    Columns: [A, B]\n    Index: []\n    \"\"\"\n    self._reset_group_selection()\n    mask = self._cumcount_array() < n\n    return self._selected_obj[mask]",
                "@Substitution(name=\"groupby\")\n@Substitution(see_also=_common_see_also)\ndef tail(self, n=5):\n    \"\"\"\n    Return last n rows of each group.\n\n    Similar to ``.apply(lambda x: x.tail(n))``, but it returns a subset of rows\n    from the original DataFrame with original index and order preserved\n    (``as_index`` flag is ignored).\n\n    Does not work for negative values of `n`.\n\n    Returns\n    -------\n    Series or DataFrame\n    %(see_also)s\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([['a', 1], ['a', 2], ['b', 1], ['b', 2]],\n    ...                   columns=['A', 'B'])\n    >>> df.groupby('A').tail(1)\n       A  B\n    1  a  2\n    3  b  2\n    >>> df.groupby('A').tail(-1)\n    Empty DataFrame\n    Columns: [A, B]\n    Index: []\n    \"\"\"\n    self._reset_group_selection()\n    mask = self._cumcount_array(ascending=False) < n\n    return self._selected_obj[mask]",
                "def _reindex_output(\n    self, output: FrameOrSeries, fill_value: Scalar = np.NaN\n) -> FrameOrSeries:\n    \"\"\"\n    If we have categorical groupers, then we might want to make sure that\n    we have a fully re-indexed output to the levels. This means expanding\n    the output space to accommodate all values in the cartesian product of\n    our groups, regardless of whether they were observed in the data or\n    not. This will expand the output space if there are missing groups.\n\n    The method returns early without modifying the input if the number of\n    groupings is less than 2, self.observed == True or none of the groupers\n    are categorical.\n\n    Parameters\n    ----------\n    output : Series or DataFrame\n        Object resulting from grouping and applying an operation.\n    fill_value : scalar, default np.NaN\n        Value to use for unobserved categories if self.observed is False.\n\n    Returns\n    -------\n    Series or DataFrame\n        Object (potentially) re-indexed to include all possible groups.\n    \"\"\"\n    groupings = self.grouper.groupings\n    if groupings is None:\n        return output\n    elif len(groupings) == 1:\n        return output\n\n    # if we only care about the observed values\n    # we are done\n    elif self.observed:\n        return output\n\n    # reindexing only applies to a Categorical grouper\n    elif not any(\n        isinstance(ping.grouper, (Categorical, CategoricalIndex))\n        for ping in groupings\n    ):\n        return output\n\n    levels_list = [ping.group_index for ping in groupings]\n    index, _ = MultiIndex.from_product(\n        levels_list, names=self.grouper.names\n    ).sortlevel()\n\n    if self.as_index:\n        d = {\n            self.obj._get_axis_name(self.axis): index,\n            \"copy\": False,\n            \"fill_value\": fill_value,\n        }\n        return output.reindex(**d)\n\n    # GH 13204\n    # Here, the categorical in-axis groupers, which need to be fully\n    # expanded, are columns in `output`. An idea is to do:\n    # output = output.set_index(self.grouper.names)\n    #                .reindex(index).reset_index()\n    # but special care has to be taken because of possible not-in-axis\n    # groupers.\n    # So, we manually select and drop the in-axis grouper columns,\n    # reindex `output`, and then reset the in-axis grouper columns.\n\n    # Select in-axis groupers\n    in_axis_grps = (\n        (i, ping.name) for (i, ping) in enumerate(groupings) if ping.in_axis\n    )\n    g_nums, g_names = zip(*in_axis_grps)\n\n    output = output.drop(labels=list(g_names), axis=1)\n\n    # Set a temp index and reindex (possibly expanding)\n    output = output.set_index(self.grouper.result_index).reindex(\n        index, copy=False, fill_value=fill_value\n    )\n\n    # Reset in-axis grouper columns\n    # (using level numbers `g_nums` because level names may not be unique)\n    output = output.reset_index(level=g_nums)\n\n    return output.reset_index(drop=True)",
                "def f(self):\n    return self.plot(*args, **kwargs)",
                "def attr(*args, **kwargs):\n    def f(self):\n        return getattr(self.plot, name)(*args, **kwargs)\n\n    return self._groupby.apply(f)",
                "def get_converter(s):\n    # possibly convert to the actual key types\n    # in the indices, could be a Timestamp or a np.datetime64\n    if isinstance(s, datetime.datetime):\n        return lambda key: Timestamp(key)\n    elif isinstance(s, np.datetime64):\n        return lambda key: Timestamp(key).asm8\n    else:\n        return lambda key: key",
                "def wrapper(*args, **kwargs):\n    # a little trickery for aggregation functions that need an axis\n    # argument\n    if \"axis\" in sig.parameters:\n        if kwargs.get(\"axis\", None) is None:\n            kwargs[\"axis\"] = self.axis\n\n    def curried(x):\n        return f(x, *args, **kwargs)\n\n    # preserve the name so we can detect it when calling plot methods,\n    # to avoid duplicates\n    curried.__name__ = name\n\n    # special case otherwise extra plots are created when catching the\n    # exception below\n    if name in base.plotting_methods:\n        return self.apply(curried)\n\n    try:\n        return self.apply(curried)\n    except TypeError as err:\n        if not re.search(\n            \"reduction operation '.*' not allowed for this dtype\", str(err)\n        ):\n            # We don't have a cython implementation\n            # TODO: is the above comment accurate?\n            raise\n\n    if self.obj.ndim == 1:\n        # this can be called recursively, so need to raise ValueError\n        raise ValueError\n\n    # GH#3688 try to operate item-by-item\n    result = self._aggregate_item_by_item(name, *args, **kwargs)\n    return result",
                "def reset_identity(values):\n    # reset the identities of the components\n    # of the values to prevent aliasing\n    for v in com.not_none(*values):\n        ax = v._get_axis(self.axis)\n        ax._reset_identity()\n    return values",
                "def objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]:\n    if is_object_dtype(vals):\n        vals = np.array([bool(x) for x in vals])\n    else:\n        vals = vals.astype(np.bool)\n\n    return vals.view(np.uint8), np.bool",
                "def result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray:\n    return result.astype(inference, copy=False)",
                "def groupby_function(\n    name: str,\n    alias: str,\n    npfunc,\n    numeric_only: bool = True,\n    min_count: int = -1,\n):\n\n    _local_template = \"\"\"\n    Compute %(f)s of group values.\n\n    Returns\n    -------\n    Series or DataFrame\n        Computed %(f)s of values within each group.\n    \"\"\"\n\n    @Substitution(name=\"groupby\", f=name)\n    @Appender(_common_see_also)\n    @Appender(_local_template)\n    def f(self, **kwargs):\n        if \"numeric_only\" not in kwargs:\n            kwargs[\"numeric_only\"] = numeric_only\n        if \"min_count\" not in kwargs:\n            kwargs[\"min_count\"] = min_count\n\n        self._set_group_selection()\n\n        # try a cython aggregation if we can\n        try:\n            return self._cython_agg_general(alias, alt=npfunc, **kwargs)\n        except DataError:\n            pass\n        except NotImplementedError as err:\n            if \"function is not implemented for this dtype\" in str(err):\n                # raised in _get_cython_function, in some cases can\n                #  be trimmed by implementing cython funcs for more dtypes\n                pass\n            else:\n                raise\n\n        # apply a non-cython aggregation\n        result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n        return result\n\n    set_function_name(f, name, cls)\n\n    return f",
                "def first_compat(x, axis=0):\n    def first(x):\n        x = x.to_numpy()\n\n        x = x[notna(x)]\n        if len(x) == 0:\n            return np.nan\n        return x[0]\n\n    if isinstance(x, DataFrame):\n        return x.apply(first, axis=axis)\n    else:\n        return first(x)",
                "def last_compat(x, axis=0):\n    def last(x):\n        x = x.to_numpy()\n        x = x[notna(x)]\n        if len(x) == 0:\n            return np.nan\n        return x[-1]\n\n    if isinstance(x, DataFrame):\n        return x.apply(last, axis=axis)\n    else:\n        return last(x)",
                "def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n    if is_object_dtype(vals):\n        raise TypeError(\n            \"'quantile' cannot be performed against 'object' dtypes!\"\n        )\n\n    inference = None\n    if is_integer_dtype(vals):\n        inference = np.int64\n    elif is_datetime64_dtype(vals):\n        inference = \"datetime64[ns]\"\n        vals = vals.astype(np.float)\n\n    return vals, inference",
                "def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n    if inference:\n        # Check for edge case\n        if not (\n            is_integer_dtype(inference)\n            and interpolation in {\"linear\", \"midpoint\"}\n        ):\n            vals = vals.astype(inference)\n\n    return vals",
                "def f(self):\n    return getattr(self.plot, name)(*args, **kwargs)",
                "def curried(x):\n    return f(x, *args, **kwargs)",
                "@Substitution(name=\"groupby\", f=name)\n@Appender(_common_see_also)\n@Appender(_local_template)\ndef f(self, **kwargs):\n    if \"numeric_only\" not in kwargs:\n        kwargs[\"numeric_only\"] = numeric_only\n    if \"min_count\" not in kwargs:\n        kwargs[\"min_count\"] = min_count\n\n    self._set_group_selection()\n\n    # try a cython aggregation if we can\n    try:\n        return self._cython_agg_general(alias, alt=npfunc, **kwargs)\n    except DataError:\n        pass\n    except NotImplementedError as err:\n        if \"function is not implemented for this dtype\" in str(err):\n            # raised in _get_cython_function, in some cases can\n            #  be trimmed by implementing cython funcs for more dtypes\n            pass\n        else:\n            raise\n\n    # apply a non-cython aggregation\n    result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n    return result",
                "def first(x):\n    x = x.to_numpy()\n\n    x = x[notna(x)]\n    if len(x) == 0:\n        return np.nan\n    return x[0]",
                "def last(x):\n    x = x.to_numpy()\n    x = x[notna(x)]\n    if len(x) == 0:\n        return np.nan\n    return x[-1]",
                "@wraps(func)\ndef f(g):\n    with np.errstate(all=\"ignore\"):\n        return func(g, *args, **kwargs)"
            ],
            "inscope_function_signatures": [
                "_group_selection_context(groupby)",
                "get_groupby(obj: NDFrame, by: Optional[_KeysArgType]=None, axis: int=0, level=None, grouper: 'Optional[ops.BaseGrouper]'=None, exclusions=None, selection=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False, mutated: bool=False) -> GroupBy",
                "__init__(self, groupby)",
                "__call__(self, *args, **kwargs)",
                "__getattr__(self, name: str)",
                "__init__(self, obj: NDFrame, keys: Optional[_KeysArgType]=None, axis: int=0, level=None, grouper: 'Optional[ops.BaseGrouper]'=None, exclusions=None, selection=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False, mutated: bool=False)",
                "__len__(self) -> int",
                "__repr__(self) -> str",
                "_assure_grouper(self)",
                "groups(self)",
                "ngroups(self)",
                "indices(self)",
                "_get_indices(self, names)",
                "_get_index(self, name)",
                "_selected_obj(self)",
                "_reset_group_selection(self)",
                "_set_group_selection(self)",
                "_set_result_index_ordered(self, result)",
                "_dir_additions(self)",
                "__getattr__(self, attr: str)",
                "pipe(self, func, *args, **kwargs)",
                "_make_wrapper(self, name)",
                "get_group(self, name, obj=None)",
                "__iter__(self)",
                "apply(self, func, *args, **kwargs)",
                "_python_apply_general(self, f)",
                "_iterate_slices(self) -> Iterable[Series]",
                "transform(self, func, *args, **kwargs)",
                "_cumcount_array(self, ascending: bool=True)",
                "_try_cast(self, result, obj, numeric_only: bool=False)",
                "_transform_should_cast(self, func_nm: str) -> bool",
                "_cython_transform(self, how: str, numeric_only: bool=True, **kwargs)",
                "_wrap_aggregated_output(self, output: Mapping[base.OutputKey, np.ndarray])",
                "_wrap_transformed_output(self, output: Mapping[base.OutputKey, np.ndarray])",
                "_wrap_applied_output(self, keys, values, not_indexed_same: bool=False)",
                "_cython_agg_general(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1)",
                "_python_agg_general(self, func, *args, **kwargs)",
                "_concat_objects(self, keys, values, not_indexed_same: bool=False)",
                "_apply_filter(self, indices, dropna)",
                "_bool_agg(self, val_test, skipna)",
                "any(self, skipna: bool=True)",
                "all(self, skipna: bool=True)",
                "count(self)",
                "mean(self, *args, **kwargs)",
                "median(self, **kwargs)",
                "std(self, ddof: int=1, *args, **kwargs)",
                "var(self, ddof: int=1, *args, **kwargs)",
                "sem(self, ddof: int=1)",
                "size(self)",
                "_add_numeric_operations(cls)",
                "ohlc(self) -> DataFrame",
                "describe(self, **kwargs)",
                "resample(self, rule, *args, **kwargs)",
                "rolling(self, *args, **kwargs)",
                "expanding(self, *args, **kwargs)",
                "_fill(self, direction, limit=None)",
                "pad(self, limit=None)",
                "backfill(self, limit=None)",
                "nth(self, n: Union[int, List[int]], dropna: Optional[str]=None) -> DataFrame",
                "quantile(self, q=0.5, interpolation: str='linear')",
                "ngroup(self, ascending: bool=True)",
                "cumcount(self, ascending: bool=True)",
                "rank(self, method: str='average', ascending: bool=True, na_option: str='keep', pct: bool=False, axis: int=0)",
                "cumprod(self, axis=0, *args, **kwargs)",
                "cumsum(self, axis=0, *args, **kwargs)",
                "cummin(self, axis=0, **kwargs)",
                "cummax(self, axis=0, **kwargs)",
                "_get_cythonized_result(self, how: str, cython_dtype: np.dtype, aggregate: bool=False, needs_values: bool=False, needs_mask: bool=False, needs_ngroups: bool=False, result_is_index: bool=False, pre_processing=None, post_processing=None, **kwargs)",
                "shift(self, periods=1, freq=None, axis=0, fill_value=None)",
                "pct_change(self, periods=1, fill_method='pad', limit=None, freq=None, axis=0)",
                "head(self, n=5)",
                "tail(self, n=5)",
                "_reindex_output(self, output: FrameOrSeries, fill_value: Scalar=np.NaN) -> FrameOrSeries",
                "f(self)",
                "attr(*args, **kwargs)",
                "get_converter(s)",
                "wrapper(*args, **kwargs)",
                "reset_identity(values)",
                "objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]",
                "result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray",
                "groupby_function(name: str, alias: str, npfunc, numeric_only: bool=True, min_count: int=-1)",
                "first_compat(x, axis=0)",
                "last_compat(x, axis=0)",
                "pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]",
                "post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray",
                "f(self)",
                "curried(x)",
                "f(self, **kwargs)",
                "first(x)",
                "last(x)",
                "f(g)"
            ],
            "variables_in_file": {
                "_common_see_also": [
                    1154,
                    2183,
                    2312,
                    1674,
                    1171,
                    1431,
                    1305,
                    1565,
                    1186,
                    1575,
                    2087,
                    2345,
                    1325,
                    66,
                    2371,
                    1235,
                    1365,
                    2136,
                    2405,
                    1254,
                    2152,
                    1137,
                    2168,
                    1277
                ],
                "_apply_docs": [
                    73,
                    702,
                    703
                ],
                "dict": [
                    73
                ],
                "_pipe_template": [
                    192,
                    604
                ],
                "_transform_template": [
                    246
                ],
                "PandasObject": [
                    313,
                    357
                ],
                "self._groupby": [
                    333,
                    326,
                    319
                ],
                "self": [
                    512,
                    513,
                    514,
                    515,
                    517,
                    1029,
                    1031,
                    1035,
                    1036,
                    526,
                    528,
                    529,
                    1562,
                    539,
                    541,
                    543,
                    544,
                    2081,
                    2082,
                    2083,
                    548,
                    1572,
                    553,
                    554,
                    1583,
                    562,
                    563,
                    564,
                    565,
                    567,
                    571,
                    574,
                    575,
                    576,
                    577,
                    580,
                    1612,
                    2125,
                    606,
                    611,
                    1124,
                    613,
                    2147,
                    2149,
                    617,
                    619,
                    1643,
                    621,
                    2163,
                    629,
                    2165,
                    1151,
                    641,
                    2178,
                    644,
                    1669,
                    2180,
                    653,
                    1168,
                    2193,
                    658,
                    2195,
                    682,
                    684,
                    688,
                    699,
                    708,
                    1230,
                    2263,
                    2269,
                    735,
                    1247,
                    1762,
                    1764,
                    1765,
                    1768,
                    745,
                    746,
                    1773,
                    1774,
                    751,
                    753,
                    754,
                    1777,
                    1780,
                    758,
                    1783,
                    1784,
                    761,
                    1274,
                    2307,
                    2309,
                    775,
                    1801,
                    1804,
                    1296,
                    1809,
                    1301,
                    1302,
                    1820,
                    1821,
                    1822,
                    1823,
                    1824,
                    2334,
                    2336,
                    1827,
                    1322,
                    1836,
                    1837,
                    1839,
                    1841,
                    2356,
                    1335,
                    1337,
                    1338,
                    1339,
                    2365,
                    2366,
                    319,
                    323,
                    836,
                    326,
                    842,
                    331,
                    333,
                    849,
                    853,
                    854,
                    1373,
                    862,
                    2400,
                    865,
                    1377,
                    2401,
                    868,
                    2402,
                    871,
                    1389,
                    882,
                    1908,
                    888,
                    378,
                    383,
                    897,
                    1921,
                    2434,
                    2435,
                    2436,
                    902,
                    391,
                    392,
                    393,
                    394,
                    395,
                    396,
                    397,
                    908,
                    911,
                    917,
                    919,
                    409,
                    412,
                    413,
                    414,
                    415,
                    2464,
                    418,
                    1955,
                    1444,
                    422,
                    935,
                    1448,
                    1449,
                    938,
                    1450,
                    2472,
                    941,
                    943,
                    436,
                    437,
                    2484,
                    2487,
                    441,
                    442,
                    953,
                    955,
                    2489,
                    449,
                    450,
                    964,
                    969,
                    970,
                    2514,
                    471,
                    472,
                    985,
                    987,
                    989,
                    992,
                    484,
                    996,
                    997,
                    2020,
                    2021,
                    1001,
                    2022,
                    2024,
                    500,
                    1012,
                    1015,
                    1017,
                    506,
                    1019
                ],
                "groupby": [
                    344,
                    345,
                    343,
                    319
                ],
                "self.plot": [
                    331,
                    323
                ],
                "args": [
                    2145,
                    323,
                    1572,
                    713,
                    331,
                    1229,
                    1294,
                    719,
                    912,
                    1583,
                    658,
                    2161,
                    632,
                    1273,
                    1562,
                    606
                ],
                "kwargs": [
                    1294,
                    912,
                    1297,
                    658,
                    1300,
                    1562,
                    1572,
                    1449,
                    1583,
                    323,
                    713,
                    331,
                    1229,
                    719,
                    1231,
                    849,
                    1368,
                    1369,
                    1370,
                    1371,
                    606,
                    1249,
                    1250,
                    1377,
                    2145,
                    2147,
                    2149,
                    2161,
                    2163,
                    628,
                    629,
                    2165,
                    2295,
                    632,
                    1273,
                    1274
                ],
                "f.__name__": [
                    325
                ],
                "f": [
                    912,
                    1300,
                    1302,
                    935,
                    941,
                    325,
                    326,
                    333,
                    723,
                    730,
                    735,
                    617,
                    618,
                    746,
                    621,
                    494,
                    622,
                    751,
                    1392,
                    1394,
                    632
                ],
                "self._groupby.apply": [
                    333,
                    326
                ],
                "str": [
                    420,
                    1348,
                    1349,
                    647,
                    328,
                    359,
                    840,
                    874,
                    1381,
                    1675,
                    2090,
                    2092,
                    1845,
                    2199,
                    824,
                    573
                ],
                "getattr": [
                    617,
                    619,
                    331,
                    621,
                    723,
                    2267,
                    2365,
                    542
                ],
                "name": [
                    640,
                    901,
                    658,
                    661,
                    918,
                    937,
                    684,
                    686,
                    331,
                    843,
                    1364,
                    856,
                    2270,
                    611,
                    484,
                    617,
                    619,
                    621,
                    494,
                    1392,
                    498,
                    883,
                    500,
                    506,
                    636,
                    2303
                ],
                "attr": [
                    576,
                    577,
                    580,
                    335,
                    574,
                    575
                ],
                "groupby._set_group_selection": [
                    343
                ],
                "groupby._reset_group_selection": [
                    345
                ],
                "contextmanager": [
                    338
                ],
                "_KeysArgType": [
                    364,
                    2531,
                    348
                ],
                "Union": [
                    876,
                    1675,
                    348
                ],
                "Hashable": [
                    352,
                    353,
                    349,
                    350,
                    351
                ],
                "List": [
                    352,
                    1675,
                    350
                ],
                "Callable": [
                    352,
                    351
                ],
                "Mapping": [
                    864,
                    353,
                    867
                ],
                "SelectionMixin": [
                    357
                ],
                "_group_selection": [
                    358
                ],
                "_apply_whitelist": [
                    359
                ],
                "FrozenSet": [
                    359
                ],
                "frozenset": [
                    359
                ],
                "NDFrame": [
                    2530,
                    363,
                    380
                ],
                "Optional": [
                    2531,
                    1896,
                    1675,
                    364,
                    1881
                ],
                "int": [
                    417,
                    2532,
                    1255,
                    1352,
                    1033,
                    874,
                    1675,
                    365,
                    2094,
                    1751,
                    1306,
                    1756,
                    1278
                ],
                "bool": [
                    1155,
                    1031,
                    2201,
                    2202,
                    795,
                    2203,
                    2204,
                    2205,
                    1959,
                    2091,
                    2093,
                    824,
                    957,
                    1351,
                    840,
                    1115,
                    870,
                    2537,
                    874,
                    2538,
                    2028,
                    2539,
                    2540,
                    2541,
                    2542,
                    370,
                    371,
                    372,
                    373,
                    374,
                    375,
                    1138,
                    763
                ],
                "self._selection": [
                    512,
                    378,
                    517
                ],
                "selection": [
                    378,
                    2564
                ],
                "isinstance": [
                    512,
                    386,
                    1418,
                    2477,
                    1337,
                    972,
                    461,
                    463,
                    981,
                    1751,
                    1756,
                    477,
                    1758,
                    478,
                    618,
                    2546,
                    1780,
                    2550,
                    1017,
                    1787,
                    380,
                    1405
                ],
                "obj": [
                    897,
                    386,
                    902,
                    402,
                    403,
                    917,
                    918,
                    412,
                    413,
                    925,
                    804,
                    805,
                    807,
                    935,
                    681,
                    682,
                    938,
                    688,
                    842,
                    843,
                    844,
                    849,
                    854,
                    2269,
                    2270,
                    2271,
                    882,
                    883,
                    884,
                    2546,
                    2550,
                    889,
                    2555,
                    380,
                    381,
                    2558
                ],
                "type": [
                    380,
                    621,
                    580
                ],
                "obj._consolidate_inplace": [
                    381
                ],
                "self.level": [
                    1804,
                    1822,
                    383
                ],
                "level": [
                    2561,
                    406,
                    383
                ],
                "as_index": [
                    385,
                    2565,
                    391
                ],
                "DataFrame": [
                    386,
                    1446,
                    1418,
                    1675,
                    2550,
                    1432,
                    1405
                ],
                "TypeError": [
                    736,
                    387,
                    645,
                    2555,
                    1752,
                    1883,
                    926
                ],
                "axis": [
                    2560,
                    2177,
                    2178,
                    388,
                    1419,
                    2192,
                    1809,
                    1810,
                    2193,
                    405,
                    2333,
                    413,
                    2334,
                    2355,
                    2362,
                    2132,
                    1249,
                    2146,
                    2147,
                    2162,
                    2163,
                    1406
                ],
                "ValueError": [
                    480,
                    1792,
                    389,
                    491,
                    2124,
                    2251,
                    2254,
                    655,
                    2257,
                    2259,
                    726,
                    1788
                ],
                "self.as_index": [
                    992,
                    1827,
                    391,
                    1774,
                    2487,
                    541
                ],
                "self.keys": [
                    392,
                    1804,
                    1820
                ],
                "keys": [
                    995,
                    392,
                    751,
                    754,
                    1011,
                    404,
                    1012
                ],
                "self.sort": [
                    1784,
                    393,
                    1827,
                    1823
                ],
                "sort": [
                    393,
                    2566,
                    407
                ],
                "self.group_keys": [
                    394,
                    989
                ],
                "group_keys": [
                    1002,
                    394,
                    995,
                    2567
                ],
                "self.squeeze": [
                    395
                ],
                "squeeze": [
                    2568,
                    395
                ],
                "self.observed": [
                    2472,
                    396,
                    1780
                ],
                "observed": [
                    408,
                    2569,
                    396
                ],
                "self.mutated": [
                    1824,
                    409,
                    754,
                    397
                ],
                "mutated": [
                    754,
                    2570,
                    397,
                    751
                ],
                "grouper": [
                    2562,
                    1827,
                    399,
                    402,
                    1810,
                    2263,
                    2265,
                    1818,
                    414
                ],
                "exclusions": [
                    402,
                    2563,
                    415
                ],
                "get_grouper": [
                    402,
                    1818
                ],
                "self.obj": [
                    512,
                    576,
                    514,
                    515,
                    548,
                    517,
                    1801,
                    2489,
                    1836,
                    653,
                    567,
                    1337,
                    1338,
                    571,
                    412,
                    699,
                    543
                ],
                "self.axis": [
                    1029,
                    1801,
                    413,
                    1821,
                    1450,
                    688,
                    564,
                    565,
                    567,
                    2489,
                    699,
                    964,
                    969,
                    970,
                    985,
                    987,
                    1001,
                    1389,
                    751,
                    1012,
                    629,
                    1015
                ],
                "obj._get_axis_number": [
                    413
                ],
                "self.grouper": [
                    775,
                    1809,
                    919,
                    539,
                    414,
                    2464,
                    935,
                    1837,
                    943,
                    1839,
                    1841,
                    562,
                    563,
                    2484,
                    437,
                    1335,
                    442,
                    699,
                    2366,
                    450,
                    849,
                    2514,
                    2263,
                    996,
                    997,
                    2022,
                    1768,
                    751,
                    1777,
                    888
                ],
                "self.exclusions": [
                    415
                ],
                "set": [
                    1759,
                    1750,
                    415
                ],
                "len": [
                    1024,
                    1414,
                    1031,
                    777,
                    905,
                    1946,
                    418,
                    1955,
                    2467,
                    551,
                    1832,
                    940,
                    685,
                    1836,
                    468,
                    471,
                    859,
                    481,
                    2276,
                    1011,
                    1401,
                    894
                ],
                "self.groups": [
                    418
                ],
                "object.__repr__": [
                    422
                ],
                "object": [
                    422,
                    575
                ],
                "self._assure_grouper": [
                    441,
                    436,
                    449
                ],
                "self.grouper.groups": [
                    437
                ],
                "property": [
                    608,
                    439,
                    444,
                    431
                ],
                "self.grouper.ngroups": [
                    442,
                    919
                ],
                "self.grouper.indices": [
                    450
                ],
                "s": [
                    493,
                    461,
                    463
                ],
                "datetime.datetime": [
                    461
                ],
                "datetime": [
                    461
                ],
                "Timestamp": [
                    464,
                    462
                ],
                "key": [
                    896,
                    897,
                    2304,
                    901,
                    902,
                    937,
                    938,
                    462,
                    464,
                    466,
                    946,
                    856,
                    857,
                    953,
                    2303
                ],
                "np.datetime64": [
                    463
                ],
                "np": [
                    1025,
                    2178,
                    1027,
                    1926,
                    1031,
                    1415,
                    2439,
                    1035,
                    780,
                    782,
                    783,
                    1402,
                    1423,
                    1424,
                    787,
                    915,
                    789,
                    1425,
                    791,
                    792,
                    793,
                    1426,
                    1943,
                    1946,
                    2193,
                    2200,
                    2338,
                    1955,
                    1833,
                    1322,
                    563,
                    841,
                    718,
                    463,
                    1615,
                    1113,
                    1881,
                    1115,
                    2266,
                    1117,
                    1119,
                    864,
                    1121,
                    1761,
                    867,
                    1764,
                    1765,
                    1889,
                    1127,
                    1892,
                    1896,
                    2278,
                    876,
                    2289,
                    1913,
                    1274
                ],
                "asm8": [
                    464
                ],
                "names": [
                    484,
                    494,
                    498,
                    468,
                    500,
                    476
                ],
                "self.indices": [
                    472,
                    484,
                    500,
                    471
                ],
                "index_sample": [
                    481,
                    493,
                    497,
                    472,
                    474,
                    477
                ],
                "next": [
                    472
                ],
                "iter": [
                    472
                ],
                "name_sample": [
                    481,
                    476,
                    478
                ],
                "tuple": [
                    1750,
                    477,
                    478,
                    494
                ],
                "msg": [
                    480,
                    487,
                    2123,
                    491,
                    2124,
                    479
                ],
                "KeyError": [
                    485,
                    686
                ],
                "converters": [
                    493,
                    494
                ],
                "get_converter": [
                    497,
                    493
                ],
                "n": [
                    2401,
                    2435,
                    1828,
                    1800,
                    494,
                    1751,
                    1787,
                    1756,
                    1757,
                    1758,
                    1759
                ],
                "zip": [
                    2509,
                    494,
                    895
                ],
                "converter": [
                    497,
                    498
                ],
                "self.indices.get": [
                    500
                ],
                "self._get_indices": [
                    506,
                    563
                ],
                "Series": [
                    512,
                    1249,
                    2084,
                    2022,
                    1337,
                    972,
                    1231,
                    1297,
                    2546,
                    757,
                    1017
                ],
                "self._group_selection": [
                    544,
                    513,
                    514,
                    553,
                    526,
                    528
                ],
                "cache_readonly": [
                    508
                ],
                "self._reset_cache": [
                    529,
                    554
                ],
                "grp": [
                    539,
                    549,
                    542
                ],
                "self.obj.ndim": [
                    653,
                    543
                ],
                "ax": [
                    964,
                    548,
                    965,
                    553,
                    970,
                    973,
                    981,
                    983,
                    987
                ],
                "self.obj._info_axis": [
                    548
                ],
                "groupers": [
                    553,
                    549,
                    551
                ],
                "g.name": [
                    549
                ],
                "g": [
                    549,
                    719
                ],
                "grp.groupings": [
                    549
                ],
                "g.level": [
                    549
                ],
                "g.in_axis": [
                    549
                ],
                "tolist": [
                    553
                ],
                "ax.difference": [
                    553
                ],
                "Index": [
                    553,
                    563
                ],
                "self.grouper.is_monotonic": [
                    562
                ],
                "index": [
                    2082,
                    2084,
                    2021,
                    2022,
                    563,
                    564,
                    2483,
                    2515,
                    2489
                ],
                "np.concatenate": [
                    1027,
                    563
                ],
                "self.grouper.result_index": [
                    1837,
                    1839,
                    1777,
                    1841,
                    563,
                    2514
                ],
                "result.set_axis": [
                    564,
                    567
                ],
                "result": [
                    2304,
                    900,
                    902,
                    1934,
                    658,
                    659,
                    1940,
                    1943,
                    1946,
                    1949,
                    1952,
                    1955,
                    1828,
                    1956,
                    935,
                    936,
                    809,
                    938,
                    1449,
                    1451,
                    1452,
                    1832,
                    1833,
                    1836,
                    1839,
                    818,
                    946,
                    564,
                    565,
                    820,
                    567,
                    568,
                    822,
                    949,
                    953,
                    1335,
                    1338,
                    1339,
                    1843,
                    2301,
                    969,
                    972,
                    973,
                    849,
                    854,
                    983,
                    857,
                    985,
                    987,
                    735,
                    1122,
                    2022,
                    999,
                    2024,
                    2025,
                    2278,
                    2279,
                    748,
                    1389,
                    1390,
                    1841,
                    1012,
                    1015,
                    888,
                    1017,
                    2298,
                    1019,
                    1021,
                    894,
                    895
                ],
                "result.sort_index": [
                    565
                ],
                "self.obj._get_axis": [
                    567
                ],
                "self.obj._dir_additions": [
                    571
                ],
                "self._apply_whitelist": [
                    611,
                    571
                ],
                "self._internal_names_set": [
                    574
                ],
                "object.__getattribute__": [
                    575
                ],
                "AttributeError": [
                    579
                ],
                "__name__": [
                    580
                ],
                "com.pipe": [
                    606
                ],
                "com": [
                    963,
                    606
                ],
                "func": [
                    708,
                    2279,
                    714,
                    716,
                    2286,
                    719,
                    911,
                    721,
                    912,
                    723,
                    2290,
                    2293,
                    2295,
                    730,
                    925,
                    606
                ],
                "Substitution": [
                    1153,
                    2182,
                    2311,
                    1673,
                    1674,
                    1170,
                    1430,
                    1304,
                    1564,
                    1185,
                    1186,
                    1574,
                    1958,
                    2086,
                    2344,
                    1324,
                    2370,
                    2371,
                    583,
                    1234,
                    1364,
                    1621,
                    2135,
                    2404,
                    1253,
                    2405,
                    2151,
                    2027,
                    1647,
                    1136,
                    2167,
                    1276
                ],
                "Appender": [
                    1154,
                    2183,
                    2312,
                    1171,
                    1431,
                    1305,
                    1565,
                    1446,
                    1575,
                    2087,
                    2345,
                    1325,
                    701,
                    1235,
                    1365,
                    1366,
                    2136,
                    604,
                    2528,
                    1254,
                    2152,
                    1137,
                    2168,
                    1277
                ],
                "plot": [
                    608
                ],
                "GroupByPlot": [
                    608
                ],
                "self._set_group_selection": [
                    1762,
                    1373,
                    613
                ],
                "self._selected_obj": [
                    2082,
                    2402,
                    2436,
                    1029,
                    2021,
                    1031,
                    617,
                    682,
                    970,
                    1035,
                    621,
                    1036,
                    751,
                    1773
                ],
                "types.MethodType": [
                    618
                ],
                "types": [
                    618
                ],
                "self.apply": [
                    641,
                    2178,
                    2147,
                    644,
                    1449,
                    619,
                    2193,
                    2163,
                    2356,
                    2334
                ],
                "sig": [
                    627,
                    622
                ],
                "inspect.signature": [
                    622
                ],
                "inspect": [
                    622
                ],
                "sig.parameters": [
                    627
                ],
                "kwargs.get": [
                    628
                ],
                "x": [
                    1408,
                    2178,
                    1412,
                    1413,
                    1414,
                    1416,
                    1418,
                    1419,
                    1421,
                    912,
                    1297,
                    2193,
                    1300,
                    2334,
                    1444,
                    1449,
                    2357,
                    1231,
                    1115,
                    1249,
                    2147,
                    632,
                    1389,
                    2163,
                    1398,
                    1400,
                    1401,
                    1403,
                    1405,
                    1406
                ],
                "curried.__name__": [
                    636
                ],
                "curried": [
                    641,
                    636,
                    644
                ],
                "base.plotting_methods": [
                    640
                ],
                "base": [
                    640,
                    864,
                    896,
                    867,
                    837,
                    901,
                    841,
                    937,
                    876,
                    915,
                    856,
                    2266,
                    2303
                ],
                "re.search": [
                    646
                ],
                "re": [
                    646
                ],
                "err": [
                    1381,
                    647
                ],
                "self._aggregate_item_by_item": [
                    658
                ],
                "wrapper.__name__": [
                    661
                ],
                "wrapper": [
                    661,
                    662
                ],
                "inds": [
                    688,
                    684,
                    685
                ],
                "self._get_index": [
                    684
                ],
                "obj.take": [
                    688
                ],
                "self.grouper.get_iterator": [
                    699
                ],
                "self._is_builtin_func": [
                    708,
                    911
                ],
                "callable": [
                    2256,
                    714,
                    2253
                ],
                "np.errstate": [
                    718
                ],
                "wraps": [
                    716
                ],
                "hasattr": [
                    721
                ],
                "nanops": [
                    721,
                    723
                ],
                "option_context": [
                    733
                ],
                "self._python_apply_general": [
                    746,
                    941,
                    735
                ],
                "_group_selection_context": [
                    2081,
                    2020,
                    1448,
                    745,
                    1301
                ],
                "format": [
                    702
                ],
                "values": [
                    1829,
                    949,
                    950,
                    951,
                    953,
                    963,
                    966,
                    969,
                    2271,
                    991,
                    2276,
                    1000,
                    2283,
                    751,
                    2289,
                    754,
                    1011,
                    1012,
                    1014,
                    1015,
                    2298
                ],
                "self.grouper.apply": [
                    751
                ],
                "self._wrap_applied_output": [
                    753
                ],
                "AbstractMethodError": [
                    865,
                    868,
                    871,
                    758,
                    761
                ],
                "Iterable": [
                    757
                ],
                "ids": [
                    775,
                    776,
                    777,
                    1768,
                    1771,
                    782,
                    1778
                ],
                "_": [
                    775,
                    1768,
                    849,
                    2483,
                    2265,
                    1818
                ],
                "ngroups": [
                    2274,
                    775,
                    776,
                    2293,
                    2265
                ],
                "self.grouper.group_info": [
                    1768,
                    2022,
                    775
                ],
                "sorter": [
                    776,
                    777,
                    792
                ],
                "get_group_index_sorter": [
                    776
                ],
                "count": [
                    777,
                    779,
                    783,
                    791,
                    792
                ],
                "np.empty": [
                    780,
                    1031,
                    791
                ],
                "np.int64": [
                    1889,
                    2338,
                    780,
                    1615,
                    793
                ],
                "run": [
                    782,
                    783,
                    784,
                    787,
                    789
                ],
                "np.r_": [
                    789,
                    782,
                    783
                ],
                "rep": [
                    787,
                    789,
                    783
                ],
                "np.diff": [
                    783
                ],
                "np.nonzero": [
                    783
                ],
                "out": [
                    1773,
                    1775,
                    784,
                    1778,
                    787,
                    789,
                    1781,
                    1783,
                    1784,
                    793
                ],
                "cumsum": [
                    784
                ],
                "ascending": [
                    2129,
                    786,
                    2083,
                    2023
                ],
                "np.repeat": [
                    787,
                    789
                ],
                "rev": [
                    792,
                    793,
                    791
                ],
                "np.intp": [
                    792,
                    1761,
                    791
                ],
                "np.arange": [
                    792,
                    1946,
                    1955
                ],
                "astype": [
                    793
                ],
                "obj.ndim": [
                    804
                ],
                "dtype": [
                    805,
                    807,
                    810,
                    817,
                    818,
                    819,
                    820
                ],
                "obj._values.dtype": [
                    805
                ],
                "obj._values": [
                    889,
                    805
                ],
                "obj.dtype": [
                    884,
                    844,
                    807
                ],
                "is_scalar": [
                    809,
                    1907
                ],
                "is_extension_array_dtype": [
                    810
                ],
                "dtype.kind": [
                    810
                ],
                "cls": [
                    1423,
                    1392,
                    817,
                    818,
                    1424,
                    1425,
                    1426,
                    1427,
                    1428
                ],
                "dtype.construct_array_type": [
                    817
                ],
                "try_cast_to_ea": [
                    818
                ],
                "numeric_only": [
                    1369,
                    885,
                    819,
                    845
                ],
                "is_numeric_dtype": [
                    884,
                    819,
                    844,
                    950
                ],
                "maybe_downcast_to_dtype": [
                    820
                ],
                "any": [
                    2476,
                    836
                ],
                "fillna": [
                    836
                ],
                "self.size": [
                    836
                ],
                "func_nm": [
                    837
                ],
                "base.cython_cast_blacklist": [
                    837
                ],
                "output": [
                    2304,
                    897,
                    2307,
                    2309,
                    902,
                    905,
                    908,
                    915,
                    2466,
                    2468,
                    2473,
                    938,
                    940,
                    2480,
                    946,
                    953,
                    955,
                    2493,
                    841,
                    2511,
                    2514,
                    2520,
                    857,
                    2266,
                    859,
                    2522,
                    862,
                    876
                ],
                "Dict": [
                    841,
                    2266,
                    915,
                    876
                ],
                "base.OutputKey": [
                    864,
                    896,
                    867,
                    901,
                    841,
                    937,
                    876,
                    915,
                    856,
                    2266,
                    2303
                ],
                "np.ndarray": [
                    864,
                    1121,
                    867,
                    1896,
                    841,
                    876,
                    915,
                    1881,
                    1113,
                    2266
                ],
                "idx": [
                    896,
                    898,
                    901,
                    903,
                    937,
                    842,
                    881,
                    917,
                    856,
                    2269,
                    2303
                ],
                "enumerate": [
                    2269,
                    842,
                    2507,
                    917
                ],
                "self._iterate_slices": [
                    2269,
                    842,
                    917,
                    882
                ],
                "obj.name": [
                    883,
                    843,
                    2270,
                    918
                ],
                "is_numeric": [
                    884,
                    885,
                    844,
                    845
                ],
                "self.grouper.transform": [
                    849
                ],
                "obj.values": [
                    849
                ],
                "how": [
                    849,
                    2267,
                    853,
                    889
                ],
                "NotImplementedError": [
                    850,
                    1380,
                    1183
                ],
                "self._transform_should_cast": [
                    853
                ],
                "self._try_cast": [
                    897,
                    902,
                    938,
                    854,
                    953
                ],
                "DataError": [
                    906,
                    860,
                    1378
                ],
                "self._wrap_transformed_output": [
                    2309,
                    862
                ],
                "DatetimeArray": [
                    876
                ],
                "agg_names": [
                    888,
                    892,
                    894,
                    895
                ],
                "self.grouper.aggregate": [
                    888
                ],
                "min_count": [
                    889,
                    1371
                ],
                "result.shape": [
                    894
                ],
                "result_column": [
                    897,
                    895
                ],
                "result_name": [
                    896,
                    895
                ],
                "result.T": [
                    1451,
                    895
                ],
                "result.ndim": [
                    900
                ],
                "self._wrap_aggregated_output": [
                    2307,
                    955,
                    908
                ],
                "AssertionError": [
                    928
                ],
                "Exception": [
                    930
                ],
                "counts": [
                    945,
                    935
                ],
                "self.grouper.agg_series": [
                    935
                ],
                "self.grouper._filter_empty_groups": [
                    943
                ],
                "mask": [
                    2435,
                    2436,
                    1031,
                    1032,
                    1033,
                    1035,
                    1036,
                    1829,
                    1832,
                    1833,
                    945,
                    953,
                    2401,
                    2402,
                    1766,
                    1771,
                    1773,
                    2289,
                    1778,
                    2290
                ],
                "counts.ravel": [
                    945
                ],
                "output.items": [
                    946
                ],
                "values.dtype": [
                    950
                ],
                "ensure_float": [
                    951
                ],
                "v": [
                    963,
                    964
                ],
                "com.not_none": [
                    963
                ],
                "v._get_axis": [
                    964
                ],
                "ax._reset_identity": [
                    965
                ],
                "not_indexed_same": [
                    968
                ],
                "concat": [
                    999,
                    969,
                    1934,
                    1012,
                    1015
                ],
                "self._selected_obj._get_axis": [
                    970
                ],
                "result.reindex": [
                    1841,
                    987,
                    973
                ],
                "MultiIndex": [
                    2483,
                    981
                ],
                "ax.is_unique": [
                    981
                ],
                "indexer": [
                    985,
                    982
                ],
                "algorithms.unique1d": [
                    982
                ],
                "algorithms": [
                    2298,
                    982
                ],
                "result.index.get_indexer_for": [
                    983
                ],
                "result.index": [
                    1952,
                    1839,
                    983,
                    1940,
                    1943,
                    1946
                ],
                "ax.values": [
                    983
                ],
                "result.take": [
                    985,
                    1956
                ],
                "reset_identity": [
                    1014,
                    991
                ],
                "group_levels": [
                    1003,
                    996
                ],
                "self.grouper.levels": [
                    996
                ],
                "group_names": [
                    1004,
                    997
                ],
                "self.grouper.names": [
                    2484,
                    997
                ],
                "list": [
                    1035,
                    2511,
                    1011,
                    1940,
                    1750,
                    1759
                ],
                "range": [
                    1011,
                    1940
                ],
                "self._selection_name": [
                    1017,
                    1019
                ],
                "result.name": [
                    1338,
                    1019
                ],
                "indices": [
                    1024,
                    1025,
                    1027,
                    1955,
                    1029,
                    1956,
                    1033
                ],
                "np.array": [
                    1025,
                    1115,
                    1761,
                    1943
                ],
                "np.sort": [
                    1027
                ],
                "dropna": [
                    1795,
                    1028,
                    1801,
                    1754,
                    1790
                ],
                "filtered": [
                    1037,
                    1036,
                    1029
                ],
                "self._selected_obj.take": [
                    1029
                ],
                "self._selected_obj.index": [
                    2082,
                    2021,
                    1031
                ],
                "mask.fill": [
                    1032
                ],
                "indices.astype": [
                    1033
                ],
                "T": [
                    1035,
                    1955
                ],
                "np.tile": [
                    1035
                ],
                "self._selected_obj.shape": [
                    1035
                ],
                "self._selected_obj.where": [
                    1036
                ],
                "_GroupBy": [
                    1040
                ],
                "is_object_dtype": [
                    1114,
                    1882
                ],
                "vals": [
                    1888,
                    1890,
                    1892,
                    1114,
                    1894,
                    2283,
                    2285,
                    2286,
                    1903,
                    1905,
                    1882,
                    1115,
                    1117,
                    1119
                ],
                "vals.astype": [
                    1892,
                    1117,
                    1903
                ],
                "np.bool": [
                    1117,
                    1119
                ],
                "vals.view": [
                    1119
                ],
                "np.uint8": [
                    2289,
                    1127,
                    1119
                ],
                "Tuple": [
                    1881,
                    1113
                ],
                "Type": [
                    1113,
                    1121,
                    1896,
                    2545,
                    1881
                ],
                "result.astype": [
                    1122
                ],
                "inference": [
                    1889,
                    1122,
                    1891,
                    1894,
                    1897,
                    1900,
                    1903,
                    1887
                ],
                "self._get_cythonized_result": [
                    2336,
                    1921,
                    1124,
                    1612,
                    1908
                ],
                "np.dtype": [
                    2338,
                    1926,
                    1127,
                    1615,
                    2200,
                    1913
                ],
                "objs_to_bool": [
                    1130
                ],
                "result_to_bool": [
                    1131
                ],
                "val_test": [
                    1132
                ],
                "skipna": [
                    1168,
                    1133,
                    1151
                ],
                "self._bool_agg": [
                    1168,
                    1151
                ],
                "nv.validate_groupby_func": [
                    2145,
                    1229,
                    1294,
                    2161,
                    1273
                ],
                "nv": [
                    2145,
                    1229,
                    1294,
                    2161,
                    1273
                ],
                "self._cython_agg_general": [
                    1296,
                    1377,
                    1230,
                    1247
                ],
                "mean": [
                    1231
                ],
                "median": [
                    1249
                ],
                "np.sqrt": [
                    1274,
                    1322
                ],
                "self.var": [
                    1274
                ],
                "ddof": [
                    1322,
                    1295,
                    1297,
                    1300,
                    1274
                ],
                "var": [
                    1297
                ],
                "x.var": [
                    1300
                ],
                "self._python_agg_general": [
                    1302
                ],
                "self.std": [
                    1322
                ],
                "self.count": [
                    1322
                ],
                "self.grouper.size": [
                    1335
                ],
                "self.obj.name": [
                    1338
                ],
                "self._reindex_output": [
                    1339,
                    1783
                ],
                "_local_template": [
                    1355,
                    1366
                ],
                "alias": [
                    1377
                ],
                "npfunc": [
                    1377,
                    1389
                ],
                "self.aggregate": [
                    1389
                ],
                "set_function_name": [
                    1392
                ],
                "x.to_numpy": [
                    1412,
                    1398
                ],
                "notna": [
                    1400,
                    1413
                ],
                "np.nan": [
                    1833,
                    1402,
                    1415
                ],
                "x.apply": [
                    1419,
                    1406
                ],
                "first": [
                    1408,
                    1406
                ],
                "last": [
                    1419,
                    1421
                ],
                "cls.sum": [
                    1423
                ],
                "groupby_function": [
                    1423,
                    1424,
                    1425,
                    1426,
                    1427,
                    1428
                ],
                "np.sum": [
                    1423
                ],
                "cls.prod": [
                    1424
                ],
                "np.prod": [
                    1424
                ],
                "cls.min": [
                    1425
                ],
                "np.min": [
                    1425
                ],
                "cls.max": [
                    1426
                ],
                "np.max": [
                    1426
                ],
                "cls.first": [
                    1427
                ],
                "first_compat": [
                    1427
                ],
                "cls.last": [
                    1428
                ],
                "last_compat": [
                    1428
                ],
                "classmethod": [
                    1341
                ],
                "self._apply_to_column_groupbys": [
                    1444
                ],
                "x._cython_agg_general": [
                    1444
                ],
                "x.describe": [
                    1449
                ],
                "result.unstack": [
                    1452
                ],
                "DataFrame.describe.__doc__": [
                    1446
                ],
                "DataFrame.describe": [
                    1446
                ],
                "get_resampler_for_grouping": [
                    1562
                ],
                "rule": [
                    1562
                ],
                "RollingGroupby": [
                    1572
                ],
                "ExpandingGroupby": [
                    1583
                ],
                "limit": [
                    1669,
                    1609,
                    1610,
                    1643,
                    1618,
                    2360,
                    2365
                ],
                "direction": [
                    1617
                ],
                "self._fill": [
                    1643,
                    1669
                ],
                "ffill": [
                    1645
                ],
                "pad": [
                    1645
                ],
                "bfill": [
                    1671
                ],
                "backfill": [
                    1671
                ],
                "valid_containers": [
                    1787,
                    1758,
                    1750,
                    1751
                ],
                "nth_values": [
                    1761,
                    1757,
                    1759
                ],
                "nth_array": [
                    1761,
                    1764,
                    1765
                ],
                "mask_left": [
                    1764,
                    1766
                ],
                "np.in1d": [
                    1764,
                    1765
                ],
                "self._cumcount_array": [
                    2401,
                    2083,
                    1764,
                    1765,
                    2435
                ],
                "mask_right": [
                    1765,
                    1766
                ],
                "result_index": [
                    1777,
                    1778,
                    1780,
                    1781
                ],
                "out.index": [
                    1778
                ],
                "CategoricalIndex": [
                    1780,
                    2477
                ],
                "out.reindex": [
                    1781
                ],
                "out.sort_index": [
                    1784
                ],
                "max_len": [
                    1800,
                    1829
                ],
                "dropped": [
                    1827,
                    1801,
                    1836,
                    1810,
                    1819
                ],
                "self.obj.dropna": [
                    1801
                ],
                "self.grouper.axis": [
                    1809
                ],
                "axis.isin": [
                    1810
                ],
                "dropped.index": [
                    1810
                ],
                "grb": [
                    1827,
                    1828
                ],
                "dropped.groupby": [
                    1827
                ],
                "sizes": [
                    1828,
                    1829
                ],
                "grb.size": [
                    1828
                ],
                "grb.nth": [
                    1828
                ],
                "mask.any": [
                    1832
                ],
                "result.loc": [
                    1833
                ],
                "is_integer_dtype": [
                    1888,
                    1900
                ],
                "is_datetime64_dtype": [
                    1890
                ],
                "np.float": [
                    1892
                ],
                "interpolation": [
                    1930,
                    1917,
                    1901
                ],
                "q": [
                    1955,
                    1932,
                    1934,
                    1907,
                    1916
                ],
                "np.float64": [
                    1913,
                    1926
                ],
                "pre_processor": [
                    1914,
                    1927
                ],
                "post_processor": [
                    1928,
                    1915
                ],
                "results": [
                    1920,
                    1934
                ],
                "qi": [
                    1929,
                    1932
                ],
                "order": [
                    1952,
                    1940,
                    1949
                ],
                "result.index.nlevels": [
                    1940
                ],
                "index_names": [
                    1952,
                    1946,
                    1943
                ],
                "result.index.names": [
                    1952,
                    1946,
                    1943
                ],
                "result.reorder_levels": [
                    1949
                ],
                "T.flatten": [
                    1955
                ],
                "reshape": [
                    1955
                ],
                "self.ngroups": [
                    2024,
                    1955
                ],
                "cumcounts": [
                    2083,
                    2084
                ],
                "na_option": [
                    2122,
                    2130
                ],
                "self._cython_transform": [
                    2180,
                    2149,
                    2125,
                    2195,
                    2165
                ],
                "method": [
                    2128
                ],
                "pct": [
                    2131
                ],
                "x.cumprod": [
                    2147
                ],
                "x.cumsum": [
                    2163
                ],
                "np.minimum.accumulate": [
                    2178
                ],
                "np.minimum": [
                    2178
                ],
                "np.maximum.accumulate": [
                    2193
                ],
                "np.maximum": [
                    2193
                ],
                "result_is_index": [
                    2297,
                    2250
                ],
                "aggregate": [
                    2273,
                    2250,
                    2306
                ],
                "post_processing": [
                    2252,
                    2301,
                    2300
                ],
                "pre_processing": [
                    2284,
                    2285,
                    2253,
                    2255,
                    2256
                ],
                "needs_values": [
                    2258,
                    2282
                ],
                "labels": [
                    2265,
                    2279
                ],
                "grouper.group_info": [
                    2265
                ],
                "base_func": [
                    2267,
                    2279
                ],
                "libgroupby": [
                    2267
                ],
                "obj._data._values": [
                    2271
                ],
                "obj._data": [
                    2271
                ],
                "result_sz": [
                    2274,
                    2276,
                    2278
                ],
                "np.zeros": [
                    2278
                ],
                "cython_dtype": [
                    2278
                ],
                "partial": [
                    2290,
                    2293,
                    2286,
                    2279
                ],
                "inferences": [
                    2280,
                    2301,
                    2285
                ],
                "needs_mask": [
                    2288
                ],
                "view": [
                    2289
                ],
                "isna": [
                    2289,
                    2333
                ],
                "needs_ngroups": [
                    2292
                ],
                "algorithms.take_nd": [
                    2298
                ],
                "freq": [
                    2355,
                    2361,
                    2333,
                    2334,
                    2367
                ],
                "fill_value": [
                    2515,
                    2491,
                    2333,
                    2334
                ],
                "x.shift": [
                    2334
                ],
                "periods": [
                    2358,
                    2341,
                    2334,
                    2367
                ],
                "x.pct_change": [
                    2357
                ],
                "fill_method": [
                    2365,
                    2359
                ],
                "filled": [
                    2368,
                    2365,
                    2366
                ],
                "fill_grp": [
                    2366,
                    2367
                ],
                "filled.groupby": [
                    2366
                ],
                "self.grouper.codes": [
                    2366
                ],
                "shifted": [
                    2368,
                    2367
                ],
                "fill_grp.shift": [
                    2367
                ],
                "self._reset_group_selection": [
                    2400,
                    2434
                ],
                "FrameOrSeries": [
                    2440,
                    2439
                ],
                "Scalar": [
                    2439
                ],
                "np.NaN": [
                    2439
                ],
                "groupings": [
                    2464,
                    2465,
                    2467,
                    2507,
                    2478,
                    2482
                ],
                "self.grouper.groupings": [
                    2464
                ],
                "ping.grouper": [
                    2477
                ],
                "ping": [
                    2482,
                    2507,
                    2477,
                    2478
                ],
                "Categorical": [
                    2477
                ],
                "levels_list": [
                    2482,
                    2484
                ],
                "ping.group_index": [
                    2482
                ],
                "sortlevel": [
                    2483
                ],
                "MultiIndex.from_product": [
                    2483
                ],
                "d": [
                    2488,
                    2493
                ],
                "self.obj._get_axis_name": [
                    2489
                ],
                "output.reindex": [
                    2493
                ],
                "in_axis_grps": [
                    2506,
                    2509
                ],
                "i": [
                    2507
                ],
                "ping.name": [
                    2507
                ],
                "ping.in_axis": [
                    2507
                ],
                "g_nums": [
                    2520,
                    2509
                ],
                "g_names": [
                    2509,
                    2511
                ],
                "output.drop": [
                    2511
                ],
                "reindex": [
                    2514
                ],
                "output.set_index": [
                    2514
                ],
                "output.reset_index": [
                    2520,
                    2522
                ],
                "GroupBy._add_numeric_operations": [
                    2525
                ],
                "GroupBy": [
                    2528,
                    2545,
                    2525,
                    2543
                ],
                "klass": [
                    2557,
                    2545,
                    2553,
                    2549
                ],
                "SeriesGroupBy": [
                    2549
                ],
                "DataFrameGroupBy": [
                    2553
                ],
                "by": [
                    2559
                ],
                "GroupBy.__doc__": [
                    2528
                ]
            },
            "filtered_variables_in_file": {
                "_common_see_also": [
                    1154,
                    2183,
                    2312,
                    1674,
                    1171,
                    1431,
                    1305,
                    1565,
                    1186,
                    1575,
                    2087,
                    2345,
                    1325,
                    66,
                    2371,
                    1235,
                    1365,
                    2136,
                    2405,
                    1254,
                    2152,
                    1137,
                    2168,
                    1277
                ],
                "_apply_docs": [
                    73,
                    702,
                    703
                ],
                "_pipe_template": [
                    192,
                    604
                ],
                "_transform_template": [
                    246
                ],
                "PandasObject": [
                    313,
                    357
                ],
                "self._groupby": [
                    333,
                    326,
                    319
                ],
                "self": [
                    512,
                    513,
                    514,
                    515,
                    517,
                    1029,
                    1031,
                    1035,
                    1036,
                    526,
                    528,
                    529,
                    1562,
                    539,
                    541,
                    543,
                    544,
                    2081,
                    2082,
                    2083,
                    548,
                    1572,
                    553,
                    554,
                    1583,
                    562,
                    563,
                    564,
                    565,
                    567,
                    571,
                    574,
                    575,
                    576,
                    577,
                    580,
                    1612,
                    2125,
                    606,
                    611,
                    1124,
                    613,
                    2147,
                    2149,
                    617,
                    619,
                    1643,
                    621,
                    2163,
                    629,
                    2165,
                    1151,
                    641,
                    2178,
                    644,
                    1669,
                    2180,
                    653,
                    1168,
                    2193,
                    658,
                    2195,
                    682,
                    684,
                    688,
                    699,
                    708,
                    1230,
                    2263,
                    2269,
                    735,
                    1247,
                    1762,
                    1764,
                    1765,
                    1768,
                    745,
                    746,
                    1773,
                    1774,
                    751,
                    753,
                    754,
                    1777,
                    1780,
                    758,
                    1783,
                    1784,
                    761,
                    1274,
                    2307,
                    2309,
                    775,
                    1801,
                    1804,
                    1296,
                    1809,
                    1301,
                    1302,
                    1820,
                    1821,
                    1822,
                    1823,
                    1824,
                    2334,
                    2336,
                    1827,
                    1322,
                    1836,
                    1837,
                    1839,
                    1841,
                    2356,
                    1335,
                    1337,
                    1338,
                    1339,
                    2365,
                    2366,
                    319,
                    323,
                    836,
                    326,
                    842,
                    331,
                    333,
                    849,
                    853,
                    854,
                    1373,
                    862,
                    2400,
                    865,
                    1377,
                    2401,
                    868,
                    2402,
                    871,
                    1389,
                    882,
                    1908,
                    888,
                    378,
                    383,
                    897,
                    1921,
                    2434,
                    2435,
                    2436,
                    902,
                    391,
                    392,
                    393,
                    394,
                    395,
                    396,
                    397,
                    908,
                    911,
                    917,
                    919,
                    409,
                    412,
                    413,
                    414,
                    415,
                    2464,
                    418,
                    1955,
                    1444,
                    422,
                    935,
                    1448,
                    1449,
                    938,
                    1450,
                    2472,
                    941,
                    943,
                    436,
                    437,
                    2484,
                    2487,
                    441,
                    442,
                    953,
                    955,
                    2489,
                    449,
                    450,
                    964,
                    969,
                    970,
                    2514,
                    471,
                    472,
                    985,
                    987,
                    989,
                    992,
                    484,
                    996,
                    997,
                    2020,
                    2021,
                    1001,
                    2022,
                    2024,
                    500,
                    1012,
                    1015,
                    1017,
                    506,
                    1019
                ],
                "groupby": [
                    344,
                    345,
                    343,
                    319
                ],
                "self.plot": [
                    331,
                    323
                ],
                "args": [
                    2145,
                    323,
                    1572,
                    713,
                    331,
                    1229,
                    1294,
                    719,
                    912,
                    1583,
                    658,
                    2161,
                    632,
                    1273,
                    1562,
                    606
                ],
                "kwargs": [
                    1294,
                    912,
                    1297,
                    658,
                    1300,
                    1562,
                    1572,
                    1449,
                    1583,
                    323,
                    713,
                    331,
                    1229,
                    719,
                    1231,
                    849,
                    1368,
                    1369,
                    1370,
                    1371,
                    606,
                    1249,
                    1250,
                    1377,
                    2145,
                    2147,
                    2149,
                    2161,
                    2163,
                    628,
                    629,
                    2165,
                    2295,
                    632,
                    1273,
                    1274
                ],
                "f.__name__": [
                    325
                ],
                "f": [
                    912,
                    1300,
                    1302,
                    935,
                    941,
                    325,
                    326,
                    333,
                    723,
                    730,
                    735,
                    617,
                    618,
                    746,
                    621,
                    494,
                    622,
                    751,
                    1392,
                    1394,
                    632
                ],
                "self._groupby.apply": [
                    333,
                    326
                ],
                "name": [
                    640,
                    901,
                    658,
                    661,
                    918,
                    937,
                    684,
                    686,
                    331,
                    843,
                    1364,
                    856,
                    2270,
                    611,
                    484,
                    617,
                    619,
                    621,
                    494,
                    1392,
                    498,
                    883,
                    500,
                    506,
                    636,
                    2303
                ],
                "attr": [
                    576,
                    577,
                    580,
                    335,
                    574,
                    575
                ],
                "groupby._set_group_selection": [
                    343
                ],
                "groupby._reset_group_selection": [
                    345
                ],
                "contextmanager": [
                    338
                ],
                "_KeysArgType": [
                    364,
                    2531,
                    348
                ],
                "Union": [
                    876,
                    1675,
                    348
                ],
                "Hashable": [
                    352,
                    353,
                    349,
                    350,
                    351
                ],
                "List": [
                    352,
                    1675,
                    350
                ],
                "Callable": [
                    352,
                    351
                ],
                "Mapping": [
                    864,
                    353,
                    867
                ],
                "SelectionMixin": [
                    357
                ],
                "_group_selection": [
                    358
                ],
                "_apply_whitelist": [
                    359
                ],
                "FrozenSet": [
                    359
                ],
                "NDFrame": [
                    2530,
                    363,
                    380
                ],
                "Optional": [
                    2531,
                    1896,
                    1675,
                    364,
                    1881
                ],
                "self._selection": [
                    512,
                    378,
                    517
                ],
                "selection": [
                    378,
                    2564
                ],
                "obj": [
                    897,
                    386,
                    902,
                    402,
                    403,
                    917,
                    918,
                    412,
                    413,
                    925,
                    804,
                    805,
                    807,
                    935,
                    681,
                    682,
                    938,
                    688,
                    842,
                    843,
                    844,
                    849,
                    854,
                    2269,
                    2270,
                    2271,
                    882,
                    883,
                    884,
                    2546,
                    2550,
                    889,
                    2555,
                    380,
                    381,
                    2558
                ],
                "obj._consolidate_inplace": [
                    381
                ],
                "self.level": [
                    1804,
                    1822,
                    383
                ],
                "level": [
                    2561,
                    406,
                    383
                ],
                "as_index": [
                    385,
                    2565,
                    391
                ],
                "DataFrame": [
                    386,
                    1446,
                    1418,
                    1675,
                    2550,
                    1432,
                    1405
                ],
                "axis": [
                    2560,
                    2177,
                    2178,
                    388,
                    1419,
                    2192,
                    1809,
                    1810,
                    2193,
                    405,
                    2333,
                    413,
                    2334,
                    2355,
                    2362,
                    2132,
                    1249,
                    2146,
                    2147,
                    2162,
                    2163,
                    1406
                ],
                "self.as_index": [
                    992,
                    1827,
                    391,
                    1774,
                    2487,
                    541
                ],
                "self.keys": [
                    392,
                    1804,
                    1820
                ],
                "keys": [
                    995,
                    392,
                    751,
                    754,
                    1011,
                    404,
                    1012
                ],
                "self.sort": [
                    1784,
                    393,
                    1827,
                    1823
                ],
                "sort": [
                    393,
                    2566,
                    407
                ],
                "self.group_keys": [
                    394,
                    989
                ],
                "group_keys": [
                    1002,
                    394,
                    995,
                    2567
                ],
                "self.squeeze": [
                    395
                ],
                "squeeze": [
                    2568,
                    395
                ],
                "self.observed": [
                    2472,
                    396,
                    1780
                ],
                "observed": [
                    408,
                    2569,
                    396
                ],
                "self.mutated": [
                    1824,
                    409,
                    754,
                    397
                ],
                "mutated": [
                    754,
                    2570,
                    397,
                    751
                ],
                "grouper": [
                    2562,
                    1827,
                    399,
                    402,
                    1810,
                    2263,
                    2265,
                    1818,
                    414
                ],
                "exclusions": [
                    402,
                    2563,
                    415
                ],
                "get_grouper": [
                    402,
                    1818
                ],
                "self.obj": [
                    512,
                    576,
                    514,
                    515,
                    548,
                    517,
                    1801,
                    2489,
                    1836,
                    653,
                    567,
                    1337,
                    1338,
                    571,
                    412,
                    699,
                    543
                ],
                "self.axis": [
                    1029,
                    1801,
                    413,
                    1821,
                    1450,
                    688,
                    564,
                    565,
                    567,
                    2489,
                    699,
                    964,
                    969,
                    970,
                    985,
                    987,
                    1001,
                    1389,
                    751,
                    1012,
                    629,
                    1015
                ],
                "obj._get_axis_number": [
                    413
                ],
                "self.grouper": [
                    775,
                    1809,
                    919,
                    539,
                    414,
                    2464,
                    935,
                    1837,
                    943,
                    1839,
                    1841,
                    562,
                    563,
                    2484,
                    437,
                    1335,
                    442,
                    699,
                    2366,
                    450,
                    849,
                    2514,
                    2263,
                    996,
                    997,
                    2022,
                    1768,
                    751,
                    1777,
                    888
                ],
                "self.exclusions": [
                    415
                ],
                "self.groups": [
                    418
                ],
                "object.__repr__": [
                    422
                ],
                "self._assure_grouper": [
                    441,
                    436,
                    449
                ],
                "self.grouper.groups": [
                    437
                ],
                "self.grouper.ngroups": [
                    442,
                    919
                ],
                "self.grouper.indices": [
                    450
                ],
                "s": [
                    493,
                    461,
                    463
                ],
                "datetime.datetime": [
                    461
                ],
                "datetime": [
                    461
                ],
                "Timestamp": [
                    464,
                    462
                ],
                "key": [
                    896,
                    897,
                    2304,
                    901,
                    902,
                    937,
                    938,
                    462,
                    464,
                    466,
                    946,
                    856,
                    857,
                    953,
                    2303
                ],
                "np.datetime64": [
                    463
                ],
                "np": [
                    1025,
                    2178,
                    1027,
                    1926,
                    1031,
                    1415,
                    2439,
                    1035,
                    780,
                    782,
                    783,
                    1402,
                    1423,
                    1424,
                    787,
                    915,
                    789,
                    1425,
                    791,
                    792,
                    793,
                    1426,
                    1943,
                    1946,
                    2193,
                    2200,
                    2338,
                    1955,
                    1833,
                    1322,
                    563,
                    841,
                    718,
                    463,
                    1615,
                    1113,
                    1881,
                    1115,
                    2266,
                    1117,
                    1119,
                    864,
                    1121,
                    1761,
                    867,
                    1764,
                    1765,
                    1889,
                    1127,
                    1892,
                    1896,
                    2278,
                    876,
                    2289,
                    1913,
                    1274
                ],
                "asm8": [
                    464
                ],
                "names": [
                    484,
                    494,
                    498,
                    468,
                    500,
                    476
                ],
                "self.indices": [
                    472,
                    484,
                    500,
                    471
                ],
                "index_sample": [
                    481,
                    493,
                    497,
                    472,
                    474,
                    477
                ],
                "name_sample": [
                    481,
                    476,
                    478
                ],
                "msg": [
                    480,
                    487,
                    2123,
                    491,
                    2124,
                    479
                ],
                "converters": [
                    493,
                    494
                ],
                "get_converter": [
                    497,
                    493
                ],
                "n": [
                    2401,
                    2435,
                    1828,
                    1800,
                    494,
                    1751,
                    1787,
                    1756,
                    1757,
                    1758,
                    1759
                ],
                "converter": [
                    497,
                    498
                ],
                "self.indices.get": [
                    500
                ],
                "self._get_indices": [
                    506,
                    563
                ],
                "Series": [
                    512,
                    1249,
                    2084,
                    2022,
                    1337,
                    972,
                    1231,
                    1297,
                    2546,
                    757,
                    1017
                ],
                "self._group_selection": [
                    544,
                    513,
                    514,
                    553,
                    526,
                    528
                ],
                "cache_readonly": [
                    508
                ],
                "self._reset_cache": [
                    529,
                    554
                ],
                "grp": [
                    539,
                    549,
                    542
                ],
                "self.obj.ndim": [
                    653,
                    543
                ],
                "ax": [
                    964,
                    548,
                    965,
                    553,
                    970,
                    973,
                    981,
                    983,
                    987
                ],
                "self.obj._info_axis": [
                    548
                ],
                "groupers": [
                    553,
                    549,
                    551
                ],
                "g.name": [
                    549
                ],
                "g": [
                    549,
                    719
                ],
                "grp.groupings": [
                    549
                ],
                "g.level": [
                    549
                ],
                "g.in_axis": [
                    549
                ],
                "tolist": [
                    553
                ],
                "ax.difference": [
                    553
                ],
                "Index": [
                    553,
                    563
                ],
                "self.grouper.is_monotonic": [
                    562
                ],
                "index": [
                    2082,
                    2084,
                    2021,
                    2022,
                    563,
                    564,
                    2483,
                    2515,
                    2489
                ],
                "np.concatenate": [
                    1027,
                    563
                ],
                "self.grouper.result_index": [
                    1837,
                    1839,
                    1777,
                    1841,
                    563,
                    2514
                ],
                "result.set_axis": [
                    564,
                    567
                ],
                "result": [
                    2304,
                    900,
                    902,
                    1934,
                    658,
                    659,
                    1940,
                    1943,
                    1946,
                    1949,
                    1952,
                    1955,
                    1828,
                    1956,
                    935,
                    936,
                    809,
                    938,
                    1449,
                    1451,
                    1452,
                    1832,
                    1833,
                    1836,
                    1839,
                    818,
                    946,
                    564,
                    565,
                    820,
                    567,
                    568,
                    822,
                    949,
                    953,
                    1335,
                    1338,
                    1339,
                    1843,
                    2301,
                    969,
                    972,
                    973,
                    849,
                    854,
                    983,
                    857,
                    985,
                    987,
                    735,
                    1122,
                    2022,
                    999,
                    2024,
                    2025,
                    2278,
                    2279,
                    748,
                    1389,
                    1390,
                    1841,
                    1012,
                    1015,
                    888,
                    1017,
                    2298,
                    1019,
                    1021,
                    894,
                    895
                ],
                "result.sort_index": [
                    565
                ],
                "self.obj._get_axis": [
                    567
                ],
                "self.obj._dir_additions": [
                    571
                ],
                "self._apply_whitelist": [
                    611,
                    571
                ],
                "self._internal_names_set": [
                    574
                ],
                "object.__getattribute__": [
                    575
                ],
                "com.pipe": [
                    606
                ],
                "com": [
                    963,
                    606
                ],
                "func": [
                    708,
                    2279,
                    714,
                    716,
                    2286,
                    719,
                    911,
                    721,
                    912,
                    723,
                    2290,
                    2293,
                    2295,
                    730,
                    925,
                    606
                ],
                "Substitution": [
                    1153,
                    2182,
                    2311,
                    1673,
                    1674,
                    1170,
                    1430,
                    1304,
                    1564,
                    1185,
                    1186,
                    1574,
                    1958,
                    2086,
                    2344,
                    1324,
                    2370,
                    2371,
                    583,
                    1234,
                    1364,
                    1621,
                    2135,
                    2404,
                    1253,
                    2405,
                    2151,
                    2027,
                    1647,
                    1136,
                    2167,
                    1276
                ],
                "Appender": [
                    1154,
                    2183,
                    2312,
                    1171,
                    1431,
                    1305,
                    1565,
                    1446,
                    1575,
                    2087,
                    2345,
                    1325,
                    701,
                    1235,
                    1365,
                    1366,
                    2136,
                    604,
                    2528,
                    1254,
                    2152,
                    1137,
                    2168,
                    1277
                ],
                "plot": [
                    608
                ],
                "GroupByPlot": [
                    608
                ],
                "self._set_group_selection": [
                    1762,
                    1373,
                    613
                ],
                "self._selected_obj": [
                    2082,
                    2402,
                    2436,
                    1029,
                    2021,
                    1031,
                    617,
                    682,
                    970,
                    1035,
                    621,
                    1036,
                    751,
                    1773
                ],
                "types.MethodType": [
                    618
                ],
                "types": [
                    618
                ],
                "self.apply": [
                    641,
                    2178,
                    2147,
                    644,
                    1449,
                    619,
                    2193,
                    2163,
                    2356,
                    2334
                ],
                "sig": [
                    627,
                    622
                ],
                "inspect.signature": [
                    622
                ],
                "inspect": [
                    622
                ],
                "sig.parameters": [
                    627
                ],
                "kwargs.get": [
                    628
                ],
                "x": [
                    1408,
                    2178,
                    1412,
                    1413,
                    1414,
                    1416,
                    1418,
                    1419,
                    1421,
                    912,
                    1297,
                    2193,
                    1300,
                    2334,
                    1444,
                    1449,
                    2357,
                    1231,
                    1115,
                    1249,
                    2147,
                    632,
                    1389,
                    2163,
                    1398,
                    1400,
                    1401,
                    1403,
                    1405,
                    1406
                ],
                "curried.__name__": [
                    636
                ],
                "curried": [
                    641,
                    636,
                    644
                ],
                "base.plotting_methods": [
                    640
                ],
                "base": [
                    640,
                    864,
                    896,
                    867,
                    837,
                    901,
                    841,
                    937,
                    876,
                    915,
                    856,
                    2266,
                    2303
                ],
                "re.search": [
                    646
                ],
                "re": [
                    646
                ],
                "err": [
                    1381,
                    647
                ],
                "self._aggregate_item_by_item": [
                    658
                ],
                "wrapper.__name__": [
                    661
                ],
                "wrapper": [
                    661,
                    662
                ],
                "inds": [
                    688,
                    684,
                    685
                ],
                "self._get_index": [
                    684
                ],
                "obj.take": [
                    688
                ],
                "self.grouper.get_iterator": [
                    699
                ],
                "self._is_builtin_func": [
                    708,
                    911
                ],
                "np.errstate": [
                    718
                ],
                "wraps": [
                    716
                ],
                "nanops": [
                    721,
                    723
                ],
                "option_context": [
                    733
                ],
                "self._python_apply_general": [
                    746,
                    941,
                    735
                ],
                "_group_selection_context": [
                    2081,
                    2020,
                    1448,
                    745,
                    1301
                ],
                "values": [
                    1829,
                    949,
                    950,
                    951,
                    953,
                    963,
                    966,
                    969,
                    2271,
                    991,
                    2276,
                    1000,
                    2283,
                    751,
                    2289,
                    754,
                    1011,
                    1012,
                    1014,
                    1015,
                    2298
                ],
                "self.grouper.apply": [
                    751
                ],
                "self._wrap_applied_output": [
                    753
                ],
                "AbstractMethodError": [
                    865,
                    868,
                    871,
                    758,
                    761
                ],
                "Iterable": [
                    757
                ],
                "ids": [
                    775,
                    776,
                    777,
                    1768,
                    1771,
                    782,
                    1778
                ],
                "_": [
                    775,
                    1768,
                    849,
                    2483,
                    2265,
                    1818
                ],
                "ngroups": [
                    2274,
                    775,
                    776,
                    2293,
                    2265
                ],
                "self.grouper.group_info": [
                    1768,
                    2022,
                    775
                ],
                "sorter": [
                    776,
                    777,
                    792
                ],
                "get_group_index_sorter": [
                    776
                ],
                "count": [
                    777,
                    779,
                    783,
                    791,
                    792
                ],
                "np.empty": [
                    780,
                    1031,
                    791
                ],
                "np.int64": [
                    1889,
                    2338,
                    780,
                    1615,
                    793
                ],
                "run": [
                    782,
                    783,
                    784,
                    787,
                    789
                ],
                "np.r_": [
                    789,
                    782,
                    783
                ],
                "rep": [
                    787,
                    789,
                    783
                ],
                "np.diff": [
                    783
                ],
                "np.nonzero": [
                    783
                ],
                "out": [
                    1773,
                    1775,
                    784,
                    1778,
                    787,
                    789,
                    1781,
                    1783,
                    1784,
                    793
                ],
                "cumsum": [
                    784
                ],
                "ascending": [
                    2129,
                    786,
                    2083,
                    2023
                ],
                "np.repeat": [
                    787,
                    789
                ],
                "rev": [
                    792,
                    793,
                    791
                ],
                "np.intp": [
                    792,
                    1761,
                    791
                ],
                "np.arange": [
                    792,
                    1946,
                    1955
                ],
                "astype": [
                    793
                ],
                "obj.ndim": [
                    804
                ],
                "dtype": [
                    805,
                    807,
                    810,
                    817,
                    818,
                    819,
                    820
                ],
                "obj._values.dtype": [
                    805
                ],
                "obj._values": [
                    889,
                    805
                ],
                "obj.dtype": [
                    884,
                    844,
                    807
                ],
                "is_scalar": [
                    809,
                    1907
                ],
                "is_extension_array_dtype": [
                    810
                ],
                "dtype.kind": [
                    810
                ],
                "cls": [
                    1423,
                    1392,
                    817,
                    818,
                    1424,
                    1425,
                    1426,
                    1427,
                    1428
                ],
                "dtype.construct_array_type": [
                    817
                ],
                "try_cast_to_ea": [
                    818
                ],
                "numeric_only": [
                    1369,
                    885,
                    819,
                    845
                ],
                "is_numeric_dtype": [
                    884,
                    819,
                    844,
                    950
                ],
                "maybe_downcast_to_dtype": [
                    820
                ],
                "fillna": [
                    836
                ],
                "self.size": [
                    836
                ],
                "func_nm": [
                    837
                ],
                "base.cython_cast_blacklist": [
                    837
                ],
                "output": [
                    2304,
                    897,
                    2307,
                    2309,
                    902,
                    905,
                    908,
                    915,
                    2466,
                    2468,
                    2473,
                    938,
                    940,
                    2480,
                    946,
                    953,
                    955,
                    2493,
                    841,
                    2511,
                    2514,
                    2520,
                    857,
                    2266,
                    859,
                    2522,
                    862,
                    876
                ],
                "Dict": [
                    841,
                    2266,
                    915,
                    876
                ],
                "base.OutputKey": [
                    864,
                    896,
                    867,
                    901,
                    841,
                    937,
                    876,
                    915,
                    856,
                    2266,
                    2303
                ],
                "np.ndarray": [
                    864,
                    1121,
                    867,
                    1896,
                    841,
                    876,
                    915,
                    1881,
                    1113,
                    2266
                ],
                "idx": [
                    896,
                    898,
                    901,
                    903,
                    937,
                    842,
                    881,
                    917,
                    856,
                    2269,
                    2303
                ],
                "self._iterate_slices": [
                    2269,
                    842,
                    917,
                    882
                ],
                "obj.name": [
                    883,
                    843,
                    2270,
                    918
                ],
                "is_numeric": [
                    884,
                    885,
                    844,
                    845
                ],
                "self.grouper.transform": [
                    849
                ],
                "obj.values": [
                    849
                ],
                "how": [
                    849,
                    2267,
                    853,
                    889
                ],
                "self._transform_should_cast": [
                    853
                ],
                "self._try_cast": [
                    897,
                    902,
                    938,
                    854,
                    953
                ],
                "DataError": [
                    906,
                    860,
                    1378
                ],
                "self._wrap_transformed_output": [
                    2309,
                    862
                ],
                "DatetimeArray": [
                    876
                ],
                "agg_names": [
                    888,
                    892,
                    894,
                    895
                ],
                "self.grouper.aggregate": [
                    888
                ],
                "min_count": [
                    889,
                    1371
                ],
                "result.shape": [
                    894
                ],
                "result_column": [
                    897,
                    895
                ],
                "result_name": [
                    896,
                    895
                ],
                "result.T": [
                    1451,
                    895
                ],
                "result.ndim": [
                    900
                ],
                "self._wrap_aggregated_output": [
                    2307,
                    955,
                    908
                ],
                "counts": [
                    945,
                    935
                ],
                "self.grouper.agg_series": [
                    935
                ],
                "self.grouper._filter_empty_groups": [
                    943
                ],
                "mask": [
                    2435,
                    2436,
                    1031,
                    1032,
                    1033,
                    1035,
                    1036,
                    1829,
                    1832,
                    1833,
                    945,
                    953,
                    2401,
                    2402,
                    1766,
                    1771,
                    1773,
                    2289,
                    1778,
                    2290
                ],
                "counts.ravel": [
                    945
                ],
                "output.items": [
                    946
                ],
                "values.dtype": [
                    950
                ],
                "ensure_float": [
                    951
                ],
                "v": [
                    963,
                    964
                ],
                "com.not_none": [
                    963
                ],
                "v._get_axis": [
                    964
                ],
                "ax._reset_identity": [
                    965
                ],
                "not_indexed_same": [
                    968
                ],
                "concat": [
                    999,
                    969,
                    1934,
                    1012,
                    1015
                ],
                "self._selected_obj._get_axis": [
                    970
                ],
                "result.reindex": [
                    1841,
                    987,
                    973
                ],
                "MultiIndex": [
                    2483,
                    981
                ],
                "ax.is_unique": [
                    981
                ],
                "indexer": [
                    985,
                    982
                ],
                "algorithms.unique1d": [
                    982
                ],
                "algorithms": [
                    2298,
                    982
                ],
                "result.index.get_indexer_for": [
                    983
                ],
                "result.index": [
                    1952,
                    1839,
                    983,
                    1940,
                    1943,
                    1946
                ],
                "ax.values": [
                    983
                ],
                "result.take": [
                    985,
                    1956
                ],
                "reset_identity": [
                    1014,
                    991
                ],
                "group_levels": [
                    1003,
                    996
                ],
                "self.grouper.levels": [
                    996
                ],
                "group_names": [
                    1004,
                    997
                ],
                "self.grouper.names": [
                    2484,
                    997
                ],
                "self._selection_name": [
                    1017,
                    1019
                ],
                "result.name": [
                    1338,
                    1019
                ],
                "indices": [
                    1024,
                    1025,
                    1027,
                    1955,
                    1029,
                    1956,
                    1033
                ],
                "np.array": [
                    1025,
                    1115,
                    1761,
                    1943
                ],
                "np.sort": [
                    1027
                ],
                "dropna": [
                    1795,
                    1028,
                    1801,
                    1754,
                    1790
                ],
                "filtered": [
                    1037,
                    1036,
                    1029
                ],
                "self._selected_obj.take": [
                    1029
                ],
                "self._selected_obj.index": [
                    2082,
                    2021,
                    1031
                ],
                "mask.fill": [
                    1032
                ],
                "indices.astype": [
                    1033
                ],
                "T": [
                    1035,
                    1955
                ],
                "np.tile": [
                    1035
                ],
                "self._selected_obj.shape": [
                    1035
                ],
                "self._selected_obj.where": [
                    1036
                ],
                "_GroupBy": [
                    1040
                ],
                "is_object_dtype": [
                    1114,
                    1882
                ],
                "vals": [
                    1888,
                    1890,
                    1892,
                    1114,
                    1894,
                    2283,
                    2285,
                    2286,
                    1903,
                    1905,
                    1882,
                    1115,
                    1117,
                    1119
                ],
                "vals.astype": [
                    1892,
                    1117,
                    1903
                ],
                "np.bool": [
                    1117,
                    1119
                ],
                "vals.view": [
                    1119
                ],
                "np.uint8": [
                    2289,
                    1127,
                    1119
                ],
                "Tuple": [
                    1881,
                    1113
                ],
                "Type": [
                    1113,
                    1121,
                    1896,
                    2545,
                    1881
                ],
                "result.astype": [
                    1122
                ],
                "inference": [
                    1889,
                    1122,
                    1891,
                    1894,
                    1897,
                    1900,
                    1903,
                    1887
                ],
                "self._get_cythonized_result": [
                    2336,
                    1921,
                    1124,
                    1612,
                    1908
                ],
                "np.dtype": [
                    2338,
                    1926,
                    1127,
                    1615,
                    2200,
                    1913
                ],
                "objs_to_bool": [
                    1130
                ],
                "result_to_bool": [
                    1131
                ],
                "val_test": [
                    1132
                ],
                "skipna": [
                    1168,
                    1133,
                    1151
                ],
                "self._bool_agg": [
                    1168,
                    1151
                ],
                "nv.validate_groupby_func": [
                    2145,
                    1229,
                    1294,
                    2161,
                    1273
                ],
                "nv": [
                    2145,
                    1229,
                    1294,
                    2161,
                    1273
                ],
                "self._cython_agg_general": [
                    1296,
                    1377,
                    1230,
                    1247
                ],
                "mean": [
                    1231
                ],
                "median": [
                    1249
                ],
                "np.sqrt": [
                    1274,
                    1322
                ],
                "self.var": [
                    1274
                ],
                "ddof": [
                    1322,
                    1295,
                    1297,
                    1300,
                    1274
                ],
                "var": [
                    1297
                ],
                "x.var": [
                    1300
                ],
                "self._python_agg_general": [
                    1302
                ],
                "self.std": [
                    1322
                ],
                "self.count": [
                    1322
                ],
                "self.grouper.size": [
                    1335
                ],
                "self.obj.name": [
                    1338
                ],
                "self._reindex_output": [
                    1339,
                    1783
                ],
                "_local_template": [
                    1355,
                    1366
                ],
                "alias": [
                    1377
                ],
                "npfunc": [
                    1377,
                    1389
                ],
                "self.aggregate": [
                    1389
                ],
                "set_function_name": [
                    1392
                ],
                "x.to_numpy": [
                    1412,
                    1398
                ],
                "notna": [
                    1400,
                    1413
                ],
                "np.nan": [
                    1833,
                    1402,
                    1415
                ],
                "x.apply": [
                    1419,
                    1406
                ],
                "first": [
                    1408,
                    1406
                ],
                "last": [
                    1419,
                    1421
                ],
                "cls.sum": [
                    1423
                ],
                "groupby_function": [
                    1423,
                    1424,
                    1425,
                    1426,
                    1427,
                    1428
                ],
                "np.sum": [
                    1423
                ],
                "cls.prod": [
                    1424
                ],
                "np.prod": [
                    1424
                ],
                "cls.min": [
                    1425
                ],
                "np.min": [
                    1425
                ],
                "cls.max": [
                    1426
                ],
                "np.max": [
                    1426
                ],
                "cls.first": [
                    1427
                ],
                "first_compat": [
                    1427
                ],
                "cls.last": [
                    1428
                ],
                "last_compat": [
                    1428
                ],
                "self._apply_to_column_groupbys": [
                    1444
                ],
                "x._cython_agg_general": [
                    1444
                ],
                "x.describe": [
                    1449
                ],
                "result.unstack": [
                    1452
                ],
                "DataFrame.describe.__doc__": [
                    1446
                ],
                "DataFrame.describe": [
                    1446
                ],
                "get_resampler_for_grouping": [
                    1562
                ],
                "rule": [
                    1562
                ],
                "RollingGroupby": [
                    1572
                ],
                "ExpandingGroupby": [
                    1583
                ],
                "limit": [
                    1669,
                    1609,
                    1610,
                    1643,
                    1618,
                    2360,
                    2365
                ],
                "direction": [
                    1617
                ],
                "self._fill": [
                    1643,
                    1669
                ],
                "ffill": [
                    1645
                ],
                "pad": [
                    1645
                ],
                "bfill": [
                    1671
                ],
                "backfill": [
                    1671
                ],
                "valid_containers": [
                    1787,
                    1758,
                    1750,
                    1751
                ],
                "nth_values": [
                    1761,
                    1757,
                    1759
                ],
                "nth_array": [
                    1761,
                    1764,
                    1765
                ],
                "mask_left": [
                    1764,
                    1766
                ],
                "np.in1d": [
                    1764,
                    1765
                ],
                "self._cumcount_array": [
                    2401,
                    2083,
                    1764,
                    1765,
                    2435
                ],
                "mask_right": [
                    1765,
                    1766
                ],
                "result_index": [
                    1777,
                    1778,
                    1780,
                    1781
                ],
                "out.index": [
                    1778
                ],
                "CategoricalIndex": [
                    1780,
                    2477
                ],
                "out.reindex": [
                    1781
                ],
                "out.sort_index": [
                    1784
                ],
                "max_len": [
                    1800,
                    1829
                ],
                "dropped": [
                    1827,
                    1801,
                    1836,
                    1810,
                    1819
                ],
                "self.obj.dropna": [
                    1801
                ],
                "self.grouper.axis": [
                    1809
                ],
                "axis.isin": [
                    1810
                ],
                "dropped.index": [
                    1810
                ],
                "grb": [
                    1827,
                    1828
                ],
                "dropped.groupby": [
                    1827
                ],
                "sizes": [
                    1828,
                    1829
                ],
                "grb.size": [
                    1828
                ],
                "grb.nth": [
                    1828
                ],
                "mask.any": [
                    1832
                ],
                "result.loc": [
                    1833
                ],
                "is_integer_dtype": [
                    1888,
                    1900
                ],
                "is_datetime64_dtype": [
                    1890
                ],
                "np.float": [
                    1892
                ],
                "interpolation": [
                    1930,
                    1917,
                    1901
                ],
                "q": [
                    1955,
                    1932,
                    1934,
                    1907,
                    1916
                ],
                "np.float64": [
                    1913,
                    1926
                ],
                "pre_processor": [
                    1914,
                    1927
                ],
                "post_processor": [
                    1928,
                    1915
                ],
                "results": [
                    1920,
                    1934
                ],
                "qi": [
                    1929,
                    1932
                ],
                "order": [
                    1952,
                    1940,
                    1949
                ],
                "result.index.nlevels": [
                    1940
                ],
                "index_names": [
                    1952,
                    1946,
                    1943
                ],
                "result.index.names": [
                    1952,
                    1946,
                    1943
                ],
                "result.reorder_levels": [
                    1949
                ],
                "T.flatten": [
                    1955
                ],
                "reshape": [
                    1955
                ],
                "self.ngroups": [
                    2024,
                    1955
                ],
                "cumcounts": [
                    2083,
                    2084
                ],
                "na_option": [
                    2122,
                    2130
                ],
                "self._cython_transform": [
                    2180,
                    2149,
                    2125,
                    2195,
                    2165
                ],
                "method": [
                    2128
                ],
                "pct": [
                    2131
                ],
                "x.cumprod": [
                    2147
                ],
                "x.cumsum": [
                    2163
                ],
                "np.minimum.accumulate": [
                    2178
                ],
                "np.minimum": [
                    2178
                ],
                "np.maximum.accumulate": [
                    2193
                ],
                "np.maximum": [
                    2193
                ],
                "result_is_index": [
                    2297,
                    2250
                ],
                "aggregate": [
                    2273,
                    2250,
                    2306
                ],
                "post_processing": [
                    2252,
                    2301,
                    2300
                ],
                "pre_processing": [
                    2284,
                    2285,
                    2253,
                    2255,
                    2256
                ],
                "needs_values": [
                    2258,
                    2282
                ],
                "labels": [
                    2265,
                    2279
                ],
                "grouper.group_info": [
                    2265
                ],
                "base_func": [
                    2267,
                    2279
                ],
                "libgroupby": [
                    2267
                ],
                "obj._data._values": [
                    2271
                ],
                "obj._data": [
                    2271
                ],
                "result_sz": [
                    2274,
                    2276,
                    2278
                ],
                "np.zeros": [
                    2278
                ],
                "cython_dtype": [
                    2278
                ],
                "partial": [
                    2290,
                    2293,
                    2286,
                    2279
                ],
                "inferences": [
                    2280,
                    2301,
                    2285
                ],
                "needs_mask": [
                    2288
                ],
                "view": [
                    2289
                ],
                "isna": [
                    2289,
                    2333
                ],
                "needs_ngroups": [
                    2292
                ],
                "algorithms.take_nd": [
                    2298
                ],
                "freq": [
                    2355,
                    2361,
                    2333,
                    2334,
                    2367
                ],
                "fill_value": [
                    2515,
                    2491,
                    2333,
                    2334
                ],
                "x.shift": [
                    2334
                ],
                "periods": [
                    2358,
                    2341,
                    2334,
                    2367
                ],
                "x.pct_change": [
                    2357
                ],
                "fill_method": [
                    2365,
                    2359
                ],
                "filled": [
                    2368,
                    2365,
                    2366
                ],
                "fill_grp": [
                    2366,
                    2367
                ],
                "filled.groupby": [
                    2366
                ],
                "self.grouper.codes": [
                    2366
                ],
                "shifted": [
                    2368,
                    2367
                ],
                "fill_grp.shift": [
                    2367
                ],
                "self._reset_group_selection": [
                    2400,
                    2434
                ],
                "FrameOrSeries": [
                    2440,
                    2439
                ],
                "Scalar": [
                    2439
                ],
                "np.NaN": [
                    2439
                ],
                "groupings": [
                    2464,
                    2465,
                    2467,
                    2507,
                    2478,
                    2482
                ],
                "self.grouper.groupings": [
                    2464
                ],
                "ping.grouper": [
                    2477
                ],
                "ping": [
                    2482,
                    2507,
                    2477,
                    2478
                ],
                "Categorical": [
                    2477
                ],
                "levels_list": [
                    2482,
                    2484
                ],
                "ping.group_index": [
                    2482
                ],
                "sortlevel": [
                    2483
                ],
                "MultiIndex.from_product": [
                    2483
                ],
                "d": [
                    2488,
                    2493
                ],
                "self.obj._get_axis_name": [
                    2489
                ],
                "output.reindex": [
                    2493
                ],
                "in_axis_grps": [
                    2506,
                    2509
                ],
                "i": [
                    2507
                ],
                "ping.name": [
                    2507
                ],
                "ping.in_axis": [
                    2507
                ],
                "g_nums": [
                    2520,
                    2509
                ],
                "g_names": [
                    2509,
                    2511
                ],
                "output.drop": [
                    2511
                ],
                "reindex": [
                    2514
                ],
                "output.set_index": [
                    2514
                ],
                "output.reset_index": [
                    2520,
                    2522
                ],
                "GroupBy._add_numeric_operations": [
                    2525
                ],
                "GroupBy": [
                    2528,
                    2545,
                    2525,
                    2543
                ],
                "klass": [
                    2557,
                    2545,
                    2553,
                    2549
                ],
                "SeriesGroupBy": [
                    2549
                ],
                "DataFrameGroupBy": [
                    2553
                ],
                "by": [
                    2559
                ],
                "GroupBy.__doc__": [
                    2528
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_103/pandas/tests/groupby/test_transform.py",
                "test_function": "test_pct_change",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\n@pytest.mark.parametrize(\n    \"freq\",\n    [\n        None,\n        pytest.param(\n            \"D\",\n            marks=pytest.mark.xfail(\n                reason=\"GH#23918 before method uses freq in vectorized approach\"\n            ),\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"periods\", [1, -1])\n@pytest.mark.parametrize(\"fill_method\", [\"ffill\", \"bfill\", None])\n@pytest.mark.parametrize(\"limit\", [None, 1])\ndef test_pct_change(test_series, freq, periods, fill_method, limit):\n    # GH  21200, 21621, 30463\n    vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]\n    keys = [\"a\", \"b\"]\n    key_v = np.repeat(keys, len(vals))\n    df = DataFrame({\"key\": key_v, \"vals\": vals * 2})\n\n    df_g = df\n    if fill_method is not None:\n        df_g = getattr(df.groupby(\"key\"), fill_method)(limit=limit)\n    grp = df_g.groupby(df.key)\n\n    expected = grp[\"vals\"].obj / grp[\"vals\"].shift(periods) - 1\n\n    if test_series:\n        result = df.groupby(\"key\")[\"vals\"].pct_change(\n            periods=periods, fill_method=fill_method, limit=limit, freq=freq\n        )\n        tm.assert_series_equal(result, expected)\n    else:\n        result = df.groupby(\"key\").pct_change(\n            periods=periods, fill_method=fill_method, limit=limit, freq=freq\n        )\n        tm.assert_frame_equal(result, expected.to_frame(\"vals\"))",
                "test_error": "TypeError: getattr(): attribute name must be string",
                "full_test_error": "test_series = True, freq = None, periods = 1, fill_method = None, limit = None\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    @pytest.mark.parametrize(\n        \"freq\",\n        [\n            None,\n            pytest.param(\n                \"D\",\n                marks=pytest.mark.xfail(\n                    reason=\"GH#23918 before method uses freq in vectorized approach\"\n                ),\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"periods\", [1, -1])\n    @pytest.mark.parametrize(\"fill_method\", [\"ffill\", \"bfill\", None])\n    @pytest.mark.parametrize(\"limit\", [None, 1])\n    def test_pct_change(test_series, freq, periods, fill_method, limit):\n        # GH  21200, 21621, 30463\n        vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]\n        keys = [\"a\", \"b\"]\n        key_v = np.repeat(keys, len(vals))\n        df = DataFrame({\"key\": key_v, \"vals\": vals * 2})\n    \n        df_g = df\n        if fill_method is not None:\n            df_g = getattr(df.groupby(\"key\"), fill_method)(limit=limit)\n        grp = df_g.groupby(df.key)\n    \n        expected = grp[\"vals\"].obj / grp[\"vals\"].shift(periods) - 1\n    \n        if test_series:\n>           result = df.groupby(\"key\")[\"vals\"].pct_change(\n                periods=periods, fill_method=fill_method, limit=limit, freq=freq\n            )\n\npandas/tests/groupby/test_transform.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.groupby.generic.SeriesGroupBy object at 0x128ff65e0>\nperiods = 1, fill_method = None, limit = None, freq = None\n\n    def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None):\n        \"\"\"Calculate pct_change of each value to previous entry in group\"\"\"\n        # TODO: Remove this conditional when #23918 is fixed\n        if freq:\n            return self.apply(\n                lambda x: x.pct_change(\n                    periods=periods, fill_method=fill_method, limit=limit, freq=freq\n                )\n            )\n>       filled = getattr(self, fill_method)(limit=limit)\nE       TypeError: getattr(): attribute name must be string\n\npandas/core/groupby/generic.py:812: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])",
                    "pytest.mark.parametrize('freq', [None, pytest.param('D', marks=pytest.mark.xfail(reason='GH#23918 before method uses freq in vectorized approach'))])",
                    "pytest.mark.parametrize('periods', [1, -1])",
                    "pytest.mark.parametrize('fill_method', ['ffill', 'bfill', None])",
                    "pytest.mark.parametrize('limit', [None, 1])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_103/pandas/tests/groupby/test_transform.py",
                "test_function": "test_pct_change",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\n@pytest.mark.parametrize(\n    \"freq\",\n    [\n        None,\n        pytest.param(\n            \"D\",\n            marks=pytest.mark.xfail(\n                reason=\"GH#23918 before method uses freq in vectorized approach\"\n            ),\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"periods\", [1, -1])\n@pytest.mark.parametrize(\"fill_method\", [\"ffill\", \"bfill\", None])\n@pytest.mark.parametrize(\"limit\", [None, 1])\ndef test_pct_change(test_series, freq, periods, fill_method, limit):\n    # GH  21200, 21621, 30463\n    vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]\n    keys = [\"a\", \"b\"]\n    key_v = np.repeat(keys, len(vals))\n    df = DataFrame({\"key\": key_v, \"vals\": vals * 2})\n\n    df_g = df\n    if fill_method is not None:\n        df_g = getattr(df.groupby(\"key\"), fill_method)(limit=limit)\n    grp = df_g.groupby(df.key)\n\n    expected = grp[\"vals\"].obj / grp[\"vals\"].shift(periods) - 1\n\n    if test_series:\n        result = df.groupby(\"key\")[\"vals\"].pct_change(\n            periods=periods, fill_method=fill_method, limit=limit, freq=freq\n        )\n        tm.assert_series_equal(result, expected)\n    else:\n        result = df.groupby(\"key\").pct_change(\n            periods=periods, fill_method=fill_method, limit=limit, freq=freq\n        )\n        tm.assert_frame_equal(result, expected.to_frame(\"vals\"))",
                "test_error": "TypeError: getattr(): attribute name must be string",
                "full_test_error": "test_series = False, freq = None, periods = 1, fill_method = None, limit = None\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    @pytest.mark.parametrize(\n        \"freq\",\n        [\n            None,\n            pytest.param(\n                \"D\",\n                marks=pytest.mark.xfail(\n                    reason=\"GH#23918 before method uses freq in vectorized approach\"\n                ),\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"periods\", [1, -1])\n    @pytest.mark.parametrize(\"fill_method\", [\"ffill\", \"bfill\", None])\n    @pytest.mark.parametrize(\"limit\", [None, 1])\n    def test_pct_change(test_series, freq, periods, fill_method, limit):\n        # GH  21200, 21621, 30463\n        vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]\n        keys = [\"a\", \"b\"]\n        key_v = np.repeat(keys, len(vals))\n        df = DataFrame({\"key\": key_v, \"vals\": vals * 2})\n    \n        df_g = df\n        if fill_method is not None:\n            df_g = getattr(df.groupby(\"key\"), fill_method)(limit=limit)\n        grp = df_g.groupby(df.key)\n    \n        expected = grp[\"vals\"].obj / grp[\"vals\"].shift(periods) - 1\n    \n        if test_series:\n            result = df.groupby(\"key\")[\"vals\"].pct_change(\n                periods=periods, fill_method=fill_method, limit=limit, freq=freq\n            )\n            tm.assert_series_equal(result, expected)\n        else:\n>           result = df.groupby(\"key\").pct_change(\n                periods=periods, fill_method=fill_method, limit=limit, freq=freq\n            )\n\npandas/tests/groupby/test_transform.py:903: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12042be80>\nperiods = 1, fill_method = None, limit = None, freq = None, axis = 0\n\n    @Substitution(name=\"groupby\")\n    @Appender(_common_see_also)\n    def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None, axis=0):\n        \"\"\"\n        Calculate pct_change of each value to previous entry in group.\n    \n        Returns\n        -------\n        Series or DataFrame\n            Percentage changes within each group.\n        \"\"\"\n        if freq is not None or axis != 0:\n            return self.apply(\n                lambda x: x.pct_change(\n                    periods=periods,\n                    fill_method=fill_method,\n                    limit=limit,\n                    freq=freq,\n                    axis=axis,\n                )\n            )\n>       filled = getattr(self, fill_method)(limit=limit)\nE       TypeError: getattr(): attribute name must be string\n\npandas/core/groupby/groupby.py:2365: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])",
                    "pytest.mark.parametrize('freq', [None, pytest.param('D', marks=pytest.mark.xfail(reason='GH#23918 before method uses freq in vectorized approach'))])",
                    "pytest.mark.parametrize('periods', [1, -1])",
                    "pytest.mark.parametrize('fill_method', ['ffill', 'bfill', None])",
                    "pytest.mark.parametrize('limit', [None, 1])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_103/pandas/tests/groupby/test_transform.py",
                "test_function": "test_pct_change",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\n@pytest.mark.parametrize(\n    \"freq\",\n    [\n        None,\n        pytest.param(\n            \"D\",\n            marks=pytest.mark.xfail(\n                reason=\"GH#23918 before method uses freq in vectorized approach\"\n            ),\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"periods\", [1, -1])\n@pytest.mark.parametrize(\"fill_method\", [\"ffill\", \"bfill\", None])\n@pytest.mark.parametrize(\"limit\", [None, 1])\ndef test_pct_change(test_series, freq, periods, fill_method, limit):\n    # GH  21200, 21621, 30463\n    vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]\n    keys = [\"a\", \"b\"]\n    key_v = np.repeat(keys, len(vals))\n    df = DataFrame({\"key\": key_v, \"vals\": vals * 2})\n\n    df_g = df\n    if fill_method is not None:\n        df_g = getattr(df.groupby(\"key\"), fill_method)(limit=limit)\n    grp = df_g.groupby(df.key)\n\n    expected = grp[\"vals\"].obj / grp[\"vals\"].shift(periods) - 1\n\n    if test_series:\n        result = df.groupby(\"key\")[\"vals\"].pct_change(\n            periods=periods, fill_method=fill_method, limit=limit, freq=freq\n        )\n        tm.assert_series_equal(result, expected)\n    else:\n        result = df.groupby(\"key\").pct_change(\n            periods=periods, fill_method=fill_method, limit=limit, freq=freq\n        )\n        tm.assert_frame_equal(result, expected.to_frame(\"vals\"))",
                "test_error": "TypeError: getattr(): attribute name must be string",
                "full_test_error": "test_series = True, freq = None, periods = -1, fill_method = None, limit = None\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    @pytest.mark.parametrize(\n        \"freq\",\n        [\n            None,\n            pytest.param(\n                \"D\",\n                marks=pytest.mark.xfail(\n                    reason=\"GH#23918 before method uses freq in vectorized approach\"\n                ),\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"periods\", [1, -1])\n    @pytest.mark.parametrize(\"fill_method\", [\"ffill\", \"bfill\", None])\n    @pytest.mark.parametrize(\"limit\", [None, 1])\n    def test_pct_change(test_series, freq, periods, fill_method, limit):\n        # GH  21200, 21621, 30463\n        vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]\n        keys = [\"a\", \"b\"]\n        key_v = np.repeat(keys, len(vals))\n        df = DataFrame({\"key\": key_v, \"vals\": vals * 2})\n    \n        df_g = df\n        if fill_method is not None:\n            df_g = getattr(df.groupby(\"key\"), fill_method)(limit=limit)\n        grp = df_g.groupby(df.key)\n    \n        expected = grp[\"vals\"].obj / grp[\"vals\"].shift(periods) - 1\n    \n        if test_series:\n>           result = df.groupby(\"key\")[\"vals\"].pct_change(\n                periods=periods, fill_method=fill_method, limit=limit, freq=freq\n            )\n\npandas/tests/groupby/test_transform.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.groupby.generic.SeriesGroupBy object at 0x1204ae160>\nperiods = -1, fill_method = None, limit = None, freq = None\n\n    def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None):\n        \"\"\"Calculate pct_change of each value to previous entry in group\"\"\"\n        # TODO: Remove this conditional when #23918 is fixed\n        if freq:\n            return self.apply(\n                lambda x: x.pct_change(\n                    periods=periods, fill_method=fill_method, limit=limit, freq=freq\n                )\n            )\n>       filled = getattr(self, fill_method)(limit=limit)\nE       TypeError: getattr(): attribute name must be string\n\npandas/core/groupby/generic.py:812: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])",
                    "pytest.mark.parametrize('freq', [None, pytest.param('D', marks=pytest.mark.xfail(reason='GH#23918 before method uses freq in vectorized approach'))])",
                    "pytest.mark.parametrize('periods', [1, -1])",
                    "pytest.mark.parametrize('fill_method', ['ffill', 'bfill', None])",
                    "pytest.mark.parametrize('limit', [None, 1])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_103/pandas/tests/groupby/test_transform.py",
                "test_function": "test_pct_change",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\n@pytest.mark.parametrize(\n    \"freq\",\n    [\n        None,\n        pytest.param(\n            \"D\",\n            marks=pytest.mark.xfail(\n                reason=\"GH#23918 before method uses freq in vectorized approach\"\n            ),\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"periods\", [1, -1])\n@pytest.mark.parametrize(\"fill_method\", [\"ffill\", \"bfill\", None])\n@pytest.mark.parametrize(\"limit\", [None, 1])\ndef test_pct_change(test_series, freq, periods, fill_method, limit):\n    # GH  21200, 21621, 30463\n    vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]\n    keys = [\"a\", \"b\"]\n    key_v = np.repeat(keys, len(vals))\n    df = DataFrame({\"key\": key_v, \"vals\": vals * 2})\n\n    df_g = df\n    if fill_method is not None:\n        df_g = getattr(df.groupby(\"key\"), fill_method)(limit=limit)\n    grp = df_g.groupby(df.key)\n\n    expected = grp[\"vals\"].obj / grp[\"vals\"].shift(periods) - 1\n\n    if test_series:\n        result = df.groupby(\"key\")[\"vals\"].pct_change(\n            periods=periods, fill_method=fill_method, limit=limit, freq=freq\n        )\n        tm.assert_series_equal(result, expected)\n    else:\n        result = df.groupby(\"key\").pct_change(\n            periods=periods, fill_method=fill_method, limit=limit, freq=freq\n        )\n        tm.assert_frame_equal(result, expected.to_frame(\"vals\"))",
                "test_error": "TypeError: getattr(): attribute name must be string",
                "full_test_error": "test_series = False, freq = None, periods = -1, fill_method = None, limit = None\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    @pytest.mark.parametrize(\n        \"freq\",\n        [\n            None,\n            pytest.param(\n                \"D\",\n                marks=pytest.mark.xfail(\n                    reason=\"GH#23918 before method uses freq in vectorized approach\"\n                ),\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"periods\", [1, -1])\n    @pytest.mark.parametrize(\"fill_method\", [\"ffill\", \"bfill\", None])\n    @pytest.mark.parametrize(\"limit\", [None, 1])\n    def test_pct_change(test_series, freq, periods, fill_method, limit):\n        # GH  21200, 21621, 30463\n        vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]\n        keys = [\"a\", \"b\"]\n        key_v = np.repeat(keys, len(vals))\n        df = DataFrame({\"key\": key_v, \"vals\": vals * 2})\n    \n        df_g = df\n        if fill_method is not None:\n            df_g = getattr(df.groupby(\"key\"), fill_method)(limit=limit)\n        grp = df_g.groupby(df.key)\n    \n        expected = grp[\"vals\"].obj / grp[\"vals\"].shift(periods) - 1\n    \n        if test_series:\n            result = df.groupby(\"key\")[\"vals\"].pct_change(\n                periods=periods, fill_method=fill_method, limit=limit, freq=freq\n            )\n            tm.assert_series_equal(result, expected)\n        else:\n>           result = df.groupby(\"key\").pct_change(\n                periods=periods, fill_method=fill_method, limit=limit, freq=freq\n            )\n\npandas/tests/groupby/test_transform.py:903: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.groupby.generic.DataFrameGroupBy object at 0x1286e3af0>\nperiods = -1, fill_method = None, limit = None, freq = None, axis = 0\n\n    @Substitution(name=\"groupby\")\n    @Appender(_common_see_also)\n    def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None, axis=0):\n        \"\"\"\n        Calculate pct_change of each value to previous entry in group.\n    \n        Returns\n        -------\n        Series or DataFrame\n            Percentage changes within each group.\n        \"\"\"\n        if freq is not None or axis != 0:\n            return self.apply(\n                lambda x: x.pct_change(\n                    periods=periods,\n                    fill_method=fill_method,\n                    limit=limit,\n                    freq=freq,\n                    axis=axis,\n                )\n            )\n>       filled = getattr(self, fill_method)(limit=limit)\nE       TypeError: getattr(): attribute name must be string\n\npandas/core/groupby/groupby.py:2365: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])",
                    "pytest.mark.parametrize('freq', [None, pytest.param('D', marks=pytest.mark.xfail(reason='GH#23918 before method uses freq in vectorized approach'))])",
                    "pytest.mark.parametrize('periods', [1, -1])",
                    "pytest.mark.parametrize('fill_method', ['ffill', 'bfill', None])",
                    "pytest.mark.parametrize('limit', [None, 1])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_103/pandas/tests/groupby/test_transform.py",
                "test_function": "test_pct_change",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\n@pytest.mark.parametrize(\n    \"freq\",\n    [\n        None,\n        pytest.param(\n            \"D\",\n            marks=pytest.mark.xfail(\n                reason=\"GH#23918 before method uses freq in vectorized approach\"\n            ),\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"periods\", [1, -1])\n@pytest.mark.parametrize(\"fill_method\", [\"ffill\", \"bfill\", None])\n@pytest.mark.parametrize(\"limit\", [None, 1])\ndef test_pct_change(test_series, freq, periods, fill_method, limit):\n    # GH  21200, 21621, 30463\n    vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]\n    keys = [\"a\", \"b\"]\n    key_v = np.repeat(keys, len(vals))\n    df = DataFrame({\"key\": key_v, \"vals\": vals * 2})\n\n    df_g = df\n    if fill_method is not None:\n        df_g = getattr(df.groupby(\"key\"), fill_method)(limit=limit)\n    grp = df_g.groupby(df.key)\n\n    expected = grp[\"vals\"].obj / grp[\"vals\"].shift(periods) - 1\n\n    if test_series:\n        result = df.groupby(\"key\")[\"vals\"].pct_change(\n            periods=periods, fill_method=fill_method, limit=limit, freq=freq\n        )\n        tm.assert_series_equal(result, expected)\n    else:\n        result = df.groupby(\"key\").pct_change(\n            periods=periods, fill_method=fill_method, limit=limit, freq=freq\n        )\n        tm.assert_frame_equal(result, expected.to_frame(\"vals\"))",
                "test_error": "TypeError: getattr(): attribute name must be string",
                "full_test_error": "test_series = True, freq = None, periods = 1, fill_method = None, limit = 1\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    @pytest.mark.parametrize(\n        \"freq\",\n        [\n            None,\n            pytest.param(\n                \"D\",\n                marks=pytest.mark.xfail(\n                    reason=\"GH#23918 before method uses freq in vectorized approach\"\n                ),\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"periods\", [1, -1])\n    @pytest.mark.parametrize(\"fill_method\", [\"ffill\", \"bfill\", None])\n    @pytest.mark.parametrize(\"limit\", [None, 1])\n    def test_pct_change(test_series, freq, periods, fill_method, limit):\n        # GH  21200, 21621, 30463\n        vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]\n        keys = [\"a\", \"b\"]\n        key_v = np.repeat(keys, len(vals))\n        df = DataFrame({\"key\": key_v, \"vals\": vals * 2})\n    \n        df_g = df\n        if fill_method is not None:\n            df_g = getattr(df.groupby(\"key\"), fill_method)(limit=limit)\n        grp = df_g.groupby(df.key)\n    \n        expected = grp[\"vals\"].obj / grp[\"vals\"].shift(periods) - 1\n    \n        if test_series:\n>           result = df.groupby(\"key\")[\"vals\"].pct_change(\n                periods=periods, fill_method=fill_method, limit=limit, freq=freq\n            )\n\npandas/tests/groupby/test_transform.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.groupby.generic.SeriesGroupBy object at 0x128541dc0>\nperiods = 1, fill_method = None, limit = 1, freq = None\n\n    def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None):\n        \"\"\"Calculate pct_change of each value to previous entry in group\"\"\"\n        # TODO: Remove this conditional when #23918 is fixed\n        if freq:\n            return self.apply(\n                lambda x: x.pct_change(\n                    periods=periods, fill_method=fill_method, limit=limit, freq=freq\n                )\n            )\n>       filled = getattr(self, fill_method)(limit=limit)\nE       TypeError: getattr(): attribute name must be string\n\npandas/core/groupby/generic.py:812: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])",
                    "pytest.mark.parametrize('freq', [None, pytest.param('D', marks=pytest.mark.xfail(reason='GH#23918 before method uses freq in vectorized approach'))])",
                    "pytest.mark.parametrize('periods', [1, -1])",
                    "pytest.mark.parametrize('fill_method', ['ffill', 'bfill', None])",
                    "pytest.mark.parametrize('limit', [None, 1])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_103/pandas/tests/groupby/test_transform.py",
                "test_function": "test_pct_change",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\n@pytest.mark.parametrize(\n    \"freq\",\n    [\n        None,\n        pytest.param(\n            \"D\",\n            marks=pytest.mark.xfail(\n                reason=\"GH#23918 before method uses freq in vectorized approach\"\n            ),\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"periods\", [1, -1])\n@pytest.mark.parametrize(\"fill_method\", [\"ffill\", \"bfill\", None])\n@pytest.mark.parametrize(\"limit\", [None, 1])\ndef test_pct_change(test_series, freq, periods, fill_method, limit):\n    # GH  21200, 21621, 30463\n    vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]\n    keys = [\"a\", \"b\"]\n    key_v = np.repeat(keys, len(vals))\n    df = DataFrame({\"key\": key_v, \"vals\": vals * 2})\n\n    df_g = df\n    if fill_method is not None:\n        df_g = getattr(df.groupby(\"key\"), fill_method)(limit=limit)\n    grp = df_g.groupby(df.key)\n\n    expected = grp[\"vals\"].obj / grp[\"vals\"].shift(periods) - 1\n\n    if test_series:\n        result = df.groupby(\"key\")[\"vals\"].pct_change(\n            periods=periods, fill_method=fill_method, limit=limit, freq=freq\n        )\n        tm.assert_series_equal(result, expected)\n    else:\n        result = df.groupby(\"key\").pct_change(\n            periods=periods, fill_method=fill_method, limit=limit, freq=freq\n        )\n        tm.assert_frame_equal(result, expected.to_frame(\"vals\"))",
                "test_error": "TypeError: getattr(): attribute name must be string",
                "full_test_error": "test_series = False, freq = None, periods = 1, fill_method = None, limit = 1\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    @pytest.mark.parametrize(\n        \"freq\",\n        [\n            None,\n            pytest.param(\n                \"D\",\n                marks=pytest.mark.xfail(\n                    reason=\"GH#23918 before method uses freq in vectorized approach\"\n                ),\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"periods\", [1, -1])\n    @pytest.mark.parametrize(\"fill_method\", [\"ffill\", \"bfill\", None])\n    @pytest.mark.parametrize(\"limit\", [None, 1])\n    def test_pct_change(test_series, freq, periods, fill_method, limit):\n        # GH  21200, 21621, 30463\n        vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]\n        keys = [\"a\", \"b\"]\n        key_v = np.repeat(keys, len(vals))\n        df = DataFrame({\"key\": key_v, \"vals\": vals * 2})\n    \n        df_g = df\n        if fill_method is not None:\n            df_g = getattr(df.groupby(\"key\"), fill_method)(limit=limit)\n        grp = df_g.groupby(df.key)\n    \n        expected = grp[\"vals\"].obj / grp[\"vals\"].shift(periods) - 1\n    \n        if test_series:\n            result = df.groupby(\"key\")[\"vals\"].pct_change(\n                periods=periods, fill_method=fill_method, limit=limit, freq=freq\n            )\n            tm.assert_series_equal(result, expected)\n        else:\n>           result = df.groupby(\"key\").pct_change(\n                periods=periods, fill_method=fill_method, limit=limit, freq=freq\n            )\n\npandas/tests/groupby/test_transform.py:903: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.groupby.generic.DataFrameGroupBy object at 0x128fd58b0>\nperiods = 1, fill_method = None, limit = 1, freq = None, axis = 0\n\n    @Substitution(name=\"groupby\")\n    @Appender(_common_see_also)\n    def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None, axis=0):\n        \"\"\"\n        Calculate pct_change of each value to previous entry in group.\n    \n        Returns\n        -------\n        Series or DataFrame\n            Percentage changes within each group.\n        \"\"\"\n        if freq is not None or axis != 0:\n            return self.apply(\n                lambda x: x.pct_change(\n                    periods=periods,\n                    fill_method=fill_method,\n                    limit=limit,\n                    freq=freq,\n                    axis=axis,\n                )\n            )\n>       filled = getattr(self, fill_method)(limit=limit)\nE       TypeError: getattr(): attribute name must be string\n\npandas/core/groupby/groupby.py:2365: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])",
                    "pytest.mark.parametrize('freq', [None, pytest.param('D', marks=pytest.mark.xfail(reason='GH#23918 before method uses freq in vectorized approach'))])",
                    "pytest.mark.parametrize('periods', [1, -1])",
                    "pytest.mark.parametrize('fill_method', ['ffill', 'bfill', None])",
                    "pytest.mark.parametrize('limit', [None, 1])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_103/pandas/tests/groupby/test_transform.py",
                "test_function": "test_pct_change",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\n@pytest.mark.parametrize(\n    \"freq\",\n    [\n        None,\n        pytest.param(\n            \"D\",\n            marks=pytest.mark.xfail(\n                reason=\"GH#23918 before method uses freq in vectorized approach\"\n            ),\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"periods\", [1, -1])\n@pytest.mark.parametrize(\"fill_method\", [\"ffill\", \"bfill\", None])\n@pytest.mark.parametrize(\"limit\", [None, 1])\ndef test_pct_change(test_series, freq, periods, fill_method, limit):\n    # GH  21200, 21621, 30463\n    vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]\n    keys = [\"a\", \"b\"]\n    key_v = np.repeat(keys, len(vals))\n    df = DataFrame({\"key\": key_v, \"vals\": vals * 2})\n\n    df_g = df\n    if fill_method is not None:\n        df_g = getattr(df.groupby(\"key\"), fill_method)(limit=limit)\n    grp = df_g.groupby(df.key)\n\n    expected = grp[\"vals\"].obj / grp[\"vals\"].shift(periods) - 1\n\n    if test_series:\n        result = df.groupby(\"key\")[\"vals\"].pct_change(\n            periods=periods, fill_method=fill_method, limit=limit, freq=freq\n        )\n        tm.assert_series_equal(result, expected)\n    else:\n        result = df.groupby(\"key\").pct_change(\n            periods=periods, fill_method=fill_method, limit=limit, freq=freq\n        )\n        tm.assert_frame_equal(result, expected.to_frame(\"vals\"))",
                "test_error": "TypeError: getattr(): attribute name must be string",
                "full_test_error": "test_series = True, freq = None, periods = -1, fill_method = None, limit = 1\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    @pytest.mark.parametrize(\n        \"freq\",\n        [\n            None,\n            pytest.param(\n                \"D\",\n                marks=pytest.mark.xfail(\n                    reason=\"GH#23918 before method uses freq in vectorized approach\"\n                ),\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"periods\", [1, -1])\n    @pytest.mark.parametrize(\"fill_method\", [\"ffill\", \"bfill\", None])\n    @pytest.mark.parametrize(\"limit\", [None, 1])\n    def test_pct_change(test_series, freq, periods, fill_method, limit):\n        # GH  21200, 21621, 30463\n        vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]\n        keys = [\"a\", \"b\"]\n        key_v = np.repeat(keys, len(vals))\n        df = DataFrame({\"key\": key_v, \"vals\": vals * 2})\n    \n        df_g = df\n        if fill_method is not None:\n            df_g = getattr(df.groupby(\"key\"), fill_method)(limit=limit)\n        grp = df_g.groupby(df.key)\n    \n        expected = grp[\"vals\"].obj / grp[\"vals\"].shift(periods) - 1\n    \n        if test_series:\n>           result = df.groupby(\"key\")[\"vals\"].pct_change(\n                periods=periods, fill_method=fill_method, limit=limit, freq=freq\n            )\n\npandas/tests/groupby/test_transform.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.groupby.generic.SeriesGroupBy object at 0x128f9c3a0>\nperiods = -1, fill_method = None, limit = 1, freq = None\n\n    def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None):\n        \"\"\"Calculate pct_change of each value to previous entry in group\"\"\"\n        # TODO: Remove this conditional when #23918 is fixed\n        if freq:\n            return self.apply(\n                lambda x: x.pct_change(\n                    periods=periods, fill_method=fill_method, limit=limit, freq=freq\n                )\n            )\n>       filled = getattr(self, fill_method)(limit=limit)\nE       TypeError: getattr(): attribute name must be string\n\npandas/core/groupby/generic.py:812: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])",
                    "pytest.mark.parametrize('freq', [None, pytest.param('D', marks=pytest.mark.xfail(reason='GH#23918 before method uses freq in vectorized approach'))])",
                    "pytest.mark.parametrize('periods', [1, -1])",
                    "pytest.mark.parametrize('fill_method', ['ffill', 'bfill', None])",
                    "pytest.mark.parametrize('limit', [None, 1])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_103/pandas/tests/groupby/test_transform.py",
                "test_function": "test_pct_change",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\n@pytest.mark.parametrize(\n    \"freq\",\n    [\n        None,\n        pytest.param(\n            \"D\",\n            marks=pytest.mark.xfail(\n                reason=\"GH#23918 before method uses freq in vectorized approach\"\n            ),\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"periods\", [1, -1])\n@pytest.mark.parametrize(\"fill_method\", [\"ffill\", \"bfill\", None])\n@pytest.mark.parametrize(\"limit\", [None, 1])\ndef test_pct_change(test_series, freq, periods, fill_method, limit):\n    # GH  21200, 21621, 30463\n    vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]\n    keys = [\"a\", \"b\"]\n    key_v = np.repeat(keys, len(vals))\n    df = DataFrame({\"key\": key_v, \"vals\": vals * 2})\n\n    df_g = df\n    if fill_method is not None:\n        df_g = getattr(df.groupby(\"key\"), fill_method)(limit=limit)\n    grp = df_g.groupby(df.key)\n\n    expected = grp[\"vals\"].obj / grp[\"vals\"].shift(periods) - 1\n\n    if test_series:\n        result = df.groupby(\"key\")[\"vals\"].pct_change(\n            periods=periods, fill_method=fill_method, limit=limit, freq=freq\n        )\n        tm.assert_series_equal(result, expected)\n    else:\n        result = df.groupby(\"key\").pct_change(\n            periods=periods, fill_method=fill_method, limit=limit, freq=freq\n        )\n        tm.assert_frame_equal(result, expected.to_frame(\"vals\"))",
                "test_error": "TypeError: getattr(): attribute name must be string",
                "full_test_error": "test_series = False, freq = None, periods = -1, fill_method = None, limit = 1\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    @pytest.mark.parametrize(\n        \"freq\",\n        [\n            None,\n            pytest.param(\n                \"D\",\n                marks=pytest.mark.xfail(\n                    reason=\"GH#23918 before method uses freq in vectorized approach\"\n                ),\n            ),\n        ],\n    )\n    @pytest.mark.parametrize(\"periods\", [1, -1])\n    @pytest.mark.parametrize(\"fill_method\", [\"ffill\", \"bfill\", None])\n    @pytest.mark.parametrize(\"limit\", [None, 1])\n    def test_pct_change(test_series, freq, periods, fill_method, limit):\n        # GH  21200, 21621, 30463\n        vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]\n        keys = [\"a\", \"b\"]\n        key_v = np.repeat(keys, len(vals))\n        df = DataFrame({\"key\": key_v, \"vals\": vals * 2})\n    \n        df_g = df\n        if fill_method is not None:\n            df_g = getattr(df.groupby(\"key\"), fill_method)(limit=limit)\n        grp = df_g.groupby(df.key)\n    \n        expected = grp[\"vals\"].obj / grp[\"vals\"].shift(periods) - 1\n    \n        if test_series:\n            result = df.groupby(\"key\")[\"vals\"].pct_change(\n                periods=periods, fill_method=fill_method, limit=limit, freq=freq\n            )\n            tm.assert_series_equal(result, expected)\n        else:\n>           result = df.groupby(\"key\").pct_change(\n                periods=periods, fill_method=fill_method, limit=limit, freq=freq\n            )\n\npandas/tests/groupby/test_transform.py:903: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.groupby.generic.DataFrameGroupBy object at 0x12841edf0>\nperiods = -1, fill_method = None, limit = 1, freq = None, axis = 0\n\n    @Substitution(name=\"groupby\")\n    @Appender(_common_see_also)\n    def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None, axis=0):\n        \"\"\"\n        Calculate pct_change of each value to previous entry in group.\n    \n        Returns\n        -------\n        Series or DataFrame\n            Percentage changes within each group.\n        \"\"\"\n        if freq is not None or axis != 0:\n            return self.apply(\n                lambda x: x.pct_change(\n                    periods=periods,\n                    fill_method=fill_method,\n                    limit=limit,\n                    freq=freq,\n                    axis=axis,\n                )\n            )\n>       filled = getattr(self, fill_method)(limit=limit)\nE       TypeError: getattr(): attribute name must be string\n\npandas/core/groupby/groupby.py:2365: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])",
                    "pytest.mark.parametrize('freq', [None, pytest.param('D', marks=pytest.mark.xfail(reason='GH#23918 before method uses freq in vectorized approach'))])",
                    "pytest.mark.parametrize('periods', [1, -1])",
                    "pytest.mark.parametrize('fill_method', ['ffill', 'bfill', None])",
                    "pytest.mark.parametrize('limit', [None, 1])"
                ]
            }
        ]
    }
}