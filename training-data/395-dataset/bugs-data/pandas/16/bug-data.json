{
    "pandas:16": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_16/pandas/core/indexes/datetimelike.py": {
            "buggy_functions": [
                {
                    "function_name": "_make_wrapped_arith_op_with_freq",
                    "function_code": "def _make_wrapped_arith_op_with_freq(opname: str):\n    \"\"\"\n    Dispatch the operation to the underlying ExtensionArray, and infer\n    the appropriate frequency for the result.\n    \"\"\"\n    meth = make_wrapped_arith_op(opname)\n\n    def wrapped(self, other):\n        result = meth(self, other)\n        if result is NotImplemented:\n            return NotImplemented\n\n        new_freq = self._get_addsub_freq(other)\n        result._freq = new_freq\n        return result\n\n    wrapped.__name__ = opname\n    return wrapped\n",
                    "decorators": [],
                    "docstring": "Dispatch the operation to the underlying ExtensionArray, and infer\nthe appropriate frequency for the result.",
                    "start_line": 79,
                    "variables": {
                        "str": [
                            79
                        ],
                        "meth": [
                            84,
                            87
                        ],
                        "make_wrapped_arith_op": [
                            84
                        ],
                        "opname": [
                            84,
                            95
                        ],
                        "result": [
                            88,
                            92,
                            93,
                            87
                        ],
                        "self": [
                            91,
                            87
                        ],
                        "other": [
                            91,
                            87
                        ],
                        "NotImplemented": [
                            88,
                            89
                        ],
                        "new_freq": [
                            91,
                            92
                        ],
                        "self._get_addsub_freq": [
                            91
                        ],
                        "result._freq": [
                            92
                        ],
                        "wrapped.__name__": [
                            95
                        ],
                        "wrapped": [
                            96,
                            95
                        ]
                    },
                    "filtered_variables": {
                        "meth": [
                            84,
                            87
                        ],
                        "make_wrapped_arith_op": [
                            84
                        ],
                        "opname": [
                            84,
                            95
                        ],
                        "result": [
                            88,
                            92,
                            93,
                            87
                        ],
                        "self": [
                            91,
                            87
                        ],
                        "other": [
                            91,
                            87
                        ],
                        "new_freq": [
                            91,
                            92
                        ],
                        "self._get_addsub_freq": [
                            91
                        ],
                        "result._freq": [
                            92
                        ],
                        "wrapped.__name__": [
                            95
                        ],
                        "wrapped": [
                            96,
                            95
                        ]
                    },
                    "diff_line_number": 91,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "meth": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__add__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "meth": {
                                    "variable_value": "<function make_wrapped_arith_op.<locals>.method at 0x10c7129d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__add__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": "'__add__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "wrapped": {
                                    "variable_value": "<function _make_wrapped_arith_op_with_freq.<locals>.wrapped at 0x10c712a60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "meth": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "meth": {
                                    "variable_value": "<function make_wrapped_arith_op.<locals>.method at 0x10c717040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "wrapped": {
                                    "variable_value": "<function _make_wrapped_arith_op_with_freq.<locals>.wrapped at 0x10c7170d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "meth": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "meth": {
                                    "variable_value": "<function make_wrapped_arith_op.<locals>.method at 0x10c717040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": "Index([<-12 * MonthEnds>, <-11 * MonthEnds>, <-10 * MonthEnds>,\n       <-9 * MonthEnds>],\n      dtype='object', name='idx')",
                                    "variable_type": "Index",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'], dtype='period[M]', name='idx', freq='M')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "4"
                                },
                                "other": {
                                    "variable_value": "Period('2012-01', 'M')",
                                    "variable_type": "Period",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": "<MonthEnd>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": "<bound method DatetimeIndexOpsMixin._get_addsub_freq of PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'], dtype='period[M]', name='idx', freq='M')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": "<MonthEnd>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "wrapped": {
                                    "variable_value": "<function _make_wrapped_arith_op_with_freq.<locals>.wrapped at 0x10c7170d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "meth": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "meth": {
                                    "variable_value": "<function make_wrapped_arith_op.<locals>.method at 0x10c717040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": "Index([<-12 * MonthEnds>, <-11 * MonthEnds>, <-10 * MonthEnds>,\n       <-9 * MonthEnds>],\n      dtype='object', name='idx')",
                                    "variable_type": "Index",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'], dtype='period[M]', name='idx', freq='M')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "4"
                                },
                                "other": {
                                    "variable_value": "Period('2012-01', 'M')",
                                    "variable_type": "Period",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": "<MonthEnd>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": "<bound method DatetimeIndexOpsMixin._get_addsub_freq of PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'], dtype='period[M]', name='idx', freq='M')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": "<MonthEnd>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "wrapped": {
                                    "variable_value": "<function _make_wrapped_arith_op_with_freq.<locals>.wrapped at 0x10c7170d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "meth": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "meth": {
                                    "variable_value": "<function make_wrapped_arith_op.<locals>.method at 0x10c717040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": "TimedeltaIndex([NaT, NaT, NaT, NaT], dtype='timedelta64[ns]', name='idx', freq='M')",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'], dtype='period[M]', name='idx', freq='M')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "4"
                                },
                                "other": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": "<MonthEnd>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": "<bound method DatetimeIndexOpsMixin._get_addsub_freq of PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'], dtype='period[M]', name='idx', freq='M')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": "<MonthEnd>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "wrapped": {
                                    "variable_value": "<function _make_wrapped_arith_op_with_freq.<locals>.wrapped at 0x10c7170d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "meth": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__add__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "meth": {
                                    "variable_value": "<function make_wrapped_arith_op.<locals>.method at 0x10f09a9d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__add__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": "'__add__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "wrapped": {
                                    "variable_value": "<function _make_wrapped_arith_op_with_freq.<locals>.wrapped at 0x10f09aa60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "meth": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "meth": {
                                    "variable_value": "<function make_wrapped_arith_op.<locals>.method at 0x10f09f040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "wrapped": {
                                    "variable_value": "<function _make_wrapped_arith_op_with_freq.<locals>.wrapped at 0x10f09f0d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "meth": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "meth": {
                                    "variable_value": "<function make_wrapped_arith_op.<locals>.method at 0x10f09f040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": "Index([<-12 * MonthEnds>, <-11 * MonthEnds>, <-10 * MonthEnds>,\n       <-9 * MonthEnds>],\n      dtype='object', name='idx')",
                                    "variable_type": "Index",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'], dtype='period[M]', name='idx', freq='M')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "4"
                                },
                                "other": {
                                    "variable_value": "Period('2012-01', 'M')",
                                    "variable_type": "Period",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": "<bound method DatetimeIndexOpsMixin._get_addsub_freq of PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'], dtype='period[M]', name='idx', freq='M')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "wrapped": {
                                    "variable_value": "<function _make_wrapped_arith_op_with_freq.<locals>.wrapped at 0x10f09f0d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "meth": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "meth": {
                                    "variable_value": "<function make_wrapped_arith_op.<locals>.method at 0x10f09f040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": "Index([<-12 * MonthEnds>, <-11 * MonthEnds>, <-10 * MonthEnds>,\n       <-9 * MonthEnds>],\n      dtype='object', name='idx')",
                                    "variable_type": "Index",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'], dtype='period[M]', name='idx', freq='M')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "4"
                                },
                                "other": {
                                    "variable_value": "Period('2012-01', 'M')",
                                    "variable_type": "Period",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": "<bound method DatetimeIndexOpsMixin._get_addsub_freq of PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'], dtype='period[M]', name='idx', freq='M')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "wrapped": {
                                    "variable_value": "<function _make_wrapped_arith_op_with_freq.<locals>.wrapped at 0x10f09f0d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "meth": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wrapped": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "meth": {
                                    "variable_value": "<function make_wrapped_arith_op.<locals>.method at 0x10f09f040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "make_wrapped_arith_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opname": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "result": {
                                    "variable_value": "TimedeltaIndex([NaT, NaT, NaT, NaT], dtype='timedelta64[ns]', name='idx', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'], dtype='period[M]', name='idx', freq='M')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "4"
                                },
                                "other": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_addsub_freq": {
                                    "variable_value": "<bound method DatetimeIndexOpsMixin._get_addsub_freq of PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'], dtype='period[M]', name='idx', freq='M')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result._freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "wrapped.__name__": {
                                    "variable_value": "'__sub__'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "wrapped": {
                                    "variable_value": "<function _make_wrapped_arith_op_with_freq.<locals>.wrapped at 0x10f09f0d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "_get_addsub_freq",
                    "function_code": "def _get_addsub_freq(self, other) -> Optional[DateOffset]:\n    \"\"\"\n    Find the freq we expect the result of an addition/subtraction operation\n    to have.\n    \"\"\"\n    if is_period_dtype(self.dtype):\n        # Only used for ops that stay PeriodDtype\n        return self.freq\n    elif self.freq is None:\n        return None\n    elif lib.is_scalar(other) and isna(other):\n        return None\n\n    elif isinstance(other, (Tick, timedelta, np.timedelta64)):\n        new_freq = None\n        if isinstance(self.freq, Tick):\n            new_freq = self.freq\n        return new_freq\n\n    elif isinstance(other, DateOffset):\n        # otherwise just DatetimeArray\n        return None  # TODO: Should we infer if it matches self.freq * n?\n    elif isinstance(other, (datetime, np.datetime64)):\n        return self.freq\n\n    elif is_timedelta64_dtype(other):\n        return None  # TODO: shouldnt we be able to do self.freq + other.freq?\n    elif is_object_dtype(other):\n        return None  # TODO: is this quite right?  sometimes we unpack singletons\n    elif is_datetime64_any_dtype(other):\n        return None  # TODO: shouldnt we be able to do self.freq + other.freq?\n    else:\n        raise NotImplementedError\n",
                    "decorators": [],
                    "docstring": "Find the freq we expect the result of an addition/subtraction operation\nto have.",
                    "start_line": 454,
                    "variables": {
                        "is_period_dtype": [
                            459
                        ],
                        "self.dtype": [
                            459
                        ],
                        "self": [
                            459,
                            461,
                            462,
                            469,
                            470,
                            477
                        ],
                        "self.freq": [
                            461,
                            462,
                            469,
                            470,
                            477
                        ],
                        "lib.is_scalar": [
                            464
                        ],
                        "lib": [
                            464
                        ],
                        "other": [
                            481,
                            483,
                            464,
                            467,
                            473,
                            476,
                            479
                        ],
                        "isna": [
                            464
                        ],
                        "isinstance": [
                            473,
                            467,
                            476,
                            469
                        ],
                        "Tick": [
                            467,
                            469
                        ],
                        "timedelta": [
                            467
                        ],
                        "np.timedelta64": [
                            467
                        ],
                        "np": [
                            467,
                            476
                        ],
                        "new_freq": [
                            468,
                            470,
                            471
                        ],
                        "DateOffset": [
                            473,
                            454
                        ],
                        "datetime": [
                            476
                        ],
                        "np.datetime64": [
                            476
                        ],
                        "is_timedelta64_dtype": [
                            479
                        ],
                        "is_object_dtype": [
                            481
                        ],
                        "is_datetime64_any_dtype": [
                            483
                        ],
                        "NotImplementedError": [
                            486
                        ],
                        "Optional": [
                            454
                        ]
                    },
                    "filtered_variables": {
                        "is_period_dtype": [
                            459
                        ],
                        "self.dtype": [
                            459
                        ],
                        "self": [
                            459,
                            461,
                            462,
                            469,
                            470,
                            477
                        ],
                        "self.freq": [
                            461,
                            462,
                            469,
                            470,
                            477
                        ],
                        "lib.is_scalar": [
                            464
                        ],
                        "lib": [
                            464
                        ],
                        "other": [
                            481,
                            483,
                            464,
                            467,
                            473,
                            476,
                            479
                        ],
                        "isna": [
                            464
                        ],
                        "Tick": [
                            467,
                            469
                        ],
                        "timedelta": [
                            467
                        ],
                        "np.timedelta64": [
                            467
                        ],
                        "np": [
                            467,
                            476
                        ],
                        "new_freq": [
                            468,
                            470,
                            471
                        ],
                        "DateOffset": [
                            473,
                            454
                        ],
                        "datetime": [
                            476
                        ],
                        "np.datetime64": [
                            476
                        ],
                        "is_timedelta64_dtype": [
                            479
                        ],
                        "is_object_dtype": [
                            481
                        ],
                        "is_datetime64_any_dtype": [
                            483
                        ],
                        "Optional": [
                            454
                        ]
                    },
                    "diff_line_number": 454,
                    "class_data": {
                        "signature": "class DatetimeIndexOpsMixin(ExtensionIndex)",
                        "docstring": "Common ops mixin to support a unified interface datetimelike Index.",
                        "constructor_docstring": null,
                        "functions": [
                            "@property\ndef is_all_dates(self) -> bool:\n    return True",
                            "@property\ndef values(self):\n    return self._data._data",
                            "def __array_wrap__(self, result, context=None):\n    \"\"\"\n    Gets called after a ufunc.\n    \"\"\"\n    result = lib.item_from_zerodim(result)\n    if is_bool_dtype(result) or lib.is_scalar(result):\n        return result\n    attrs = self._get_attributes_dict()\n    if not is_period_dtype(self) and attrs['freq']:\n        attrs['freq'] = 'infer'\n    return Index(result, **attrs)",
                            "def equals(self, other) -> bool:\n    \"\"\"\n    Determines if two Index objects contain the same elements.\n    \"\"\"\n    if self.is_(other):\n        return True\n    if not isinstance(other, ABCIndexClass):\n        return False\n    elif not isinstance(other, type(self)):\n        try:\n            other = type(self)(other)\n        except (ValueError, TypeError, OverflowError):\n            return False\n    if not is_dtype_equal(self.dtype, other.dtype):\n        return False\n    return np.array_equal(self.asi8, other.asi8)",
                            "@Appender(Index.__contains__.__doc__)\ndef __contains__(self, key: Any) -> bool:\n    hash(key)\n    try:\n        res = self.get_loc(key)\n    except (KeyError, TypeError, ValueError):\n        return False\n    return bool(is_scalar(res) or isinstance(res, slice) or (is_list_like(res) and len(res)))",
                            "def sort_values(self, return_indexer=False, ascending=True):\n    \"\"\"\n    Return sorted copy of Index.\n    \"\"\"\n    if return_indexer:\n        _as = self.argsort()\n        if not ascending:\n            _as = _as[::-1]\n        sorted_index = self.take(_as)\n        return (sorted_index, _as)\n    else:\n        sorted_values = np.sort(self.asi8)\n        freq = self.freq\n        if freq is not None and (not is_period_dtype(self)):\n            if freq.n > 0 and (not ascending):\n                freq = freq * -1\n            elif freq.n < 0 and ascending:\n                freq = freq * -1\n        if not ascending:\n            sorted_values = sorted_values[::-1]\n        arr = type(self._data)._simple_new(sorted_values, dtype=self.dtype, freq=freq)\n        return type(self)._simple_new(arr, name=self.name)",
                            "@Appender(_index_shared_docs['take'] % _index_doc_kwargs)\ndef take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n    nv.validate_take(tuple(), kwargs)\n    indices = ensure_int64(indices)\n    maybe_slice = lib.maybe_indices_to_slice(indices, len(self))\n    if isinstance(maybe_slice, slice):\n        return self[maybe_slice]\n    return ExtensionIndex.take(self, indices, axis, allow_fill, fill_value, **kwargs)",
                            "@doc(IndexOpsMixin.searchsorted, klass='Datetime-like Index')\ndef searchsorted(self, value, side='left', sorter=None):\n    if isinstance(value, str):\n        raise TypeError(f'searchsorted requires compatible dtype or scalar, not {type(value).__name__}')\n    if isinstance(value, Index):\n        value = value._data\n    return self._data.searchsorted(value, side=side, sorter=sorter)",
                            "def _convert_tolerance(self, tolerance, target):\n    tolerance = np.asarray(to_timedelta(tolerance).to_numpy())\n    if target.size != tolerance.size and tolerance.size > 1:\n        raise ValueError('list-like tolerance size must match target index size')\n    return tolerance",
                            "def tolist(self) -> List:\n    \"\"\"\n    Return a list of the underlying data.\n    \"\"\"\n    return list(self.astype(object))",
                            "def min(self, axis=None, skipna=True, *args, **kwargs):\n    \"\"\"\n    Return the minimum value of the Index or minimum along\n    an axis.\n\n    See Also\n    --------\n    numpy.ndarray.min\n    Series.min : Return the minimum value in a Series.\n    \"\"\"\n    nv.validate_min(args, kwargs)\n    nv.validate_minmax_axis(axis)\n    if not len(self):\n        return self._na_value\n    i8 = self.asi8\n    try:\n        if len(i8) and self.is_monotonic:\n            if i8[0] != iNaT:\n                return self._box_func(i8[0])\n        if self.hasnans:\n            if skipna:\n                min_stamp = self[~self._isnan].asi8.min()\n            else:\n                return self._na_value\n        else:\n            min_stamp = i8.min()\n        return self._box_func(min_stamp)\n    except ValueError:\n        return self._na_value",
                            "def argmin(self, axis=None, skipna=True, *args, **kwargs):\n    \"\"\"\n    Returns the indices of the minimum values along an axis.\n\n    See `numpy.ndarray.argmin` for more information on the\n    `axis` parameter.\n\n    See Also\n    --------\n    numpy.ndarray.argmin\n    \"\"\"\n    nv.validate_argmin(args, kwargs)\n    nv.validate_minmax_axis(axis)\n    i8 = self.asi8\n    if self.hasnans:\n        mask = self._isnan\n        if mask.all() or not skipna:\n            return -1\n        i8 = i8.copy()\n        i8[mask] = np.iinfo('int64').max\n    return i8.argmin()",
                            "def max(self, axis=None, skipna=True, *args, **kwargs):\n    \"\"\"\n    Return the maximum value of the Index or maximum along\n    an axis.\n\n    See Also\n    --------\n    numpy.ndarray.max\n    Series.max : Return the maximum value in a Series.\n    \"\"\"\n    nv.validate_max(args, kwargs)\n    nv.validate_minmax_axis(axis)\n    if not len(self):\n        return self._na_value\n    i8 = self.asi8\n    try:\n        if len(i8) and self.is_monotonic:\n            if i8[-1] != iNaT:\n                return self._box_func(i8[-1])\n        if self.hasnans:\n            if skipna:\n                max_stamp = self[~self._isnan].asi8.max()\n            else:\n                return self._na_value\n        else:\n            max_stamp = i8.max()\n        return self._box_func(max_stamp)\n    except ValueError:\n        return self._na_value",
                            "def argmax(self, axis=None, skipna=True, *args, **kwargs):\n    \"\"\"\n    Returns the indices of the maximum values along an axis.\n\n    See `numpy.ndarray.argmax` for more information on the\n    `axis` parameter.\n\n    See Also\n    --------\n    numpy.ndarray.argmax\n    \"\"\"\n    nv.validate_argmax(args, kwargs)\n    nv.validate_minmax_axis(axis)\n    i8 = self.asi8\n    if self.hasnans:\n        mask = self._isnan\n        if mask.all() or not skipna:\n            return -1\n        i8 = i8.copy()\n        i8[mask] = 0\n    return i8.argmax()",
                            "def _format_with_header(self, header, na_rep='NaT', **kwargs):\n    return header + list(self._format_native_types(na_rep, **kwargs))",
                            "@property\ndef _formatter_func(self):\n    raise AbstractMethodError(self)",
                            "def _format_attrs(self):\n    \"\"\"\n    Return a list of tuples of the (attr,formatted_value).\n    \"\"\"\n    attrs = super()._format_attrs()\n    for attrib in self._attributes:\n        if attrib == 'freq':\n            freq = self.freqstr\n            if freq is not None:\n                freq = repr(freq)\n            attrs.append(('freq', freq))\n    return attrs",
                            "def _validate_partial_date_slice(self, reso: str):\n    raise NotImplementedError",
                            "def _parsed_string_to_bounds(self, reso: str, parsed: datetime):\n    raise NotImplementedError",
                            "def _partial_date_slice(self, reso: str, parsed: datetime, use_lhs: bool=True, use_rhs: bool=True):\n    \"\"\"\n    Parameters\n    ----------\n    reso : str\n    parsed : datetime\n    use_lhs : bool, default True\n    use_rhs : bool, default True\n\n    Returns\n    -------\n    slice or ndarray[intp]\n    \"\"\"\n    self._validate_partial_date_slice(reso)\n    t1, t2 = self._parsed_string_to_bounds(reso, parsed)\n    i8vals = self.asi8\n    unbox = self._data._unbox_scalar\n    if self.is_monotonic:\n        if len(self) and (use_lhs and t1 < self[0] and (t2 < self[0]) or (use_rhs and t1 > self[-1] and (t2 > self[-1]))):\n            raise KeyError\n        left = i8vals.searchsorted(unbox(t1), side='left') if use_lhs else None\n        right = i8vals.searchsorted(unbox(t2), side='right') if use_rhs else None\n        return slice(left, right)\n    else:\n        lhs_mask = i8vals >= unbox(t1) if use_lhs else True\n        rhs_mask = i8vals <= unbox(t2) if use_rhs else True\n        return (lhs_mask & rhs_mask).nonzero()[0]",
                            "def _get_addsub_freq(self, other) -> Optional[DateOffset]:\n    \"\"\"\n    Find the freq we expect the result of an addition/subtraction operation\n    to have.\n    \"\"\"\n    if is_period_dtype(self.dtype):\n        return self.freq\n    elif self.freq is None:\n        return None\n    elif lib.is_scalar(other) and isna(other):\n        return None\n    elif isinstance(other, (Tick, timedelta, np.timedelta64)):\n        new_freq = None\n        if isinstance(self.freq, Tick):\n            new_freq = self.freq\n        return new_freq\n    elif isinstance(other, DateOffset):\n        return None\n    elif isinstance(other, (datetime, np.datetime64)):\n        return self.freq\n    elif is_timedelta64_dtype(other):\n        return None\n    elif is_object_dtype(other):\n        return None\n    elif is_datetime64_any_dtype(other):\n        return None\n    else:\n        raise NotImplementedError",
                            "def isin(self, values, level=None):\n    \"\"\"\n    Compute boolean array of whether each index value is found in the\n    passed set of values.\n\n    Parameters\n    ----------\n    values : set or sequence of values\n\n    Returns\n    -------\n    is_contained : ndarray (boolean dtype)\n    \"\"\"\n    if level is not None:\n        self._validate_index_level(level)\n    if not isinstance(values, type(self)):\n        try:\n            values = type(self)(values)\n        except ValueError:\n            return self.astype(object).isin(values)\n    return algorithms.isin(self.asi8, values.asi8)",
                            "@Appender(Index.where.__doc__)\ndef where(self, cond, other=None):\n    values = self.view('i8')\n    try:\n        other = self._data._validate_where_value(other)\n    except (TypeError, ValueError) as err:\n        oth = getattr(other, 'dtype', other)\n        raise TypeError(f'Where requires matching dtype, not {oth}') from err\n    result = np.where(cond, values, other).astype('i8')\n    arr = type(self._data)._simple_new(result, dtype=self.dtype)\n    return type(self)._simple_new(arr, name=self.name)",
                            "def _summary(self, name=None) -> str:\n    \"\"\"\n    Return a summarized representation.\n\n    Parameters\n    ----------\n    name : str\n        Name to use in the summary representation.\n\n    Returns\n    -------\n    str\n        Summarized representation of the index.\n    \"\"\"\n    formatter = self._formatter_func\n    if len(self) > 0:\n        index_summary = f', {formatter(self[0])} to {formatter(self[-1])}'\n    else:\n        index_summary = ''\n    if name is None:\n        name = type(self).__name__\n    result = f'{name}: {len(self)} entries{index_summary}'\n    if self.freq:\n        result += f'\\nFreq: {self.freqstr}'\n    result = result.replace(\"'\", '')\n    return result",
                            "def shift(self, periods=1, freq=None):\n    \"\"\"\n    Shift index by desired number of time frequency increments.\n\n    This method is for shifting the values of datetime-like indexes\n    by a specified time increment a given number of times.\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Number of periods (or increments) to shift by,\n        can be positive or negative.\n\n        .. versionchanged:: 0.24.0\n\n    freq : pandas.DateOffset, pandas.Timedelta or string, optional\n        Frequency increment to shift by.\n        If None, the index is shifted by its own `freq` attribute.\n        Offset aliases are valid strings, e.g., 'D', 'W', 'M' etc.\n\n    Returns\n    -------\n    pandas.DatetimeIndex\n        Shifted index.\n\n    See Also\n    --------\n    Index.shift : Shift values of Index.\n    PeriodIndex.shift : Shift values of PeriodIndex.\n    \"\"\"\n    arr = self._data.view()\n    arr._freq = self.freq\n    result = arr._time_shift(periods, freq=freq)\n    return type(self)(result, name=self.name)",
                            "def delete(self, loc):\n    new_i8s = np.delete(self.asi8, loc)\n    freq = None\n    if is_period_dtype(self):\n        freq = self.freq\n    elif is_integer(loc):\n        if loc in (0, -len(self), -1, len(self) - 1):\n            freq = self.freq\n    else:\n        if is_list_like(loc):\n            loc = lib.maybe_indices_to_slice(ensure_int64(np.array(loc)), len(self))\n        if isinstance(loc, slice) and loc.step in (1, None):\n            if loc.start in (0, None) or loc.stop in (len(self), None):\n                freq = self.freq\n    arr = type(self._data)._simple_new(new_i8s, dtype=self.dtype, freq=freq)\n    return type(self)._simple_new(arr, name=self.name)",
                            "def _wrap_joined_index(self, joined: np.ndarray, other):\n    assert other.dtype == self.dtype, (other.dtype, self.dtype)\n    name = get_op_result_name(self, other)\n    if is_period_dtype(self.dtype):\n        freq = self.freq\n    else:\n        self = cast(DatetimeTimedeltaMixin, self)\n        freq = self.freq if self._can_fast_union(other) else None\n    new_data = type(self._data)._simple_new(joined, dtype=self.dtype, freq=freq)\n    return type(self)._simple_new(new_data, name=name)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_data",
                            "freq",
                            "freqstr",
                            "_resolution",
                            "_bool_ops",
                            "_field_ops",
                            "hasnans",
                            "_hasnans",
                            "_can_hold_na",
                            "_na_value",
                            "__add__",
                            "__sub__",
                            "__radd__",
                            "__rsub__",
                            "__pow__",
                            "__rpow__",
                            "__mul__",
                            "__rmul__",
                            "__floordiv__",
                            "__rfloordiv__",
                            "__mod__",
                            "__rmod__",
                            "__divmod__",
                            "__rdivmod__",
                            "__truediv__",
                            "__rtruediv__"
                        ],
                        "class_decorators": [
                            "inherit_names(['inferred_freq', '_isnan', '_resolution', 'resolution'], DatetimeLikeArrayMixin, cache=True)",
                            "inherit_names(['mean', 'asi8', '_box_func'], DatetimeLikeArrayMixin)"
                        ],
                        "function_signatures": [
                            "is_all_dates(self) -> bool",
                            "values(self)",
                            "__array_wrap__(self, result, context=None)",
                            "equals(self, other) -> bool",
                            "__contains__(self, key: Any) -> bool",
                            "sort_values(self, return_indexer=False, ascending=True)",
                            "take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
                            "searchsorted(self, value, side='left', sorter=None)",
                            "_convert_tolerance(self, tolerance, target)",
                            "tolist(self) -> List",
                            "min(self, axis=None, skipna=True, *args, **kwargs)",
                            "argmin(self, axis=None, skipna=True, *args, **kwargs)",
                            "max(self, axis=None, skipna=True, *args, **kwargs)",
                            "argmax(self, axis=None, skipna=True, *args, **kwargs)",
                            "_format_with_header(self, header, na_rep='NaT', **kwargs)",
                            "_formatter_func(self)",
                            "_format_attrs(self)",
                            "_validate_partial_date_slice(self, reso: str)",
                            "_parsed_string_to_bounds(self, reso: str, parsed: datetime)",
                            "_partial_date_slice(self, reso: str, parsed: datetime, use_lhs: bool=True, use_rhs: bool=True)",
                            "_get_addsub_freq(self, other) -> Optional[DateOffset]",
                            "isin(self, values, level=None)",
                            "where(self, cond, other=None)",
                            "_summary(self, name=None) -> str",
                            "shift(self, periods=1, freq=None)",
                            "delete(self, loc)",
                            "_wrap_joined_index(self, joined: np.ndarray, other)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "is_period_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "period[M]",
                                    "variable_type": "PeriodDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'], dtype='period[M]', name='idx', freq='M')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "4"
                                },
                                "self.freq": {
                                    "variable_value": "<MonthEnd>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "lib.is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tick": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DateOffset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "is_period_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "period[M]",
                                    "variable_type": "PeriodDtype",
                                    "variable_shape": "()"
                                },
                                "self": {
                                    "variable_value": "PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'], dtype='period[M]', name='idx', freq='M')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "4"
                                },
                                "result.dtype": {
                                    "variable_value": "dtype('<m8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "result": {
                                    "variable_value": "TimedeltaIndex([NaT, NaT, NaT, NaT], dtype='timedelta64[ns]', name='idx', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "4"
                                },
                                "self.freq": {
                                    "variable_value": "<MonthEnd>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "lib.is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tick": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.timedelta64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_freq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DateOffset": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_timedelta64_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetime64_any_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _join_i8_wrapper(joinf, with_indexers: bool = True):\n    \"\"\"\n    Create the join wrapper methods.\n    \"\"\"\n\n    @staticmethod  # type: ignore\n    def wrapper(left, right):\n        if isinstance(left, (np.ndarray, ABCIndex, ABCSeries, DatetimeLikeArrayMixin)):\n            left = left.view(\"i8\")\n        if isinstance(right, (np.ndarray, ABCIndex, ABCSeries, DatetimeLikeArrayMixin)):\n            right = right.view(\"i8\")\n\n        results = joinf(left, right)\n        if with_indexers:\n            # dtype should be timedelta64[ns] for TimedeltaIndex\n            #  and datetime64[ns] for DatetimeIndex\n            dtype = left.dtype.base\n\n            join_index, left_indexer, right_indexer = results\n            join_index = join_index.view(dtype)\n            return join_index, left_indexer, right_indexer\n        return results\n\n    return wrapper",
                "def _make_wrapped_arith_op_with_freq(opname: str):\n    \"\"\"\n    Dispatch the operation to the underlying ExtensionArray, and infer\n    the appropriate frequency for the result.\n    \"\"\"\n    meth = make_wrapped_arith_op(opname)\n\n    def wrapped(self, other):\n        result = meth(self, other)\n        if result is NotImplemented:\n            return NotImplemented\n\n        new_freq = self._get_addsub_freq(other)\n        result._freq = new_freq\n        return result\n\n    wrapped.__name__ = opname\n    return wrapped",
                "@staticmethod  # type: ignore\ndef wrapper(left, right):\n    if isinstance(left, (np.ndarray, ABCIndex, ABCSeries, DatetimeLikeArrayMixin)):\n        left = left.view(\"i8\")\n    if isinstance(right, (np.ndarray, ABCIndex, ABCSeries, DatetimeLikeArrayMixin)):\n        right = right.view(\"i8\")\n\n    results = joinf(left, right)\n    if with_indexers:\n        # dtype should be timedelta64[ns] for TimedeltaIndex\n        #  and datetime64[ns] for DatetimeIndex\n        dtype = left.dtype.base\n\n        join_index, left_indexer, right_indexer = results\n        join_index = join_index.view(dtype)\n        return join_index, left_indexer, right_indexer\n    return results",
                "def wrapped(self, other):\n    result = meth(self, other)\n    if result is NotImplemented:\n        return NotImplemented\n\n    new_freq = self._get_addsub_freq(other)\n    result._freq = new_freq\n    return result",
                "@property\ndef is_all_dates(self) -> bool:\n    return True",
                "@property\ndef values(self):\n    # Note: PeriodArray overrides this to return an ndarray of objects.\n    return self._data._data",
                "def __array_wrap__(self, result, context=None):\n    \"\"\"\n    Gets called after a ufunc.\n    \"\"\"\n    result = lib.item_from_zerodim(result)\n    if is_bool_dtype(result) or lib.is_scalar(result):\n        return result\n\n    attrs = self._get_attributes_dict()\n    if not is_period_dtype(self) and attrs[\"freq\"]:\n        # no need to infer if freq is None\n        attrs[\"freq\"] = \"infer\"\n    return Index(result, **attrs)",
                "def equals(self, other) -> bool:\n    \"\"\"\n    Determines if two Index objects contain the same elements.\n    \"\"\"\n    if self.is_(other):\n        return True\n\n    if not isinstance(other, ABCIndexClass):\n        return False\n    elif not isinstance(other, type(self)):\n        try:\n            other = type(self)(other)\n        except (ValueError, TypeError, OverflowError):\n            # e.g.\n            #  ValueError -> cannot parse str entry, or OutOfBoundsDatetime\n            #  TypeError  -> trying to convert IntervalIndex to DatetimeIndex\n            #  OverflowError -> Index([very_large_timedeltas])\n            return False\n\n    if not is_dtype_equal(self.dtype, other.dtype):\n        # have different timezone\n        return False\n\n    return np.array_equal(self.asi8, other.asi8)",
                "@Appender(Index.__contains__.__doc__)\ndef __contains__(self, key: Any) -> bool:\n    hash(key)\n    try:\n        res = self.get_loc(key)\n    except (KeyError, TypeError, ValueError):\n        return False\n    return bool(\n        is_scalar(res) or isinstance(res, slice) or (is_list_like(res) and len(res))\n    )",
                "def sort_values(self, return_indexer=False, ascending=True):\n    \"\"\"\n    Return sorted copy of Index.\n    \"\"\"\n    if return_indexer:\n        _as = self.argsort()\n        if not ascending:\n            _as = _as[::-1]\n        sorted_index = self.take(_as)\n        return sorted_index, _as\n    else:\n        # NB: using asi8 instead of _data matters in numpy 1.18\n        #  because the treatment of NaT has been changed to put NaT last\n        #  instead of first.\n        sorted_values = np.sort(self.asi8)\n\n        freq = self.freq\n        if freq is not None and not is_period_dtype(self):\n            if freq.n > 0 and not ascending:\n                freq = freq * -1\n            elif freq.n < 0 and ascending:\n                freq = freq * -1\n\n        if not ascending:\n            sorted_values = sorted_values[::-1]\n\n        arr = type(self._data)._simple_new(\n            sorted_values, dtype=self.dtype, freq=freq\n        )\n        return type(self)._simple_new(arr, name=self.name)",
                "@Appender(_index_shared_docs[\"take\"] % _index_doc_kwargs)\ndef take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n    nv.validate_take(tuple(), kwargs)\n    indices = ensure_int64(indices)\n\n    maybe_slice = lib.maybe_indices_to_slice(indices, len(self))\n    if isinstance(maybe_slice, slice):\n        return self[maybe_slice]\n\n    return ExtensionIndex.take(\n        self, indices, axis, allow_fill, fill_value, **kwargs\n    )",
                "@doc(IndexOpsMixin.searchsorted, klass=\"Datetime-like Index\")\ndef searchsorted(self, value, side=\"left\", sorter=None):\n    if isinstance(value, str):\n        raise TypeError(\n            \"searchsorted requires compatible dtype or scalar, \"\n            f\"not {type(value).__name__}\"\n        )\n    if isinstance(value, Index):\n        value = value._data\n\n    return self._data.searchsorted(value, side=side, sorter=sorter)",
                "def _convert_tolerance(self, tolerance, target):\n    tolerance = np.asarray(to_timedelta(tolerance).to_numpy())\n\n    if target.size != tolerance.size and tolerance.size > 1:\n        raise ValueError(\"list-like tolerance size must match target index size\")\n    return tolerance",
                "def tolist(self) -> List:\n    \"\"\"\n    Return a list of the underlying data.\n    \"\"\"\n    return list(self.astype(object))",
                "def min(self, axis=None, skipna=True, *args, **kwargs):\n    \"\"\"\n    Return the minimum value of the Index or minimum along\n    an axis.\n\n    See Also\n    --------\n    numpy.ndarray.min\n    Series.min : Return the minimum value in a Series.\n    \"\"\"\n    nv.validate_min(args, kwargs)\n    nv.validate_minmax_axis(axis)\n\n    if not len(self):\n        return self._na_value\n\n    i8 = self.asi8\n    try:\n        # quick check\n        if len(i8) and self.is_monotonic:\n            if i8[0] != iNaT:\n                return self._box_func(i8[0])\n\n        if self.hasnans:\n            if skipna:\n                min_stamp = self[~self._isnan].asi8.min()\n            else:\n                return self._na_value\n        else:\n            min_stamp = i8.min()\n        return self._box_func(min_stamp)\n    except ValueError:\n        return self._na_value",
                "def argmin(self, axis=None, skipna=True, *args, **kwargs):\n    \"\"\"\n    Returns the indices of the minimum values along an axis.\n\n    See `numpy.ndarray.argmin` for more information on the\n    `axis` parameter.\n\n    See Also\n    --------\n    numpy.ndarray.argmin\n    \"\"\"\n    nv.validate_argmin(args, kwargs)\n    nv.validate_minmax_axis(axis)\n\n    i8 = self.asi8\n    if self.hasnans:\n        mask = self._isnan\n        if mask.all() or not skipna:\n            return -1\n        i8 = i8.copy()\n        i8[mask] = np.iinfo(\"int64\").max\n    return i8.argmin()",
                "def max(self, axis=None, skipna=True, *args, **kwargs):\n    \"\"\"\n    Return the maximum value of the Index or maximum along\n    an axis.\n\n    See Also\n    --------\n    numpy.ndarray.max\n    Series.max : Return the maximum value in a Series.\n    \"\"\"\n    nv.validate_max(args, kwargs)\n    nv.validate_minmax_axis(axis)\n\n    if not len(self):\n        return self._na_value\n\n    i8 = self.asi8\n    try:\n        # quick check\n        if len(i8) and self.is_monotonic:\n            if i8[-1] != iNaT:\n                return self._box_func(i8[-1])\n\n        if self.hasnans:\n            if skipna:\n                max_stamp = self[~self._isnan].asi8.max()\n            else:\n                return self._na_value\n        else:\n            max_stamp = i8.max()\n        return self._box_func(max_stamp)\n    except ValueError:\n        return self._na_value",
                "def argmax(self, axis=None, skipna=True, *args, **kwargs):\n    \"\"\"\n    Returns the indices of the maximum values along an axis.\n\n    See `numpy.ndarray.argmax` for more information on the\n    `axis` parameter.\n\n    See Also\n    --------\n    numpy.ndarray.argmax\n    \"\"\"\n    nv.validate_argmax(args, kwargs)\n    nv.validate_minmax_axis(axis)\n\n    i8 = self.asi8\n    if self.hasnans:\n        mask = self._isnan\n        if mask.all() or not skipna:\n            return -1\n        i8 = i8.copy()\n        i8[mask] = 0\n    return i8.argmax()",
                "def _format_with_header(self, header, na_rep=\"NaT\", **kwargs):\n    return header + list(self._format_native_types(na_rep, **kwargs))",
                "@property\ndef _formatter_func(self):\n    raise AbstractMethodError(self)",
                "def _format_attrs(self):\n    \"\"\"\n    Return a list of tuples of the (attr,formatted_value).\n    \"\"\"\n    attrs = super()._format_attrs()\n    for attrib in self._attributes:\n        if attrib == \"freq\":\n            freq = self.freqstr\n            if freq is not None:\n                freq = repr(freq)\n            attrs.append((\"freq\", freq))\n    return attrs",
                "def _validate_partial_date_slice(self, reso: str):\n    raise NotImplementedError",
                "def _parsed_string_to_bounds(self, reso: str, parsed: datetime):\n    raise NotImplementedError",
                "def _partial_date_slice(\n    self, reso: str, parsed: datetime, use_lhs: bool = True, use_rhs: bool = True\n):\n    \"\"\"\n    Parameters\n    ----------\n    reso : str\n    parsed : datetime\n    use_lhs : bool, default True\n    use_rhs : bool, default True\n\n    Returns\n    -------\n    slice or ndarray[intp]\n    \"\"\"\n    self._validate_partial_date_slice(reso)\n\n    t1, t2 = self._parsed_string_to_bounds(reso, parsed)\n    i8vals = self.asi8\n    unbox = self._data._unbox_scalar\n\n    if self.is_monotonic:\n\n        if len(self) and (\n            (use_lhs and t1 < self[0] and t2 < self[0])\n            or ((use_rhs and t1 > self[-1] and t2 > self[-1]))\n        ):\n            # we are out of range\n            raise KeyError\n\n        # TODO: does this depend on being monotonic _increasing_?\n\n        # a monotonic (sorted) series can be sliced\n        # Use asi8.searchsorted to avoid re-validating Periods/Timestamps\n        left = i8vals.searchsorted(unbox(t1), side=\"left\") if use_lhs else None\n        right = i8vals.searchsorted(unbox(t2), side=\"right\") if use_rhs else None\n        return slice(left, right)\n\n    else:\n        lhs_mask = (i8vals >= unbox(t1)) if use_lhs else True\n        rhs_mask = (i8vals <= unbox(t2)) if use_rhs else True\n\n        # try to find the dates\n        return (lhs_mask & rhs_mask).nonzero()[0]",
                "def _get_addsub_freq(self, other) -> Optional[DateOffset]:\n    \"\"\"\n    Find the freq we expect the result of an addition/subtraction operation\n    to have.\n    \"\"\"\n    if is_period_dtype(self.dtype):\n        # Only used for ops that stay PeriodDtype\n        return self.freq\n    elif self.freq is None:\n        return None\n    elif lib.is_scalar(other) and isna(other):\n        return None\n\n    elif isinstance(other, (Tick, timedelta, np.timedelta64)):\n        new_freq = None\n        if isinstance(self.freq, Tick):\n            new_freq = self.freq\n        return new_freq\n\n    elif isinstance(other, DateOffset):\n        # otherwise just DatetimeArray\n        return None  # TODO: Should we infer if it matches self.freq * n?\n    elif isinstance(other, (datetime, np.datetime64)):\n        return self.freq\n\n    elif is_timedelta64_dtype(other):\n        return None  # TODO: shouldnt we be able to do self.freq + other.freq?\n    elif is_object_dtype(other):\n        return None  # TODO: is this quite right?  sometimes we unpack singletons\n    elif is_datetime64_any_dtype(other):\n        return None  # TODO: shouldnt we be able to do self.freq + other.freq?\n    else:\n        raise NotImplementedError",
                "def isin(self, values, level=None):\n    \"\"\"\n    Compute boolean array of whether each index value is found in the\n    passed set of values.\n\n    Parameters\n    ----------\n    values : set or sequence of values\n\n    Returns\n    -------\n    is_contained : ndarray (boolean dtype)\n    \"\"\"\n    if level is not None:\n        self._validate_index_level(level)\n\n    if not isinstance(values, type(self)):\n        try:\n            values = type(self)(values)\n        except ValueError:\n            return self.astype(object).isin(values)\n\n    return algorithms.isin(self.asi8, values.asi8)",
                "@Appender(Index.where.__doc__)\ndef where(self, cond, other=None):\n    values = self.view(\"i8\")\n\n    try:\n        other = self._data._validate_where_value(other)\n    except (TypeError, ValueError) as err:\n        # Includes tzawareness mismatch and IncompatibleFrequencyError\n        oth = getattr(other, \"dtype\", other)\n        raise TypeError(f\"Where requires matching dtype, not {oth}\") from err\n\n    result = np.where(cond, values, other).astype(\"i8\")\n    arr = type(self._data)._simple_new(result, dtype=self.dtype)\n    return type(self)._simple_new(arr, name=self.name)",
                "def _summary(self, name=None) -> str:\n    \"\"\"\n    Return a summarized representation.\n\n    Parameters\n    ----------\n    name : str\n        Name to use in the summary representation.\n\n    Returns\n    -------\n    str\n        Summarized representation of the index.\n    \"\"\"\n    formatter = self._formatter_func\n    if len(self) > 0:\n        index_summary = f\", {formatter(self[0])} to {formatter(self[-1])}\"\n    else:\n        index_summary = \"\"\n\n    if name is None:\n        name = type(self).__name__\n    result = f\"{name}: {len(self)} entries{index_summary}\"\n    if self.freq:\n        result += f\"\\nFreq: {self.freqstr}\"\n\n    # display as values, not quoted\n    result = result.replace(\"'\", \"\")\n    return result",
                "def shift(self, periods=1, freq=None):\n    \"\"\"\n    Shift index by desired number of time frequency increments.\n\n    This method is for shifting the values of datetime-like indexes\n    by a specified time increment a given number of times.\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Number of periods (or increments) to shift by,\n        can be positive or negative.\n\n        .. versionchanged:: 0.24.0\n\n    freq : pandas.DateOffset, pandas.Timedelta or string, optional\n        Frequency increment to shift by.\n        If None, the index is shifted by its own `freq` attribute.\n        Offset aliases are valid strings, e.g., 'D', 'W', 'M' etc.\n\n    Returns\n    -------\n    pandas.DatetimeIndex\n        Shifted index.\n\n    See Also\n    --------\n    Index.shift : Shift values of Index.\n    PeriodIndex.shift : Shift values of PeriodIndex.\n    \"\"\"\n    arr = self._data.view()\n    arr._freq = self.freq\n    result = arr._time_shift(periods, freq=freq)\n    return type(self)(result, name=self.name)",
                "def delete(self, loc):\n    new_i8s = np.delete(self.asi8, loc)\n\n    freq = None\n    if is_period_dtype(self):\n        freq = self.freq\n    elif is_integer(loc):\n        if loc in (0, -len(self), -1, len(self) - 1):\n            freq = self.freq\n    else:\n        if is_list_like(loc):\n            loc = lib.maybe_indices_to_slice(ensure_int64(np.array(loc)), len(self))\n        if isinstance(loc, slice) and loc.step in (1, None):\n            if loc.start in (0, None) or loc.stop in (len(self), None):\n                freq = self.freq\n\n    arr = type(self._data)._simple_new(new_i8s, dtype=self.dtype, freq=freq)\n    return type(self)._simple_new(arr, name=self.name)",
                "def _wrap_joined_index(self, joined: np.ndarray, other):\n    assert other.dtype == self.dtype, (other.dtype, self.dtype)\n    name = get_op_result_name(self, other)\n\n    if is_period_dtype(self.dtype):\n        freq = self.freq\n    else:\n        self = cast(DatetimeTimedeltaMixin, self)\n        freq = self.freq if self._can_fast_union(other) else None\n    new_data = type(self._data)._simple_new(joined, dtype=self.dtype, freq=freq)\n\n    return type(self)._simple_new(new_data, name=name)",
                "@property\ndef freq(self):\n    \"\"\"\n    In limited circumstances, our freq may differ from that of our _data.\n    \"\"\"\n    if self._freq is not lib.no_default:\n        return self._freq\n    return self._data.freq",
                "@property\ndef freqstr(self):\n    \"\"\"\n    Return the frequency object as a string if its set, otherwise None.\n    \"\"\"\n    if self.freq is None:\n        return None\n    return self.freq.freqstr",
                "def _with_freq(self, freq):\n    index = self.copy(deep=False)\n    if freq is None:\n        # Even if we _can_ have a freq, we might want to set it to None\n        index._freq = None\n    elif len(self) == 0 and isinstance(freq, DateOffset):\n        # Always valid.  In the TimedeltaArray case, we assume this\n        #  is a Tick offset.\n        index._freq = freq\n    else:\n        assert freq == \"infer\", freq\n        freq = to_offset(self.inferred_freq)\n        index._freq = freq\n\n    return index",
                "def _shallow_copy(self, values=None, name: Label = lib.no_default):\n    name = self.name if name is lib.no_default else name\n    cache = self._cache.copy() if values is None else {}\n\n    if values is None:\n        values = self._data\n\n    if isinstance(values, np.ndarray):\n        # TODO: We would rather not get here\n        values = type(self._data)(values, dtype=self.dtype)\n\n    result = type(self)._simple_new(values, name=name)\n    result._cache = cache\n    return result",
                "@Appender(Index.difference.__doc__)\ndef difference(self, other, sort=None):\n    new_idx = super().difference(other, sort=sort)._with_freq(None)\n    return new_idx",
                "def intersection(self, other, sort=False):\n    \"\"\"\n    Specialized intersection for DatetimeIndex/TimedeltaIndex.\n\n    May be much faster than Index.intersection\n\n    Parameters\n    ----------\n    other : Same type as self or array-like\n    sort : False or None, default False\n        Sort the resulting index if possible.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default to ``False`` to match the behaviour\n           from before 0.24.0.\n\n        .. versionchanged:: 0.25.0\n\n           The `sort` keyword is added\n\n    Returns\n    -------\n    y : Index or same type as self\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n\n    if self.equals(other):\n        return self._get_reconciled_name_object(other)\n\n    if len(self) == 0:\n        return self.copy()\n    if len(other) == 0:\n        return other.copy()\n\n    if not isinstance(other, type(self)):\n        result = Index.intersection(self, other, sort=sort)\n        if isinstance(result, type(self)):\n            if result.freq is None:\n                result = result._with_freq(\"infer\")\n        return result\n\n    elif (\n        other.freq is None\n        or self.freq is None\n        or other.freq != self.freq\n        or not other.freq.is_anchored()\n        or (not self.is_monotonic or not other.is_monotonic)\n    ):\n        result = Index.intersection(self, other, sort=sort)\n        result = result._with_freq(\"infer\")\n        return result\n\n    # to make our life easier, \"sort\" the two ranges\n    if self[0] <= other[0]:\n        left, right = self, other\n    else:\n        left, right = other, self\n\n    # after sorting, the intersection always starts with the right index\n    # and ends with the index of which the last elements is smallest\n    end = min(left[-1], right[-1])\n    start = right[0]\n\n    if end < start:\n        return type(self)(data=[], dtype=self.dtype, freq=self.freq)\n    else:\n        lslice = slice(*left.slice_locs(start, end))\n        left_chunk = left._values[lslice]\n        return self._shallow_copy(left_chunk)",
                "def _can_fast_union(self, other) -> bool:\n    if not isinstance(other, type(self)):\n        return False\n\n    freq = self.freq\n\n    if freq is None or freq != other.freq:\n        return False\n\n    if not self.is_monotonic or not other.is_monotonic:\n        return False\n\n    if len(self) == 0 or len(other) == 0:\n        return True\n\n    # to make our life easier, \"sort\" the two ranges\n    if self[0] <= other[0]:\n        left, right = self, other\n    else:\n        left, right = other, self\n\n    right_start = right[0]\n    left_end = left[-1]\n\n    # Only need to \"adjoin\", not overlap\n    try:\n        return (right_start == left_end + freq) or right_start in left\n    except ValueError:\n        # if we are comparing a freq that does not propagate timezones\n        # this will raise\n        return False",
                "def _fast_union(self, other, sort=None):\n    if len(other) == 0:\n        return self.view(type(self))\n\n    if len(self) == 0:\n        return other.view(type(self))\n\n    # to make our life easier, \"sort\" the two ranges\n    if self[0] <= other[0]:\n        left, right = self, other\n    elif sort is False:\n        # TDIs are not in the \"correct\" order and we don't want\n        #  to sort but want to remove overlaps\n        left, right = self, other\n        left_start = left[0]\n        loc = right.searchsorted(left_start, side=\"left\")\n        right_chunk = right._values[:loc]\n        dates = concat_compat((left._values, right_chunk))\n        # TODO: can we infer that it has self.freq?\n        result = self._shallow_copy(dates)._with_freq(\"infer\")\n        return result\n    else:\n        left, right = other, self\n\n    left_end = left[-1]\n    right_end = right[-1]\n\n    # concatenate\n    if left_end < right_end:\n        loc = right.searchsorted(left_end, side=\"right\")\n        right_chunk = right._values[loc:]\n        dates = concat_compat([left._values, right_chunk])\n        # TODO: can we infer that it has self.freq?\n        result = self._shallow_copy(dates)._with_freq(\"infer\")\n        return result\n    else:\n        return left",
                "def _union(self, other, sort):\n    if not len(other) or self.equals(other) or not len(self):\n        return super()._union(other, sort=sort)\n\n    # We are called by `union`, which is responsible for this validation\n    assert isinstance(other, type(self))\n\n    this, other = self._maybe_utc_convert(other)\n\n    if this._can_fast_union(other):\n        result = this._fast_union(other, sort=sort)\n        if result.freq is None:\n            result = result._with_freq(\"infer\")\n        return result\n    else:\n        i8self = Int64Index._simple_new(self.asi8, name=self.name)\n        i8other = Int64Index._simple_new(other.asi8, name=other.name)\n        i8result = i8self._union(i8other, sort=sort)\n        result = type(self)(i8result, dtype=self.dtype, freq=\"infer\")\n        return result",
                "def join(\n    self, other, how: str = \"left\", level=None, return_indexers=False, sort=False\n):\n    \"\"\"\n    See Index.join\n    \"\"\"\n    if self._is_convertible_to_index_for_join(other):\n        try:\n            other = type(self)(other)\n        except (TypeError, ValueError):\n            pass\n\n    this, other = self._maybe_utc_convert(other)\n    return Index.join(\n        this,\n        other,\n        how=how,\n        level=level,\n        return_indexers=return_indexers,\n        sort=sort,\n    )",
                "def _maybe_utc_convert(self, other):\n    this = self\n    if not hasattr(self, \"tz\"):\n        return this, other\n\n    if isinstance(other, type(self)):\n        if self.tz is not None:\n            if other.tz is None:\n                raise TypeError(\"Cannot join tz-naive with tz-aware DatetimeIndex\")\n        elif other.tz is not None:\n            raise TypeError(\"Cannot join tz-naive with tz-aware DatetimeIndex\")\n\n        if not timezones.tz_compare(self.tz, other.tz):\n            this = self.tz_convert(\"UTC\")\n            other = other.tz_convert(\"UTC\")\n    return this, other",
                "@classmethod\ndef _is_convertible_to_index_for_join(cls, other: Index) -> bool:\n    \"\"\"\n    return a boolean whether I can attempt conversion to a\n    DatetimeIndex/TimedeltaIndex\n    \"\"\"\n    if isinstance(other, cls):\n        return False\n    elif len(other) > 0 and other.inferred_type not in (\n        \"floating\",\n        \"mixed-integer\",\n        \"integer\",\n        \"integer-na\",\n        \"mixed-integer-float\",\n        \"mixed\",\n    ):\n        return True\n    return False",
                "def insert(self, loc, item):\n    \"\"\"\n    Make new Index inserting new item at location\n\n    Parameters\n    ----------\n    loc : int\n    item : object\n        if not either a Python datetime or a numpy integer-like, returned\n        Index dtype will be object rather than datetime.\n\n    Returns\n    -------\n    new_index : Index\n    \"\"\"\n    if isinstance(item, str):\n        # TODO: Why are strings special?\n        # TODO: Should we attempt _scalar_from_string?\n        return self.astype(object).insert(loc, item)\n\n    item = self._data._validate_insert_value(item)\n\n    freq = None\n    # check freq can be preserved on edge cases\n    if self.freq is not None:\n        if self.size:\n            if item is NaT:\n                pass\n            elif (loc == 0 or loc == -len(self)) and item + self.freq == self[0]:\n                freq = self.freq\n            elif (loc == len(self)) and item - self.freq == self[-1]:\n                freq = self.freq\n        else:\n            # Adding a single item to an empty index may preserve freq\n            if self.freq.is_on_offset(item):\n                freq = self.freq\n\n    item = self._data._unbox_scalar(item)\n\n    new_i8s = np.concatenate([self[:loc].asi8, [item], self[loc:].asi8])\n    arr = type(self._data)._simple_new(new_i8s, dtype=self.dtype, freq=freq)\n    return type(self)._simple_new(arr, name=self.name)"
            ],
            "inscope_function_signatures": [
                "_join_i8_wrapper(joinf, with_indexers: bool=True)",
                "_make_wrapped_arith_op_with_freq(opname: str)",
                "wrapper(left, right)",
                "wrapped(self, other)",
                "is_all_dates(self) -> bool",
                "values(self)",
                "__array_wrap__(self, result, context=None)",
                "equals(self, other) -> bool",
                "__contains__(self, key: Any) -> bool",
                "sort_values(self, return_indexer=False, ascending=True)",
                "take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
                "searchsorted(self, value, side='left', sorter=None)",
                "_convert_tolerance(self, tolerance, target)",
                "tolist(self) -> List",
                "min(self, axis=None, skipna=True, *args, **kwargs)",
                "argmin(self, axis=None, skipna=True, *args, **kwargs)",
                "max(self, axis=None, skipna=True, *args, **kwargs)",
                "argmax(self, axis=None, skipna=True, *args, **kwargs)",
                "_format_with_header(self, header, na_rep='NaT', **kwargs)",
                "_formatter_func(self)",
                "_format_attrs(self)",
                "_validate_partial_date_slice(self, reso: str)",
                "_parsed_string_to_bounds(self, reso: str, parsed: datetime)",
                "_partial_date_slice(self, reso: str, parsed: datetime, use_lhs: bool=True, use_rhs: bool=True)",
                "_get_addsub_freq(self, other) -> Optional[DateOffset]",
                "isin(self, values, level=None)",
                "where(self, cond, other=None)",
                "_summary(self, name=None) -> str",
                "shift(self, periods=1, freq=None)",
                "delete(self, loc)",
                "_wrap_joined_index(self, joined: np.ndarray, other)",
                "freq(self)",
                "freqstr(self)",
                "_with_freq(self, freq)",
                "_shallow_copy(self, values=None, name: Label=lib.no_default)",
                "difference(self, other, sort=None)",
                "intersection(self, other, sort=False)",
                "_can_fast_union(self, other) -> bool",
                "_fast_union(self, other, sort=None)",
                "_union(self, other, sort)",
                "join(self, other, how: str='left', level=None, return_indexers=False, sort=False)",
                "_maybe_utc_convert(self, other)",
                "_is_convertible_to_index_for_join(cls, other: Index) -> bool",
                "insert(self, loc, item)"
            ],
            "variables_in_file": {
                "_index_doc_kwargs": [
                    217,
                    50
                ],
                "dict": [
                    50
                ],
                "ibase._index_doc_kwargs": [
                    50
                ],
                "ibase": [
                    50
                ],
                "bool": [
                    407,
                    933,
                    791,
                    176,
                    53,
                    182,
                    150,
                    123
                ],
                "isinstance": [
                    521,
                    792,
                    920,
                    157,
                    159,
                    938,
                    683,
                    183,
                    60,
                    701,
                    62,
                    969,
                    467,
                    469,
                    473,
                    476,
                    223,
                    866,
                    232,
                    237,
                    624,
                    755,
                    757
                ],
                "left": [
                    775,
                    777,
                    781,
                    787,
                    788,
                    808,
                    810,
                    813,
                    817,
                    440,
                    442,
                    60,
                    61,
                    832,
                    65,
                    836,
                    69,
                    837,
                    840,
                    845,
                    847,
                    854,
                    859
                ],
                "np.ndarray": [
                    634,
                    60,
                    701,
                    62
                ],
                "np": [
                    993,
                    613,
                    701,
                    200,
                    173,
                    623,
                    467,
                    634,
                    248,
                    314,
                    476,
                    60,
                    540,
                    62
                ],
                "ABCIndex": [
                    60,
                    62
                ],
                "ABCSeries": [
                    60,
                    62
                ],
                "DatetimeLikeArrayMixin": [
                    101,
                    105,
                    119,
                    60,
                    62
                ],
                "left.view": [
                    61
                ],
                "right": [
                    775,
                    777,
                    781,
                    782,
                    808,
                    810,
                    812,
                    441,
                    442,
                    62,
                    63,
                    832,
                    65,
                    836,
                    838,
                    839,
                    845,
                    848,
                    852,
                    853
                ],
                "right.view": [
                    63
                ],
                "results": [
                    65,
                    74,
                    71
                ],
                "joinf": [
                    65
                ],
                "with_indexers": [
                    66
                ],
                "dtype": [
                    72,
                    69
                ],
                "left.dtype.base": [
                    69
                ],
                "left.dtype": [
                    69
                ],
                "join_index": [
                    72,
                    73,
                    71
                ],
                "left_indexer": [
                    73,
                    71
                ],
                "right_indexer": [
                    73,
                    71
                ],
                "join_index.view": [
                    72
                ],
                "staticmethod": [
                    58
                ],
                "wrapper": [
                    76
                ],
                "str": [
                    544,
                    232,
                    969,
                    79,
                    400,
                    114,
                    403,
                    116,
                    117,
                    407,
                    894
                ],
                "meth": [
                    84,
                    87
                ],
                "make_wrapped_arith_op": [
                    503,
                    490,
                    491,
                    492,
                    493,
                    494,
                    495,
                    496,
                    497,
                    498,
                    499,
                    84,
                    500,
                    501,
                    502
                ],
                "opname": [
                    84,
                    95
                ],
                "result": [
                    769,
                    770,
                    771,
                    138,
                    139,
                    140,
                    146,
                    540,
                    541,
                    566,
                    568,
                    571,
                    572,
                    705,
                    706,
                    707,
                    842,
                    843,
                    87,
                    88,
                    856,
                    857,
                    92,
                    93,
                    606,
                    607,
                    871,
                    872,
                    873,
                    874,
                    879,
                    880,
                    756,
                    757,
                    758,
                    759,
                    760
                ],
                "self": [
                    519,
                    521,
                    523,
                    525,
                    527,
                    531,
                    534,
                    541,
                    542,
                    558,
                    559,
                    560,
                    565,
                    566,
                    567,
                    568,
                    87,
                    91,
                    604,
                    605,
                    607,
                    613,
                    616,
                    617,
                    619,
                    620,
                    623,
                    625,
                    626,
                    628,
                    629,
                    635,
                    636,
                    638,
                    639,
                    641,
                    642,
                    643,
                    132,
                    645,
                    142,
                    143,
                    665,
                    154,
                    666,
                    667,
                    159,
                    161,
                    674,
                    676,
                    679,
                    169,
                    683,
                    173,
                    689,
                    179,
                    695,
                    696,
                    699,
                    191,
                    703,
                    705,
                    194,
                    200,
                    202,
                    203,
                    212,
                    213,
                    215,
                    222,
                    224,
                    227,
                    744,
                    745,
                    747,
                    748,
                    750,
                    751,
                    240,
                    755,
                    756,
                    757,
                    764,
                    765,
                    767,
                    769,
                    258,
                    774,
                    775,
                    777,
                    273,
                    274,
                    785,
                    276,
                    789,
                    279,
                    792,
                    281,
                    283,
                    795,
                    285,
                    287,
                    800,
                    290,
                    803,
                    292,
                    807,
                    808,
                    810,
                    308,
                    309,
                    310,
                    825,
                    827,
                    828,
                    831,
                    832,
                    836,
                    330,
                    331,
                    842,
                    333,
                    845,
                    336,
                    338,
                    340,
                    342,
                    344,
                    856,
                    347,
                    349,
                    862,
                    866,
                    868,
                    876,
                    365,
                    366,
                    367,
                    879,
                    378,
                    382,
                    899,
                    389,
                    901,
                    391,
                    905,
                    916,
                    917,
                    920,
                    921,
                    927,
                    928,
                    421,
                    423,
                    424,
                    425,
                    427,
                    429,
                    430,
                    431,
                    459,
                    972,
                    461,
                    462,
                    974,
                    978,
                    979,
                    469,
                    470,
                    982,
                    983,
                    984,
                    985,
                    988,
                    477,
                    989,
                    991,
                    993,
                    994,
                    995
                ],
                "other": [
                    769,
                    642,
                    899,
                    901,
                    774,
                    775,
                    777,
                    905,
                    908,
                    767,
                    534,
                    918,
                    792,
                    537,
                    154,
                    920,
                    540,
                    157,
                    797,
                    159,
                    800,
                    161,
                    922,
                    803,
                    924,
                    927,
                    929,
                    807,
                    808,
                    169,
                    810,
                    930,
                    938,
                    173,
                    940,
                    824,
                    828,
                    831,
                    832,
                    836,
                    714,
                    845,
                    464,
                    467,
                    87,
                    473,
                    91,
                    476,
                    862,
                    479,
                    863,
                    481,
                    866,
                    483,
                    868,
                    870,
                    871,
                    745,
                    747,
                    748,
                    877,
                    752,
                    753,
                    755,
                    756,
                    635,
                    636,
                    765,
                    766,
                    763
                ],
                "NotImplemented": [
                    88,
                    89
                ],
                "new_freq": [
                    468,
                    470,
                    471,
                    91,
                    92
                ],
                "self._get_addsub_freq": [
                    91
                ],
                "result._freq": [
                    92
                ],
                "wrapped.__name__": [
                    95
                ],
                "wrapped": [
                    96,
                    95
                ],
                "ExtensionIndex": [
                    226,
                    107
                ],
                "_data": [
                    112
                ],
                "Union": [
                    112
                ],
                "DatetimeArray": [
                    112
                ],
                "TimedeltaArray": [
                    112
                ],
                "PeriodArray": [
                    112
                ],
                "freq": [
                    642,
                    643,
                    391,
                    392,
                    393,
                    394,
                    795,
                    797,
                    680,
                    683,
                    686,
                    688,
                    689,
                    690,
                    817,
                    202,
                    203,
                    204,
                    205,
                    206,
                    207,
                    976,
                    213,
                    983,
                    985,
                    989,
                    606,
                    994,
                    615,
                    617,
                    620,
                    113,
                    626,
                    628,
                    639
                ],
                "Optional": [
                    113,
                    114,
                    454
                ],
                "DateOffset": [
                    113,
                    683,
                    473,
                    454
                ],
                "freqstr": [
                    114
                ],
                "_resolution": [
                    115
                ],
                "int": [
                    115
                ],
                "_bool_ops": [
                    116
                ],
                "List": [
                    116,
                    117,
                    254
                ],
                "_field_ops": [
                    117
                ],
                "hasnans": [
                    120,
                    119
                ],
                "cache_readonly": [
                    119
                ],
                "DatetimeLikeArrayMixin._hasnans.fget": [
                    119
                ],
                "DatetimeLikeArrayMixin._hasnans": [
                    119
                ],
                "_hasnans": [
                    120
                ],
                "property": [
                    129,
                    660,
                    122,
                    380,
                    669
                ],
                "self._data._data": [
                    132
                ],
                "self._data": [
                    994,
                    643,
                    132,
                    425,
                    974,
                    240,
                    699,
                    212,
                    628,
                    534,
                    991,
                    667,
                    604,
                    541,
                    703
                ],
                "lib.item_from_zerodim": [
                    138
                ],
                "lib": [
                    138,
                    139,
                    623,
                    464,
                    658,
                    694,
                    695,
                    665,
                    222
                ],
                "is_bool_dtype": [
                    139
                ],
                "lib.is_scalar": [
                    464,
                    139
                ],
                "attrs": [
                    388,
                    394,
                    395,
                    142,
                    143,
                    145,
                    146
                ],
                "self._get_attributes_dict": [
                    142
                ],
                "is_period_dtype": [
                    616,
                    203,
                    459,
                    143,
                    638
                ],
                "Index": [
                    769,
                    933,
                    712,
                    906,
                    237,
                    655,
                    175,
                    529,
                    146,
                    656,
                    657,
                    756
                ],
                "self.is_": [
                    154
                ],
                "ABCIndexClass": [
                    157
                ],
                "type": [
                    643,
                    645,
                    901,
                    521,
                    523,
                    785,
                    792,
                    920,
                    541,
                    542,
                    159,
                    161,
                    565,
                    825,
                    828,
                    703,
                    705,
                    212,
                    215,
                    607,
                    866,
                    994,
                    995,
                    235,
                    879,
                    755,
                    628,
                    629,
                    757
                ],
                "ValueError": [
                    162,
                    291,
                    902,
                    524,
                    818,
                    180,
                    535,
                    251,
                    348
                ],
                "TypeError": [
                    162,
                    902,
                    233,
                    180,
                    535,
                    538,
                    923,
                    925
                ],
                "OverflowError": [
                    162
                ],
                "is_dtype_equal": [
                    169
                ],
                "self.dtype": [
                    994,
                    643,
                    169,
                    459,
                    879,
                    785,
                    628,
                    213,
                    635,
                    541,
                    638,
                    703
                ],
                "other.dtype": [
                    169,
                    635
                ],
                "np.array_equal": [
                    173
                ],
                "self.asi8": [
                    613,
                    200,
                    424,
                    876,
                    333,
                    173,
                    365,
                    527,
                    276,
                    308
                ],
                "other.asi8": [
                    877,
                    173
                ],
                "Any": [
                    176
                ],
                "hash": [
                    177
                ],
                "key": [
                    177,
                    179
                ],
                "res": [
                    179,
                    183
                ],
                "self.get_loc": [
                    179
                ],
                "KeyError": [
                    434,
                    180
                ],
                "is_scalar": [
                    183
                ],
                "slice": [
                    624,
                    787,
                    183,
                    442,
                    223
                ],
                "is_list_like": [
                    622,
                    183
                ],
                "len": [
                    273,
                    279,
                    803,
                    683,
                    940,
                    429,
                    559,
                    566,
                    183,
                    824,
                    827,
                    330,
                    336,
                    982,
                    984,
                    862,
                    222,
                    619,
                    750,
                    623,
                    752,
                    625
                ],
                "Appender": [
                    712,
                    217,
                    529,
                    175
                ],
                "Index.__contains__.__doc__": [
                    175
                ],
                "Index.__contains__": [
                    175
                ],
                "return_indexer": [
                    190
                ],
                "_as": [
                    193,
                    194,
                    195,
                    191
                ],
                "self.argsort": [
                    191
                ],
                "ascending": [
                    192,
                    209,
                    204,
                    206
                ],
                "sorted_index": [
                    194,
                    195
                ],
                "self.take": [
                    194
                ],
                "sorted_values": [
                    200,
                    210,
                    213
                ],
                "np.sort": [
                    200
                ],
                "self.freq": [
                    642,
                    785,
                    795,
                    674,
                    676,
                    567,
                    202,
                    461,
                    462,
                    978,
                    469,
                    470,
                    982,
                    983,
                    984,
                    985,
                    988,
                    605,
                    477,
                    989,
                    617,
                    620,
                    626,
                    764,
                    765,
                    639
                ],
                "freq.n": [
                    204,
                    206
                ],
                "arr": [
                    994,
                    995,
                    605,
                    606,
                    212,
                    628,
                    629,
                    215,
                    604,
                    541,
                    542
                ],
                "_simple_new": [
                    705,
                    994,
                    643,
                    995,
                    645,
                    628,
                    212,
                    629,
                    215,
                    541,
                    542
                ],
                "self.name": [
                    995,
                    876,
                    629,
                    695,
                    215,
                    542,
                    607
                ],
                "nv.validate_take": [
                    219
                ],
                "nv": [
                    327,
                    328,
                    362,
                    363,
                    270,
                    271,
                    305,
                    306,
                    219
                ],
                "tuple": [
                    219
                ],
                "kwargs": [
                    227,
                    327,
                    362,
                    270,
                    305,
                    378,
                    219
                ],
                "indices": [
                    227,
                    220,
                    222
                ],
                "ensure_int64": [
                    220,
                    623
                ],
                "maybe_slice": [
                    224,
                    222,
                    223
                ],
                "lib.maybe_indices_to_slice": [
                    222,
                    623
                ],
                "ExtensionIndex.take": [
                    226
                ],
                "axis": [
                    227,
                    328,
                    363,
                    271,
                    306
                ],
                "allow_fill": [
                    227
                ],
                "fill_value": [
                    227
                ],
                "_index_shared_docs": [
                    217
                ],
                "value": [
                    232,
                    235,
                    237,
                    238,
                    240
                ],
                "__name__": [
                    235,
                    565
                ],
                "value._data": [
                    238
                ],
                "self._data.searchsorted": [
                    240
                ],
                "side": [
                    240
                ],
                "sorter": [
                    240
                ],
                "doc": [
                    230
                ],
                "IndexOpsMixin.searchsorted": [
                    230
                ],
                "IndexOpsMixin": [
                    230
                ],
                "_can_hold_na": [
                    242
                ],
                "_na_value": [
                    244
                ],
                "NaT": [
                    980,
                    244
                ],
                "tolerance": [
                    248,
                    250,
                    252
                ],
                "np.asarray": [
                    248
                ],
                "to_numpy": [
                    248
                ],
                "to_timedelta": [
                    248
                ],
                "target.size": [
                    250
                ],
                "target": [
                    250
                ],
                "tolerance.size": [
                    250
                ],
                "list": [
                    258,
                    378
                ],
                "self.astype": [
                    258,
                    972,
                    525
                ],
                "object": [
                    258,
                    972,
                    525
                ],
                "nv.validate_min": [
                    270
                ],
                "args": [
                    305,
                    362,
                    270,
                    327
                ],
                "nv.validate_minmax_axis": [
                    328,
                    306,
                    363,
                    271
                ],
                "self._na_value": [
                    292,
                    331,
                    274,
                    344,
                    349,
                    287
                ],
                "i8": [
                    289,
                    313,
                    333,
                    346,
                    365,
                    336,
                    337,
                    338,
                    370,
                    276,
                    308,
                    371,
                    279,
                    280,
                    281,
                    314,
                    315,
                    372
                ],
                "self.is_monotonic": [
                    800,
                    427,
                    336,
                    279,
                    767
                ],
                "iNaT": [
                    280,
                    337
                ],
                "self._box_func": [
                    281,
                    290,
                    347,
                    338
                ],
                "self.hasnans": [
                    283,
                    340,
                    309,
                    366
                ],
                "skipna": [
                    368,
                    284,
                    341,
                    311
                ],
                "min_stamp": [
                    289,
                    290,
                    285
                ],
                "asi8.min": [
                    285
                ],
                "asi8": [
                    993,
                    285,
                    342
                ],
                "self._isnan": [
                    342,
                    285,
                    310,
                    367
                ],
                "i8.min": [
                    289
                ],
                "nv.validate_argmin": [
                    305
                ],
                "mask": [
                    367,
                    368,
                    371,
                    310,
                    311,
                    314
                ],
                "mask.all": [
                    368,
                    311
                ],
                "i8.copy": [
                    313,
                    370
                ],
                "max": [
                    314
                ],
                "np.iinfo": [
                    314
                ],
                "i8.argmin": [
                    315
                ],
                "nv.validate_max": [
                    327
                ],
                "max_stamp": [
                    346,
                    347,
                    342
                ],
                "asi8.max": [
                    342
                ],
                "i8.max": [
                    346
                ],
                "nv.validate_argmax": [
                    362
                ],
                "i8.argmax": [
                    372
                ],
                "header": [
                    378
                ],
                "self._format_native_types": [
                    378
                ],
                "na_rep": [
                    378
                ],
                "AbstractMethodError": [
                    382
                ],
                "_format_attrs": [
                    388
                ],
                "super": [
                    714,
                    388,
                    863
                ],
                "attrib": [
                    389,
                    390
                ],
                "self._attributes": [
                    389
                ],
                "self.freqstr": [
                    568,
                    391
                ],
                "repr": [
                    393
                ],
                "attrs.append": [
                    394
                ],
                "NotImplementedError": [
                    401,
                    404,
                    486
                ],
                "datetime": [
                    403,
                    476,
                    407
                ],
                "self._validate_partial_date_slice": [
                    421
                ],
                "reso": [
                    421,
                    423
                ],
                "t1": [
                    423,
                    430,
                    431,
                    440,
                    445
                ],
                "t2": [
                    423,
                    430,
                    431,
                    441,
                    446
                ],
                "self._parsed_string_to_bounds": [
                    423
                ],
                "parsed": [
                    423
                ],
                "i8vals": [
                    424,
                    440,
                    441,
                    445,
                    446
                ],
                "unbox": [
                    425,
                    440,
                    441,
                    445,
                    446
                ],
                "self._data._unbox_scalar": [
                    425,
                    991
                ],
                "use_lhs": [
                    440,
                    445,
                    430
                ],
                "use_rhs": [
                    441,
                    446,
                    431
                ],
                "i8vals.searchsorted": [
                    440,
                    441
                ],
                "lhs_mask": [
                    449,
                    445
                ],
                "rhs_mask": [
                    449,
                    446
                ],
                "nonzero": [
                    449
                ],
                "isna": [
                    464
                ],
                "Tick": [
                    467,
                    469
                ],
                "timedelta": [
                    467
                ],
                "np.timedelta64": [
                    467
                ],
                "np.datetime64": [
                    476
                ],
                "is_timedelta64_dtype": [
                    479
                ],
                "is_object_dtype": [
                    481
                ],
                "is_datetime64_any_dtype": [
                    483
                ],
                "__add__": [
                    488
                ],
                "_make_wrapped_arith_op_with_freq": [
                    488,
                    489
                ],
                "__sub__": [
                    489
                ],
                "__radd__": [
                    490
                ],
                "__rsub__": [
                    491
                ],
                "__pow__": [
                    492
                ],
                "__rpow__": [
                    493
                ],
                "__mul__": [
                    494
                ],
                "__rmul__": [
                    495
                ],
                "__floordiv__": [
                    496
                ],
                "__rfloordiv__": [
                    497
                ],
                "__mod__": [
                    498
                ],
                "__rmod__": [
                    499
                ],
                "__divmod__": [
                    500
                ],
                "__rdivmod__": [
                    501
                ],
                "__truediv__": [
                    502
                ],
                "__rtruediv__": [
                    503
                ],
                "level": [
                    910,
                    518,
                    519
                ],
                "self._validate_index_level": [
                    519
                ],
                "values": [
                    705,
                    521,
                    523,
                    525,
                    527,
                    531,
                    696,
                    698,
                    699,
                    540,
                    701,
                    703
                ],
                "isin": [
                    525
                ],
                "algorithms.isin": [
                    527
                ],
                "algorithms": [
                    527
                ],
                "values.asi8": [
                    527
                ],
                "self.view": [
                    825,
                    531
                ],
                "self._data._validate_where_value": [
                    534
                ],
                "oth": [
                    537,
                    538
                ],
                "getattr": [
                    537
                ],
                "err": [
                    538
                ],
                "astype": [
                    540
                ],
                "np.where": [
                    540
                ],
                "cond": [
                    540
                ],
                "Index.where.__doc__": [
                    529
                ],
                "Index.where": [
                    529
                ],
                "formatter": [
                    560,
                    558
                ],
                "self._formatter_func": [
                    558
                ],
                "index_summary": [
                    560,
                    562,
                    566
                ],
                "name": [
                    705,
                    645,
                    564,
                    565,
                    566,
                    695,
                    636
                ],
                "result.replace": [
                    571
                ],
                "self._data.view": [
                    604
                ],
                "arr._freq": [
                    605
                ],
                "arr._time_shift": [
                    606
                ],
                "periods": [
                    606
                ],
                "new_i8s": [
                    993,
                    994,
                    628,
                    613
                ],
                "np.delete": [
                    613
                ],
                "loc": [
                    993,
                    613,
                    838,
                    839,
                    618,
                    619,
                    972,
                    622,
                    623,
                    624,
                    625,
                    852,
                    853,
                    982,
                    984
                ],
                "is_integer": [
                    618
                ],
                "np.array": [
                    623
                ],
                "loc.step": [
                    624
                ],
                "loc.start": [
                    625
                ],
                "loc.stop": [
                    625
                ],
                "get_op_result_name": [
                    636
                ],
                "cast": [
                    641
                ],
                "DatetimeTimedeltaMixin": [
                    641
                ],
                "self._can_fast_union": [
                    642
                ],
                "new_data": [
                    643,
                    645
                ],
                "joined": [
                    643
                ],
                "inherit_names": [
                    104,
                    99
                ],
                "DatetimeIndexOpsMixin": [
                    648
                ],
                "Int64Index": [
                    648,
                    876,
                    877
                ],
                "_is_monotonic_increasing": [
                    655
                ],
                "Index.is_monotonic_increasing": [
                    655
                ],
                "_is_monotonic_decreasing": [
                    656
                ],
                "Index.is_monotonic_decreasing": [
                    656
                ],
                "_is_unique": [
                    657
                ],
                "Index.is_unique": [
                    657
                ],
                "_freq": [
                    658
                ],
                "lib.no_default": [
                    665,
                    658,
                    694,
                    695
                ],
                "self._freq": [
                    665,
                    666
                ],
                "self._data.freq": [
                    667
                ],
                "self.freq.freqstr": [
                    676
                ],
                "index": [
                    679,
                    682,
                    686,
                    690,
                    692
                ],
                "self.copy": [
                    751,
                    679
                ],
                "index._freq": [
                    690,
                    682,
                    686
                ],
                "to_offset": [
                    689
                ],
                "self.inferred_freq": [
                    689
                ],
                "Label": [
                    694
                ],
                "cache": [
                    696,
                    706
                ],
                "self._cache.copy": [
                    696
                ],
                "self._cache": [
                    696
                ],
                "result._cache": [
                    706
                ],
                "new_idx": [
                    714,
                    715
                ],
                "_with_freq": [
                    856,
                    714,
                    842
                ],
                "difference": [
                    714
                ],
                "sort": [
                    769,
                    833,
                    871,
                    744,
                    714,
                    878,
                    912,
                    756,
                    863
                ],
                "Index.difference.__doc__": [
                    712
                ],
                "Index.difference": [
                    712
                ],
                "self._validate_sort_keyword": [
                    744
                ],
                "self._assert_can_do_setop": [
                    745
                ],
                "self.equals": [
                    747,
                    862
                ],
                "self._get_reconciled_name_object": [
                    748
                ],
                "other.copy": [
                    753
                ],
                "Index.intersection": [
                    769,
                    756
                ],
                "result.freq": [
                    872,
                    758
                ],
                "result._with_freq": [
                    873,
                    770,
                    759
                ],
                "other.freq": [
                    797,
                    763,
                    765,
                    766
                ],
                "other.freq.is_anchored": [
                    766
                ],
                "other.is_monotonic": [
                    800,
                    767
                ],
                "end": [
                    784,
                    787,
                    781
                ],
                "min": [
                    781
                ],
                "start": [
                    784,
                    787,
                    782
                ],
                "lslice": [
                    787,
                    788
                ],
                "left.slice_locs": [
                    787
                ],
                "left_chunk": [
                    788,
                    789
                ],
                "left._values": [
                    840,
                    788,
                    854
                ],
                "self._shallow_copy": [
                    856,
                    842,
                    789
                ],
                "right_start": [
                    817,
                    812
                ],
                "left_end": [
                    813,
                    847,
                    817,
                    851,
                    852
                ],
                "other.view": [
                    828
                ],
                "left_start": [
                    837,
                    838
                ],
                "right.searchsorted": [
                    852,
                    838
                ],
                "right_chunk": [
                    840,
                    853,
                    854,
                    839
                ],
                "right._values": [
                    853,
                    839
                ],
                "dates": [
                    840,
                    842,
                    856,
                    854
                ],
                "concat_compat": [
                    840,
                    854
                ],
                "right_end": [
                    848,
                    851
                ],
                "_union": [
                    863
                ],
                "this": [
                    928,
                    930,
                    868,
                    870,
                    871,
                    905,
                    907,
                    916,
                    918
                ],
                "self._maybe_utc_convert": [
                    905,
                    868
                ],
                "this._can_fast_union": [
                    870
                ],
                "this._fast_union": [
                    871
                ],
                "i8self": [
                    876,
                    878
                ],
                "Int64Index._simple_new": [
                    876,
                    877
                ],
                "i8other": [
                    877,
                    878
                ],
                "other.name": [
                    877
                ],
                "i8result": [
                    878,
                    879
                ],
                "i8self._union": [
                    878
                ],
                "_join_precedence": [
                    884
                ],
                "_inner_indexer": [
                    886
                ],
                "_join_i8_wrapper": [
                    888,
                    889,
                    886,
                    887
                ],
                "libjoin.inner_join_indexer": [
                    886
                ],
                "libjoin": [
                    888,
                    890,
                    886,
                    887
                ],
                "_outer_indexer": [
                    887
                ],
                "libjoin.outer_join_indexer": [
                    887
                ],
                "_left_indexer": [
                    888
                ],
                "libjoin.left_join_indexer": [
                    888
                ],
                "_left_indexer_unique": [
                    889
                ],
                "libjoin.left_join_indexer_unique": [
                    890
                ],
                "self._is_convertible_to_index_for_join": [
                    899
                ],
                "Index.join": [
                    906
                ],
                "how": [
                    909
                ],
                "return_indexers": [
                    911
                ],
                "hasattr": [
                    917
                ],
                "self.tz": [
                    921,
                    927
                ],
                "other.tz": [
                    922,
                    924,
                    927
                ],
                "timezones.tz_compare": [
                    927
                ],
                "timezones": [
                    927
                ],
                "self.tz_convert": [
                    928
                ],
                "other.tz_convert": [
                    929
                ],
                "cls": [
                    938
                ],
                "other.inferred_type": [
                    940
                ],
                "classmethod": [
                    932
                ],
                "item": [
                    993,
                    969,
                    972,
                    974,
                    980,
                    982,
                    984,
                    988,
                    991
                ],
                "insert": [
                    972
                ],
                "self._data._validate_insert_value": [
                    974
                ],
                "self.size": [
                    979
                ],
                "self.freq.is_on_offset": [
                    988
                ],
                "np.concatenate": [
                    993
                ]
            },
            "filtered_variables_in_file": {
                "_index_doc_kwargs": [
                    217,
                    50
                ],
                "ibase._index_doc_kwargs": [
                    50
                ],
                "ibase": [
                    50
                ],
                "left": [
                    775,
                    777,
                    781,
                    787,
                    788,
                    808,
                    810,
                    813,
                    817,
                    440,
                    442,
                    60,
                    61,
                    832,
                    65,
                    836,
                    69,
                    837,
                    840,
                    845,
                    847,
                    854,
                    859
                ],
                "np.ndarray": [
                    634,
                    60,
                    701,
                    62
                ],
                "np": [
                    993,
                    613,
                    701,
                    200,
                    173,
                    623,
                    467,
                    634,
                    248,
                    314,
                    476,
                    60,
                    540,
                    62
                ],
                "ABCIndex": [
                    60,
                    62
                ],
                "ABCSeries": [
                    60,
                    62
                ],
                "DatetimeLikeArrayMixin": [
                    101,
                    105,
                    119,
                    60,
                    62
                ],
                "left.view": [
                    61
                ],
                "right": [
                    775,
                    777,
                    781,
                    782,
                    808,
                    810,
                    812,
                    441,
                    442,
                    62,
                    63,
                    832,
                    65,
                    836,
                    838,
                    839,
                    845,
                    848,
                    852,
                    853
                ],
                "right.view": [
                    63
                ],
                "results": [
                    65,
                    74,
                    71
                ],
                "joinf": [
                    65
                ],
                "with_indexers": [
                    66
                ],
                "dtype": [
                    72,
                    69
                ],
                "left.dtype.base": [
                    69
                ],
                "left.dtype": [
                    69
                ],
                "join_index": [
                    72,
                    73,
                    71
                ],
                "left_indexer": [
                    73,
                    71
                ],
                "right_indexer": [
                    73,
                    71
                ],
                "join_index.view": [
                    72
                ],
                "wrapper": [
                    76
                ],
                "meth": [
                    84,
                    87
                ],
                "make_wrapped_arith_op": [
                    503,
                    490,
                    491,
                    492,
                    493,
                    494,
                    495,
                    496,
                    497,
                    498,
                    499,
                    84,
                    500,
                    501,
                    502
                ],
                "opname": [
                    84,
                    95
                ],
                "result": [
                    769,
                    770,
                    771,
                    138,
                    139,
                    140,
                    146,
                    540,
                    541,
                    566,
                    568,
                    571,
                    572,
                    705,
                    706,
                    707,
                    842,
                    843,
                    87,
                    88,
                    856,
                    857,
                    92,
                    93,
                    606,
                    607,
                    871,
                    872,
                    873,
                    874,
                    879,
                    880,
                    756,
                    757,
                    758,
                    759,
                    760
                ],
                "self": [
                    519,
                    521,
                    523,
                    525,
                    527,
                    531,
                    534,
                    541,
                    542,
                    558,
                    559,
                    560,
                    565,
                    566,
                    567,
                    568,
                    87,
                    91,
                    604,
                    605,
                    607,
                    613,
                    616,
                    617,
                    619,
                    620,
                    623,
                    625,
                    626,
                    628,
                    629,
                    635,
                    636,
                    638,
                    639,
                    641,
                    642,
                    643,
                    132,
                    645,
                    142,
                    143,
                    665,
                    154,
                    666,
                    667,
                    159,
                    161,
                    674,
                    676,
                    679,
                    169,
                    683,
                    173,
                    689,
                    179,
                    695,
                    696,
                    699,
                    191,
                    703,
                    705,
                    194,
                    200,
                    202,
                    203,
                    212,
                    213,
                    215,
                    222,
                    224,
                    227,
                    744,
                    745,
                    747,
                    748,
                    750,
                    751,
                    240,
                    755,
                    756,
                    757,
                    764,
                    765,
                    767,
                    769,
                    258,
                    774,
                    775,
                    777,
                    273,
                    274,
                    785,
                    276,
                    789,
                    279,
                    792,
                    281,
                    283,
                    795,
                    285,
                    287,
                    800,
                    290,
                    803,
                    292,
                    807,
                    808,
                    810,
                    308,
                    309,
                    310,
                    825,
                    827,
                    828,
                    831,
                    832,
                    836,
                    330,
                    331,
                    842,
                    333,
                    845,
                    336,
                    338,
                    340,
                    342,
                    344,
                    856,
                    347,
                    349,
                    862,
                    866,
                    868,
                    876,
                    365,
                    366,
                    367,
                    879,
                    378,
                    382,
                    899,
                    389,
                    901,
                    391,
                    905,
                    916,
                    917,
                    920,
                    921,
                    927,
                    928,
                    421,
                    423,
                    424,
                    425,
                    427,
                    429,
                    430,
                    431,
                    459,
                    972,
                    461,
                    462,
                    974,
                    978,
                    979,
                    469,
                    470,
                    982,
                    983,
                    984,
                    985,
                    988,
                    477,
                    989,
                    991,
                    993,
                    994,
                    995
                ],
                "other": [
                    769,
                    642,
                    899,
                    901,
                    774,
                    775,
                    777,
                    905,
                    908,
                    767,
                    534,
                    918,
                    792,
                    537,
                    154,
                    920,
                    540,
                    157,
                    797,
                    159,
                    800,
                    161,
                    922,
                    803,
                    924,
                    927,
                    929,
                    807,
                    808,
                    169,
                    810,
                    930,
                    938,
                    173,
                    940,
                    824,
                    828,
                    831,
                    832,
                    836,
                    714,
                    845,
                    464,
                    467,
                    87,
                    473,
                    91,
                    476,
                    862,
                    479,
                    863,
                    481,
                    866,
                    483,
                    868,
                    870,
                    871,
                    745,
                    747,
                    748,
                    877,
                    752,
                    753,
                    755,
                    756,
                    635,
                    636,
                    765,
                    766,
                    763
                ],
                "new_freq": [
                    468,
                    470,
                    471,
                    91,
                    92
                ],
                "self._get_addsub_freq": [
                    91
                ],
                "result._freq": [
                    92
                ],
                "wrapped.__name__": [
                    95
                ],
                "wrapped": [
                    96,
                    95
                ],
                "ExtensionIndex": [
                    226,
                    107
                ],
                "_data": [
                    112
                ],
                "Union": [
                    112
                ],
                "DatetimeArray": [
                    112
                ],
                "TimedeltaArray": [
                    112
                ],
                "PeriodArray": [
                    112
                ],
                "freq": [
                    642,
                    643,
                    391,
                    392,
                    393,
                    394,
                    795,
                    797,
                    680,
                    683,
                    686,
                    688,
                    689,
                    690,
                    817,
                    202,
                    203,
                    204,
                    205,
                    206,
                    207,
                    976,
                    213,
                    983,
                    985,
                    989,
                    606,
                    994,
                    615,
                    617,
                    620,
                    113,
                    626,
                    628,
                    639
                ],
                "Optional": [
                    113,
                    114,
                    454
                ],
                "DateOffset": [
                    113,
                    683,
                    473,
                    454
                ],
                "freqstr": [
                    114
                ],
                "_resolution": [
                    115
                ],
                "_bool_ops": [
                    116
                ],
                "List": [
                    116,
                    117,
                    254
                ],
                "_field_ops": [
                    117
                ],
                "hasnans": [
                    120,
                    119
                ],
                "cache_readonly": [
                    119
                ],
                "DatetimeLikeArrayMixin._hasnans.fget": [
                    119
                ],
                "DatetimeLikeArrayMixin._hasnans": [
                    119
                ],
                "_hasnans": [
                    120
                ],
                "self._data._data": [
                    132
                ],
                "self._data": [
                    994,
                    643,
                    132,
                    425,
                    974,
                    240,
                    699,
                    212,
                    628,
                    534,
                    991,
                    667,
                    604,
                    541,
                    703
                ],
                "lib.item_from_zerodim": [
                    138
                ],
                "lib": [
                    138,
                    139,
                    623,
                    464,
                    658,
                    694,
                    695,
                    665,
                    222
                ],
                "is_bool_dtype": [
                    139
                ],
                "lib.is_scalar": [
                    464,
                    139
                ],
                "attrs": [
                    388,
                    394,
                    395,
                    142,
                    143,
                    145,
                    146
                ],
                "self._get_attributes_dict": [
                    142
                ],
                "is_period_dtype": [
                    616,
                    203,
                    459,
                    143,
                    638
                ],
                "Index": [
                    769,
                    933,
                    712,
                    906,
                    237,
                    655,
                    175,
                    529,
                    146,
                    656,
                    657,
                    756
                ],
                "self.is_": [
                    154
                ],
                "ABCIndexClass": [
                    157
                ],
                "is_dtype_equal": [
                    169
                ],
                "self.dtype": [
                    994,
                    643,
                    169,
                    459,
                    879,
                    785,
                    628,
                    213,
                    635,
                    541,
                    638,
                    703
                ],
                "other.dtype": [
                    169,
                    635
                ],
                "np.array_equal": [
                    173
                ],
                "self.asi8": [
                    613,
                    200,
                    424,
                    876,
                    333,
                    173,
                    365,
                    527,
                    276,
                    308
                ],
                "other.asi8": [
                    877,
                    173
                ],
                "Any": [
                    176
                ],
                "key": [
                    177,
                    179
                ],
                "res": [
                    179,
                    183
                ],
                "self.get_loc": [
                    179
                ],
                "is_scalar": [
                    183
                ],
                "is_list_like": [
                    622,
                    183
                ],
                "Appender": [
                    712,
                    217,
                    529,
                    175
                ],
                "Index.__contains__.__doc__": [
                    175
                ],
                "Index.__contains__": [
                    175
                ],
                "return_indexer": [
                    190
                ],
                "_as": [
                    193,
                    194,
                    195,
                    191
                ],
                "self.argsort": [
                    191
                ],
                "ascending": [
                    192,
                    209,
                    204,
                    206
                ],
                "sorted_index": [
                    194,
                    195
                ],
                "self.take": [
                    194
                ],
                "sorted_values": [
                    200,
                    210,
                    213
                ],
                "np.sort": [
                    200
                ],
                "self.freq": [
                    642,
                    785,
                    795,
                    674,
                    676,
                    567,
                    202,
                    461,
                    462,
                    978,
                    469,
                    470,
                    982,
                    983,
                    984,
                    985,
                    988,
                    605,
                    477,
                    989,
                    617,
                    620,
                    626,
                    764,
                    765,
                    639
                ],
                "freq.n": [
                    204,
                    206
                ],
                "arr": [
                    994,
                    995,
                    605,
                    606,
                    212,
                    628,
                    629,
                    215,
                    604,
                    541,
                    542
                ],
                "_simple_new": [
                    705,
                    994,
                    643,
                    995,
                    645,
                    628,
                    212,
                    629,
                    215,
                    541,
                    542
                ],
                "self.name": [
                    995,
                    876,
                    629,
                    695,
                    215,
                    542,
                    607
                ],
                "nv.validate_take": [
                    219
                ],
                "nv": [
                    327,
                    328,
                    362,
                    363,
                    270,
                    271,
                    305,
                    306,
                    219
                ],
                "kwargs": [
                    227,
                    327,
                    362,
                    270,
                    305,
                    378,
                    219
                ],
                "indices": [
                    227,
                    220,
                    222
                ],
                "ensure_int64": [
                    220,
                    623
                ],
                "maybe_slice": [
                    224,
                    222,
                    223
                ],
                "lib.maybe_indices_to_slice": [
                    222,
                    623
                ],
                "ExtensionIndex.take": [
                    226
                ],
                "axis": [
                    227,
                    328,
                    363,
                    271,
                    306
                ],
                "allow_fill": [
                    227
                ],
                "fill_value": [
                    227
                ],
                "_index_shared_docs": [
                    217
                ],
                "value": [
                    232,
                    235,
                    237,
                    238,
                    240
                ],
                "value._data": [
                    238
                ],
                "self._data.searchsorted": [
                    240
                ],
                "side": [
                    240
                ],
                "sorter": [
                    240
                ],
                "doc": [
                    230
                ],
                "IndexOpsMixin.searchsorted": [
                    230
                ],
                "IndexOpsMixin": [
                    230
                ],
                "_can_hold_na": [
                    242
                ],
                "_na_value": [
                    244
                ],
                "NaT": [
                    980,
                    244
                ],
                "tolerance": [
                    248,
                    250,
                    252
                ],
                "np.asarray": [
                    248
                ],
                "to_numpy": [
                    248
                ],
                "to_timedelta": [
                    248
                ],
                "target.size": [
                    250
                ],
                "target": [
                    250
                ],
                "tolerance.size": [
                    250
                ],
                "self.astype": [
                    258,
                    972,
                    525
                ],
                "nv.validate_min": [
                    270
                ],
                "args": [
                    305,
                    362,
                    270,
                    327
                ],
                "nv.validate_minmax_axis": [
                    328,
                    306,
                    363,
                    271
                ],
                "self._na_value": [
                    292,
                    331,
                    274,
                    344,
                    349,
                    287
                ],
                "i8": [
                    289,
                    313,
                    333,
                    346,
                    365,
                    336,
                    337,
                    338,
                    370,
                    276,
                    308,
                    371,
                    279,
                    280,
                    281,
                    314,
                    315,
                    372
                ],
                "self.is_monotonic": [
                    800,
                    427,
                    336,
                    279,
                    767
                ],
                "iNaT": [
                    280,
                    337
                ],
                "self._box_func": [
                    281,
                    290,
                    347,
                    338
                ],
                "self.hasnans": [
                    283,
                    340,
                    309,
                    366
                ],
                "skipna": [
                    368,
                    284,
                    341,
                    311
                ],
                "min_stamp": [
                    289,
                    290,
                    285
                ],
                "asi8.min": [
                    285
                ],
                "asi8": [
                    993,
                    285,
                    342
                ],
                "self._isnan": [
                    342,
                    285,
                    310,
                    367
                ],
                "i8.min": [
                    289
                ],
                "nv.validate_argmin": [
                    305
                ],
                "mask": [
                    367,
                    368,
                    371,
                    310,
                    311,
                    314
                ],
                "mask.all": [
                    368,
                    311
                ],
                "i8.copy": [
                    313,
                    370
                ],
                "np.iinfo": [
                    314
                ],
                "i8.argmin": [
                    315
                ],
                "nv.validate_max": [
                    327
                ],
                "max_stamp": [
                    346,
                    347,
                    342
                ],
                "asi8.max": [
                    342
                ],
                "i8.max": [
                    346
                ],
                "nv.validate_argmax": [
                    362
                ],
                "i8.argmax": [
                    372
                ],
                "header": [
                    378
                ],
                "self._format_native_types": [
                    378
                ],
                "na_rep": [
                    378
                ],
                "AbstractMethodError": [
                    382
                ],
                "_format_attrs": [
                    388
                ],
                "attrib": [
                    389,
                    390
                ],
                "self._attributes": [
                    389
                ],
                "self.freqstr": [
                    568,
                    391
                ],
                "attrs.append": [
                    394
                ],
                "datetime": [
                    403,
                    476,
                    407
                ],
                "self._validate_partial_date_slice": [
                    421
                ],
                "reso": [
                    421,
                    423
                ],
                "t1": [
                    423,
                    430,
                    431,
                    440,
                    445
                ],
                "t2": [
                    423,
                    430,
                    431,
                    441,
                    446
                ],
                "self._parsed_string_to_bounds": [
                    423
                ],
                "parsed": [
                    423
                ],
                "i8vals": [
                    424,
                    440,
                    441,
                    445,
                    446
                ],
                "unbox": [
                    425,
                    440,
                    441,
                    445,
                    446
                ],
                "self._data._unbox_scalar": [
                    425,
                    991
                ],
                "use_lhs": [
                    440,
                    445,
                    430
                ],
                "use_rhs": [
                    441,
                    446,
                    431
                ],
                "i8vals.searchsorted": [
                    440,
                    441
                ],
                "lhs_mask": [
                    449,
                    445
                ],
                "rhs_mask": [
                    449,
                    446
                ],
                "nonzero": [
                    449
                ],
                "isna": [
                    464
                ],
                "Tick": [
                    467,
                    469
                ],
                "timedelta": [
                    467
                ],
                "np.timedelta64": [
                    467
                ],
                "np.datetime64": [
                    476
                ],
                "is_timedelta64_dtype": [
                    479
                ],
                "is_object_dtype": [
                    481
                ],
                "is_datetime64_any_dtype": [
                    483
                ],
                "__add__": [
                    488
                ],
                "_make_wrapped_arith_op_with_freq": [
                    488,
                    489
                ],
                "__sub__": [
                    489
                ],
                "__radd__": [
                    490
                ],
                "__rsub__": [
                    491
                ],
                "__pow__": [
                    492
                ],
                "__rpow__": [
                    493
                ],
                "__mul__": [
                    494
                ],
                "__rmul__": [
                    495
                ],
                "__floordiv__": [
                    496
                ],
                "__rfloordiv__": [
                    497
                ],
                "__mod__": [
                    498
                ],
                "__rmod__": [
                    499
                ],
                "__divmod__": [
                    500
                ],
                "__rdivmod__": [
                    501
                ],
                "__truediv__": [
                    502
                ],
                "__rtruediv__": [
                    503
                ],
                "level": [
                    910,
                    518,
                    519
                ],
                "self._validate_index_level": [
                    519
                ],
                "values": [
                    705,
                    521,
                    523,
                    525,
                    527,
                    531,
                    696,
                    698,
                    699,
                    540,
                    701,
                    703
                ],
                "isin": [
                    525
                ],
                "algorithms.isin": [
                    527
                ],
                "algorithms": [
                    527
                ],
                "values.asi8": [
                    527
                ],
                "self.view": [
                    825,
                    531
                ],
                "self._data._validate_where_value": [
                    534
                ],
                "oth": [
                    537,
                    538
                ],
                "err": [
                    538
                ],
                "astype": [
                    540
                ],
                "np.where": [
                    540
                ],
                "cond": [
                    540
                ],
                "Index.where.__doc__": [
                    529
                ],
                "Index.where": [
                    529
                ],
                "formatter": [
                    560,
                    558
                ],
                "self._formatter_func": [
                    558
                ],
                "index_summary": [
                    560,
                    562,
                    566
                ],
                "name": [
                    705,
                    645,
                    564,
                    565,
                    566,
                    695,
                    636
                ],
                "result.replace": [
                    571
                ],
                "self._data.view": [
                    604
                ],
                "arr._freq": [
                    605
                ],
                "arr._time_shift": [
                    606
                ],
                "periods": [
                    606
                ],
                "new_i8s": [
                    993,
                    994,
                    628,
                    613
                ],
                "np.delete": [
                    613
                ],
                "loc": [
                    993,
                    613,
                    838,
                    839,
                    618,
                    619,
                    972,
                    622,
                    623,
                    624,
                    625,
                    852,
                    853,
                    982,
                    984
                ],
                "is_integer": [
                    618
                ],
                "np.array": [
                    623
                ],
                "loc.step": [
                    624
                ],
                "loc.start": [
                    625
                ],
                "loc.stop": [
                    625
                ],
                "get_op_result_name": [
                    636
                ],
                "cast": [
                    641
                ],
                "DatetimeTimedeltaMixin": [
                    641
                ],
                "self._can_fast_union": [
                    642
                ],
                "new_data": [
                    643,
                    645
                ],
                "joined": [
                    643
                ],
                "inherit_names": [
                    104,
                    99
                ],
                "DatetimeIndexOpsMixin": [
                    648
                ],
                "Int64Index": [
                    648,
                    876,
                    877
                ],
                "_is_monotonic_increasing": [
                    655
                ],
                "Index.is_monotonic_increasing": [
                    655
                ],
                "_is_monotonic_decreasing": [
                    656
                ],
                "Index.is_monotonic_decreasing": [
                    656
                ],
                "_is_unique": [
                    657
                ],
                "Index.is_unique": [
                    657
                ],
                "_freq": [
                    658
                ],
                "lib.no_default": [
                    665,
                    658,
                    694,
                    695
                ],
                "self._freq": [
                    665,
                    666
                ],
                "self._data.freq": [
                    667
                ],
                "self.freq.freqstr": [
                    676
                ],
                "index": [
                    679,
                    682,
                    686,
                    690,
                    692
                ],
                "self.copy": [
                    751,
                    679
                ],
                "index._freq": [
                    690,
                    682,
                    686
                ],
                "to_offset": [
                    689
                ],
                "self.inferred_freq": [
                    689
                ],
                "Label": [
                    694
                ],
                "cache": [
                    696,
                    706
                ],
                "self._cache.copy": [
                    696
                ],
                "self._cache": [
                    696
                ],
                "result._cache": [
                    706
                ],
                "new_idx": [
                    714,
                    715
                ],
                "_with_freq": [
                    856,
                    714,
                    842
                ],
                "difference": [
                    714
                ],
                "sort": [
                    769,
                    833,
                    871,
                    744,
                    714,
                    878,
                    912,
                    756,
                    863
                ],
                "Index.difference.__doc__": [
                    712
                ],
                "Index.difference": [
                    712
                ],
                "self._validate_sort_keyword": [
                    744
                ],
                "self._assert_can_do_setop": [
                    745
                ],
                "self.equals": [
                    747,
                    862
                ],
                "self._get_reconciled_name_object": [
                    748
                ],
                "other.copy": [
                    753
                ],
                "Index.intersection": [
                    769,
                    756
                ],
                "result.freq": [
                    872,
                    758
                ],
                "result._with_freq": [
                    873,
                    770,
                    759
                ],
                "other.freq": [
                    797,
                    763,
                    765,
                    766
                ],
                "other.freq.is_anchored": [
                    766
                ],
                "other.is_monotonic": [
                    800,
                    767
                ],
                "end": [
                    784,
                    787,
                    781
                ],
                "start": [
                    784,
                    787,
                    782
                ],
                "lslice": [
                    787,
                    788
                ],
                "left.slice_locs": [
                    787
                ],
                "left_chunk": [
                    788,
                    789
                ],
                "left._values": [
                    840,
                    788,
                    854
                ],
                "self._shallow_copy": [
                    856,
                    842,
                    789
                ],
                "right_start": [
                    817,
                    812
                ],
                "left_end": [
                    813,
                    847,
                    817,
                    851,
                    852
                ],
                "other.view": [
                    828
                ],
                "left_start": [
                    837,
                    838
                ],
                "right.searchsorted": [
                    852,
                    838
                ],
                "right_chunk": [
                    840,
                    853,
                    854,
                    839
                ],
                "right._values": [
                    853,
                    839
                ],
                "dates": [
                    840,
                    842,
                    856,
                    854
                ],
                "concat_compat": [
                    840,
                    854
                ],
                "right_end": [
                    848,
                    851
                ],
                "_union": [
                    863
                ],
                "this": [
                    928,
                    930,
                    868,
                    870,
                    871,
                    905,
                    907,
                    916,
                    918
                ],
                "self._maybe_utc_convert": [
                    905,
                    868
                ],
                "this._can_fast_union": [
                    870
                ],
                "this._fast_union": [
                    871
                ],
                "i8self": [
                    876,
                    878
                ],
                "Int64Index._simple_new": [
                    876,
                    877
                ],
                "i8other": [
                    877,
                    878
                ],
                "other.name": [
                    877
                ],
                "i8result": [
                    878,
                    879
                ],
                "i8self._union": [
                    878
                ],
                "_join_precedence": [
                    884
                ],
                "_inner_indexer": [
                    886
                ],
                "_join_i8_wrapper": [
                    888,
                    889,
                    886,
                    887
                ],
                "libjoin.inner_join_indexer": [
                    886
                ],
                "libjoin": [
                    888,
                    890,
                    886,
                    887
                ],
                "_outer_indexer": [
                    887
                ],
                "libjoin.outer_join_indexer": [
                    887
                ],
                "_left_indexer": [
                    888
                ],
                "libjoin.left_join_indexer": [
                    888
                ],
                "_left_indexer_unique": [
                    889
                ],
                "libjoin.left_join_indexer_unique": [
                    890
                ],
                "self._is_convertible_to_index_for_join": [
                    899
                ],
                "Index.join": [
                    906
                ],
                "how": [
                    909
                ],
                "return_indexers": [
                    911
                ],
                "self.tz": [
                    921,
                    927
                ],
                "other.tz": [
                    922,
                    924,
                    927
                ],
                "timezones.tz_compare": [
                    927
                ],
                "timezones": [
                    927
                ],
                "self.tz_convert": [
                    928
                ],
                "other.tz_convert": [
                    929
                ],
                "cls": [
                    938
                ],
                "other.inferred_type": [
                    940
                ],
                "item": [
                    993,
                    969,
                    972,
                    974,
                    980,
                    982,
                    984,
                    988,
                    991
                ],
                "insert": [
                    972
                ],
                "self._data._validate_insert_value": [
                    974
                ],
                "self.size": [
                    979
                ],
                "self.freq.is_on_offset": [
                    988
                ],
                "np.concatenate": [
                    993
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_16/pandas/tests/arithmetic/test_period.py",
                "test_function": "test_pi_sub_period",
                "test_function_code": "    def test_pi_sub_period(self):\n        # GH#13071\n        idx = PeriodIndex(\n            [\"2011-01\", \"2011-02\", \"2011-03\", \"2011-04\"], freq=\"M\", name=\"idx\"\n        )\n\n        result = idx - pd.Period(\"2012-01\", freq=\"M\")\n        off = idx.freq\n        exp = pd.Index([-12 * off, -11 * off, -10 * off, -9 * off], name=\"idx\")\n        tm.assert_index_equal(result, exp)\n\n        result = np.subtract(idx, pd.Period(\"2012-01\", freq=\"M\"))\n        tm.assert_index_equal(result, exp)\n\n        result = pd.Period(\"2012-01\", freq=\"M\") - idx\n        exp = pd.Index([12 * off, 11 * off, 10 * off, 9 * off], name=\"idx\")\n        tm.assert_index_equal(result, exp)\n\n        result = np.subtract(pd.Period(\"2012-01\", freq=\"M\"), idx)\n        tm.assert_index_equal(result, exp)\n\n        exp = pd.TimedeltaIndex([np.nan, np.nan, np.nan, np.nan], name=\"idx\")\n        result = idx - pd.Period(\"NaT\", freq=\"M\")\n        tm.assert_index_equal(result, exp)\n        assert result.freq == exp.freq\n\n        result = pd.Period(\"NaT\", freq=\"M\") - idx\n        tm.assert_index_equal(result, exp)\n        assert result.freq == exp.freq",
                "test_error": "assert <MonthEnd> == None   +<MonthEnd>   -None",
                "full_test_error": "self = <pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods object at 0x119ff7d00>\n\n    def test_pi_sub_period(self):\n        # GH#13071\n        idx = PeriodIndex(\n            [\"2011-01\", \"2011-02\", \"2011-03\", \"2011-04\"], freq=\"M\", name=\"idx\"\n        )\n    \n        result = idx - pd.Period(\"2012-01\", freq=\"M\")\n        off = idx.freq\n        exp = pd.Index([-12 * off, -11 * off, -10 * off, -9 * off], name=\"idx\")\n        tm.assert_index_equal(result, exp)\n    \n        result = np.subtract(idx, pd.Period(\"2012-01\", freq=\"M\"))\n        tm.assert_index_equal(result, exp)\n    \n        result = pd.Period(\"2012-01\", freq=\"M\") - idx\n        exp = pd.Index([12 * off, 11 * off, 10 * off, 9 * off], name=\"idx\")\n        tm.assert_index_equal(result, exp)\n    \n        result = np.subtract(pd.Period(\"2012-01\", freq=\"M\"), idx)\n        tm.assert_index_equal(result, exp)\n    \n        exp = pd.TimedeltaIndex([np.nan, np.nan, np.nan, np.nan], name=\"idx\")\n        result = idx - pd.Period(\"NaT\", freq=\"M\")\n        tm.assert_index_equal(result, exp)\n>       assert result.freq == exp.freq\nE       assert <MonthEnd> == None\nE         +<MonthEnd>\nE         -None\n\npandas/tests/arithmetic/test_period.py:1449: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}