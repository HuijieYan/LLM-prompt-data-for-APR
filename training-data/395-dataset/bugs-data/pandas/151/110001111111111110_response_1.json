{
    "pandas": [
        {
            "bugID": 151,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 229,
            "file_name": "core/arrays/numpy_.py",
            "replace_code": "def __setitem__(self, key, value):\n\n    value = extract_array(value, extract_numpy=True)\n    \n    if not lib.is_scalar(key) and is_list_like(key):\n        key = np.asarray(key)\n    \n    if not lib.is_scalar(value):\n        value = np.asarray(value)\n    \n    values = self._ndarray\n    if not isinstance(value, str):\n        t = np.result_type(value, values)\n        if t != self._ndarray.dtype:\n            values = values.astype(t, casting=\"safe\")\n            values[key] = value\n            self._dtype = PandasDtype(str(t))\n            self._ndarray = values\n        else:\n            self._ndarray[key] = value\n    else:\n        t = np.dtype('S' + str(max([len(x) for x in values] + [len(value)])))\n        values = np.array([x.encode('utf-8') if isinstance(x, str) else x for x in values], dtype=t)\n        values[key] = value.encode('utf-8')\n        self._ndarray = values\n        self._dtype = PandasDtype(t)"
        }
    ]
}