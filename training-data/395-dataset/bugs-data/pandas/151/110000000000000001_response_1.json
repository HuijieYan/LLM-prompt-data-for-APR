{
    "pandas": [
        {
            "bugID": 151,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 229,
            "file_name": "core/arrays/numpy_.py",
            "replace_code": "def __setitem__(self, key, value):\n\n    value = extract_array(value, extract_numpy=True)\n    \n    if not lib.is_scalar(key) and is_list_like(key):\n        key = np.asarray(key)\n    \n    if not lib.is_scalar(value):\n        value = np.asarray(value)\n    \n    values = self._ndarray\n    key_dtype = np.asarray(key).dtype\n    value_dtype = np.asarray(value).dtype\n    \n    if key_dtype != self._ndarray.dtype:\n        values = values.astype(key_dtype, casting=\"safe\")\n    \n    if value_dtype != self._ndarray.dtype:\n        values = values.astype(value_dtype, casting=\"safe\")\n    \n    values[key] = value\n    self._dtype = PandasDtype(values.dtype)\n    self._ndarray = values"
        }
    ]
}