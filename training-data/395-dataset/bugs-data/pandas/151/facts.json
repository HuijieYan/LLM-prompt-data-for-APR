{
    "1.1.1": "def __setitem__(self, key, value):\n    value = extract_array(value, extract_numpy=True)\n\n    if not lib.is_scalar(key) and is_list_like(key):\n        key = np.asarray(key)\n\n    if not lib.is_scalar(value):\n        value = np.asarray(value)\n\n    values = self._ndarray\n    t = np.result_type(value, values)\n    if t != self._ndarray.dtype:\n        values = values.astype(t, casting=\"safe\")\n        values[key] = value\n        self._dtype = PandasDtype(t)\n        self._ndarray = values\n    else:\n        self._ndarray[key] = value\n",
    "1.1.2": null,
    "1.2.1": "class PandasArray(ExtensionArray, ExtensionOpsMixin, NDArrayOperatorsMixin)",
    "1.2.2": "A pandas ExtensionArray for NumPy data.\n\n.. versionadded:: 0.24.0\n\nThis is mostly for internal compatibility, and is not especially\nuseful on its own.\n\nParameters\n----------\nvalues : ndarray\n    The NumPy ndarray to wrap. Must be 1-dimensional.\ncopy : bool, default False\n    Whether to copy `values`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone",
    "1.2.3": [
        "dtype(self)"
    ],
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_151/pandas/core/arrays/numpy_.py",
    "1.3.2": [
        "dtype(self)"
    ],
    "1.4.1": [
        "@pytest.mark.parametrize(\"dtype\", [None, object])\ndef test_setitem_object_typecode(dtype):\n    arr = PandasArray(np.array([\"a\", \"b\", \"c\"], dtype=dtype))\n    arr[0] = \"t\"\n    expected = PandasArray(np.array([\"t\", \"b\", \"c\"], dtype=dtype))\n    tm.assert_extension_array_equal(arr, expected)",
        "@pytest.mark.parametrize(\"dtype\", [None, object])\ndef test_setitem_object_typecode(dtype):\n    arr = PandasArray(np.array([\"a\", \"b\", \"c\"], dtype=dtype))\n    arr[0] = \"t\"\n    expected = PandasArray(np.array([\"t\", \"b\", \"c\"], dtype=dtype))\n    tm.assert_extension_array_equal(arr, expected)",
        "def test_setitem_no_coercion():\n    # https://github.com/pandas-dev/pandas/issues/28150\n    arr = PandasArray(np.array([1, 2, 3]))\n    with pytest.raises(ValueError, match=\"int\"):\n        arr[0] = \"a\""
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_151/pandas/tests/arrays/test_numpy.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_151/pandas/tests/arrays/test_numpy.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_151/pandas/tests/arrays/test_numpy.py"
    ],
    "2.1.1": [
        [
            "E   TypeError: data type \"t\" not understood"
        ],
        [
            "E   TypeError: data type \"t\" not understood"
        ],
        [
            "E           Failed: DID NOT RAISE <class 'ValueError'>"
        ]
    ],
    "2.1.2": [
        [
            "dtype = None\n\n    @pytest.mark.parametrize(\"dtype\", [None, object])\n    def test_setitem_object_typecode(dtype):\n        arr = PandasArray(np.array([\"a\", \"b\", \"c\"], dtype=dtype))\n>       arr[0] = \"t\"\n\npandas/tests/arrays/test_numpy.py:219: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/arrays/numpy_.py:239: in __setitem__\n    t = np.result_type(value, values)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = ('t', array(['a', 'b', 'c'], dtype='<U1')), kwargs = {}\nrelevant_args = ('t', array(['a', 'b', 'c'], dtype='<U1'))\n\n>   ???",
            "\n<__array_function__ internals>:5: TypeError"
        ],
        [
            "dtype = <class 'object'>\n\n    @pytest.mark.parametrize(\"dtype\", [None, object])\n    def test_setitem_object_typecode(dtype):\n        arr = PandasArray(np.array([\"a\", \"b\", \"c\"], dtype=dtype))\n>       arr[0] = \"t\"\n\npandas/tests/arrays/test_numpy.py:219: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/arrays/numpy_.py:239: in __setitem__\n    t = np.result_type(value, values)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = ('t', array(['a', 'b', 'c'], dtype=object)), kwargs = {}\nrelevant_args = ('t', array(['a', 'b', 'c'], dtype=object))\n\n>   ???",
            "\n<__array_function__ internals>:5: TypeError"
        ],
        [
            "def test_setitem_no_coercion():\n        # https://github.com/pandas-dev/pandas/issues/28150\n        arr = PandasArray(np.array([1, 2, 3]))\n        with pytest.raises(ValueError, match=\"int\"):\n>           arr[0] = \"a\"",
            "\npandas/tests/arrays/test_numpy.py:228: Failed"
        ]
    ],
    "2.1.3": [
        [
            {
                "value": "'a'",
                "key": "0",
                "self._ndarray": "array([1, 2, 3])",
                "self": "<PandasArray>\n[1, 2, 3]\nLength: 3, dtype: int64",
                "self._dtype": "PandasDtype('int64')"
            },
            {
                "values": "array([b'a', b'2', b'3'], dtype='",
                "self._ndarray": "array([b'a', b'2', b'3'], dtype='",
                "self": "<PandasArray>\n[b'a', b'2', b'3']\nLength: 3, dtype: bytes168",
                "t": "dtype('S21')",
                "self._dtype": "PandasDtype('bytes168')"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "value": "str",
                "key": "int",
                "self._ndarray": "ndarray",
                "self": "PandasArray",
                "self._dtype": "PandasDtype"
            },
            {
                "values": "ndarray",
                "self._ndarray": "ndarray",
                "self": "PandasArray",
                "t": "dtype",
                "self._dtype": "PandasDtype"
            }
        ]
    ],
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}