{
    "pandas": [
        {
            "bugID": 151,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 229,
            "file_name": "/pandas/core/arrays/numpy_.py",
            "replace_code": "def __setitem__(self, key, value):\n\n    value = np.array(value, dtype=self.dtype, copy=True)\n    \n    # as new values have been created, fill the\n    # new values using the ndarray function\n    if not lib.is_scalar(key) and is_list_like(key):\n        key = np.asarray(key)\n    values = self._ndarray\n    # this function extracts the array from the value if it's a scalar\n    if not lib.is_scalar(value):\n        value = np.asarray(value)\n    \n    #  when object elements are being put into the\n    # ndarray, then we can not cast.\n    if is_object_dtype(self._ndarray.dtype) and is_object_dtype(value.dtype):\n        if value.size == 1 and not isinstance(value.data[0], str):\n            raise ValueError(\"Bad value\")\n        else:\n            self._ndarray[key] = value\n        return\n    # as we are assigning byte then the type should have a fixed width\n    elif self._ndarray.dtype.kind in [\"O\", \"S\", \"U\"] and value.dtype.kind in [\"O\", \"S\"]:\n        if len(value) != len(key):\n            raise ValueError(f\"Assignment shape does not match.\")\n        self._ndarray[key] = value\n    # other numpy ufuncs should add support as well\n    else:\n        values = self._ndarray.copy()\n        values[key] = value\n    # no need to change the type for fixed with type\n    if self._ndarray.dtype.kind not in [\"O\", \"S\", \"U\"]:\n        return values\n    \n    # as the ndarrays has been changed, it requires to have a dtype\n    values = self._ndarray.astype(self, casting=\"safe\")\n    self._dtype = PandasDtype(values.dtype)\n    self._ndarray = values"
        }
    ]
}