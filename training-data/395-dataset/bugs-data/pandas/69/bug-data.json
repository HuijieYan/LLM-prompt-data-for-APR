{
    "pandas:69": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_69/pandas/core/indexing.py": {
            "buggy_functions": [
                {
                    "function_name": "_convert_key",
                    "function_code": "def _convert_key(self, key, is_setter: bool = False):\n    \"\"\"\n    Require they keys to be the same type as the index. (so we don't\n    fallback)\n    \"\"\"\n    # allow arbitrary setting\n    if is_setter:\n        return list(key)\n\n    for ax, i in zip(self.obj.axes, key):\n        if ax.is_integer():\n            if not is_integer(i):\n                raise ValueError(\n                    \"At based indexing on an integer index \"\n                    \"can only have integer indexers\"\n                )\n        else:\n            if is_integer(i) and not ax.holds_integer():\n                raise ValueError(\n                    \"At based indexing on an non-integer \"\n                    \"index can only have non-integer \"\n                    \"indexers\"\n                )\n    return key\n",
                    "decorators": [],
                    "docstring": "Require they keys to be the same type as the index. (so we don't\nfallback)",
                    "start_line": 2110,
                    "end_line": 2133,
                    "variables": {
                        "bool": [
                            2110
                        ],
                        "is_setter": [
                            2116
                        ],
                        "list": [
                            2117
                        ],
                        "key": [
                            2133,
                            2117,
                            2119
                        ],
                        "ax": [
                            2120,
                            2127,
                            2119
                        ],
                        "i": [
                            2121,
                            2127,
                            2119
                        ],
                        "zip": [
                            2119
                        ],
                        "self.obj.axes": [
                            2119
                        ],
                        "self.obj": [
                            2119
                        ],
                        "self": [
                            2119
                        ],
                        "ax.is_integer": [
                            2120
                        ],
                        "is_integer": [
                            2121,
                            2127
                        ],
                        "ValueError": [
                            2128,
                            2122
                        ],
                        "ax.holds_integer": [
                            2127
                        ]
                    },
                    "filtered_variables": {
                        "is_setter": [
                            2116
                        ],
                        "key": [
                            2133,
                            2117,
                            2119
                        ],
                        "ax": [
                            2120,
                            2127,
                            2119
                        ],
                        "i": [
                            2121,
                            2127,
                            2119
                        ],
                        "self.obj.axes": [
                            2119
                        ],
                        "self.obj": [
                            2119
                        ],
                        "self": [
                            2119
                        ],
                        "ax.is_integer": [
                            2120
                        ],
                        "is_integer": [
                            2121,
                            2127
                        ],
                        "ax.holds_integer": [
                            2127
                        ]
                    },
                    "diff_line_number": 2127,
                    "class_data": {
                        "signature": "class _AtIndexer(_ScalarAccessIndexer)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def _convert_key(self, key, is_setter: bool=False):\n    \"\"\"\n    Require they keys to be the same type as the index. (so we don't\n    fallback)\n    \"\"\"\n    if is_setter:\n        return list(key)\n    for ax, i in zip(self.obj.axes, key):\n        if ax.is_integer():\n            if not is_integer(i):\n                raise ValueError('At based indexing on an integer index can only have integer indexers')\n        elif is_integer(i) and (not ax.holds_integer()):\n            raise ValueError('At based indexing on an non-integer index can only have non-integer indexers')\n    return key"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_takeable"
                        ],
                        "class_decorators": [
                            "Appender(IndexingMixin.at.__doc__)"
                        ],
                        "function_signatures": [
                            "_convert_key(self, key, is_setter: bool=False)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(4.0,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj.axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "3.0   2016-01-01\n4.0   2016-01-02\n5.0   2016-01-03\ndtype: datetime64[ns]",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x11c0c2ae0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "ax.is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax.holds_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(4.0,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "ax": {
                                    "variable_value": "Float64Index([3.0, 4.0, 5.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "(3,)"
                                },
                                "i": {
                                    "variable_value": "4.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.obj.axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "3.0   2016-01-01\n4.0   2016-01-02\n5.0   2016-01-03\ndtype: datetime64[ns]",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x11c0c2ae0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "ax.is_integer": {
                                    "variable_value": "<bound method Index.is_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(4.0,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj.axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "3.0   1 days\n4.0   2 days\n5.0   3 days\ndtype: timedelta64[ns]",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x11c0b4db0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "ax.is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax.holds_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(4.0,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "ax": {
                                    "variable_value": "Float64Index([3.0, 4.0, 5.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "(3,)"
                                },
                                "i": {
                                    "variable_value": "4.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.obj.axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "3.0   1 days\n4.0   2 days\n5.0   3 days\ndtype: timedelta64[ns]",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x11c0b4db0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "ax.is_integer": {
                                    "variable_value": "<bound method Index.is_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(4.0,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj.axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "3.0   2016-01-01\n4.0   2016-01-02\n5.0   2016-01-03\ndtype: datetime64[ns]",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x117c75e50>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "ax.is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax.holds_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax.is_floating": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(4.0,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "ax": {
                                    "variable_value": "Float64Index([3.0, 4.0, 5.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "(3,)"
                                },
                                "i": {
                                    "variable_value": "4.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.obj.axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "3.0   2016-01-01\n4.0   2016-01-02\n5.0   2016-01-03\ndtype: datetime64[ns]",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x117c75e50>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "ax.is_integer": {
                                    "variable_value": "<bound method Index.is_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ax.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(4,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj.axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "3.0   2016-01-01\n4.0   2016-01-02\n5.0   2016-01-03\ndtype: datetime64[ns]",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x117c75e50>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "ax.is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax.holds_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax.is_floating": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(4,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "ax": {
                                    "variable_value": "Float64Index([3.0, 4.0, 5.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "(3,)"
                                },
                                "i": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.obj.axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "3.0   2016-01-01\n4.0   2016-01-02\n5.0   2016-01-03\ndtype: datetime64[ns]",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x117c75e50>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "ax.is_integer": {
                                    "variable_value": "<bound method Index.is_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ax.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(4.0,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj.axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "3.0   1 days\n4.0   2 days\n5.0   3 days\ndtype: timedelta64[ns]",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x117ebf220>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "ax.is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax.holds_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax.is_floating": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(4.0,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "ax": {
                                    "variable_value": "Float64Index([3.0, 4.0, 5.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "(3,)"
                                },
                                "i": {
                                    "variable_value": "4.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.obj.axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "3.0   1 days\n4.0   2 days\n5.0   3 days\ndtype: timedelta64[ns]",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x117ebf220>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "ax.is_integer": {
                                    "variable_value": "<bound method Index.is_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ax.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(4,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj.axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "3.0   1 days\n4.0   2 days\n5.0   3 days\ndtype: timedelta64[ns]",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x117ebf220>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "ax.is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax.holds_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax.is_floating": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(4,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "ax": {
                                    "variable_value": "Float64Index([3.0, 4.0, 5.0], dtype='float64')",
                                    "variable_type": "Float64Index",
                                    "variable_shape": "(3,)"
                                },
                                "i": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.obj.axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "3.0   1 days\n4.0   2 days\n5.0   3 days\ndtype: timedelta64[ns]",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x117ebf220>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "ax.is_integer": {
                                    "variable_value": "<bound method Index.is_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_integer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax.holds_integer": {
                                    "variable_value": "<bound method Index.holds_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ax.is_floating": {
                                    "variable_value": "<bound method Index.is_floating of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _tuplify(ndim: int, loc: Hashable) -> Tuple[Union[Hashable, slice], ...]:\n    \"\"\"\n    Given an indexer for the first dimension, create an equivalent tuple\n    for indexing over all dimensions.\n\n    Parameters\n    ----------\n    ndim : int\n    loc : object\n\n    Returns\n    -------\n    tuple\n    \"\"\"\n    _tup: List[Union[Hashable, slice]]\n    _tup = [slice(None, None) for _ in range(ndim)]\n    _tup[0] = loc\n    return tuple(_tup)",
                "def convert_to_index_sliceable(obj, key):\n    \"\"\"\n    If we are index sliceable, then return my slicer, otherwise return None.\n    \"\"\"\n    idx = obj.index\n    if isinstance(key, slice):\n        return idx._convert_slice_indexer(key, kind=\"getitem\")\n\n    elif isinstance(key, str):\n\n        # we are an actual column\n        if key in obj._data.items:\n            return None\n\n        # We might have a datetimelike string that we can translate to a\n        # slice here via partial string indexing\n        if idx._supports_partial_string_indexing:\n            try:\n                return idx._get_string_slice(key)\n            except (KeyError, ValueError, NotImplementedError):\n                return None\n\n    return None",
                "def check_bool_indexer(index: Index, key) -> np.ndarray:\n    \"\"\"\n    Check if key is a valid boolean indexer for an object with such index and\n    perform reindexing or conversion if needed.\n\n    This function assumes that is_bool_indexer(key) == True.\n\n    Parameters\n    ----------\n    index : Index\n        Index of the object on which the indexing is done.\n    key : list-like\n        Boolean indexer to check.\n\n    Returns\n    -------\n    np.array\n        Resulting key.\n\n    Raises\n    ------\n    IndexError\n        If the key does not have the same length as index.\n    IndexingError\n        If the index of the key is unalignable to index.\n    \"\"\"\n    result = key\n    if isinstance(key, ABCSeries) and not key.index.equals(index):\n        result = result.reindex(index)\n        mask = isna(result._values)\n        if mask.any():\n            raise IndexingError(\n                \"Unalignable boolean Series provided as \"\n                \"indexer (index of the boolean Series and of \"\n                \"the indexed object do not match).\"\n            )\n        result = result.astype(bool)._values\n    else:\n        # key might be sparse / object-dtype bool, check_array_indexer needs bool array\n        result = np.asarray(result, dtype=bool)\n        result = check_array_indexer(index, result)\n\n    return result",
                "def convert_missing_indexer(indexer):\n    \"\"\"\n    Reverse convert a missing indexer, which is a dict\n    return the scalar indexer and a boolean indicating if we converted\n    \"\"\"\n    if isinstance(indexer, dict):\n\n        # a missing key (but not a tuple indexer)\n        indexer = indexer[\"key\"]\n\n        if isinstance(indexer, bool):\n            raise KeyError(\"cannot use a single bool to index into setitem\")\n        return indexer, True\n\n    return indexer, False",
                "def convert_from_missing_indexer_tuple(indexer, axes):\n    \"\"\"\n    Create a filtered indexer that doesn't have any missing indexers.\n    \"\"\"\n\n    def get_indexer(_i, _idx):\n        return axes[_i].get_loc(_idx[\"key\"]) if isinstance(_idx, dict) else _idx\n\n    return tuple(get_indexer(_i, _idx) for _i, _idx in enumerate(indexer))",
                "def maybe_convert_ix(*args):\n    \"\"\"\n    We likely want to take the cross-product.\n    \"\"\"\n    ixify = True\n    for arg in args:\n        if not isinstance(arg, (np.ndarray, list, ABCSeries, Index)):\n            ixify = False\n\n    if ixify:\n        return np.ix_(*args)\n    else:\n        return args",
                "def is_nested_tuple(tup, labels) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    # check for a compatible nested tuple and multiindexes among the axes\n    if not isinstance(tup, tuple):\n        return False\n\n    for i, k in enumerate(tup):\n\n        if is_list_like(k) or isinstance(k, slice):\n            return isinstance(labels, ABCMultiIndex)\n\n    return False",
                "def is_label_like(key) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    # select a label or row\n    return not isinstance(key, slice) and not is_list_like_indexer(key)",
                "def need_slice(obj) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    return (\n        obj.start is not None\n        or obj.stop is not None\n        or (obj.step is not None and obj.step != 1)\n    )",
                "def _non_reducing_slice(slice_):\n    \"\"\"\n    Ensurse that a slice doesn't reduce to a Series or Scalar.\n\n    Any user-paseed `subset` should have this called on it\n    to make sure we're always working with DataFrames.\n    \"\"\"\n    # default to column slice, like DataFrame\n    # ['A', 'B'] -> IndexSlices[:, ['A', 'B']]\n    kinds = (ABCSeries, np.ndarray, Index, list, str)\n    if isinstance(slice_, kinds):\n        slice_ = IndexSlice[:, slice_]\n\n    def pred(part) -> bool:\n        \"\"\"\n        Returns\n        -------\n        bool\n            True if slice does *not* reduce,\n            False if `part` is a tuple.\n        \"\"\"\n        # true when slice does *not* reduce, False when part is a tuple,\n        # i.e. MultiIndex slice\n        return (isinstance(part, slice) or is_list_like(part)) and not isinstance(\n            part, tuple\n        )\n\n    if not is_list_like(slice_):\n        if not isinstance(slice_, slice):\n            # a 1-d slice, like df.loc[1]\n            slice_ = [[slice_]]\n        else:\n            # slice(a, b, c)\n            slice_ = [slice_]  # to tuplize later\n    else:\n        slice_ = [part if pred(part) else [part] for part in slice_]\n    return tuple(slice_)",
                "def _maybe_numeric_slice(df, slice_, include_bool=False):\n    \"\"\"\n    Want nice defaults for background_gradient that don't break\n    with non-numeric data. But if slice_ is passed go with that.\n    \"\"\"\n    if slice_ is None:\n        dtypes = [np.number]\n        if include_bool:\n            dtypes.append(bool)\n        slice_ = IndexSlice[:, df.select_dtypes(include=dtypes).columns]\n    return slice_",
                "def _can_do_equal_len(labels, value, plane_indexer, lplane_indexer, obj) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n        True if we have an equal len settable.\n    \"\"\"\n    if not len(labels) == 1 or not np.iterable(value) or is_scalar(plane_indexer[0]):\n        return False\n\n    item = labels[0]\n    index = obj[item].index\n\n    values_len = len(value)\n    # equal len list/ndarray\n    if len(index) == values_len:\n        return True\n    elif lplane_indexer == values_len:\n        return True\n\n    return False",
                "def __getitem__(self, arg):\n    return arg",
                "@property\ndef iloc(self) -> \"_iLocIndexer\":\n    \"\"\"\n    Purely integer-location based indexing for selection by position.\n\n    ``.iloc[]`` is primarily integer position based (from ``0`` to\n    ``length-1`` of the axis), but may also be used with a boolean\n    array.\n\n    Allowed inputs are:\n\n    - An integer, e.g. ``5``.\n    - A list or array of integers, e.g. ``[4, 3, 0]``.\n    - A slice object with ints, e.g. ``1:7``.\n    - A boolean array.\n    - A ``callable`` function with one argument (the calling Series or\n      DataFrame) and that returns valid output for indexing (one of the above).\n      This is useful in method chains, when you don't have a reference to the\n      calling object, but would like to base your selection on some value.\n\n    ``.iloc`` will raise ``IndexError`` if a requested indexer is\n    out-of-bounds, except *slice* indexers which allow out-of-bounds\n    indexing (this conforms with python/numpy *slice* semantics).\n\n    See more at :ref:`Selection by Position <indexing.integer>`.\n\n    See Also\n    --------\n    DataFrame.iat : Fast integer location scalar accessor.\n    DataFrame.loc : Purely label-location based indexer for selection by label.\n    Series.iloc : Purely integer-location based indexing for\n                   selection by position.\n\n    Examples\n    --------\n\n    >>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n    ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n    ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000 }]\n    >>> df = pd.DataFrame(mydict)\n    >>> df\n          a     b     c     d\n    0     1     2     3     4\n    1   100   200   300   400\n    2  1000  2000  3000  4000\n\n    **Indexing just the rows**\n\n    With a scalar integer.\n\n    >>> type(df.iloc[0])\n    <class 'pandas.core.series.Series'>\n    >>> df.iloc[0]\n    a    1\n    b    2\n    c    3\n    d    4\n    Name: 0, dtype: int64\n\n    With a list of integers.\n\n    >>> df.iloc[[0]]\n       a  b  c  d\n    0  1  2  3  4\n    >>> type(df.iloc[[0]])\n    <class 'pandas.core.frame.DataFrame'>\n\n    >>> df.iloc[[0, 1]]\n         a    b    c    d\n    0    1    2    3    4\n    1  100  200  300  400\n\n    With a `slice` object.\n\n    >>> df.iloc[:3]\n          a     b     c     d\n    0     1     2     3     4\n    1   100   200   300   400\n    2  1000  2000  3000  4000\n\n    With a boolean mask the same length as the index.\n\n    >>> df.iloc[[True, False, True]]\n          a     b     c     d\n    0     1     2     3     4\n    2  1000  2000  3000  4000\n\n    With a callable, useful in method chains. The `x` passed\n    to the ``lambda`` is the DataFrame being sliced. This selects\n    the rows whose index label even.\n\n    >>> df.iloc[lambda x: x.index % 2 == 0]\n          a     b     c     d\n    0     1     2     3     4\n    2  1000  2000  3000  4000\n\n    **Indexing both axes**\n\n    You can mix the indexer types for the index and columns. Use ``:`` to\n    select the entire axis.\n\n    With scalar integers.\n\n    >>> df.iloc[0, 1]\n    2\n\n    With lists of integers.\n\n    >>> df.iloc[[0, 2], [1, 3]]\n          b     d\n    0     2     4\n    2  2000  4000\n\n    With `slice` objects.\n\n    >>> df.iloc[1:3, 0:3]\n          a     b     c\n    1   100   200   300\n    2  1000  2000  3000\n\n    With a boolean array whose length matches the columns.\n\n    >>> df.iloc[:, [True, False, True, False]]\n          a     c\n    0     1     3\n    1   100   300\n    2  1000  3000\n\n    With a callable function that expects the Series or DataFrame.\n\n    >>> df.iloc[:, lambda df: [0, 2]]\n          a     c\n    0     1     3\n    1   100   300\n    2  1000  3000\n    \"\"\"\n    return _iLocIndexer(\"iloc\", self)",
                "@property\ndef loc(self) -> \"_LocIndexer\":\n    \"\"\"\n    Access a group of rows and columns by label(s) or a boolean array.\n\n    ``.loc[]`` is primarily label based, but may also be used with a\n    boolean array.\n\n    Allowed inputs are:\n\n    - A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is\n      interpreted as a *label* of the index, and **never** as an\n      integer position along the index).\n    - A list or array of labels, e.g. ``['a', 'b', 'c']``.\n    - A slice object with labels, e.g. ``'a':'f'``.\n\n      .. warning:: Note that contrary to usual python slices, **both** the\n          start and the stop are included\n\n    - A boolean array of the same length as the axis being sliced,\n      e.g. ``[True, False, True]``.\n    - A ``callable`` function with one argument (the calling Series or\n      DataFrame) and that returns valid output for indexing (one of the above)\n\n    See more at :ref:`Selection by Label <indexing.label>`\n\n    Raises\n    ------\n    KeyError\n        If any items are not found.\n\n    See Also\n    --------\n    DataFrame.at : Access a single value for a row/column label pair.\n    DataFrame.iloc : Access group of rows and columns by integer position(s).\n    DataFrame.xs : Returns a cross-section (row(s) or column(s)) from the\n        Series/DataFrame.\n    Series.loc : Access group of values using labels.\n\n    Examples\n    --------\n    **Getting values**\n\n    >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n    ...      index=['cobra', 'viper', 'sidewinder'],\n    ...      columns=['max_speed', 'shield'])\n    >>> df\n                max_speed  shield\n    cobra               1       2\n    viper               4       5\n    sidewinder          7       8\n\n    Single label. Note this returns the row as a Series.\n\n    >>> df.loc['viper']\n    max_speed    4\n    shield       5\n    Name: viper, dtype: int64\n\n    List of labels. Note using ``[[]]`` returns a DataFrame.\n\n    >>> df.loc[['viper', 'sidewinder']]\n                max_speed  shield\n    viper               4       5\n    sidewinder          7       8\n\n    Single label for row and column\n\n    >>> df.loc['cobra', 'shield']\n    2\n\n    Slice with labels for row and single label for column. As mentioned\n    above, note that both the start and stop of the slice are included.\n\n    >>> df.loc['cobra':'viper', 'max_speed']\n    cobra    1\n    viper    4\n    Name: max_speed, dtype: int64\n\n    Boolean list with the same length as the row axis\n\n    >>> df.loc[[False, False, True]]\n                max_speed  shield\n    sidewinder          7       8\n\n    Conditional that returns a boolean Series\n\n    >>> df.loc[df['shield'] > 6]\n                max_speed  shield\n    sidewinder          7       8\n\n    Conditional that returns a boolean Series with column labels specified\n\n    >>> df.loc[df['shield'] > 6, ['max_speed']]\n                max_speed\n    sidewinder          7\n\n    Callable that returns a boolean Series\n\n    >>> df.loc[lambda df: df['shield'] == 8]\n                max_speed  shield\n    sidewinder          7       8\n\n    **Setting values**\n\n    Set value for all items matching the list of labels\n\n    >>> df.loc[['viper', 'sidewinder'], ['shield']] = 50\n    >>> df\n                max_speed  shield\n    cobra               1       2\n    viper               4      50\n    sidewinder          7      50\n\n    Set value for an entire row\n\n    >>> df.loc['cobra'] = 10\n    >>> df\n                max_speed  shield\n    cobra              10      10\n    viper               4      50\n    sidewinder          7      50\n\n    Set value for an entire column\n\n    >>> df.loc[:, 'max_speed'] = 30\n    >>> df\n                max_speed  shield\n    cobra              30      10\n    viper              30      50\n    sidewinder         30      50\n\n    Set value for rows matching callable condition\n\n    >>> df.loc[df['shield'] > 35] = 0\n    >>> df\n                max_speed  shield\n    cobra              30      10\n    viper               0       0\n    sidewinder          0       0\n\n    **Getting values on a DataFrame with an index that has integer labels**\n\n    Another example using integers for the index\n\n    >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n    ...      index=[7, 8, 9], columns=['max_speed', 'shield'])\n    >>> df\n       max_speed  shield\n    7          1       2\n    8          4       5\n    9          7       8\n\n    Slice with integer labels for rows. As mentioned above, note that both\n    the start and stop of the slice are included.\n\n    >>> df.loc[7:9]\n       max_speed  shield\n    7          1       2\n    8          4       5\n    9          7       8\n\n    **Getting values with a MultiIndex**\n\n    A number of examples using a DataFrame with a MultiIndex\n\n    >>> tuples = [\n    ...    ('cobra', 'mark i'), ('cobra', 'mark ii'),\n    ...    ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n    ...    ('viper', 'mark ii'), ('viper', 'mark iii')\n    ... ]\n    >>> index = pd.MultiIndex.from_tuples(tuples)\n    >>> values = [[12, 2], [0, 4], [10, 20],\n    ...         [1, 4], [7, 1], [16, 36]]\n    >>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\n    >>> df\n                         max_speed  shield\n    cobra      mark i           12       2\n               mark ii           0       4\n    sidewinder mark i           10      20\n               mark ii           1       4\n    viper      mark ii           7       1\n               mark iii         16      36\n\n    Single label. Note this returns a DataFrame with a single index.\n\n    >>> df.loc['cobra']\n             max_speed  shield\n    mark i          12       2\n    mark ii          0       4\n\n    Single index tuple. Note this returns a Series.\n\n    >>> df.loc[('cobra', 'mark ii')]\n    max_speed    0\n    shield       4\n    Name: (cobra, mark ii), dtype: int64\n\n    Single label for row and column. Similar to passing in a tuple, this\n    returns a Series.\n\n    >>> df.loc['cobra', 'mark i']\n    max_speed    12\n    shield        2\n    Name: (cobra, mark i), dtype: int64\n\n    Single tuple. Note using ``[[]]`` returns a DataFrame.\n\n    >>> df.loc[[('cobra', 'mark ii')]]\n                   max_speed  shield\n    cobra mark ii          0       4\n\n    Single tuple for the index with a single label for the column\n\n    >>> df.loc[('cobra', 'mark i'), 'shield']\n    2\n\n    Slice from index tuple to single label\n\n    >>> df.loc[('cobra', 'mark i'):'viper']\n                         max_speed  shield\n    cobra      mark i           12       2\n               mark ii           0       4\n    sidewinder mark i           10      20\n               mark ii           1       4\n    viper      mark ii           7       1\n               mark iii         16      36\n\n    Slice from index tuple to index tuple\n\n    >>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]\n                        max_speed  shield\n    cobra      mark i          12       2\n               mark ii          0       4\n    sidewinder mark i          10      20\n               mark ii          1       4\n    viper      mark ii          7       1\n    \"\"\"\n    return _LocIndexer(\"loc\", self)",
                "@property\ndef at(self) -> \"_AtIndexer\":\n    \"\"\"\n    Access a single value for a row/column label pair.\n\n    Similar to ``loc``, in that both provide label-based lookups. Use\n    ``at`` if you only need to get or set a single value in a DataFrame\n    or Series.\n\n    Raises\n    ------\n    KeyError\n        If 'label' does not exist in DataFrame.\n\n    See Also\n    --------\n    DataFrame.iat : Access a single value for a row/column pair by integer\n        position.\n    DataFrame.loc : Access a group of rows and columns by label(s).\n    Series.at : Access a single value using a label.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n    ...                   index=[4, 5, 6], columns=['A', 'B', 'C'])\n    >>> df\n        A   B   C\n    4   0   2   3\n    5   0   4   1\n    6  10  20  30\n\n    Get value at specified row/column pair\n\n    >>> df.at[4, 'B']\n    2\n\n    Set value at specified row/column pair\n\n    >>> df.at[4, 'B'] = 10\n    >>> df.at[4, 'B']\n    10\n\n    Get value within a Series\n\n    >>> df.loc[5].at['B']\n    4\n    \"\"\"\n    return _AtIndexer(\"at\", self)",
                "@property\ndef iat(self) -> \"_iAtIndexer\":\n    \"\"\"\n    Access a single value for a row/column pair by integer position.\n\n    Similar to ``iloc``, in that both provide integer-based lookups. Use\n    ``iat`` if you only need to get or set a single value in a DataFrame\n    or Series.\n\n    Raises\n    ------\n    IndexError\n        When integer position is out of bounds.\n\n    See Also\n    --------\n    DataFrame.at : Access a single value for a row/column label pair.\n    DataFrame.loc : Access a group of rows and columns by label(s).\n    DataFrame.iloc : Access a group of rows and columns by integer position(s).\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n    ...                   columns=['A', 'B', 'C'])\n    >>> df\n        A   B   C\n    0   0   2   3\n    1   0   4   1\n    2  10  20  30\n\n    Get value at specified row/column pair\n\n    >>> df.iat[1, 2]\n    1\n\n    Set value at specified row/column pair\n\n    >>> df.iat[1, 2] = 10\n    >>> df.iat[1, 2]\n    10\n\n    Get value within a series\n\n    >>> df.loc[0].iat[1]\n    2\n    \"\"\"\n    return _iAtIndexer(\"iat\", self)",
                "def __call__(self, axis=None):\n    # we need to return a copy of ourselves\n    new_self = type(self)(self.name, self.obj)\n\n    if axis is not None:\n        axis = self.obj._get_axis_number(axis)\n    new_self.axis = axis\n    return new_self",
                "def _get_label(self, label, axis: int):\n    if self.ndim == 1:\n        # for perf reasons we want to try _xs first\n        # as its basically direct indexing\n        # but will fail when the index is not present\n        # see GH5667\n        return self.obj._xs(label, axis=axis)\n    elif isinstance(label, tuple) and isinstance(label[axis], slice):\n        raise IndexingError(\"no slices here, handle elsewhere\")\n\n    return self.obj._xs(label, axis=axis)",
                "def _get_loc(self, key: int, axis: int):\n    return self.obj._ixs(key, axis=axis)",
                "def _slice(self, obj, axis: int, kind=None):\n    return self.obj._slice(obj, axis=axis, kind=kind)",
                "def _get_setitem_indexer(self, key):\n    if self.axis is not None:\n        return self._convert_tuple(key)\n\n    ax = self.obj._get_axis(0)\n\n    if isinstance(ax, ABCMultiIndex) and self.name != \"iloc\":\n        try:\n            return ax.get_loc(key)\n        except (TypeError, KeyError, InvalidIndexError):\n            # TypeError e.g. passed a bool\n            pass\n\n    if isinstance(key, tuple):\n        try:\n            return self._convert_tuple(key)\n        except IndexingError:\n            pass\n\n    if isinstance(key, range):\n        return list(key)\n\n    try:\n        return self._convert_to_indexer(key, axis=0)\n    except TypeError as e:\n\n        # invalid indexer type vs 'other' indexing errors\n        if \"cannot do\" in str(e):\n            raise\n        raise IndexingError(key)",
                "def __setitem__(self, key, value):\n    if isinstance(key, tuple):\n        key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n    else:\n        key = com.apply_if_callable(key, self.obj)\n    indexer = self._get_setitem_indexer(key)\n    self._setitem_with_indexer(indexer, value)",
                "def _validate_key(self, key, axis: int):\n    \"\"\"\n    Ensure that key is valid for current indexer.\n\n    Parameters\n    ----------\n    key : scalar, slice or list-like\n        Key requested.\n    axis : int\n        Dimension on which the indexing is being made.\n\n    Raises\n    ------\n    TypeError\n        If the key (or some element of it) has wrong type.\n    IndexError\n        If the key (or some element of it) is out of bounds.\n    KeyError\n        If the key was not found.\n    \"\"\"\n    raise AbstractMethodError(self)",
                "def _has_valid_tuple(self, key: Tuple):\n    \"\"\"\n    Check the key for valid keys across my indexer.\n    \"\"\"\n    for i, k in enumerate(key):\n        if i >= self.ndim:\n            raise IndexingError(\"Too many indexers\")\n        try:\n            self._validate_key(k, i)\n        except ValueError:\n            raise ValueError(\n                \"Location based indexing can only have \"\n                f\"[{self._valid_types}] types\"\n            )",
                "def _is_nested_tuple_indexer(self, tup: Tuple) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    if any(isinstance(ax, ABCMultiIndex) for ax in self.obj.axes):\n        return any(is_nested_tuple(tup, ax) for ax in self.obj.axes)\n    return False",
                "def _convert_tuple(self, key):\n    keyidx = []\n    if self.axis is not None:\n        axis = self.obj._get_axis_number(self.axis)\n        for i in range(self.ndim):\n            if i == axis:\n                keyidx.append(self._convert_to_indexer(key, axis=axis))\n            else:\n                keyidx.append(slice(None))\n    else:\n        for i, k in enumerate(key):\n            if i >= self.ndim:\n                raise IndexingError(\"Too many indexers\")\n            idx = self._convert_to_indexer(k, axis=i)\n            keyidx.append(idx)\n    return tuple(keyidx)",
                "def _convert_scalar_indexer(self, key, axis: int):\n    # if we are accessing via lowered dim, use the last dim\n    ax = self.obj._get_axis(min(axis, self.ndim - 1))\n    # a scalar\n    return ax._convert_scalar_indexer(key, kind=self.name)",
                "def _convert_slice_indexer(self, key: slice, axis: int):\n    # if we are accessing via lowered dim, use the last dim\n    ax = self.obj._get_axis(min(axis, self.ndim - 1))\n    return ax._convert_slice_indexer(key, kind=self.name)",
                "def _has_valid_setitem_indexer(self, indexer) -> bool:\n    return True",
                "def _has_valid_positional_setitem_indexer(self, indexer) -> bool:\n    \"\"\"\n    Validate that a positional indexer cannot enlarge its target\n    will raise if needed, does not modify the indexer externally.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if isinstance(indexer, dict):\n        raise IndexError(f\"{self.name} cannot enlarge its target object\")\n    else:\n        if not isinstance(indexer, tuple):\n            indexer = _tuplify(self.ndim, indexer)\n        for ax, i in zip(self.obj.axes, indexer):\n            if isinstance(i, slice):\n                # should check the stop slice?\n                pass\n            elif is_list_like_indexer(i):\n                # should check the elements?\n                pass\n            elif is_integer(i):\n                if i >= len(ax):\n                    raise IndexError(\n                        f\"{self.name} cannot enlarge its target object\"\n                    )\n            elif isinstance(i, dict):\n                raise IndexError(f\"{self.name} cannot enlarge its target object\")\n\n    return True",
                "def _setitem_with_indexer(self, indexer, value):\n    self._has_valid_setitem_indexer(indexer)\n\n    # also has the side effect of consolidating in-place\n    from pandas import Series\n\n    info_axis = self.obj._info_axis_number\n\n    # maybe partial set\n    take_split_path = self.obj._is_mixed_type\n\n    # if there is only one block/type, still have to take split path\n    # unless the block is one-dimensional or it can hold the value\n    if not take_split_path and self.obj._data.blocks:\n        (blk,) = self.obj._data.blocks\n        if 1 < blk.ndim:  # in case of dict, keys are indices\n            val = list(value.values()) if isinstance(value, dict) else value\n            take_split_path = not blk._can_hold_element(val)\n\n    # if we have any multi-indexes that have non-trivial slices\n    # (not null slices) then we must take the split path, xref\n    # GH 10360, GH 27841\n    if isinstance(indexer, tuple) and len(indexer) == len(self.obj.axes):\n        for i, ax in zip(indexer, self.obj.axes):\n            if isinstance(ax, ABCMultiIndex) and not (\n                is_integer(i) or com.is_null_slice(i)\n            ):\n                take_split_path = True\n                break\n\n    if isinstance(indexer, tuple):\n        nindexer = []\n        for i, idx in enumerate(indexer):\n            if isinstance(idx, dict):\n\n                # reindex the axis to the new value\n                # and set inplace\n                key, _ = convert_missing_indexer(idx)\n\n                # if this is the items axes, then take the main missing\n                # path first\n                # this correctly sets the dtype and avoids cache issues\n                # essentially this separates out the block that is needed\n                # to possibly be modified\n                if self.ndim > 1 and i == self.obj._info_axis_number:\n\n                    # add the new item, and set the value\n                    # must have all defined axes if we have a scalar\n                    # or a list-like on the non-info axes if we have a\n                    # list-like\n                    len_non_info_axes = (\n                        len(_ax) for _i, _ax in enumerate(self.obj.axes) if _i != i\n                    )\n                    if any(not l for l in len_non_info_axes):\n                        if not is_list_like_indexer(value):\n                            raise ValueError(\n                                \"cannot set a frame with no \"\n                                \"defined index and a scalar\"\n                            )\n                        self.obj[key] = value\n                        return self.obj\n\n                    # add a new item with the dtype setup\n                    self.obj[key] = _infer_fill_value(value)\n\n                    new_indexer = convert_from_missing_indexer_tuple(\n                        indexer, self.obj.axes\n                    )\n                    self._setitem_with_indexer(new_indexer, value)\n\n                    return self.obj\n\n                # reindex the axis\n                # make sure to clear the cache because we are\n                # just replacing the block manager here\n                # so the object is the same\n                index = self.obj._get_axis(i)\n                labels = index.insert(len(index), key)\n                self.obj._data = self.obj.reindex(labels, axis=i)._data\n                self.obj._maybe_update_cacher(clear=True)\n                self.obj._is_copy = None\n\n                nindexer.append(labels.get_loc(key))\n\n            else:\n                nindexer.append(idx)\n\n        indexer = tuple(nindexer)\n    else:\n\n        indexer, missing = convert_missing_indexer(indexer)\n\n        if missing:\n            return self._setitem_with_indexer_missing(indexer, value)\n\n    # set\n    item_labels = self.obj._get_axis(info_axis)\n\n    # align and set the values\n    if take_split_path:\n        # Above we only set take_split_path to True for 2D cases\n        assert self.ndim == 2\n        assert info_axis == 1\n\n        if not isinstance(indexer, tuple):\n            indexer = _tuplify(self.ndim, indexer)\n\n        if isinstance(value, ABCSeries):\n            value = self._align_series(indexer, value)\n\n        info_idx = indexer[info_axis]\n        if is_integer(info_idx):\n            info_idx = [info_idx]\n        labels = item_labels[info_idx]\n\n        # if we have a partial multiindex, then need to adjust the plane\n        # indexer here\n        if len(labels) == 1 and isinstance(\n            self.obj[labels[0]].axes[0], ABCMultiIndex\n        ):\n            item = labels[0]\n            obj = self.obj[item]\n            index = obj.index\n            idx = indexer[:info_axis][0]\n\n            plane_indexer = tuple([idx]) + indexer[info_axis + 1 :]\n            lplane_indexer = length_of_indexer(plane_indexer[0], index)\n\n            # require that we are setting the right number of values that\n            # we are indexing\n            if (\n                is_list_like_indexer(value)\n                and np.iterable(value)\n                and lplane_indexer != len(value)\n            ):\n\n                if len(obj[idx]) != len(value):\n                    raise ValueError(\n                        \"cannot set using a multi-index \"\n                        \"selection indexer with a different \"\n                        \"length than the value\"\n                    )\n\n                # make sure we have an ndarray\n                value = getattr(value, \"values\", value).ravel()\n\n                # we can directly set the series here\n                # as we select a slice indexer on the mi\n                idx = index._convert_slice_indexer(idx)\n                obj._consolidate_inplace()\n                obj = obj.copy()\n                obj._data = obj._data.setitem(indexer=tuple([idx]), value=value)\n                self.obj[item] = obj\n                return\n\n        # non-mi\n        else:\n            plane_indexer = indexer[:info_axis] + indexer[info_axis + 1 :]\n            plane_axis = self.obj.axes[:info_axis][0]\n            lplane_indexer = length_of_indexer(plane_indexer[0], plane_axis)\n\n        def setter(item, v):\n            s = self.obj[item]\n            pi = plane_indexer[0] if lplane_indexer == 1 else plane_indexer\n\n            # perform the equivalent of a setitem on the info axis\n            # as we have a null slice or a slice with full bounds\n            # which means essentially reassign to the columns of a\n            # multi-dim object\n            # GH6149 (null slice), GH10408 (full bounds)\n            if isinstance(pi, tuple) and all(\n                com.is_null_slice(idx) or com.is_full_slice(idx, len(self.obj))\n                for idx in pi\n            ):\n                s = v\n            else:\n                # set the item, possibly having a dtype change\n                s._consolidate_inplace()\n                s = s.copy()\n                s._data = s._data.setitem(indexer=pi, value=v)\n                s._maybe_update_cacher(clear=True)\n\n            # reset the sliced object if unique\n            self.obj[item] = s\n\n        # we need an iterable, with a ndim of at least 1\n        # eg. don't pass through np.array(0)\n        if is_list_like_indexer(value) and getattr(value, \"ndim\", 1) > 0:\n\n            # we have an equal len Frame\n            if isinstance(value, ABCDataFrame):\n                sub_indexer = list(indexer)\n                multiindex_indexer = isinstance(labels, ABCMultiIndex)\n\n                for item in labels:\n                    if item in value:\n                        sub_indexer[info_axis] = item\n                        v = self._align_series(\n                            tuple(sub_indexer), value[item], multiindex_indexer\n                        )\n                    else:\n                        v = np.nan\n\n                    setter(item, v)\n\n            # we have an equal len ndarray/convertible to our labels\n            # hasattr first, to avoid coercing to ndarray without reason.\n            # But we may be relying on the ndarray coercion to check ndim.\n            # Why not just convert to an ndarray earlier on if needed?\n            elif np.ndim(value) == 2:\n\n                # note that this coerces the dtype if we are mixed\n                # GH 7551\n                value = np.array(value, dtype=object)\n                if len(labels) != value.shape[1]:\n                    raise ValueError(\n                        \"Must have equal len keys and value \"\n                        \"when setting with an ndarray\"\n                    )\n\n                for i, item in enumerate(labels):\n\n                    # setting with a list, recoerces\n                    setter(item, value[:, i].tolist())\n\n            # we have an equal len list/ndarray\n            elif _can_do_equal_len(\n                labels, value, plane_indexer, lplane_indexer, self.obj\n            ):\n                setter(labels[0], value)\n\n            # per label values\n            else:\n\n                if len(labels) != len(value):\n                    raise ValueError(\n                        \"Must have equal len keys and value \"\n                        \"when setting with an iterable\"\n                    )\n\n                for item, v in zip(labels, value):\n                    setter(item, v)\n        else:\n\n            # scalar\n            for item in labels:\n                setter(item, value)\n\n    else:\n        if isinstance(indexer, tuple):\n            indexer = maybe_convert_ix(*indexer)\n\n            # if we are setting on the info axis ONLY\n            # set using those methods to avoid block-splitting\n            # logic here\n            if (\n                len(indexer) > info_axis\n                and is_integer(indexer[info_axis])\n                and all(\n                    com.is_null_slice(idx)\n                    for i, idx in enumerate(indexer)\n                    if i != info_axis\n                )\n                and item_labels.is_unique\n            ):\n                self.obj[item_labels[indexer[info_axis]]] = value\n                return\n\n        if isinstance(value, (ABCSeries, dict)):\n            # TODO(EA): ExtensionBlock.setitem this causes issues with\n            # setting for extensionarrays that store dicts. Need to decide\n            # if it's worth supporting that.\n            value = self._align_series(indexer, Series(value))\n\n        elif isinstance(value, ABCDataFrame):\n            value = self._align_frame(indexer, value)\n\n        # check for chained assignment\n        self.obj._check_is_chained_assignment_possible()\n\n        # actually do the set\n        self.obj._consolidate_inplace()\n        self.obj._data = self.obj._data.setitem(indexer=indexer, value=value)\n        self.obj._maybe_update_cacher(clear=True)",
                "def _setitem_with_indexer_missing(self, indexer, value):\n    \"\"\"\n    Insert new row(s) or column(s) into the Series or DataFrame.\n    \"\"\"\n    from pandas import Series\n\n    # reindex the axis to the new value\n    # and set inplace\n    if self.ndim == 1:\n        index = self.obj.index\n        new_index = index.insert(len(index), indexer)\n\n        # we have a coerced indexer, e.g. a float\n        # that matches in an Int64Index, so\n        # we will not create a duplicate index, rather\n        # index to that element\n        # e.g. 0.0 -> 0\n        # GH#12246\n        if index.is_unique:\n            new_indexer = index.get_indexer([new_index[-1]])\n            if (new_indexer != -1).any():\n                return self._setitem_with_indexer(new_indexer, value)\n\n        # this preserves dtype of the value\n        new_values = Series([value])._values\n        if len(self.obj._values):\n            # GH#22717 handle casting compatibility that np.concatenate\n            #  does incorrectly\n            new_values = concat_compat([self.obj._values, new_values])\n        self.obj._data = self.obj._constructor(\n            new_values, index=new_index, name=self.obj.name\n        )._data\n        self.obj._maybe_update_cacher(clear=True)\n        return self.obj\n\n    elif self.ndim == 2:\n\n        if not len(self.obj.columns):\n            # no columns and scalar\n            raise ValueError(\"cannot set a frame with no defined columns\")\n\n        if isinstance(value, ABCSeries):\n            # append a Series\n            value = value.reindex(index=self.obj.columns, copy=True)\n            value.name = indexer\n\n        else:\n            # a list-list\n            if is_list_like_indexer(value):\n                # must have conforming columns\n                if len(value) != len(self.obj.columns):\n                    raise ValueError(\"cannot set a row with mismatched columns\")\n\n            value = Series(value, index=self.obj.columns, name=indexer)\n\n        self.obj._data = self.obj.append(value)._data\n        self.obj._maybe_update_cacher(clear=True)\n        return self.obj",
                "def _align_series(self, indexer, ser: ABCSeries, multiindex_indexer: bool = False):\n    \"\"\"\n    Parameters\n    ----------\n    indexer : tuple, slice, scalar\n        Indexer used to get the locations that will be set to `ser`.\n    ser : pd.Series\n        Values to assign to the locations specified by `indexer`.\n    multiindex_indexer : boolean, optional\n        Defaults to False. Should be set to True if `indexer` was from\n        a `pd.MultiIndex`, to avoid unnecessary broadcasting.\n\n    Returns\n    -------\n    `np.array` of `ser` broadcast to the appropriate shape for assignment\n    to the locations selected by `indexer`\n    \"\"\"\n    if isinstance(indexer, (slice, np.ndarray, list, Index)):\n        indexer = tuple([indexer])\n\n    if isinstance(indexer, tuple):\n\n        # flatten np.ndarray indexers\n        def ravel(i):\n            return i.ravel() if isinstance(i, np.ndarray) else i\n\n        indexer = tuple(map(ravel, indexer))\n\n        aligners = [not com.is_null_slice(idx) for idx in indexer]\n        sum_aligners = sum(aligners)\n        single_aligner = sum_aligners == 1\n        is_frame = self.ndim == 2\n        obj = self.obj\n\n        # are we a single alignable value on a non-primary\n        # dim (e.g. panel: 1,2, or frame: 0) ?\n        # hence need to align to a single axis dimension\n        # rather that find all valid dims\n\n        # frame\n        if is_frame:\n            single_aligner = single_aligner and aligners[0]\n\n        # we have a frame, with multiple indexers on both axes; and a\n        # series, so need to broadcast (see GH5206)\n        if sum_aligners == self.ndim and all(is_sequence(_) for _ in indexer):\n            ser = ser.reindex(obj.axes[0][indexer[0]], copy=True)._values\n\n            # single indexer\n            if len(indexer) > 1 and not multiindex_indexer:\n                len_indexer = len(indexer[1])\n                ser = np.tile(ser, len_indexer).reshape(len_indexer, -1).T\n\n            return ser\n\n        for i, idx in enumerate(indexer):\n            ax = obj.axes[i]\n\n            # multiple aligners (or null slices)\n            if is_sequence(idx) or isinstance(idx, slice):\n                if single_aligner and com.is_null_slice(idx):\n                    continue\n                new_ix = ax[idx]\n                if not is_list_like_indexer(new_ix):\n                    new_ix = Index([new_ix])\n                else:\n                    new_ix = Index(new_ix)\n                if ser.index.equals(new_ix) or not len(new_ix):\n                    return ser._values.copy()\n\n                return ser.reindex(new_ix)._values\n\n            # 2 dims\n            elif single_aligner:\n\n                # reindex along index\n                ax = self.obj.axes[1]\n                if ser.index.equals(ax) or not len(ax):\n                    return ser._values.copy()\n                return ser.reindex(ax)._values\n\n    elif is_scalar(indexer):\n        ax = self.obj._get_axis(1)\n\n        if ser.index.equals(ax):\n            return ser._values.copy()\n\n        return ser.reindex(ax)._values\n\n    raise ValueError(\"Incompatible indexer with Series\")",
                "def _align_frame(self, indexer, df: ABCDataFrame):\n    is_frame = self.ndim == 2\n\n    if isinstance(indexer, tuple):\n\n        idx, cols = None, None\n        sindexers = []\n        for i, ix in enumerate(indexer):\n            ax = self.obj.axes[i]\n            if is_sequence(ix) or isinstance(ix, slice):\n                if isinstance(ix, np.ndarray):\n                    ix = ix.ravel()\n                if idx is None:\n                    idx = ax[ix]\n                elif cols is None:\n                    cols = ax[ix]\n                else:\n                    break\n            else:\n                sindexers.append(i)\n\n        if idx is not None and cols is not None:\n\n            if df.index.equals(idx) and df.columns.equals(cols):\n                val = df.copy()._values\n            else:\n                val = df.reindex(idx, columns=cols)._values\n            return val\n\n    elif (isinstance(indexer, slice) or is_list_like_indexer(indexer)) and is_frame:\n        ax = self.obj.index[indexer]\n        if df.index.equals(ax):\n            val = df.copy()._values\n        else:\n\n            # we have a multi-index and are trying to align\n            # with a particular, level GH3738\n            if (\n                isinstance(ax, ABCMultiIndex)\n                and isinstance(df.index, ABCMultiIndex)\n                and ax.nlevels != df.index.nlevels\n            ):\n                raise TypeError(\n                    \"cannot align on a multi-index with out \"\n                    \"specifying the join levels\"\n                )\n\n            val = df.reindex(index=ax)._values\n        return val\n\n    raise ValueError(\"Incompatible indexer with DataFrame\")",
                "def _getitem_tuple(self, tup: Tuple):\n    try:\n        return self._getitem_lowerdim(tup)\n    except IndexingError:\n        pass\n\n    # no multi-index, so validate all of the indexers\n    self._has_valid_tuple(tup)\n\n    # ugly hack for GH #836\n    if self._multi_take_opportunity(tup):\n        return self._multi_take(tup)\n\n    # no shortcut needed\n    retval = self.obj\n    for i, key in enumerate(tup):\n        if com.is_null_slice(key):\n            continue\n\n        retval = getattr(retval, self.name)._getitem_axis(key, axis=i)\n\n    return retval",
                "def _multi_take_opportunity(self, tup: Tuple) -> bool:\n    \"\"\"\n    Check whether there is the possibility to use ``_multi_take``.\n\n    Currently the limit is that all axes being indexed, must be indexed with\n    list-likes.\n\n    Parameters\n    ----------\n    tup : tuple\n        Tuple of indexers, one per axis.\n\n    Returns\n    -------\n    bool\n        Whether the current indexing,\n        can be passed through `_multi_take`.\n    \"\"\"\n    if not all(is_list_like_indexer(x) for x in tup):\n        return False\n\n    # just too complicated\n    if any(com.is_bool_indexer(x) for x in tup):\n        return False\n\n    return True",
                "def _multi_take(self, tup: Tuple):\n    \"\"\"\n    Create the indexers for the passed tuple of keys, and\n    executes the take operation. This allows the take operation to be\n    executed all at once, rather than once for each dimension.\n    Improving efficiency.\n\n    Parameters\n    ----------\n    tup : tuple\n        Tuple of indexers, one per axis.\n\n    Returns\n    -------\n    values: same type as the object being indexed\n    \"\"\"\n    # GH 836\n    o = self.obj\n    d = {\n        axis: self._get_listlike_indexer(key, axis)\n        for (key, axis) in zip(tup, o._AXIS_ORDERS)\n    }\n    return o._reindex_with_indexers(d, copy=True, allow_dups=True)",
                "def _handle_lowerdim_multi_index_axis0(self, tup: Tuple):\n    # we have an axis0 multi-index, handle or raise\n    axis = self.axis or 0\n    try:\n        # fast path for series or for tup devoid of slices\n        return self._get_label(tup, axis=axis)\n    except TypeError:\n        # slices are unhashable\n        pass\n    except KeyError as ek:\n        # raise KeyError if number of indexers match\n        # else IndexingError will be raised\n        if len(tup) <= self.obj.index.nlevels and len(tup) > self.ndim:\n            raise ek\n\n    return None",
                "def _getitem_lowerdim(self, tup: Tuple):\n\n    # we can directly get the axis result since the axis is specified\n    if self.axis is not None:\n        axis = self.obj._get_axis_number(self.axis)\n        return self._getitem_axis(tup, axis=axis)\n\n    # we may have a nested tuples indexer here\n    if self._is_nested_tuple_indexer(tup):\n        return self._getitem_nested_tuple(tup)\n\n    # we maybe be using a tuple to represent multiple dimensions here\n    ax0 = self.obj._get_axis(0)\n    # ...but iloc should handle the tuple as simple integer-location\n    # instead of checking it as multiindex representation (GH 13797)\n    if isinstance(ax0, ABCMultiIndex) and self.name != \"iloc\":\n        result = self._handle_lowerdim_multi_index_axis0(tup)\n        if result is not None:\n            return result\n\n    if len(tup) > self.ndim:\n        raise IndexingError(\"Too many indexers. handle elsewhere\")\n\n    for i, key in enumerate(tup):\n        if is_label_like(key) or isinstance(key, tuple):\n            section = self._getitem_axis(key, axis=i)\n\n            # we have yielded a scalar ?\n            if not is_list_like_indexer(section):\n                return section\n\n            elif section.ndim == self.ndim:\n                # we're in the middle of slicing through a MultiIndex\n                # revise the key wrt to `section` by inserting an _NS\n                new_key = tup[:i] + (_NS,) + tup[i + 1 :]\n\n            else:\n                new_key = tup[:i] + tup[i + 1 :]\n\n                # unfortunately need an odious kludge here because of\n                # DataFrame transposing convention\n                if (\n                    isinstance(section, ABCDataFrame)\n                    and i > 0\n                    and len(new_key) == 2\n                ):\n                    a, b = new_key\n                    new_key = b, a\n\n                if len(new_key) == 1:\n                    new_key = new_key[0]\n\n            # Slices should return views, but calling iloc/loc with a null\n            # slice returns a new object.\n            if com.is_null_slice(new_key):\n                return section\n            # This is an elided recursive call to iloc/loc/etc'\n            return getattr(section, self.name)[new_key]\n\n    raise IndexingError(\"not applicable\")",
                "def _getitem_nested_tuple(self, tup: Tuple):\n    # we have a nested tuple so have at least 1 multi-index level\n    # we should be able to match up the dimensionality here\n\n    # we have too many indexers for our dim, but have at least 1\n    # multi-index dimension, try to see if we have something like\n    # a tuple passed to a series with a multi-index\n    if len(tup) > self.ndim:\n        result = self._handle_lowerdim_multi_index_axis0(tup)\n        if result is not None:\n            return result\n\n        # this is a series with a multi-index specified a tuple of\n        # selectors\n        axis = self.axis or 0\n        return self._getitem_axis(tup, axis=axis)\n\n    # handle the multi-axis by taking sections and reducing\n    # this is iterative\n    obj = self.obj\n    axis = 0\n    for i, key in enumerate(tup):\n\n        if com.is_null_slice(key):\n            axis += 1\n            continue\n\n        current_ndim = obj.ndim\n        obj = getattr(obj, self.name)._getitem_axis(key, axis=axis)\n        axis += 1\n\n        # if we have a scalar, we are done\n        if is_scalar(obj) or not hasattr(obj, \"ndim\"):\n            break\n\n        # has the dim of the obj changed?\n        # GH 7199\n        if obj.ndim < current_ndim:\n            axis -= 1\n\n    return obj",
                "def _get_listlike_indexer(self, key, axis: int, raise_missing: bool = False):\n    \"\"\"\n    Transform a list-like of keys into a new index and an indexer.\n\n    Parameters\n    ----------\n    key : list-like\n        Targeted labels.\n    axis: int\n        Dimension on which the indexing is being made.\n    raise_missing: bool, default False\n        Whether to raise a KeyError if some labels were not found.\n        Will be removed in the future, and then this method will always behave as\n        if ``raise_missing=True``.\n\n    Raises\n    ------\n    KeyError\n        If at least one key was requested but none was found, and\n        raise_missing=True.\n\n    Returns\n    -------\n    keyarr: Index\n        New index (coinciding with 'key' if the axis is unique).\n    values : array-like\n        Indexer for the return object, -1 denotes keys not found.\n    \"\"\"\n    o = self.obj\n    ax = o._get_axis(axis)\n\n    # Have the index compute an indexer or return None\n    # if it cannot handle:\n    indexer, keyarr = ax._convert_listlike_indexer(key, kind=self.name)\n    # We only act on all found values:\n    if indexer is not None and (indexer != -1).all():\n        self._validate_read_indexer(key, indexer, axis, raise_missing=raise_missing)\n        return ax[indexer], indexer\n\n    if ax.is_unique and not getattr(ax, \"is_overlapping\", False):\n        indexer = ax.get_indexer_for(key)\n        keyarr = ax.reindex(keyarr)[0]\n    else:\n        keyarr, indexer, new_indexer = ax._reindex_non_unique(keyarr)\n\n    self._validate_read_indexer(keyarr, indexer, axis, raise_missing=raise_missing)\n    return keyarr, indexer",
                "def _getitem_iterable(self, key, axis: int):\n    \"\"\"\n    Index current object with an an iterable key.\n\n    The iterable key can be a boolean indexer or a collection of keys.\n\n    Parameters\n    ----------\n    key : iterable\n        Targeted labels or boolean indexer.\n    axis: int\n        Dimension on which the indexing is being made.\n\n    Raises\n    ------\n    KeyError\n        If no key was found. Will change in the future to raise if not all\n        keys were found.\n    IndexingError\n        If the boolean indexer is unalignable with the object being\n        indexed.\n\n    Returns\n    -------\n    scalar, DataFrame, or Series: indexed value(s).\n    \"\"\"\n    # caller is responsible for ensuring non-None axis\n    self._validate_key(key, axis)\n\n    labels = self.obj._get_axis(axis)\n\n    if com.is_bool_indexer(key):\n        # A boolean indexer\n        key = check_bool_indexer(labels, key)\n        (inds,) = key.nonzero()\n        return self.obj._take_with_is_copy(inds, axis=axis)\n    else:\n        # A collection of keys\n        keyarr, indexer = self._get_listlike_indexer(key, axis, raise_missing=False)\n        return self.obj._reindex_with_indexers(\n            {axis: [keyarr, indexer]}, copy=True, allow_dups=True\n        )",
                "def _validate_read_indexer(\n    self, key, indexer, axis: int, raise_missing: bool = False\n):\n    \"\"\"\n    Check that indexer can be used to return a result.\n\n    e.g. at least one element was found,\n    unless the list of keys was actually empty.\n\n    Parameters\n    ----------\n    key : list-like\n        Targeted labels (only used to show correct error message).\n    indexer: array-like of booleans\n        Indices corresponding to the key,\n        (with -1 indicating not found).\n    axis: int\n        Dimension on which the indexing is being made.\n    raise_missing: bool\n        Whether to raise a KeyError if some labels are not found. Will be\n        removed in the future, and then this method will always behave as\n        if raise_missing=True.\n\n    Raises\n    ------\n    KeyError\n        If at least one key was requested but none was found, and\n        raise_missing=True.\n    \"\"\"\n    ax = self.obj._get_axis(axis)\n\n    if len(key) == 0:\n        return\n\n    # Count missing values:\n    missing = (indexer < 0).sum()\n\n    if missing:\n        if missing == len(indexer):\n            axis_name = self.obj._get_axis_name(axis)\n            raise KeyError(f\"None of [{key}] are in the [{axis_name}]\")\n\n        # We (temporarily) allow for some missing keys with .loc, except in\n        # some cases (e.g. setting) in which \"raise_missing\" will be False\n        if not (self.name == \"loc\" and not raise_missing):\n            not_found = list(set(key) - set(ax))\n            raise KeyError(f\"{not_found} not in index\")\n\n        # we skip the warning on Categorical/Interval\n        # as this check is actually done (check for\n        # non-missing values), but a bit later in the\n        # code, so we want to avoid warning & then\n        # just raising\n        if not (ax.is_categorical() or ax.is_interval()):\n            raise KeyError(\n                \"Passing list-likes to .loc or [] with any missing labels \"\n                \"is no longer supported, see \"\n                \"https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#deprecate-loc-reindex-listlike\"  # noqa:E501\n            )",
                "def _convert_to_indexer(self, key, axis: int):\n    \"\"\"\n    Convert indexing key into something we can use to do actual fancy\n    indexing on a ndarray.\n\n    Examples\n    ix[:5] -> slice(0, 5)\n    ix[[1,2,3]] -> [1,2,3]\n    ix[['foo', 'bar', 'baz']] -> [i, j, k] (indices of foo, bar, baz)\n\n    Going by Zen of Python?\n    'In the face of ambiguity, refuse the temptation to guess.'\n    raise AmbiguousIndexError with integer labels?\n    - No, prefer label-based indexing\n    \"\"\"\n    labels = self.obj._get_axis(axis)\n\n    if isinstance(key, slice):\n        return self._convert_slice_indexer(key, axis)\n\n    # try to find out correct indexer, if not type correct raise\n    try:\n        key = self._convert_scalar_indexer(key, axis)\n    except TypeError:\n        # but we will allow setting\n        pass\n\n    # see if we are positional in nature\n    is_int_index = labels.is_integer()\n    is_int_positional = is_integer(key) and not is_int_index\n\n    if is_scalar(key) or isinstance(labels, ABCMultiIndex):\n        # Otherwise get_loc will raise InvalidIndexError\n\n        # if we are a label return me\n        try:\n            return labels.get_loc(key)\n        except LookupError:\n            if isinstance(key, tuple) and isinstance(labels, ABCMultiIndex):\n                if len(key) == labels.nlevels:\n                    return {\"key\": key}\n                raise\n        except TypeError:\n            pass\n        except ValueError:\n            if not is_int_positional:\n                raise\n\n    # a positional\n    if is_int_positional:\n\n        # if we are setting and its not a valid location\n        # its an insert which fails by definition\n\n        if self.name == \"loc\":\n            # always valid\n            return {\"key\": key}\n\n        if key >= self.obj.shape[axis] and not isinstance(labels, ABCMultiIndex):\n            # a positional\n            raise ValueError(\"cannot set by positional indexing with enlargement\")\n\n        return key\n\n    if is_nested_tuple(key, labels):\n        return labels.get_locs(key)\n\n    elif is_list_like_indexer(key):\n\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(labels, key)\n            (inds,) = key.nonzero()\n            return inds\n        else:\n            # When setting, missing keys are not allowed, even with .loc:\n            return self._get_listlike_indexer(key, axis, raise_missing=True)[1]\n    else:\n        try:\n            return labels.get_loc(key)\n        except LookupError:\n            # allow a not found key only if we are a setter\n            if not is_list_like_indexer(key):\n                return {\"key\": key}\n            raise",
                "def __getitem__(self, key):\n    if type(key) is tuple:\n        key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        if self._is_scalar_access(key):\n            try:\n                return self.obj._get_value(*key, takeable=self._takeable)\n            except (KeyError, IndexError, AttributeError):\n                # AttributeError for IntervalTree get_value\n                pass\n        return self._getitem_tuple(key)\n    else:\n        # we by definition only have the 0th axis\n        axis = self.axis or 0\n\n        maybe_callable = com.apply_if_callable(key, self.obj)\n        return self._getitem_axis(maybe_callable, axis=axis)",
                "def _is_scalar_access(self, key: Tuple):\n    raise NotImplementedError()",
                "def _getitem_axis(self, key, axis: int):\n    raise NotImplementedError()",
                "def _getbool_axis(self, key, axis: int):\n    # caller is responsible for ensuring non-None axis\n    labels = self.obj._get_axis(axis)\n    key = check_bool_indexer(labels, key)\n    inds = key.nonzero()[0]\n    return self.obj._take_with_is_copy(inds, axis=axis)",
                "@Appender(_NDFrameIndexer._validate_key.__doc__)\ndef _validate_key(self, key, axis: int):\n\n    # valid for a collection of labels (we check their presence later)\n    # slice of labels (where start-end in labels)\n    # slice of integers (only if in the labels)\n    # boolean\n\n    if isinstance(key, slice):\n        return\n\n    if com.is_bool_indexer(key):\n        return\n\n    if not is_list_like_indexer(key):\n        self._convert_scalar_indexer(key, axis)",
                "def _is_scalar_access(self, key: Tuple) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    # this is a shortcut accessor to both .loc and .iloc\n    # that provide the equivalent access of .at and .iat\n    # a) avoid getting things via sections and (to minimize dtype changes)\n    # b) provide a performant path\n    if len(key) != self.ndim:\n        return False\n\n    for i, k in enumerate(key):\n        if not is_scalar(k):\n            return False\n\n        ax = self.obj.axes[i]\n        if isinstance(ax, ABCMultiIndex):\n            return False\n\n        if isinstance(k, str) and ax._supports_partial_string_indexing:\n            # partial string indexing, df.loc['2000', 'A']\n            # should not be considered scalar\n            return False\n\n        if not ax.is_unique:\n            return False\n\n    return True",
                "def _get_partial_string_timestamp_match_key(self, key, labels):\n    \"\"\"\n    Translate any partial string timestamp matches in key, returning the\n    new key.\n\n    (GH 10331)\n    \"\"\"\n    if isinstance(labels, ABCMultiIndex):\n        if (\n            isinstance(key, str)\n            and labels.levels[0]._supports_partial_string_indexing\n        ):\n            # Convert key '2016-01-01' to\n            # ('2016-01-01'[, slice(None, None, None)]+)\n            key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))\n\n        if isinstance(key, tuple):\n            # Convert (..., '2016-01-01', ...) in tuple to\n            # (..., slice('2016-01-01', '2016-01-01', None), ...)\n            new_key = []\n            for i, component in enumerate(key):\n                if (\n                    isinstance(component, str)\n                    and labels.levels[i]._supports_partial_string_indexing\n                ):\n                    new_key.append(slice(component, component, None))\n                else:\n                    new_key.append(component)\n            key = tuple(new_key)\n\n    return key",
                "def _getitem_axis(self, key, axis: int):\n    key = item_from_zerodim(key)\n    if is_iterator(key):\n        key = list(key)\n\n    labels = self.obj._get_axis(axis)\n    key = self._get_partial_string_timestamp_match_key(key, labels)\n\n    if isinstance(key, slice):\n        self._validate_key(key, axis)\n        return self._get_slice_axis(key, axis=axis)\n    elif com.is_bool_indexer(key):\n        return self._getbool_axis(key, axis=axis)\n    elif is_list_like_indexer(key):\n\n        # convert various list-like indexers\n        # to a list of keys\n        # we will use the *values* of the object\n        # and NOT the index if its a PandasObject\n        if isinstance(labels, ABCMultiIndex):\n\n            if isinstance(key, (ABCSeries, np.ndarray)) and key.ndim <= 1:\n                # Series, or 0,1 ndim ndarray\n                # GH 14730\n                key = list(key)\n            elif isinstance(key, ABCDataFrame):\n                # GH 15438\n                raise NotImplementedError(\n                    \"Indexing a MultiIndex with a \"\n                    \"DataFrame key is not \"\n                    \"implemented\"\n                )\n            elif hasattr(key, \"ndim\") and key.ndim > 1:\n                raise NotImplementedError(\n                    \"Indexing a MultiIndex with a \"\n                    \"multidimensional key is not \"\n                    \"implemented\"\n                )\n\n            if (\n                not isinstance(key, tuple)\n                and len(key)\n                and not isinstance(key[0], tuple)\n            ):\n                key = tuple([key])\n\n        # an iterable multi-selection\n        if not (isinstance(key, tuple) and isinstance(labels, ABCMultiIndex)):\n\n            if hasattr(key, \"ndim\") and key.ndim > 1:\n                raise ValueError(\"Cannot index with multidimensional key\")\n\n            return self._getitem_iterable(key, axis=axis)\n\n        # nested tuple slicing\n        if is_nested_tuple(key, labels):\n            locs = labels.get_locs(key)\n            indexer = [slice(None)] * self.ndim\n            indexer[axis] = locs\n            return self.obj.iloc[tuple(indexer)]\n\n    # fall thru to straight lookup\n    self._validate_key(key, axis)\n    return self._get_label(key, axis=axis)",
                "def _get_slice_axis(self, slice_obj: slice, axis: int):\n    \"\"\"\n    This is pretty simple as we just have to deal with labels.\n    \"\"\"\n    # caller is responsible for ensuring non-None axis\n    obj = self.obj\n    if not need_slice(slice_obj):\n        return obj.copy(deep=False)\n\n    labels = obj._get_axis(axis)\n    indexer = labels.slice_indexer(\n        slice_obj.start, slice_obj.stop, slice_obj.step, kind=self.name\n    )\n\n    if isinstance(indexer, slice):\n        return self._slice(indexer, axis=axis, kind=\"iloc\")\n    else:\n        # DatetimeIndex overrides Index.slice_indexer and may\n        #  return a DatetimeIndex instead of a slice object.\n        return self.obj.take(indexer, axis=axis)",
                "def _validate_key(self, key, axis: int):\n    if com.is_bool_indexer(key):\n        if hasattr(key, \"index\") and isinstance(key.index, Index):\n            if key.index.inferred_type == \"integer\":\n                raise NotImplementedError(\n                    \"iLocation based boolean \"\n                    \"indexing on an integer type \"\n                    \"is not available\"\n                )\n            raise ValueError(\n                \"iLocation based boolean indexing cannot use \"\n                \"an indexable as a mask\"\n            )\n        return\n\n    if isinstance(key, slice):\n        return\n    elif is_integer(key):\n        self._validate_integer(key, axis)\n    elif isinstance(key, tuple):\n        # a tuple should already have been caught by this point\n        # so don't treat a tuple as a valid indexer\n        raise IndexingError(\"Too many indexers\")\n    elif is_list_like_indexer(key):\n        arr = np.array(key)\n        len_axis = len(self.obj._get_axis(axis))\n\n        # check that the key has a numeric dtype\n        if not is_numeric_dtype(arr.dtype):\n            raise IndexError(f\".iloc requires numeric indexers, got {arr}\")\n\n        # check that the key does not exceed the maximum size of the index\n        if len(arr) and (arr.max() >= len_axis or arr.min() < -len_axis):\n            raise IndexError(\"positional indexers are out-of-bounds\")\n    else:\n        raise ValueError(f\"Can only index by location with a [{self._valid_types}]\")",
                "def _has_valid_setitem_indexer(self, indexer):\n    self._has_valid_positional_setitem_indexer(indexer)",
                "def _is_scalar_access(self, key: Tuple) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    # this is a shortcut accessor to both .loc and .iloc\n    # that provide the equivalent access of .at and .iat\n    # a) avoid getting things via sections and (to minimize dtype changes)\n    # b) provide a performant path\n    if len(key) != self.ndim:\n        return False\n\n    for i, k in enumerate(key):\n        if not is_integer(k):\n            return False\n\n        ax = self.obj.axes[i]\n        if not ax.is_unique:\n            return False\n\n    return True",
                "def _validate_integer(self, key: int, axis: int) -> None:\n    \"\"\"\n    Check that 'key' is a valid position in the desired axis.\n\n    Parameters\n    ----------\n    key : int\n        Requested position.\n    axis : int\n        Desired axis.\n\n    Raises\n    ------\n    IndexError\n        If 'key' is not a valid position in axis 'axis'.\n    \"\"\"\n    len_axis = len(self.obj._get_axis(axis))\n    if key >= len_axis or key < -len_axis:\n        raise IndexError(\"single positional indexer is out-of-bounds\")",
                "def _getitem_tuple(self, tup: Tuple):\n\n    self._has_valid_tuple(tup)\n    try:\n        return self._getitem_lowerdim(tup)\n    except IndexingError:\n        pass\n\n    retval = self.obj\n    axis = 0\n    for i, key in enumerate(tup):\n        if com.is_null_slice(key):\n            axis += 1\n            continue\n\n        retval = getattr(retval, self.name)._getitem_axis(key, axis=axis)\n\n        # if the dim was reduced, then pass a lower-dim the next time\n        if retval.ndim < self.ndim:\n            # TODO: this is never reached in tests; can we confirm that\n            #  it is impossible?\n            axis -= 1\n\n        # try to get for the next axis\n        axis += 1\n\n    return retval",
                "def _get_list_axis(self, key, axis: int):\n    \"\"\"\n    Return Series values by list or array of integers.\n\n    Parameters\n    ----------\n    key : list-like positional indexer\n    axis : int\n\n    Returns\n    -------\n    Series object\n\n    Notes\n    -----\n    `axis` can only be zero.\n    \"\"\"\n    try:\n        return self.obj._take_with_is_copy(key, axis=axis)\n    except IndexError:\n        # re-raise with different error message\n        raise IndexError(\"positional indexers are out-of-bounds\")",
                "def _getitem_axis(self, key, axis: int):\n    if isinstance(key, slice):\n        return self._get_slice_axis(key, axis=axis)\n\n    if isinstance(key, list):\n        key = np.asarray(key)\n\n    if com.is_bool_indexer(key):\n        self._validate_key(key, axis)\n        return self._getbool_axis(key, axis=axis)\n\n    # a list of integers\n    elif is_list_like_indexer(key):\n        return self._get_list_axis(key, axis=axis)\n\n    # a single integer\n    else:\n        key = item_from_zerodim(key)\n        if not is_integer(key):\n            raise TypeError(\"Cannot index by location index with a non-integer key\")\n\n        # validate the location\n        self._validate_integer(key, axis)\n\n        return self._get_loc(key, axis=axis)",
                "def _get_slice_axis(self, slice_obj: slice, axis: int):\n    # caller is responsible for ensuring non-None axis\n    obj = self.obj\n\n    if not need_slice(slice_obj):\n        return obj.copy(deep=False)\n\n    indexer = self._convert_slice_indexer(slice_obj, axis)\n    return self._slice(indexer, axis=axis, kind=\"iloc\")",
                "def _convert_to_indexer(self, key, axis: int):\n    \"\"\"\n    Much simpler as we only have to deal with our valid types.\n    \"\"\"\n    # make need to convert a float key\n    if isinstance(key, slice):\n        return self._convert_slice_indexer(key, axis)\n\n    elif is_float(key):\n        return self._convert_scalar_indexer(key, axis)\n\n    try:\n        self._validate_key(key, axis)\n        return key\n    except ValueError:\n        raise ValueError(f\"Can only index by location with a [{self._valid_types}]\")",
                "def _convert_key(self, key, is_setter: bool = False):\n    raise AbstractMethodError(self)",
                "def __getitem__(self, key):\n    if not isinstance(key, tuple):\n\n        # we could have a convertible item here (e.g. Timestamp)\n        if not is_list_like_indexer(key):\n            key = tuple([key])\n        else:\n            raise ValueError(\"Invalid call for scalar access (getting)!\")\n\n    key = self._convert_key(key)\n    return self.obj._get_value(*key, takeable=self._takeable)",
                "def __setitem__(self, key, value):\n    if isinstance(key, tuple):\n        key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n    else:\n        # scalar callable may return tuple\n        key = com.apply_if_callable(key, self.obj)\n\n    if not isinstance(key, tuple):\n        key = _tuplify(self.ndim, key)\n    if len(key) != self.ndim:\n        raise ValueError(\"Not enough indexers for scalar access (setting)!\")\n    key = list(self._convert_key(key, is_setter=True))\n    self.obj._set_value(*key, value=value, takeable=self._takeable)",
                "def _convert_key(self, key, is_setter: bool = False):\n    \"\"\"\n    Require they keys to be the same type as the index. (so we don't\n    fallback)\n    \"\"\"\n    # allow arbitrary setting\n    if is_setter:\n        return list(key)\n\n    for ax, i in zip(self.obj.axes, key):\n        if ax.is_integer():\n            if not is_integer(i):\n                raise ValueError(\n                    \"At based indexing on an integer index \"\n                    \"can only have integer indexers\"\n                )\n        else:\n            if is_integer(i) and not ax.holds_integer():\n                raise ValueError(\n                    \"At based indexing on an non-integer \"\n                    \"index can only have non-integer \"\n                    \"indexers\"\n                )\n    return key",
                "def _convert_key(self, key, is_setter: bool = False):\n    \"\"\"\n    Require integer args. (and convert to label arguments)\n    \"\"\"\n    for a, i in zip(self.obj.axes, key):\n        if not is_integer(i):\n            raise ValueError(\"iAt based indexing can only have integer indexers\")\n    return key",
                "def get_indexer(_i, _idx):\n    return axes[_i].get_loc(_idx[\"key\"]) if isinstance(_idx, dict) else _idx",
                "def pred(part) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n        True if slice does *not* reduce,\n        False if `part` is a tuple.\n    \"\"\"\n    # true when slice does *not* reduce, False when part is a tuple,\n    # i.e. MultiIndex slice\n    return (isinstance(part, slice) or is_list_like(part)) and not isinstance(\n        part, tuple\n    )",
                "def setter(item, v):\n    s = self.obj[item]\n    pi = plane_indexer[0] if lplane_indexer == 1 else plane_indexer\n\n    # perform the equivalent of a setitem on the info axis\n    # as we have a null slice or a slice with full bounds\n    # which means essentially reassign to the columns of a\n    # multi-dim object\n    # GH6149 (null slice), GH10408 (full bounds)\n    if isinstance(pi, tuple) and all(\n        com.is_null_slice(idx) or com.is_full_slice(idx, len(self.obj))\n        for idx in pi\n    ):\n        s = v\n    else:\n        # set the item, possibly having a dtype change\n        s._consolidate_inplace()\n        s = s.copy()\n        s._data = s._data.setitem(indexer=pi, value=v)\n        s._maybe_update_cacher(clear=True)\n\n    # reset the sliced object if unique\n    self.obj[item] = s",
                "def ravel(i):\n    return i.ravel() if isinstance(i, np.ndarray) else i"
            ],
            "inscope_function_signatures": [
                "_tuplify(ndim: int, loc: Hashable) -> Tuple[Union[Hashable, slice], ...]",
                "convert_to_index_sliceable(obj, key)",
                "check_bool_indexer(index: Index, key) -> np.ndarray",
                "convert_missing_indexer(indexer)",
                "convert_from_missing_indexer_tuple(indexer, axes)",
                "maybe_convert_ix(*args)",
                "is_nested_tuple(tup, labels) -> bool",
                "is_label_like(key) -> bool",
                "need_slice(obj) -> bool",
                "_non_reducing_slice(slice_)",
                "_maybe_numeric_slice(df, slice_, include_bool=False)",
                "_can_do_equal_len(labels, value, plane_indexer, lplane_indexer, obj) -> bool",
                "__getitem__(self, arg)",
                "iloc(self) -> '_iLocIndexer'",
                "loc(self) -> '_LocIndexer'",
                "at(self) -> '_AtIndexer'",
                "iat(self) -> '_iAtIndexer'",
                "__call__(self, axis=None)",
                "_get_label(self, label, axis: int)",
                "_get_loc(self, key: int, axis: int)",
                "_slice(self, obj, axis: int, kind=None)",
                "_get_setitem_indexer(self, key)",
                "__setitem__(self, key, value)",
                "_validate_key(self, key, axis: int)",
                "_has_valid_tuple(self, key: Tuple)",
                "_is_nested_tuple_indexer(self, tup: Tuple) -> bool",
                "_convert_tuple(self, key)",
                "_convert_scalar_indexer(self, key, axis: int)",
                "_convert_slice_indexer(self, key: slice, axis: int)",
                "_has_valid_setitem_indexer(self, indexer) -> bool",
                "_has_valid_positional_setitem_indexer(self, indexer) -> bool",
                "_setitem_with_indexer(self, indexer, value)",
                "_setitem_with_indexer_missing(self, indexer, value)",
                "_align_series(self, indexer, ser: ABCSeries, multiindex_indexer: bool=False)",
                "_align_frame(self, indexer, df: ABCDataFrame)",
                "_getitem_tuple(self, tup: Tuple)",
                "_multi_take_opportunity(self, tup: Tuple) -> bool",
                "_multi_take(self, tup: Tuple)",
                "_handle_lowerdim_multi_index_axis0(self, tup: Tuple)",
                "_getitem_lowerdim(self, tup: Tuple)",
                "_getitem_nested_tuple(self, tup: Tuple)",
                "_get_listlike_indexer(self, key, axis: int, raise_missing: bool=False)",
                "_getitem_iterable(self, key, axis: int)",
                "_validate_read_indexer(self, key, indexer, axis: int, raise_missing: bool=False)",
                "_convert_to_indexer(self, key, axis: int)",
                "__getitem__(self, key)",
                "_is_scalar_access(self, key: Tuple)",
                "_getitem_axis(self, key, axis: int)",
                "_getbool_axis(self, key, axis: int)",
                "_validate_key(self, key, axis: int)",
                "_is_scalar_access(self, key: Tuple) -> bool",
                "_get_partial_string_timestamp_match_key(self, key, labels)",
                "_getitem_axis(self, key, axis: int)",
                "_get_slice_axis(self, slice_obj: slice, axis: int)",
                "_validate_key(self, key, axis: int)",
                "_has_valid_setitem_indexer(self, indexer)",
                "_is_scalar_access(self, key: Tuple) -> bool",
                "_validate_integer(self, key: int, axis: int) -> None",
                "_getitem_tuple(self, tup: Tuple)",
                "_get_list_axis(self, key, axis: int)",
                "_getitem_axis(self, key, axis: int)",
                "_get_slice_axis(self, slice_obj: slice, axis: int)",
                "_convert_to_indexer(self, key, axis: int)",
                "_convert_key(self, key, is_setter: bool=False)",
                "__getitem__(self, key)",
                "__setitem__(self, key, value)",
                "_convert_key(self, key, is_setter: bool=False)",
                "_convert_key(self, key, is_setter: bool=False)",
                "get_indexer(_i, _idx)",
                "pred(part) -> bool",
                "setter(item, v)",
                "ravel(i)"
            ],
            "variables_in_file": {
                "_NS": [
                    1360,
                    33
                ],
                "slice": [
                    1796,
                    2308,
                    2058,
                    33,
                    1192,
                    2347,
                    2352,
                    1716,
                    1845,
                    694,
                    1212,
                    1853,
                    1597,
                    2175,
                    709,
                    1867,
                    589,
                    1109,
                    732,
                    2018,
                    2150,
                    1770,
                    1898,
                    2164,
                    1781,
                    2165,
                    2295,
                    2043,
                    1151
                ],
                "arg": [
                    2273,
                    2274,
                    79
                ],
                "IndexSlice": [
                    82,
                    2372,
                    2335
                ],
                "_IndexSlice": [
                    82
                ],
                "Exception": [
                    85
                ],
                "_iLocIndexer": [
                    229
                ],
                "self": [
                    1026,
                    2050,
                    2051,
                    1029,
                    518,
                    1030,
                    1031,
                    2059,
                    1549,
                    2062,
                    1041,
                    1042,
                    2065,
                    2068,
                    1559,
                    1564,
                    2077,
                    1054,
                    1058,
                    1061,
                    1062,
                    1063,
                    2088,
                    1065,
                    1066,
                    2089,
                    1068,
                    2093,
                    1070,
                    2096,
                    2099,
                    1076,
                    2100,
                    566,
                    2102,
                    2103,
                    1083,
                    1595,
                    1086,
                    575,
                    1088,
                    1089,
                    578,
                    1090,
                    1598,
                    1602,
                    583,
                    2119,
                    588,
                    592,
                    595,
                    598,
                    601,
                    602,
                    604,
                    606,
                    2144,
                    1634,
                    1123,
                    1124,
                    1638,
                    615,
                    623,
                    1137,
                    1655,
                    633,
                    635,
                    636,
                    637,
                    1671,
                    1672,
                    1674,
                    1678,
                    1168,
                    1681,
                    659,
                    1683,
                    1684,
                    1174,
                    666,
                    669,
                    1694,
                    1184,
                    673,
                    1697,
                    1191,
                    682,
                    683,
                    688,
                    689,
                    690,
                    692,
                    697,
                    699,
                    1723,
                    1213,
                    705,
                    707,
                    711,
                    712,
                    1735,
                    1742,
                    1237,
                    727,
                    730,
                    731,
                    1242,
                    1245,
                    1246,
                    1249,
                    229,
                    741,
                    1254,
                    744,
                    749,
                    754,
                    757,
                    761,
                    762,
                    1793,
                    770,
                    771,
                    1794,
                    1797,
                    1798,
                    1800,
                    1302,
                    792,
                    1304,
                    799,
                    1311,
                    1314,
                    807,
                    808,
                    1321,
                    811,
                    814,
                    816,
                    1329,
                    818,
                    1330,
                    1331,
                    1840,
                    1334,
                    1335,
                    824,
                    1845,
                    826,
                    827,
                    828,
                    1338,
                    1341,
                    1342,
                    1847,
                    1850,
                    1346,
                    1851,
                    1858,
                    1351,
                    1864,
                    841,
                    844,
                    1357,
                    1868,
                    1872,
                    849,
                    853,
                    856,
                    866,
                    869,
                    1383,
                    1901,
                    1394,
                    1395,
                    1908,
                    1401,
                    1402,
                    1406,
                    1918,
                    1921,
                    900,
                    1415,
                    906,
                    1933,
                    910,
                    1940,
                    919,
                    931,
                    1962,
                    1968,
                    945,
                    1457,
                    1970,
                    1462,
                    1974,
                    1465,
                    1981,
                    1984,
                    1474,
                    975,
                    469,
                    2012,
                    1504,
                    1506,
                    2019,
                    1512,
                    2025,
                    2026,
                    1515,
                    1516,
                    2030,
                    1013,
                    2039,
                    2041,
                    1020,
                    2045,
                    1023
                ],
                "property": [
                    520,
                    471,
                    93,
                    231
                ],
                "_LocIndexer": [
                    469
                ],
                "_AtIndexer": [
                    518
                ],
                "_iAtIndexer": [
                    566
                ],
                "_NDFrameIndexerBase": [
                    569,
                    2071
                ],
                "_valid_types": [
                    570,
                    1877,
                    1702
                ],
                "str": [
                    2178,
                    1765,
                    1746,
                    627,
                    1778,
                    570,
                    2333
                ],
                "axis": [
                    2050,
                    2051,
                    2059,
                    1549,
                    2062,
                    2065,
                    1559,
                    571,
                    1595,
                    1598,
                    577,
                    578,
                    579,
                    1602,
                    588,
                    589,
                    592,
                    595,
                    598,
                    1638,
                    1655,
                    1681,
                    1684,
                    1694,
                    1697,
                    689,
                    691,
                    692,
                    1723,
                    705,
                    711,
                    1793,
                    1797,
                    1798,
                    1800,
                    1304,
                    1305,
                    1311,
                    1314,
                    1840,
                    1330,
                    1331,
                    1846,
                    1850,
                    1851,
                    1862,
                    1868,
                    1872,
                    1901,
                    1908,
                    1401,
                    1402,
                    1407,
                    1411,
                    1415,
                    1416,
                    1425,
                    1962,
                    1458,
                    1975,
                    1465,
                    1978,
                    1981,
                    1474,
                    1987,
                    1990,
                    2012,
                    1504,
                    1506,
                    2019,
                    1512,
                    2025,
                    2026,
                    1515,
                    1517,
                    2030,
                    2039,
                    2041
                ],
                "new_self": [
                    579,
                    580,
                    575
                ],
                "type": [
                    1670,
                    575
                ],
                "self.name": [
                    1634,
                    707,
                    741,
                    1254,
                    1383,
                    712,
                    744,
                    1415,
                    1864,
                    1981,
                    1462,
                    727,
                    1564,
                    1341,
                    606,
                    575
                ],
                "self.obj": [
                    1026,
                    1029,
                    1030,
                    1031,
                    1549,
                    1042,
                    1559,
                    1058,
                    1061,
                    1062,
                    1063,
                    1065,
                    1066,
                    2089,
                    2093,
                    1070,
                    2096,
                    1076,
                    2103,
                    1083,
                    1595,
                    1086,
                    575,
                    1088,
                    1089,
                    578,
                    1090,
                    2119,
                    588,
                    592,
                    595,
                    598,
                    604,
                    2144,
                    1124,
                    1638,
                    633,
                    635,
                    1671,
                    1674,
                    1168,
                    1683,
                    1174,
                    1694,
                    1697,
                    1191,
                    682,
                    683,
                    689,
                    1213,
                    705,
                    711,
                    1742,
                    731,
                    1249,
                    754,
                    757,
                    761,
                    762,
                    1793,
                    770,
                    771,
                    1302,
                    792,
                    799,
                    807,
                    808,
                    1321,
                    811,
                    814,
                    818,
                    1330,
                    1847,
                    824,
                    826,
                    827,
                    828,
                    1338,
                    1858,
                    844,
                    1872,
                    866,
                    869,
                    1908,
                    1406,
                    900,
                    906,
                    910,
                    1940,
                    919,
                    931,
                    1962,
                    1457,
                    1974,
                    975,
                    2012,
                    1506,
                    1512,
                    1516,
                    1013,
                    2045
                ],
                "self.obj._get_axis_number": [
                    689,
                    578,
                    1330
                ],
                "new_self.axis": [
                    579
                ],
                "int": [
                    2053,
                    1429,
                    1689,
                    1946,
                    1692,
                    1580,
                    1709,
                    1853,
                    703,
                    709,
                    582,
                    1477,
                    1994,
                    594,
                    597,
                    1883,
                    2017,
                    2150,
                    1521,
                    2043,
                    1788,
                    639
                ],
                "self.ndim": [
                    1933,
                    1041,
                    792,
                    666,
                    1184,
                    1321,
                    1068,
                    690,
                    2099,
                    2100,
                    1845,
                    697,
                    1984,
                    705,
                    1346,
                    583,
                    711,
                    1735,
                    1357,
                    849,
                    853,
                    730,
                    1123,
                    1137,
                    1394
                ],
                "self.obj._xs": [
                    592,
                    588
                ],
                "label": [
                    592,
                    588,
                    589
                ],
                "isinstance": [
                    2058,
                    2080,
                    2092,
                    1074,
                    2098,
                    1597,
                    1611,
                    589,
                    1618,
                    1109,
                    1112,
                    1116,
                    606,
                    613,
                    1638,
                    619,
                    632,
                    2175,
                    1151,
                    2178,
                    1186,
                    1192,
                    1193,
                    682,
                    2222,
                    1716,
                    1212,
                    1221,
                    1222,
                    2245,
                    2250,
                    1743,
                    1746,
                    726,
                    2263,
                    729,
                    732,
                    2274,
                    1763,
                    1765,
                    743,
                    1772,
                    1778,
                    2290,
                    2295,
                    2296,
                    764,
                    770,
                    772,
                    1796,
                    2308,
                    778,
                    781,
                    1807,
                    1809,
                    1813,
                    2334,
                    1828,
                    1830,
                    1835,
                    2347,
                    2352,
                    1341,
                    1350,
                    1867,
                    852,
                    855,
                    1368,
                    1885,
                    865,
                    1898,
                    1902,
                    918,
                    938,
                    940,
                    2018,
                    997,
                    2021,
                    1016,
                    1022
                ],
                "tuple": [
                    770,
                    899,
                    1670,
                    1671,
                    778,
                    1784,
                    918,
                    2080,
                    1186,
                    1828,
                    2084,
                    1830,
                    1832,
                    1835,
                    2092,
                    2093,
                    2348,
                    946,
                    2098,
                    1847,
                    2360,
                    701,
                    835,
                    1350,
                    589,
                    1618,
                    852,
                    1110,
                    1112,
                    729,
                    2265,
                    1118,
                    613,
                    997,
                    873,
                    1770,
                    1772,
                    1902,
                    2290,
                    2167,
                    632,
                    633
                ],
                "IndexingError": [
                    1347,
                    616,
                    1385,
                    590,
                    1905,
                    2226,
                    1971,
                    629,
                    1238,
                    698,
                    667
                ],
                "self.obj._ixs": [
                    595
                ],
                "key": [
                    2058,
                    2059,
                    2061,
                    2062,
                    1551,
                    2065,
                    2066,
                    1560,
                    1565,
                    2080,
                    2083,
                    2084,
                    2088,
                    2089,
                    2092,
                    2093,
                    2096,
                    2098,
                    2099,
                    2100,
                    2102,
                    2103,
                    1597,
                    1598,
                    1602,
                    2117,
                    2119,
                    1609,
                    1611,
                    1616,
                    1618,
                    595,
                    1619,
                    1620,
                    2133,
                    602,
                    608,
                    2144,
                    2147,
                    1636,
                    613,
                    1638,
                    615,
                    1642,
                    619,
                    620,
                    1644,
                    1645,
                    623,
                    1647,
                    1649,
                    1650,
                    1651,
                    629,
                    1655,
                    632,
                    633,
                    1658,
                    635,
                    636,
                    1661,
                    1662,
                    2175,
                    2176,
                    2178,
                    2181,
                    1670,
                    1671,
                    1672,
                    1674,
                    2188,
                    1678,
                    1683,
                    665,
                    1695,
                    1696,
                    2221,
                    2222,
                    692,
                    1716,
                    1719,
                    696,
                    1722,
                    1723,
                    707,
                    1735,
                    712,
                    1738,
                    1250,
                    1251,
                    1765,
                    1254,
                    1770,
                    1772,
                    1776,
                    1784,
                    1786,
                    1789,
                    1790,
                    1791,
                    1794,
                    1796,
                    1797,
                    1798,
                    1799,
                    1800,
                    1801,
                    2308,
                    785,
                    1809,
                    1812,
                    1813,
                    1304,
                    1305,
                    1820,
                    1828,
                    1829,
                    1830,
                    807,
                    1832,
                    811,
                    1835,
                    1837,
                    1840,
                    1843,
                    1844,
                    825,
                    1850,
                    1851,
                    830,
                    1349,
                    1350,
                    1351,
                    1884,
                    1885,
                    1886,
                    1898,
                    1900,
                    1901,
                    1902,
                    1906,
                    1907,
                    1408,
                    1410,
                    1415,
                    1933,
                    1936,
                    1963,
                    1462,
                    1976,
                    1465,
                    1977,
                    1469,
                    1981,
                    2012,
                    1504,
                    2018,
                    2019,
                    1508,
                    2021,
                    1510,
                    1511,
                    2022,
                    2024,
                    2025,
                    1515,
                    2026,
                    2029,
                    2030,
                    2034,
                    2035,
                    2039,
                    2041
                ],
                "self.obj._slice": [
                    598
                ],
                "obj": [
                    2048,
                    897,
                    898,
                    899,
                    900,
                    2181,
                    1414,
                    1415,
                    1419,
                    2318,
                    2319,
                    1424,
                    2320,
                    1427,
                    2174,
                    1858,
                    1860,
                    1862,
                    2387,
                    598,
                    1124,
                    869,
                    870,
                    1138,
                    884,
                    1148,
                    2045,
                    1406
                ],
                "kind": [
                    598
                ],
                "self.axis": [
                    1401,
                    688,
                    689,
                    1329,
                    1330,
                    1681,
                    601,
                    1311
                ],
                "self._convert_tuple": [
                    602,
                    615
                ],
                "ax": [
                    1154,
                    771,
                    772,
                    1549,
                    1168,
                    1169,
                    1171,
                    1940,
                    1941,
                    1174,
                    1176,
                    1179,
                    1565,
                    1573,
                    1191,
                    682,
                    683,
                    1196,
                    1198,
                    1458,
                    1462,
                    1466,
                    1468,
                    1213,
                    1214,
                    1469,
                    1470,
                    705,
                    1472,
                    707,
                    1221,
                    711,
                    712,
                    1223,
                    2119,
                    2120,
                    1230,
                    1742,
                    1743,
                    2127,
                    1746,
                    1751,
                    731,
                    604,
                    606,
                    608,
                    739,
                    1148
                ],
                "self.obj._get_axis": [
                    705,
                    1506,
                    1793,
                    711,
                    1962,
                    844,
                    1549,
                    1908,
                    1174,
                    824,
                    1338,
                    1595,
                    604,
                    1694
                ],
                "ABCMultiIndex": [
                    866,
                    1763,
                    772,
                    1221,
                    1222,
                    1638,
                    682,
                    1611,
                    940,
                    1835,
                    1743,
                    1807,
                    1618,
                    2296,
                    1341,
                    606
                ],
                "ax.get_loc": [
                    608
                ],
                "TypeError": [
                    609,
                    1603,
                    1315,
                    1225,
                    624,
                    2036,
                    1622
                ],
                "KeyError": [
                    609,
                    1574,
                    1318,
                    1675,
                    2251,
                    2189,
                    1560,
                    1566
                ],
                "InvalidIndexError": [
                    609
                ],
                "range": [
                    690,
                    619,
                    2165
                ],
                "list": [
                    2274,
                    2021,
                    2117,
                    939,
                    620,
                    1812,
                    1109,
                    2102,
                    2333,
                    764,
                    1565,
                    1791
                ],
                "self._convert_to_indexer": [
                    699,
                    692,
                    623
                ],
                "e": [
                    627
                ],
                "com.apply_if_callable": [
                    1671,
                    2093,
                    2096,
                    1683,
                    633,
                    635
                ],
                "com": [
                    1152,
                    1280,
                    1410,
                    773,
                    1671,
                    1799,
                    1683,
                    919,
                    2093,
                    2096,
                    1719,
                    1977,
                    1884,
                    1120,
                    1251,
                    1380,
                    1508,
                    2024,
                    1007,
                    1649,
                    633,
                    635
                ],
                "x": [
                    1280,
                    1671,
                    2093,
                    633,
                    1276
                ],
                "indexer": [
                    2050,
                    2051,
                    1030,
                    1043,
                    1555,
                    1558,
                    1077,
                    1086,
                    1109,
                    1110,
                    1112,
                    1118,
                    1120,
                    1137,
                    1138,
                    1141,
                    1142,
                    1147,
                    636,
                    637,
                    1173,
                    1186,
                    1190,
                    1212,
                    1213,
                    2245,
                    2248,
                    2250,
                    2252,
                    2254,
                    726,
                    729,
                    730,
                    731,
                    2265,
                    749,
                    770,
                    771,
                    778,
                    780,
                    814,
                    1845,
                    1846,
                    1847,
                    835,
                    838,
                    1863,
                    841,
                    1867,
                    1868,
                    1872,
                    852,
                    853,
                    856,
                    858,
                    871,
                    873,
                    1921,
                    905,
                    939,
                    1462,
                    1464,
                    1465,
                    1466,
                    1469,
                    1472,
                    1474,
                    1475,
                    997,
                    998,
                    1515,
                    1004,
                    1005,
                    1517,
                    1008,
                    1013,
                    1020,
                    1023
                ],
                "self._get_setitem_indexer": [
                    636
                ],
                "self._setitem_with_indexer": [
                    816,
                    637,
                    1054
                ],
                "value": [
                    899,
                    764,
                    1030,
                    1020,
                    1054,
                    1057,
                    802,
                    807,
                    935,
                    938,
                    811,
                    943,
                    816,
                    946,
                    1074,
                    1076,
                    1077,
                    2103,
                    1081,
                    1083,
                    957,
                    1086,
                    1088,
                    961,
                    962,
                    841,
                    971,
                    975,
                    2383,
                    977,
                    2389,
                    982,
                    855,
                    856,
                    988,
                    994,
                    879,
                    880,
                    881,
                    884,
                    1013,
                    1016,
                    892,
                    637,
                    1022,
                    1023
                ],
                "AbstractMethodError": [
                    659,
                    2077
                ],
                "Tuple": [
                    1923,
                    676,
                    1285,
                    2150,
                    1725,
                    1258,
                    1387,
                    1326,
                    1966,
                    1235,
                    661,
                    1686,
                    1309
                ],
                "i": [
                    1408,
                    771,
                    773,
                    780,
                    1936,
                    1940,
                    792,
                    665,
                    666,
                    669,
                    799,
                    1190,
                    1191,
                    690,
                    691,
                    1202,
                    696,
                    697,
                    824,
                    699,
                    826,
                    1976,
                    1349,
                    1351,
                    968,
                    2119,
                    1738,
                    971,
                    2121,
                    1742,
                    2127,
                    1360,
                    1363,
                    1369,
                    731,
                    732,
                    1116,
                    735,
                    2144,
                    2145,
                    738,
                    739,
                    1250,
                    1254,
                    743,
                    1008,
                    1009,
                    1776,
                    1779,
                    2293,
                    1147,
                    1148
                ],
                "k": [
                    1738,
                    1739,
                    1936,
                    1937,
                    1746,
                    2293,
                    2295,
                    696,
                    665,
                    699,
                    669
                ],
                "enumerate": [
                    1408,
                    1250,
                    2265,
                    1349,
                    1190,
                    968,
                    1738,
                    780,
                    1008,
                    1776,
                    1936,
                    2293,
                    1976,
                    696,
                    665,
                    1147,
                    799
                ],
                "self._validate_key": [
                    1504,
                    1797,
                    2025,
                    2065,
                    1850,
                    669
                ],
                "ValueError": [
                    2189,
                    2067,
                    2068,
                    1181,
                    670,
                    671,
                    803,
                    2086,
                    1838,
                    1072,
                    2101,
                    1084,
                    963,
                    2122,
                    2128,
                    1233,
                    983,
                    1624,
                    2146,
                    1892,
                    1640,
                    885,
                    1918
                ],
                "self._valid_types": [
                    673,
                    2068,
                    1918
                ],
                "any": [
                    1280,
                    801,
                    682,
                    683,
                    1053
                ],
                "self.obj.axes": [
                    2144,
                    770,
                    771,
                    1191,
                    2119,
                    682,
                    683,
                    906,
                    814,
                    1742,
                    1168,
                    1940,
                    731,
                    799
                ],
                "is_nested_tuple": [
                    1843,
                    683,
                    1644
                ],
                "tup": [
                    1280,
                    1408,
                    1305,
                    1314,
                    1321,
                    683,
                    1968,
                    1970,
                    1331,
                    1334,
                    1335,
                    1976,
                    1342,
                    1346,
                    1349,
                    1360,
                    1363,
                    1237,
                    1242,
                    1245,
                    1246,
                    1250,
                    1394,
                    1395,
                    2290,
                    2293,
                    1402,
                    1276
                ],
                "bool": [
                    1667,
                    1923,
                    2311,
                    1429,
                    2076,
                    2337,
                    676,
                    2231,
                    2234,
                    1725,
                    2110,
                    2371,
                    1092,
                    2376,
                    714,
                    2250,
                    717,
                    2140,
                    1258,
                    2283,
                    1521,
                    2301
                ],
                "keyidx": [
                    687,
                    692,
                    694,
                    700,
                    701
                ],
                "keyidx.append": [
                    700,
                    692,
                    694
                ],
                "idx": [
                    896,
                    1152,
                    1154,
                    899,
                    2176,
                    2186,
                    780,
                    781,
                    2188,
                    785,
                    919,
                    920,
                    1188,
                    1195,
                    1196,
                    1204,
                    1206,
                    1209,
                    699,
                    700,
                    833,
                    1120,
                    871,
                    873,
                    1007,
                    1008,
                    884,
                    1147,
                    2174,
                    1151
                ],
                "min": [
                    705,
                    711
                ],
                "ax._convert_scalar_indexer": [
                    707
                ],
                "ax._convert_slice_indexer": [
                    712
                ],
                "dict": [
                    2245,
                    743,
                    781,
                    726,
                    2263,
                    1016,
                    764
                ],
                "IndexError": [
                    740,
                    744,
                    1675,
                    1964,
                    727,
                    1912,
                    1916,
                    2013,
                    2015
                ],
                "_tuplify": [
                    730,
                    2099,
                    853
                ],
                "zip": [
                    2144,
                    771,
                    2119,
                    1305,
                    731,
                    988
                ],
                "is_list_like_indexer": [
                    802,
                    1155,
                    2083,
                    2308,
                    935,
                    1801,
                    1354,
                    2029,
                    879,
                    1647,
                    1906,
                    1276,
                    1081,
                    1722,
                    1212,
                    1661,
                    735
                ],
                "is_integer": [
                    2145,
                    738,
                    773,
                    1609,
                    2121,
                    1900,
                    1005,
                    2127,
                    1937,
                    2035,
                    859
                ],
                "len": [
                    770,
                    1159,
                    1933,
                    1551,
                    1169,
                    1043,
                    1558,
                    919,
                    799,
                    1058,
                    1829,
                    1321,
                    1962,
                    1070,
                    2100,
                    825,
                    1083,
                    962,
                    1346,
                    1735,
                    2383,
                    1619,
                    2389,
                    982,
                    2391,
                    1370,
                    1375,
                    865,
                    739,
                    1770,
                    1004,
                    881,
                    1394,
                    884,
                    1141,
                    1142,
                    1908,
                    1915
                ],
                "self._has_valid_setitem_indexer": [
                    749
                ],
                "info_axis": [
                    871,
                    873,
                    905,
                    906,
                    844,
                    1004,
                    1005,
                    944,
                    1009,
                    754,
                    850,
                    1013,
                    858
                ],
                "self.obj._info_axis_number": [
                    792,
                    754
                ],
                "take_split_path": [
                    775,
                    847,
                    757,
                    761,
                    765
                ],
                "self.obj._is_mixed_type": [
                    757
                ],
                "self.obj._data.blocks": [
                    761,
                    762
                ],
                "self.obj._data": [
                    1088,
                    1062,
                    1030,
                    761,
                    762,
                    826
                ],
                "blk": [
                    762,
                    763,
                    765
                ],
                "blk.ndim": [
                    763
                ],
                "val": [
                    1230,
                    1231,
                    1207,
                    1209,
                    1210,
                    764,
                    765,
                    1215
                ],
                "value.values": [
                    764
                ],
                "blk._can_hold_element": [
                    765
                ],
                "com.is_null_slice": [
                    1120,
                    1152,
                    1410,
                    1251,
                    1380,
                    773,
                    1007,
                    919,
                    1977
                ],
                "nindexer": [
                    833,
                    835,
                    779,
                    830
                ],
                "_": [
                    785,
                    2165,
                    1137
                ],
                "convert_missing_indexer": [
                    785,
                    838
                ],
                "len_non_info_axes": [
                    801,
                    798
                ],
                "_ax": [
                    799
                ],
                "_i": [
                    2265,
                    2263,
                    799
                ],
                "l": [
                    801
                ],
                "_infer_fill_value": [
                    811
                ],
                "new_indexer": [
                    1472,
                    813,
                    816,
                    1052,
                    1053,
                    1054
                ],
                "convert_from_missing_indexer_tuple": [
                    813
                ],
                "index": [
                    896,
                    870,
                    874,
                    2235,
                    2222,
                    2223,
                    1042,
                    1043,
                    2387,
                    2391,
                    824,
                    825,
                    1051,
                    1052
                ],
                "labels": [
                    1793,
                    1794,
                    1807,
                    1694,
                    1695,
                    1835,
                    940,
                    942,
                    1843,
                    1844,
                    825,
                    826,
                    1595,
                    830,
                    962,
                    1862,
                    1863,
                    968,
                    1608,
                    1611,
                    975,
                    1616,
                    977,
                    1618,
                    1619,
                    2383,
                    2386,
                    982,
                    988,
                    861,
                    865,
                    866,
                    993,
                    868,
                    1506,
                    1510,
                    1638,
                    1763,
                    1766,
                    1770,
                    1644,
                    1645,
                    1650,
                    1779,
                    2296,
                    1658
                ],
                "index.insert": [
                    825,
                    1043
                ],
                "_data": [
                    1088,
                    826,
                    1062
                ],
                "self.obj.reindex": [
                    826
                ],
                "self.obj._maybe_update_cacher": [
                    1089,
                    1065,
                    827,
                    1031
                ],
                "self.obj._is_copy": [
                    828
                ],
                "nindexer.append": [
                    833,
                    830
                ],
                "labels.get_loc": [
                    1616,
                    1658,
                    830
                ],
                "missing": [
                    838,
                    840,
                    1555,
                    1557,
                    1558
                ],
                "self._setitem_with_indexer_missing": [
                    841
                ],
                "item_labels": [
                    1013,
                    1011,
                    844,
                    861
                ],
                "ABCSeries": [
                    2274,
                    1092,
                    2222,
                    1809,
                    1074,
                    855,
                    1016,
                    2333
                ],
                "self._align_series": [
                    856,
                    945,
                    1020
                ],
                "info_idx": [
                    858,
                    859,
                    860,
                    861
                ],
                "axes": [
                    866,
                    2263
                ],
                "item": [
                    993,
                    994,
                    931,
                    900,
                    868,
                    869,
                    968,
                    971,
                    910,
                    942,
                    943,
                    944,
                    946,
                    2386,
                    2387,
                    951,
                    988,
                    989
                ],
                "obj.index": [
                    2174,
                    870
                ],
                "plane_indexer": [
                    873,
                    874,
                    905,
                    907,
                    911,
                    975,
                    2383
                ],
                "lplane_indexer": [
                    874,
                    907,
                    975,
                    911,
                    881,
                    2393
                ],
                "length_of_indexer": [
                    874,
                    907
                ],
                "np.iterable": [
                    880,
                    2383
                ],
                "np": [
                    961,
                    2274,
                    2369,
                    2333,
                    2022,
                    2278,
                    1193,
                    2383,
                    880,
                    1809,
                    1907,
                    2195,
                    1109,
                    949,
                    1143,
                    2234,
                    1116,
                    957
                ],
                "ravel": [
                    892,
                    1118
                ],
                "getattr": [
                    1254,
                    1415,
                    1383,
                    935,
                    1468,
                    892,
                    1981
                ],
                "index._convert_slice_indexer": [
                    896
                ],
                "obj._consolidate_inplace": [
                    897
                ],
                "obj.copy": [
                    2048,
                    898,
                    1860
                ],
                "obj._data": [
                    899,
                    2181
                ],
                "obj._data.setitem": [
                    899
                ],
                "plane_axis": [
                    906,
                    907
                ],
                "s": [
                    928,
                    931,
                    910,
                    922,
                    925,
                    926,
                    927
                ],
                "pi": [
                    920,
                    927,
                    918,
                    911
                ],
                "all": [
                    1006,
                    1137,
                    918,
                    1464,
                    1276
                ],
                "com.is_full_slice": [
                    919
                ],
                "v": [
                    945,
                    949,
                    951,
                    922,
                    988,
                    989,
                    927
                ],
                "s._consolidate_inplace": [
                    925
                ],
                "s.copy": [
                    926
                ],
                "s._data": [
                    927
                ],
                "s._data.setitem": [
                    927
                ],
                "s._maybe_update_cacher": [
                    928
                ],
                "ABCDataFrame": [
                    938,
                    1813,
                    1368,
                    1022,
                    1183
                ],
                "sub_indexer": [
                    944,
                    946,
                    939
                ],
                "multiindex_indexer": [
                    946,
                    940,
                    1141
                ],
                "np.nan": [
                    949
                ],
                "setter": [
                    994,
                    971,
                    977,
                    951,
                    989
                ],
                "np.ndim": [
                    957
                ],
                "np.array": [
                    961,
                    1907
                ],
                "object": [
                    961
                ],
                "value.shape": [
                    962
                ],
                "tolist": [
                    971
                ],
                "_can_do_equal_len": [
                    974
                ],
                "maybe_convert_ix": [
                    998
                ],
                "item_labels.is_unique": [
                    1011
                ],
                "Series": [
                    1057,
                    1020,
                    1086
                ],
                "self._align_frame": [
                    1023
                ],
                "self.obj._check_is_chained_assignment_possible": [
                    1026
                ],
                "self.obj._consolidate_inplace": [
                    1029
                ],
                "self.obj._data.setitem": [
                    1030
                ],
                "self.obj.index": [
                    1321,
                    1042,
                    1213
                ],
                "new_index": [
                    1043,
                    1052,
                    1063
                ],
                "index.is_unique": [
                    1051
                ],
                "index.get_indexer": [
                    1052
                ],
                "new_values": [
                    1057,
                    1061,
                    1063
                ],
                "_values": [
                    2231,
                    1057,
                    1162,
                    1230,
                    1138,
                    1171,
                    1207,
                    1209,
                    1179,
                    1215
                ],
                "self.obj._values": [
                    1058,
                    1061
                ],
                "concat_compat": [
                    1061
                ],
                "self.obj._constructor": [
                    1062
                ],
                "self.obj.name": [
                    1063
                ],
                "self.obj.columns": [
                    1086,
                    1083,
                    1076,
                    1070
                ],
                "value.reindex": [
                    1076
                ],
                "value.name": [
                    1077
                ],
                "self.obj.append": [
                    1088
                ],
                "np.ndarray": [
                    2274,
                    1193,
                    1809,
                    2195,
                    1109,
                    1116,
                    2333
                ],
                "Index": [
                    2274,
                    1156,
                    1158,
                    2195,
                    1109,
                    2333,
                    1885
                ],
                "i.ravel": [
                    1116
                ],
                "map": [
                    1118
                ],
                "aligners": [
                    1120,
                    1121,
                    1133
                ],
                "sum_aligners": [
                    1121,
                    1122,
                    1137
                ],
                "sum": [
                    1121,
                    1555
                ],
                "single_aligner": [
                    1152,
                    1122,
                    1133,
                    1165
                ],
                "is_frame": [
                    1184,
                    1212,
                    1123,
                    1132
                ],
                "is_sequence": [
                    1192,
                    1137,
                    1151
                ],
                "ser": [
                    1177,
                    1159,
                    1160,
                    1162,
                    1169,
                    1138,
                    1170,
                    1171,
                    1143,
                    1176,
                    1145,
                    1179
                ],
                "ser.reindex": [
                    1138,
                    1171,
                    1179,
                    1162
                ],
                "obj.axes": [
                    1138,
                    1148
                ],
                "len_indexer": [
                    1142,
                    1143
                ],
                "T": [
                    1143
                ],
                "reshape": [
                    1143
                ],
                "np.tile": [
                    1143
                ],
                "new_ix": [
                    1154,
                    1155,
                    1156,
                    1158,
                    1159,
                    1162
                ],
                "ser.index.equals": [
                    1176,
                    1169,
                    1159
                ],
                "ser.index": [
                    1176,
                    1169,
                    1159
                ],
                "ser._values.copy": [
                    1160,
                    1177,
                    1170
                ],
                "ser._values": [
                    1160,
                    1177,
                    1170
                ],
                "is_scalar": [
                    1611,
                    1419,
                    1739,
                    2383,
                    1173
                ],
                "cols": [
                    1188,
                    1197,
                    1198,
                    1204,
                    1206,
                    1209
                ],
                "sindexers": [
                    1202,
                    1189
                ],
                "ix": [
                    1190,
                    1192,
                    1193,
                    1194,
                    1196,
                    1198
                ],
                "ix.ravel": [
                    1194
                ],
                "sindexers.append": [
                    1202
                ],
                "df.index.equals": [
                    1214,
                    1206
                ],
                "df.index": [
                    1214,
                    1222,
                    1206,
                    1223
                ],
                "df": [
                    2372,
                    1222,
                    1223,
                    1230,
                    1206,
                    1207,
                    1209,
                    1214,
                    1215
                ],
                "df.columns.equals": [
                    1206
                ],
                "df.columns": [
                    1206
                ],
                "df.copy": [
                    1215,
                    1207
                ],
                "df.reindex": [
                    1209,
                    1230
                ],
                "ax.nlevels": [
                    1223
                ],
                "df.index.nlevels": [
                    1223
                ],
                "self._getitem_lowerdim": [
                    1970,
                    1237
                ],
                "self._has_valid_tuple": [
                    1968,
                    1242
                ],
                "self._multi_take_opportunity": [
                    1245
                ],
                "self._multi_take": [
                    1246
                ],
                "retval": [
                    1984,
                    1249,
                    1254,
                    1256,
                    1992,
                    1974,
                    1981
                ],
                "_getitem_axis": [
                    1981,
                    1254,
                    1415
                ],
                "com.is_bool_indexer": [
                    1280,
                    1508,
                    1799,
                    2024,
                    1649,
                    1719,
                    1884
                ],
                "o": [
                    1457,
                    1458,
                    1302,
                    1305,
                    1307
                ],
                "d": [
                    1307,
                    1303
                ],
                "self._get_listlike_indexer": [
                    1304,
                    1515,
                    1655
                ],
                "o._AXIS_ORDERS": [
                    1305
                ],
                "o._reindex_with_indexers": [
                    1307
                ],
                "self._get_label": [
                    1314,
                    1851
                ],
                "self.obj.index.nlevels": [
                    1321
                ],
                "ek": [
                    1322
                ],
                "self._getitem_axis": [
                    1402,
                    1331,
                    1684,
                    1351
                ],
                "self._is_nested_tuple_indexer": [
                    1334
                ],
                "self._getitem_nested_tuple": [
                    1335
                ],
                "ax0": [
                    1338,
                    1341
                ],
                "result": [
                    1344,
                    2221,
                    2223,
                    2224,
                    1395,
                    1396,
                    1397,
                    2231,
                    2234,
                    2235,
                    2237,
                    1342,
                    1343
                ],
                "self._handle_lowerdim_multi_index_axis0": [
                    1395,
                    1342
                ],
                "is_label_like": [
                    1350
                ],
                "section": [
                    1381,
                    1351,
                    1383,
                    1354,
                    1355,
                    1357,
                    1368
                ],
                "section.ndim": [
                    1357
                ],
                "new_key": [
                    1376,
                    1380,
                    1383,
                    1775,
                    1360,
                    1363,
                    1781,
                    1783,
                    1784,
                    1370,
                    1372,
                    1373,
                    1375
                ],
                "a": [
                    2144,
                    1372,
                    1373
                ],
                "b": [
                    1372,
                    1373
                ],
                "current_ndim": [
                    1424,
                    1414
                ],
                "obj.ndim": [
                    1424,
                    1414
                ],
                "hasattr": [
                    1419,
                    1820,
                    1837,
                    1885
                ],
                "o._get_axis": [
                    1458
                ],
                "keyarr": [
                    1472,
                    1474,
                    1475,
                    1515,
                    1517,
                    1462,
                    1470
                ],
                "ax._convert_listlike_indexer": [
                    1462
                ],
                "self._validate_read_indexer": [
                    1465,
                    1474
                ],
                "raise_missing": [
                    1465,
                    1474,
                    1564
                ],
                "ax.is_unique": [
                    1468,
                    1941,
                    1751
                ],
                "ax.get_indexer_for": [
                    1469
                ],
                "ax.reindex": [
                    1470
                ],
                "ax._reindex_non_unique": [
                    1472
                ],
                "check_bool_indexer": [
                    1650,
                    1510,
                    1695
                ],
                "inds": [
                    1696,
                    1697,
                    1511,
                    1512,
                    1651,
                    1652
                ],
                "key.nonzero": [
                    1696,
                    1651,
                    1511
                ],
                "self.obj._take_with_is_copy": [
                    1512,
                    1697,
                    2012
                ],
                "self.obj._reindex_with_indexers": [
                    1516
                ],
                "axis_name": [
                    1560,
                    1559
                ],
                "self.obj._get_axis_name": [
                    1559
                ],
                "not_found": [
                    1565,
                    1566
                ],
                "set": [
                    1565
                ],
                "ax.is_categorical": [
                    1573
                ],
                "ax.is_interval": [
                    1573
                ],
                "self._convert_slice_indexer": [
                    2050,
                    2059,
                    1598
                ],
                "self._convert_scalar_indexer": [
                    1602,
                    1723,
                    2062
                ],
                "is_int_index": [
                    1608,
                    1609
                ],
                "labels.is_integer": [
                    1608
                ],
                "is_int_positional": [
                    1625,
                    1609,
                    1629
                ],
                "LookupError": [
                    1617,
                    1659
                ],
                "labels.nlevels": [
                    1619
                ],
                "self.obj.shape": [
                    1638
                ],
                "labels.get_locs": [
                    1844,
                    1645
                ],
                "_NDFrameIndexer": [
                    1666,
                    1708
                ],
                "_takeable": [
                    1881,
                    2138,
                    1667,
                    2108
                ],
                "self._is_scalar_access": [
                    1672
                ],
                "self.obj._get_value": [
                    2089,
                    1674
                ],
                "self._takeable": [
                    2089,
                    1674,
                    2103
                ],
                "AttributeError": [
                    1675
                ],
                "self._getitem_tuple": [
                    1678
                ],
                "maybe_callable": [
                    1683,
                    1684
                ],
                "NotImplementedError": [
                    1687,
                    2189,
                    1815,
                    1690,
                    1821,
                    1887
                ],
                "_LocationIndexer": [
                    1876,
                    1701
                ],
                "Appender": [
                    1700,
                    1708,
                    1875,
                    2136,
                    2106
                ],
                "_NDFrameIndexer._validate_key.__doc__": [
                    1708
                ],
                "_NDFrameIndexer._validate_key": [
                    1708
                ],
                "ax._supports_partial_string_indexing": [
                    1746
                ],
                "_supports_partial_string_indexing": [
                    1779,
                    1766
                ],
                "labels.levels": [
                    1770,
                    1779,
                    1766
                ],
                "component": [
                    1776,
                    1778,
                    1781,
                    1783
                ],
                "new_key.append": [
                    1781,
                    1783
                ],
                "item_from_zerodim": [
                    2034,
                    1789
                ],
                "is_iterator": [
                    1790
                ],
                "self._get_partial_string_timestamp_match_key": [
                    1794
                ],
                "self._get_slice_axis": [
                    2019,
                    1798
                ],
                "self._getbool_axis": [
                    1800,
                    2026
                ],
                "key.ndim": [
                    1809,
                    1820,
                    1837
                ],
                "self._getitem_iterable": [
                    1840
                ],
                "locs": [
                    1844,
                    1846
                ],
                "self.obj.iloc": [
                    1847
                ],
                "need_slice": [
                    1859,
                    2047
                ],
                "slice_obj": [
                    1864,
                    2050,
                    1859,
                    2047
                ],
                "obj._get_axis": [
                    1862
                ],
                "labels.slice_indexer": [
                    1863
                ],
                "slice_obj.start": [
                    1864
                ],
                "slice_obj.stop": [
                    1864
                ],
                "slice_obj.step": [
                    1864
                ],
                "self._slice": [
                    2051,
                    1868
                ],
                "self.obj.take": [
                    1872
                ],
                "IndexingMixin.loc.__doc__": [
                    1700
                ],
                "IndexingMixin.loc": [
                    1700
                ],
                "IndexingMixin": [
                    2136,
                    2106,
                    1875,
                    1700
                ],
                "key.index": [
                    2222,
                    1885,
                    1886
                ],
                "key.index.inferred_type": [
                    1886
                ],
                "self._validate_integer": [
                    1901,
                    2039
                ],
                "arr": [
                    1912,
                    1915,
                    1907,
                    1911
                ],
                "len_axis": [
                    1962,
                    1915,
                    1908,
                    1963
                ],
                "is_numeric_dtype": [
                    1911
                ],
                "arr.dtype": [
                    1911
                ],
                "arr.max": [
                    1915
                ],
                "arr.min": [
                    1915
                ],
                "self._has_valid_positional_setitem_indexer": [
                    1921
                ],
                "retval.ndim": [
                    1984
                ],
                "np.asarray": [
                    2234,
                    2022
                ],
                "self._get_list_axis": [
                    2030
                ],
                "self._get_loc": [
                    2041
                ],
                "is_float": [
                    2061
                ],
                "IndexingMixin.iloc.__doc__": [
                    1875
                ],
                "IndexingMixin.iloc": [
                    1875
                ],
                "self._convert_key": [
                    2088,
                    2102
                ],
                "self.obj._set_value": [
                    2103
                ],
                "_ScalarAccessIndexer": [
                    2137,
                    2107
                ],
                "is_setter": [
                    2116
                ],
                "ax.is_integer": [
                    2120
                ],
                "ax.holds_integer": [
                    2127
                ],
                "IndexingMixin.at.__doc__": [
                    2106
                ],
                "IndexingMixin.at": [
                    2106
                ],
                "IndexingMixin.iat.__doc__": [
                    2136
                ],
                "IndexingMixin.iat": [
                    2136
                ],
                "Hashable": [
                    2164,
                    2150
                ],
                "_tup": [
                    2164,
                    2165,
                    2166,
                    2167
                ],
                "List": [
                    2164
                ],
                "Union": [
                    2164,
                    2150
                ],
                "ndim": [
                    2165
                ],
                "loc": [
                    2166
                ],
                "idx._convert_slice_indexer": [
                    2176
                ],
                "obj._data.items": [
                    2181
                ],
                "idx._supports_partial_string_indexing": [
                    2186
                ],
                "idx._get_string_slice": [
                    2188
                ],
                "key.index.equals": [
                    2222
                ],
                "result.reindex": [
                    2223
                ],
                "mask": [
                    2224,
                    2225
                ],
                "isna": [
                    2224
                ],
                "result._values": [
                    2224
                ],
                "mask.any": [
                    2225
                ],
                "result.astype": [
                    2231
                ],
                "check_array_indexer": [
                    2235
                ],
                "_idx": [
                    2265,
                    2263
                ],
                "get_loc": [
                    2263
                ],
                "get_indexer": [
                    2265
                ],
                "ixify": [
                    2272,
                    2275,
                    2277
                ],
                "args": [
                    2280,
                    2273,
                    2278
                ],
                "np.ix_": [
                    2278
                ],
                "is_list_like": [
                    2347,
                    2351,
                    2295
                ],
                "obj.start": [
                    2318
                ],
                "obj.stop": [
                    2319
                ],
                "obj.step": [
                    2320
                ],
                "kinds": [
                    2333,
                    2334
                ],
                "slice_": [
                    2368,
                    2372,
                    2373,
                    2351,
                    2352,
                    2354,
                    2357,
                    2359,
                    2360,
                    2334,
                    2335
                ],
                "part": [
                    2347,
                    2348,
                    2359
                ],
                "pred": [
                    2359
                ],
                "dtypes": [
                    2369,
                    2371,
                    2372
                ],
                "np.number": [
                    2369
                ],
                "include_bool": [
                    2370
                ],
                "dtypes.append": [
                    2371
                ],
                "columns": [
                    2372
                ],
                "df.select_dtypes": [
                    2372
                ],
                "values_len": [
                    2393,
                    2389,
                    2391
                ]
            },
            "filtered_variables_in_file": {
                "_NS": [
                    1360,
                    33
                ],
                "arg": [
                    2273,
                    2274,
                    79
                ],
                "IndexSlice": [
                    82,
                    2372,
                    2335
                ],
                "_IndexSlice": [
                    82
                ],
                "_iLocIndexer": [
                    229
                ],
                "self": [
                    1026,
                    2050,
                    2051,
                    1029,
                    518,
                    1030,
                    1031,
                    2059,
                    1549,
                    2062,
                    1041,
                    1042,
                    2065,
                    2068,
                    1559,
                    1564,
                    2077,
                    1054,
                    1058,
                    1061,
                    1062,
                    1063,
                    2088,
                    1065,
                    1066,
                    2089,
                    1068,
                    2093,
                    1070,
                    2096,
                    2099,
                    1076,
                    2100,
                    566,
                    2102,
                    2103,
                    1083,
                    1595,
                    1086,
                    575,
                    1088,
                    1089,
                    578,
                    1090,
                    1598,
                    1602,
                    583,
                    2119,
                    588,
                    592,
                    595,
                    598,
                    601,
                    602,
                    604,
                    606,
                    2144,
                    1634,
                    1123,
                    1124,
                    1638,
                    615,
                    623,
                    1137,
                    1655,
                    633,
                    635,
                    636,
                    637,
                    1671,
                    1672,
                    1674,
                    1678,
                    1168,
                    1681,
                    659,
                    1683,
                    1684,
                    1174,
                    666,
                    669,
                    1694,
                    1184,
                    673,
                    1697,
                    1191,
                    682,
                    683,
                    688,
                    689,
                    690,
                    692,
                    697,
                    699,
                    1723,
                    1213,
                    705,
                    707,
                    711,
                    712,
                    1735,
                    1742,
                    1237,
                    727,
                    730,
                    731,
                    1242,
                    1245,
                    1246,
                    1249,
                    229,
                    741,
                    1254,
                    744,
                    749,
                    754,
                    757,
                    761,
                    762,
                    1793,
                    770,
                    771,
                    1794,
                    1797,
                    1798,
                    1800,
                    1302,
                    792,
                    1304,
                    799,
                    1311,
                    1314,
                    807,
                    808,
                    1321,
                    811,
                    814,
                    816,
                    1329,
                    818,
                    1330,
                    1331,
                    1840,
                    1334,
                    1335,
                    824,
                    1845,
                    826,
                    827,
                    828,
                    1338,
                    1341,
                    1342,
                    1847,
                    1850,
                    1346,
                    1851,
                    1858,
                    1351,
                    1864,
                    841,
                    844,
                    1357,
                    1868,
                    1872,
                    849,
                    853,
                    856,
                    866,
                    869,
                    1383,
                    1901,
                    1394,
                    1395,
                    1908,
                    1401,
                    1402,
                    1406,
                    1918,
                    1921,
                    900,
                    1415,
                    906,
                    1933,
                    910,
                    1940,
                    919,
                    931,
                    1962,
                    1968,
                    945,
                    1457,
                    1970,
                    1462,
                    1974,
                    1465,
                    1981,
                    1984,
                    1474,
                    975,
                    469,
                    2012,
                    1504,
                    1506,
                    2019,
                    1512,
                    2025,
                    2026,
                    1515,
                    1516,
                    2030,
                    1013,
                    2039,
                    2041,
                    1020,
                    2045,
                    1023
                ],
                "_LocIndexer": [
                    469
                ],
                "_AtIndexer": [
                    518
                ],
                "_iAtIndexer": [
                    566
                ],
                "_NDFrameIndexerBase": [
                    569,
                    2071
                ],
                "_valid_types": [
                    570,
                    1877,
                    1702
                ],
                "axis": [
                    2050,
                    2051,
                    2059,
                    1549,
                    2062,
                    2065,
                    1559,
                    571,
                    1595,
                    1598,
                    577,
                    578,
                    579,
                    1602,
                    588,
                    589,
                    592,
                    595,
                    598,
                    1638,
                    1655,
                    1681,
                    1684,
                    1694,
                    1697,
                    689,
                    691,
                    692,
                    1723,
                    705,
                    711,
                    1793,
                    1797,
                    1798,
                    1800,
                    1304,
                    1305,
                    1311,
                    1314,
                    1840,
                    1330,
                    1331,
                    1846,
                    1850,
                    1851,
                    1862,
                    1868,
                    1872,
                    1901,
                    1908,
                    1401,
                    1402,
                    1407,
                    1411,
                    1415,
                    1416,
                    1425,
                    1962,
                    1458,
                    1975,
                    1465,
                    1978,
                    1981,
                    1474,
                    1987,
                    1990,
                    2012,
                    1504,
                    1506,
                    2019,
                    1512,
                    2025,
                    2026,
                    1515,
                    1517,
                    2030,
                    2039,
                    2041
                ],
                "new_self": [
                    579,
                    580,
                    575
                ],
                "self.name": [
                    1634,
                    707,
                    741,
                    1254,
                    1383,
                    712,
                    744,
                    1415,
                    1864,
                    1981,
                    1462,
                    727,
                    1564,
                    1341,
                    606,
                    575
                ],
                "self.obj": [
                    1026,
                    1029,
                    1030,
                    1031,
                    1549,
                    1042,
                    1559,
                    1058,
                    1061,
                    1062,
                    1063,
                    1065,
                    1066,
                    2089,
                    2093,
                    1070,
                    2096,
                    1076,
                    2103,
                    1083,
                    1595,
                    1086,
                    575,
                    1088,
                    1089,
                    578,
                    1090,
                    2119,
                    588,
                    592,
                    595,
                    598,
                    604,
                    2144,
                    1124,
                    1638,
                    633,
                    635,
                    1671,
                    1674,
                    1168,
                    1683,
                    1174,
                    1694,
                    1697,
                    1191,
                    682,
                    683,
                    689,
                    1213,
                    705,
                    711,
                    1742,
                    731,
                    1249,
                    754,
                    757,
                    761,
                    762,
                    1793,
                    770,
                    771,
                    1302,
                    792,
                    799,
                    807,
                    808,
                    1321,
                    811,
                    814,
                    818,
                    1330,
                    1847,
                    824,
                    826,
                    827,
                    828,
                    1338,
                    1858,
                    844,
                    1872,
                    866,
                    869,
                    1908,
                    1406,
                    900,
                    906,
                    910,
                    1940,
                    919,
                    931,
                    1962,
                    1457,
                    1974,
                    975,
                    2012,
                    1506,
                    1512,
                    1516,
                    1013,
                    2045
                ],
                "self.obj._get_axis_number": [
                    689,
                    578,
                    1330
                ],
                "new_self.axis": [
                    579
                ],
                "self.ndim": [
                    1933,
                    1041,
                    792,
                    666,
                    1184,
                    1321,
                    1068,
                    690,
                    2099,
                    2100,
                    1845,
                    697,
                    1984,
                    705,
                    1346,
                    583,
                    711,
                    1735,
                    1357,
                    849,
                    853,
                    730,
                    1123,
                    1137,
                    1394
                ],
                "self.obj._xs": [
                    592,
                    588
                ],
                "label": [
                    592,
                    588,
                    589
                ],
                "IndexingError": [
                    1347,
                    616,
                    1385,
                    590,
                    1905,
                    2226,
                    1971,
                    629,
                    1238,
                    698,
                    667
                ],
                "self.obj._ixs": [
                    595
                ],
                "key": [
                    2058,
                    2059,
                    2061,
                    2062,
                    1551,
                    2065,
                    2066,
                    1560,
                    1565,
                    2080,
                    2083,
                    2084,
                    2088,
                    2089,
                    2092,
                    2093,
                    2096,
                    2098,
                    2099,
                    2100,
                    2102,
                    2103,
                    1597,
                    1598,
                    1602,
                    2117,
                    2119,
                    1609,
                    1611,
                    1616,
                    1618,
                    595,
                    1619,
                    1620,
                    2133,
                    602,
                    608,
                    2144,
                    2147,
                    1636,
                    613,
                    1638,
                    615,
                    1642,
                    619,
                    620,
                    1644,
                    1645,
                    623,
                    1647,
                    1649,
                    1650,
                    1651,
                    629,
                    1655,
                    632,
                    633,
                    1658,
                    635,
                    636,
                    1661,
                    1662,
                    2175,
                    2176,
                    2178,
                    2181,
                    1670,
                    1671,
                    1672,
                    1674,
                    2188,
                    1678,
                    1683,
                    665,
                    1695,
                    1696,
                    2221,
                    2222,
                    692,
                    1716,
                    1719,
                    696,
                    1722,
                    1723,
                    707,
                    1735,
                    712,
                    1738,
                    1250,
                    1251,
                    1765,
                    1254,
                    1770,
                    1772,
                    1776,
                    1784,
                    1786,
                    1789,
                    1790,
                    1791,
                    1794,
                    1796,
                    1797,
                    1798,
                    1799,
                    1800,
                    1801,
                    2308,
                    785,
                    1809,
                    1812,
                    1813,
                    1304,
                    1305,
                    1820,
                    1828,
                    1829,
                    1830,
                    807,
                    1832,
                    811,
                    1835,
                    1837,
                    1840,
                    1843,
                    1844,
                    825,
                    1850,
                    1851,
                    830,
                    1349,
                    1350,
                    1351,
                    1884,
                    1885,
                    1886,
                    1898,
                    1900,
                    1901,
                    1902,
                    1906,
                    1907,
                    1408,
                    1410,
                    1415,
                    1933,
                    1936,
                    1963,
                    1462,
                    1976,
                    1465,
                    1977,
                    1469,
                    1981,
                    2012,
                    1504,
                    2018,
                    2019,
                    1508,
                    2021,
                    1510,
                    1511,
                    2022,
                    2024,
                    2025,
                    1515,
                    2026,
                    2029,
                    2030,
                    2034,
                    2035,
                    2039,
                    2041
                ],
                "self.obj._slice": [
                    598
                ],
                "obj": [
                    2048,
                    897,
                    898,
                    899,
                    900,
                    2181,
                    1414,
                    1415,
                    1419,
                    2318,
                    2319,
                    1424,
                    2320,
                    1427,
                    2174,
                    1858,
                    1860,
                    1862,
                    2387,
                    598,
                    1124,
                    869,
                    870,
                    1138,
                    884,
                    1148,
                    2045,
                    1406
                ],
                "kind": [
                    598
                ],
                "self.axis": [
                    1401,
                    688,
                    689,
                    1329,
                    1330,
                    1681,
                    601,
                    1311
                ],
                "self._convert_tuple": [
                    602,
                    615
                ],
                "ax": [
                    1154,
                    771,
                    772,
                    1549,
                    1168,
                    1169,
                    1171,
                    1940,
                    1941,
                    1174,
                    1176,
                    1179,
                    1565,
                    1573,
                    1191,
                    682,
                    683,
                    1196,
                    1198,
                    1458,
                    1462,
                    1466,
                    1468,
                    1213,
                    1214,
                    1469,
                    1470,
                    705,
                    1472,
                    707,
                    1221,
                    711,
                    712,
                    1223,
                    2119,
                    2120,
                    1230,
                    1742,
                    1743,
                    2127,
                    1746,
                    1751,
                    731,
                    604,
                    606,
                    608,
                    739,
                    1148
                ],
                "self.obj._get_axis": [
                    705,
                    1506,
                    1793,
                    711,
                    1962,
                    844,
                    1549,
                    1908,
                    1174,
                    824,
                    1338,
                    1595,
                    604,
                    1694
                ],
                "ABCMultiIndex": [
                    866,
                    1763,
                    772,
                    1221,
                    1222,
                    1638,
                    682,
                    1611,
                    940,
                    1835,
                    1743,
                    1807,
                    1618,
                    2296,
                    1341,
                    606
                ],
                "ax.get_loc": [
                    608
                ],
                "InvalidIndexError": [
                    609
                ],
                "self._convert_to_indexer": [
                    699,
                    692,
                    623
                ],
                "e": [
                    627
                ],
                "com.apply_if_callable": [
                    1671,
                    2093,
                    2096,
                    1683,
                    633,
                    635
                ],
                "com": [
                    1152,
                    1280,
                    1410,
                    773,
                    1671,
                    1799,
                    1683,
                    919,
                    2093,
                    2096,
                    1719,
                    1977,
                    1884,
                    1120,
                    1251,
                    1380,
                    1508,
                    2024,
                    1007,
                    1649,
                    633,
                    635
                ],
                "x": [
                    1280,
                    1671,
                    2093,
                    633,
                    1276
                ],
                "indexer": [
                    2050,
                    2051,
                    1030,
                    1043,
                    1555,
                    1558,
                    1077,
                    1086,
                    1109,
                    1110,
                    1112,
                    1118,
                    1120,
                    1137,
                    1138,
                    1141,
                    1142,
                    1147,
                    636,
                    637,
                    1173,
                    1186,
                    1190,
                    1212,
                    1213,
                    2245,
                    2248,
                    2250,
                    2252,
                    2254,
                    726,
                    729,
                    730,
                    731,
                    2265,
                    749,
                    770,
                    771,
                    778,
                    780,
                    814,
                    1845,
                    1846,
                    1847,
                    835,
                    838,
                    1863,
                    841,
                    1867,
                    1868,
                    1872,
                    852,
                    853,
                    856,
                    858,
                    871,
                    873,
                    1921,
                    905,
                    939,
                    1462,
                    1464,
                    1465,
                    1466,
                    1469,
                    1472,
                    1474,
                    1475,
                    997,
                    998,
                    1515,
                    1004,
                    1005,
                    1517,
                    1008,
                    1013,
                    1020,
                    1023
                ],
                "self._get_setitem_indexer": [
                    636
                ],
                "self._setitem_with_indexer": [
                    816,
                    637,
                    1054
                ],
                "value": [
                    899,
                    764,
                    1030,
                    1020,
                    1054,
                    1057,
                    802,
                    807,
                    935,
                    938,
                    811,
                    943,
                    816,
                    946,
                    1074,
                    1076,
                    1077,
                    2103,
                    1081,
                    1083,
                    957,
                    1086,
                    1088,
                    961,
                    962,
                    841,
                    971,
                    975,
                    2383,
                    977,
                    2389,
                    982,
                    855,
                    856,
                    988,
                    994,
                    879,
                    880,
                    881,
                    884,
                    1013,
                    1016,
                    892,
                    637,
                    1022,
                    1023
                ],
                "AbstractMethodError": [
                    659,
                    2077
                ],
                "Tuple": [
                    1923,
                    676,
                    1285,
                    2150,
                    1725,
                    1258,
                    1387,
                    1326,
                    1966,
                    1235,
                    661,
                    1686,
                    1309
                ],
                "i": [
                    1408,
                    771,
                    773,
                    780,
                    1936,
                    1940,
                    792,
                    665,
                    666,
                    669,
                    799,
                    1190,
                    1191,
                    690,
                    691,
                    1202,
                    696,
                    697,
                    824,
                    699,
                    826,
                    1976,
                    1349,
                    1351,
                    968,
                    2119,
                    1738,
                    971,
                    2121,
                    1742,
                    2127,
                    1360,
                    1363,
                    1369,
                    731,
                    732,
                    1116,
                    735,
                    2144,
                    2145,
                    738,
                    739,
                    1250,
                    1254,
                    743,
                    1008,
                    1009,
                    1776,
                    1779,
                    2293,
                    1147,
                    1148
                ],
                "k": [
                    1738,
                    1739,
                    1936,
                    1937,
                    1746,
                    2293,
                    2295,
                    696,
                    665,
                    699,
                    669
                ],
                "self._validate_key": [
                    1504,
                    1797,
                    2025,
                    2065,
                    1850,
                    669
                ],
                "self._valid_types": [
                    673,
                    2068,
                    1918
                ],
                "self.obj.axes": [
                    2144,
                    770,
                    771,
                    1191,
                    2119,
                    682,
                    683,
                    906,
                    814,
                    1742,
                    1168,
                    1940,
                    731,
                    799
                ],
                "is_nested_tuple": [
                    1843,
                    683,
                    1644
                ],
                "tup": [
                    1280,
                    1408,
                    1305,
                    1314,
                    1321,
                    683,
                    1968,
                    1970,
                    1331,
                    1334,
                    1335,
                    1976,
                    1342,
                    1346,
                    1349,
                    1360,
                    1363,
                    1237,
                    1242,
                    1245,
                    1246,
                    1250,
                    1394,
                    1395,
                    2290,
                    2293,
                    1402,
                    1276
                ],
                "keyidx": [
                    687,
                    692,
                    694,
                    700,
                    701
                ],
                "keyidx.append": [
                    700,
                    692,
                    694
                ],
                "idx": [
                    896,
                    1152,
                    1154,
                    899,
                    2176,
                    2186,
                    780,
                    781,
                    2188,
                    785,
                    919,
                    920,
                    1188,
                    1195,
                    1196,
                    1204,
                    1206,
                    1209,
                    699,
                    700,
                    833,
                    1120,
                    871,
                    873,
                    1007,
                    1008,
                    884,
                    1147,
                    2174,
                    1151
                ],
                "ax._convert_scalar_indexer": [
                    707
                ],
                "ax._convert_slice_indexer": [
                    712
                ],
                "_tuplify": [
                    730,
                    2099,
                    853
                ],
                "is_list_like_indexer": [
                    802,
                    1155,
                    2083,
                    2308,
                    935,
                    1801,
                    1354,
                    2029,
                    879,
                    1647,
                    1906,
                    1276,
                    1081,
                    1722,
                    1212,
                    1661,
                    735
                ],
                "is_integer": [
                    2145,
                    738,
                    773,
                    1609,
                    2121,
                    1900,
                    1005,
                    2127,
                    1937,
                    2035,
                    859
                ],
                "self._has_valid_setitem_indexer": [
                    749
                ],
                "info_axis": [
                    871,
                    873,
                    905,
                    906,
                    844,
                    1004,
                    1005,
                    944,
                    1009,
                    754,
                    850,
                    1013,
                    858
                ],
                "self.obj._info_axis_number": [
                    792,
                    754
                ],
                "take_split_path": [
                    775,
                    847,
                    757,
                    761,
                    765
                ],
                "self.obj._is_mixed_type": [
                    757
                ],
                "self.obj._data.blocks": [
                    761,
                    762
                ],
                "self.obj._data": [
                    1088,
                    1062,
                    1030,
                    761,
                    762,
                    826
                ],
                "blk": [
                    762,
                    763,
                    765
                ],
                "blk.ndim": [
                    763
                ],
                "val": [
                    1230,
                    1231,
                    1207,
                    1209,
                    1210,
                    764,
                    765,
                    1215
                ],
                "value.values": [
                    764
                ],
                "blk._can_hold_element": [
                    765
                ],
                "com.is_null_slice": [
                    1120,
                    1152,
                    1410,
                    1251,
                    1380,
                    773,
                    1007,
                    919,
                    1977
                ],
                "nindexer": [
                    833,
                    835,
                    779,
                    830
                ],
                "_": [
                    785,
                    2165,
                    1137
                ],
                "convert_missing_indexer": [
                    785,
                    838
                ],
                "len_non_info_axes": [
                    801,
                    798
                ],
                "_ax": [
                    799
                ],
                "_i": [
                    2265,
                    2263,
                    799
                ],
                "l": [
                    801
                ],
                "_infer_fill_value": [
                    811
                ],
                "new_indexer": [
                    1472,
                    813,
                    816,
                    1052,
                    1053,
                    1054
                ],
                "convert_from_missing_indexer_tuple": [
                    813
                ],
                "index": [
                    896,
                    870,
                    874,
                    2235,
                    2222,
                    2223,
                    1042,
                    1043,
                    2387,
                    2391,
                    824,
                    825,
                    1051,
                    1052
                ],
                "labels": [
                    1793,
                    1794,
                    1807,
                    1694,
                    1695,
                    1835,
                    940,
                    942,
                    1843,
                    1844,
                    825,
                    826,
                    1595,
                    830,
                    962,
                    1862,
                    1863,
                    968,
                    1608,
                    1611,
                    975,
                    1616,
                    977,
                    1618,
                    1619,
                    2383,
                    2386,
                    982,
                    988,
                    861,
                    865,
                    866,
                    993,
                    868,
                    1506,
                    1510,
                    1638,
                    1763,
                    1766,
                    1770,
                    1644,
                    1645,
                    1650,
                    1779,
                    2296,
                    1658
                ],
                "index.insert": [
                    825,
                    1043
                ],
                "_data": [
                    1088,
                    826,
                    1062
                ],
                "self.obj.reindex": [
                    826
                ],
                "self.obj._maybe_update_cacher": [
                    1089,
                    1065,
                    827,
                    1031
                ],
                "self.obj._is_copy": [
                    828
                ],
                "nindexer.append": [
                    833,
                    830
                ],
                "labels.get_loc": [
                    1616,
                    1658,
                    830
                ],
                "missing": [
                    838,
                    840,
                    1555,
                    1557,
                    1558
                ],
                "self._setitem_with_indexer_missing": [
                    841
                ],
                "item_labels": [
                    1013,
                    1011,
                    844,
                    861
                ],
                "ABCSeries": [
                    2274,
                    1092,
                    2222,
                    1809,
                    1074,
                    855,
                    1016,
                    2333
                ],
                "self._align_series": [
                    856,
                    945,
                    1020
                ],
                "info_idx": [
                    858,
                    859,
                    860,
                    861
                ],
                "axes": [
                    866,
                    2263
                ],
                "item": [
                    993,
                    994,
                    931,
                    900,
                    868,
                    869,
                    968,
                    971,
                    910,
                    942,
                    943,
                    944,
                    946,
                    2386,
                    2387,
                    951,
                    988,
                    989
                ],
                "obj.index": [
                    2174,
                    870
                ],
                "plane_indexer": [
                    873,
                    874,
                    905,
                    907,
                    911,
                    975,
                    2383
                ],
                "lplane_indexer": [
                    874,
                    907,
                    975,
                    911,
                    881,
                    2393
                ],
                "length_of_indexer": [
                    874,
                    907
                ],
                "np.iterable": [
                    880,
                    2383
                ],
                "np": [
                    961,
                    2274,
                    2369,
                    2333,
                    2022,
                    2278,
                    1193,
                    2383,
                    880,
                    1809,
                    1907,
                    2195,
                    1109,
                    949,
                    1143,
                    2234,
                    1116,
                    957
                ],
                "ravel": [
                    892,
                    1118
                ],
                "index._convert_slice_indexer": [
                    896
                ],
                "obj._consolidate_inplace": [
                    897
                ],
                "obj.copy": [
                    2048,
                    898,
                    1860
                ],
                "obj._data": [
                    899,
                    2181
                ],
                "obj._data.setitem": [
                    899
                ],
                "plane_axis": [
                    906,
                    907
                ],
                "s": [
                    928,
                    931,
                    910,
                    922,
                    925,
                    926,
                    927
                ],
                "pi": [
                    920,
                    927,
                    918,
                    911
                ],
                "com.is_full_slice": [
                    919
                ],
                "v": [
                    945,
                    949,
                    951,
                    922,
                    988,
                    989,
                    927
                ],
                "s._consolidate_inplace": [
                    925
                ],
                "s.copy": [
                    926
                ],
                "s._data": [
                    927
                ],
                "s._data.setitem": [
                    927
                ],
                "s._maybe_update_cacher": [
                    928
                ],
                "ABCDataFrame": [
                    938,
                    1813,
                    1368,
                    1022,
                    1183
                ],
                "sub_indexer": [
                    944,
                    946,
                    939
                ],
                "multiindex_indexer": [
                    946,
                    940,
                    1141
                ],
                "np.nan": [
                    949
                ],
                "setter": [
                    994,
                    971,
                    977,
                    951,
                    989
                ],
                "np.ndim": [
                    957
                ],
                "np.array": [
                    961,
                    1907
                ],
                "value.shape": [
                    962
                ],
                "tolist": [
                    971
                ],
                "_can_do_equal_len": [
                    974
                ],
                "maybe_convert_ix": [
                    998
                ],
                "item_labels.is_unique": [
                    1011
                ],
                "Series": [
                    1057,
                    1020,
                    1086
                ],
                "self._align_frame": [
                    1023
                ],
                "self.obj._check_is_chained_assignment_possible": [
                    1026
                ],
                "self.obj._consolidate_inplace": [
                    1029
                ],
                "self.obj._data.setitem": [
                    1030
                ],
                "self.obj.index": [
                    1321,
                    1042,
                    1213
                ],
                "new_index": [
                    1043,
                    1052,
                    1063
                ],
                "index.is_unique": [
                    1051
                ],
                "index.get_indexer": [
                    1052
                ],
                "new_values": [
                    1057,
                    1061,
                    1063
                ],
                "_values": [
                    2231,
                    1057,
                    1162,
                    1230,
                    1138,
                    1171,
                    1207,
                    1209,
                    1179,
                    1215
                ],
                "self.obj._values": [
                    1058,
                    1061
                ],
                "concat_compat": [
                    1061
                ],
                "self.obj._constructor": [
                    1062
                ],
                "self.obj.name": [
                    1063
                ],
                "self.obj.columns": [
                    1086,
                    1083,
                    1076,
                    1070
                ],
                "value.reindex": [
                    1076
                ],
                "value.name": [
                    1077
                ],
                "self.obj.append": [
                    1088
                ],
                "np.ndarray": [
                    2274,
                    1193,
                    1809,
                    2195,
                    1109,
                    1116,
                    2333
                ],
                "Index": [
                    2274,
                    1156,
                    1158,
                    2195,
                    1109,
                    2333,
                    1885
                ],
                "i.ravel": [
                    1116
                ],
                "aligners": [
                    1120,
                    1121,
                    1133
                ],
                "sum_aligners": [
                    1121,
                    1122,
                    1137
                ],
                "single_aligner": [
                    1152,
                    1122,
                    1133,
                    1165
                ],
                "is_frame": [
                    1184,
                    1212,
                    1123,
                    1132
                ],
                "is_sequence": [
                    1192,
                    1137,
                    1151
                ],
                "ser": [
                    1177,
                    1159,
                    1160,
                    1162,
                    1169,
                    1138,
                    1170,
                    1171,
                    1143,
                    1176,
                    1145,
                    1179
                ],
                "ser.reindex": [
                    1138,
                    1171,
                    1179,
                    1162
                ],
                "obj.axes": [
                    1138,
                    1148
                ],
                "len_indexer": [
                    1142,
                    1143
                ],
                "T": [
                    1143
                ],
                "reshape": [
                    1143
                ],
                "np.tile": [
                    1143
                ],
                "new_ix": [
                    1154,
                    1155,
                    1156,
                    1158,
                    1159,
                    1162
                ],
                "ser.index.equals": [
                    1176,
                    1169,
                    1159
                ],
                "ser.index": [
                    1176,
                    1169,
                    1159
                ],
                "ser._values.copy": [
                    1160,
                    1177,
                    1170
                ],
                "ser._values": [
                    1160,
                    1177,
                    1170
                ],
                "is_scalar": [
                    1611,
                    1419,
                    1739,
                    2383,
                    1173
                ],
                "cols": [
                    1188,
                    1197,
                    1198,
                    1204,
                    1206,
                    1209
                ],
                "sindexers": [
                    1202,
                    1189
                ],
                "ix": [
                    1190,
                    1192,
                    1193,
                    1194,
                    1196,
                    1198
                ],
                "ix.ravel": [
                    1194
                ],
                "sindexers.append": [
                    1202
                ],
                "df.index.equals": [
                    1214,
                    1206
                ],
                "df.index": [
                    1214,
                    1222,
                    1206,
                    1223
                ],
                "df": [
                    2372,
                    1222,
                    1223,
                    1230,
                    1206,
                    1207,
                    1209,
                    1214,
                    1215
                ],
                "df.columns.equals": [
                    1206
                ],
                "df.columns": [
                    1206
                ],
                "df.copy": [
                    1215,
                    1207
                ],
                "df.reindex": [
                    1209,
                    1230
                ],
                "ax.nlevels": [
                    1223
                ],
                "df.index.nlevels": [
                    1223
                ],
                "self._getitem_lowerdim": [
                    1970,
                    1237
                ],
                "self._has_valid_tuple": [
                    1968,
                    1242
                ],
                "self._multi_take_opportunity": [
                    1245
                ],
                "self._multi_take": [
                    1246
                ],
                "retval": [
                    1984,
                    1249,
                    1254,
                    1256,
                    1992,
                    1974,
                    1981
                ],
                "_getitem_axis": [
                    1981,
                    1254,
                    1415
                ],
                "com.is_bool_indexer": [
                    1280,
                    1508,
                    1799,
                    2024,
                    1649,
                    1719,
                    1884
                ],
                "o": [
                    1457,
                    1458,
                    1302,
                    1305,
                    1307
                ],
                "d": [
                    1307,
                    1303
                ],
                "self._get_listlike_indexer": [
                    1304,
                    1515,
                    1655
                ],
                "o._AXIS_ORDERS": [
                    1305
                ],
                "o._reindex_with_indexers": [
                    1307
                ],
                "self._get_label": [
                    1314,
                    1851
                ],
                "self.obj.index.nlevels": [
                    1321
                ],
                "ek": [
                    1322
                ],
                "self._getitem_axis": [
                    1402,
                    1331,
                    1684,
                    1351
                ],
                "self._is_nested_tuple_indexer": [
                    1334
                ],
                "self._getitem_nested_tuple": [
                    1335
                ],
                "ax0": [
                    1338,
                    1341
                ],
                "result": [
                    1344,
                    2221,
                    2223,
                    2224,
                    1395,
                    1396,
                    1397,
                    2231,
                    2234,
                    2235,
                    2237,
                    1342,
                    1343
                ],
                "self._handle_lowerdim_multi_index_axis0": [
                    1395,
                    1342
                ],
                "is_label_like": [
                    1350
                ],
                "section": [
                    1381,
                    1351,
                    1383,
                    1354,
                    1355,
                    1357,
                    1368
                ],
                "section.ndim": [
                    1357
                ],
                "new_key": [
                    1376,
                    1380,
                    1383,
                    1775,
                    1360,
                    1363,
                    1781,
                    1783,
                    1784,
                    1370,
                    1372,
                    1373,
                    1375
                ],
                "a": [
                    2144,
                    1372,
                    1373
                ],
                "b": [
                    1372,
                    1373
                ],
                "current_ndim": [
                    1424,
                    1414
                ],
                "obj.ndim": [
                    1424,
                    1414
                ],
                "o._get_axis": [
                    1458
                ],
                "keyarr": [
                    1472,
                    1474,
                    1475,
                    1515,
                    1517,
                    1462,
                    1470
                ],
                "ax._convert_listlike_indexer": [
                    1462
                ],
                "self._validate_read_indexer": [
                    1465,
                    1474
                ],
                "raise_missing": [
                    1465,
                    1474,
                    1564
                ],
                "ax.is_unique": [
                    1468,
                    1941,
                    1751
                ],
                "ax.get_indexer_for": [
                    1469
                ],
                "ax.reindex": [
                    1470
                ],
                "ax._reindex_non_unique": [
                    1472
                ],
                "check_bool_indexer": [
                    1650,
                    1510,
                    1695
                ],
                "inds": [
                    1696,
                    1697,
                    1511,
                    1512,
                    1651,
                    1652
                ],
                "key.nonzero": [
                    1696,
                    1651,
                    1511
                ],
                "self.obj._take_with_is_copy": [
                    1512,
                    1697,
                    2012
                ],
                "self.obj._reindex_with_indexers": [
                    1516
                ],
                "axis_name": [
                    1560,
                    1559
                ],
                "self.obj._get_axis_name": [
                    1559
                ],
                "not_found": [
                    1565,
                    1566
                ],
                "ax.is_categorical": [
                    1573
                ],
                "ax.is_interval": [
                    1573
                ],
                "self._convert_slice_indexer": [
                    2050,
                    2059,
                    1598
                ],
                "self._convert_scalar_indexer": [
                    1602,
                    1723,
                    2062
                ],
                "is_int_index": [
                    1608,
                    1609
                ],
                "labels.is_integer": [
                    1608
                ],
                "is_int_positional": [
                    1625,
                    1609,
                    1629
                ],
                "labels.nlevels": [
                    1619
                ],
                "self.obj.shape": [
                    1638
                ],
                "labels.get_locs": [
                    1844,
                    1645
                ],
                "_NDFrameIndexer": [
                    1666,
                    1708
                ],
                "_takeable": [
                    1881,
                    2138,
                    1667,
                    2108
                ],
                "self._is_scalar_access": [
                    1672
                ],
                "self.obj._get_value": [
                    2089,
                    1674
                ],
                "self._takeable": [
                    2089,
                    1674,
                    2103
                ],
                "self._getitem_tuple": [
                    1678
                ],
                "maybe_callable": [
                    1683,
                    1684
                ],
                "_LocationIndexer": [
                    1876,
                    1701
                ],
                "Appender": [
                    1700,
                    1708,
                    1875,
                    2136,
                    2106
                ],
                "_NDFrameIndexer._validate_key.__doc__": [
                    1708
                ],
                "_NDFrameIndexer._validate_key": [
                    1708
                ],
                "ax._supports_partial_string_indexing": [
                    1746
                ],
                "_supports_partial_string_indexing": [
                    1779,
                    1766
                ],
                "labels.levels": [
                    1770,
                    1779,
                    1766
                ],
                "component": [
                    1776,
                    1778,
                    1781,
                    1783
                ],
                "new_key.append": [
                    1781,
                    1783
                ],
                "item_from_zerodim": [
                    2034,
                    1789
                ],
                "is_iterator": [
                    1790
                ],
                "self._get_partial_string_timestamp_match_key": [
                    1794
                ],
                "self._get_slice_axis": [
                    2019,
                    1798
                ],
                "self._getbool_axis": [
                    1800,
                    2026
                ],
                "key.ndim": [
                    1809,
                    1820,
                    1837
                ],
                "self._getitem_iterable": [
                    1840
                ],
                "locs": [
                    1844,
                    1846
                ],
                "self.obj.iloc": [
                    1847
                ],
                "need_slice": [
                    1859,
                    2047
                ],
                "slice_obj": [
                    1864,
                    2050,
                    1859,
                    2047
                ],
                "obj._get_axis": [
                    1862
                ],
                "labels.slice_indexer": [
                    1863
                ],
                "slice_obj.start": [
                    1864
                ],
                "slice_obj.stop": [
                    1864
                ],
                "slice_obj.step": [
                    1864
                ],
                "self._slice": [
                    2051,
                    1868
                ],
                "self.obj.take": [
                    1872
                ],
                "IndexingMixin.loc.__doc__": [
                    1700
                ],
                "IndexingMixin.loc": [
                    1700
                ],
                "IndexingMixin": [
                    2136,
                    2106,
                    1875,
                    1700
                ],
                "key.index": [
                    2222,
                    1885,
                    1886
                ],
                "key.index.inferred_type": [
                    1886
                ],
                "self._validate_integer": [
                    1901,
                    2039
                ],
                "arr": [
                    1912,
                    1915,
                    1907,
                    1911
                ],
                "len_axis": [
                    1962,
                    1915,
                    1908,
                    1963
                ],
                "is_numeric_dtype": [
                    1911
                ],
                "arr.dtype": [
                    1911
                ],
                "arr.max": [
                    1915
                ],
                "arr.min": [
                    1915
                ],
                "self._has_valid_positional_setitem_indexer": [
                    1921
                ],
                "retval.ndim": [
                    1984
                ],
                "np.asarray": [
                    2234,
                    2022
                ],
                "self._get_list_axis": [
                    2030
                ],
                "self._get_loc": [
                    2041
                ],
                "is_float": [
                    2061
                ],
                "IndexingMixin.iloc.__doc__": [
                    1875
                ],
                "IndexingMixin.iloc": [
                    1875
                ],
                "self._convert_key": [
                    2088,
                    2102
                ],
                "self.obj._set_value": [
                    2103
                ],
                "_ScalarAccessIndexer": [
                    2137,
                    2107
                ],
                "is_setter": [
                    2116
                ],
                "ax.is_integer": [
                    2120
                ],
                "ax.holds_integer": [
                    2127
                ],
                "IndexingMixin.at.__doc__": [
                    2106
                ],
                "IndexingMixin.at": [
                    2106
                ],
                "IndexingMixin.iat.__doc__": [
                    2136
                ],
                "IndexingMixin.iat": [
                    2136
                ],
                "Hashable": [
                    2164,
                    2150
                ],
                "_tup": [
                    2164,
                    2165,
                    2166,
                    2167
                ],
                "List": [
                    2164
                ],
                "Union": [
                    2164,
                    2150
                ],
                "ndim": [
                    2165
                ],
                "loc": [
                    2166
                ],
                "idx._convert_slice_indexer": [
                    2176
                ],
                "obj._data.items": [
                    2181
                ],
                "idx._supports_partial_string_indexing": [
                    2186
                ],
                "idx._get_string_slice": [
                    2188
                ],
                "key.index.equals": [
                    2222
                ],
                "result.reindex": [
                    2223
                ],
                "mask": [
                    2224,
                    2225
                ],
                "isna": [
                    2224
                ],
                "result._values": [
                    2224
                ],
                "mask.any": [
                    2225
                ],
                "result.astype": [
                    2231
                ],
                "check_array_indexer": [
                    2235
                ],
                "_idx": [
                    2265,
                    2263
                ],
                "get_loc": [
                    2263
                ],
                "get_indexer": [
                    2265
                ],
                "ixify": [
                    2272,
                    2275,
                    2277
                ],
                "args": [
                    2280,
                    2273,
                    2278
                ],
                "np.ix_": [
                    2278
                ],
                "is_list_like": [
                    2347,
                    2351,
                    2295
                ],
                "obj.start": [
                    2318
                ],
                "obj.stop": [
                    2319
                ],
                "obj.step": [
                    2320
                ],
                "kinds": [
                    2333,
                    2334
                ],
                "slice_": [
                    2368,
                    2372,
                    2373,
                    2351,
                    2352,
                    2354,
                    2357,
                    2359,
                    2360,
                    2334,
                    2335
                ],
                "part": [
                    2347,
                    2348,
                    2359
                ],
                "pred": [
                    2359
                ],
                "dtypes": [
                    2369,
                    2371,
                    2372
                ],
                "np.number": [
                    2369
                ],
                "include_bool": [
                    2370
                ],
                "dtypes.append": [
                    2371
                ],
                "columns": [
                    2372
                ],
                "df.select_dtypes": [
                    2372
                ],
                "values_len": [
                    2393,
                    2389,
                    2391
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_69/pandas/tests/indexes/test_numeric.py",
                "test_function": "test_lookups_datetimelike_values",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"vals\",\n        [\n            pd.date_range(\"2016-01-01\", periods=3),\n            pd.timedelta_range(\"1 Day\", periods=3),\n        ],\n    )\n    def test_lookups_datetimelike_values(self, vals):\n        # If we have datetime64 or timedelta64 values, make sure they are\n        #  wrappped correctly  GH#31163\n        ser = pd.Series(vals, index=range(3, 6))\n        ser.index = ser.index.astype(\"float64\")\n\n        expected = vals[1]\n\n        result = ser.index.get_value(ser, 4.0)\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser.index.get_value(ser, 4)\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser[4]\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser.loc[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser.loc[4]\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser.at[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        # GH#31329 .at[4] should cast to 4.0, matching .loc behavior\n        result = ser.at[4]\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser.iloc[1]\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser.iat[1]\n        assert isinstance(result, type(expected)) and result == expected",
                "test_error": "ValueError: At based indexing on an non-integer index can only have non-integer indexers",
                "full_test_error": "self = <pandas.tests.indexes.test_numeric.TestFloat64Index object at 0x118c18bb0>\nvals = DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03'], dtype='datetime64[ns]', freq='D')\n\n    @pytest.mark.parametrize(\n        \"vals\",\n        [\n            pd.date_range(\"2016-01-01\", periods=3),\n            pd.timedelta_range(\"1 Day\", periods=3),\n        ],\n    )\n    def test_lookups_datetimelike_values(self, vals):\n        # If we have datetime64 or timedelta64 values, make sure they are\n        #  wrappped correctly  GH#31163\n        ser = pd.Series(vals, index=range(3, 6))\n        ser.index = ser.index.astype(\"float64\")\n    \n        expected = vals[1]\n    \n        result = ser.index.get_value(ser, 4.0)\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser.index.get_value(ser, 4)\n        assert isinstance(result, type(expected)) and result == expected\n    \n        result = ser[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser[4]\n        assert isinstance(result, type(expected)) and result == expected\n    \n        result = ser.loc[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser.loc[4]\n        assert isinstance(result, type(expected)) and result == expected\n    \n        result = ser.at[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        # GH#31329 .at[4] should cast to 4.0, matching .loc behavior\n>       result = ser.at[4]\n\npandas/tests/indexes/test_numeric.py:429: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexing.py:2088: in __getitem__\n    key = self._convert_key(key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.indexing._AtIndexer object at 0x118d99d60>, key = (4,)\nis_setter = False\n\n    def _convert_key(self, key, is_setter: bool = False):\n        \"\"\"\n        Require they keys to be the same type as the index. (so we don't\n        fallback)\n        \"\"\"\n        # allow arbitrary setting\n        if is_setter:\n            return list(key)\n    \n        for ax, i in zip(self.obj.axes, key):\n            if ax.is_integer():\n                if not is_integer(i):\n                    raise ValueError(\n                        \"At based indexing on an integer index \"\n                        \"can only have integer indexers\"\n                    )\n            else:\n                if is_integer(i) and not ax.holds_integer():\n>                   raise ValueError(\n                        \"At based indexing on an non-integer \"\n                        \"index can only have non-integer \"\n                        \"indexers\"\n                    )\nE                   ValueError: At based indexing on an non-integer index can only have non-integer indexers\n\npandas/core/indexing.py:2128: ValueError",
                "traceback": "pandas/core/indexing.py:2088: in __getitem__\n    key = self._convert_key(key)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.indexing._AtIndexer object at 0x118d99d60>, key = (4,)\nis_setter = False\n\n    def _convert_key(self, key, is_setter: bool = False):\n        \"\"\"\n        Require they keys to be the same type as the index. (so we don't\n        fallback)\n        \"\"\"\n        # allow arbitrary setting\n        if is_setter:\n            return list(key)\n    \n        for ax, i in zip(self.obj.axes, key):\n            if ax.is_integer():\n                if not is_integer(i):\n                    raise ValueError(\n                        \"At based indexing on an integer index \"\n                        \"can only have integer indexers\"\n                    )\n            else:\n                if is_integer(i) and not ax.holds_integer():\n>                   raise ValueError(\n                        \"At based indexing on an non-integer \"\n                        \"index can only have non-integer \"\n                        \"indexers\"\n                    )\nE                   ValueError: At based indexing on an non-integer index can only have non-integer indexers\n\npandas/core/indexing.py:2128: ValueError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('vals', [pd.date_range('2016-01-01', periods=3), pd.timedelta_range('1 Day', periods=3)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_69/pandas/tests/indexes/test_numeric.py",
                "test_function": "test_lookups_datetimelike_values",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"vals\",\n        [\n            pd.date_range(\"2016-01-01\", periods=3),\n            pd.timedelta_range(\"1 Day\", periods=3),\n        ],\n    )\n    def test_lookups_datetimelike_values(self, vals):\n        # If we have datetime64 or timedelta64 values, make sure they are\n        #  wrappped correctly  GH#31163\n        ser = pd.Series(vals, index=range(3, 6))\n        ser.index = ser.index.astype(\"float64\")\n\n        expected = vals[1]\n\n        result = ser.index.get_value(ser, 4.0)\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser.index.get_value(ser, 4)\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser[4]\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser.loc[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser.loc[4]\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser.at[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        # GH#31329 .at[4] should cast to 4.0, matching .loc behavior\n        result = ser.at[4]\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser.iloc[1]\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser.iat[1]\n        assert isinstance(result, type(expected)) and result == expected",
                "test_error": "ValueError: At based indexing on an non-integer index can only have non-integer indexers",
                "full_test_error": "self = <pandas.tests.indexes.test_numeric.TestFloat64Index object at 0x118d85970>\nvals = TimedeltaIndex(['1 days', '2 days', '3 days'], dtype='timedelta64[ns]', freq='D')\n\n    @pytest.mark.parametrize(\n        \"vals\",\n        [\n            pd.date_range(\"2016-01-01\", periods=3),\n            pd.timedelta_range(\"1 Day\", periods=3),\n        ],\n    )\n    def test_lookups_datetimelike_values(self, vals):\n        # If we have datetime64 or timedelta64 values, make sure they are\n        #  wrappped correctly  GH#31163\n        ser = pd.Series(vals, index=range(3, 6))\n        ser.index = ser.index.astype(\"float64\")\n    \n        expected = vals[1]\n    \n        result = ser.index.get_value(ser, 4.0)\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser.index.get_value(ser, 4)\n        assert isinstance(result, type(expected)) and result == expected\n    \n        result = ser[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser[4]\n        assert isinstance(result, type(expected)) and result == expected\n    \n        result = ser.loc[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser.loc[4]\n        assert isinstance(result, type(expected)) and result == expected\n    \n        result = ser.at[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        # GH#31329 .at[4] should cast to 4.0, matching .loc behavior\n>       result = ser.at[4]\n\npandas/tests/indexes/test_numeric.py:429: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexing.py:2088: in __getitem__\n    key = self._convert_key(key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.indexing._AtIndexer object at 0x119087cc0>, key = (4,)\nis_setter = False\n\n    def _convert_key(self, key, is_setter: bool = False):\n        \"\"\"\n        Require they keys to be the same type as the index. (so we don't\n        fallback)\n        \"\"\"\n        # allow arbitrary setting\n        if is_setter:\n            return list(key)\n    \n        for ax, i in zip(self.obj.axes, key):\n            if ax.is_integer():\n                if not is_integer(i):\n                    raise ValueError(\n                        \"At based indexing on an integer index \"\n                        \"can only have integer indexers\"\n                    )\n            else:\n                if is_integer(i) and not ax.holds_integer():\n>                   raise ValueError(\n                        \"At based indexing on an non-integer \"\n                        \"index can only have non-integer \"\n                        \"indexers\"\n                    )\nE                   ValueError: At based indexing on an non-integer index can only have non-integer indexers\n\npandas/core/indexing.py:2128: ValueError",
                "traceback": "pandas/core/indexing.py:2088: in __getitem__\n    key = self._convert_key(key)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.indexing._AtIndexer object at 0x119087cc0>, key = (4,)\nis_setter = False\n\n    def _convert_key(self, key, is_setter: bool = False):\n        \"\"\"\n        Require they keys to be the same type as the index. (so we don't\n        fallback)\n        \"\"\"\n        # allow arbitrary setting\n        if is_setter:\n            return list(key)\n    \n        for ax, i in zip(self.obj.axes, key):\n            if ax.is_integer():\n                if not is_integer(i):\n                    raise ValueError(\n                        \"At based indexing on an integer index \"\n                        \"can only have integer indexers\"\n                    )\n            else:\n                if is_integer(i) and not ax.holds_integer():\n>                   raise ValueError(\n                        \"At based indexing on an non-integer \"\n                        \"index can only have non-integer \"\n                        \"indexers\"\n                    )\nE                   ValueError: At based indexing on an non-integer index can only have non-integer indexers\n\npandas/core/indexing.py:2128: ValueError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('vals', [pd.date_range('2016-01-01', periods=3), pd.timedelta_range('1 Day', periods=3)])"
                ]
            }
        ]
    }
}