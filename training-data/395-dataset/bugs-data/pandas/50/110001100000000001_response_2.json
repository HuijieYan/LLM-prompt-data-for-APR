{
    "pandas": [
        {
            "bugID": 50,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 65,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def _cat_compare_op(op):\n\n    opname = f\"__{op.__name__}__\"\n    \n    @unpack_zerodim_and_defer(opname)\n    def func(self, other):\n        if is_list_like(other) and len(other) != len(self):\n            raise ValueError(\"Lengths must match.\")\n        \n        # Handle comparison of two Categorical objects\n        if isinstance(other, Categorical):\n            if self.ordered != other.ordered:\n                raise TypeError(\"Categoricals can only be compared if 'ordered' is the same\")\n            if not self.categories.equals(other.categories):\n                raise TypeError(\"Categoricals can only be compared if 'categories' are the same.\")\n            \n            if self.ordered:\n                # Comparing ordered Categorical objects\n                f = getattr(self._codes, opname)\n                ret = f(other._codes)\n                mask = (self._codes == -1) | (other._codes == -1)\n                ret[mask] = False\n                return ret\n            else:\n                # Comparing unordered Categorical objects\n                other_codes = _get_codes_for_values(other, self.categories)\n                f = getattr(self._codes, opname)\n                ret = f(other_codes)\n                mask = (self._codes == -1) | (other_codes == -1)\n                ret[mask] = False\n                return ret\n        \n        # Handle comparison of Categorical with scalar\n        if is_scalar(other):\n            if other in self.categories:\n                i = self.categories.get_loc(other)\n                ret = getattr(self._codes, opname)(i)\n    \n                if opname not in {\"__eq__\", \"__ge__\", \"__gt__\"}:\n                    mask = self._codes == -1\n                    ret[mask] = False\n                return ret\n            else:\n                if opname == \"__eq__\":\n                    return np.zeros(len(self), dtype=bool)\n                elif opname == \"__ne__\":\n                    return np.ones(len(self), dtype=bool)\n                else:\n                    raise TypeError(f\"Cannot compare a Categorical for op {opname} with a scalar, which is not a category.\")\n        \n        # Allow comparison of Categorical with object dtype array for equality\n        if opname in [\"__eq__\", \"__ne__\"]:\n            return getattr(np.array(self), opname)(np.array(other))\n    \n        raise TypeError(f\"Cannot compare a Categorical for op {opname} with type {type(other)}. If you want to compare values, use 'np.asarray(cat) <op> other'.\")\n    \n    func.__name__ = opname\n    \n    return func"
        }
    ]
}