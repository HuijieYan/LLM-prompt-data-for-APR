{
    "pandas:57": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_57/pandas/_testing.py": {
            "buggy_functions": [
                {
                    "function_name": "assert_series_equal",
                    "function_code": "def assert_series_equal(\n    left,\n    right,\n    check_dtype=True,\n    check_index_type=\"equiv\",\n    check_series_type=True,\n    check_less_precise=False,\n    check_names=True,\n    check_exact=False,\n    check_datetimelike_compat=False,\n    check_categorical=True,\n    obj=\"Series\",\n):\n    \"\"\"\n    Check that left and right Series are equal.\n\n    Parameters\n    ----------\n    left : Series\n    right : Series\n    check_dtype : bool, default True\n        Whether to check the Series dtype is identical.\n    check_index_type : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical.\n    check_series_type : bool, default True\n        Whether to check the Series class is identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n\n        When comparing two numbers, if the first number has magnitude less\n        than 1e-5, we compare the two numbers directly and check whether\n        they are equivalent within the specified precision. Otherwise, we\n        compare the **ratio** of the second number to the first number and\n        check whether it is equivalent to 1 within the specified precision.\n    check_names : bool, default True\n        Whether to check the Series and Index names attribute.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n    check_datetimelike_compat : bool, default False\n        Compare datetime-like which is comparable ignoring dtype.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    obj : str, default 'Series'\n        Specify object name being compared, internally used to show appropriate\n        assertion message.\n    \"\"\"\n    __tracebackhide__ = True\n\n    # instance validation\n    _check_isinstance(left, right, Series)\n\n    if check_series_type:\n        # ToDo: There are some tests using rhs is sparse\n        # lhs is dense. Should use assert_class_equal in future\n        assert isinstance(left, type(right))\n        # assert_class_equal(left, right, obj=obj)\n\n    # length comparison\n    if len(left) != len(right):\n        msg1 = f\"{len(left)}, {left.index}\"\n        msg2 = f\"{len(right)}, {right.index}\"\n        raise_assert_detail(obj, \"Series length are different\", msg1, msg2)\n\n    # index comparison\n    assert_index_equal(\n        left.index,\n        right.index,\n        exact=check_index_type,\n        check_names=check_names,\n        check_less_precise=check_less_precise,\n        check_exact=check_exact,\n        check_categorical=check_categorical,\n        obj=f\"{obj}.index\",\n    )\n\n    if check_dtype:\n        # We want to skip exact dtype checking when `check_categorical`\n        # is False. We'll still raise if only one is a `Categorical`,\n        # regardless of `check_categorical`\n        if (\n            is_categorical_dtype(left)\n            and is_categorical_dtype(right)\n            and not check_categorical\n        ):\n            pass\n        else:\n            assert_attr_equal(\"dtype\", left, right, obj=f\"Attributes of {obj}\")\n\n    if check_exact:\n        assert_numpy_array_equal(\n            left._internal_get_values(),\n            right._internal_get_values(),\n            check_dtype=check_dtype,\n            obj=str(obj),\n        )\n    elif check_datetimelike_compat:\n        # we want to check only if we have compat dtypes\n        # e.g. integer and M|m are NOT compat, but we can simply check\n        # the values in that case\n        if needs_i8_conversion(left) or needs_i8_conversion(right):\n\n            # datetimelike may have different objects (e.g. datetime.datetime\n            # vs Timestamp) but will compare equal\n            if not Index(left.values).equals(Index(right.values)):\n                msg = (\n                    f\"[datetimelike_compat=True] {left.values} \"\n                    f\"is not equal to {right.values}.\"\n                )\n                raise AssertionError(msg)\n        else:\n            assert_numpy_array_equal(\n                left._internal_get_values(),\n                right._internal_get_values(),\n                check_dtype=check_dtype,\n            )\n    elif is_interval_dtype(left) or is_interval_dtype(right):\n        assert_interval_array_equal(left.array, right.array)\n    elif is_extension_array_dtype(left.dtype) and is_datetime64tz_dtype(left.dtype):\n        # .values is an ndarray, but ._values is the ExtensionArray.\n        # TODO: Use .array\n        assert is_extension_array_dtype(right.dtype)\n        assert_extension_array_equal(left._values, right._values)\n    elif (\n        is_extension_array_dtype(left)\n        and not is_categorical_dtype(left)\n        and is_extension_array_dtype(right)\n        and not is_categorical_dtype(right)\n    ):\n        assert_extension_array_equal(left.array, right.array)\n    else:\n        _testing.assert_almost_equal(\n            left._internal_get_values(),\n            right._internal_get_values(),\n            check_less_precise=check_less_precise,\n            check_dtype=check_dtype,\n            obj=str(obj),\n        )\n\n    # metadata comparison\n    if check_names:\n        assert_attr_equal(\"name\", left, right, obj=obj)\n\n    if check_categorical:\n        if is_categorical_dtype(left) or is_categorical_dtype(right):\n            assert_categorical_equal(left.values, right.values, obj=f\"{obj} category\")\n",
                    "decorators": [],
                    "docstring": "Check that left and right Series are equal.\n\nParameters\n----------\nleft : Series\nright : Series\ncheck_dtype : bool, default True\n    Whether to check the Series dtype is identical.\ncheck_index_type : bool or {'equiv'}, default 'equiv'\n    Whether to check the Index class, dtype and inferred_type\n    are identical.\ncheck_series_type : bool, default True\n    Whether to check the Series class is identical.\ncheck_less_precise : bool or int, default False\n    Specify comparison precision. Only used when check_exact is False.\n    5 digits (False) or 3 digits (True) after decimal points are compared.\n    If int, then specify the digits to compare.\n\n    When comparing two numbers, if the first number has magnitude less\n    than 1e-5, we compare the two numbers directly and check whether\n    they are equivalent within the specified precision. Otherwise, we\n    compare the **ratio** of the second number to the first number and\n    check whether it is equivalent to 1 within the specified precision.\ncheck_names : bool, default True\n    Whether to check the Series and Index names attribute.\ncheck_exact : bool, default False\n    Whether to compare number exactly.\ncheck_datetimelike_compat : bool, default False\n    Compare datetime-like which is comparable ignoring dtype.\ncheck_categorical : bool, default True\n    Whether to compare internal Categorical exactly.\nobj : str, default 'Series'\n    Specify object name being compared, internally used to show appropriate\n    assertion message.",
                    "start_line": 1066,
                    "variables": {
                        "__tracebackhide__": [
                            1115
                        ],
                        "_check_isinstance": [
                            1118
                        ],
                        "left": [
                            1155,
                            1159,
                            1168,
                            1172,
                            1174,
                            1180,
                            1184,
                            1185,
                            1186,
                            1190,
                            1192,
                            1193,
                            1197,
                            1200,
                            1209,
                            1212,
                            1213,
                            1118,
                            1123,
                            1127,
                            1128,
                            1134,
                            1149
                        ],
                        "right": [
                            1155,
                            1160,
                            1168,
                            1172,
                            1175,
                            1181,
                            1184,
                            1185,
                            1189,
                            1190,
                            1194,
                            1195,
                            1197,
                            1201,
                            1209,
                            1212,
                            1213,
                            1118,
                            1123,
                            1127,
                            1129,
                            1135,
                            1150
                        ],
                        "Series": [
                            1118
                        ],
                        "check_series_type": [
                            1120
                        ],
                        "isinstance": [
                            1123
                        ],
                        "type": [
                            1123
                        ],
                        "len": [
                            1128,
                            1129,
                            1127
                        ],
                        "msg1": [
                            1128,
                            1130
                        ],
                        "left.index": [
                            1128,
                            1134
                        ],
                        "msg2": [
                            1129,
                            1130
                        ],
                        "right.index": [
                            1129,
                            1135
                        ],
                        "raise_assert_detail": [
                            1130
                        ],
                        "obj": [
                            1155,
                            1130,
                            1162,
                            1204,
                            1141,
                            1209,
                            1213
                        ],
                        "assert_index_equal": [
                            1133
                        ],
                        "check_index_type": [
                            1136
                        ],
                        "check_names": [
                            1208,
                            1137
                        ],
                        "check_less_precise": [
                            1202,
                            1138
                        ],
                        "check_exact": [
                            1139,
                            1157
                        ],
                        "check_categorical": [
                            1211,
                            1140,
                            1151
                        ],
                        "check_dtype": [
                            1144,
                            1161,
                            1203,
                            1182
                        ],
                        "is_categorical_dtype": [
                            1193,
                            1195,
                            1212,
                            1149,
                            1150
                        ],
                        "assert_attr_equal": [
                            1209,
                            1155
                        ],
                        "assert_numpy_array_equal": [
                            1179,
                            1158
                        ],
                        "left._internal_get_values": [
                            1200,
                            1180,
                            1159
                        ],
                        "right._internal_get_values": [
                            1160,
                            1201,
                            1181
                        ],
                        "str": [
                            1162,
                            1204
                        ],
                        "check_datetimelike_compat": [
                            1164
                        ],
                        "needs_i8_conversion": [
                            1168
                        ],
                        "equals": [
                            1172
                        ],
                        "Index": [
                            1172
                        ],
                        "left.values": [
                            1172,
                            1213,
                            1174
                        ],
                        "right.values": [
                            1172,
                            1213,
                            1175
                        ],
                        "msg": [
                            1177,
                            1173
                        ],
                        "AssertionError": [
                            1177
                        ],
                        "is_interval_dtype": [
                            1184
                        ],
                        "assert_interval_array_equal": [
                            1185
                        ],
                        "left.array": [
                            1185,
                            1197
                        ],
                        "right.array": [
                            1185,
                            1197
                        ],
                        "is_extension_array_dtype": [
                            1192,
                            1186,
                            1194,
                            1189
                        ],
                        "left.dtype": [
                            1186
                        ],
                        "is_datetime64tz_dtype": [
                            1186
                        ],
                        "right.dtype": [
                            1189
                        ],
                        "assert_extension_array_equal": [
                            1197,
                            1190
                        ],
                        "left._values": [
                            1190
                        ],
                        "right._values": [
                            1190
                        ],
                        "_testing.assert_almost_equal": [
                            1199
                        ],
                        "_testing": [
                            1199
                        ],
                        "assert_categorical_equal": [
                            1213
                        ]
                    },
                    "filtered_variables": {
                        "__tracebackhide__": [
                            1115
                        ],
                        "_check_isinstance": [
                            1118
                        ],
                        "left": [
                            1155,
                            1159,
                            1168,
                            1172,
                            1174,
                            1180,
                            1184,
                            1185,
                            1186,
                            1190,
                            1192,
                            1193,
                            1197,
                            1200,
                            1209,
                            1212,
                            1213,
                            1118,
                            1123,
                            1127,
                            1128,
                            1134,
                            1149
                        ],
                        "right": [
                            1155,
                            1160,
                            1168,
                            1172,
                            1175,
                            1181,
                            1184,
                            1185,
                            1189,
                            1190,
                            1194,
                            1195,
                            1197,
                            1201,
                            1209,
                            1212,
                            1213,
                            1118,
                            1123,
                            1127,
                            1129,
                            1135,
                            1150
                        ],
                        "Series": [
                            1118
                        ],
                        "check_series_type": [
                            1120
                        ],
                        "msg1": [
                            1128,
                            1130
                        ],
                        "left.index": [
                            1128,
                            1134
                        ],
                        "msg2": [
                            1129,
                            1130
                        ],
                        "right.index": [
                            1129,
                            1135
                        ],
                        "raise_assert_detail": [
                            1130
                        ],
                        "obj": [
                            1155,
                            1130,
                            1162,
                            1204,
                            1141,
                            1209,
                            1213
                        ],
                        "assert_index_equal": [
                            1133
                        ],
                        "check_index_type": [
                            1136
                        ],
                        "check_names": [
                            1208,
                            1137
                        ],
                        "check_less_precise": [
                            1202,
                            1138
                        ],
                        "check_exact": [
                            1139,
                            1157
                        ],
                        "check_categorical": [
                            1211,
                            1140,
                            1151
                        ],
                        "check_dtype": [
                            1144,
                            1161,
                            1203,
                            1182
                        ],
                        "is_categorical_dtype": [
                            1193,
                            1195,
                            1212,
                            1149,
                            1150
                        ],
                        "assert_attr_equal": [
                            1209,
                            1155
                        ],
                        "assert_numpy_array_equal": [
                            1179,
                            1158
                        ],
                        "left._internal_get_values": [
                            1200,
                            1180,
                            1159
                        ],
                        "right._internal_get_values": [
                            1160,
                            1201,
                            1181
                        ],
                        "check_datetimelike_compat": [
                            1164
                        ],
                        "needs_i8_conversion": [
                            1168
                        ],
                        "equals": [
                            1172
                        ],
                        "Index": [
                            1172
                        ],
                        "left.values": [
                            1172,
                            1213,
                            1174
                        ],
                        "right.values": [
                            1172,
                            1213,
                            1175
                        ],
                        "msg": [
                            1177,
                            1173
                        ],
                        "is_interval_dtype": [
                            1184
                        ],
                        "assert_interval_array_equal": [
                            1185
                        ],
                        "left.array": [
                            1185,
                            1197
                        ],
                        "right.array": [
                            1185,
                            1197
                        ],
                        "is_extension_array_dtype": [
                            1192,
                            1186,
                            1194,
                            1189
                        ],
                        "left.dtype": [
                            1186
                        ],
                        "is_datetime64tz_dtype": [
                            1186
                        ],
                        "right.dtype": [
                            1189
                        ],
                        "assert_extension_array_equal": [
                            1197,
                            1190
                        ],
                        "left._values": [
                            1190
                        ],
                        "right._values": [
                            1190
                        ],
                        "_testing.assert_almost_equal": [
                            1199
                        ],
                        "_testing": [
                            1199
                        ],
                        "assert_categorical_equal": [
                            1213
                        ]
                    },
                    "diff_line_number": 1076,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    4\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 4]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    4\n1    2\n2    3\ndtype: category\nCategories (3, int64): [4, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    4\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 4]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    4\n1    2\n2    3\ndtype: category\nCategories (3, int64): [4, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [2, 3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [4, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [2, 3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [4, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3, 4], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[4, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [2, 3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [4, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    4\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 4]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    4\n1    2\n2    3\ndtype: category\nCategories (3, int64): [4, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    4\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 4]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    4\n1    2\n2    3\ndtype: category\nCategories (3, int64): [4, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [2, 3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [4, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [2, 3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [4, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3, 4], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[4, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [2, 3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [4, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    4\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 4]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    4\n1    2\n2    3\ndtype: category\nCategories (3, int64): [4, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    4\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 4]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    4\n1    2\n2    3\ndtype: category\nCategories (3, int64): [4, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [2, 3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [4, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [2, 3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [4, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3, 4], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[4, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [2, 3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [4, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    4\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 4]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    4\n1    2\n2    3\ndtype: category\nCategories (3, int64): [4, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    4\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 4]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    4\n1    2\n2    3\ndtype: category\nCategories (3, int64): [4, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [2, 3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [4, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [2, 3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [4, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3, 4], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[4, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [2, 3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[4, 2, 3]\nCategories (3, int64): [4, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    3\n1    3\n2    3\ndtype: category\nCategories (1, int64): [3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    3\n1    3\n2    3\ndtype: category\nCategories (1, int64): [3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    3\n1    3\n2    3\ndtype: category\nCategories (1, int64): [3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    3\n1    3\n2    3\ndtype: category\nCategories (1, int64): [3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    3\n1    3\n2    3\ndtype: category\nCategories (1, int64): [3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    3\n1    3\n2    3\ndtype: category\nCategories (1, int64): [3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    3\n1    3\n2    3\ndtype: category\nCategories (1, int64): [3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    3\n1    3\n2    3\ndtype: category\nCategories (1, int64): [3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    3\n1    3\n2    3\ndtype: category\nCategories (1, int64): [3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    3\n1    3\n2    3\ndtype: category\nCategories (1, int64): [3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    3\n1    3\n2    3\ndtype: category\nCategories (1, int64): [3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    3\n1    3\n2    3\ndtype: category\nCategories (1, int64): [3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    3\n1    3\n2    3\ndtype: category\nCategories (1, int64): [3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    3\n1    3\n2    3\ndtype: category\nCategories (1, int64): [3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    3\n1    3\n2    3\ndtype: category\nCategories (1, int64): [3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    3\n1    3\n2    3\ndtype: category\nCategories (1, int64): [3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[3, 3, 3]\nCategories (1, int64): [3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    4\n1    4\n2    3\ndtype: category\nCategories (2, int64): [3, 4]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    4\n1    4\n2    3\ndtype: category\nCategories (2, int64): [4, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    4\n1    4\n2    3\ndtype: category\nCategories (2, int64): [3, 4]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    4\n1    4\n2    3\ndtype: category\nCategories (2, int64): [4, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [4, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [4, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3, 4], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[4, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [4, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    4\n1    4\n2    3\ndtype: category\nCategories (2, int64): [3, 4]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    4\n1    4\n2    3\ndtype: category\nCategories (2, int64): [4, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    4\n1    4\n2    3\ndtype: category\nCategories (2, int64): [3, 4]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    4\n1    4\n2    3\ndtype: category\nCategories (2, int64): [4, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [4, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [4, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3, 4], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[4, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [4, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    4\n1    4\n2    3\ndtype: category\nCategories (2, int64): [3, 4]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    4\n1    4\n2    3\ndtype: category\nCategories (2, int64): [4, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    4\n1    4\n2    3\ndtype: category\nCategories (2, int64): [3, 4]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    4\n1    4\n2    3\ndtype: category\nCategories (2, int64): [4, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [4, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [4, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3, 4], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[4, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [4, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    4\n1    4\n2    3\ndtype: category\nCategories (2, int64): [3, 4]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    4\n1    4\n2    3\ndtype: category\nCategories (2, int64): [4, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    4\n1    4\n2    3\ndtype: category\nCategories (2, int64): [3, 4]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    4\n1    4\n2    3\ndtype: category\nCategories (2, int64): [4, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [4, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [4, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3, 4], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[4, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [3, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[4, 4, 3]\nCategories (2, int64): [4, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    5\n1    5\n2    3\ndtype: category\nCategories (2, int64): [3, 5]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    5\n1    5\n2    3\ndtype: category\nCategories (2, int64): [5, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    5\n2    3\ndtype: category\nCategories (2, int64): [3, 5]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    5\n2    3\ndtype: category\nCategories (2, int64): [5, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3, 5], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[5, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    5\n1    5\n2    3\ndtype: category\nCategories (2, int64): [3, 5]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    5\n1    5\n2    3\ndtype: category\nCategories (2, int64): [5, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    5\n2    3\ndtype: category\nCategories (2, int64): [3, 5]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    5\n2    3\ndtype: category\nCategories (2, int64): [5, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3, 5], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[5, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    5\n1    5\n2    3\ndtype: category\nCategories (2, int64): [3, 5]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    5\n1    5\n2    3\ndtype: category\nCategories (2, int64): [5, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    5\n2    3\ndtype: category\nCategories (2, int64): [3, 5]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    5\n2    3\ndtype: category\nCategories (2, int64): [5, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3, 5], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[5, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    5\n1    5\n2    3\ndtype: category\nCategories (2, int64): [3, 5]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    5\n1    5\n2    3\ndtype: category\nCategories (2, int64): [5, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    5\n2    3\ndtype: category\nCategories (2, int64): [3, 5]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    5\n2    3\ndtype: category\nCategories (2, int64): [5, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3, 5], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[5, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, int64): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "array([2, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "<PandasArray>\n[2, 2, 3]\nLength: 3, dtype: int64",
                                    "variable_type": "PandasArray",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "array([2, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "array([2, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "<PandasArray>\n[2, 2, 3]\nLength: 3, dtype: int64",
                                    "variable_type": "PandasArray",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "array([2, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "array([2, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "<PandasArray>\n[2, 2, 3]\nLength: 3, dtype: int64",
                                    "variable_type": "PandasArray",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "array([2, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    2\n1    2\n2    3\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    2\n1    2\n2    3\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "array([2, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "<PandasArray>\n[2, 2, 3]\nLength: 3, dtype: int64",
                                    "variable_type": "PandasArray",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[2, 2, 3]\nCategories (2, int64): [2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "array([2, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    5\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 5]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    5\n1    2\n2    3\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 5]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    2\n2    3\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[5, 2, 3]\nCategories (3, int64): [2, 3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "array([5, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[5, 2, 3]\nCategories (3, int64): [2, 3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "<PandasArray>\n[5, 2, 3]\nLength: 3, dtype: int64",
                                    "variable_type": "PandasArray",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3, 5], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[5, 2, 3]\nCategories (3, int64): [2, 3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "array([5, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    5\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 5]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    5\n1    2\n2    3\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 5]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    2\n2    3\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[5, 2, 3]\nCategories (3, int64): [2, 3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "array([5, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[5, 2, 3]\nCategories (3, int64): [2, 3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "<PandasArray>\n[5, 2, 3]\nLength: 3, dtype: int64",
                                    "variable_type": "PandasArray",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3, 5], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[5, 2, 3]\nCategories (3, int64): [2, 3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "array([5, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    5\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 5]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    5\n1    2\n2    3\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 5]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    2\n2    3\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[5, 2, 3]\nCategories (3, int64): [2, 3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "array([5, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[5, 2, 3]\nCategories (3, int64): [2, 3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "<PandasArray>\n[5, 2, 3]\nLength: 3, dtype: int64",
                                    "variable_type": "PandasArray",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3, 5], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[5, 2, 3]\nCategories (3, int64): [2, 3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "array([5, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    5\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 5]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    5\n1    2\n2    3\ndtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 5]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    2\n2    3\ndtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[5, 2, 3]\nCategories (3, int64): [2, 3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "array([5, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[5, 2, 3]\nCategories (3, int64): [2, 3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "<PandasArray>\n[5, 2, 3]\nLength: 3, dtype: int64",
                                    "variable_type": "PandasArray",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[2, 3, 5], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[5, 2, 3]\nCategories (3, int64): [2, 3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "array([5, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    1\n1    2\n2    4\ndtype: category\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    1\n1    2\n2    4\ndtype: category\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    4\ndtype: category\nCategories (3, object): [1, 2, 4]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    4\ndtype: category\nCategories (3, object): [1, 2, 4]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, '4'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, '4'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    1\n1    2\n2    4\ndtype: category\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    1\n1    2\n2    4\ndtype: category\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    4\ndtype: category\nCategories (3, object): [1, 2, 4]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    4\ndtype: category\nCategories (3, object): [1, 2, 4]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, '4'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, '4'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    1\n1    2\n2    4\ndtype: category\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    1\n1    2\n2    4\ndtype: category\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    4\ndtype: category\nCategories (3, object): [1, 2, 4]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    4\ndtype: category\nCategories (3, object): [1, 2, 4]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, '4'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, '4'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    1\n1    2\n2    4\ndtype: category\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    1\n1    2\n2    4\ndtype: category\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    4\ndtype: category\nCategories (3, object): [1, 2, 4]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    1\n1    2\n2    4\ndtype: category\nCategories (3, object): [1, 2, 4]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, '4'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[1, 2, '4'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[1, 2, 4]\nCategories (3, object): [1, 2, 4]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    5\n1    5\n2    3\ndtype: category\nCategories (2, object): [3, 5]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    5\n1    5\n2    3\ndtype: category\nCategories (2, object): [5, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    5\n2    3\ndtype: category\nCategories (2, object): [3, 5]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    5\n2    3\ndtype: category\nCategories (2, object): [5, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3, '5'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['5', 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    5\n1    5\n2    3\ndtype: category\nCategories (2, object): [3, 5]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    5\n1    5\n2    3\ndtype: category\nCategories (2, object): [5, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    5\n2    3\ndtype: category\nCategories (2, object): [3, 5]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    5\n2    3\ndtype: category\nCategories (2, object): [5, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3, '5'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['5', 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "__tracebackhide__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    5\n1    5\n2    3\ndtype: category\nCategories (2, object): [3, 5]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    5\n1    5\n2    3\ndtype: category\nCategories (2, object): [5, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    5\n2    3\ndtype: category\nCategories (2, object): [3, 5]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    5\n2    3\ndtype: category\nCategories (2, object): [5, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3, '5'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['5', 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "__tracebackhide__": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_check_isinstance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0    5\n1    5\n2    3\ndtype: category\nCategories (2, object): [3, 5]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "right": {
                                    "variable_value": "0    5\n1    5\n2    3\ndtype: category\nCategories (2, object): [5, 3]",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_series_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "msg1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "msg2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "raise_assert_detail": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "'Series'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "assert_index_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_index_type": {
                                    "variable_value": "'equiv'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "check_names": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_less_precise": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_exact": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_categorical": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "check_dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_categorical_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_attr_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_numpy_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    5\n2    3\ndtype: category\nCategories (2, object): [3, 5]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right._internal_get_values": {
                                    "variable_value": "<bound method Series._internal_get_values of 0    5\n1    5\n2    3\ndtype: category\nCategories (2, object): [5, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "check_datetimelike_compat": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_interval_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_interval_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.array": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right.array": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[3, '5'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_datetime64tz_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['5', 3], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "assert_extension_array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [3, 5]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "right._values": {
                                    "variable_value": "[5, 5, 3]\nCategories (2, object): [5, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "_testing.assert_almost_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_testing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "assert_categorical_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "check_category_order": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def set_testing_mode():\n    # set the testing mode filters\n    testing_mode = os.environ.get(\"PANDAS_TESTING_MODE\", \"None\")\n    if \"deprecate\" in testing_mode:\n        warnings.simplefilter(\"always\", _testing_mode_warnings)",
                "def reset_testing_mode():\n    # reset the testing mode filters\n    testing_mode = os.environ.get(\"PANDAS_TESTING_MODE\", \"None\")\n    if \"deprecate\" in testing_mode:\n        warnings.simplefilter(\"ignore\", _testing_mode_warnings)",
                "def reset_display_options():\n    \"\"\"\n    Reset the display options for printing and representing objects.\n    \"\"\"\n    pd.reset_option(\"^display.\", silent=True)",
                "def round_trip_pickle(\n    obj: Any, path: Optional[FilePathOrBuffer] = None\n) -> FrameOrSeries:\n    \"\"\"\n    Pickle an object and then read it again.\n\n    Parameters\n    ----------\n    obj : any object\n        The object to pickle and then re-read.\n    path : str, path object or file-like object, default None\n        The path where the pickled object is written and then read.\n\n    Returns\n    -------\n    pandas object\n        The original object that was pickled and then re-read.\n    \"\"\"\n    _path = path\n    if _path is None:\n        _path = f\"__{rands(10)}__.pickle\"\n    with ensure_clean(_path) as temp_path:\n        pd.to_pickle(obj, temp_path)\n        return pd.read_pickle(temp_path)",
                "def round_trip_pathlib(writer, reader, path: Optional[str] = None):\n    \"\"\"\n    Write an object to file specified by a pathlib.Path and read it back\n\n    Parameters\n    ----------\n    writer : callable bound to pandas object\n        IO writing function (e.g. DataFrame.to_csv )\n    reader : callable\n        IO reading function (e.g. pd.read_csv )\n    path : str, default None\n        The path where the object is written and then read.\n\n    Returns\n    -------\n    pandas object\n        The original object that was serialized and then re-read.\n    \"\"\"\n    import pytest\n\n    Path = pytest.importorskip(\"pathlib\").Path\n    if path is None:\n        path = \"___pathlib___\"\n    with ensure_clean(path) as path:\n        writer(Path(path))\n        obj = reader(Path(path))\n    return obj",
                "def round_trip_localpath(writer, reader, path: Optional[str] = None):\n    \"\"\"\n    Write an object to file specified by a py.path LocalPath and read it back.\n\n    Parameters\n    ----------\n    writer : callable bound to pandas object\n        IO writing function (e.g. DataFrame.to_csv )\n    reader : callable\n        IO reading function (e.g. pd.read_csv )\n    path : str, default None\n        The path where the object is written and then read.\n\n    Returns\n    -------\n    pandas object\n        The original object that was serialized and then re-read.\n    \"\"\"\n    import pytest\n\n    LocalPath = pytest.importorskip(\"py.path\").local\n    if path is None:\n        path = \"___localpath___\"\n    with ensure_clean(path) as path:\n        writer(LocalPath(path))\n        obj = reader(LocalPath(path))\n    return obj",
                "@contextmanager\ndef decompress_file(path, compression):\n    \"\"\"\n    Open a compressed file and return a file object.\n\n    Parameters\n    ----------\n    path : str\n        The path where the file is read from.\n\n    compression : {'gzip', 'bz2', 'zip', 'xz', None}\n        Name of the decompression to use\n\n    Returns\n    -------\n    file object\n    \"\"\"\n    if compression is None:\n        f = open(path, \"rb\")\n    elif compression == \"gzip\":\n        f = gzip.open(path, \"rb\")\n    elif compression == \"bz2\":\n        f = bz2.BZ2File(path, \"rb\")\n    elif compression == \"xz\":\n        f = _get_lzma_file(lzma)(path, \"rb\")\n    elif compression == \"zip\":\n        zip_file = zipfile.ZipFile(path)\n        zip_names = zip_file.namelist()\n        if len(zip_names) == 1:\n            f = zip_file.open(zip_names.pop())\n        else:\n            raise ValueError(f\"ZIP file {path} error. Only one file per ZIP.\")\n    else:\n        raise ValueError(f\"Unrecognized compression type: {compression}\")\n\n    try:\n        yield f\n    finally:\n        f.close()\n        if compression == \"zip\":\n            zip_file.close()",
                "def write_to_compressed(compression, path, data, dest=\"test\"):\n    \"\"\"\n    Write data to a compressed file.\n\n    Parameters\n    ----------\n    compression : {'gzip', 'bz2', 'zip', 'xz'}\n        The compression type to use.\n    path : str\n        The file path to write the data.\n    data : str\n        The data to write.\n    dest : str, default \"test\"\n        The destination file (for ZIP only)\n\n    Raises\n    ------\n    ValueError : An invalid compression value was passed in.\n    \"\"\"\n    if compression == \"zip\":\n        import zipfile\n\n        compress_method = zipfile.ZipFile\n    elif compression == \"gzip\":\n        import gzip\n\n        compress_method = gzip.GzipFile\n    elif compression == \"bz2\":\n        import bz2\n\n        compress_method = bz2.BZ2File\n    elif compression == \"xz\":\n        compress_method = _get_lzma_file(lzma)\n    else:\n        raise ValueError(f\"Unrecognized compression type: {compression}\")\n\n    if compression == \"zip\":\n        mode = \"w\"\n        args = (dest, data)\n        method = \"writestr\"\n    else:\n        mode = \"wb\"\n        args = (data,)\n        method = \"write\"\n\n    with compress_method(path, mode=mode) as f:\n        getattr(f, method)(*args)",
                "def assert_almost_equal(\n    left,\n    right,\n    check_dtype: Union[bool, str] = \"equiv\",\n    check_less_precise: Union[bool, int] = False,\n    **kwargs,\n):\n    \"\"\"\n    Check that the left and right objects are approximately equal.\n\n    By approximately equal, we refer to objects that are numbers or that\n    contain numbers which may be equivalent to specific levels of precision.\n\n    Parameters\n    ----------\n    left : object\n    right : object\n    check_dtype : bool or {'equiv'}, default 'equiv'\n        Check dtype if both a and b are the same type. If 'equiv' is passed in,\n        then `RangeIndex` and `Int64Index` are also considered equivalent\n        when doing type checking.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. 5 digits (False) or 3 digits (True)\n        after decimal points are compared. If int, then specify the number\n        of digits to compare.\n\n        When comparing two numbers, if the first number has magnitude less\n        than 1e-5, we compare the two numbers directly and check whether\n        they are equivalent within the specified precision. Otherwise, we\n        compare the **ratio** of the second number to the first number and\n        check whether it is equivalent to 1 within the specified precision.\n    \"\"\"\n    if isinstance(left, pd.Index):\n        assert_index_equal(\n            left,\n            right,\n            check_exact=False,\n            exact=check_dtype,\n            check_less_precise=check_less_precise,\n            **kwargs,\n        )\n\n    elif isinstance(left, pd.Series):\n        assert_series_equal(\n            left,\n            right,\n            check_exact=False,\n            check_dtype=check_dtype,\n            check_less_precise=check_less_precise,\n            **kwargs,\n        )\n\n    elif isinstance(left, pd.DataFrame):\n        assert_frame_equal(\n            left,\n            right,\n            check_exact=False,\n            check_dtype=check_dtype,\n            check_less_precise=check_less_precise,\n            **kwargs,\n        )\n\n    else:\n        # Other sequences.\n        if check_dtype:\n            if is_number(left) and is_number(right):\n                # Do not compare numeric classes, like np.float64 and float.\n                pass\n            elif is_bool(left) and is_bool(right):\n                # Do not compare bool classes, like np.bool_ and bool.\n                pass\n            else:\n                if isinstance(left, np.ndarray) or isinstance(right, np.ndarray):\n                    obj = \"numpy array\"\n                else:\n                    obj = \"Input\"\n                assert_class_equal(left, right, obj=obj)\n        _testing.assert_almost_equal(\n            left,\n            right,\n            check_dtype=check_dtype,\n            check_less_precise=check_less_precise,\n            **kwargs,\n        )",
                "def _check_isinstance(left, right, cls):\n    \"\"\"\n    Helper method for our assert_* methods that ensures that\n    the two objects being compared have the right type before\n    proceeding with the comparison.\n\n    Parameters\n    ----------\n    left : The first object being compared.\n    right : The second object being compared.\n    cls : The class type to check against.\n\n    Raises\n    ------\n    AssertionError : Either `left` or `right` is not an instance of `cls`.\n    \"\"\"\n    cls_name = cls.__name__\n\n    if not isinstance(left, cls):\n        raise AssertionError(\n            f\"{cls_name} Expected type {cls}, found {type(left)} instead\"\n        )\n    if not isinstance(right, cls):\n        raise AssertionError(\n            f\"{cls_name} Expected type {cls}, found {type(right)} instead\"\n        )",
                "def assert_dict_equal(left, right, compare_keys: bool = True):\n\n    _check_isinstance(left, right, dict)\n    _testing.assert_dict_equal(left, right, compare_keys=compare_keys)",
                "def randbool(size=(), p: float = 0.5):\n    return rand(*size) <= p",
                "def rands_array(nchars, size, dtype=\"O\"):\n    \"\"\"\n    Generate an array of byte strings.\n    \"\"\"\n    retval = (\n        np.random.choice(RANDS_CHARS, size=nchars * np.prod(size))\n        .view((np.str_, nchars))\n        .reshape(size)\n    )\n    if dtype is None:\n        return retval\n    else:\n        return retval.astype(dtype)",
                "def randu_array(nchars, size, dtype=\"O\"):\n    \"\"\"\n    Generate an array of unicode strings.\n    \"\"\"\n    retval = (\n        np.random.choice(RANDU_CHARS, size=nchars * np.prod(size))\n        .view((np.unicode_, nchars))\n        .reshape(size)\n    )\n    if dtype is None:\n        return retval\n    else:\n        return retval.astype(dtype)",
                "def rands(nchars):\n    \"\"\"\n    Generate one random byte string.\n\n    See `rands_array` if you want to create an array of random strings.\n\n    \"\"\"\n    return \"\".join(np.random.choice(RANDS_CHARS, nchars))",
                "def randu(nchars):\n    \"\"\"\n    Generate one random unicode string.\n\n    See `randu_array` if you want to create an array of random unicode strings.\n\n    \"\"\"\n    return \"\".join(np.random.choice(RANDU_CHARS, nchars))",
                "def close(fignum=None):\n    from matplotlib.pyplot import get_fignums, close as _close\n\n    if fignum is None:\n        for fignum in get_fignums():\n            _close(fignum)\n    else:\n        _close(fignum)",
                "@contextmanager\ndef ensure_clean(filename=None, return_filelike=False, **kwargs):\n    \"\"\"\n    Gets a temporary path and agrees to remove on close.\n\n    Parameters\n    ----------\n    filename : str (optional)\n        if None, creates a temporary file which is then removed when out of\n        scope. if passed, creates temporary file with filename as ending.\n    return_filelike : bool (default False)\n        if True, returns a file-like which is *always* cleaned. Necessary for\n        savefig and other functions which want to append extensions.\n    **kwargs\n        Additional keywords passed in for creating a temporary file.\n        :meth:`tempFile.TemporaryFile` is used when `return_filelike` is ``True``.\n        :meth:`tempfile.mkstemp` is used when `return_filelike` is ``False``.\n        Note that the `filename` parameter will be passed in as the `suffix`\n        argument to either function.\n\n    See Also\n    --------\n    tempfile.TemporaryFile\n    tempfile.mkstemp\n    \"\"\"\n    filename = filename or \"\"\n    fd = None\n\n    kwargs[\"suffix\"] = filename\n\n    if return_filelike:\n        f = tempfile.TemporaryFile(**kwargs)\n\n        try:\n            yield f\n        finally:\n            f.close()\n    else:\n        # Don't generate tempfile if using a path with directory specified.\n        if len(os.path.dirname(filename)):\n            raise ValueError(\"Can't pass a qualified name to ensure_clean()\")\n\n        try:\n            fd, filename = tempfile.mkstemp(**kwargs)\n        except UnicodeEncodeError:\n            import pytest\n\n            pytest.skip(\"no unicode file names on this system\")\n\n        try:\n            yield filename\n        finally:\n            try:\n                os.close(fd)\n            except OSError:\n                print(f\"Couldn't close file descriptor: {fd} (file: {filename})\")\n            try:\n                if os.path.exists(filename):\n                    os.remove(filename)\n            except OSError as e:\n                print(f\"Exception on removing file: {e}\")",
                "@contextmanager\ndef ensure_clean_dir():\n    \"\"\"\n    Get a temporary directory path and agrees to remove on close.\n\n    Yields\n    ------\n    Temporary directory path\n    \"\"\"\n    directory_name = tempfile.mkdtemp(suffix=\"\")\n    try:\n        yield directory_name\n    finally:\n        try:\n            rmtree(directory_name)\n        except OSError:\n            pass",
                "@contextmanager\ndef ensure_safe_environment_variables():\n    \"\"\"\n    Get a context manager to safely set environment variables\n\n    All changes will be undone on close, hence environment variables set\n    within this contextmanager will neither persist nor change global state.\n    \"\"\"\n    saved_environ = dict(os.environ)\n    try:\n        yield\n    finally:\n        os.environ.clear()\n        os.environ.update(saved_environ)",
                "def equalContents(arr1, arr2) -> bool:\n    \"\"\"\n    Checks if the set of unique elements of arr1 and arr2 are equivalent.\n    \"\"\"\n    return frozenset(arr1) == frozenset(arr2)",
                "def assert_index_equal(\n    left: Index,\n    right: Index,\n    exact: Union[bool, str] = \"equiv\",\n    check_names: bool = True,\n    check_less_precise: Union[bool, int] = False,\n    check_exact: bool = True,\n    check_categorical: bool = True,\n    obj: str = \"Index\",\n) -> None:\n    \"\"\"\n    Check that left and right Index are equal.\n\n    Parameters\n    ----------\n    left : Index\n    right : Index\n    exact : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical. If 'equiv', then RangeIndex can be substituted for\n        Int64Index as well.\n    check_names : bool, default True\n        Whether to check the names attribute.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n    check_exact : bool, default True\n        Whether to compare number exactly.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    obj : str, default 'Index'\n        Specify object name being compared, internally used to show appropriate\n        assertion message.\n    \"\"\"\n    __tracebackhide__ = True\n\n    def _check_types(l, r, obj=\"Index\"):\n        if exact:\n            assert_class_equal(l, r, exact=exact, obj=obj)\n\n            # Skip exact dtype checking when `check_categorical` is False\n            if check_categorical:\n                assert_attr_equal(\"dtype\", l, r, obj=obj)\n\n            # allow string-like to have different inferred_types\n            if l.inferred_type in (\"string\"):\n                assert r.inferred_type in (\"string\")\n            else:\n                assert_attr_equal(\"inferred_type\", l, r, obj=obj)\n\n    def _get_ilevel_values(index, level):\n        # accept level number only\n        unique = index.levels[level]\n        level_codes = index.codes[level]\n        filled = take_1d(unique._values, level_codes, fill_value=unique._na_value)\n        values = unique._shallow_copy(filled, name=index.names[level])\n        return values\n\n    # instance validation\n    _check_isinstance(left, right, Index)\n\n    # class / dtype comparison\n    _check_types(left, right, obj=obj)\n\n    # level comparison\n    if left.nlevels != right.nlevels:\n        msg1 = f\"{obj} levels are different\"\n        msg2 = f\"{left.nlevels}, {left}\"\n        msg3 = f\"{right.nlevels}, {right}\"\n        raise_assert_detail(obj, msg1, msg2, msg3)\n\n    # length comparison\n    if len(left) != len(right):\n        msg1 = f\"{obj} length are different\"\n        msg2 = f\"{len(left)}, {left}\"\n        msg3 = f\"{len(right)}, {right}\"\n        raise_assert_detail(obj, msg1, msg2, msg3)\n\n    # MultiIndex special comparison for little-friendly error messages\n    if left.nlevels > 1:\n        left = cast(MultiIndex, left)\n        right = cast(MultiIndex, right)\n\n        for level in range(left.nlevels):\n            # cannot use get_level_values here because it can change dtype\n            llevel = _get_ilevel_values(left, level)\n            rlevel = _get_ilevel_values(right, level)\n\n            lobj = f\"MultiIndex level [{level}]\"\n            assert_index_equal(\n                llevel,\n                rlevel,\n                exact=exact,\n                check_names=check_names,\n                check_less_precise=check_less_precise,\n                check_exact=check_exact,\n                obj=lobj,\n            )\n            # get_level_values may change dtype\n            _check_types(left.levels[level], right.levels[level], obj=obj)\n\n    # skip exact index checking when `check_categorical` is False\n    if check_exact and check_categorical:\n        if not left.equals(right):\n            diff = np.sum((left.values != right.values).astype(int)) * 100.0 / len(left)\n            msg = f\"{obj} values are different ({np.round(diff, 5)} %)\"\n            raise_assert_detail(obj, msg, left, right)\n    else:\n        _testing.assert_almost_equal(\n            left.values,\n            right.values,\n            check_less_precise=check_less_precise,\n            check_dtype=exact,\n            obj=obj,\n            lobj=left,\n            robj=right,\n        )\n\n    # metadata comparison\n    if check_names:\n        assert_attr_equal(\"names\", left, right, obj=obj)\n    if isinstance(left, pd.PeriodIndex) or isinstance(right, pd.PeriodIndex):\n        assert_attr_equal(\"freq\", left, right, obj=obj)\n    if isinstance(left, pd.IntervalIndex) or isinstance(right, pd.IntervalIndex):\n        assert_interval_array_equal(left.values, right.values)\n\n    if check_categorical:\n        if is_categorical_dtype(left) or is_categorical_dtype(right):\n            assert_categorical_equal(left.values, right.values, obj=f\"{obj} category\")",
                "def assert_class_equal(left, right, exact: Union[bool, str] = True, obj=\"Input\"):\n    \"\"\"\n    Checks classes are equal.\n    \"\"\"\n    __tracebackhide__ = True\n\n    def repr_class(x):\n        if isinstance(x, Index):\n            # return Index as it is to include values in the error message\n            return x\n\n        try:\n            return type(x).__name__\n        except AttributeError:\n            return repr(type(x))\n\n    if exact == \"equiv\":\n        if type(left) != type(right):\n            # allow equivalence of Int64Index/RangeIndex\n            types = {type(left).__name__, type(right).__name__}\n            if len(types - {\"Int64Index\", \"RangeIndex\"}):\n                msg = f\"{obj} classes are not equivalent\"\n                raise_assert_detail(obj, msg, repr_class(left), repr_class(right))\n    elif exact:\n        if type(left) != type(right):\n            msg = f\"{obj} classes are different\"\n            raise_assert_detail(obj, msg, repr_class(left), repr_class(right))",
                "def assert_attr_equal(attr, left, right, obj=\"Attributes\"):\n    \"\"\"\n    checks attributes are equal. Both objects must have attribute.\n\n    Parameters\n    ----------\n    attr : str\n        Attribute name being compared.\n    left : object\n    right : object\n    obj : str, default 'Attributes'\n        Specify object name being compared, internally used to show appropriate\n        assertion message\n    \"\"\"\n    __tracebackhide__ = True\n\n    left_attr = getattr(left, attr)\n    right_attr = getattr(right, attr)\n\n    if left_attr is right_attr:\n        return True\n    elif (\n        is_number(left_attr)\n        and np.isnan(left_attr)\n        and is_number(right_attr)\n        and np.isnan(right_attr)\n    ):\n        # np.nan\n        return True\n\n    try:\n        result = left_attr == right_attr\n    except TypeError:\n        # datetimetz on rhs may raise TypeError\n        result = False\n    if not isinstance(result, bool):\n        result = result.all()\n\n    if result:\n        return True\n    else:\n        msg = f'Attribute \"{attr}\" are different'\n        raise_assert_detail(obj, msg, left_attr, right_attr)",
                "def assert_is_valid_plot_return_object(objs):\n    import matplotlib.pyplot as plt\n\n    if isinstance(objs, (pd.Series, np.ndarray)):\n        for el in objs.ravel():\n            msg = (\n                \"one of 'objs' is not a matplotlib Axes instance, \"\n                f\"type encountered {repr(type(el).__name__)}\"\n            )\n            assert isinstance(el, (plt.Axes, dict)), msg\n    else:\n        msg = (\n            \"objs is neither an ndarray of Artist instances nor a single \"\n            \"ArtistArtist instance, tuple, or dict, 'objs' is a \"\n            f\"{repr(type(objs).__name__)}\"\n        )\n        assert isinstance(objs, (plt.Artist, tuple, dict)), msg",
                "def isiterable(obj):\n    return hasattr(obj, \"__iter__\")",
                "def assert_is_sorted(seq):\n    \"\"\"Assert that the sequence is sorted.\"\"\"\n    if isinstance(seq, (Index, Series)):\n        seq = seq.values\n    # sorting does not change precisions\n    assert_numpy_array_equal(seq, np.sort(np.array(seq)))",
                "def assert_categorical_equal(\n    left, right, check_dtype=True, check_category_order=True, obj=\"Categorical\"\n):\n    \"\"\"\n    Test that Categoricals are equivalent.\n\n    Parameters\n    ----------\n    left : Categorical\n    right : Categorical\n    check_dtype : bool, default True\n        Check that integer dtype of the codes are the same\n    check_category_order : bool, default True\n        Whether the order of the categories should be compared, which\n        implies identical integer codes.  If False, only the resulting\n        values are compared.  The ordered attribute is\n        checked regardless.\n    obj : str, default 'Categorical'\n        Specify object name being compared, internally used to show appropriate\n        assertion message\n    \"\"\"\n    _check_isinstance(left, right, Categorical)\n\n    if check_category_order:\n        assert_index_equal(left.categories, right.categories, obj=f\"{obj}.categories\")\n        assert_numpy_array_equal(\n            left.codes, right.codes, check_dtype=check_dtype, obj=f\"{obj}.codes\",\n        )\n    else:\n        assert_index_equal(\n            left.categories.sort_values(),\n            right.categories.sort_values(),\n            obj=f\"{obj}.categories\",\n        )\n        assert_index_equal(\n            left.categories.take(left.codes),\n            right.categories.take(right.codes),\n            obj=f\"{obj}.values\",\n        )\n\n    assert_attr_equal(\"ordered\", left, right, obj=obj)",
                "def assert_interval_array_equal(left, right, exact=\"equiv\", obj=\"IntervalArray\"):\n    \"\"\"\n    Test that two IntervalArrays are equivalent.\n\n    Parameters\n    ----------\n    left, right : IntervalArray\n        The IntervalArrays to compare.\n    exact : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical. If 'equiv', then RangeIndex can be substituted for\n        Int64Index as well.\n    obj : str, default 'IntervalArray'\n        Specify object name being compared, internally used to show appropriate\n        assertion message\n    \"\"\"\n    _check_isinstance(left, right, IntervalArray)\n\n    assert_index_equal(left.left, right.left, exact=exact, obj=f\"{obj}.left\")\n    assert_index_equal(left.right, right.right, exact=exact, obj=f\"{obj}.left\")\n    assert_attr_equal(\"closed\", left, right, obj=obj)",
                "def assert_period_array_equal(left, right, obj=\"PeriodArray\"):\n    _check_isinstance(left, right, PeriodArray)\n\n    assert_numpy_array_equal(left._data, right._data, obj=f\"{obj}.values\")\n    assert_attr_equal(\"freq\", left, right, obj=obj)",
                "def assert_datetime_array_equal(left, right, obj=\"DatetimeArray\"):\n    __tracebackhide__ = True\n    _check_isinstance(left, right, DatetimeArray)\n\n    assert_numpy_array_equal(left._data, right._data, obj=f\"{obj}._data\")\n    assert_attr_equal(\"freq\", left, right, obj=obj)\n    assert_attr_equal(\"tz\", left, right, obj=obj)",
                "def assert_timedelta_array_equal(left, right, obj=\"TimedeltaArray\"):\n    __tracebackhide__ = True\n    _check_isinstance(left, right, TimedeltaArray)\n    assert_numpy_array_equal(left._data, right._data, obj=f\"{obj}._data\")\n    assert_attr_equal(\"freq\", left, right, obj=obj)",
                "def raise_assert_detail(obj, message, left, right, diff=None):\n    __tracebackhide__ = True\n\n    if isinstance(left, np.ndarray):\n        left = pprint_thing(left)\n    elif is_categorical_dtype(left):\n        left = repr(left)\n\n    if isinstance(right, np.ndarray):\n        right = pprint_thing(right)\n    elif is_categorical_dtype(right):\n        right = repr(right)\n\n    msg = f\"\"\"{obj} are different\n\n{message}\n[left]:  {left}\n[right]: {right}\"\"\"\n\n    if diff is not None:\n        msg += f\"\\n[diff]: {diff}\"\n\n    raise AssertionError(msg)",
                "def assert_numpy_array_equal(\n    left,\n    right,\n    strict_nan=False,\n    check_dtype=True,\n    err_msg=None,\n    check_same=None,\n    obj=\"numpy array\",\n):\n    \"\"\"\n    Check that 'np.ndarray' is equivalent.\n\n    Parameters\n    ----------\n    left, right : numpy.ndarray or iterable\n        The two arrays to be compared.\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n    check_dtype : bool, default True\n        Check dtype if both a and b are np.ndarray.\n    err_msg : str, default None\n        If provided, used as assertion message.\n    check_same : None|'copy'|'same', default None\n        Ensure left and right refer/do not refer to the same memory area.\n    obj : str, default 'numpy array'\n        Specify object name being compared, internally used to show appropriate\n        assertion message.\n    \"\"\"\n    __tracebackhide__ = True\n\n    # instance validation\n    # Show a detailed error message when classes are different\n    assert_class_equal(left, right, obj=obj)\n    # both classes must be an np.ndarray\n    _check_isinstance(left, right, np.ndarray)\n\n    def _get_base(obj):\n        return obj.base if getattr(obj, \"base\", None) is not None else obj\n\n    left_base = _get_base(left)\n    right_base = _get_base(right)\n\n    if check_same == \"same\":\n        if left_base is not right_base:\n            raise AssertionError(f\"{repr(left_base)} is not {repr(right_base)}\")\n    elif check_same == \"copy\":\n        if left_base is right_base:\n            raise AssertionError(f\"{repr(left_base)} is {repr(right_base)}\")\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\n\n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n\n            diff = diff * 100.0 / left.size\n            msg = f\"{obj} values are different ({np.round(diff, 5)} %)\"\n            raise_assert_detail(obj, msg, left, right)\n\n        raise AssertionError(err_msg)\n\n    # compare shape and values\n    if not array_equivalent(left, right, strict_nan=strict_nan):\n        _raise(left, right, err_msg)\n\n    if check_dtype:\n        if isinstance(left, np.ndarray) and isinstance(right, np.ndarray):\n            assert_attr_equal(\"dtype\", left, right, obj=obj)",
                "def assert_extension_array_equal(\n    left, right, check_dtype=True, check_less_precise=False, check_exact=False\n):\n    \"\"\"\n    Check that left and right ExtensionArrays are equal.\n\n    Parameters\n    ----------\n    left, right : ExtensionArray\n        The two arrays to compare.\n    check_dtype : bool, default True\n        Whether to check if the ExtensionArray dtypes are identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n\n    Notes\n    -----\n    Missing values are checked separately from valid values.\n    A mask of missing values is computed for each and checked to match.\n    The remaining all-valid values are cast to object dtype and checked.\n    \"\"\"\n    assert isinstance(left, ExtensionArray), \"left is not an ExtensionArray\"\n    assert isinstance(right, ExtensionArray), \"right is not an ExtensionArray\"\n    if check_dtype:\n        assert_attr_equal(\"dtype\", left, right, obj=\"ExtensionArray\")\n\n    if hasattr(left, \"asi8\") and type(right) == type(left):\n        # Avoid slow object-dtype comparisons\n        assert_numpy_array_equal(left.asi8, right.asi8)\n        return\n\n    left_na = np.asarray(left.isna())\n    right_na = np.asarray(right.isna())\n    assert_numpy_array_equal(left_na, right_na, obj=\"ExtensionArray NA mask\")\n\n    left_valid = np.asarray(left[~left_na].astype(object))\n    right_valid = np.asarray(right[~right_na].astype(object))\n    if check_exact:\n        assert_numpy_array_equal(left_valid, right_valid, obj=\"ExtensionArray\")\n    else:\n        _testing.assert_almost_equal(\n            left_valid,\n            right_valid,\n            check_dtype=check_dtype,\n            check_less_precise=check_less_precise,\n            obj=\"ExtensionArray\",\n        )",
                "def assert_series_equal(\n    left,\n    right,\n    check_dtype=True,\n    check_index_type=\"equiv\",\n    check_series_type=True,\n    check_less_precise=False,\n    check_names=True,\n    check_exact=False,\n    check_datetimelike_compat=False,\n    check_categorical=True,\n    obj=\"Series\",\n):\n    \"\"\"\n    Check that left and right Series are equal.\n\n    Parameters\n    ----------\n    left : Series\n    right : Series\n    check_dtype : bool, default True\n        Whether to check the Series dtype is identical.\n    check_index_type : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical.\n    check_series_type : bool, default True\n        Whether to check the Series class is identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n\n        When comparing two numbers, if the first number has magnitude less\n        than 1e-5, we compare the two numbers directly and check whether\n        they are equivalent within the specified precision. Otherwise, we\n        compare the **ratio** of the second number to the first number and\n        check whether it is equivalent to 1 within the specified precision.\n    check_names : bool, default True\n        Whether to check the Series and Index names attribute.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n    check_datetimelike_compat : bool, default False\n        Compare datetime-like which is comparable ignoring dtype.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    obj : str, default 'Series'\n        Specify object name being compared, internally used to show appropriate\n        assertion message.\n    \"\"\"\n    __tracebackhide__ = True\n\n    # instance validation\n    _check_isinstance(left, right, Series)\n\n    if check_series_type:\n        # ToDo: There are some tests using rhs is sparse\n        # lhs is dense. Should use assert_class_equal in future\n        assert isinstance(left, type(right))\n        # assert_class_equal(left, right, obj=obj)\n\n    # length comparison\n    if len(left) != len(right):\n        msg1 = f\"{len(left)}, {left.index}\"\n        msg2 = f\"{len(right)}, {right.index}\"\n        raise_assert_detail(obj, \"Series length are different\", msg1, msg2)\n\n    # index comparison\n    assert_index_equal(\n        left.index,\n        right.index,\n        exact=check_index_type,\n        check_names=check_names,\n        check_less_precise=check_less_precise,\n        check_exact=check_exact,\n        check_categorical=check_categorical,\n        obj=f\"{obj}.index\",\n    )\n\n    if check_dtype:\n        # We want to skip exact dtype checking when `check_categorical`\n        # is False. We'll still raise if only one is a `Categorical`,\n        # regardless of `check_categorical`\n        if (\n            is_categorical_dtype(left)\n            and is_categorical_dtype(right)\n            and not check_categorical\n        ):\n            pass\n        else:\n            assert_attr_equal(\"dtype\", left, right, obj=f\"Attributes of {obj}\")\n\n    if check_exact:\n        assert_numpy_array_equal(\n            left._internal_get_values(),\n            right._internal_get_values(),\n            check_dtype=check_dtype,\n            obj=str(obj),\n        )\n    elif check_datetimelike_compat:\n        # we want to check only if we have compat dtypes\n        # e.g. integer and M|m are NOT compat, but we can simply check\n        # the values in that case\n        if needs_i8_conversion(left) or needs_i8_conversion(right):\n\n            # datetimelike may have different objects (e.g. datetime.datetime\n            # vs Timestamp) but will compare equal\n            if not Index(left.values).equals(Index(right.values)):\n                msg = (\n                    f\"[datetimelike_compat=True] {left.values} \"\n                    f\"is not equal to {right.values}.\"\n                )\n                raise AssertionError(msg)\n        else:\n            assert_numpy_array_equal(\n                left._internal_get_values(),\n                right._internal_get_values(),\n                check_dtype=check_dtype,\n            )\n    elif is_interval_dtype(left) or is_interval_dtype(right):\n        assert_interval_array_equal(left.array, right.array)\n    elif is_extension_array_dtype(left.dtype) and is_datetime64tz_dtype(left.dtype):\n        # .values is an ndarray, but ._values is the ExtensionArray.\n        # TODO: Use .array\n        assert is_extension_array_dtype(right.dtype)\n        assert_extension_array_equal(left._values, right._values)\n    elif (\n        is_extension_array_dtype(left)\n        and not is_categorical_dtype(left)\n        and is_extension_array_dtype(right)\n        and not is_categorical_dtype(right)\n    ):\n        assert_extension_array_equal(left.array, right.array)\n    else:\n        _testing.assert_almost_equal(\n            left._internal_get_values(),\n            right._internal_get_values(),\n            check_less_precise=check_less_precise,\n            check_dtype=check_dtype,\n            obj=str(obj),\n        )\n\n    # metadata comparison\n    if check_names:\n        assert_attr_equal(\"name\", left, right, obj=obj)\n\n    if check_categorical:\n        if is_categorical_dtype(left) or is_categorical_dtype(right):\n            assert_categorical_equal(left.values, right.values, obj=f\"{obj} category\")",
                "def assert_frame_equal(\n    left,\n    right,\n    check_dtype=True,\n    check_index_type=\"equiv\",\n    check_column_type=\"equiv\",\n    check_frame_type=True,\n    check_less_precise=False,\n    check_names=True,\n    by_blocks=False,\n    check_exact=False,\n    check_datetimelike_compat=False,\n    check_categorical=True,\n    check_like=False,\n    obj=\"DataFrame\",\n):\n    \"\"\"\n    Check that left and right DataFrame are equal.\n\n    This function is intended to compare two DataFrames and output any\n    differences. Is is mostly intended for use in unit tests.\n    Additional parameters allow varying the strictness of the\n    equality checks performed.\n\n    Parameters\n    ----------\n    left : DataFrame\n        First DataFrame to compare.\n    right : DataFrame\n        Second DataFrame to compare.\n    check_dtype : bool, default True\n        Whether to check the DataFrame dtype is identical.\n    check_index_type : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical.\n    check_column_type : bool or {'equiv'}, default 'equiv'\n        Whether to check the columns class, dtype and inferred_type\n        are identical. Is passed as the ``exact`` argument of\n        :func:`assert_index_equal`.\n    check_frame_type : bool, default True\n        Whether to check the DataFrame class is identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n\n        When comparing two numbers, if the first number has magnitude less\n        than 1e-5, we compare the two numbers directly and check whether\n        they are equivalent within the specified precision. Otherwise, we\n        compare the **ratio** of the second number to the first number and\n        check whether it is equivalent to 1 within the specified precision.\n    check_names : bool, default True\n        Whether to check that the `names` attribute for both the `index`\n        and `column` attributes of the DataFrame is identical.\n    by_blocks : bool, default False\n        Specify how to compare internal data. If False, compare by columns.\n        If True, compare by blocks.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n    check_datetimelike_compat : bool, default False\n        Compare datetime-like which is comparable ignoring dtype.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    check_like : bool, default False\n        If True, ignore the order of index & columns.\n        Note: index labels must match their respective rows\n        (same as in columns) - same labels must be with the same data.\n    obj : str, default 'DataFrame'\n        Specify object name being compared, internally used to show appropriate\n        assertion message.\n\n    See Also\n    --------\n    assert_series_equal : Equivalent method for asserting Series equality.\n    DataFrame.equals : Check DataFrame equality.\n\n    Examples\n    --------\n    This example shows comparing two DataFrames that are equal\n    but with columns of differing dtypes.\n\n    >>> from pandas._testing import assert_frame_equal\n    >>> df1 = pd.DataFrame({'a': [1, 2], 'b': [3, 4]})\n    >>> df2 = pd.DataFrame({'a': [1, 2], 'b': [3.0, 4.0]})\n\n    df1 equals itself.\n\n    >>> assert_frame_equal(df1, df1)\n\n    df1 differs from df2 as column 'b' is of a different type.\n\n    >>> assert_frame_equal(df1, df2)\n    Traceback (most recent call last):\n    ...\n    AssertionError: Attributes of DataFrame.iloc[:, 1] (column name=\"b\") are different\n\n    Attribute \"dtype\" are different\n    [left]:  int64\n    [right]: float64\n\n    Ignore differing dtypes in columns with check_dtype.\n\n    >>> assert_frame_equal(df1, df2, check_dtype=False)\n    \"\"\"\n    __tracebackhide__ = True\n\n    # instance validation\n    _check_isinstance(left, right, DataFrame)\n\n    if check_frame_type:\n        assert isinstance(left, type(right))\n        # assert_class_equal(left, right, obj=obj)\n\n    # shape comparison\n    if left.shape != right.shape:\n        raise_assert_detail(\n            obj, f\"{obj} shape mismatch\", f\"{repr(left.shape)}\", f\"{repr(right.shape)}\",\n        )\n\n    if check_like:\n        left, right = left.reindex_like(right), right\n\n    # index comparison\n    assert_index_equal(\n        left.index,\n        right.index,\n        exact=check_index_type,\n        check_names=check_names,\n        check_less_precise=check_less_precise,\n        check_exact=check_exact,\n        check_categorical=check_categorical,\n        obj=f\"{obj}.index\",\n    )\n\n    # column comparison\n    assert_index_equal(\n        left.columns,\n        right.columns,\n        exact=check_column_type,\n        check_names=check_names,\n        check_less_precise=check_less_precise,\n        check_exact=check_exact,\n        check_categorical=check_categorical,\n        obj=f\"{obj}.columns\",\n    )\n\n    # compare by blocks\n    if by_blocks:\n        rblocks = right._to_dict_of_blocks()\n        lblocks = left._to_dict_of_blocks()\n        for dtype in list(set(list(lblocks.keys()) + list(rblocks.keys()))):\n            assert dtype in lblocks\n            assert dtype in rblocks\n            assert_frame_equal(\n                lblocks[dtype], rblocks[dtype], check_dtype=check_dtype, obj=obj\n            )\n\n    # compare by columns\n    else:\n        for i, col in enumerate(left.columns):\n            assert col in right\n            lcol = left.iloc[:, i]\n            rcol = right.iloc[:, i]\n            assert_series_equal(\n                lcol,\n                rcol,\n                check_dtype=check_dtype,\n                check_index_type=check_index_type,\n                check_less_precise=check_less_precise,\n                check_exact=check_exact,\n                check_names=check_names,\n                check_datetimelike_compat=check_datetimelike_compat,\n                check_categorical=check_categorical,\n                obj=f'{obj}.iloc[:, {i}] (column name=\"{col}\")',\n            )",
                "def assert_equal(left, right, **kwargs):\n    \"\"\"\n    Wrapper for tm.assert_*_equal to dispatch to the appropriate test function.\n\n    Parameters\n    ----------\n    left, right : Index, Series, DataFrame, ExtensionArray, or np.ndarray\n        The two items to be compared.\n    **kwargs\n        All keyword arguments are passed through to the underlying assert method.\n    \"\"\"\n    __tracebackhide__ = True\n\n    if isinstance(left, pd.Index):\n        assert_index_equal(left, right, **kwargs)\n    elif isinstance(left, pd.Series):\n        assert_series_equal(left, right, **kwargs)\n    elif isinstance(left, pd.DataFrame):\n        assert_frame_equal(left, right, **kwargs)\n    elif isinstance(left, IntervalArray):\n        assert_interval_array_equal(left, right, **kwargs)\n    elif isinstance(left, PeriodArray):\n        assert_period_array_equal(left, right, **kwargs)\n    elif isinstance(left, DatetimeArray):\n        assert_datetime_array_equal(left, right, **kwargs)\n    elif isinstance(left, TimedeltaArray):\n        assert_timedelta_array_equal(left, right, **kwargs)\n    elif isinstance(left, ExtensionArray):\n        assert_extension_array_equal(left, right, **kwargs)\n    elif isinstance(left, np.ndarray):\n        assert_numpy_array_equal(left, right, **kwargs)\n    elif isinstance(left, str):\n        assert kwargs == {}\n        assert left == right\n    else:\n        raise NotImplementedError(type(left))",
                "def box_expected(expected, box_cls, transpose=True):\n    \"\"\"\n    Helper function to wrap the expected output of a test in a given box_class.\n\n    Parameters\n    ----------\n    expected : np.ndarray, Index, Series\n    box_cls : {Index, Series, DataFrame}\n\n    Returns\n    -------\n    subclass of box_cls\n    \"\"\"\n    if box_cls is pd.Index:\n        expected = pd.Index(expected)\n    elif box_cls is pd.Series:\n        expected = pd.Series(expected)\n    elif box_cls is pd.DataFrame:\n        expected = pd.Series(expected).to_frame()\n        if transpose:\n            # for vector operations, we we need a DataFrame to be a single-row,\n            #  not a single-column, in order to operate against non-DataFrame\n            #  vectors of the same length.\n            expected = expected.T\n    elif box_cls is PeriodArray:\n        # the PeriodArray constructor is not as flexible as period_array\n        expected = period_array(expected)\n    elif box_cls is DatetimeArray:\n        expected = DatetimeArray(expected)\n    elif box_cls is TimedeltaArray:\n        expected = TimedeltaArray(expected)\n    elif box_cls is np.ndarray:\n        expected = np.array(expected)\n    elif box_cls is to_array:\n        expected = to_array(expected)\n    else:\n        raise NotImplementedError(box_cls)\n    return expected",
                "def to_array(obj):\n    # temporary implementation until we get pd.array in place\n    if is_period_dtype(obj):\n        return period_array(obj)\n    elif is_datetime64_dtype(obj) or is_datetime64tz_dtype(obj):\n        return DatetimeArray._from_sequence(obj)\n    elif is_timedelta64_dtype(obj):\n        return TimedeltaArray._from_sequence(obj)\n    else:\n        return np.array(obj)",
                "def assert_sp_array_equal(\n    left,\n    right,\n    check_dtype=True,\n    check_kind=True,\n    check_fill_value=True,\n    consolidate_block_indices=False,\n):\n    \"\"\"\n    Check that the left and right SparseArray are equal.\n\n    Parameters\n    ----------\n    left : SparseArray\n    right : SparseArray\n    check_dtype : bool, default True\n        Whether to check the data dtype is identical.\n    check_kind : bool, default True\n        Whether to just the kind of the sparse index for each column.\n    check_fill_value : bool, default True\n        Whether to check that left.fill_value matches right.fill_value\n    consolidate_block_indices : bool, default False\n        Whether to consolidate contiguous blocks for sparse arrays with\n        a BlockIndex. Some operations, e.g. concat, will end up with\n        block indices that could be consolidated. Setting this to true will\n        create a new BlockIndex for that array, with consolidated\n        block indices.\n    \"\"\"\n    _check_isinstance(left, right, pd.arrays.SparseArray)\n\n    assert_numpy_array_equal(left.sp_values, right.sp_values, check_dtype=check_dtype)\n\n    # SparseIndex comparison\n    assert isinstance(left.sp_index, pd._libs.sparse.SparseIndex)\n    assert isinstance(right.sp_index, pd._libs.sparse.SparseIndex)\n\n    if not check_kind:\n        left_index = left.sp_index.to_block_index()\n        right_index = right.sp_index.to_block_index()\n    else:\n        left_index = left.sp_index\n        right_index = right.sp_index\n\n    if consolidate_block_indices and left.kind == \"block\":\n        # we'll probably remove this hack...\n        left_index = left_index.to_int_index().to_block_index()\n        right_index = right_index.to_int_index().to_block_index()\n\n    if not left_index.equals(right_index):\n        raise_assert_detail(\n            \"SparseArray.index\", \"index are not equal\", left_index, right_index\n        )\n    else:\n        # Just ensure a\n        pass\n\n    if check_fill_value:\n        assert_attr_equal(\"fill_value\", left, right)\n    if check_dtype:\n        assert_attr_equal(\"dtype\", left, right)\n    assert_numpy_array_equal(left.to_dense(), right.to_dense(), check_dtype=check_dtype)",
                "def assert_contains_all(iterable, dic):\n    for k in iterable:\n        assert k in dic, f\"Did not contain item: {repr(k)}\"",
                "def assert_copy(iter1, iter2, **eql_kwargs):\n    \"\"\"\n    iter1, iter2: iterables that produce elements\n    comparable with assert_almost_equal\n\n    Checks that the elements are equal, but not\n    the same object. (Does not check that items\n    in sequences are also not the same object)\n    \"\"\"\n    for elem1, elem2 in zip(iter1, iter2):\n        assert_almost_equal(elem1, elem2, **eql_kwargs)\n        msg = (\n            f\"Expected object {repr(type(elem1))} and object {repr(type(elem2))} to be \"\n            \"different objects, but they were the same object.\"\n        )\n        assert elem1 is not elem2, msg",
                "def getCols(k):\n    return string.ascii_uppercase[:k]",
                "def makeStringIndex(k=10, name=None):\n    return Index(rands_array(nchars=10, size=k), name=name)",
                "def makeUnicodeIndex(k=10, name=None):\n    return Index(randu_array(nchars=10, size=k), name=name)",
                "def makeCategoricalIndex(k=10, n=3, name=None, **kwargs):\n    \"\"\" make a length k index or n categories \"\"\"\n    x = rands_array(nchars=4, size=n)\n    return CategoricalIndex(\n        Categorical.from_codes(np.arange(k) % n, categories=x), name=name, **kwargs\n    )",
                "def makeIntervalIndex(k=10, name=None, **kwargs):\n    \"\"\" make a length k IntervalIndex \"\"\"\n    x = np.linspace(0, 100, num=(k + 1))\n    return IntervalIndex.from_breaks(x, name=name, **kwargs)",
                "def makeBoolIndex(k=10, name=None):\n    if k == 1:\n        return Index([True], name=name)\n    elif k == 2:\n        return Index([False, True], name=name)\n    return Index([False, True] + [False] * (k - 2), name=name)",
                "def makeIntIndex(k=10, name=None):\n    return Index(list(range(k)), name=name)",
                "def makeUIntIndex(k=10, name=None):\n    return Index([2 ** 63 + i for i in range(k)], name=name)",
                "def makeRangeIndex(k=10, name=None, **kwargs):\n    return RangeIndex(0, k, 1, name=name, **kwargs)",
                "def makeFloatIndex(k=10, name=None):\n    values = sorted(np.random.random_sample(k)) - np.random.random_sample(1)\n    return Index(values * (10 ** np.random.randint(0, 9)), name=name)",
                "def makeDateIndex(k=10, freq=\"B\", name=None, **kwargs):\n    dt = datetime(2000, 1, 1)\n    dr = bdate_range(dt, periods=k, freq=freq, name=name)\n    return DatetimeIndex(dr, name=name, **kwargs)",
                "def makeTimedeltaIndex(k=10, freq=\"D\", name=None, **kwargs):\n    return pd.timedelta_range(start=\"1 day\", periods=k, freq=freq, name=name, **kwargs)",
                "def makePeriodIndex(k=10, name=None, **kwargs):\n    dt = datetime(2000, 1, 1)\n    dr = pd.period_range(start=dt, periods=k, freq=\"B\", name=name, **kwargs)\n    return dr",
                "def makeMultiIndex(k=10, names=None, **kwargs):\n    return MultiIndex.from_product(((\"foo\", \"bar\"), (1, 2)), names=names, **kwargs)",
                "def _make_timeseries(start=\"2000-01-01\", end=\"2000-12-31\", freq=\"1D\", seed=None):\n    \"\"\"\n    Make a DataFrame with a DatetimeIndex\n\n    Parameters\n    ----------\n    start : str or Timestamp, default \"2000-01-01\"\n        The start of the index. Passed to date_range with `freq`.\n    end : str or Timestamp, default \"2000-12-31\"\n        The end of the index. Passed to date_range with `freq`.\n    freq : str or Freq\n        The frequency to use for the DatetimeIndex\n    seed : int, optional\n        The random state seed.\n\n        * name : object dtype with string names\n        * id : int dtype with\n        * x, y : float dtype\n\n    Examples\n    --------\n    >>> _make_timeseries()\n                  id    name         x         y\n    timestamp\n    2000-01-01   982   Frank  0.031261  0.986727\n    2000-01-02  1025   Edith -0.086358 -0.032920\n    2000-01-03   982   Edith  0.473177  0.298654\n    2000-01-04  1009   Sarah  0.534344 -0.750377\n    2000-01-05   963   Zelda -0.271573  0.054424\n    ...          ...     ...       ...       ...\n    2000-12-27   980  Ingrid -0.132333 -0.422195\n    2000-12-28   972   Frank -0.376007 -0.298687\n    2000-12-29  1009  Ursula -0.865047 -0.503133\n    2000-12-30  1000  Hannah -0.063757 -0.507336\n    2000-12-31   972     Tim -0.869120  0.531685\n    \"\"\"\n    index = pd.date_range(start=start, end=end, freq=freq, name=\"timestamp\")\n    n = len(index)\n    state = np.random.RandomState(seed)\n    columns = {\n        \"name\": state.choice(_names, size=n),\n        \"id\": state.poisson(1000, size=n),\n        \"x\": state.rand(n) * 2 - 1,\n        \"y\": state.rand(n) * 2 - 1,\n    }\n    df = pd.DataFrame(columns, index=index, columns=sorted(columns))\n    if df.index[-1] == end:\n        df = df.iloc[:-1]\n    return df",
                "def all_index_generator(k=10):\n    \"\"\"\n    Generator which can be iterated over to get instances of all the various\n    index classes.\n\n    Parameters\n    ----------\n    k: length of each of the index instances\n    \"\"\"\n    all_make_index_funcs = [\n        makeIntIndex,\n        makeFloatIndex,\n        makeStringIndex,\n        makeUnicodeIndex,\n        makeDateIndex,\n        makePeriodIndex,\n        makeTimedeltaIndex,\n        makeBoolIndex,\n        makeRangeIndex,\n        makeIntervalIndex,\n        makeCategoricalIndex,\n    ]\n    for make_index_func in all_make_index_funcs:\n        yield make_index_func(k=k)",
                "def index_subclass_makers_generator():\n    make_index_funcs = [\n        makeDateIndex,\n        makePeriodIndex,\n        makeTimedeltaIndex,\n        makeRangeIndex,\n        makeIntervalIndex,\n        makeCategoricalIndex,\n        makeMultiIndex,\n    ]\n    for make_index_func in make_index_funcs:\n        yield make_index_func",
                "def all_timeseries_index_generator(k=10):\n    \"\"\"\n    Generator which can be iterated over to get instances of all the classes\n    which represent time-series.\n\n    Parameters\n    ----------\n    k: length of each of the index instances\n    \"\"\"\n    make_index_funcs = [makeDateIndex, makePeriodIndex, makeTimedeltaIndex]\n    for make_index_func in make_index_funcs:\n        yield make_index_func(k=k)",
                "def makeFloatSeries(name=None):\n    index = makeStringIndex(N)\n    return Series(randn(N), index=index, name=name)",
                "def makeStringSeries(name=None):\n    index = makeStringIndex(N)\n    return Series(randn(N), index=index, name=name)",
                "def makeObjectSeries(name=None):\n    data = makeStringIndex(N)\n    data = Index(data, dtype=object)\n    index = makeStringIndex(N)\n    return Series(data, index=index, name=name)",
                "def getSeriesData():\n    index = makeStringIndex(N)\n    return {c: Series(randn(N), index=index) for c in getCols(K)}",
                "def makeTimeSeries(nper=None, freq=\"B\", name=None):\n    if nper is None:\n        nper = N\n    return Series(randn(nper), index=makeDateIndex(nper, freq=freq), name=name)",
                "def makePeriodSeries(nper=None, name=None):\n    if nper is None:\n        nper = N\n    return Series(randn(nper), index=makePeriodIndex(nper), name=name)",
                "def getTimeSeriesData(nper=None, freq=\"B\"):\n    return {c: makeTimeSeries(nper, freq) for c in getCols(K)}",
                "def getPeriodData(nper=None):\n    return {c: makePeriodSeries(nper) for c in getCols(K)}",
                "def makeTimeDataFrame(nper=None, freq=\"B\"):\n    data = getTimeSeriesData(nper, freq)\n    return DataFrame(data)",
                "def makeDataFrame():\n    data = getSeriesData()\n    return DataFrame(data)",
                "def getMixedTypeDict():\n    index = Index([\"a\", \"b\", \"c\", \"d\", \"e\"])\n\n    data = {\n        \"A\": [0.0, 1.0, 2.0, 3.0, 4.0],\n        \"B\": [0.0, 1.0, 0.0, 1.0, 0.0],\n        \"C\": [\"foo1\", \"foo2\", \"foo3\", \"foo4\", \"foo5\"],\n        \"D\": bdate_range(\"1/1/2009\", periods=5),\n    }\n\n    return index, data",
                "def makeMixedDataFrame():\n    return DataFrame(getMixedTypeDict()[1])",
                "def makePeriodFrame(nper=None):\n    data = getPeriodData(nper)\n    return DataFrame(data)",
                "def makeCustomIndex(\n    nentries, nlevels, prefix=\"#\", names=False, ndupe_l=None, idx_type=None\n):\n    \"\"\"\n    Create an index/multindex with given dimensions, levels, names, etc'\n\n    nentries - number of entries in index\n    nlevels - number of levels (> 1 produces multindex)\n    prefix - a string prefix for labels\n    names - (Optional), bool or list of strings. if True will use default\n       names, if false will use no names, if a list is given, the name of\n       each level in the index will be taken from the list.\n    ndupe_l - (Optional), list of ints, the number of rows for which the\n       label will repeated at the corresponding level, you can specify just\n       the first few, the rest will use the default ndupe_l of 1.\n       len(ndupe_l) <= nlevels.\n    idx_type - \"i\"/\"f\"/\"s\"/\"u\"/\"dt\"/\"p\"/\"td\".\n       If idx_type is not None, `idx_nlevels` must be 1.\n       \"i\"/\"f\" creates an integer/float index,\n       \"s\"/\"u\" creates a string/unicode index\n       \"dt\" create a datetime index.\n       \"td\" create a datetime index.\n\n        if unspecified, string labels will be generated.\n    \"\"\"\n    if ndupe_l is None:\n        ndupe_l = [1] * nlevels\n    assert is_sequence(ndupe_l) and len(ndupe_l) <= nlevels\n    assert names is None or names is False or names is True or len(names) is nlevels\n    assert idx_type is None or (\n        idx_type in (\"i\", \"f\", \"s\", \"u\", \"dt\", \"p\", \"td\") and nlevels == 1\n    )\n\n    if names is True:\n        # build default names\n        names = [prefix + str(i) for i in range(nlevels)]\n    if names is False:\n        # pass None to index constructor for no name\n        names = None\n\n    # make singleton case uniform\n    if isinstance(names, str) and nlevels == 1:\n        names = [names]\n\n    # specific 1D index type requested?\n    idx_func = dict(\n        i=makeIntIndex,\n        f=makeFloatIndex,\n        s=makeStringIndex,\n        u=makeUnicodeIndex,\n        dt=makeDateIndex,\n        td=makeTimedeltaIndex,\n        p=makePeriodIndex,\n    ).get(idx_type)\n    if idx_func:\n        idx = idx_func(nentries)\n        # but we need to fill in the name\n        if names:\n            idx.name = names[0]\n        return idx\n    elif idx_type is not None:\n        raise ValueError(\n            f\"{repr(idx_type)} is not a legal value for `idx_type`, \"\n            \"use  'i'/'f'/'s'/'u'/'dt'/'p'/'td'.\"\n        )\n\n    if len(ndupe_l) < nlevels:\n        ndupe_l.extend([1] * (nlevels - len(ndupe_l)))\n    assert len(ndupe_l) == nlevels\n\n    assert all(x > 0 for x in ndupe_l)\n\n    tuples = []\n    for i in range(nlevels):\n\n        def keyfunc(x):\n            import re\n\n            numeric_tuple = re.sub(r\"[^\\d_]_?\", \"\", x).split(\"_\")\n            return [int(num) for num in numeric_tuple]\n\n        # build a list of lists to create the index from\n        div_factor = nentries // ndupe_l[i] + 1\n        cnt = Counter()\n        for j in range(div_factor):\n            label = f\"{prefix}_l{i}_g{j}\"\n            cnt[label] = ndupe_l[i]\n        # cute Counter trick\n        result = sorted(cnt.elements(), key=keyfunc)[:nentries]\n        tuples.append(result)\n\n    tuples = list(zip(*tuples))\n\n    # convert tuples to index\n    if nentries == 1:\n        # we have a single level of tuples, i.e. a regular Index\n        index = Index(tuples[0], name=names[0])\n    elif nlevels == 1:\n        name = None if names is None else names[0]\n        index = Index((x[0] for x in tuples), name=name)\n    else:\n        index = MultiIndex.from_tuples(tuples, names=names)\n    return index",
                "def makeCustomDataframe(\n    nrows,\n    ncols,\n    c_idx_names=True,\n    r_idx_names=True,\n    c_idx_nlevels=1,\n    r_idx_nlevels=1,\n    data_gen_f=None,\n    c_ndupe_l=None,\n    r_ndupe_l=None,\n    dtype=None,\n    c_idx_type=None,\n    r_idx_type=None,\n):\n    \"\"\"\n    Create a DataFrame using supplied parameters.\n\n    Parameters\n    ----------\n    nrows,  ncols - number of data rows/cols\n    c_idx_names, idx_names  - False/True/list of strings,  yields No names ,\n            default names or uses the provided names for the levels of the\n            corresponding index. You can provide a single string when\n            c_idx_nlevels ==1.\n    c_idx_nlevels - number of levels in columns index. > 1 will yield MultiIndex\n    r_idx_nlevels - number of levels in rows index. > 1 will yield MultiIndex\n    data_gen_f - a function f(row,col) which return the data value\n            at that position, the default generator used yields values of the form\n            \"RxCy\" based on position.\n    c_ndupe_l, r_ndupe_l - list of integers, determines the number\n            of duplicates for each label at a given level of the corresponding\n            index. The default `None` value produces a multiplicity of 1 across\n            all levels, i.e. a unique index. Will accept a partial list of length\n            N < idx_nlevels, for just the first N levels. If ndupe doesn't divide\n            nrows/ncol, the last label might have lower multiplicity.\n    dtype - passed to the DataFrame constructor as is, in case you wish to\n            have more control in conjunction with a custom `data_gen_f`\n    r_idx_type, c_idx_type -  \"i\"/\"f\"/\"s\"/\"u\"/\"dt\"/\"td\".\n        If idx_type is not None, `idx_nlevels` must be 1.\n        \"i\"/\"f\" creates an integer/float index,\n        \"s\"/\"u\" creates a string/unicode index\n        \"dt\" create a datetime index.\n        \"td\" create a timedelta index.\n\n            if unspecified, string labels will be generated.\n\n    Examples\n    --------\n    # 5 row, 3 columns, default names on both, single index on both axis\n    >> makeCustomDataframe(5,3)\n\n    # make the data a random int between 1 and 100\n    >> mkdf(5,3,data_gen_f=lambda r,c:randint(1,100))\n\n    # 2-level multiindex on rows with each label duplicated\n    # twice on first level, default names on both axis, single\n    # index on both axis\n    >> a=makeCustomDataframe(5,3,r_idx_nlevels=2,r_ndupe_l=[2])\n\n    # DatetimeIndex on row, index with unicode labels on columns\n    # no names on either axis\n    >> a=makeCustomDataframe(5,3,c_idx_names=False,r_idx_names=False,\n                             r_idx_type=\"dt\",c_idx_type=\"u\")\n\n    # 4-level multindex on rows with names provided, 2-level multindex\n    # on columns with default labels and default names.\n    >> a=makeCustomDataframe(5,3,r_idx_nlevels=4,\n                             r_idx_names=[\"FEE\",\"FI\",\"FO\",\"FAM\"],\n                             c_idx_nlevels=2)\n\n    >> a=mkdf(5,3,r_idx_nlevels=2,c_idx_nlevels=4)\n    \"\"\"\n    assert c_idx_nlevels > 0\n    assert r_idx_nlevels > 0\n    assert r_idx_type is None or (\n        r_idx_type in (\"i\", \"f\", \"s\", \"u\", \"dt\", \"p\", \"td\") and r_idx_nlevels == 1\n    )\n    assert c_idx_type is None or (\n        c_idx_type in (\"i\", \"f\", \"s\", \"u\", \"dt\", \"p\", \"td\") and c_idx_nlevels == 1\n    )\n\n    columns = makeCustomIndex(\n        ncols,\n        nlevels=c_idx_nlevels,\n        prefix=\"C\",\n        names=c_idx_names,\n        ndupe_l=c_ndupe_l,\n        idx_type=c_idx_type,\n    )\n    index = makeCustomIndex(\n        nrows,\n        nlevels=r_idx_nlevels,\n        prefix=\"R\",\n        names=r_idx_names,\n        ndupe_l=r_ndupe_l,\n        idx_type=r_idx_type,\n    )\n\n    # by default, generate data based on location\n    if data_gen_f is None:\n        data_gen_f = lambda r, c: f\"R{r}C{c}\"\n\n    data = [[data_gen_f(r, c) for c in range(ncols)] for r in range(nrows)]\n\n    return DataFrame(data, index, columns, dtype=dtype)",
                "def _create_missing_idx(nrows, ncols, density, random_state=None):\n    if random_state is None:\n        random_state = np.random\n    else:\n        random_state = np.random.RandomState(random_state)\n\n    # below is cribbed from scipy.sparse\n    size = int(np.round((1 - density) * nrows * ncols))\n    # generate a few more to ensure unique values\n    min_rows = 5\n    fac = 1.02\n    extra_size = min(size + min_rows, fac * size)\n\n    def _gen_unique_rand(rng, _extra_size):\n        ind = rng.rand(int(_extra_size))\n        return np.unique(np.floor(ind * nrows * ncols))[:size]\n\n    ind = _gen_unique_rand(random_state, extra_size)\n    while ind.size < size:\n        extra_size *= 1.05\n        ind = _gen_unique_rand(random_state, extra_size)\n\n    j = np.floor(ind * 1.0 / nrows).astype(int)\n    i = (ind - j * nrows).astype(int)\n    return i.tolist(), j.tolist()",
                "def makeMissingCustomDataframe(\n    nrows,\n    ncols,\n    density=0.9,\n    random_state=None,\n    c_idx_names=True,\n    r_idx_names=True,\n    c_idx_nlevels=1,\n    r_idx_nlevels=1,\n    data_gen_f=None,\n    c_ndupe_l=None,\n    r_ndupe_l=None,\n    dtype=None,\n    c_idx_type=None,\n    r_idx_type=None,\n):\n    \"\"\"\n    Parameters\n    ----------\n    Density : float, optional\n        Float in (0, 1) that gives the percentage of non-missing numbers in\n        the DataFrame.\n    random_state : {np.random.RandomState, int}, optional\n        Random number generator or random seed.\n\n    See makeCustomDataframe for descriptions of the rest of the parameters.\n    \"\"\"\n    df = makeCustomDataframe(\n        nrows,\n        ncols,\n        c_idx_names=c_idx_names,\n        r_idx_names=r_idx_names,\n        c_idx_nlevels=c_idx_nlevels,\n        r_idx_nlevels=r_idx_nlevels,\n        data_gen_f=data_gen_f,\n        c_ndupe_l=c_ndupe_l,\n        r_ndupe_l=r_ndupe_l,\n        dtype=dtype,\n        c_idx_type=c_idx_type,\n        r_idx_type=r_idx_type,\n    )\n\n    i, j = _create_missing_idx(nrows, ncols, density, random_state)\n    df.values[i, j] = np.nan\n    return df",
                "def makeMissingDataframe(density=0.9, random_state=None):\n    df = makeDataFrame()\n    i, j = _create_missing_idx(*df.shape, density=density, random_state=random_state)\n    df.values[i, j] = np.nan\n    return df",
                "def optional_args(decorator):\n    \"\"\"\n    allows a decorator to take optional positional and keyword arguments.\n    Assumes that taking a single, callable, positional argument means that\n    it is decorating a function, i.e. something like this::\n\n        @my_decorator\n        def function(): pass\n\n    Calls decorator with decorator(f, *args, **kwargs)\n    \"\"\"\n\n    @wraps(decorator)\n    def wrapper(*args, **kwargs):\n        def dec(f):\n            return decorator(f, *args, **kwargs)\n\n        is_decorating = not kwargs and len(args) == 1 and callable(args[0])\n        if is_decorating:\n            f = args[0]\n            args = []\n            return dec(f)\n        else:\n            return dec\n\n    return wrapper",
                "def _get_default_network_errors():\n    # Lazy import for http.client because it imports many things from the stdlib\n    import http.client\n\n    return (IOError, http.client.HTTPException, TimeoutError)",
                "def can_connect(url, error_classes=None):\n    \"\"\"\n    Try to connect to the given url. True if succeeds, False if IOError\n    raised\n\n    Parameters\n    ----------\n    url : basestring\n        The URL to try to connect to\n\n    Returns\n    -------\n    connectable : bool\n        Return True if no IOError (unable to connect) or URLError (bad url) was\n        raised\n    \"\"\"\n    if error_classes is None:\n        error_classes = _get_default_network_errors()\n\n    try:\n        with urlopen(url):\n            pass\n    except error_classes:\n        return False\n    else:\n        return True",
                "@optional_args\ndef network(\n    t,\n    url=\"http://www.google.com\",\n    raise_on_error=_RAISE_NETWORK_ERROR_DEFAULT,\n    check_before_test=False,\n    error_classes=None,\n    skip_errnos=_network_errno_vals,\n    _skip_on_messages=_network_error_messages,\n):\n    \"\"\"\n    Label a test as requiring network connection and, if an error is\n    encountered, only raise if it does not find a network connection.\n\n    In comparison to ``network``, this assumes an added contract to your test:\n    you must assert that, under normal conditions, your test will ONLY fail if\n    it does not have network connectivity.\n\n    You can call this in 3 ways: as a standard decorator, with keyword\n    arguments, or with a positional argument that is the url to check.\n\n    Parameters\n    ----------\n    t : callable\n        The test requiring network connectivity.\n    url : path\n        The url to test via ``pandas.io.common.urlopen`` to check\n        for connectivity. Defaults to 'http://www.google.com'.\n    raise_on_error : bool\n        If True, never catches errors.\n    check_before_test : bool\n        If True, checks connectivity before running the test case.\n    error_classes : tuple or Exception\n        error classes to ignore. If not in ``error_classes``, raises the error.\n        defaults to IOError. Be careful about changing the error classes here.\n    skip_errnos : iterable of int\n        Any exception that has .errno or .reason.erno set to one\n        of these values will be skipped with an appropriate\n        message.\n    _skip_on_messages: iterable of string\n        any exception e for which one of the strings is\n        a substring of str(e) will be skipped with an appropriate\n        message. Intended to suppress errors where an errno isn't available.\n\n    Notes\n    -----\n    * ``raise_on_error`` supercedes ``check_before_test``\n\n    Returns\n    -------\n    t : callable\n        The decorated test ``t``, with checks for connectivity errors.\n\n    Example\n    -------\n\n    Tests decorated with @network will fail if it's possible to make a network\n    connection to another URL (defaults to google.com)::\n\n      >>> from pandas._testing import network\n      >>> from pandas.io.common import urlopen\n      >>> @network\n      ... def test_network():\n      ...     with urlopen(\"rabbit://bonanza.com\"):\n      ...         pass\n      Traceback\n         ...\n      URLError: <urlopen error unknown url type: rabit>\n\n      You can specify alternative URLs::\n\n        >>> @network(\"http://www.yahoo.com\")\n        ... def test_something_with_yahoo():\n        ...    raise IOError(\"Failure Message\")\n        >>> test_something_with_yahoo()\n        Traceback (most recent call last):\n            ...\n        IOError: Failure Message\n\n    If you set check_before_test, it will check the url first and not run the\n    test on failure::\n\n        >>> @network(\"failing://url.blaher\", check_before_test=True)\n        ... def test_something():\n        ...     print(\"I ran!\")\n        ...     raise ValueError(\"Failure\")\n        >>> test_something()\n        Traceback (most recent call last):\n            ...\n\n    Errors not related to networking will always be raised.\n    \"\"\"\n    from pytest import skip\n\n    if error_classes is None:\n        error_classes = _get_default_network_errors()\n\n    t.network = True\n\n    @wraps(t)\n    def wrapper(*args, **kwargs):\n        if check_before_test and not raise_on_error:\n            if not can_connect(url, error_classes):\n                skip()\n        try:\n            return t(*args, **kwargs)\n        except Exception as err:\n            errno = getattr(err, \"errno\", None)\n            if not errno and hasattr(errno, \"reason\"):\n                errno = getattr(err.reason, \"errno\", None)\n\n            if errno in skip_errnos:\n                skip(f\"Skipping test due to known errno and error {err}\")\n\n            e_str = str(err)\n\n            if any(m.lower() in e_str.lower() for m in _skip_on_messages):\n                skip(\n                    f\"Skipping test because exception message is known and error {err}\"\n                )\n\n            if not isinstance(err, error_classes):\n                raise\n\n            if raise_on_error or can_connect(url, error_classes):\n                raise\n            else:\n                skip(f\"Skipping test due to lack of connectivity and error {err}\")\n\n    return wrapper",
                "@contextmanager\ndef assert_produces_warning(\n    expected_warning=Warning,\n    filter_level=\"always\",\n    clear=None,\n    check_stacklevel=True,\n    raise_on_extra_warnings=True,\n):\n    \"\"\"\n    Context manager for running code expected to either raise a specific\n    warning, or not raise any warnings. Verifies that the code raises the\n    expected warning, and that it does not raise any other unexpected\n    warnings. It is basically a wrapper around ``warnings.catch_warnings``.\n\n    Parameters\n    ----------\n    expected_warning : {Warning, False, None}, default Warning\n        The type of Exception raised. ``exception.Warning`` is the base\n        class for all warnings. To check that no warning is returned,\n        specify ``False`` or ``None``.\n    filter_level : str or None, default \"always\"\n        Specifies whether warnings are ignored, displayed, or turned\n        into errors.\n        Valid values are:\n\n        * \"error\" - turns matching warnings into exceptions\n        * \"ignore\" - discard the warning\n        * \"always\" - always emit a warning\n        * \"default\" - print the warning the first time it is generated\n          from each location\n        * \"module\" - print the warning the first time it is generated\n          from each module\n        * \"once\" - print the warning the first time it is generated\n\n    clear : str, default None\n        If not ``None`` then remove any previously raised warnings from\n        the ``__warningsregistry__`` to ensure that no warning messages are\n        suppressed by this context manager. If ``None`` is specified,\n        the ``__warningsregistry__`` keeps track of which warnings have been\n        shown, and does not show them again.\n    check_stacklevel : bool, default True\n        If True, displays the line that called the function containing\n        the warning to show were the function is called. Otherwise, the\n        line that implements the function is displayed.\n    raise_on_extra_warnings : bool, default True\n        Whether extra warnings not of the type `expected_warning` should\n        cause the test to fail.\n\n    Examples\n    --------\n    >>> import warnings\n    >>> with assert_produces_warning():\n    ...     warnings.warn(UserWarning())\n    ...\n    >>> with assert_produces_warning(False):\n    ...     warnings.warn(RuntimeWarning())\n    ...\n    Traceback (most recent call last):\n        ...\n    AssertionError: Caused unexpected warning(s): ['RuntimeWarning'].\n    >>> with assert_produces_warning(UserWarning):\n    ...     warnings.warn(RuntimeWarning())\n    Traceback (most recent call last):\n        ...\n    AssertionError: Did not see expected warning of class 'UserWarning'.\n\n    ..warn:: This is *not* thread-safe.\n    \"\"\"\n    __tracebackhide__ = True\n\n    with warnings.catch_warnings(record=True) as w:\n\n        if clear is not None:\n            # make sure that we are clearing these warnings\n            # if they have happened before\n            # to guarantee that we will catch them\n            if not is_list_like(clear):\n                clear = [clear]\n            for m in clear:\n                try:\n                    m.__warningregistry__.clear()\n                except AttributeError:\n                    # module may not have __warningregistry__\n                    pass\n\n        saw_warning = False\n        warnings.simplefilter(filter_level)\n        yield w\n        extra_warnings = []\n\n        for actual_warning in w:\n            if expected_warning and issubclass(\n                actual_warning.category, expected_warning\n            ):\n                saw_warning = True\n\n                if check_stacklevel and issubclass(\n                    actual_warning.category, (FutureWarning, DeprecationWarning)\n                ):\n                    from inspect import getframeinfo, stack\n\n                    caller = getframeinfo(stack()[2][0])\n                    msg = (\n                        \"Warning not set with correct stacklevel. \"\n                        f\"File where warning is raised: {actual_warning.filename} != \"\n                        f\"{caller.filename}. Warning message: {actual_warning.message}\"\n                    )\n                    assert actual_warning.filename == caller.filename, msg\n            else:\n                extra_warnings.append(\n                    (\n                        actual_warning.category.__name__,\n                        actual_warning.message,\n                        actual_warning.filename,\n                        actual_warning.lineno,\n                    )\n                )\n        if expected_warning:\n            msg = (\n                f\"Did not see expected warning of class \"\n                f\"{repr(expected_warning.__name__)}\"\n            )\n            assert saw_warning, msg\n        if raise_on_extra_warnings and extra_warnings:\n            raise AssertionError(\n                f\"Caused unexpected warning(s): {repr(extra_warnings)}\"\n            )",
                "@contextmanager\ndef with_csv_dialect(name, **kwargs):\n    \"\"\"\n    Context manager to temporarily register a CSV dialect for parsing CSV.\n\n    Parameters\n    ----------\n    name : str\n        The name of the dialect.\n    kwargs : mapping\n        The parameters for the dialect.\n\n    Raises\n    ------\n    ValueError : the name of the dialect conflicts with a builtin one.\n\n    See Also\n    --------\n    csv : Python's CSV library.\n    \"\"\"\n    import csv\n\n    _BUILTIN_DIALECTS = {\"excel\", \"excel-tab\", \"unix\"}\n\n    if name in _BUILTIN_DIALECTS:\n        raise ValueError(\"Cannot override builtin dialect.\")\n\n    csv.register_dialect(name, **kwargs)\n    yield\n    csv.unregister_dialect(name)",
                "@contextmanager\ndef use_numexpr(use, min_elements=None):\n    from pandas.core.computation import expressions as expr\n\n    if min_elements is None:\n        min_elements = expr._MIN_ELEMENTS\n\n    olduse = expr._USE_NUMEXPR\n    oldmin = expr._MIN_ELEMENTS\n    expr.set_use_numexpr(use)\n    expr._MIN_ELEMENTS = min_elements\n    yield\n    expr._MIN_ELEMENTS = oldmin\n    expr.set_use_numexpr(olduse)",
                "def test_parallel(num_threads=2, kwargs_list=None):\n    \"\"\"\n    Decorator to run the same function multiple times in parallel.\n\n    Parameters\n    ----------\n    num_threads : int, optional\n        The number of times the function is run in parallel.\n    kwargs_list : list of dicts, optional\n        The list of kwargs to update original\n        function kwargs on different threads.\n\n    Notes\n    -----\n    This decorator does not pass the return value of the decorated function.\n\n    Original from scikit-image:\n\n    https://github.com/scikit-image/scikit-image/pull/1519\n\n    \"\"\"\n    assert num_threads > 0\n    has_kwargs_list = kwargs_list is not None\n    if has_kwargs_list:\n        assert len(kwargs_list) == num_threads\n    import threading\n\n    def wrapper(func):\n        @wraps(func)\n        def inner(*args, **kwargs):\n            if has_kwargs_list:\n                update_kwargs = lambda i: dict(kwargs, **kwargs_list[i])\n            else:\n                update_kwargs = lambda i: kwargs\n            threads = []\n            for i in range(num_threads):\n                updated_kwargs = update_kwargs(i)\n                thread = threading.Thread(target=func, args=args, kwargs=updated_kwargs)\n                threads.append(thread)\n            for thread in threads:\n                thread.start()\n            for thread in threads:\n                thread.join()\n\n        return inner\n\n    return wrapper",
                "@contextmanager\ndef set_timezone(tz: str):\n    \"\"\"\n    Context manager for temporarily setting a timezone.\n\n    Parameters\n    ----------\n    tz : str\n        A string representing a valid timezone.\n\n    Examples\n    --------\n    >>> from datetime import datetime\n    >>> from dateutil.tz import tzlocal\n    >>> tzlocal().tzname(datetime.now())\n    'IST'\n\n    >>> with set_timezone('US/Eastern'):\n    ...     tzlocal().tzname(datetime.now())\n    ...\n    'EDT'\n    \"\"\"\n    import os\n    import time\n\n    def setTZ(tz):\n        if tz is None:\n            try:\n                del os.environ[\"TZ\"]\n            except KeyError:\n                pass\n        else:\n            os.environ[\"TZ\"] = tz\n            time.tzset()\n\n    orig_tz = os.environ.get(\"TZ\")\n    setTZ(tz)\n    try:\n        yield\n    finally:\n        setTZ(orig_tz)",
                "def _make_skipna_wrapper(alternative, skipna_alternative=None):\n    \"\"\"\n    Create a function for calling on an array.\n\n    Parameters\n    ----------\n    alternative : function\n        The function to be called on the array with no NaNs.\n        Only used when 'skipna_alternative' is None.\n    skipna_alternative : function\n        The function to be called on the original array\n\n    Returns\n    -------\n    function\n    \"\"\"\n    if skipna_alternative:\n\n        def skipna_wrapper(x):\n            return skipna_alternative(x.values)\n\n    else:\n\n        def skipna_wrapper(x):\n            nona = x.dropna()\n            if len(nona) == 0:\n                return np.nan\n            return alternative(nona)\n\n    return skipna_wrapper",
                "def convert_rows_list_to_csv_str(rows_list: List[str]):\n    \"\"\"\n    Convert list of CSV rows to single CSV-formatted string for current OS.\n\n    This method is used for creating expected value of to_csv() method.\n\n    Parameters\n    ----------\n    rows_list : List[str]\n        Each element represents the row of csv.\n\n    Returns\n    -------\n    str\n        Expected output of to_csv() in current OS.\n    \"\"\"\n    sep = os.linesep\n    expected = sep.join(rows_list) + sep\n    return expected",
                "def external_error_raised(\n    expected_exception: Type[Exception],\n) -> Callable[[Type[Exception], None], None]:\n    \"\"\"\n    Helper function to mark pytest.raises that have an external error message.\n\n    Parameters\n    ----------\n    expected_exception : Exception\n        Expected error to raise.\n\n    Returns\n    -------\n    Callable\n        Regular `pytest.raises` function with `match` equal to `None`.\n    \"\"\"\n    import pytest\n\n    return pytest.raises(expected_exception, match=None)",
                "def _check_types(l, r, obj=\"Index\"):\n    if exact:\n        assert_class_equal(l, r, exact=exact, obj=obj)\n\n        # Skip exact dtype checking when `check_categorical` is False\n        if check_categorical:\n            assert_attr_equal(\"dtype\", l, r, obj=obj)\n\n        # allow string-like to have different inferred_types\n        if l.inferred_type in (\"string\"):\n            assert r.inferred_type in (\"string\")\n        else:\n            assert_attr_equal(\"inferred_type\", l, r, obj=obj)",
                "def _get_ilevel_values(index, level):\n    # accept level number only\n    unique = index.levels[level]\n    level_codes = index.codes[level]\n    filled = take_1d(unique._values, level_codes, fill_value=unique._na_value)\n    values = unique._shallow_copy(filled, name=index.names[level])\n    return values",
                "def repr_class(x):\n    if isinstance(x, Index):\n        # return Index as it is to include values in the error message\n        return x\n\n    try:\n        return type(x).__name__\n    except AttributeError:\n        return repr(type(x))",
                "def _get_base(obj):\n    return obj.base if getattr(obj, \"base\", None) is not None else obj",
                "def _raise(left, right, err_msg):\n    if err_msg is None:\n        if left.shape != right.shape:\n            raise_assert_detail(\n                obj, f\"{obj} shapes are different\", left.shape, right.shape,\n            )\n\n        diff = 0\n        for l, r in zip(left, right):\n            # count up differences\n            if not array_equivalent(l, r, strict_nan=strict_nan):\n                diff += 1\n\n        diff = diff * 100.0 / left.size\n        msg = f\"{obj} values are different ({np.round(diff, 5)} %)\"\n        raise_assert_detail(obj, msg, left, right)\n\n    raise AssertionError(err_msg)",
                "def _gen_unique_rand(rng, _extra_size):\n    ind = rng.rand(int(_extra_size))\n    return np.unique(np.floor(ind * nrows * ncols))[:size]",
                "@wraps(decorator)\ndef wrapper(*args, **kwargs):\n    def dec(f):\n        return decorator(f, *args, **kwargs)\n\n    is_decorating = not kwargs and len(args) == 1 and callable(args[0])\n    if is_decorating:\n        f = args[0]\n        args = []\n        return dec(f)\n    else:\n        return dec",
                "@wraps(t)\ndef wrapper(*args, **kwargs):\n    if check_before_test and not raise_on_error:\n        if not can_connect(url, error_classes):\n            skip()\n    try:\n        return t(*args, **kwargs)\n    except Exception as err:\n        errno = getattr(err, \"errno\", None)\n        if not errno and hasattr(errno, \"reason\"):\n            errno = getattr(err.reason, \"errno\", None)\n\n        if errno in skip_errnos:\n            skip(f\"Skipping test due to known errno and error {err}\")\n\n        e_str = str(err)\n\n        if any(m.lower() in e_str.lower() for m in _skip_on_messages):\n            skip(\n                f\"Skipping test because exception message is known and error {err}\"\n            )\n\n        if not isinstance(err, error_classes):\n            raise\n\n        if raise_on_error or can_connect(url, error_classes):\n            raise\n        else:\n            skip(f\"Skipping test due to lack of connectivity and error {err}\")",
                "def __init__(self, seed):\n    self.seed = seed",
                "def __enter__(self):\n\n    self.start_state = np.random.get_state()\n    np.random.seed(self.seed)",
                "def __exit__(self, exc_type, exc_value, traceback):\n\n    np.random.set_state(self.start_state)",
                "def wrapper(func):\n    @wraps(func)\n    def inner(*args, **kwargs):\n        if has_kwargs_list:\n            update_kwargs = lambda i: dict(kwargs, **kwargs_list[i])\n        else:\n            update_kwargs = lambda i: kwargs\n        threads = []\n        for i in range(num_threads):\n            updated_kwargs = update_kwargs(i)\n            thread = threading.Thread(target=func, args=args, kwargs=updated_kwargs)\n            threads.append(thread)\n        for thread in threads:\n            thread.start()\n        for thread in threads:\n            thread.join()\n\n    return inner",
                "@property\ndef _constructor(self):\n    return SubclassedSeries",
                "@property\ndef _constructor_expanddim(self):\n    return SubclassedDataFrame",
                "@property\ndef _constructor(self):\n    return SubclassedDataFrame",
                "@property\ndef _constructor_sliced(self):\n    return SubclassedSeries",
                "@property\ndef _constructor(self):\n    return SubclassedCategorical",
                "def setTZ(tz):\n    if tz is None:\n        try:\n            del os.environ[\"TZ\"]\n        except KeyError:\n            pass\n    else:\n        os.environ[\"TZ\"] = tz\n        time.tzset()",
                "def keyfunc(x):\n    import re\n\n    numeric_tuple = re.sub(r\"[^\\d_]_?\", \"\", x).split(\"_\")\n    return [int(num) for num in numeric_tuple]",
                "def dec(f):\n    return decorator(f, *args, **kwargs)",
                "@wraps(func)\ndef inner(*args, **kwargs):\n    if has_kwargs_list:\n        update_kwargs = lambda i: dict(kwargs, **kwargs_list[i])\n    else:\n        update_kwargs = lambda i: kwargs\n    threads = []\n    for i in range(num_threads):\n        updated_kwargs = update_kwargs(i)\n        thread = threading.Thread(target=func, args=args, kwargs=updated_kwargs)\n        threads.append(thread)\n    for thread in threads:\n        thread.start()\n    for thread in threads:\n        thread.join()",
                "def skipna_wrapper(x):\n    return skipna_alternative(x.values)",
                "def skipna_wrapper(x):\n    nona = x.dropna()\n    if len(nona) == 0:\n        return np.nan\n    return alternative(nona)"
            ],
            "inscope_function_signatures": [
                "set_testing_mode()",
                "reset_testing_mode()",
                "reset_display_options()",
                "round_trip_pickle(obj: Any, path: Optional[FilePathOrBuffer]=None) -> FrameOrSeries",
                "round_trip_pathlib(writer, reader, path: Optional[str]=None)",
                "round_trip_localpath(writer, reader, path: Optional[str]=None)",
                "decompress_file(path, compression)",
                "write_to_compressed(compression, path, data, dest='test')",
                "assert_almost_equal(left, right, check_dtype: Union[bool, str]='equiv', check_less_precise: Union[bool, int]=False, **kwargs)",
                "_check_isinstance(left, right, cls)",
                "assert_dict_equal(left, right, compare_keys: bool=True)",
                "randbool(size=(), p: float=0.5)",
                "rands_array(nchars, size, dtype='O')",
                "randu_array(nchars, size, dtype='O')",
                "rands(nchars)",
                "randu(nchars)",
                "close(fignum=None)",
                "ensure_clean(filename=None, return_filelike=False, **kwargs)",
                "ensure_clean_dir()",
                "ensure_safe_environment_variables()",
                "equalContents(arr1, arr2) -> bool",
                "assert_index_equal(left: Index, right: Index, exact: Union[bool, str]='equiv', check_names: bool=True, check_less_precise: Union[bool, int]=False, check_exact: bool=True, check_categorical: bool=True, obj: str='Index') -> None",
                "assert_class_equal(left, right, exact: Union[bool, str]=True, obj='Input')",
                "assert_attr_equal(attr, left, right, obj='Attributes')",
                "assert_is_valid_plot_return_object(objs)",
                "isiterable(obj)",
                "assert_is_sorted(seq)",
                "assert_categorical_equal(left, right, check_dtype=True, check_category_order=True, obj='Categorical')",
                "assert_interval_array_equal(left, right, exact='equiv', obj='IntervalArray')",
                "assert_period_array_equal(left, right, obj='PeriodArray')",
                "assert_datetime_array_equal(left, right, obj='DatetimeArray')",
                "assert_timedelta_array_equal(left, right, obj='TimedeltaArray')",
                "raise_assert_detail(obj, message, left, right, diff=None)",
                "assert_numpy_array_equal(left, right, strict_nan=False, check_dtype=True, err_msg=None, check_same=None, obj='numpy array')",
                "assert_extension_array_equal(left, right, check_dtype=True, check_less_precise=False, check_exact=False)",
                "assert_series_equal(left, right, check_dtype=True, check_index_type='equiv', check_series_type=True, check_less_precise=False, check_names=True, check_exact=False, check_datetimelike_compat=False, check_categorical=True, obj='Series')",
                "assert_frame_equal(left, right, check_dtype=True, check_index_type='equiv', check_column_type='equiv', check_frame_type=True, check_less_precise=False, check_names=True, by_blocks=False, check_exact=False, check_datetimelike_compat=False, check_categorical=True, check_like=False, obj='DataFrame')",
                "assert_equal(left, right, **kwargs)",
                "box_expected(expected, box_cls, transpose=True)",
                "to_array(obj)",
                "assert_sp_array_equal(left, right, check_dtype=True, check_kind=True, check_fill_value=True, consolidate_block_indices=False)",
                "assert_contains_all(iterable, dic)",
                "assert_copy(iter1, iter2, **eql_kwargs)",
                "getCols(k)",
                "makeStringIndex(k=10, name=None)",
                "makeUnicodeIndex(k=10, name=None)",
                "makeCategoricalIndex(k=10, n=3, name=None, **kwargs)",
                "makeIntervalIndex(k=10, name=None, **kwargs)",
                "makeBoolIndex(k=10, name=None)",
                "makeIntIndex(k=10, name=None)",
                "makeUIntIndex(k=10, name=None)",
                "makeRangeIndex(k=10, name=None, **kwargs)",
                "makeFloatIndex(k=10, name=None)",
                "makeDateIndex(k=10, freq='B', name=None, **kwargs)",
                "makeTimedeltaIndex(k=10, freq='D', name=None, **kwargs)",
                "makePeriodIndex(k=10, name=None, **kwargs)",
                "makeMultiIndex(k=10, names=None, **kwargs)",
                "_make_timeseries(start='2000-01-01', end='2000-12-31', freq='1D', seed=None)",
                "all_index_generator(k=10)",
                "index_subclass_makers_generator()",
                "all_timeseries_index_generator(k=10)",
                "makeFloatSeries(name=None)",
                "makeStringSeries(name=None)",
                "makeObjectSeries(name=None)",
                "getSeriesData()",
                "makeTimeSeries(nper=None, freq='B', name=None)",
                "makePeriodSeries(nper=None, name=None)",
                "getTimeSeriesData(nper=None, freq='B')",
                "getPeriodData(nper=None)",
                "makeTimeDataFrame(nper=None, freq='B')",
                "makeDataFrame()",
                "getMixedTypeDict()",
                "makeMixedDataFrame()",
                "makePeriodFrame(nper=None)",
                "makeCustomIndex(nentries, nlevels, prefix='#', names=False, ndupe_l=None, idx_type=None)",
                "makeCustomDataframe(nrows, ncols, c_idx_names=True, r_idx_names=True, c_idx_nlevels=1, r_idx_nlevels=1, data_gen_f=None, c_ndupe_l=None, r_ndupe_l=None, dtype=None, c_idx_type=None, r_idx_type=None)",
                "_create_missing_idx(nrows, ncols, density, random_state=None)",
                "makeMissingCustomDataframe(nrows, ncols, density=0.9, random_state=None, c_idx_names=True, r_idx_names=True, c_idx_nlevels=1, r_idx_nlevels=1, data_gen_f=None, c_ndupe_l=None, r_ndupe_l=None, dtype=None, c_idx_type=None, r_idx_type=None)",
                "makeMissingDataframe(density=0.9, random_state=None)",
                "optional_args(decorator)",
                "_get_default_network_errors()",
                "can_connect(url, error_classes=None)",
                "network(t, url='http://www.google.com', raise_on_error=_RAISE_NETWORK_ERROR_DEFAULT, check_before_test=False, error_classes=None, skip_errnos=_network_errno_vals, _skip_on_messages=_network_error_messages)",
                "assert_produces_warning(expected_warning=Warning, filter_level='always', clear=None, check_stacklevel=True, raise_on_extra_warnings=True)",
                "with_csv_dialect(name, **kwargs)",
                "use_numexpr(use, min_elements=None)",
                "test_parallel(num_threads=2, kwargs_list=None)",
                "set_timezone(tz: str)",
                "_make_skipna_wrapper(alternative, skipna_alternative=None)",
                "convert_rows_list_to_csv_str(rows_list: List[str])",
                "external_error_raised(expected_exception: Type[Exception]) -> Callable[[Type[Exception], None], None]",
                "_check_types(l, r, obj='Index')",
                "_get_ilevel_values(index, level)",
                "repr_class(x)",
                "_get_base(obj)",
                "_raise(left, right, err_msg)",
                "_gen_unique_rand(rng, _extra_size)",
                "wrapper(*args, **kwargs)",
                "wrapper(*args, **kwargs)",
                "__init__(self, seed)",
                "__enter__(self)",
                "__exit__(self, exc_type, exc_value, traceback)",
                "wrapper(func)",
                "_constructor(self)",
                "_constructor_expanddim(self)",
                "_constructor(self)",
                "_constructor_sliced(self)",
                "_constructor(self)",
                "setTZ(tz)",
                "keyfunc(x)",
                "dec(f)",
                "inner(*args, **kwargs)",
                "skipna_wrapper(x)",
                "skipna_wrapper(x)"
            ],
            "variables_in_file": {
                "lzma": [
                    212,
                    70,
                    263
                ],
                "_import_lzma": [
                    70
                ],
                "N": [
                    1792,
                    1793,
                    1797,
                    1799,
                    72,
                    1804,
                    1805,
                    1810,
                    1816,
                    1787,
                    1788
                ],
                "K": [
                    73,
                    1821,
                    1805,
                    1825
                ],
                "_RAISE_NETWORK_ERROR_DEFAULT": [
                    74,
                    2259
                ],
                "_testing_mode_warnings": [
                    91,
                    84,
                    77
                ],
                "DeprecationWarning": [
                    77,
                    2487
                ],
                "ResourceWarning": [
                    77
                ],
                "testing_mode": [
                    89,
                    82,
                    83,
                    90
                ],
                "os.environ.get": [
                    89,
                    82,
                    2710
                ],
                "os.environ": [
                    569,
                    2703,
                    82,
                    2707,
                    565,
                    2710,
                    89,
                    570
                ],
                "os": [
                    514,
                    2766,
                    569,
                    528,
                    2703,
                    82,
                    2707,
                    532,
                    533,
                    565,
                    2710,
                    89,
                    570
                ],
                "warnings.simplefilter": [
                    2476,
                    91,
                    84
                ],
                "warnings": [
                    2460,
                    2476,
                    91,
                    84
                ],
                "set_testing_mode": [
                    94
                ],
                "pd.reset_option": [
                    101
                ],
                "pd": [
                    1409,
                    1411,
                    793,
                    1445,
                    1446,
                    1447,
                    1448,
                    1449,
                    1450,
                    1716,
                    312,
                    1725,
                    322,
                    706,
                    708,
                    332,
                    101,
                    1637,
                    1642,
                    1516,
                    1521,
                    1522,
                    127,
                    126,
                    1407
                ],
                "Any": [
                    105
                ],
                "Optional": [
                    105,
                    130,
                    159
                ],
                "FilePathOrBuffer": [
                    105
                ],
                "_path": [
                    122,
                    123,
                    124,
                    125
                ],
                "path": [
                    154,
                    276,
                    206,
                    219,
                    208,
                    210,
                    180,
                    181,
                    182,
                    151,
                    152,
                    153,
                    122,
                    155,
                    184,
                    212,
                    183,
                    214
                ],
                "rands": [
                    124
                ],
                "ensure_clean": [
                    153,
                    125,
                    182
                ],
                "temp_path": [
                    125,
                    126,
                    127
                ],
                "pd.to_pickle": [
                    126
                ],
                "obj": [
                    898,
                    899,
                    900,
                    1155,
                    647,
                    906,
                    651,
                    907,
                    1162,
                    654,
                    658,
                    787,
                    661,
                    155,
                    156,
                    923,
                    810,
                    684,
                    690,
                    691,
                    1204,
                    1333,
                    184,
                    185,
                    698,
                    1209,
                    1213,
                    705,
                    1474,
                    707,
                    1348,
                    1475,
                    1476,
                    967,
                    1477,
                    713,
                    1478,
                    1479,
                    972,
                    845,
                    1481,
                    847,
                    1360,
                    853,
                    858,
                    1371,
                    988,
                    861,
                    353,
                    737,
                    355,
                    356,
                    738,
                    741,
                    742,
                    998,
                    999,
                    1130,
                    1390,
                    623,
                    1009,
                    882,
                    627,
                    883,
                    884,
                    1141,
                    633,
                    890,
                    891,
                    126
                ],
                "pd.read_pickle": [
                    127
                ],
                "FrameOrSeries": [
                    106
                ],
                "str": [
                    2369,
                    130,
                    1896,
                    1162,
                    587,
                    716,
                    1902,
                    592,
                    1425,
                    1204,
                    2676,
                    283,
                    2750,
                    159
                ],
                "Path": [
                    154,
                    155,
                    150
                ],
                "pytest.importorskip": [
                    179,
                    150
                ],
                "pytest": [
                    522,
                    179,
                    2789,
                    150
                ],
                "writer": [
                    154,
                    183
                ],
                "reader": [
                    184,
                    155
                ],
                "LocalPath": [
                    184,
                    179,
                    183
                ],
                "local": [
                    179
                ],
                "compression": [
                    258,
                    227,
                    262,
                    265,
                    267,
                    205,
                    207,
                    209,
                    211,
                    213,
                    250,
                    221,
                    254
                ],
                "f": [
                    224,
                    2169,
                    226,
                    206,
                    208,
                    210,
                    212,
                    276,
                    277,
                    2173,
                    217,
                    506,
                    509,
                    2175,
                    511
                ],
                "open": [
                    206
                ],
                "gzip.open": [
                    208
                ],
                "gzip": [
                    208,
                    257
                ],
                "bz2.BZ2File": [
                    210,
                    261
                ],
                "bz2": [
                    210,
                    261
                ],
                "_get_lzma_file": [
                    212,
                    263
                ],
                "zip_file": [
                    217,
                    228,
                    214,
                    215
                ],
                "zipfile.ZipFile": [
                    253,
                    214
                ],
                "zipfile": [
                    253,
                    214
                ],
                "zip_names": [
                    216,
                    217,
                    215
                ],
                "zip_file.namelist": [
                    215
                ],
                "len": [
                    514,
                    1927,
                    1928,
                    1929,
                    657,
                    659,
                    660,
                    689,
                    1717,
                    2743,
                    2620,
                    216,
                    736,
                    1888,
                    1889,
                    1127,
                    1128,
                    1129,
                    2171
                ],
                "zip_file.open": [
                    217
                ],
                "zip_names.pop": [
                    217
                ],
                "ValueError": [
                    1922,
                    515,
                    265,
                    2573,
                    219,
                    221
                ],
                "f.close": [
                    226,
                    511
                ],
                "zip_file.close": [
                    228
                ],
                "contextmanager": [
                    557,
                    2675,
                    2548,
                    2580,
                    2390,
                    538,
                    475,
                    188
                ],
                "compress_method": [
                    257,
                    261,
                    263,
                    276,
                    253
                ],
                "gzip.GzipFile": [
                    257
                ],
                "mode": [
                    272,
                    268,
                    276
                ],
                "args": [
                    2633,
                    269,
                    273,
                    277,
                    2360,
                    2169,
                    2171,
                    2173,
                    2174
                ],
                "dest": [
                    269
                ],
                "data": [
                    1857,
                    1858,
                    1797,
                    1798,
                    1830,
                    1800,
                    1831,
                    1835,
                    1836,
                    269,
                    273,
                    1842,
                    2068,
                    2070,
                    1849
                ],
                "method": [
                    274,
                    277,
                    270
                ],
                "getattr": [
                    972,
                    2362,
                    277,
                    761,
                    762,
                    2364
                ],
                "Union": [
                    587,
                    716,
                    589,
                    283,
                    284
                ],
                "bool": [
                    577,
                    394,
                    587,
                    588,
                    589,
                    590,
                    591,
                    716,
                    780,
                    283,
                    284
                ],
                "int": [
                    2080,
                    2087,
                    589,
                    2095,
                    2096,
                    689,
                    1940,
                    284
                ],
                "isinstance": [
                    384,
                    1409,
                    1411,
                    388,
                    1413,
                    1415,
                    1417,
                    1419,
                    780,
                    1037,
                    1038,
                    1421,
                    1423,
                    913,
                    1425,
                    918,
                    793,
                    799,
                    806,
                    815,
                    1327,
                    312,
                    322,
                    706,
                    708,
                    2376,
                    332,
                    723,
                    352,
                    1123,
                    1902,
                    1008,
                    1521,
                    1522,
                    1407
                ],
                "left": [
                    1545,
                    1547,
                    1548,
                    1037,
                    1040,
                    1042,
                    1044,
                    1047,
                    1051,
                    1118,
                    1123,
                    1127,
                    1128,
                    1134,
                    1149,
                    1155,
                    644,
                    647,
                    1159,
                    650,
                    652,
                    1168,
                    657,
                    659,
                    1172,
                    1174,
                    664,
                    665,
                    668,
                    1180,
                    670,
                    1184,
                    1185,
                    1186,
                    1190,
                    1192,
                    1193,
                    684,
                    1197,
                    688,
                    689,
                    1200,
                    691,
                    694,
                    1209,
                    699,
                    1212,
                    1213,
                    705,
                    706,
                    707,
                    708,
                    709,
                    712,
                    713,
                    733,
                    735,
                    738,
                    740,
                    742,
                    761,
                    1324,
                    1327,
                    1331,
                    1333,
                    312,
                    1337,
                    314,
                    1341,
                    322,
                    324,
                    1353,
                    842,
                    332,
                    845,
                    334,
                    847,
                    851,
                    1366,
                    856,
                    345,
                    348,
                    861,
                    352,
                    1376,
                    1378,
                    356,
                    358,
                    880,
                    882,
                    883,
                    884,
                    888,
                    890,
                    891,
                    1407,
                    384,
                    896,
                    386,
                    898,
                    899,
                    900,
                    1408,
                    1409,
                    1410,
                    905,
                    906,
                    907,
                    396,
                    397,
                    1413,
                    1414,
                    1415,
                    913,
                    914,
                    915,
                    916,
                    1420,
                    1421,
                    1422,
                    1423,
                    1424,
                    1425,
                    1427,
                    1429,
                    926,
                    1411,
                    1412,
                    967,
                    969,
                    974,
                    1416,
                    986,
                    1417,
                    988,
                    1418,
                    992,
                    1419,
                    997,
                    999,
                    1004,
                    1005,
                    1516,
                    1518,
                    1008,
                    1009,
                    1521,
                    1525,
                    1528,
                    1531
                ],
                "pd.Index": [
                    312,
                    1445,
                    1446,
                    1407
                ],
                "assert_index_equal": [
                    1408,
                    674,
                    1352,
                    845,
                    1133,
                    850,
                    882,
                    883,
                    855,
                    313,
                    1340
                ],
                "right": [
                    1545,
                    1547,
                    1548,
                    1038,
                    1040,
                    1042,
                    1044,
                    1048,
                    1052,
                    1118,
                    1123,
                    1127,
                    1129,
                    1135,
                    1150,
                    1155,
                    644,
                    647,
                    1160,
                    650,
                    653,
                    1168,
                    657,
                    660,
                    1172,
                    1175,
                    666,
                    1181,
                    671,
                    1184,
                    1185,
                    1189,
                    1190,
                    1194,
                    1195,
                    684,
                    1197,
                    688,
                    689,
                    1201,
                    691,
                    695,
                    1209,
                    700,
                    1212,
                    1213,
                    705,
                    706,
                    707,
                    708,
                    709,
                    712,
                    713,
                    733,
                    735,
                    738,
                    740,
                    742,
                    762,
                    1324,
                    1327,
                    1331,
                    1333,
                    1337,
                    315,
                    1342,
                    325,
                    842,
                    1354,
                    845,
                    335,
                    847,
                    852,
                    1365,
                    345,
                    857,
                    348,
                    861,
                    352,
                    1377,
                    1379,
                    356,
                    359,
                    880,
                    882,
                    883,
                    884,
                    888,
                    890,
                    891,
                    896,
                    1408,
                    898,
                    899,
                    388,
                    900,
                    390,
                    1410,
                    1412,
                    905,
                    906,
                    907,
                    396,
                    397,
                    1414,
                    1416,
                    1418,
                    1420,
                    1422,
                    1424,
                    1427,
                    918,
                    919,
                    920,
                    921,
                    927,
                    967,
                    969,
                    975,
                    986,
                    988,
                    992,
                    999,
                    1004,
                    1005,
                    1516,
                    1518,
                    1008,
                    1009,
                    1522,
                    1526,
                    1529
                ],
                "check_dtype": [
                    1059,
                    327,
                    360,
                    1161,
                    1383,
                    1546,
                    1548,
                    1518,
                    847,
                    1007,
                    337,
                    1039,
                    1203,
                    344,
                    1371,
                    1144,
                    317,
                    1182
                ],
                "check_less_precise": [
                    1345,
                    1060,
                    679,
                    328,
                    361,
                    1385,
                    1357,
                    338,
                    1138,
                    1202,
                    696,
                    318
                ],
                "kwargs": [
                    1408,
                    1410,
                    1412,
                    518,
                    1414,
                    1416,
                    1418,
                    1420,
                    1422,
                    2575,
                    1424,
                    1426,
                    2360,
                    1595,
                    319,
                    1602,
                    2627,
                    2629,
                    329,
                    339,
                    1622,
                    1633,
                    1637,
                    362,
                    1642,
                    1647,
                    503,
                    2169,
                    506,
                    2171
                ],
                "pd.Series": [
                    1409,
                    322,
                    1447,
                    1448,
                    1450,
                    793
                ],
                "assert_series_equal": [
                    1410,
                    323,
                    1380
                ],
                "pd.DataFrame": [
                    1449,
                    1411,
                    332,
                    1725
                ],
                "assert_frame_equal": [
                    1370,
                    1412,
                    333
                ],
                "is_number": [
                    345,
                    769,
                    767
                ],
                "is_bool": [
                    348
                ],
                "np.ndarray": [
                    352,
                    969,
                    1423,
                    1008,
                    913,
                    918,
                    1463,
                    793
                ],
                "np": [
                    768,
                    770,
                    1423,
                    913,
                    404,
                    405,
                    918,
                    407,
                    1047,
                    793,
                    1048,
                    1051,
                    1052,
                    2075,
                    2077,
                    416,
                    417,
                    2080,
                    2088,
                    431,
                    432,
                    689,
                    690,
                    818,
                    2095,
                    1718,
                    1463,
                    1464,
                    2744,
                    1595,
                    448,
                    1601,
                    969,
                    458,
                    1481,
                    1626,
                    1627,
                    2143,
                    352,
                    998,
                    2150,
                    2540,
                    2541,
                    1008,
                    2545
                ],
                "assert_class_equal": [
                    967,
                    356,
                    623
                ],
                "_testing.assert_almost_equal": [
                    1056,
                    1199,
                    357,
                    693
                ],
                "_testing": [
                    1056,
                    357,
                    397,
                    1199,
                    693
                ],
                "cls_name": [
                    386,
                    390,
                    382
                ],
                "cls.__name__": [
                    382
                ],
                "cls": [
                    384,
                    386,
                    388,
                    390,
                    382
                ],
                "AssertionError": [
                    385,
                    932,
                    389,
                    1001,
                    2514,
                    979,
                    982,
                    1177
                ],
                "type": [
                    386,
                    1123,
                    740,
                    804,
                    390,
                    1572,
                    797,
                    1327,
                    1042,
                    1429,
                    728,
                    730,
                    733,
                    735
                ],
                "_check_isinstance": [
                    896,
                    644,
                    905,
                    842,
                    969,
                    396,
                    1324,
                    1516,
                    880,
                    888,
                    1118
                ],
                "dict": [
                    2627,
                    806,
                    396,
                    1906,
                    565,
                    799
                ],
                "_testing.assert_dict_equal": [
                    397
                ],
                "compare_keys": [
                    397
                ],
                "float": [
                    400
                ],
                "rand": [
                    401
                ],
                "size": [
                    416,
                    2080,
                    418,
                    2084,
                    2088,
                    2091,
                    431,
                    401,
                    433
                ],
                "p": [
                    401
                ],
                "RANDS_CHARS": [
                    416,
                    404,
                    448
                ],
                "np.array": [
                    1481,
                    818,
                    404,
                    405,
                    1464
                ],
                "list": [
                    1952,
                    1614,
                    404,
                    406,
                    1367
                ],
                "string.ascii_letters": [
                    404
                ],
                "string": [
                    1579,
                    404,
                    406
                ],
                "string.digits": [
                    404,
                    406
                ],
                "np.str_": [
                    417,
                    404
                ],
                "RANDU_CHARS": [
                    458,
                    405,
                    431
                ],
                "join": [
                    448,
                    458,
                    406
                ],
                "map": [
                    406
                ],
                "chr": [
                    406
                ],
                "range": [
                    2631,
                    1896,
                    1614,
                    1934,
                    1618,
                    2068,
                    406,
                    1945,
                    668
                ],
                "np.unicode_": [
                    432,
                    407
                ],
                "retval": [
                    421,
                    423,
                    430,
                    436,
                    438,
                    415
                ],
                "reshape": [
                    416,
                    431
                ],
                "view": [
                    416,
                    431
                ],
                "np.random.choice": [
                    416,
                    458,
                    448,
                    431
                ],
                "np.random": [
                    416,
                    448,
                    2075,
                    458,
                    2540,
                    2541,
                    431,
                    2545,
                    1718,
                    1626,
                    1627,
                    2077
                ],
                "nchars": [
                    416,
                    417,
                    448,
                    458,
                    431,
                    432
                ],
                "np.prod": [
                    416,
                    431
                ],
                "dtype": [
                    2137,
                    420,
                    423,
                    435,
                    438,
                    1367,
                    1368,
                    1369,
                    2070,
                    1371
                ],
                "retval.astype": [
                    438,
                    423
                ],
                "fignum": [
                    464,
                    465,
                    466,
                    468
                ],
                "get_fignums": [
                    465
                ],
                "_close": [
                    466,
                    468
                ],
                "filename": [
                    514,
                    518,
                    525,
                    530,
                    500,
                    532,
                    533,
                    503
                ],
                "fd": [
                    528,
                    530,
                    501,
                    518
                ],
                "return_filelike": [
                    505
                ],
                "tempfile.TemporaryFile": [
                    506
                ],
                "tempfile": [
                    506,
                    547,
                    518
                ],
                "os.path.dirname": [
                    514
                ],
                "os.path": [
                    514,
                    532
                ],
                "tempfile.mkstemp": [
                    518
                ],
                "UnicodeEncodeError": [
                    519
                ],
                "pytest.skip": [
                    522
                ],
                "os.close": [
                    528
                ],
                "OSError": [
                    529,
                    534,
                    553
                ],
                "print": [
                    530,
                    535
                ],
                "os.path.exists": [
                    532
                ],
                "os.remove": [
                    533
                ],
                "e": [
                    535
                ],
                "directory_name": [
                    552,
                    547,
                    549
                ],
                "tempfile.mkdtemp": [
                    547
                ],
                "rmtree": [
                    552
                ],
                "saved_environ": [
                    570,
                    565
                ],
                "os.environ.clear": [
                    569
                ],
                "os.environ.update": [
                    570
                ],
                "frozenset": [
                    581
                ],
                "arr1": [
                    581
                ],
                "arr2": [
                    581
                ],
                "Index": [
                    644,
                    1957,
                    1798,
                    1607,
                    1960,
                    585,
                    586,
                    1609,
                    1610,
                    1614,
                    815,
                    1584,
                    1840,
                    1618,
                    723,
                    1172,
                    1588,
                    1627
                ],
                "__tracebackhide__": [
                    963,
                    904,
                    1321,
                    619,
                    911,
                    720,
                    759,
                    2458,
                    1115,
                    1405,
                    895
                ],
                "exact": [
                    739,
                    677,
                    622,
                    623,
                    882,
                    883,
                    697,
                    732
                ],
                "l": [
                    992,
                    994,
                    623,
                    627,
                    630,
                    633
                ],
                "r": [
                    992,
                    994,
                    623,
                    2066,
                    627,
                    2068,
                    631,
                    633
                ],
                "check_categorical": [
                    1347,
                    711,
                    1389,
                    687,
                    1359,
                    626,
                    1140,
                    1211,
                    1151
                ],
                "assert_attr_equal": [
                    705,
                    707,
                    899,
                    900,
                    1155,
                    1209,
                    1545,
                    907,
                    1547,
                    1040,
                    1009,
                    627,
                    884,
                    633,
                    891,
                    861
                ],
                "l.inferred_type": [
                    630
                ],
                "r.inferred_type": [
                    631
                ],
                "unique": [
                    640,
                    637,
                    639
                ],
                "index.levels": [
                    637
                ],
                "index": [
                    640,
                    1792,
                    1793,
                    1799,
                    1800,
                    2055,
                    1804,
                    1805,
                    2070,
                    1957,
                    1960,
                    1962,
                    1963,
                    1840,
                    1716,
                    1717,
                    1849,
                    1725,
                    1787,
                    1788,
                    637,
                    638
                ],
                "level": [
                    640,
                    673,
                    638,
                    684,
                    668,
                    637,
                    670,
                    671
                ],
                "level_codes": [
                    638,
                    639
                ],
                "index.codes": [
                    638
                ],
                "filled": [
                    640,
                    639
                ],
                "take_1d": [
                    639
                ],
                "unique._values": [
                    639
                ],
                "unique._na_value": [
                    639
                ],
                "values": [
                    640,
                    641,
                    1626,
                    1627
                ],
                "unique._shallow_copy": [
                    640
                ],
                "index.names": [
                    640
                ],
                "_check_types": [
                    684,
                    647
                ],
                "left.nlevels": [
                    664,
                    668,
                    650,
                    652
                ],
                "right.nlevels": [
                    650,
                    653
                ],
                "msg1": [
                    1128,
                    1130,
                    651,
                    654,
                    658,
                    661
                ],
                "msg2": [
                    1129,
                    1130,
                    652,
                    654,
                    659,
                    661
                ],
                "msg3": [
                    660,
                    653,
                    654,
                    661
                ],
                "raise_assert_detail": [
                    1537,
                    738,
                    742,
                    999,
                    1130,
                    654,
                    691,
                    787,
                    661,
                    1332,
                    987
                ],
                "cast": [
                    665,
                    666
                ],
                "MultiIndex": [
                    1962,
                    665,
                    666,
                    1647
                ],
                "llevel": [
                    675,
                    670
                ],
                "_get_ilevel_values": [
                    670,
                    671
                ],
                "rlevel": [
                    676,
                    671
                ],
                "lobj": [
                    673,
                    681
                ],
                "check_names": [
                    704,
                    1344,
                    678,
                    1387,
                    1356,
                    1137,
                    1208
                ],
                "check_exact": [
                    1346,
                    1157,
                    680,
                    1386,
                    1358,
                    687,
                    1139,
                    1053
                ],
                "left.levels": [
                    684
                ],
                "right.levels": [
                    684
                ],
                "left.equals": [
                    688
                ],
                "diff": [
                    929,
                    930,
                    995,
                    997,
                    998,
                    689,
                    690,
                    991
                ],
                "np.sum": [
                    689
                ],
                "astype": [
                    2095,
                    2096,
                    689,
                    1051,
                    1052
                ],
                "left.values": [
                    709,
                    713,
                    689,
                    1172,
                    694,
                    1174,
                    1213
                ],
                "right.values": [
                    709,
                    713,
                    689,
                    1172,
                    695,
                    1175,
                    1213
                ],
                "msg": [
                    786,
                    787,
                    1173,
                    1177,
                    923,
                    795,
                    799,
                    801,
                    930,
                    1571,
                    932,
                    806,
                    1575,
                    690,
                    691,
                    2492,
                    2497,
                    2508,
                    2512,
                    737,
                    738,
                    741,
                    742,
                    998,
                    999
                ],
                "np.round": [
                    2080,
                    690,
                    998
                ],
                "pd.PeriodIndex": [
                    706
                ],
                "pd.IntervalIndex": [
                    708
                ],
                "assert_interval_array_equal": [
                    1185,
                    709,
                    1414
                ],
                "is_categorical_dtype": [
                    712,
                    1193,
                    1195,
                    915,
                    920,
                    1212,
                    1149,
                    1150
                ],
                "assert_categorical_equal": [
                    713,
                    1213
                ],
                "x": [
                    1601,
                    1602,
                    1960,
                    1931,
                    2737,
                    723,
                    1939,
                    725,
                    2742,
                    728,
                    1593,
                    730,
                    1595
                ],
                "__name__": [
                    728,
                    804,
                    797,
                    735
                ],
                "AttributeError": [
                    729,
                    2471
                ],
                "repr": [
                    1923,
                    804,
                    1572,
                    2510,
                    979,
                    916,
                    1333,
                    982,
                    1557,
                    2515,
                    921,
                    730,
                    797
                ],
                "types": [
                    736,
                    735
                ],
                "repr_class": [
                    738,
                    742
                ],
                "left_attr": [
                    768,
                    776,
                    787,
                    761,
                    764,
                    767
                ],
                "attr": [
                    761,
                    762,
                    786
                ],
                "right_attr": [
                    769,
                    770,
                    776,
                    787,
                    762,
                    764
                ],
                "np.isnan": [
                    768,
                    770
                ],
                "result": [
                    776,
                    779,
                    780,
                    781,
                    783,
                    1949,
                    1950
                ],
                "TypeError": [
                    777
                ],
                "result.all": [
                    781
                ],
                "objs": [
                    793,
                    794,
                    804,
                    806
                ],
                "el": [
                    794,
                    797,
                    799
                ],
                "objs.ravel": [
                    794
                ],
                "plt.Axes": [
                    799
                ],
                "plt": [
                    806,
                    799
                ],
                "plt.Artist": [
                    806
                ],
                "tuple": [
                    806
                ],
                "hasattr": [
                    2363,
                    810,
                    1042
                ],
                "seq": [
                    816,
                    818,
                    815
                ],
                "Series": [
                    1793,
                    1800,
                    1805,
                    815,
                    1811,
                    2645,
                    1817,
                    1788,
                    1118
                ],
                "seq.values": [
                    816
                ],
                "assert_numpy_array_equal": [
                    898,
                    1158,
                    906,
                    1548,
                    846,
                    1518,
                    1424,
                    818,
                    1044,
                    1049,
                    890,
                    1179,
                    1054
                ],
                "np.sort": [
                    818
                ],
                "Categorical": [
                    842,
                    1595,
                    2669
                ],
                "check_category_order": [
                    844
                ],
                "left.categories": [
                    856,
                    851,
                    845
                ],
                "right.categories": [
                    857,
                    852,
                    845
                ],
                "left.codes": [
                    856,
                    847
                ],
                "right.codes": [
                    857,
                    847
                ],
                "left.categories.sort_values": [
                    851
                ],
                "right.categories.sort_values": [
                    852
                ],
                "left.categories.take": [
                    856
                ],
                "right.categories.take": [
                    857
                ],
                "IntervalArray": [
                    880,
                    1413
                ],
                "left.left": [
                    882
                ],
                "right.left": [
                    882
                ],
                "left.right": [
                    883
                ],
                "right.right": [
                    883
                ],
                "PeriodArray": [
                    888,
                    1456,
                    1415
                ],
                "left._data": [
                    890,
                    906,
                    898
                ],
                "right._data": [
                    890,
                    906,
                    898
                ],
                "DatetimeArray": [
                    896,
                    1477,
                    1417,
                    1459,
                    1460
                ],
                "TimedeltaArray": [
                    1479,
                    905,
                    1419,
                    1461,
                    1462
                ],
                "pprint_thing": [
                    914,
                    919
                ],
                "message": [
                    925
                ],
                "obj.base": [
                    972
                ],
                "left_base": [
                    974,
                    978,
                    979,
                    981,
                    982
                ],
                "_get_base": [
                    974,
                    975
                ],
                "right_base": [
                    975,
                    978,
                    979,
                    981,
                    982
                ],
                "check_same": [
                    977,
                    980
                ],
                "err_msg": [
                    985,
                    1001,
                    1005
                ],
                "left.shape": [
                    986,
                    1331,
                    988,
                    1333
                ],
                "right.shape": [
                    986,
                    1331,
                    988,
                    1333
                ],
                "zip": [
                    992,
                    1569,
                    1952
                ],
                "array_equivalent": [
                    994,
                    1004
                ],
                "strict_nan": [
                    994,
                    1004
                ],
                "left.size": [
                    997
                ],
                "_raise": [
                    1005
                ],
                "ExtensionArray": [
                    1421,
                    1037,
                    1038
                ],
                "left.asi8": [
                    1044
                ],
                "right.asi8": [
                    1044
                ],
                "left_na": [
                    1049,
                    1051,
                    1047
                ],
                "np.asarray": [
                    1048,
                    1051,
                    1052,
                    1047
                ],
                "left.isna": [
                    1047
                ],
                "right_na": [
                    1048,
                    1049,
                    1052
                ],
                "right.isna": [
                    1048
                ],
                "left_valid": [
                    1057,
                    1051,
                    1054
                ],
                "object": [
                    1051,
                    1052,
                    1798
                ],
                "right_valid": [
                    1058,
                    1052,
                    1054
                ],
                "check_series_type": [
                    1120
                ],
                "left.index": [
                    1128,
                    1341,
                    1134
                ],
                "right.index": [
                    1129,
                    1342,
                    1135
                ],
                "check_index_type": [
                    1136,
                    1384,
                    1343
                ],
                "left._internal_get_values": [
                    1200,
                    1180,
                    1159
                ],
                "right._internal_get_values": [
                    1160,
                    1201,
                    1181
                ],
                "check_datetimelike_compat": [
                    1388,
                    1164
                ],
                "needs_i8_conversion": [
                    1168
                ],
                "equals": [
                    1172
                ],
                "is_interval_dtype": [
                    1184
                ],
                "left.array": [
                    1185,
                    1197
                ],
                "right.array": [
                    1185,
                    1197
                ],
                "is_extension_array_dtype": [
                    1192,
                    1186,
                    1194,
                    1189
                ],
                "left.dtype": [
                    1186
                ],
                "is_datetime64tz_dtype": [
                    1186,
                    1476
                ],
                "right.dtype": [
                    1189
                ],
                "assert_extension_array_equal": [
                    1422,
                    1197,
                    1190
                ],
                "left._values": [
                    1190
                ],
                "right._values": [
                    1190
                ],
                "DataFrame": [
                    2657,
                    1858,
                    1831,
                    1324,
                    1836,
                    2070,
                    1853
                ],
                "check_frame_type": [
                    1326
                ],
                "check_like": [
                    1336
                ],
                "left.reindex_like": [
                    1337
                ],
                "left.columns": [
                    1376,
                    1353
                ],
                "right.columns": [
                    1354
                ],
                "check_column_type": [
                    1355
                ],
                "by_blocks": [
                    1364
                ],
                "rblocks": [
                    1369,
                    1371,
                    1365,
                    1367
                ],
                "right._to_dict_of_blocks": [
                    1365
                ],
                "lblocks": [
                    1368,
                    1371,
                    1366,
                    1367
                ],
                "left._to_dict_of_blocks": [
                    1366
                ],
                "set": [
                    1367
                ],
                "lblocks.keys": [
                    1367
                ],
                "rblocks.keys": [
                    1367
                ],
                "i": [
                    1934,
                    1943,
                    1946,
                    1947,
                    2096,
                    2097,
                    2627,
                    2631,
                    2632,
                    1618,
                    2142,
                    2143,
                    1376,
                    1378,
                    1379,
                    2149,
                    2150,
                    1896,
                    1390
                ],
                "col": [
                    1376,
                    1377,
                    1390
                ],
                "enumerate": [
                    1376
                ],
                "lcol": [
                    1378,
                    1381
                ],
                "left.iloc": [
                    1378
                ],
                "rcol": [
                    1379,
                    1382
                ],
                "right.iloc": [
                    1379
                ],
                "assert_period_array_equal": [
                    1416
                ],
                "assert_datetime_array_equal": [
                    1418
                ],
                "assert_timedelta_array_equal": [
                    1420
                ],
                "NotImplementedError": [
                    1468,
                    1429
                ],
                "box_cls": [
                    1445,
                    1447,
                    1449,
                    1456,
                    1459,
                    1461,
                    1463,
                    1465,
                    1468
                ],
                "expected": [
                    1446,
                    1448,
                    1450,
                    1455,
                    2767,
                    2768,
                    1458,
                    1460,
                    1462,
                    1464,
                    1466,
                    1469
                ],
                "to_frame": [
                    1450
                ],
                "transpose": [
                    1451
                ],
                "expected.T": [
                    1455
                ],
                "period_array": [
                    1458,
                    1475
                ],
                "to_array": [
                    1465,
                    1466
                ],
                "is_period_dtype": [
                    1474
                ],
                "is_datetime64_dtype": [
                    1476
                ],
                "DatetimeArray._from_sequence": [
                    1477
                ],
                "is_timedelta64_dtype": [
                    1478
                ],
                "TimedeltaArray._from_sequence": [
                    1479
                ],
                "pd.arrays.SparseArray": [
                    1516
                ],
                "pd.arrays": [
                    1516
                ],
                "left.sp_values": [
                    1518
                ],
                "right.sp_values": [
                    1518
                ],
                "left.sp_index": [
                    1528,
                    1521,
                    1525
                ],
                "pd._libs.sparse.SparseIndex": [
                    1521,
                    1522
                ],
                "pd._libs.sparse": [
                    1521,
                    1522
                ],
                "pd._libs": [
                    1521,
                    1522
                ],
                "right.sp_index": [
                    1529,
                    1522,
                    1526
                ],
                "check_kind": [
                    1524
                ],
                "left_index": [
                    1536,
                    1538,
                    1525,
                    1528,
                    1533
                ],
                "left.sp_index.to_block_index": [
                    1525
                ],
                "right_index": [
                    1536,
                    1538,
                    1526,
                    1529,
                    1534
                ],
                "right.sp_index.to_block_index": [
                    1526
                ],
                "consolidate_block_indices": [
                    1531
                ],
                "left.kind": [
                    1531
                ],
                "to_block_index": [
                    1533,
                    1534
                ],
                "left_index.to_int_index": [
                    1533
                ],
                "right_index.to_int_index": [
                    1534
                ],
                "left_index.equals": [
                    1536
                ],
                "check_fill_value": [
                    1544
                ],
                "left.to_dense": [
                    1548
                ],
                "right.to_dense": [
                    1548
                ],
                "k": [
                    1556,
                    1557,
                    1579,
                    1584,
                    1588,
                    1595,
                    1601,
                    1606,
                    1608,
                    1610,
                    1614,
                    1618,
                    1622,
                    1754,
                    1626,
                    1632,
                    1637,
                    1642,
                    1782
                ],
                "iterable": [
                    1556
                ],
                "dic": [
                    1557
                ],
                "elem1": [
                    1569,
                    1570,
                    1572,
                    1575
                ],
                "elem2": [
                    1569,
                    1570,
                    1572,
                    1575
                ],
                "iter1": [
                    1569
                ],
                "iter2": [
                    1569
                ],
                "assert_almost_equal": [
                    1570
                ],
                "eql_kwargs": [
                    1570
                ],
                "string.ascii_uppercase": [
                    1579
                ],
                "rands_array": [
                    1584,
                    1593
                ],
                "name": [
                    1793,
                    1800,
                    2572,
                    2575,
                    2577,
                    1811,
                    1817,
                    1959,
                    1960,
                    1584,
                    1588,
                    1595,
                    1602,
                    1607,
                    1609,
                    1610,
                    1614,
                    1618,
                    1622,
                    1627,
                    1632,
                    1633,
                    1637,
                    1642,
                    1788
                ],
                "randu_array": [
                    1588
                ],
                "n": [
                    1721,
                    1717,
                    1720,
                    1593,
                    1722,
                    1595,
                    1723
                ],
                "CategoricalIndex": [
                    1594
                ],
                "Categorical.from_codes": [
                    1595
                ],
                "np.arange": [
                    1595
                ],
                "np.linspace": [
                    1601
                ],
                "IntervalIndex.from_breaks": [
                    1602
                ],
                "IntervalIndex": [
                    1602
                ],
                "RangeIndex": [
                    1622
                ],
                "sorted": [
                    1626,
                    1725,
                    1949
                ],
                "np.random.random_sample": [
                    1626
                ],
                "np.random.randint": [
                    1627
                ],
                "dt": [
                    1632,
                    1641,
                    1642,
                    1631
                ],
                "datetime": [
                    1641,
                    1631
                ],
                "dr": [
                    1632,
                    1633,
                    1642,
                    1643
                ],
                "bdate_range": [
                    1632,
                    1846
                ],
                "freq": [
                    1632,
                    1637,
                    1830,
                    1811,
                    1716,
                    1821
                ],
                "DatetimeIndex": [
                    1633
                ],
                "pd.timedelta_range": [
                    1637
                ],
                "pd.period_range": [
                    1642
                ],
                "MultiIndex.from_product": [
                    1647
                ],
                "names": [
                    1889,
                    1957,
                    1894,
                    1959,
                    1896,
                    1897,
                    1962,
                    1899,
                    1902,
                    1647,
                    1903,
                    1918,
                    1919
                ],
                "_names": [
                    1720,
                    1650
                ],
                "pd.date_range": [
                    1716
                ],
                "start": [
                    1716
                ],
                "end": [
                    1716,
                    1726
                ],
                "state": [
                    1718,
                    1720,
                    1721,
                    1722,
                    1723
                ],
                "np.random.RandomState": [
                    2077,
                    1718
                ],
                "seed": [
                    2536,
                    1718
                ],
                "columns": [
                    2047,
                    1725,
                    2070,
                    1719
                ],
                "state.choice": [
                    1720
                ],
                "state.poisson": [
                    1721
                ],
                "state.rand": [
                    1722,
                    1723
                ],
                "df": [
                    1728,
                    2144,
                    2148,
                    2149,
                    2150,
                    2151,
                    2127,
                    2143,
                    1725,
                    1726,
                    1727
                ],
                "df.index": [
                    1726
                ],
                "df.iloc": [
                    1727
                ],
                "all_make_index_funcs": [
                    1753,
                    1740
                ],
                "makeIntIndex": [
                    1907,
                    1741
                ],
                "makeFloatIndex": [
                    1908,
                    1742
                ],
                "makeStringIndex": [
                    1792,
                    1797,
                    1799,
                    1804,
                    1743,
                    1909,
                    1787
                ],
                "makeUnicodeIndex": [
                    1744,
                    1910
                ],
                "makeDateIndex": [
                    1745,
                    1811,
                    1780,
                    1911,
                    1759
                ],
                "makePeriodIndex": [
                    1760,
                    1746,
                    1780,
                    1817,
                    1913
                ],
                "makeTimedeltaIndex": [
                    1912,
                    1761,
                    1747,
                    1780
                ],
                "makeBoolIndex": [
                    1748
                ],
                "makeRangeIndex": [
                    1762,
                    1749
                ],
                "makeIntervalIndex": [
                    1763,
                    1750
                ],
                "makeCategoricalIndex": [
                    1764,
                    1751
                ],
                "make_index_func": [
                    1767,
                    1768,
                    1781,
                    1782,
                    1753,
                    1754
                ],
                "make_index_funcs": [
                    1780,
                    1781,
                    1758,
                    1767
                ],
                "makeMultiIndex": [
                    1765
                ],
                "randn": [
                    1793,
                    1805,
                    1811,
                    1817,
                    1788
                ],
                "c": [
                    1825,
                    1805,
                    2066,
                    2068,
                    1821
                ],
                "getCols": [
                    1825,
                    1821,
                    1805
                ],
                "nper": [
                    1825,
                    1857,
                    1830,
                    1809,
                    1810,
                    1811,
                    1815,
                    1816,
                    1817,
                    1821
                ],
                "makeTimeSeries": [
                    1821
                ],
                "makePeriodSeries": [
                    1825
                ],
                "getTimeSeriesData": [
                    1830
                ],
                "getSeriesData": [
                    1835
                ],
                "getMixedTypeDict": [
                    1853
                ],
                "getPeriodData": [
                    1857
                ],
                "ndupe_l": [
                    1888,
                    1927,
                    1928,
                    1929,
                    1931,
                    1943,
                    1947,
                    1886,
                    1887
                ],
                "nlevels": [
                    1888,
                    1889,
                    1891,
                    1958,
                    1927,
                    1896,
                    1928,
                    1929,
                    1902,
                    1934,
                    1887
                ],
                "is_sequence": [
                    1888
                ],
                "idx_type": [
                    1921,
                    1890,
                    1891,
                    1923,
                    1914
                ],
                "prefix": [
                    1896,
                    1946
                ],
                "idx_func": [
                    1906,
                    1915,
                    1916
                ],
                "get": [
                    1906
                ],
                "idx": [
                    1920,
                    1916,
                    1919
                ],
                "nentries": [
                    1955,
                    1916,
                    1949,
                    1943
                ],
                "idx.name": [
                    1919
                ],
                "ndupe_l.extend": [
                    1928
                ],
                "all": [
                    1931
                ],
                "tuples": [
                    1952,
                    1957,
                    1960,
                    1962,
                    1933,
                    1950
                ],
                "numeric_tuple": [
                    1939,
                    1940
                ],
                "split": [
                    1939
                ],
                "re.sub": [
                    1939
                ],
                "re": [
                    1939
                ],
                "num": [
                    1940
                ],
                "div_factor": [
                    1945,
                    1943
                ],
                "cnt": [
                    1944,
                    1947,
                    1949
                ],
                "Counter": [
                    1944
                ],
                "j": [
                    2149,
                    2150,
                    2095,
                    2096,
                    2097,
                    1945,
                    1946,
                    2142,
                    2143
                ],
                "label": [
                    1946,
                    1947
                ],
                "cnt.elements": [
                    1949
                ],
                "keyfunc": [
                    1949
                ],
                "tuples.append": [
                    1950
                ],
                "MultiIndex.from_tuples": [
                    1962
                ],
                "c_idx_nlevels": [
                    2049,
                    2044,
                    2038,
                    2132
                ],
                "r_idx_nlevels": [
                    2041,
                    2133,
                    2057,
                    2039
                ],
                "r_idx_type": [
                    2040,
                    2041,
                    2139,
                    2061
                ],
                "c_idx_type": [
                    2138,
                    2043,
                    2044,
                    2053
                ],
                "makeCustomIndex": [
                    2055,
                    2047
                ],
                "ncols": [
                    2048,
                    2080,
                    2088,
                    2129,
                    2068,
                    2142
                ],
                "c_idx_names": [
                    2130,
                    2051
                ],
                "c_ndupe_l": [
                    2052,
                    2135
                ],
                "nrows": [
                    2080,
                    2056,
                    2088,
                    2095,
                    2096,
                    2128,
                    2068,
                    2142
                ],
                "r_idx_names": [
                    2131,
                    2059
                ],
                "r_ndupe_l": [
                    2136,
                    2060
                ],
                "data_gen_f": [
                    2065,
                    2066,
                    2068,
                    2134
                ],
                "random_state": [
                    2149,
                    2090,
                    2093,
                    2074,
                    2075,
                    2077,
                    2142
                ],
                "density": [
                    2080,
                    2149,
                    2142
                ],
                "min_rows": [
                    2082,
                    2084
                ],
                "fac": [
                    2083,
                    2084
                ],
                "extra_size": [
                    2090,
                    2084,
                    2093,
                    2092
                ],
                "min": [
                    2084
                ],
                "ind": [
                    2087,
                    2088,
                    2090,
                    2091,
                    2093,
                    2095,
                    2096
                ],
                "rng.rand": [
                    2087
                ],
                "rng": [
                    2087
                ],
                "_extra_size": [
                    2087
                ],
                "np.unique": [
                    2088
                ],
                "np.floor": [
                    2088,
                    2095
                ],
                "_gen_unique_rand": [
                    2090,
                    2093
                ],
                "ind.size": [
                    2091
                ],
                "i.tolist": [
                    2097
                ],
                "j.tolist": [
                    2097
                ],
                "makeCustomDataframe": [
                    2127
                ],
                "_create_missing_idx": [
                    2149,
                    2142
                ],
                "df.values": [
                    2150,
                    2143
                ],
                "np.nan": [
                    2744,
                    2150,
                    2143
                ],
                "makeDataFrame": [
                    2148
                ],
                "df.shape": [
                    2149
                ],
                "decorator": [
                    2169,
                    2166
                ],
                "is_decorating": [
                    2171,
                    2172
                ],
                "callable": [
                    2171
                ],
                "dec": [
                    2177,
                    2175
                ],
                "wraps": [
                    2624,
                    2354,
                    2166
                ],
                "wrapper": [
                    2384,
                    2642,
                    2179
                ],
                "_network_error_messages": [
                    2263,
                    2183
                ],
                "_network_errno_vals": [
                    2203,
                    2262
                ],
                "IOError": [
                    2224
                ],
                "http.client.HTTPException": [
                    2224
                ],
                "http.client": [
                    2224
                ],
                "http": [
                    2224
                ],
                "TimeoutError": [
                    2224
                ],
                "error_classes": [
                    2243,
                    2244,
                    2376,
                    2249,
                    2379,
                    2349,
                    2350,
                    2357
                ],
                "_get_default_network_errors": [
                    2244,
                    2350
                ],
                "urlopen": [
                    2247
                ],
                "url": [
                    2379,
                    2357,
                    2247
                ],
                "t.network": [
                    2352
                ],
                "t": [
                    2352,
                    2360,
                    2354
                ],
                "check_before_test": [
                    2356
                ],
                "raise_on_error": [
                    2379,
                    2356
                ],
                "can_connect": [
                    2379,
                    2357
                ],
                "skip": [
                    2382,
                    2372,
                    2358,
                    2367
                ],
                "Exception": [
                    2361,
                    2772,
                    2773
                ],
                "errno": [
                    2362,
                    2363,
                    2364,
                    2366
                ],
                "err": [
                    2369,
                    2373,
                    2376,
                    2382,
                    2362,
                    2364,
                    2367
                ],
                "err.reason": [
                    2364
                ],
                "skip_errnos": [
                    2366
                ],
                "e_str": [
                    2369,
                    2371
                ],
                "any": [
                    2371
                ],
                "m.lower": [
                    2371
                ],
                "m": [
                    2371,
                    2468,
                    2470
                ],
                "e_str.lower": [
                    2371
                ],
                "_skip_on_messages": [
                    2371
                ],
                "optional_args": [
                    2255
                ],
                "with_connectivity_check": [
                    2387
                ],
                "network": [
                    2387
                ],
                "Warning": [
                    2392
                ],
                "warnings.catch_warnings": [
                    2460
                ],
                "w": [
                    2480,
                    2460,
                    2477
                ],
                "clear": [
                    2466,
                    2467,
                    2468,
                    2462
                ],
                "is_list_like": [
                    2466
                ],
                "m.__warningregistry__.clear": [
                    2470
                ],
                "m.__warningregistry__": [
                    2470
                ],
                "saw_warning": [
                    2512,
                    2475,
                    2484
                ],
                "filter_level": [
                    2476
                ],
                "extra_warnings": [
                    2513,
                    2499,
                    2478,
                    2515
                ],
                "actual_warning": [
                    2497,
                    2501,
                    2502,
                    2503,
                    2504,
                    2480,
                    2482,
                    2487,
                    2494,
                    2495
                ],
                "expected_warning": [
                    2481,
                    2482,
                    2507,
                    2510
                ],
                "issubclass": [
                    2481,
                    2486
                ],
                "actual_warning.category": [
                    2482,
                    2501,
                    2487
                ],
                "check_stacklevel": [
                    2486
                ],
                "FutureWarning": [
                    2487
                ],
                "caller": [
                    2497,
                    2491,
                    2495
                ],
                "getframeinfo": [
                    2491
                ],
                "stack": [
                    2491
                ],
                "actual_warning.filename": [
                    2497,
                    2494,
                    2503
                ],
                "caller.filename": [
                    2497,
                    2495
                ],
                "actual_warning.message": [
                    2502,
                    2495
                ],
                "extra_warnings.append": [
                    2499
                ],
                "actual_warning.category.__name__": [
                    2501
                ],
                "actual_warning.lineno": [
                    2504
                ],
                "expected_warning.__name__": [
                    2510
                ],
                "raise_on_extra_warnings": [
                    2513
                ],
                "self.seed": [
                    2536,
                    2541
                ],
                "self": [
                    2536,
                    2545,
                    2540,
                    2541
                ],
                "self.start_state": [
                    2545,
                    2540
                ],
                "np.random.get_state": [
                    2540
                ],
                "np.random.seed": [
                    2541
                ],
                "np.random.set_state": [
                    2545
                ],
                "_BUILTIN_DIALECTS": [
                    2570,
                    2572
                ],
                "csv.register_dialect": [
                    2575
                ],
                "csv": [
                    2577,
                    2575
                ],
                "csv.unregister_dialect": [
                    2577
                ],
                "min_elements": [
                    2584,
                    2585,
                    2590
                ],
                "expr._MIN_ELEMENTS": [
                    2592,
                    2585,
                    2588,
                    2590
                ],
                "expr": [
                    2592,
                    2593,
                    2585,
                    2587,
                    2588,
                    2589,
                    2590
                ],
                "olduse": [
                    2593,
                    2587
                ],
                "expr._USE_NUMEXPR": [
                    2587
                ],
                "oldmin": [
                    2592,
                    2588
                ],
                "expr.set_use_numexpr": [
                    2593,
                    2589
                ],
                "use": [
                    2589
                ],
                "num_threads": [
                    2617,
                    2620,
                    2631
                ],
                "has_kwargs_list": [
                    2618,
                    2619,
                    2626
                ],
                "kwargs_list": [
                    2618,
                    2627,
                    2620
                ],
                "update_kwargs": [
                    2632,
                    2627,
                    2629
                ],
                "threads": [
                    2634,
                    2635,
                    2637,
                    2630
                ],
                "updated_kwargs": [
                    2632,
                    2633
                ],
                "thread": [
                    2633,
                    2634,
                    2635,
                    2636,
                    2637,
                    2638
                ],
                "threading.Thread": [
                    2633
                ],
                "threading": [
                    2633
                ],
                "func": [
                    2624,
                    2633
                ],
                "threads.append": [
                    2634
                ],
                "thread.start": [
                    2636
                ],
                "thread.join": [
                    2638
                ],
                "inner": [
                    2640
                ],
                "_metadata": [
                    2658,
                    2646
                ],
                "SubclassedSeries": [
                    2650,
                    2666
                ],
                "property": [
                    2660,
                    2664,
                    2670,
                    2648,
                    2652
                ],
                "SubclassedDataFrame": [
                    2662,
                    2654
                ],
                "SubclassedCategorical": [
                    2672
                ],
                "tz": [
                    2707,
                    2701,
                    2711
                ],
                "KeyError": [
                    2704
                ],
                "time.tzset": [
                    2708
                ],
                "time": [
                    2708
                ],
                "orig_tz": [
                    2715,
                    2710
                ],
                "setTZ": [
                    2715,
                    2711
                ],
                "skipna_alternative": [
                    2737,
                    2734
                ],
                "x.values": [
                    2737
                ],
                "nona": [
                    2745,
                    2742,
                    2743
                ],
                "x.dropna": [
                    2742
                ],
                "alternative": [
                    2745
                ],
                "skipna_wrapper": [
                    2747
                ],
                "List": [
                    2750
                ],
                "sep": [
                    2766,
                    2767
                ],
                "os.linesep": [
                    2766
                ],
                "sep.join": [
                    2767
                ],
                "rows_list": [
                    2767
                ],
                "Type": [
                    2772,
                    2773
                ],
                "pytest.raises": [
                    2789
                ],
                "expected_exception": [
                    2789
                ],
                "Callable": [
                    2773
                ]
            },
            "filtered_variables_in_file": {
                "lzma": [
                    212,
                    70,
                    263
                ],
                "_import_lzma": [
                    70
                ],
                "N": [
                    1792,
                    1793,
                    1797,
                    1799,
                    72,
                    1804,
                    1805,
                    1810,
                    1816,
                    1787,
                    1788
                ],
                "K": [
                    73,
                    1821,
                    1805,
                    1825
                ],
                "_RAISE_NETWORK_ERROR_DEFAULT": [
                    74,
                    2259
                ],
                "_testing_mode_warnings": [
                    91,
                    84,
                    77
                ],
                "testing_mode": [
                    89,
                    82,
                    83,
                    90
                ],
                "os.environ.get": [
                    89,
                    82,
                    2710
                ],
                "os.environ": [
                    569,
                    2703,
                    82,
                    2707,
                    565,
                    2710,
                    89,
                    570
                ],
                "os": [
                    514,
                    2766,
                    569,
                    528,
                    2703,
                    82,
                    2707,
                    532,
                    533,
                    565,
                    2710,
                    89,
                    570
                ],
                "warnings.simplefilter": [
                    2476,
                    91,
                    84
                ],
                "warnings": [
                    2460,
                    2476,
                    91,
                    84
                ],
                "set_testing_mode": [
                    94
                ],
                "pd.reset_option": [
                    101
                ],
                "pd": [
                    1409,
                    1411,
                    793,
                    1445,
                    1446,
                    1447,
                    1448,
                    1449,
                    1450,
                    1716,
                    312,
                    1725,
                    322,
                    706,
                    708,
                    332,
                    101,
                    1637,
                    1642,
                    1516,
                    1521,
                    1522,
                    127,
                    126,
                    1407
                ],
                "Any": [
                    105
                ],
                "Optional": [
                    105,
                    130,
                    159
                ],
                "FilePathOrBuffer": [
                    105
                ],
                "_path": [
                    122,
                    123,
                    124,
                    125
                ],
                "path": [
                    154,
                    276,
                    206,
                    219,
                    208,
                    210,
                    180,
                    181,
                    182,
                    151,
                    152,
                    153,
                    122,
                    155,
                    184,
                    212,
                    183,
                    214
                ],
                "rands": [
                    124
                ],
                "ensure_clean": [
                    153,
                    125,
                    182
                ],
                "temp_path": [
                    125,
                    126,
                    127
                ],
                "pd.to_pickle": [
                    126
                ],
                "obj": [
                    898,
                    899,
                    900,
                    1155,
                    647,
                    906,
                    651,
                    907,
                    1162,
                    654,
                    658,
                    787,
                    661,
                    155,
                    156,
                    923,
                    810,
                    684,
                    690,
                    691,
                    1204,
                    1333,
                    184,
                    185,
                    698,
                    1209,
                    1213,
                    705,
                    1474,
                    707,
                    1348,
                    1475,
                    1476,
                    967,
                    1477,
                    713,
                    1478,
                    1479,
                    972,
                    845,
                    1481,
                    847,
                    1360,
                    853,
                    858,
                    1371,
                    988,
                    861,
                    353,
                    737,
                    355,
                    356,
                    738,
                    741,
                    742,
                    998,
                    999,
                    1130,
                    1390,
                    623,
                    1009,
                    882,
                    627,
                    883,
                    884,
                    1141,
                    633,
                    890,
                    891,
                    126
                ],
                "pd.read_pickle": [
                    127
                ],
                "FrameOrSeries": [
                    106
                ],
                "Path": [
                    154,
                    155,
                    150
                ],
                "pytest.importorskip": [
                    179,
                    150
                ],
                "pytest": [
                    522,
                    179,
                    2789,
                    150
                ],
                "writer": [
                    154,
                    183
                ],
                "reader": [
                    184,
                    155
                ],
                "LocalPath": [
                    184,
                    179,
                    183
                ],
                "local": [
                    179
                ],
                "compression": [
                    258,
                    227,
                    262,
                    265,
                    267,
                    205,
                    207,
                    209,
                    211,
                    213,
                    250,
                    221,
                    254
                ],
                "f": [
                    224,
                    2169,
                    226,
                    206,
                    208,
                    210,
                    212,
                    276,
                    277,
                    2173,
                    217,
                    506,
                    509,
                    2175,
                    511
                ],
                "gzip.open": [
                    208
                ],
                "gzip": [
                    208,
                    257
                ],
                "bz2.BZ2File": [
                    210,
                    261
                ],
                "bz2": [
                    210,
                    261
                ],
                "_get_lzma_file": [
                    212,
                    263
                ],
                "zip_file": [
                    217,
                    228,
                    214,
                    215
                ],
                "zipfile.ZipFile": [
                    253,
                    214
                ],
                "zipfile": [
                    253,
                    214
                ],
                "zip_names": [
                    216,
                    217,
                    215
                ],
                "zip_file.namelist": [
                    215
                ],
                "zip_file.open": [
                    217
                ],
                "zip_names.pop": [
                    217
                ],
                "f.close": [
                    226,
                    511
                ],
                "zip_file.close": [
                    228
                ],
                "contextmanager": [
                    557,
                    2675,
                    2548,
                    2580,
                    2390,
                    538,
                    475,
                    188
                ],
                "compress_method": [
                    257,
                    261,
                    263,
                    276,
                    253
                ],
                "gzip.GzipFile": [
                    257
                ],
                "mode": [
                    272,
                    268,
                    276
                ],
                "args": [
                    2633,
                    269,
                    273,
                    277,
                    2360,
                    2169,
                    2171,
                    2173,
                    2174
                ],
                "dest": [
                    269
                ],
                "data": [
                    1857,
                    1858,
                    1797,
                    1798,
                    1830,
                    1800,
                    1831,
                    1835,
                    1836,
                    269,
                    273,
                    1842,
                    2068,
                    2070,
                    1849
                ],
                "method": [
                    274,
                    277,
                    270
                ],
                "Union": [
                    587,
                    716,
                    589,
                    283,
                    284
                ],
                "left": [
                    1545,
                    1547,
                    1548,
                    1037,
                    1040,
                    1042,
                    1044,
                    1047,
                    1051,
                    1118,
                    1123,
                    1127,
                    1128,
                    1134,
                    1149,
                    1155,
                    644,
                    647,
                    1159,
                    650,
                    652,
                    1168,
                    657,
                    659,
                    1172,
                    1174,
                    664,
                    665,
                    668,
                    1180,
                    670,
                    1184,
                    1185,
                    1186,
                    1190,
                    1192,
                    1193,
                    684,
                    1197,
                    688,
                    689,
                    1200,
                    691,
                    694,
                    1209,
                    699,
                    1212,
                    1213,
                    705,
                    706,
                    707,
                    708,
                    709,
                    712,
                    713,
                    733,
                    735,
                    738,
                    740,
                    742,
                    761,
                    1324,
                    1327,
                    1331,
                    1333,
                    312,
                    1337,
                    314,
                    1341,
                    322,
                    324,
                    1353,
                    842,
                    332,
                    845,
                    334,
                    847,
                    851,
                    1366,
                    856,
                    345,
                    348,
                    861,
                    352,
                    1376,
                    1378,
                    356,
                    358,
                    880,
                    882,
                    883,
                    884,
                    888,
                    890,
                    891,
                    1407,
                    384,
                    896,
                    386,
                    898,
                    899,
                    900,
                    1408,
                    1409,
                    1410,
                    905,
                    906,
                    907,
                    396,
                    397,
                    1413,
                    1414,
                    1415,
                    913,
                    914,
                    915,
                    916,
                    1420,
                    1421,
                    1422,
                    1423,
                    1424,
                    1425,
                    1427,
                    1429,
                    926,
                    1411,
                    1412,
                    967,
                    969,
                    974,
                    1416,
                    986,
                    1417,
                    988,
                    1418,
                    992,
                    1419,
                    997,
                    999,
                    1004,
                    1005,
                    1516,
                    1518,
                    1008,
                    1009,
                    1521,
                    1525,
                    1528,
                    1531
                ],
                "pd.Index": [
                    312,
                    1445,
                    1446,
                    1407
                ],
                "assert_index_equal": [
                    1408,
                    674,
                    1352,
                    845,
                    1133,
                    850,
                    882,
                    883,
                    855,
                    313,
                    1340
                ],
                "right": [
                    1545,
                    1547,
                    1548,
                    1038,
                    1040,
                    1042,
                    1044,
                    1048,
                    1052,
                    1118,
                    1123,
                    1127,
                    1129,
                    1135,
                    1150,
                    1155,
                    644,
                    647,
                    1160,
                    650,
                    653,
                    1168,
                    657,
                    660,
                    1172,
                    1175,
                    666,
                    1181,
                    671,
                    1184,
                    1185,
                    1189,
                    1190,
                    1194,
                    1195,
                    684,
                    1197,
                    688,
                    689,
                    1201,
                    691,
                    695,
                    1209,
                    700,
                    1212,
                    1213,
                    705,
                    706,
                    707,
                    708,
                    709,
                    712,
                    713,
                    733,
                    735,
                    738,
                    740,
                    742,
                    762,
                    1324,
                    1327,
                    1331,
                    1333,
                    1337,
                    315,
                    1342,
                    325,
                    842,
                    1354,
                    845,
                    335,
                    847,
                    852,
                    1365,
                    345,
                    857,
                    348,
                    861,
                    352,
                    1377,
                    1379,
                    356,
                    359,
                    880,
                    882,
                    883,
                    884,
                    888,
                    890,
                    891,
                    896,
                    1408,
                    898,
                    899,
                    388,
                    900,
                    390,
                    1410,
                    1412,
                    905,
                    906,
                    907,
                    396,
                    397,
                    1414,
                    1416,
                    1418,
                    1420,
                    1422,
                    1424,
                    1427,
                    918,
                    919,
                    920,
                    921,
                    927,
                    967,
                    969,
                    975,
                    986,
                    988,
                    992,
                    999,
                    1004,
                    1005,
                    1516,
                    1518,
                    1008,
                    1009,
                    1522,
                    1526,
                    1529
                ],
                "check_dtype": [
                    1059,
                    327,
                    360,
                    1161,
                    1383,
                    1546,
                    1548,
                    1518,
                    847,
                    1007,
                    337,
                    1039,
                    1203,
                    344,
                    1371,
                    1144,
                    317,
                    1182
                ],
                "check_less_precise": [
                    1345,
                    1060,
                    679,
                    328,
                    361,
                    1385,
                    1357,
                    338,
                    1138,
                    1202,
                    696,
                    318
                ],
                "kwargs": [
                    1408,
                    1410,
                    1412,
                    518,
                    1414,
                    1416,
                    1418,
                    1420,
                    1422,
                    2575,
                    1424,
                    1426,
                    2360,
                    1595,
                    319,
                    1602,
                    2627,
                    2629,
                    329,
                    339,
                    1622,
                    1633,
                    1637,
                    362,
                    1642,
                    1647,
                    503,
                    2169,
                    506,
                    2171
                ],
                "pd.Series": [
                    1409,
                    322,
                    1447,
                    1448,
                    1450,
                    793
                ],
                "assert_series_equal": [
                    1410,
                    323,
                    1380
                ],
                "pd.DataFrame": [
                    1449,
                    1411,
                    332,
                    1725
                ],
                "assert_frame_equal": [
                    1370,
                    1412,
                    333
                ],
                "is_number": [
                    345,
                    769,
                    767
                ],
                "is_bool": [
                    348
                ],
                "np.ndarray": [
                    352,
                    969,
                    1423,
                    1008,
                    913,
                    918,
                    1463,
                    793
                ],
                "np": [
                    768,
                    770,
                    1423,
                    913,
                    404,
                    405,
                    918,
                    407,
                    1047,
                    793,
                    1048,
                    1051,
                    1052,
                    2075,
                    2077,
                    416,
                    417,
                    2080,
                    2088,
                    431,
                    432,
                    689,
                    690,
                    818,
                    2095,
                    1718,
                    1463,
                    1464,
                    2744,
                    1595,
                    448,
                    1601,
                    969,
                    458,
                    1481,
                    1626,
                    1627,
                    2143,
                    352,
                    998,
                    2150,
                    2540,
                    2541,
                    1008,
                    2545
                ],
                "assert_class_equal": [
                    967,
                    356,
                    623
                ],
                "_testing.assert_almost_equal": [
                    1056,
                    1199,
                    357,
                    693
                ],
                "_testing": [
                    1056,
                    357,
                    397,
                    1199,
                    693
                ],
                "cls_name": [
                    386,
                    390,
                    382
                ],
                "cls.__name__": [
                    382
                ],
                "cls": [
                    384,
                    386,
                    388,
                    390,
                    382
                ],
                "_check_isinstance": [
                    896,
                    644,
                    905,
                    842,
                    969,
                    396,
                    1324,
                    1516,
                    880,
                    888,
                    1118
                ],
                "_testing.assert_dict_equal": [
                    397
                ],
                "compare_keys": [
                    397
                ],
                "rand": [
                    401
                ],
                "size": [
                    416,
                    2080,
                    418,
                    2084,
                    2088,
                    2091,
                    431,
                    401,
                    433
                ],
                "p": [
                    401
                ],
                "RANDS_CHARS": [
                    416,
                    404,
                    448
                ],
                "np.array": [
                    1481,
                    818,
                    404,
                    405,
                    1464
                ],
                "string.ascii_letters": [
                    404
                ],
                "string": [
                    1579,
                    404,
                    406
                ],
                "string.digits": [
                    404,
                    406
                ],
                "np.str_": [
                    417,
                    404
                ],
                "RANDU_CHARS": [
                    458,
                    405,
                    431
                ],
                "join": [
                    448,
                    458,
                    406
                ],
                "np.unicode_": [
                    432,
                    407
                ],
                "retval": [
                    421,
                    423,
                    430,
                    436,
                    438,
                    415
                ],
                "reshape": [
                    416,
                    431
                ],
                "view": [
                    416,
                    431
                ],
                "np.random.choice": [
                    416,
                    458,
                    448,
                    431
                ],
                "np.random": [
                    416,
                    448,
                    2075,
                    458,
                    2540,
                    2541,
                    431,
                    2545,
                    1718,
                    1626,
                    1627,
                    2077
                ],
                "nchars": [
                    416,
                    417,
                    448,
                    458,
                    431,
                    432
                ],
                "np.prod": [
                    416,
                    431
                ],
                "dtype": [
                    2137,
                    420,
                    423,
                    435,
                    438,
                    1367,
                    1368,
                    1369,
                    2070,
                    1371
                ],
                "retval.astype": [
                    438,
                    423
                ],
                "fignum": [
                    464,
                    465,
                    466,
                    468
                ],
                "get_fignums": [
                    465
                ],
                "_close": [
                    466,
                    468
                ],
                "filename": [
                    514,
                    518,
                    525,
                    530,
                    500,
                    532,
                    533,
                    503
                ],
                "fd": [
                    528,
                    530,
                    501,
                    518
                ],
                "return_filelike": [
                    505
                ],
                "tempfile.TemporaryFile": [
                    506
                ],
                "tempfile": [
                    506,
                    547,
                    518
                ],
                "os.path.dirname": [
                    514
                ],
                "os.path": [
                    514,
                    532
                ],
                "tempfile.mkstemp": [
                    518
                ],
                "pytest.skip": [
                    522
                ],
                "os.close": [
                    528
                ],
                "os.path.exists": [
                    532
                ],
                "os.remove": [
                    533
                ],
                "e": [
                    535
                ],
                "directory_name": [
                    552,
                    547,
                    549
                ],
                "tempfile.mkdtemp": [
                    547
                ],
                "rmtree": [
                    552
                ],
                "saved_environ": [
                    570,
                    565
                ],
                "os.environ.clear": [
                    569
                ],
                "os.environ.update": [
                    570
                ],
                "arr1": [
                    581
                ],
                "arr2": [
                    581
                ],
                "Index": [
                    644,
                    1957,
                    1798,
                    1607,
                    1960,
                    585,
                    586,
                    1609,
                    1610,
                    1614,
                    815,
                    1584,
                    1840,
                    1618,
                    723,
                    1172,
                    1588,
                    1627
                ],
                "__tracebackhide__": [
                    963,
                    904,
                    1321,
                    619,
                    911,
                    720,
                    759,
                    2458,
                    1115,
                    1405,
                    895
                ],
                "exact": [
                    739,
                    677,
                    622,
                    623,
                    882,
                    883,
                    697,
                    732
                ],
                "l": [
                    992,
                    994,
                    623,
                    627,
                    630,
                    633
                ],
                "r": [
                    992,
                    994,
                    623,
                    2066,
                    627,
                    2068,
                    631,
                    633
                ],
                "check_categorical": [
                    1347,
                    711,
                    1389,
                    687,
                    1359,
                    626,
                    1140,
                    1211,
                    1151
                ],
                "assert_attr_equal": [
                    705,
                    707,
                    899,
                    900,
                    1155,
                    1209,
                    1545,
                    907,
                    1547,
                    1040,
                    1009,
                    627,
                    884,
                    633,
                    891,
                    861
                ],
                "l.inferred_type": [
                    630
                ],
                "r.inferred_type": [
                    631
                ],
                "unique": [
                    640,
                    637,
                    639
                ],
                "index.levels": [
                    637
                ],
                "index": [
                    640,
                    1792,
                    1793,
                    1799,
                    1800,
                    2055,
                    1804,
                    1805,
                    2070,
                    1957,
                    1960,
                    1962,
                    1963,
                    1840,
                    1716,
                    1717,
                    1849,
                    1725,
                    1787,
                    1788,
                    637,
                    638
                ],
                "level": [
                    640,
                    673,
                    638,
                    684,
                    668,
                    637,
                    670,
                    671
                ],
                "level_codes": [
                    638,
                    639
                ],
                "index.codes": [
                    638
                ],
                "filled": [
                    640,
                    639
                ],
                "take_1d": [
                    639
                ],
                "unique._values": [
                    639
                ],
                "unique._na_value": [
                    639
                ],
                "values": [
                    640,
                    641,
                    1626,
                    1627
                ],
                "unique._shallow_copy": [
                    640
                ],
                "index.names": [
                    640
                ],
                "_check_types": [
                    684,
                    647
                ],
                "left.nlevels": [
                    664,
                    668,
                    650,
                    652
                ],
                "right.nlevels": [
                    650,
                    653
                ],
                "msg1": [
                    1128,
                    1130,
                    651,
                    654,
                    658,
                    661
                ],
                "msg2": [
                    1129,
                    1130,
                    652,
                    654,
                    659,
                    661
                ],
                "msg3": [
                    660,
                    653,
                    654,
                    661
                ],
                "raise_assert_detail": [
                    1537,
                    738,
                    742,
                    999,
                    1130,
                    654,
                    691,
                    787,
                    661,
                    1332,
                    987
                ],
                "cast": [
                    665,
                    666
                ],
                "MultiIndex": [
                    1962,
                    665,
                    666,
                    1647
                ],
                "llevel": [
                    675,
                    670
                ],
                "_get_ilevel_values": [
                    670,
                    671
                ],
                "rlevel": [
                    676,
                    671
                ],
                "lobj": [
                    673,
                    681
                ],
                "check_names": [
                    704,
                    1344,
                    678,
                    1387,
                    1356,
                    1137,
                    1208
                ],
                "check_exact": [
                    1346,
                    1157,
                    680,
                    1386,
                    1358,
                    687,
                    1139,
                    1053
                ],
                "left.levels": [
                    684
                ],
                "right.levels": [
                    684
                ],
                "left.equals": [
                    688
                ],
                "diff": [
                    929,
                    930,
                    995,
                    997,
                    998,
                    689,
                    690,
                    991
                ],
                "np.sum": [
                    689
                ],
                "astype": [
                    2095,
                    2096,
                    689,
                    1051,
                    1052
                ],
                "left.values": [
                    709,
                    713,
                    689,
                    1172,
                    694,
                    1174,
                    1213
                ],
                "right.values": [
                    709,
                    713,
                    689,
                    1172,
                    695,
                    1175,
                    1213
                ],
                "msg": [
                    786,
                    787,
                    1173,
                    1177,
                    923,
                    795,
                    799,
                    801,
                    930,
                    1571,
                    932,
                    806,
                    1575,
                    690,
                    691,
                    2492,
                    2497,
                    2508,
                    2512,
                    737,
                    738,
                    741,
                    742,
                    998,
                    999
                ],
                "np.round": [
                    2080,
                    690,
                    998
                ],
                "pd.PeriodIndex": [
                    706
                ],
                "pd.IntervalIndex": [
                    708
                ],
                "assert_interval_array_equal": [
                    1185,
                    709,
                    1414
                ],
                "is_categorical_dtype": [
                    712,
                    1193,
                    1195,
                    915,
                    920,
                    1212,
                    1149,
                    1150
                ],
                "assert_categorical_equal": [
                    713,
                    1213
                ],
                "x": [
                    1601,
                    1602,
                    1960,
                    1931,
                    2737,
                    723,
                    1939,
                    725,
                    2742,
                    728,
                    1593,
                    730,
                    1595
                ],
                "types": [
                    736,
                    735
                ],
                "repr_class": [
                    738,
                    742
                ],
                "left_attr": [
                    768,
                    776,
                    787,
                    761,
                    764,
                    767
                ],
                "attr": [
                    761,
                    762,
                    786
                ],
                "right_attr": [
                    769,
                    770,
                    776,
                    787,
                    762,
                    764
                ],
                "np.isnan": [
                    768,
                    770
                ],
                "result": [
                    776,
                    779,
                    780,
                    781,
                    783,
                    1949,
                    1950
                ],
                "result.all": [
                    781
                ],
                "objs": [
                    793,
                    794,
                    804,
                    806
                ],
                "el": [
                    794,
                    797,
                    799
                ],
                "objs.ravel": [
                    794
                ],
                "plt.Axes": [
                    799
                ],
                "plt": [
                    806,
                    799
                ],
                "plt.Artist": [
                    806
                ],
                "seq": [
                    816,
                    818,
                    815
                ],
                "Series": [
                    1793,
                    1800,
                    1805,
                    815,
                    1811,
                    2645,
                    1817,
                    1788,
                    1118
                ],
                "seq.values": [
                    816
                ],
                "assert_numpy_array_equal": [
                    898,
                    1158,
                    906,
                    1548,
                    846,
                    1518,
                    1424,
                    818,
                    1044,
                    1049,
                    890,
                    1179,
                    1054
                ],
                "np.sort": [
                    818
                ],
                "Categorical": [
                    842,
                    1595,
                    2669
                ],
                "check_category_order": [
                    844
                ],
                "left.categories": [
                    856,
                    851,
                    845
                ],
                "right.categories": [
                    857,
                    852,
                    845
                ],
                "left.codes": [
                    856,
                    847
                ],
                "right.codes": [
                    857,
                    847
                ],
                "left.categories.sort_values": [
                    851
                ],
                "right.categories.sort_values": [
                    852
                ],
                "left.categories.take": [
                    856
                ],
                "right.categories.take": [
                    857
                ],
                "IntervalArray": [
                    880,
                    1413
                ],
                "left.left": [
                    882
                ],
                "right.left": [
                    882
                ],
                "left.right": [
                    883
                ],
                "right.right": [
                    883
                ],
                "PeriodArray": [
                    888,
                    1456,
                    1415
                ],
                "left._data": [
                    890,
                    906,
                    898
                ],
                "right._data": [
                    890,
                    906,
                    898
                ],
                "DatetimeArray": [
                    896,
                    1477,
                    1417,
                    1459,
                    1460
                ],
                "TimedeltaArray": [
                    1479,
                    905,
                    1419,
                    1461,
                    1462
                ],
                "pprint_thing": [
                    914,
                    919
                ],
                "message": [
                    925
                ],
                "obj.base": [
                    972
                ],
                "left_base": [
                    974,
                    978,
                    979,
                    981,
                    982
                ],
                "_get_base": [
                    974,
                    975
                ],
                "right_base": [
                    975,
                    978,
                    979,
                    981,
                    982
                ],
                "check_same": [
                    977,
                    980
                ],
                "err_msg": [
                    985,
                    1001,
                    1005
                ],
                "left.shape": [
                    986,
                    1331,
                    988,
                    1333
                ],
                "right.shape": [
                    986,
                    1331,
                    988,
                    1333
                ],
                "array_equivalent": [
                    994,
                    1004
                ],
                "strict_nan": [
                    994,
                    1004
                ],
                "left.size": [
                    997
                ],
                "_raise": [
                    1005
                ],
                "ExtensionArray": [
                    1421,
                    1037,
                    1038
                ],
                "left.asi8": [
                    1044
                ],
                "right.asi8": [
                    1044
                ],
                "left_na": [
                    1049,
                    1051,
                    1047
                ],
                "np.asarray": [
                    1048,
                    1051,
                    1052,
                    1047
                ],
                "left.isna": [
                    1047
                ],
                "right_na": [
                    1048,
                    1049,
                    1052
                ],
                "right.isna": [
                    1048
                ],
                "left_valid": [
                    1057,
                    1051,
                    1054
                ],
                "right_valid": [
                    1058,
                    1052,
                    1054
                ],
                "check_series_type": [
                    1120
                ],
                "left.index": [
                    1128,
                    1341,
                    1134
                ],
                "right.index": [
                    1129,
                    1342,
                    1135
                ],
                "check_index_type": [
                    1136,
                    1384,
                    1343
                ],
                "left._internal_get_values": [
                    1200,
                    1180,
                    1159
                ],
                "right._internal_get_values": [
                    1160,
                    1201,
                    1181
                ],
                "check_datetimelike_compat": [
                    1388,
                    1164
                ],
                "needs_i8_conversion": [
                    1168
                ],
                "equals": [
                    1172
                ],
                "is_interval_dtype": [
                    1184
                ],
                "left.array": [
                    1185,
                    1197
                ],
                "right.array": [
                    1185,
                    1197
                ],
                "is_extension_array_dtype": [
                    1192,
                    1186,
                    1194,
                    1189
                ],
                "left.dtype": [
                    1186
                ],
                "is_datetime64tz_dtype": [
                    1186,
                    1476
                ],
                "right.dtype": [
                    1189
                ],
                "assert_extension_array_equal": [
                    1422,
                    1197,
                    1190
                ],
                "left._values": [
                    1190
                ],
                "right._values": [
                    1190
                ],
                "DataFrame": [
                    2657,
                    1858,
                    1831,
                    1324,
                    1836,
                    2070,
                    1853
                ],
                "check_frame_type": [
                    1326
                ],
                "check_like": [
                    1336
                ],
                "left.reindex_like": [
                    1337
                ],
                "left.columns": [
                    1376,
                    1353
                ],
                "right.columns": [
                    1354
                ],
                "check_column_type": [
                    1355
                ],
                "by_blocks": [
                    1364
                ],
                "rblocks": [
                    1369,
                    1371,
                    1365,
                    1367
                ],
                "right._to_dict_of_blocks": [
                    1365
                ],
                "lblocks": [
                    1368,
                    1371,
                    1366,
                    1367
                ],
                "left._to_dict_of_blocks": [
                    1366
                ],
                "lblocks.keys": [
                    1367
                ],
                "rblocks.keys": [
                    1367
                ],
                "i": [
                    1934,
                    1943,
                    1946,
                    1947,
                    2096,
                    2097,
                    2627,
                    2631,
                    2632,
                    1618,
                    2142,
                    2143,
                    1376,
                    1378,
                    1379,
                    2149,
                    2150,
                    1896,
                    1390
                ],
                "col": [
                    1376,
                    1377,
                    1390
                ],
                "lcol": [
                    1378,
                    1381
                ],
                "left.iloc": [
                    1378
                ],
                "rcol": [
                    1379,
                    1382
                ],
                "right.iloc": [
                    1379
                ],
                "assert_period_array_equal": [
                    1416
                ],
                "assert_datetime_array_equal": [
                    1418
                ],
                "assert_timedelta_array_equal": [
                    1420
                ],
                "box_cls": [
                    1445,
                    1447,
                    1449,
                    1456,
                    1459,
                    1461,
                    1463,
                    1465,
                    1468
                ],
                "expected": [
                    1446,
                    1448,
                    1450,
                    1455,
                    2767,
                    2768,
                    1458,
                    1460,
                    1462,
                    1464,
                    1466,
                    1469
                ],
                "to_frame": [
                    1450
                ],
                "transpose": [
                    1451
                ],
                "expected.T": [
                    1455
                ],
                "period_array": [
                    1458,
                    1475
                ],
                "to_array": [
                    1465,
                    1466
                ],
                "is_period_dtype": [
                    1474
                ],
                "is_datetime64_dtype": [
                    1476
                ],
                "DatetimeArray._from_sequence": [
                    1477
                ],
                "is_timedelta64_dtype": [
                    1478
                ],
                "TimedeltaArray._from_sequence": [
                    1479
                ],
                "pd.arrays.SparseArray": [
                    1516
                ],
                "pd.arrays": [
                    1516
                ],
                "left.sp_values": [
                    1518
                ],
                "right.sp_values": [
                    1518
                ],
                "left.sp_index": [
                    1528,
                    1521,
                    1525
                ],
                "pd._libs.sparse.SparseIndex": [
                    1521,
                    1522
                ],
                "pd._libs.sparse": [
                    1521,
                    1522
                ],
                "pd._libs": [
                    1521,
                    1522
                ],
                "right.sp_index": [
                    1529,
                    1522,
                    1526
                ],
                "check_kind": [
                    1524
                ],
                "left_index": [
                    1536,
                    1538,
                    1525,
                    1528,
                    1533
                ],
                "left.sp_index.to_block_index": [
                    1525
                ],
                "right_index": [
                    1536,
                    1538,
                    1526,
                    1529,
                    1534
                ],
                "right.sp_index.to_block_index": [
                    1526
                ],
                "consolidate_block_indices": [
                    1531
                ],
                "left.kind": [
                    1531
                ],
                "to_block_index": [
                    1533,
                    1534
                ],
                "left_index.to_int_index": [
                    1533
                ],
                "right_index.to_int_index": [
                    1534
                ],
                "left_index.equals": [
                    1536
                ],
                "check_fill_value": [
                    1544
                ],
                "left.to_dense": [
                    1548
                ],
                "right.to_dense": [
                    1548
                ],
                "k": [
                    1556,
                    1557,
                    1579,
                    1584,
                    1588,
                    1595,
                    1601,
                    1606,
                    1608,
                    1610,
                    1614,
                    1618,
                    1622,
                    1754,
                    1626,
                    1632,
                    1637,
                    1642,
                    1782
                ],
                "iterable": [
                    1556
                ],
                "dic": [
                    1557
                ],
                "elem1": [
                    1569,
                    1570,
                    1572,
                    1575
                ],
                "elem2": [
                    1569,
                    1570,
                    1572,
                    1575
                ],
                "iter1": [
                    1569
                ],
                "iter2": [
                    1569
                ],
                "assert_almost_equal": [
                    1570
                ],
                "eql_kwargs": [
                    1570
                ],
                "string.ascii_uppercase": [
                    1579
                ],
                "rands_array": [
                    1584,
                    1593
                ],
                "name": [
                    1793,
                    1800,
                    2572,
                    2575,
                    2577,
                    1811,
                    1817,
                    1959,
                    1960,
                    1584,
                    1588,
                    1595,
                    1602,
                    1607,
                    1609,
                    1610,
                    1614,
                    1618,
                    1622,
                    1627,
                    1632,
                    1633,
                    1637,
                    1642,
                    1788
                ],
                "randu_array": [
                    1588
                ],
                "n": [
                    1721,
                    1717,
                    1720,
                    1593,
                    1722,
                    1595,
                    1723
                ],
                "CategoricalIndex": [
                    1594
                ],
                "Categorical.from_codes": [
                    1595
                ],
                "np.arange": [
                    1595
                ],
                "np.linspace": [
                    1601
                ],
                "IntervalIndex.from_breaks": [
                    1602
                ],
                "IntervalIndex": [
                    1602
                ],
                "RangeIndex": [
                    1622
                ],
                "np.random.random_sample": [
                    1626
                ],
                "np.random.randint": [
                    1627
                ],
                "dt": [
                    1632,
                    1641,
                    1642,
                    1631
                ],
                "datetime": [
                    1641,
                    1631
                ],
                "dr": [
                    1632,
                    1633,
                    1642,
                    1643
                ],
                "bdate_range": [
                    1632,
                    1846
                ],
                "freq": [
                    1632,
                    1637,
                    1830,
                    1811,
                    1716,
                    1821
                ],
                "DatetimeIndex": [
                    1633
                ],
                "pd.timedelta_range": [
                    1637
                ],
                "pd.period_range": [
                    1642
                ],
                "MultiIndex.from_product": [
                    1647
                ],
                "names": [
                    1889,
                    1957,
                    1894,
                    1959,
                    1896,
                    1897,
                    1962,
                    1899,
                    1902,
                    1647,
                    1903,
                    1918,
                    1919
                ],
                "_names": [
                    1720,
                    1650
                ],
                "pd.date_range": [
                    1716
                ],
                "start": [
                    1716
                ],
                "end": [
                    1716,
                    1726
                ],
                "state": [
                    1718,
                    1720,
                    1721,
                    1722,
                    1723
                ],
                "np.random.RandomState": [
                    2077,
                    1718
                ],
                "seed": [
                    2536,
                    1718
                ],
                "columns": [
                    2047,
                    1725,
                    2070,
                    1719
                ],
                "state.choice": [
                    1720
                ],
                "state.poisson": [
                    1721
                ],
                "state.rand": [
                    1722,
                    1723
                ],
                "df": [
                    1728,
                    2144,
                    2148,
                    2149,
                    2150,
                    2151,
                    2127,
                    2143,
                    1725,
                    1726,
                    1727
                ],
                "df.index": [
                    1726
                ],
                "df.iloc": [
                    1727
                ],
                "all_make_index_funcs": [
                    1753,
                    1740
                ],
                "makeIntIndex": [
                    1907,
                    1741
                ],
                "makeFloatIndex": [
                    1908,
                    1742
                ],
                "makeStringIndex": [
                    1792,
                    1797,
                    1799,
                    1804,
                    1743,
                    1909,
                    1787
                ],
                "makeUnicodeIndex": [
                    1744,
                    1910
                ],
                "makeDateIndex": [
                    1745,
                    1811,
                    1780,
                    1911,
                    1759
                ],
                "makePeriodIndex": [
                    1760,
                    1746,
                    1780,
                    1817,
                    1913
                ],
                "makeTimedeltaIndex": [
                    1912,
                    1761,
                    1747,
                    1780
                ],
                "makeBoolIndex": [
                    1748
                ],
                "makeRangeIndex": [
                    1762,
                    1749
                ],
                "makeIntervalIndex": [
                    1763,
                    1750
                ],
                "makeCategoricalIndex": [
                    1764,
                    1751
                ],
                "make_index_func": [
                    1767,
                    1768,
                    1781,
                    1782,
                    1753,
                    1754
                ],
                "make_index_funcs": [
                    1780,
                    1781,
                    1758,
                    1767
                ],
                "makeMultiIndex": [
                    1765
                ],
                "randn": [
                    1793,
                    1805,
                    1811,
                    1817,
                    1788
                ],
                "c": [
                    1825,
                    1805,
                    2066,
                    2068,
                    1821
                ],
                "getCols": [
                    1825,
                    1821,
                    1805
                ],
                "nper": [
                    1825,
                    1857,
                    1830,
                    1809,
                    1810,
                    1811,
                    1815,
                    1816,
                    1817,
                    1821
                ],
                "makeTimeSeries": [
                    1821
                ],
                "makePeriodSeries": [
                    1825
                ],
                "getTimeSeriesData": [
                    1830
                ],
                "getSeriesData": [
                    1835
                ],
                "getMixedTypeDict": [
                    1853
                ],
                "getPeriodData": [
                    1857
                ],
                "ndupe_l": [
                    1888,
                    1927,
                    1928,
                    1929,
                    1931,
                    1943,
                    1947,
                    1886,
                    1887
                ],
                "nlevels": [
                    1888,
                    1889,
                    1891,
                    1958,
                    1927,
                    1896,
                    1928,
                    1929,
                    1902,
                    1934,
                    1887
                ],
                "is_sequence": [
                    1888
                ],
                "idx_type": [
                    1921,
                    1890,
                    1891,
                    1923,
                    1914
                ],
                "prefix": [
                    1896,
                    1946
                ],
                "idx_func": [
                    1906,
                    1915,
                    1916
                ],
                "get": [
                    1906
                ],
                "idx": [
                    1920,
                    1916,
                    1919
                ],
                "nentries": [
                    1955,
                    1916,
                    1949,
                    1943
                ],
                "idx.name": [
                    1919
                ],
                "ndupe_l.extend": [
                    1928
                ],
                "tuples": [
                    1952,
                    1957,
                    1960,
                    1962,
                    1933,
                    1950
                ],
                "numeric_tuple": [
                    1939,
                    1940
                ],
                "split": [
                    1939
                ],
                "re.sub": [
                    1939
                ],
                "re": [
                    1939
                ],
                "num": [
                    1940
                ],
                "div_factor": [
                    1945,
                    1943
                ],
                "cnt": [
                    1944,
                    1947,
                    1949
                ],
                "Counter": [
                    1944
                ],
                "j": [
                    2149,
                    2150,
                    2095,
                    2096,
                    2097,
                    1945,
                    1946,
                    2142,
                    2143
                ],
                "label": [
                    1946,
                    1947
                ],
                "cnt.elements": [
                    1949
                ],
                "keyfunc": [
                    1949
                ],
                "tuples.append": [
                    1950
                ],
                "MultiIndex.from_tuples": [
                    1962
                ],
                "c_idx_nlevels": [
                    2049,
                    2044,
                    2038,
                    2132
                ],
                "r_idx_nlevels": [
                    2041,
                    2133,
                    2057,
                    2039
                ],
                "r_idx_type": [
                    2040,
                    2041,
                    2139,
                    2061
                ],
                "c_idx_type": [
                    2138,
                    2043,
                    2044,
                    2053
                ],
                "makeCustomIndex": [
                    2055,
                    2047
                ],
                "ncols": [
                    2048,
                    2080,
                    2088,
                    2129,
                    2068,
                    2142
                ],
                "c_idx_names": [
                    2130,
                    2051
                ],
                "c_ndupe_l": [
                    2052,
                    2135
                ],
                "nrows": [
                    2080,
                    2056,
                    2088,
                    2095,
                    2096,
                    2128,
                    2068,
                    2142
                ],
                "r_idx_names": [
                    2131,
                    2059
                ],
                "r_ndupe_l": [
                    2136,
                    2060
                ],
                "data_gen_f": [
                    2065,
                    2066,
                    2068,
                    2134
                ],
                "random_state": [
                    2149,
                    2090,
                    2093,
                    2074,
                    2075,
                    2077,
                    2142
                ],
                "density": [
                    2080,
                    2149,
                    2142
                ],
                "min_rows": [
                    2082,
                    2084
                ],
                "fac": [
                    2083,
                    2084
                ],
                "extra_size": [
                    2090,
                    2084,
                    2093,
                    2092
                ],
                "ind": [
                    2087,
                    2088,
                    2090,
                    2091,
                    2093,
                    2095,
                    2096
                ],
                "rng.rand": [
                    2087
                ],
                "rng": [
                    2087
                ],
                "_extra_size": [
                    2087
                ],
                "np.unique": [
                    2088
                ],
                "np.floor": [
                    2088,
                    2095
                ],
                "_gen_unique_rand": [
                    2090,
                    2093
                ],
                "ind.size": [
                    2091
                ],
                "i.tolist": [
                    2097
                ],
                "j.tolist": [
                    2097
                ],
                "makeCustomDataframe": [
                    2127
                ],
                "_create_missing_idx": [
                    2149,
                    2142
                ],
                "df.values": [
                    2150,
                    2143
                ],
                "np.nan": [
                    2744,
                    2150,
                    2143
                ],
                "makeDataFrame": [
                    2148
                ],
                "df.shape": [
                    2149
                ],
                "decorator": [
                    2169,
                    2166
                ],
                "is_decorating": [
                    2171,
                    2172
                ],
                "dec": [
                    2177,
                    2175
                ],
                "wraps": [
                    2624,
                    2354,
                    2166
                ],
                "wrapper": [
                    2384,
                    2642,
                    2179
                ],
                "_network_error_messages": [
                    2263,
                    2183
                ],
                "_network_errno_vals": [
                    2203,
                    2262
                ],
                "http.client.HTTPException": [
                    2224
                ],
                "http.client": [
                    2224
                ],
                "http": [
                    2224
                ],
                "error_classes": [
                    2243,
                    2244,
                    2376,
                    2249,
                    2379,
                    2349,
                    2350,
                    2357
                ],
                "_get_default_network_errors": [
                    2244,
                    2350
                ],
                "urlopen": [
                    2247
                ],
                "url": [
                    2379,
                    2357,
                    2247
                ],
                "t.network": [
                    2352
                ],
                "t": [
                    2352,
                    2360,
                    2354
                ],
                "check_before_test": [
                    2356
                ],
                "raise_on_error": [
                    2379,
                    2356
                ],
                "can_connect": [
                    2379,
                    2357
                ],
                "skip": [
                    2382,
                    2372,
                    2358,
                    2367
                ],
                "errno": [
                    2362,
                    2363,
                    2364,
                    2366
                ],
                "err": [
                    2369,
                    2373,
                    2376,
                    2382,
                    2362,
                    2364,
                    2367
                ],
                "err.reason": [
                    2364
                ],
                "skip_errnos": [
                    2366
                ],
                "e_str": [
                    2369,
                    2371
                ],
                "m.lower": [
                    2371
                ],
                "m": [
                    2371,
                    2468,
                    2470
                ],
                "e_str.lower": [
                    2371
                ],
                "_skip_on_messages": [
                    2371
                ],
                "optional_args": [
                    2255
                ],
                "with_connectivity_check": [
                    2387
                ],
                "network": [
                    2387
                ],
                "warnings.catch_warnings": [
                    2460
                ],
                "w": [
                    2480,
                    2460,
                    2477
                ],
                "clear": [
                    2466,
                    2467,
                    2468,
                    2462
                ],
                "is_list_like": [
                    2466
                ],
                "m.__warningregistry__.clear": [
                    2470
                ],
                "m.__warningregistry__": [
                    2470
                ],
                "saw_warning": [
                    2512,
                    2475,
                    2484
                ],
                "filter_level": [
                    2476
                ],
                "extra_warnings": [
                    2513,
                    2499,
                    2478,
                    2515
                ],
                "actual_warning": [
                    2497,
                    2501,
                    2502,
                    2503,
                    2504,
                    2480,
                    2482,
                    2487,
                    2494,
                    2495
                ],
                "expected_warning": [
                    2481,
                    2482,
                    2507,
                    2510
                ],
                "actual_warning.category": [
                    2482,
                    2501,
                    2487
                ],
                "check_stacklevel": [
                    2486
                ],
                "caller": [
                    2497,
                    2491,
                    2495
                ],
                "getframeinfo": [
                    2491
                ],
                "stack": [
                    2491
                ],
                "actual_warning.filename": [
                    2497,
                    2494,
                    2503
                ],
                "caller.filename": [
                    2497,
                    2495
                ],
                "actual_warning.message": [
                    2502,
                    2495
                ],
                "extra_warnings.append": [
                    2499
                ],
                "actual_warning.category.__name__": [
                    2501
                ],
                "actual_warning.lineno": [
                    2504
                ],
                "expected_warning.__name__": [
                    2510
                ],
                "raise_on_extra_warnings": [
                    2513
                ],
                "self.seed": [
                    2536,
                    2541
                ],
                "self": [
                    2536,
                    2545,
                    2540,
                    2541
                ],
                "self.start_state": [
                    2545,
                    2540
                ],
                "np.random.get_state": [
                    2540
                ],
                "np.random.seed": [
                    2541
                ],
                "np.random.set_state": [
                    2545
                ],
                "_BUILTIN_DIALECTS": [
                    2570,
                    2572
                ],
                "csv.register_dialect": [
                    2575
                ],
                "csv": [
                    2577,
                    2575
                ],
                "csv.unregister_dialect": [
                    2577
                ],
                "min_elements": [
                    2584,
                    2585,
                    2590
                ],
                "expr._MIN_ELEMENTS": [
                    2592,
                    2585,
                    2588,
                    2590
                ],
                "expr": [
                    2592,
                    2593,
                    2585,
                    2587,
                    2588,
                    2589,
                    2590
                ],
                "olduse": [
                    2593,
                    2587
                ],
                "expr._USE_NUMEXPR": [
                    2587
                ],
                "oldmin": [
                    2592,
                    2588
                ],
                "expr.set_use_numexpr": [
                    2593,
                    2589
                ],
                "use": [
                    2589
                ],
                "num_threads": [
                    2617,
                    2620,
                    2631
                ],
                "has_kwargs_list": [
                    2618,
                    2619,
                    2626
                ],
                "kwargs_list": [
                    2618,
                    2627,
                    2620
                ],
                "update_kwargs": [
                    2632,
                    2627,
                    2629
                ],
                "threads": [
                    2634,
                    2635,
                    2637,
                    2630
                ],
                "updated_kwargs": [
                    2632,
                    2633
                ],
                "thread": [
                    2633,
                    2634,
                    2635,
                    2636,
                    2637,
                    2638
                ],
                "threading.Thread": [
                    2633
                ],
                "threading": [
                    2633
                ],
                "func": [
                    2624,
                    2633
                ],
                "threads.append": [
                    2634
                ],
                "thread.start": [
                    2636
                ],
                "thread.join": [
                    2638
                ],
                "inner": [
                    2640
                ],
                "_metadata": [
                    2658,
                    2646
                ],
                "SubclassedSeries": [
                    2650,
                    2666
                ],
                "SubclassedDataFrame": [
                    2662,
                    2654
                ],
                "SubclassedCategorical": [
                    2672
                ],
                "tz": [
                    2707,
                    2701,
                    2711
                ],
                "time.tzset": [
                    2708
                ],
                "time": [
                    2708
                ],
                "orig_tz": [
                    2715,
                    2710
                ],
                "setTZ": [
                    2715,
                    2711
                ],
                "skipna_alternative": [
                    2737,
                    2734
                ],
                "x.values": [
                    2737
                ],
                "nona": [
                    2745,
                    2742,
                    2743
                ],
                "x.dropna": [
                    2742
                ],
                "alternative": [
                    2745
                ],
                "skipna_wrapper": [
                    2747
                ],
                "List": [
                    2750
                ],
                "sep": [
                    2766,
                    2767
                ],
                "os.linesep": [
                    2766
                ],
                "sep.join": [
                    2767
                ],
                "rows_list": [
                    2767
                ],
                "Type": [
                    2772,
                    2773
                ],
                "pytest.raises": [
                    2789
                ],
                "expected_exception": [
                    2789
                ],
                "Callable": [
                    2773
                ]
            }
        },
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_57/pandas/core/arrays/categorical.py": {
            "buggy_functions": [
                {
                    "function_name": "replace",
                    "function_code": "def replace(self, to_replace, value, inplace: bool = False):\n    \"\"\"\n    Replaces all instances of one value with another\n\n    Parameters\n    ----------\n    to_replace: object\n        The value to be replaced\n\n    value: object\n        The value to replace it with\n\n    inplace: bool\n        Whether the operation is done in-place\n\n    Returns\n    -------\n    None if inplace is True, otherwise the new Categorical after replacement\n\n\n    Examples\n    --------\n    >>> s = pd.Categorical([1, 2, 1, 3])\n    >>> s.replace(1, 3)\n    [3, 3, 2, 3]\n    Categories (2, int64): [2, 3]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    cat = self if inplace else self.copy()\n    if to_replace in cat.categories:\n        if isna(value):\n            cat.remove_categories(to_replace, inplace=True)\n        else:\n            categories = cat.categories.tolist()\n            index = categories.index(to_replace)\n            if value in cat.categories:\n                value_index = categories.index(value)\n                cat._codes[cat._codes == index] = value_index\n                cat.remove_categories(to_replace, inplace=True)\n            else:\n                categories[index] = value\n                cat.rename_categories(categories, inplace=True)\n    if not inplace:\n        return cat\n",
                    "decorators": [],
                    "docstring": "Replaces all instances of one value with another\n\nParameters\n----------\nto_replace: object\n    The value to be replaced\n\nvalue: object\n    The value to replace it with\n\ninplace: bool\n    Whether the operation is done in-place\n\nReturns\n-------\nNone if inplace is True, otherwise the new Categorical after replacement\n\n\nExamples\n--------\n>>> s = pd.Categorical([1, 2, 1, 3])\n>>> s.replace(1, 3)\n[3, 3, 2, 3]\nCategories (2, int64): [2, 3]",
                    "start_line": 2415,
                    "variables": {
                        "bool": [
                            2415
                        ],
                        "inplace": [
                            2457,
                            2442,
                            2443
                        ],
                        "validate_bool_kwarg": [
                            2442
                        ],
                        "cat": [
                            2443,
                            2444,
                            2446,
                            2448,
                            2450,
                            2452,
                            2453,
                            2456,
                            2458
                        ],
                        "self": [
                            2443
                        ],
                        "self.copy": [
                            2443
                        ],
                        "to_replace": [
                            2449,
                            2444,
                            2453,
                            2446
                        ],
                        "cat.categories": [
                            2448,
                            2450,
                            2444
                        ],
                        "isna": [
                            2445
                        ],
                        "value": [
                            2450,
                            2451,
                            2445,
                            2455
                        ],
                        "cat.remove_categories": [
                            2453,
                            2446
                        ],
                        "categories": [
                            2448,
                            2449,
                            2451,
                            2455,
                            2456
                        ],
                        "cat.categories.tolist": [
                            2448
                        ],
                        "index": [
                            2449,
                            2452,
                            2455
                        ],
                        "categories.index": [
                            2449,
                            2451
                        ],
                        "value_index": [
                            2451,
                            2452
                        ],
                        "cat._codes": [
                            2452
                        ],
                        "cat.rename_categories": [
                            2456
                        ]
                    },
                    "filtered_variables": {
                        "inplace": [
                            2457,
                            2442,
                            2443
                        ],
                        "validate_bool_kwarg": [
                            2442
                        ],
                        "cat": [
                            2443,
                            2444,
                            2446,
                            2448,
                            2450,
                            2452,
                            2453,
                            2456,
                            2458
                        ],
                        "self": [
                            2443
                        ],
                        "self.copy": [
                            2443
                        ],
                        "to_replace": [
                            2449,
                            2444,
                            2453,
                            2446
                        ],
                        "cat.categories": [
                            2448,
                            2450,
                            2444
                        ],
                        "isna": [
                            2445
                        ],
                        "value": [
                            2450,
                            2451,
                            2445,
                            2455
                        ],
                        "cat.remove_categories": [
                            2453,
                            2446
                        ],
                        "categories": [
                            2448,
                            2449,
                            2451,
                            2455,
                            2456
                        ],
                        "cat.categories.tolist": [
                            2448
                        ],
                        "index": [
                            2449,
                            2452,
                            2455
                        ],
                        "categories.index": [
                            2449,
                            2451
                        ],
                        "value_index": [
                            2451,
                            2452
                        ],
                        "cat._codes": [
                            2452
                        ],
                        "cat.rename_categories": [
                            2456
                        ]
                    },
                    "diff_line_number": 2444,
                    "class_data": {
                        "signature": "class Categorical(ExtensionArray, PandasObject)",
                        "docstring": "Represent a categorical variable in classic R / S-plus fashion.\n\n`Categoricals` can only take on only a limited, and usually fixed, number\nof possible values (`categories`). In contrast to statistical categorical\nvariables, a `Categorical` might have an order, but numerical operations\n(additions, divisions, ...) are not possible.\n\nAll values of the `Categorical` are either in `categories` or `np.nan`.\nAssigning values outside of `categories` will raise a `ValueError`. Order\nis defined by the order of the `categories`, not lexical order of the\nvalues.\n\nParameters\n----------\nvalues : list-like\n    The values of the categorical. If categories are given, values not in\n    categories will be replaced with NaN.\ncategories : Index-like (unique), optional\n    The unique categories for this categorical. If not given, the\n    categories are assumed to be the unique values of `values` (sorted, if\n    possible, otherwise in the order in which they appear).\nordered : bool, default False\n    Whether or not this categorical is treated as a ordered categorical.\n    If True, the resulting categorical will be ordered.\n    An ordered categorical respects, when sorted, the order of its\n    `categories` attribute (which in turn is the `categories` argument, if\n    provided).\ndtype : CategoricalDtype\n    An instance of ``CategoricalDtype`` to use for this categorical.\n\n    .. versionadded:: 0.21.0\n\nAttributes\n----------\ncategories : Index\n    The categories of this categorical\ncodes : ndarray\n    The codes (integer positions, which point to the categories) of this\n    categorical, read only.\nordered : bool\n    Whether or not this Categorical is ordered.\ndtype : CategoricalDtype\n    The instance of ``CategoricalDtype`` storing the ``categories``\n    and ``ordered``.\n\n    .. versionadded:: 0.21.0\n\nMethods\n-------\nfrom_codes\n__array__\n\nRaises\n------\nValueError\n    If the categories do not validate.\nTypeError\n    If an explicit ``ordered=True`` is given but no `categories` and the\n    `values` are not sortable.\n\nSee Also\n--------\nCategoricalDtype : Type for categorical data.\nCategoricalIndex : An Index with an underlying ``Categorical``.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html>`_\nfor more.\n\nExamples\n--------\n>>> pd.Categorical([1, 2, 3, 1, 2, 3])\n[1, 2, 3, 1, 2, 3]\nCategories (3, int64): [1, 2, 3]\n\n>>> pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'])\n[a, b, c, a, b, c]\nCategories (3, object): [a, b, c]\n\nOrdered `Categoricals` can be sorted according to the custom order\nof the categories and can have a min and max value.\n\n>>> c = pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'], ordered=True,\n...                    categories=['c', 'b', 'a'])\n>>> c\n[a, b, c, a, b, c]\nCategories (3, object): [c < b < a]\n>>> c.min()\n'c'",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, values, categories=None, ordered=None, dtype=None, fastpath=False):\n    dtype = CategoricalDtype._from_values_or_dtype(values, categories, ordered, dtype)\n    if fastpath:\n        self._codes = coerce_indexer_dtype(values, dtype.categories)\n        self._dtype = self._dtype.update_dtype(dtype)\n        return\n    null_mask = np.array(False)\n    if is_categorical_dtype(values):\n        if dtype.categories is None:\n            dtype = CategoricalDtype(values.categories, dtype.ordered)\n    elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n        values = maybe_infer_to_datetimelike(values, convert_dates=True)\n        if not isinstance(values, np.ndarray):\n            values = _convert_to_list_like(values)\n            if len(values) == 0:\n                sanitize_dtype = 'object'\n            else:\n                sanitize_dtype = None\n            null_mask = isna(values)\n            if null_mask.any():\n                values = [values[idx] for idx in np.where(~null_mask)[0]]\n            values = sanitize_array(values, None, dtype=sanitize_dtype)\n    if dtype.categories is None:\n        try:\n            codes, categories = factorize(values, sort=True)\n        except TypeError:\n            codes, categories = factorize(values, sort=False)\n            if dtype.ordered:\n                raise TypeError(\"'values' is not ordered, please explicitly specify the categories order by passing in a categories argument.\")\n        except ValueError:\n            raise NotImplementedError('> 1 ndim Categorical are not supported at this time')\n        dtype = CategoricalDtype(categories, dtype.ordered)\n    elif is_categorical_dtype(values):\n        old_codes = values._values.codes if isinstance(values, ABCSeries) else values.codes\n        codes = _recode_for_categories(old_codes, values.dtype.categories, dtype.categories)\n    else:\n        codes = _get_codes_for_values(values, dtype.categories)\n    if null_mask.any():\n        full_codes = -np.ones(null_mask.shape, dtype=codes.dtype)\n        full_codes[~null_mask] = codes\n        codes = full_codes\n    self._dtype = self._dtype.update_dtype(dtype)\n    self._codes = coerce_indexer_dtype(codes, dtype.categories)",
                            "@property\ndef categories(self):\n    \"\"\"\n    The categories of this categorical.\n\n    Setting assigns new values to each category (effectively a rename of\n    each individual category).\n\n    The assigned value has to be a list-like object. All items must be\n    unique and the number of items in the new categories must be the same\n    as the number of items in the old categories.\n\n    Assigning to `categories` is a inplace operation!\n\n    Raises\n    ------\n    ValueError\n        If the new categories do not validate as categories or if the\n        number of new categories is unequal the number of old categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    return self.dtype.categories",
                            "@categories.setter\ndef categories(self, categories):\n    new_dtype = CategoricalDtype(categories, ordered=self.ordered)\n    if self.dtype.categories is not None and len(self.dtype.categories) != len(new_dtype.categories):\n        raise ValueError('new categories need to have the same number of items as the old categories!')\n    self._dtype = new_dtype",
                            "@property\ndef ordered(self) -> Ordered:\n    \"\"\"\n    Whether the categories have an ordered relationship.\n    \"\"\"\n    return self.dtype.ordered",
                            "@property\ndef dtype(self) -> CategoricalDtype:\n    \"\"\"\n    The :class:`~pandas.api.types.CategoricalDtype` for this instance.\n    \"\"\"\n    return self._dtype",
                            "@property\ndef _ndarray_values(self) -> np.ndarray:\n    return self.codes",
                            "@property\ndef _constructor(self) -> Type['Categorical']:\n    return Categorical",
                            "@classmethod\ndef _from_sequence(cls, scalars, dtype=None, copy=False):\n    return Categorical(scalars, dtype=dtype)",
                            "def _formatter(self, boxed=False):\n    return None",
                            "def copy(self) -> 'Categorical':\n    \"\"\"\n    Copy constructor.\n    \"\"\"\n    return self._constructor(values=self._codes.copy(), dtype=self.dtype, fastpath=True)",
                            "def astype(self, dtype: Dtype, copy: bool=True) -> ArrayLike:\n    \"\"\"\n    Coerce this type to another dtype\n\n    Parameters\n    ----------\n    dtype : numpy dtype or pandas type\n    copy : bool, default True\n        By default, astype always returns a newly allocated object.\n        If copy is set to False and dtype is categorical, the original\n        object is returned.\n    \"\"\"\n    if is_categorical_dtype(dtype):\n        dtype = cast(Union[str, CategoricalDtype], dtype)\n        dtype = self.dtype.update_dtype(dtype)\n        self = self.copy() if copy else self\n        if dtype == self.dtype:\n            return self\n        return self._set_dtype(dtype)\n    if is_extension_array_dtype(dtype):\n        return array(self, dtype=dtype, copy=copy)\n    if is_integer_dtype(dtype) and self.isna().any():\n        raise ValueError('Cannot convert float NaN to integer')\n    return np.array(self, dtype=dtype, copy=copy)",
                            "@cache_readonly\ndef size(self) -> int:\n    \"\"\"\n    Return the len of myself.\n    \"\"\"\n    return self._codes.size",
                            "@cache_readonly\ndef itemsize(self) -> int:\n    \"\"\"\n    return the size of a single category\n    \"\"\"\n    return self.categories.itemsize",
                            "def tolist(self) -> List[Scalar]:\n    \"\"\"\n    Return a list of the values.\n\n    These are each a scalar type, which is a Python scalar\n    (for str, int, float) or a pandas scalar\n    (for Timestamp/Timedelta/Interval/Period)\n    \"\"\"\n    return list(self)",
                            "@classmethod\ndef _from_inferred_categories(cls, inferred_categories, inferred_codes, dtype, true_values=None):\n    \"\"\"\n    Construct a Categorical from inferred values.\n\n    For inferred categories (`dtype` is None) the categories are sorted.\n    For explicit `dtype`, the `inferred_categories` are cast to the\n    appropriate type.\n\n    Parameters\n    ----------\n    inferred_categories : Index\n    inferred_codes : Index\n    dtype : CategoricalDtype or 'category'\n    true_values : list, optional\n        If none are provided, the default ones are\n        \"True\", \"TRUE\", and \"true.\"\n\n    Returns\n    -------\n    Categorical\n    \"\"\"\n    from pandas import Index, to_numeric, to_datetime, to_timedelta\n    cats = Index(inferred_categories)\n    known_categories = isinstance(dtype, CategoricalDtype) and dtype.categories is not None\n    if known_categories:\n        if dtype.categories.is_numeric():\n            cats = to_numeric(inferred_categories, errors='coerce')\n        elif is_datetime64_dtype(dtype.categories):\n            cats = to_datetime(inferred_categories, errors='coerce')\n        elif is_timedelta64_dtype(dtype.categories):\n            cats = to_timedelta(inferred_categories, errors='coerce')\n        elif dtype.categories.is_boolean():\n            if true_values is None:\n                true_values = ['True', 'TRUE', 'true']\n            cats = cats.isin(true_values)\n    if known_categories:\n        categories = dtype.categories\n        codes = _recode_for_categories(inferred_codes, cats, categories)\n    elif not cats.is_monotonic_increasing:\n        unsorted = cats.copy()\n        categories = cats.sort_values()\n        codes = _recode_for_categories(inferred_codes, unsorted, categories)\n        dtype = CategoricalDtype(categories, ordered=False)\n    else:\n        dtype = CategoricalDtype(cats, ordered=False)\n        codes = inferred_codes\n    return cls(codes, dtype=dtype, fastpath=True)",
                            "@classmethod\ndef from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n    \"\"\"\n    Make a Categorical type from codes and categories or dtype.\n\n    This constructor is useful if you already have codes and\n    categories/dtype and so do not need the (computation intensive)\n    factorization step, which is usually done on the constructor.\n\n    If your data does not follow this convention, please use the normal\n    constructor.\n\n    Parameters\n    ----------\n    codes : array-like of int\n        An integer array, where each integer points to a category in\n        categories or dtype.categories, or else is -1 for NaN.\n    categories : index-like, optional\n        The categories for the categorical. Items need to be unique.\n        If the categories are not given here, then they must be provided\n        in `dtype`.\n    ordered : bool, optional\n        Whether or not this categorical is treated as an ordered\n        categorical. If not given here or in `dtype`, the resulting\n        categorical will be unordered.\n    dtype : CategoricalDtype or \"category\", optional\n        If :class:`CategoricalDtype`, cannot be used together with\n        `categories` or `ordered`.\n\n        .. versionadded:: 0.24.0\n\n           When `dtype` is provided, neither `categories` nor `ordered`\n           should be provided.\n\n    Returns\n    -------\n    Categorical\n\n    Examples\n    --------\n    >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n    >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n    [a, b, a, b]\n    Categories (2, object): [a < b]\n    \"\"\"\n    dtype = CategoricalDtype._from_values_or_dtype(categories=categories, ordered=ordered, dtype=dtype)\n    if dtype.categories is None:\n        msg = \"The categories must be provided in 'categories' or 'dtype'. Both were None.\"\n        raise ValueError(msg)\n    if is_extension_array_dtype(codes) and is_integer_dtype(codes):\n        if isna(codes).any():\n            raise ValueError('codes cannot contain NA values')\n        codes = codes.to_numpy(dtype=np.int64)\n    else:\n        codes = np.asarray(codes)\n    if len(codes) and (not is_integer_dtype(codes)):\n        raise ValueError('codes need to be array-like integers')\n    if len(codes) and (codes.max() >= len(dtype.categories) or codes.min() < -1):\n        raise ValueError('codes need to be between -1 and len(categories)-1')\n    return cls(codes, dtype=dtype, fastpath=True)",
                            "def _get_codes(self):\n    \"\"\"\n    Get the codes.\n\n    Returns\n    -------\n    codes : integer array view\n        A non writable view of the `codes` array.\n    \"\"\"\n    v = self._codes.view()\n    v.flags.writeable = False\n    return v",
                            "def _set_codes(self, codes):\n    \"\"\"\n    Not settable by the user directly\n    \"\"\"\n    raise ValueError('cannot set Categorical codes directly')",
                            "def _set_categories(self, categories, fastpath=False):\n    \"\"\"\n    Sets new categories inplace\n\n    Parameters\n    ----------\n    fastpath : bool, default False\n       Don't perform validation of the categories for uniqueness or nulls\n\n    Examples\n    --------\n    >>> c = pd.Categorical(['a', 'b'])\n    >>> c\n    [a, b]\n    Categories (2, object): [a, b]\n\n    >>> c._set_categories(pd.Index(['a', 'c']))\n    >>> c\n    [a, c]\n    Categories (2, object): [a, c]\n    \"\"\"\n    if fastpath:\n        new_dtype = CategoricalDtype._from_fastpath(categories, self.ordered)\n    else:\n        new_dtype = CategoricalDtype(categories, ordered=self.ordered)\n    if not fastpath and self.dtype.categories is not None and (len(new_dtype.categories) != len(self.dtype.categories)):\n        raise ValueError('new categories need to have the same number of items than the old categories!')\n    self._dtype = new_dtype",
                            "def _set_dtype(self, dtype: CategoricalDtype) -> 'Categorical':\n    \"\"\"\n    Internal method for directly updating the CategoricalDtype\n\n    Parameters\n    ----------\n    dtype : CategoricalDtype\n\n    Notes\n    -----\n    We don't do any validation here. It's assumed that the dtype is\n    a (valid) instance of `CategoricalDtype`.\n    \"\"\"\n    codes = _recode_for_categories(self.codes, self.categories, dtype.categories)\n    return type(self)(codes, dtype=dtype, fastpath=True)",
                            "def set_ordered(self, value, inplace=False):\n    \"\"\"\n    Set the ordered attribute to the boolean value.\n\n    Parameters\n    ----------\n    value : bool\n       Set whether this categorical is ordered (True) or not (False).\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to the value.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    new_dtype = CategoricalDtype(self.categories, ordered=value)\n    cat = self if inplace else self.copy()\n    cat._dtype = new_dtype\n    if not inplace:\n        return cat",
                            "def as_ordered(self, inplace=False):\n    \"\"\"\n    Set the Categorical to be ordered.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to True.\n\n    Returns\n    -------\n    Categorical\n        Ordered Categorical.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    return self.set_ordered(True, inplace=inplace)",
                            "def as_unordered(self, inplace=False):\n    \"\"\"\n    Set the Categorical to be unordered.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to False.\n\n    Returns\n    -------\n    Categorical\n        Unordered Categorical.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    return self.set_ordered(False, inplace=inplace)",
                            "def set_categories(self, new_categories, ordered=None, rename=False, inplace=False):\n    \"\"\"\n    Set the categories to the specified new_categories.\n\n    `new_categories` can include new categories (which will result in\n    unused categories) or remove old categories (which results in values\n    set to NaN). If `rename==True`, the categories will simple be renamed\n    (less or more items than in old categories will result in values set to\n    NaN or in unused categories respectively).\n\n    This method can be used to perform more than one action of adding,\n    removing, and reordering simultaneously and is therefore faster than\n    performing the individual steps via the more specialised methods.\n\n    On the other hand this methods does not do checks (e.g., whether the\n    old categories are included in the new categories on a reorder), which\n    can result in surprising changes, for example when using special string\n    dtypes, which does not considers a S1 string equal to a single char\n    python string.\n\n    Parameters\n    ----------\n    new_categories : Index-like\n       The categories in new order.\n    ordered : bool, default False\n       Whether or not the categorical is treated as a ordered categorical.\n       If not given, do not change the ordered information.\n    rename : bool, default False\n       Whether or not the new_categories should be considered as a rename\n       of the old categories or as reordered categories.\n    inplace : bool, default False\n       Whether or not to reorder the categories in-place or return a copy\n       of this categorical with reordered categories.\n\n    Returns\n    -------\n    Categorical with reordered categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If new_categories does not validate as categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if ordered is None:\n        ordered = self.dtype.ordered\n    new_dtype = CategoricalDtype(new_categories, ordered=ordered)\n    cat = self if inplace else self.copy()\n    if rename:\n        if cat.dtype.categories is not None and len(new_dtype.categories) < len(cat.dtype.categories):\n            cat._codes[cat._codes >= len(new_dtype.categories)] = -1\n    else:\n        codes = _recode_for_categories(cat.codes, cat.categories, new_dtype.categories)\n        cat._codes = codes\n    cat._dtype = new_dtype\n    if not inplace:\n        return cat",
                            "def rename_categories(self, new_categories, inplace=False):\n    \"\"\"\n    Rename categories.\n\n    Parameters\n    ----------\n    new_categories : list-like, dict-like or callable\n\n        New categories which will replace old categories.\n\n        * list-like: all items must be unique and the number of items in\n          the new categories must match the existing number of categories.\n\n        * dict-like: specifies a mapping from\n          old categories to new. Categories not contained in the mapping\n          are passed through and extra categories in the mapping are\n          ignored.\n\n        .. versionadded:: 0.21.0.\n\n        * callable : a callable that is called on all items in the old\n          categories and whose return values comprise the new categories.\n\n        .. versionadded:: 0.23.0.\n\n    inplace : bool, default False\n        Whether or not to rename the categories inplace or return a copy of\n        this categorical with renamed categories.\n\n    Returns\n    -------\n    cat : Categorical or None\n       With ``inplace=False``, the new categorical is returned.\n       With ``inplace=True``, there is no return value.\n\n    Raises\n    ------\n    ValueError\n        If new categories are list-like and do not have the same number of\n        items than the current categories or do not validate as categories\n\n    See Also\n    --------\n    reorder_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n\n    Examples\n    --------\n    >>> c = pd.Categorical(['a', 'a', 'b'])\n    >>> c.rename_categories([0, 1])\n    [0, 0, 1]\n    Categories (2, int64): [0, 1]\n\n    For dict-like ``new_categories``, extra keys are ignored and\n    categories not in the dictionary are passed through\n\n    >>> c.rename_categories({'a': 'A', 'c': 'C'})\n    [A, A, b]\n    Categories (2, object): [A, b]\n\n    You may also provide a callable to create the new categories\n\n    >>> c.rename_categories(lambda x: x.upper())\n    [A, A, B]\n    Categories (2, object): [A, B]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    cat = self if inplace else self.copy()\n    if is_dict_like(new_categories):\n        cat.categories = [new_categories.get(item, item) for item in cat.categories]\n    elif callable(new_categories):\n        cat.categories = [new_categories(item) for item in cat.categories]\n    else:\n        cat.categories = new_categories\n    if not inplace:\n        return cat",
                            "def reorder_categories(self, new_categories, ordered=None, inplace=False):\n    \"\"\"\n    Reorder categories as specified in new_categories.\n\n    `new_categories` need to include all old categories and no new category\n    items.\n\n    Parameters\n    ----------\n    new_categories : Index-like\n       The categories in new order.\n    ordered : bool, optional\n       Whether or not the categorical is treated as a ordered categorical.\n       If not given, do not change the ordered information.\n    inplace : bool, default False\n       Whether or not to reorder the categories inplace or return a copy of\n       this categorical with reordered categories.\n\n    Returns\n    -------\n    cat : Categorical with reordered categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the new categories do not contain all old category items or any\n        new ones\n\n    See Also\n    --------\n    rename_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if set(self.dtype.categories) != set(new_categories):\n        raise ValueError('items in new_categories are not the same as in old categories')\n    return self.set_categories(new_categories, ordered=ordered, inplace=inplace)",
                            "def add_categories(self, new_categories, inplace=False):\n    \"\"\"\n    Add new categories.\n\n    `new_categories` will be included at the last/highest place in the\n    categories and will be unused directly after this call.\n\n    Parameters\n    ----------\n    new_categories : category or list-like of category\n       The new categories to be included.\n    inplace : bool, default False\n       Whether or not to add the categories inplace or return a copy of\n       this categorical with added categories.\n\n    Returns\n    -------\n    cat : Categorical with new categories added or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the new categories include old categories or do not validate as\n        categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if not is_list_like(new_categories):\n        new_categories = [new_categories]\n    already_included = set(new_categories) & set(self.dtype.categories)\n    if len(already_included) != 0:\n        raise ValueError(f'new categories must not include old categories: {already_included}')\n    new_categories = list(self.dtype.categories) + list(new_categories)\n    new_dtype = CategoricalDtype(new_categories, self.ordered)\n    cat = self if inplace else self.copy()\n    cat._dtype = new_dtype\n    cat._codes = coerce_indexer_dtype(cat._codes, new_dtype.categories)\n    if not inplace:\n        return cat",
                            "def remove_categories(self, removals, inplace=False):\n    \"\"\"\n    Remove the specified categories.\n\n    `removals` must be included in the old categories. Values which were in\n    the removed categories will be set to NaN\n\n    Parameters\n    ----------\n    removals : category or list of categories\n       The categories which should be removed.\n    inplace : bool, default False\n       Whether or not to remove the categories inplace or return a copy of\n       this categorical with removed categories.\n\n    Returns\n    -------\n    cat : Categorical with removed categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the removals are not contained in the categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if not is_list_like(removals):\n        removals = [removals]\n    removal_set = set(removals)\n    not_included = removal_set - set(self.dtype.categories)\n    new_categories = [c for c in self.dtype.categories if c not in removal_set]\n    if any(isna(removals)):\n        not_included = {x for x in not_included if notna(x)}\n        new_categories = [x for x in new_categories if notna(x)]\n    if len(not_included) != 0:\n        raise ValueError(f'removals must all be in old categories: {not_included}')\n    return self.set_categories(new_categories, ordered=self.ordered, rename=False, inplace=inplace)",
                            "def remove_unused_categories(self, inplace=False):\n    \"\"\"\n    Remove categories which are not used.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to drop unused categories inplace or return a copy of\n       this categorical with unused categories dropped.\n\n    Returns\n    -------\n    cat : Categorical with unused categories dropped or None if inplace.\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    cat = self if inplace else self.copy()\n    idx, inv = np.unique(cat._codes, return_inverse=True)\n    if idx.size != 0 and idx[0] == -1:\n        idx, inv = (idx[1:], inv - 1)\n    new_categories = cat.dtype.categories.take(idx)\n    new_dtype = CategoricalDtype._from_fastpath(new_categories, ordered=self.ordered)\n    cat._dtype = new_dtype\n    cat._codes = coerce_indexer_dtype(inv, new_dtype.categories)\n    if not inplace:\n        return cat",
                            "def map(self, mapper):\n    \"\"\"\n    Map categories using input correspondence (dict, Series, or function).\n\n    Maps the categories to new categories. If the mapping correspondence is\n    one-to-one the result is a :class:`~pandas.Categorical` which has the\n    same order property as the original, otherwise a :class:`~pandas.Index`\n    is returned. NaN values are unaffected.\n\n    If a `dict` or :class:`~pandas.Series` is used any unmapped category is\n    mapped to `NaN`. Note that if this happens an :class:`~pandas.Index`\n    will be returned.\n\n    Parameters\n    ----------\n    mapper : function, dict, or Series\n        Mapping correspondence.\n\n    Returns\n    -------\n    pandas.Categorical or pandas.Index\n        Mapped categorical.\n\n    See Also\n    --------\n    CategoricalIndex.map : Apply a mapping correspondence on a\n        :class:`~pandas.CategoricalIndex`.\n    Index.map : Apply a mapping correspondence on an\n        :class:`~pandas.Index`.\n    Series.map : Apply a mapping correspondence on a\n        :class:`~pandas.Series`.\n    Series.apply : Apply more complex functions on a\n        :class:`~pandas.Series`.\n\n    Examples\n    --------\n    >>> cat = pd.Categorical(['a', 'b', 'c'])\n    >>> cat\n    [a, b, c]\n    Categories (3, object): [a, b, c]\n    >>> cat.map(lambda x: x.upper())\n    [A, B, C]\n    Categories (3, object): [A, B, C]\n    >>> cat.map({'a': 'first', 'b': 'second', 'c': 'third'})\n    [first, second, third]\n    Categories (3, object): [first, second, third]\n\n    If the mapping is one-to-one the ordering of the categories is\n    preserved:\n\n    >>> cat = pd.Categorical(['a', 'b', 'c'], ordered=True)\n    >>> cat\n    [a, b, c]\n    Categories (3, object): [a < b < c]\n    >>> cat.map({'a': 3, 'b': 2, 'c': 1})\n    [3, 2, 1]\n    Categories (3, int64): [3 < 2 < 1]\n\n    If the mapping is not one-to-one an :class:`~pandas.Index` is returned:\n\n    >>> cat.map({'a': 'first', 'b': 'second', 'c': 'first'})\n    Index(['first', 'second', 'first'], dtype='object')\n\n    If a `dict` is used, all unmapped categories are mapped to `NaN` and\n    the result is an :class:`~pandas.Index`:\n\n    >>> cat.map({'a': 'first', 'b': 'second'})\n    Index(['first', 'second', nan], dtype='object')\n    \"\"\"\n    new_categories = self.categories.map(mapper)\n    try:\n        return self.from_codes(self._codes.copy(), categories=new_categories, ordered=self.ordered)\n    except ValueError:\n        if np.any(self._codes == -1):\n            new_categories = new_categories.insert(len(new_categories), np.nan)\n        return np.take(new_categories, self._codes)",
                            "@property\ndef shape(self):\n    \"\"\"\n    Shape of the Categorical.\n\n    For internal compatibility with numpy arrays.\n\n    Returns\n    -------\n    shape : tuple\n    \"\"\"\n    return tuple([len(self._codes)])",
                            "def shift(self, periods, fill_value=None):\n    \"\"\"\n    Shift Categorical by desired number of periods.\n\n    Parameters\n    ----------\n    periods : int\n        Number of periods to move, can be positive or negative\n    fill_value : object, optional\n        The scalar value to use for newly introduced missing values.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    shifted : Categorical\n    \"\"\"\n    codes = self.codes\n    if codes.ndim > 1:\n        raise NotImplementedError('Categorical with ndim > 1.')\n    if np.prod(codes.shape) and periods != 0:\n        codes = np.roll(codes, ensure_platform_int(periods), axis=0)\n        if isna(fill_value):\n            fill_value = -1\n        elif fill_value in self.categories:\n            fill_value = self.categories.get_loc(fill_value)\n        else:\n            raise ValueError(f\"'fill_value={fill_value}' is not present in this Categorical's categories\")\n        if periods > 0:\n            codes[:periods] = fill_value\n        else:\n            codes[periods:] = fill_value\n    return self.from_codes(codes, dtype=self.dtype)",
                            "def __array__(self, dtype=None) -> np.ndarray:\n    \"\"\"\n    The numpy array interface.\n\n    Returns\n    -------\n    numpy.array\n        A numpy array of either the specified dtype or,\n        if dtype==None (default), the same dtype as\n        categorical.categories.dtype.\n    \"\"\"\n    ret = take_1d(self.categories.values, self._codes)\n    if dtype and (not is_dtype_equal(dtype, self.categories.dtype)):\n        return np.asarray(ret, dtype)\n    if is_extension_array_dtype(ret):\n        ret = np.asarray(ret)\n    return ret",
                            "def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n    result = ops.maybe_dispatch_ufunc_to_dunder_op(self, ufunc, method, *inputs, **kwargs)\n    if result is not NotImplemented:\n        return result\n    raise TypeError(f'Object with dtype {self.dtype} cannot perform the numpy op {ufunc.__name__}')",
                            "def __setstate__(self, state):\n    \"\"\"Necessary for making this object picklable\"\"\"\n    if not isinstance(state, dict):\n        raise Exception('invalid pickle state')\n    if '_dtype' not in state:\n        state['_dtype'] = CategoricalDtype(state['_categories'], state['_ordered'])\n    for k, v in state.items():\n        setattr(self, k, v)",
                            "@property\ndef T(self):\n    \"\"\"\n    Return transposed numpy array.\n    \"\"\"\n    return self",
                            "@property\ndef nbytes(self):\n    return self._codes.nbytes + self.dtype.categories.values.nbytes",
                            "def memory_usage(self, deep=False):\n    \"\"\"\n    Memory usage of my values\n\n    Parameters\n    ----------\n    deep : bool\n        Introspect the data deeply, interrogate\n        `object` dtypes for system-level memory consumption\n\n    Returns\n    -------\n    bytes used\n\n    Notes\n    -----\n    Memory usage does not include memory consumed by elements that\n    are not components of the array if deep=False\n\n    See Also\n    --------\n    numpy.ndarray.nbytes\n    \"\"\"\n    return self._codes.nbytes + self.dtype.categories.memory_usage(deep=deep)",
                            "@Substitution(klass='Categorical')\n@Appender(_shared_docs['searchsorted'])\ndef searchsorted(self, value, side='left', sorter=None):\n    if is_scalar(value):\n        codes = self.categories.get_loc(value)\n        codes = self.codes.dtype.type(codes)\n    else:\n        locs = [self.categories.get_loc(x) for x in value]\n        codes = np.array(locs, dtype=self.codes.dtype)\n    return self.codes.searchsorted(codes, side=side, sorter=sorter)",
                            "def isna(self):\n    \"\"\"\n    Detect missing values\n\n    Missing values (-1 in .codes) are detected.\n\n    Returns\n    -------\n    a boolean array of whether my values are null\n\n    See Also\n    --------\n    isna : Top-level isna.\n    isnull : Alias of isna.\n    Categorical.notna : Boolean inverse of Categorical.isna.\n\n    \"\"\"\n    ret = self._codes == -1\n    return ret",
                            "def notna(self):\n    \"\"\"\n    Inverse of isna\n\n    Both missing values (-1 in .codes) and NA as a category are detected as\n    null.\n\n    Returns\n    -------\n    a boolean array of whether my values are not null\n\n    See Also\n    --------\n    notna : Top-level notna.\n    notnull : Alias of notna.\n    Categorical.isna : Boolean inverse of Categorical.notna.\n\n    \"\"\"\n    return ~self.isna()",
                            "def put(self, *args, **kwargs):\n    \"\"\"\n    Replace specific elements in the Categorical with given values.\n    \"\"\"\n    raise NotImplementedError(\"'put' is not yet implemented for Categorical\")",
                            "def dropna(self):\n    \"\"\"\n    Return the Categorical without null values.\n\n    Missing values (-1 in .codes) are detected.\n\n    Returns\n    -------\n    valid : Categorical\n    \"\"\"\n    result = self[self.notna()]\n    return result",
                            "def value_counts(self, dropna=True):\n    \"\"\"\n    Return a Series containing counts of each category.\n\n    Every category will have an entry, even those with a count of 0.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't include counts of NaN.\n\n    Returns\n    -------\n    counts : Series\n\n    See Also\n    --------\n    Series.value_counts\n    \"\"\"\n    from pandas import Series, CategoricalIndex\n    code, cat = (self._codes, self.categories)\n    ncat, mask = (len(cat), 0 <= code)\n    ix, clean = (np.arange(ncat), mask.all())\n    if dropna or clean:\n        obs = code if clean else code[mask]\n        count = np.bincount(obs, minlength=ncat or 0)\n    else:\n        count = np.bincount(np.where(mask, code, ncat))\n        ix = np.append(ix, -1)\n    ix = self._constructor(ix, dtype=self.dtype, fastpath=True)\n    return Series(count, index=CategoricalIndex(ix), dtype='int64')",
                            "def _internal_get_values(self):\n    \"\"\"\n    Return the values.\n\n    For internal compatibility with pandas formatting.\n\n    Returns\n    -------\n    np.ndarray or Index\n        A numpy array of the same dtype as categorical.categories.dtype or\n        Index if datetime / periods.\n    \"\"\"\n    if needs_i8_conversion(self.categories):\n        return self.categories.take(self._codes, fill_value=np.nan)\n    elif is_integer_dtype(self.categories) and -1 in self._codes:\n        return self.categories.astype('object').take(self._codes, fill_value=np.nan)\n    return np.array(self)",
                            "def check_for_ordered(self, op):\n    \"\"\" assert that we are ordered \"\"\"\n    if not self.ordered:\n        raise TypeError(f'Categorical is not ordered for operation {op}\\nyou can use .as_ordered() to change the Categorical to an ordered one\\n')",
                            "def _values_for_argsort(self):\n    return self._codes.copy()",
                            "def argsort(self, ascending=True, kind='quicksort', *args, **kwargs):\n    \"\"\"\n    Return the indices that would sort the Categorical.\n\n    .. versionchanged:: 0.25.0\n\n       Changed to sort missing values at the end.\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        Whether the indices should result in an ascending\n        or descending sort.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n        Sorting algorithm.\n    *args, **kwargs:\n        passed through to :func:`numpy.argsort`.\n\n    Returns\n    -------\n    numpy.array\n\n    See Also\n    --------\n    numpy.ndarray.argsort\n\n    Notes\n    -----\n    While an ordering is applied to the category values, arg-sorting\n    in this context refers more to organizing and grouping together\n    based on matching category values. Thus, this function can be\n    called on an unordered Categorical instance unlike the functions\n    'Categorical.min' and 'Categorical.max'.\n\n    Examples\n    --------\n    >>> pd.Categorical(['b', 'b', 'a', 'c']).argsort()\n    array([2, 0, 1, 3])\n\n    >>> cat = pd.Categorical(['b', 'b', 'a', 'c'],\n    ...                      categories=['c', 'b', 'a'],\n    ...                      ordered=True)\n    >>> cat.argsort()\n    array([3, 0, 1, 2])\n\n    Missing values are placed at the end\n\n    >>> cat = pd.Categorical([2, None, 1])\n    >>> cat.argsort()\n    array([2, 0, 1])\n    \"\"\"\n    return super().argsort(*args, ascending=ascending, kind=kind, **kwargs)",
                            "def sort_values(self, inplace=False, ascending=True, na_position='last'):\n    \"\"\"\n    Sort the Categorical by category value returning a new\n    Categorical by default.\n\n    While an ordering is applied to the category values, sorting in this\n    context refers more to organizing and grouping together based on\n    matching category values. Thus, this function can be called on an\n    unordered Categorical instance unlike the functions 'Categorical.min'\n    and 'Categorical.max'.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n        Do operation in place.\n    ascending : bool, default True\n        Order ascending. Passing False orders descending. The\n        ordering parameter provides the method by which the\n        category values are organized.\n    na_position : {'first', 'last'} (optional, default='last')\n        'first' puts NaNs at the beginning\n        'last' puts NaNs at the end\n\n    Returns\n    -------\n    Categorical or None\n\n    See Also\n    --------\n    Categorical.sort\n    Series.sort_values\n\n    Examples\n    --------\n    >>> c = pd.Categorical([1, 2, 2, 1, 5])\n    >>> c\n    [1, 2, 2, 1, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>> c.sort_values()\n    [1, 1, 2, 2, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>> c.sort_values(ascending=False)\n    [5, 2, 2, 1, 1]\n    Categories (3, int64): [1, 2, 5]\n\n    Inplace sorting can be done as well:\n\n    >>> c.sort_values(inplace=True)\n    >>> c\n    [1, 1, 2, 2, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>>\n    >>> c = pd.Categorical([1, 2, 2, 1, 5])\n\n    'sort_values' behaviour with NaNs. Note that 'na_position'\n    is independent of the 'ascending' parameter:\n\n    >>> c = pd.Categorical([np.nan, 2, 2, np.nan, 5])\n    >>> c\n    [NaN, 2.0, 2.0, NaN, 5.0]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values()\n    [2.0, 2.0, 5.0, NaN, NaN]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(ascending=False)\n    [5.0, 2.0, 2.0, NaN, NaN]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(na_position='first')\n    [NaN, NaN, 2.0, 2.0, 5.0]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(ascending=False, na_position='first')\n    [NaN, NaN, 5.0, 2.0, 2.0]\n    Categories (2, int64): [2, 5]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if na_position not in ['last', 'first']:\n        raise ValueError(f'invalid na_position: {repr(na_position)}')\n    sorted_idx = nargsort(self, ascending=ascending, na_position=na_position)\n    if inplace:\n        self._codes = self._codes[sorted_idx]\n    else:\n        return self._constructor(values=self._codes[sorted_idx], dtype=self.dtype, fastpath=True)",
                            "def _values_for_rank(self):\n    \"\"\"\n    For correctly ranking ordered categorical data. See GH#15420\n\n    Ordered categorical data should be ranked on the basis of\n    codes with -1 translated to NaN.\n\n    Returns\n    -------\n    numpy.array\n\n    \"\"\"\n    from pandas import Series\n    if self.ordered:\n        values = self.codes\n        mask = values == -1\n        if mask.any():\n            values = values.astype('float64')\n            values[mask] = np.nan\n    elif self.categories.is_numeric():\n        values = np.array(self)\n    else:\n        values = np.array(self.rename_categories(Series(self.categories).rank().values))\n    return values",
                            "def view(self, dtype=None):\n    if dtype is not None:\n        raise NotImplementedError(dtype)\n    return self._constructor(values=self._codes, dtype=self.dtype, fastpath=True)",
                            "def to_dense(self):\n    \"\"\"\n    Return my 'dense' representation\n\n    For internal compatibility with numpy arrays.\n\n    Returns\n    -------\n    dense : array\n    \"\"\"\n    return np.asarray(self)",
                            "def fillna(self, value=None, method=None, limit=None):\n    \"\"\"\n    Fill NA/NaN values using the specified method.\n\n    Parameters\n    ----------\n    value : scalar, dict, Series\n        If a scalar value is passed it is used to fill all missing values.\n        Alternatively, a Series or dict can be used to fill in different\n        values for each index. The value should not be a list. The\n        value(s) passed should either be in the categories or should be\n        NaN.\n    method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n        Method to use for filling holes in reindexed Series\n        pad / ffill: propagate last valid observation forward to next valid\n        backfill / bfill: use NEXT valid observation to fill gap\n    limit : int, default None\n        (Not implemented yet for Categorical!)\n        If method is specified, this is the maximum number of consecutive\n        NaN values to forward/backward fill. In other words, if there is\n        a gap with more than this number of consecutive NaNs, it will only\n        be partially filled. If method is not specified, this is the\n        maximum number of entries along the entire axis where NaNs will be\n        filled.\n\n    Returns\n    -------\n    filled : Categorical with NA/NaN filled\n    \"\"\"\n    value, method = validate_fillna_kwargs(value, method, validate_scalar_dict_value=False)\n    if value is None:\n        value = np.nan\n    if limit is not None:\n        raise NotImplementedError('specifying a limit for fillna has not been implemented yet')\n    codes = self._codes\n    if method is not None:\n        values = self.to_dense().reshape(-1, len(self))\n        values = interpolate_2d(values, method, 0, None, value).astype(self.categories.dtype)[0]\n        codes = _get_codes_for_values(values, self.categories)\n    elif isinstance(value, ABCSeries):\n        if not value[~value.isin(self.categories)].isna().all():\n            raise ValueError('fill value must be in categories')\n        values_codes = _get_codes_for_values(value, self.categories)\n        indexer = np.where(codes == -1)\n        codes[indexer] = values_codes[indexer]\n    elif is_hashable(value):\n        if not isna(value) and value not in self.categories:\n            raise ValueError('fill value must be in categories')\n        mask = codes == -1\n        if mask.any():\n            codes = codes.copy()\n            if isna(value):\n                codes[mask] = -1\n            else:\n                codes[mask] = self.categories.get_loc(value)\n    else:\n        raise TypeError(f\"'value' parameter must be a scalar, dict or Series, but you passed a {type(value).__name__}\")\n    return self._constructor(codes, dtype=self.dtype, fastpath=True)",
                            "def take(self, indexer, allow_fill: bool=False, fill_value=None):\n    \"\"\"\n    Take elements from the Categorical.\n\n    Parameters\n    ----------\n    indexer : sequence of int\n        The indices in `self` to take. The meaning of negative values in\n        `indexer` depends on the value of `allow_fill`.\n    allow_fill : bool, default False\n        How to handle negative values in `indexer`.\n\n        * False: negative values in `indices` indicate positional indices\n          from the right. This is similar to\n          :func:`numpy.take`.\n\n        * True: negative values in `indices` indicate missing values\n          (the default). These values are set to `fill_value`. Any other\n          other negative values raise a ``ValueError``.\n\n        .. versionchanged:: 1.0.0\n\n           Default value changed from ``True`` to ``False``.\n\n    fill_value : object\n        The value to use for `indices` that are missing (-1), when\n        ``allow_fill=True``. This should be the category, i.e. a value\n        in ``self.categories``, not a code.\n\n    Returns\n    -------\n    Categorical\n        This Categorical will have the same categories and ordered as\n        `self`.\n\n    See Also\n    --------\n    Series.take : Similar method for Series.\n    numpy.ndarray.take : Similar method for NumPy arrays.\n\n    Examples\n    --------\n    >>> cat = pd.Categorical(['a', 'a', 'b'])\n    >>> cat\n    [a, a, b]\n    Categories (2, object): [a, b]\n\n    Specify ``allow_fill==False`` to have negative indices mean indexing\n    from the right.\n\n    >>> cat.take([0, -1, -2], allow_fill=False)\n    [a, b, a]\n    Categories (2, object): [a, b]\n\n    With ``allow_fill=True``, indices equal to ``-1`` mean \"missing\"\n    values that should be filled with the `fill_value`, which is\n    ``np.nan`` by default.\n\n    >>> cat.take([0, -1, -1], allow_fill=True)\n    [a, NaN, NaN]\n    Categories (2, object): [a, b]\n\n    The fill value can be specified.\n\n    >>> cat.take([0, -1, -1], allow_fill=True, fill_value='a')\n    [a, a, a]\n    Categories (3, object): [a, b]\n\n    Specifying a fill value that's not in ``self.categories``\n    will raise a ``TypeError``.\n    \"\"\"\n    indexer = np.asarray(indexer, dtype=np.intp)\n    dtype = self.dtype\n    if isna(fill_value):\n        fill_value = -1\n    elif allow_fill:\n        if fill_value in self.categories:\n            fill_value = self.categories.get_loc(fill_value)\n        else:\n            msg = f\"'fill_value' ('{fill_value}') is not in this Categorical's categories.\"\n            raise TypeError(msg)\n    codes = take(self._codes, indexer, allow_fill=allow_fill, fill_value=fill_value)\n    result = type(self).from_codes(codes, dtype=dtype)\n    return result",
                            "def take_nd(self, indexer, allow_fill: bool=False, fill_value=None):\n    warn('Categorical.take_nd is deprecated, use Categorical.take instead', FutureWarning, stacklevel=2)\n    return self.take(indexer, allow_fill=allow_fill, fill_value=fill_value)",
                            "def __len__(self) -> int:\n    \"\"\"\n    The length of this Categorical.\n    \"\"\"\n    return len(self._codes)",
                            "def __iter__(self):\n    \"\"\"\n    Returns an Iterator over the values of this Categorical.\n    \"\"\"\n    return iter(self._internal_get_values().tolist())",
                            "def __contains__(self, key) -> bool:\n    \"\"\"\n    Returns True if `key` is in this Categorical.\n    \"\"\"\n    if is_scalar(key) and isna(key):\n        return self.isna().any()\n    return contains(self, key, container=self._codes)",
                            "def _tidy_repr(self, max_vals=10, footer=True) -> str:\n    \"\"\"\n    a short repr displaying only max_vals and an optional (but default\n    footer)\n    \"\"\"\n    num = max_vals // 2\n    head = self[:num]._get_repr(length=False, footer=False)\n    tail = self[-(max_vals - num):]._get_repr(length=False, footer=False)\n    result = f'{head[:-1]}, ..., {tail[1:]}'\n    if footer:\n        result = f'{result}\\n{self._repr_footer()}'\n    return str(result)",
                            "def _repr_categories(self):\n    \"\"\"\n    return the base repr for the categories\n    \"\"\"\n    max_categories = 10 if get_option('display.max_categories') == 0 else get_option('display.max_categories')\n    from pandas.io.formats import format as fmt\n    if len(self.categories) > max_categories:\n        num = max_categories // 2\n        head = fmt.format_array(self.categories[:num], None)\n        tail = fmt.format_array(self.categories[-num:], None)\n        category_strs = head + ['...'] + tail\n    else:\n        category_strs = fmt.format_array(self.categories, None)\n    category_strs = [x.strip() for x in category_strs]\n    return category_strs",
                            "def _repr_categories_info(self) -> str:\n    \"\"\"\n    Returns a string representation of the footer.\n    \"\"\"\n    category_strs = self._repr_categories()\n    dtype = str(self.categories.dtype)\n    levheader = f'Categories ({len(self.categories)}, {dtype}): '\n    width, height = get_terminal_size()\n    max_width = get_option('display.width') or width\n    if console.in_ipython_frontend():\n        max_width = 0\n    levstring = ''\n    start = True\n    cur_col_len = len(levheader)\n    sep_len, sep = (3, ' < ') if self.ordered else (2, ', ')\n    linesep = sep.rstrip() + '\\n'\n    for val in category_strs:\n        if max_width != 0 and cur_col_len + sep_len + len(val) > max_width:\n            levstring += linesep + ' ' * (len(levheader) + 1)\n            cur_col_len = len(levheader) + 1\n        elif not start:\n            levstring += sep\n            cur_col_len += len(val)\n        levstring += val\n        start = False\n    return levheader + '[' + levstring.replace(' < ... < ', ' ... ') + ']'",
                            "def _repr_footer(self) -> str:\n    info = self._repr_categories_info()\n    return f'Length: {len(self)}\\n{info}'",
                            "def _get_repr(self, length=True, na_rep='NaN', footer=True) -> str:\n    from pandas.io.formats import format as fmt\n    formatter = fmt.CategoricalFormatter(self, length=length, na_rep=na_rep, footer=footer)\n    result = formatter.to_string()\n    return str(result)",
                            "def __repr__(self) -> str:\n    \"\"\"\n    String representation.\n    \"\"\"\n    _maxlen = 10\n    if len(self._codes) > _maxlen:\n        result = self._tidy_repr(_maxlen)\n    elif len(self._codes) > 0:\n        result = self._get_repr(length=len(self) > _maxlen)\n    else:\n        msg = self._get_repr(length=False, footer=True).replace('\\n', ', ')\n        result = f'[], {msg}'\n    return result",
                            "def _maybe_coerce_indexer(self, indexer):\n    \"\"\"\n    return an indexer coerced to the codes dtype\n    \"\"\"\n    if isinstance(indexer, np.ndarray) and indexer.dtype.kind == 'i':\n        indexer = indexer.astype(self._codes.dtype)\n    return indexer",
                            "def __getitem__(self, key):\n    \"\"\"\n    Return an item.\n    \"\"\"\n    if isinstance(key, (int, np.integer)):\n        i = self._codes[key]\n        if i == -1:\n            return np.nan\n        else:\n            return self.categories[i]\n    key = check_array_indexer(self, key)\n    result = self._codes[key]\n    if result.ndim > 1:\n        deprecate_ndim_indexing(result)\n        return result\n    return self._constructor(result, dtype=self.dtype, fastpath=True)",
                            "def __setitem__(self, key, value):\n    \"\"\"\n    Item assignment.\n\n    Raises\n    ------\n    ValueError\n        If (one or more) Value is not in categories or if a assigned\n        `Categorical` does not have the same categories\n    \"\"\"\n    value = extract_array(value, extract_numpy=True)\n    if isinstance(value, Categorical):\n        if not is_dtype_equal(self, value):\n            raise ValueError('Cannot set a Categorical with another, without identical categories')\n        if not self.categories.equals(value.categories):\n            new_codes = _recode_for_categories(value.codes, value.categories, self.categories)\n            value = Categorical.from_codes(new_codes, dtype=self.dtype)\n    rvalue = value if is_list_like(value) else [value]\n    from pandas import Index\n    to_add = Index(rvalue).difference(self.categories)\n    if len(to_add) and (not isna(to_add).all()):\n        raise ValueError('Cannot setitem on a Categorical with a new category, set the categories first')\n    if isinstance(key, (int, np.integer)):\n        pass\n    elif isinstance(key, tuple):\n        if len(key) == 2:\n            if not com.is_null_slice(key[0]):\n                raise AssertionError('invalid slicing for a 1-ndim categorical')\n            key = key[1]\n        elif len(key) == 1:\n            key = key[0]\n        else:\n            raise AssertionError('invalid slicing for a 1-ndim categorical')\n    elif isinstance(key, slice):\n        pass\n    lindexer = self.categories.get_indexer(rvalue)\n    lindexer = self._maybe_coerce_indexer(lindexer)\n    key = check_array_indexer(self, key)\n    self._codes[key] = lindexer",
                            "def _reverse_indexer(self) -> Dict[Hashable, np.ndarray]:\n    \"\"\"\n    Compute the inverse of a categorical, returning\n    a dict of categories -> indexers.\n\n    *This is an internal function*\n\n    Returns\n    -------\n    dict of categories -> indexers\n\n    Examples\n    --------\n    >>> c = pd.Categorical(list('aabca'))\n    >>> c\n    [a, a, b, c, a]\n    Categories (3, object): [a, b, c]\n    >>> c.categories\n    Index(['a', 'b', 'c'], dtype='object')\n    >>> c.codes\n    array([0, 0, 1, 2, 0], dtype=int8)\n    >>> c._reverse_indexer()\n    {'a': array([0, 1, 4]), 'b': array([2]), 'c': array([3])}\n\n    \"\"\"\n    categories = self.categories\n    r, counts = libalgos.groupsort_indexer(self.codes.astype('int64'), categories.size)\n    counts = counts.cumsum()\n    _result = (r[start:end] for start, end in zip(counts, counts[1:]))\n    result = dict(zip(categories, _result))\n    return result",
                            "def _reduce(self, name, axis=0, **kwargs):\n    func = getattr(self, name, None)\n    if func is None:\n        raise TypeError(f'Categorical cannot perform the operation {name}')\n    return func(**kwargs)",
                            "@deprecate_kwarg(old_arg_name='numeric_only', new_arg_name='skipna')\ndef min(self, skipna=True):\n    \"\"\"\n    The minimum value of the object.\n\n    Only ordered `Categoricals` have a minimum!\n\n    .. versionchanged:: 1.0.0\n\n       Returns an NA value on empty arrays\n\n    Raises\n    ------\n    TypeError\n        If the `Categorical` is not `ordered`.\n\n    Returns\n    -------\n    min : the minimum of this `Categorical`\n    \"\"\"\n    self.check_for_ordered('min')\n    if not len(self._codes):\n        return self.dtype.na_value\n    good = self._codes != -1\n    if not good.all():\n        if skipna:\n            pointer = self._codes[good].min()\n        else:\n            return np.nan\n    else:\n        pointer = self._codes.min()\n    return self.categories[pointer]",
                            "@deprecate_kwarg(old_arg_name='numeric_only', new_arg_name='skipna')\ndef max(self, skipna=True):\n    \"\"\"\n    The maximum value of the object.\n\n    Only ordered `Categoricals` have a maximum!\n\n    .. versionchanged:: 1.0.0\n\n       Returns an NA value on empty arrays\n\n    Raises\n    ------\n    TypeError\n        If the `Categorical` is not `ordered`.\n\n    Returns\n    -------\n    max : the maximum of this `Categorical`\n    \"\"\"\n    self.check_for_ordered('max')\n    if not len(self._codes):\n        return self.dtype.na_value\n    good = self._codes != -1\n    if not good.all():\n        if skipna:\n            pointer = self._codes[good].max()\n        else:\n            return np.nan\n    else:\n        pointer = self._codes.max()\n    return self.categories[pointer]",
                            "def mode(self, dropna=True):\n    \"\"\"\n    Returns the mode(s) of the Categorical.\n\n    Always returns `Categorical` even if only one value.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't consider counts of NaN/NaT.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    modes : `Categorical` (sorted)\n    \"\"\"\n    codes = self._codes\n    if dropna:\n        good = self._codes != -1\n        codes = self._codes[good]\n    codes = sorted(htable.mode_int64(ensure_int64(codes), dropna))\n    return self._constructor(values=codes, dtype=self.dtype, fastpath=True)",
                            "def unique(self):\n    \"\"\"\n    Return the ``Categorical`` which ``categories`` and ``codes`` are\n    unique. Unused categories are NOT returned.\n\n    - unordered category: values and categories are sorted by appearance\n      order.\n    - ordered category: values are sorted by appearance order, categories\n      keeps existing order.\n\n    Returns\n    -------\n    unique values : ``Categorical``\n\n    Examples\n    --------\n    An unordered Categorical will return categories in the\n    order of appearance.\n\n    >>> pd.Categorical(list('baabc'))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    >>> pd.Categorical(list('baabc'), categories=list('abc'))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    An ordered Categorical preserves the category ordering.\n\n    >>> pd.Categorical(list('baabc'),\n    ...                categories=list('abc'),\n    ...                ordered=True)\n    [b, a, c]\n    Categories (3, object): [a < b < c]\n\n    See Also\n    --------\n    unique\n    CategoricalIndex.unique\n    Series.unique\n\n    \"\"\"\n    unique_codes = unique1d(self.codes)\n    cat = self.copy()\n    cat._codes = unique_codes\n    take_codes = unique_codes[unique_codes != -1]\n    if self.ordered:\n        take_codes = np.sort(take_codes)\n    return cat.set_categories(cat.categories.take(take_codes))",
                            "def _values_for_factorize(self):\n    codes = self.codes.astype('int64')\n    return (codes, -1)",
                            "@classmethod\ndef _from_factorized(cls, uniques, original):\n    return original._constructor(original.categories.take(uniques), dtype=original.dtype)",
                            "def equals(self, other):\n    \"\"\"\n    Returns True if categorical arrays are equal.\n\n    Parameters\n    ----------\n    other : `Categorical`\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if self.is_dtype_equal(other):\n        if self.categories.equals(other.categories):\n            other_codes = other._codes\n        else:\n            other_codes = _recode_for_categories(other.codes, other.categories, self.categories)\n        return np.array_equal(self._codes, other_codes)\n    return False",
                            "def is_dtype_equal(self, other):\n    \"\"\"\n    Returns True if categoricals are the same dtype\n      same categories, and same ordered\n\n    Parameters\n    ----------\n    other : Categorical\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    try:\n        return hash(self.dtype) == hash(other.dtype)\n    except (AttributeError, TypeError):\n        return False",
                            "def describe(self):\n    \"\"\"\n    Describes this Categorical\n\n    Returns\n    -------\n    description: `DataFrame`\n        A dataframe with frequency and counts by category.\n    \"\"\"\n    counts = self.value_counts(dropna=False)\n    freqs = counts / float(counts.sum())\n    from pandas.core.reshape.concat import concat\n    result = concat([counts, freqs], axis=1)\n    result.columns = ['counts', 'freqs']\n    result.index.name = 'categories'\n    return result",
                            "@Substitution(klass='Categorical')\n@Appender(_extension_array_shared_docs['repeat'])\ndef repeat(self, repeats, axis=None):\n    nv.validate_repeat(tuple(), dict(axis=axis))\n    codes = self._codes.repeat(repeats)\n    return self._constructor(values=codes, dtype=self.dtype, fastpath=True)",
                            "@property\ndef _can_hold_na(self):\n    return True",
                            "@classmethod\ndef _concat_same_type(self, to_concat):\n    from pandas.core.dtypes.concat import concat_categorical\n    return concat_categorical(to_concat)",
                            "def isin(self, values):\n    \"\"\"\n    Check whether `values` are contained in Categorical.\n\n    Return a boolean NumPy Array showing whether each element in\n    the Categorical matches an element in the passed sequence of\n    `values` exactly.\n\n    Parameters\n    ----------\n    values : set or list-like\n        The sequence of values to test. Passing in a single string will\n        raise a ``TypeError``. Instead, turn a single string into a\n        list of one element.\n\n    Returns\n    -------\n    isin : numpy.ndarray (bool dtype)\n\n    Raises\n    ------\n    TypeError\n      * If `values` is not a set or list-like\n\n    See Also\n    --------\n    pandas.Series.isin : Equivalent method on Series.\n\n    Examples\n    --------\n    >>> s = pd.Categorical(['lama', 'cow', 'lama', 'beetle', 'lama',\n    ...                'hippo'])\n    >>> s.isin(['cow', 'lama'])\n    array([ True,  True,  True, False,  True, False])\n\n    Passing a single string as ``s.isin('lama')`` will raise an error. Use\n    a list of one element instead:\n\n    >>> s.isin(['lama'])\n    array([ True, False,  True, False,  True, False])\n    \"\"\"\n    if not is_list_like(values):\n        values_type = type(values).__name__\n        raise TypeError(f'only list-like objects are allowed to be passed to isin(), you passed a [{values_type}]')\n    values = sanitize_array(values, None, None)\n    null_mask = np.asarray(isna(values))\n    code_values = self.categories.get_indexer(values)\n    code_values = code_values[null_mask | (code_values >= 0)]\n    return algorithms.isin(self.codes, code_values)",
                            "def replace(self, to_replace, value, inplace: bool=False):\n    \"\"\"\n    Replaces all instances of one value with another\n\n    Parameters\n    ----------\n    to_replace: object\n        The value to be replaced\n\n    value: object\n        The value to replace it with\n\n    inplace: bool\n        Whether the operation is done in-place\n\n    Returns\n    -------\n    None if inplace is True, otherwise the new Categorical after replacement\n\n\n    Examples\n    --------\n    >>> s = pd.Categorical([1, 2, 1, 3])\n    >>> s.replace(1, 3)\n    [3, 3, 2, 3]\n    Categories (2, int64): [2, 3]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    cat = self if inplace else self.copy()\n    if to_replace in cat.categories:\n        if isna(value):\n            cat.remove_categories(to_replace, inplace=True)\n        else:\n            categories = cat.categories.tolist()\n            index = categories.index(to_replace)\n            if value in cat.categories:\n                value_index = categories.index(value)\n                cat._codes[cat._codes == index] = value_index\n                cat.remove_categories(to_replace, inplace=True)\n            else:\n                categories[index] = value\n                cat.rename_categories(categories, inplace=True)\n    if not inplace:\n        return cat"
                        ],
                        "constructor_variables": [
                            "dtype",
                            "codes",
                            "values",
                            "old_codes",
                            "_codes",
                            "sanitize_dtype",
                            "full_codes",
                            "_dtype",
                            "null_mask"
                        ],
                        "class_level_variables": [
                            "__array_priority__",
                            "_dtype",
                            "_deprecations",
                            "_typ",
                            "to_list",
                            "codes",
                            "__eq__",
                            "__ne__",
                            "__lt__",
                            "__gt__",
                            "__le__",
                            "__ge__",
                            "isnull",
                            "notnull"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, values, categories=None, ordered=None, dtype=None, fastpath=False)",
                            "categories(self)",
                            "categories(self, categories)",
                            "ordered(self) -> Ordered",
                            "dtype(self) -> CategoricalDtype",
                            "_ndarray_values(self) -> np.ndarray",
                            "_constructor(self) -> Type['Categorical']",
                            "_from_sequence(cls, scalars, dtype=None, copy=False)",
                            "_formatter(self, boxed=False)",
                            "copy(self) -> 'Categorical'",
                            "astype(self, dtype: Dtype, copy: bool=True) -> ArrayLike",
                            "size(self) -> int",
                            "itemsize(self) -> int",
                            "tolist(self) -> List[Scalar]",
                            "_from_inferred_categories(cls, inferred_categories, inferred_codes, dtype, true_values=None)",
                            "from_codes(cls, codes, categories=None, ordered=None, dtype=None)",
                            "_get_codes(self)",
                            "_set_codes(self, codes)",
                            "_set_categories(self, categories, fastpath=False)",
                            "_set_dtype(self, dtype: CategoricalDtype) -> 'Categorical'",
                            "set_ordered(self, value, inplace=False)",
                            "as_ordered(self, inplace=False)",
                            "as_unordered(self, inplace=False)",
                            "set_categories(self, new_categories, ordered=None, rename=False, inplace=False)",
                            "rename_categories(self, new_categories, inplace=False)",
                            "reorder_categories(self, new_categories, ordered=None, inplace=False)",
                            "add_categories(self, new_categories, inplace=False)",
                            "remove_categories(self, removals, inplace=False)",
                            "remove_unused_categories(self, inplace=False)",
                            "map(self, mapper)",
                            "shape(self)",
                            "shift(self, periods, fill_value=None)",
                            "__array__(self, dtype=None) -> np.ndarray",
                            "__array_ufunc__(self, ufunc, method, *inputs, **kwargs)",
                            "__setstate__(self, state)",
                            "T(self)",
                            "nbytes(self)",
                            "memory_usage(self, deep=False)",
                            "searchsorted(self, value, side='left', sorter=None)",
                            "isna(self)",
                            "notna(self)",
                            "put(self, *args, **kwargs)",
                            "dropna(self)",
                            "value_counts(self, dropna=True)",
                            "_internal_get_values(self)",
                            "check_for_ordered(self, op)",
                            "_values_for_argsort(self)",
                            "argsort(self, ascending=True, kind='quicksort', *args, **kwargs)",
                            "sort_values(self, inplace=False, ascending=True, na_position='last')",
                            "_values_for_rank(self)",
                            "view(self, dtype=None)",
                            "to_dense(self)",
                            "fillna(self, value=None, method=None, limit=None)",
                            "take(self, indexer, allow_fill: bool=False, fill_value=None)",
                            "take_nd(self, indexer, allow_fill: bool=False, fill_value=None)",
                            "__len__(self) -> int",
                            "__iter__(self)",
                            "__contains__(self, key) -> bool",
                            "_tidy_repr(self, max_vals=10, footer=True) -> str",
                            "_repr_categories(self)",
                            "_repr_categories_info(self) -> str",
                            "_repr_footer(self) -> str",
                            "_get_repr(self, length=True, na_rep='NaN', footer=True) -> str",
                            "__repr__(self) -> str",
                            "_maybe_coerce_indexer(self, indexer)",
                            "__getitem__(self, key)",
                            "__setitem__(self, key, value)",
                            "_reverse_indexer(self) -> Dict[Hashable, np.ndarray]",
                            "_reduce(self, name, axis=0, **kwargs)",
                            "min(self, skipna=True)",
                            "max(self, skipna=True)",
                            "mode(self, dropna=True)",
                            "unique(self)",
                            "_values_for_factorize(self)",
                            "_from_factorized(cls, uniques, original)",
                            "equals(self, other)",
                            "is_dtype_equal(self, other)",
                            "describe(self)",
                            "repeat(self, repeats, axis=None)",
                            "_can_hold_na(self)",
                            "_concat_same_type(self, to_concat)",
                            "isin(self, values)",
                            "replace(self, to_replace, value, inplace: bool=False)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "inplace": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "self.copy": {
                                    "variable_value": "<bound method Categorical.copy of [1, 2, 3]\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "[1, 2, '3']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cat.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "'5'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "cat.remove_categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cat.categories.tolist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "categories.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cat._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cat.rename_categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "inplace": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "[1, 2, 3]\nCategories (3, int64): [1, 2, 3]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "self.copy": {
                                    "variable_value": "<bound method Categorical.copy of [1, 2, 3]\nCategories (3, int64): [1, 2, 3]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "[1, 2, '3']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "replace_dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replace_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "'5'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "new_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replace_dict.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cat.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cat.remove_categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cat.categories.tolist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "categories.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cat._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cat.rename_categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _cat_compare_op(op):\n    opname = f\"__{op.__name__}__\"\n\n    @unpack_zerodim_and_defer(opname)\n    def func(self, other):\n        if is_list_like(other) and len(other) != len(self):\n            # TODO: Could this fail if the categories are listlike objects?\n            raise ValueError(\"Lengths must match.\")\n\n        if not self.ordered:\n            if opname in [\"__lt__\", \"__gt__\", \"__le__\", \"__ge__\"]:\n                raise TypeError(\n                    \"Unordered Categoricals can only compare equality or not\"\n                )\n        if isinstance(other, Categorical):\n            # Two Categoricals can only be be compared if the categories are\n            # the same (maybe up to ordering, depending on ordered)\n\n            msg = \"Categoricals can only be compared if 'categories' are the same.\"\n            if len(self.categories) != len(other.categories):\n                raise TypeError(msg + \" Categories are different lengths\")\n            elif self.ordered and not (self.categories == other.categories).all():\n                raise TypeError(msg)\n            elif not set(self.categories) == set(other.categories):\n                raise TypeError(msg)\n\n            if not (self.ordered == other.ordered):\n                raise TypeError(\n                    \"Categoricals can only be compared if 'ordered' is the same\"\n                )\n            if not self.ordered and not self.categories.equals(other.categories):\n                # both unordered and different order\n                other_codes = _get_codes_for_values(other, self.categories)\n            else:\n                other_codes = other._codes\n\n            f = getattr(self._codes, opname)\n            ret = f(other_codes)\n            mask = (self._codes == -1) | (other_codes == -1)\n            if mask.any():\n                # In other series, the leads to False, so do that here too\n                ret[mask] = False\n            return ret\n\n        if is_scalar(other):\n            if other in self.categories:\n                i = self.categories.get_loc(other)\n                ret = getattr(self._codes, opname)(i)\n\n                if opname not in {\"__eq__\", \"__ge__\", \"__gt__\"}:\n                    # check for NaN needed if we are not equal or larger\n                    mask = self._codes == -1\n                    ret[mask] = False\n                return ret\n            else:\n                if opname == \"__eq__\":\n                    return np.zeros(len(self), dtype=bool)\n                elif opname == \"__ne__\":\n                    return np.ones(len(self), dtype=bool)\n                else:\n                    raise TypeError(\n                        f\"Cannot compare a Categorical for op {opname} with a \"\n                        \"scalar, which is not a category.\"\n                    )\n        else:\n\n            # allow categorical vs object dtype array comparisons for equality\n            # these are only positional comparisons\n            if opname in [\"__eq__\", \"__ne__\"]:\n                return getattr(np.array(self), opname)(np.array(other))\n\n            raise TypeError(\n                f\"Cannot compare a Categorical for op {opname} with \"\n                f\"type {type(other)}.\\nIf you want to compare values, \"\n                \"use 'np.asarray(cat) <op> other'.\"\n            )\n\n    func.__name__ = opname\n\n    return func",
                "def contains(cat, key, container):\n    \"\"\"\n    Helper for membership check for ``key`` in ``cat``.\n\n    This is a helper method for :method:`__contains__`\n    and :class:`CategoricalIndex.__contains__`.\n\n    Returns True if ``key`` is in ``cat.categories`` and the\n    location of ``key`` in ``categories`` is in ``container``.\n\n    Parameters\n    ----------\n    cat : :class:`Categorical`or :class:`categoricalIndex`\n    key : a hashable object\n        The key to check membership for.\n    container : Container (e.g. list-like or mapping)\n        The container to check for membership in.\n\n    Returns\n    -------\n    is_in : bool\n        True if ``key`` is in ``self.categories`` and location of\n        ``key`` in ``categories`` is in ``container``, else False.\n\n    Notes\n    -----\n    This method does not check for NaN values. Do that separately\n    before calling this method.\n    \"\"\"\n    hash(key)\n\n    # get location of key in categories.\n    # If a KeyError, the key isn't in categories, so logically\n    #  can't be in container either.\n    try:\n        loc = cat.categories.get_loc(key)\n    except (KeyError, TypeError):\n        return False\n\n    # loc is the location of key in categories, but also the *value*\n    # for key in container. So, `key` may be in categories,\n    # but still not in `container`. Example ('b' in categories,\n    # but not in values):\n    # 'b' in Categorical(['a'], categories=['a', 'b'])  # False\n    if is_scalar(loc):\n        return loc in container\n    else:\n        # if categories is an IntervalIndex, loc is an array.\n        return any(loc_ in container for loc_ in loc)",
                "def _get_codes_for_values(values, categories):\n    \"\"\"\n    utility routine to turn values into codes given the specified categories\n    \"\"\"\n    dtype_equal = is_dtype_equal(values.dtype, categories.dtype)\n\n    if dtype_equal:\n        # To prevent erroneous dtype coercion in _get_data_algo, retrieve\n        # the underlying numpy array. gh-22702\n        values = getattr(values, \"_ndarray_values\", values)\n        categories = getattr(categories, \"_ndarray_values\", categories)\n    elif is_extension_array_dtype(categories.dtype) and is_object_dtype(values):\n        # Support inferring the correct extension dtype from an array of\n        # scalar objects. e.g.\n        # Categorical(array[Period, Period], categories=PeriodIndex(...))\n        cls = categories.dtype.construct_array_type()\n        values = try_cast_to_ea(cls, values)\n        if not isinstance(values, cls):\n            # exception raised in _from_sequence\n            values = ensure_object(values)\n            categories = ensure_object(categories)\n    else:\n        values = ensure_object(values)\n        categories = ensure_object(categories)\n\n    hash_klass, vals = _get_data_algo(values)\n    _, cats = _get_data_algo(categories)\n    t = hash_klass(len(cats))\n    t.map_locations(cats)\n    return coerce_indexer_dtype(t.lookup(vals), cats)",
                "def _recode_for_categories(codes: np.ndarray, old_categories, new_categories):\n    \"\"\"\n    Convert a set of codes for to a new set of categories\n\n    Parameters\n    ----------\n    codes : np.ndarray\n    old_categories, new_categories : Index\n\n    Returns\n    -------\n    new_codes : np.ndarray[np.int64]\n\n    Examples\n    --------\n    >>> old_cat = pd.Index(['b', 'a', 'c'])\n    >>> new_cat = pd.Index(['a', 'b'])\n    >>> codes = np.array([0, 1, 1, 2])\n    >>> _recode_for_categories(codes, old_cat, new_cat)\n    array([ 1,  0,  0, -1])\n    \"\"\"\n    if len(old_categories) == 0:\n        # All null anyway, so just retain the nulls\n        return codes.copy()\n    elif new_categories.equals(old_categories):\n        # Same categories, so no need to actually recode\n        return codes.copy()\n    indexer = coerce_indexer_dtype(\n        new_categories.get_indexer(old_categories), new_categories\n    )\n    new_codes = take_1d(indexer, codes.copy(), fill_value=-1)\n    return new_codes",
                "def _convert_to_list_like(list_like):\n    if hasattr(list_like, \"dtype\"):\n        return list_like\n    if isinstance(list_like, list):\n        return list_like\n    if is_sequence(list_like) or isinstance(list_like, tuple) or is_iterator(list_like):\n        return list(list_like)\n    elif is_scalar(list_like):\n        return [list_like]\n    else:\n        # TODO: is this reached?\n        return [list_like]",
                "def factorize_from_iterable(values):\n    \"\"\"\n    Factorize an input `values` into `categories` and `codes`. Preserves\n    categorical dtype in `categories`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    values : list-like\n\n    Returns\n    -------\n    codes : ndarray\n    categories : Index\n        If `values` has a categorical dtype, then `categories` is\n        a CategoricalIndex keeping the categories and order of `values`.\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError(\"Input must be list-like\")\n\n    if is_categorical_dtype(values):\n        values = extract_array(values)\n        # The Categorical we want to build has the same categories\n        # as values but its codes are by def [0, ..., len(n_categories) - 1]\n        cat_codes = np.arange(len(values.categories), dtype=values.codes.dtype)\n        categories = Categorical.from_codes(cat_codes, dtype=values.dtype)\n        codes = values.codes\n    else:\n        # The value of ordered is irrelevant since we don't use cat as such,\n        # but only the resulting categories, the order of which is independent\n        # from ordered. Set ordered to False as default. See GH #15457\n        cat = Categorical(values, ordered=False)\n        categories = cat.categories\n        codes = cat.codes\n    return codes, categories",
                "def factorize_from_iterables(iterables):\n    \"\"\"\n    A higher-level wrapper over `factorize_from_iterable`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    iterables : list-like of list-likes\n\n    Returns\n    -------\n    codes_list : list of ndarrays\n    categories_list : list of Indexes\n\n    Notes\n    -----\n    See `factorize_from_iterable` for more info.\n    \"\"\"\n    if len(iterables) == 0:\n        # For consistency, it should return a list of 2 lists.\n        return [[], []]\n    return map(list, zip(*(factorize_from_iterable(it) for it in iterables)))",
                "@unpack_zerodim_and_defer(opname)\ndef func(self, other):\n    if is_list_like(other) and len(other) != len(self):\n        # TODO: Could this fail if the categories are listlike objects?\n        raise ValueError(\"Lengths must match.\")\n\n    if not self.ordered:\n        if opname in [\"__lt__\", \"__gt__\", \"__le__\", \"__ge__\"]:\n            raise TypeError(\n                \"Unordered Categoricals can only compare equality or not\"\n            )\n    if isinstance(other, Categorical):\n        # Two Categoricals can only be be compared if the categories are\n        # the same (maybe up to ordering, depending on ordered)\n\n        msg = \"Categoricals can only be compared if 'categories' are the same.\"\n        if len(self.categories) != len(other.categories):\n            raise TypeError(msg + \" Categories are different lengths\")\n        elif self.ordered and not (self.categories == other.categories).all():\n            raise TypeError(msg)\n        elif not set(self.categories) == set(other.categories):\n            raise TypeError(msg)\n\n        if not (self.ordered == other.ordered):\n            raise TypeError(\n                \"Categoricals can only be compared if 'ordered' is the same\"\n            )\n        if not self.ordered and not self.categories.equals(other.categories):\n            # both unordered and different order\n            other_codes = _get_codes_for_values(other, self.categories)\n        else:\n            other_codes = other._codes\n\n        f = getattr(self._codes, opname)\n        ret = f(other_codes)\n        mask = (self._codes == -1) | (other_codes == -1)\n        if mask.any():\n            # In other series, the leads to False, so do that here too\n            ret[mask] = False\n        return ret\n\n    if is_scalar(other):\n        if other in self.categories:\n            i = self.categories.get_loc(other)\n            ret = getattr(self._codes, opname)(i)\n\n            if opname not in {\"__eq__\", \"__ge__\", \"__gt__\"}:\n                # check for NaN needed if we are not equal or larger\n                mask = self._codes == -1\n                ret[mask] = False\n            return ret\n        else:\n            if opname == \"__eq__\":\n                return np.zeros(len(self), dtype=bool)\n            elif opname == \"__ne__\":\n                return np.ones(len(self), dtype=bool)\n            else:\n                raise TypeError(\n                    f\"Cannot compare a Categorical for op {opname} with a \"\n                    \"scalar, which is not a category.\"\n                )\n    else:\n\n        # allow categorical vs object dtype array comparisons for equality\n        # these are only positional comparisons\n        if opname in [\"__eq__\", \"__ne__\"]:\n            return getattr(np.array(self), opname)(np.array(other))\n\n        raise TypeError(\n            f\"Cannot compare a Categorical for op {opname} with \"\n            f\"type {type(other)}.\\nIf you want to compare values, \"\n            \"use 'np.asarray(cat) <op> other'.\"\n        )",
                "def __init__(\n    self, values, categories=None, ordered=None, dtype=None, fastpath=False\n):\n\n    dtype = CategoricalDtype._from_values_or_dtype(\n        values, categories, ordered, dtype\n    )\n    # At this point, dtype is always a CategoricalDtype, but\n    # we may have dtype.categories be None, and we need to\n    # infer categories in a factorization step further below\n\n    if fastpath:\n        self._codes = coerce_indexer_dtype(values, dtype.categories)\n        self._dtype = self._dtype.update_dtype(dtype)\n        return\n\n    # null_mask indicates missing values we want to exclude from inference.\n    # This means: only missing values in list-likes (not arrays/ndframes).\n    null_mask = np.array(False)\n\n    # sanitize input\n    if is_categorical_dtype(values):\n        if dtype.categories is None:\n            dtype = CategoricalDtype(values.categories, dtype.ordered)\n    elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n        # sanitize_array coerces np.nan to a string under certain versions\n        # of numpy\n        values = maybe_infer_to_datetimelike(values, convert_dates=True)\n        if not isinstance(values, np.ndarray):\n            values = _convert_to_list_like(values)\n\n            # By convention, empty lists result in object dtype:\n            if len(values) == 0:\n                sanitize_dtype = \"object\"\n            else:\n                sanitize_dtype = None\n            null_mask = isna(values)\n            if null_mask.any():\n                values = [values[idx] for idx in np.where(~null_mask)[0]]\n            values = sanitize_array(values, None, dtype=sanitize_dtype)\n\n    if dtype.categories is None:\n        try:\n            codes, categories = factorize(values, sort=True)\n        except TypeError:\n            codes, categories = factorize(values, sort=False)\n            if dtype.ordered:\n                # raise, as we don't have a sortable data structure and so\n                # the user should give us one by specifying categories\n                raise TypeError(\n                    \"'values' is not ordered, please \"\n                    \"explicitly specify the categories order \"\n                    \"by passing in a categories argument.\"\n                )\n        except ValueError:\n\n            # FIXME\n            raise NotImplementedError(\n                \"> 1 ndim Categorical are not supported at this time\"\n            )\n\n        # we're inferring from values\n        dtype = CategoricalDtype(categories, dtype.ordered)\n\n    elif is_categorical_dtype(values):\n        old_codes = (\n            values._values.codes if isinstance(values, ABCSeries) else values.codes\n        )\n        codes = _recode_for_categories(\n            old_codes, values.dtype.categories, dtype.categories\n        )\n\n    else:\n        codes = _get_codes_for_values(values, dtype.categories)\n\n    if null_mask.any():\n        # Reinsert -1 placeholders for previously removed missing values\n        full_codes = -np.ones(null_mask.shape, dtype=codes.dtype)\n        full_codes[~null_mask] = codes\n        codes = full_codes\n\n    self._dtype = self._dtype.update_dtype(dtype)\n    self._codes = coerce_indexer_dtype(codes, dtype.categories)",
                "@property\ndef categories(self):\n    \"\"\"\n    The categories of this categorical.\n\n    Setting assigns new values to each category (effectively a rename of\n    each individual category).\n\n    The assigned value has to be a list-like object. All items must be\n    unique and the number of items in the new categories must be the same\n    as the number of items in the old categories.\n\n    Assigning to `categories` is a inplace operation!\n\n    Raises\n    ------\n    ValueError\n        If the new categories do not validate as categories or if the\n        number of new categories is unequal the number of old categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    return self.dtype.categories",
                "@categories.setter\ndef categories(self, categories):\n    new_dtype = CategoricalDtype(categories, ordered=self.ordered)\n    if self.dtype.categories is not None and len(self.dtype.categories) != len(\n        new_dtype.categories\n    ):\n        raise ValueError(\n            \"new categories need to have the same number of \"\n            \"items as the old categories!\"\n        )\n    self._dtype = new_dtype",
                "@property\ndef ordered(self) -> Ordered:\n    \"\"\"\n    Whether the categories have an ordered relationship.\n    \"\"\"\n    return self.dtype.ordered",
                "@property\ndef dtype(self) -> CategoricalDtype:\n    \"\"\"\n    The :class:`~pandas.api.types.CategoricalDtype` for this instance.\n    \"\"\"\n    return self._dtype",
                "@property\ndef _ndarray_values(self) -> np.ndarray:\n    return self.codes",
                "@property\ndef _constructor(self) -> Type[\"Categorical\"]:\n    return Categorical",
                "@classmethod\ndef _from_sequence(cls, scalars, dtype=None, copy=False):\n    return Categorical(scalars, dtype=dtype)",
                "def _formatter(self, boxed=False):\n    # Defer to CategoricalFormatter's formatter.\n    return None",
                "def copy(self) -> \"Categorical\":\n    \"\"\"\n    Copy constructor.\n    \"\"\"\n    return self._constructor(\n        values=self._codes.copy(), dtype=self.dtype, fastpath=True\n    )",
                "def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:\n    \"\"\"\n    Coerce this type to another dtype\n\n    Parameters\n    ----------\n    dtype : numpy dtype or pandas type\n    copy : bool, default True\n        By default, astype always returns a newly allocated object.\n        If copy is set to False and dtype is categorical, the original\n        object is returned.\n    \"\"\"\n    if is_categorical_dtype(dtype):\n        dtype = cast(Union[str, CategoricalDtype], dtype)\n\n        # GH 10696/18593\n        dtype = self.dtype.update_dtype(dtype)\n        self = self.copy() if copy else self\n        if dtype == self.dtype:\n            return self\n        return self._set_dtype(dtype)\n    if is_extension_array_dtype(dtype):\n        return array(self, dtype=dtype, copy=copy)  # type: ignore # GH 28770\n    if is_integer_dtype(dtype) and self.isna().any():\n        raise ValueError(\"Cannot convert float NaN to integer\")\n    return np.array(self, dtype=dtype, copy=copy)",
                "@cache_readonly\ndef size(self) -> int:\n    \"\"\"\n    Return the len of myself.\n    \"\"\"\n    return self._codes.size",
                "@cache_readonly\ndef itemsize(self) -> int:\n    \"\"\"\n    return the size of a single category\n    \"\"\"\n    return self.categories.itemsize",
                "def tolist(self) -> List[Scalar]:\n    \"\"\"\n    Return a list of the values.\n\n    These are each a scalar type, which is a Python scalar\n    (for str, int, float) or a pandas scalar\n    (for Timestamp/Timedelta/Interval/Period)\n    \"\"\"\n    return list(self)",
                "@classmethod\ndef _from_inferred_categories(\n    cls, inferred_categories, inferred_codes, dtype, true_values=None\n):\n    \"\"\"\n    Construct a Categorical from inferred values.\n\n    For inferred categories (`dtype` is None) the categories are sorted.\n    For explicit `dtype`, the `inferred_categories` are cast to the\n    appropriate type.\n\n    Parameters\n    ----------\n    inferred_categories : Index\n    inferred_codes : Index\n    dtype : CategoricalDtype or 'category'\n    true_values : list, optional\n        If none are provided, the default ones are\n        \"True\", \"TRUE\", and \"true.\"\n\n    Returns\n    -------\n    Categorical\n    \"\"\"\n    from pandas import Index, to_numeric, to_datetime, to_timedelta\n\n    cats = Index(inferred_categories)\n    known_categories = (\n        isinstance(dtype, CategoricalDtype) and dtype.categories is not None\n    )\n\n    if known_categories:\n        # Convert to a specialized type with `dtype` if specified.\n        if dtype.categories.is_numeric():\n            cats = to_numeric(inferred_categories, errors=\"coerce\")\n        elif is_datetime64_dtype(dtype.categories):\n            cats = to_datetime(inferred_categories, errors=\"coerce\")\n        elif is_timedelta64_dtype(dtype.categories):\n            cats = to_timedelta(inferred_categories, errors=\"coerce\")\n        elif dtype.categories.is_boolean():\n            if true_values is None:\n                true_values = [\"True\", \"TRUE\", \"true\"]\n\n            cats = cats.isin(true_values)\n\n    if known_categories:\n        # Recode from observation order to dtype.categories order.\n        categories = dtype.categories\n        codes = _recode_for_categories(inferred_codes, cats, categories)\n    elif not cats.is_monotonic_increasing:\n        # Sort categories and recode for unknown categories.\n        unsorted = cats.copy()\n        categories = cats.sort_values()\n\n        codes = _recode_for_categories(inferred_codes, unsorted, categories)\n        dtype = CategoricalDtype(categories, ordered=False)\n    else:\n        dtype = CategoricalDtype(cats, ordered=False)\n        codes = inferred_codes\n\n    return cls(codes, dtype=dtype, fastpath=True)",
                "@classmethod\ndef from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n    \"\"\"\n    Make a Categorical type from codes and categories or dtype.\n\n    This constructor is useful if you already have codes and\n    categories/dtype and so do not need the (computation intensive)\n    factorization step, which is usually done on the constructor.\n\n    If your data does not follow this convention, please use the normal\n    constructor.\n\n    Parameters\n    ----------\n    codes : array-like of int\n        An integer array, where each integer points to a category in\n        categories or dtype.categories, or else is -1 for NaN.\n    categories : index-like, optional\n        The categories for the categorical. Items need to be unique.\n        If the categories are not given here, then they must be provided\n        in `dtype`.\n    ordered : bool, optional\n        Whether or not this categorical is treated as an ordered\n        categorical. If not given here or in `dtype`, the resulting\n        categorical will be unordered.\n    dtype : CategoricalDtype or \"category\", optional\n        If :class:`CategoricalDtype`, cannot be used together with\n        `categories` or `ordered`.\n\n        .. versionadded:: 0.24.0\n\n           When `dtype` is provided, neither `categories` nor `ordered`\n           should be provided.\n\n    Returns\n    -------\n    Categorical\n\n    Examples\n    --------\n    >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n    >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n    [a, b, a, b]\n    Categories (2, object): [a < b]\n    \"\"\"\n    dtype = CategoricalDtype._from_values_or_dtype(\n        categories=categories, ordered=ordered, dtype=dtype\n    )\n    if dtype.categories is None:\n        msg = (\n            \"The categories must be provided in 'categories' or \"\n            \"'dtype'. Both were None.\"\n        )\n        raise ValueError(msg)\n\n    if is_extension_array_dtype(codes) and is_integer_dtype(codes):\n        # Avoid the implicit conversion of Int to object\n        if isna(codes).any():\n            raise ValueError(\"codes cannot contain NA values\")\n        codes = codes.to_numpy(dtype=np.int64)\n    else:\n        codes = np.asarray(codes)\n    if len(codes) and not is_integer_dtype(codes):\n        raise ValueError(\"codes need to be array-like integers\")\n\n    if len(codes) and (codes.max() >= len(dtype.categories) or codes.min() < -1):\n        raise ValueError(\"codes need to be between -1 and len(categories)-1\")\n\n    return cls(codes, dtype=dtype, fastpath=True)",
                "def _get_codes(self):\n    \"\"\"\n    Get the codes.\n\n    Returns\n    -------\n    codes : integer array view\n        A non writable view of the `codes` array.\n    \"\"\"\n    v = self._codes.view()\n    v.flags.writeable = False\n    return v",
                "def _set_codes(self, codes):\n    \"\"\"\n    Not settable by the user directly\n    \"\"\"\n    raise ValueError(\"cannot set Categorical codes directly\")",
                "def _set_categories(self, categories, fastpath=False):\n    \"\"\"\n    Sets new categories inplace\n\n    Parameters\n    ----------\n    fastpath : bool, default False\n       Don't perform validation of the categories for uniqueness or nulls\n\n    Examples\n    --------\n    >>> c = pd.Categorical(['a', 'b'])\n    >>> c\n    [a, b]\n    Categories (2, object): [a, b]\n\n    >>> c._set_categories(pd.Index(['a', 'c']))\n    >>> c\n    [a, c]\n    Categories (2, object): [a, c]\n    \"\"\"\n    if fastpath:\n        new_dtype = CategoricalDtype._from_fastpath(categories, self.ordered)\n    else:\n        new_dtype = CategoricalDtype(categories, ordered=self.ordered)\n    if (\n        not fastpath\n        and self.dtype.categories is not None\n        and len(new_dtype.categories) != len(self.dtype.categories)\n    ):\n        raise ValueError(\n            \"new categories need to have the same number of \"\n            \"items than the old categories!\"\n        )\n\n    self._dtype = new_dtype",
                "def _set_dtype(self, dtype: CategoricalDtype) -> \"Categorical\":\n    \"\"\"\n    Internal method for directly updating the CategoricalDtype\n\n    Parameters\n    ----------\n    dtype : CategoricalDtype\n\n    Notes\n    -----\n    We don't do any validation here. It's assumed that the dtype is\n    a (valid) instance of `CategoricalDtype`.\n    \"\"\"\n    codes = _recode_for_categories(self.codes, self.categories, dtype.categories)\n    return type(self)(codes, dtype=dtype, fastpath=True)",
                "def set_ordered(self, value, inplace=False):\n    \"\"\"\n    Set the ordered attribute to the boolean value.\n\n    Parameters\n    ----------\n    value : bool\n       Set whether this categorical is ordered (True) or not (False).\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to the value.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    new_dtype = CategoricalDtype(self.categories, ordered=value)\n    cat = self if inplace else self.copy()\n    cat._dtype = new_dtype\n    if not inplace:\n        return cat",
                "def as_ordered(self, inplace=False):\n    \"\"\"\n    Set the Categorical to be ordered.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to True.\n\n    Returns\n    -------\n    Categorical\n        Ordered Categorical.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    return self.set_ordered(True, inplace=inplace)",
                "def as_unordered(self, inplace=False):\n    \"\"\"\n    Set the Categorical to be unordered.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to False.\n\n    Returns\n    -------\n    Categorical\n        Unordered Categorical.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    return self.set_ordered(False, inplace=inplace)",
                "def set_categories(self, new_categories, ordered=None, rename=False, inplace=False):\n    \"\"\"\n    Set the categories to the specified new_categories.\n\n    `new_categories` can include new categories (which will result in\n    unused categories) or remove old categories (which results in values\n    set to NaN). If `rename==True`, the categories will simple be renamed\n    (less or more items than in old categories will result in values set to\n    NaN or in unused categories respectively).\n\n    This method can be used to perform more than one action of adding,\n    removing, and reordering simultaneously and is therefore faster than\n    performing the individual steps via the more specialised methods.\n\n    On the other hand this methods does not do checks (e.g., whether the\n    old categories are included in the new categories on a reorder), which\n    can result in surprising changes, for example when using special string\n    dtypes, which does not considers a S1 string equal to a single char\n    python string.\n\n    Parameters\n    ----------\n    new_categories : Index-like\n       The categories in new order.\n    ordered : bool, default False\n       Whether or not the categorical is treated as a ordered categorical.\n       If not given, do not change the ordered information.\n    rename : bool, default False\n       Whether or not the new_categories should be considered as a rename\n       of the old categories or as reordered categories.\n    inplace : bool, default False\n       Whether or not to reorder the categories in-place or return a copy\n       of this categorical with reordered categories.\n\n    Returns\n    -------\n    Categorical with reordered categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If new_categories does not validate as categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if ordered is None:\n        ordered = self.dtype.ordered\n    new_dtype = CategoricalDtype(new_categories, ordered=ordered)\n\n    cat = self if inplace else self.copy()\n    if rename:\n        if cat.dtype.categories is not None and len(new_dtype.categories) < len(\n            cat.dtype.categories\n        ):\n            # remove all _codes which are larger and set to -1/NaN\n            cat._codes[cat._codes >= len(new_dtype.categories)] = -1\n    else:\n        codes = _recode_for_categories(\n            cat.codes, cat.categories, new_dtype.categories\n        )\n        cat._codes = codes\n    cat._dtype = new_dtype\n\n    if not inplace:\n        return cat",
                "def rename_categories(self, new_categories, inplace=False):\n    \"\"\"\n    Rename categories.\n\n    Parameters\n    ----------\n    new_categories : list-like, dict-like or callable\n\n        New categories which will replace old categories.\n\n        * list-like: all items must be unique and the number of items in\n          the new categories must match the existing number of categories.\n\n        * dict-like: specifies a mapping from\n          old categories to new. Categories not contained in the mapping\n          are passed through and extra categories in the mapping are\n          ignored.\n\n        .. versionadded:: 0.21.0.\n\n        * callable : a callable that is called on all items in the old\n          categories and whose return values comprise the new categories.\n\n        .. versionadded:: 0.23.0.\n\n    inplace : bool, default False\n        Whether or not to rename the categories inplace or return a copy of\n        this categorical with renamed categories.\n\n    Returns\n    -------\n    cat : Categorical or None\n       With ``inplace=False``, the new categorical is returned.\n       With ``inplace=True``, there is no return value.\n\n    Raises\n    ------\n    ValueError\n        If new categories are list-like and do not have the same number of\n        items than the current categories or do not validate as categories\n\n    See Also\n    --------\n    reorder_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n\n    Examples\n    --------\n    >>> c = pd.Categorical(['a', 'a', 'b'])\n    >>> c.rename_categories([0, 1])\n    [0, 0, 1]\n    Categories (2, int64): [0, 1]\n\n    For dict-like ``new_categories``, extra keys are ignored and\n    categories not in the dictionary are passed through\n\n    >>> c.rename_categories({'a': 'A', 'c': 'C'})\n    [A, A, b]\n    Categories (2, object): [A, b]\n\n    You may also provide a callable to create the new categories\n\n    >>> c.rename_categories(lambda x: x.upper())\n    [A, A, B]\n    Categories (2, object): [A, B]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    cat = self if inplace else self.copy()\n\n    if is_dict_like(new_categories):\n        cat.categories = [new_categories.get(item, item) for item in cat.categories]\n    elif callable(new_categories):\n        cat.categories = [new_categories(item) for item in cat.categories]\n    else:\n        cat.categories = new_categories\n    if not inplace:\n        return cat",
                "def reorder_categories(self, new_categories, ordered=None, inplace=False):\n    \"\"\"\n    Reorder categories as specified in new_categories.\n\n    `new_categories` need to include all old categories and no new category\n    items.\n\n    Parameters\n    ----------\n    new_categories : Index-like\n       The categories in new order.\n    ordered : bool, optional\n       Whether or not the categorical is treated as a ordered categorical.\n       If not given, do not change the ordered information.\n    inplace : bool, default False\n       Whether or not to reorder the categories inplace or return a copy of\n       this categorical with reordered categories.\n\n    Returns\n    -------\n    cat : Categorical with reordered categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the new categories do not contain all old category items or any\n        new ones\n\n    See Also\n    --------\n    rename_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if set(self.dtype.categories) != set(new_categories):\n        raise ValueError(\n            \"items in new_categories are not the same as in old categories\"\n        )\n    return self.set_categories(new_categories, ordered=ordered, inplace=inplace)",
                "def add_categories(self, new_categories, inplace=False):\n    \"\"\"\n    Add new categories.\n\n    `new_categories` will be included at the last/highest place in the\n    categories and will be unused directly after this call.\n\n    Parameters\n    ----------\n    new_categories : category or list-like of category\n       The new categories to be included.\n    inplace : bool, default False\n       Whether or not to add the categories inplace or return a copy of\n       this categorical with added categories.\n\n    Returns\n    -------\n    cat : Categorical with new categories added or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the new categories include old categories or do not validate as\n        categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if not is_list_like(new_categories):\n        new_categories = [new_categories]\n    already_included = set(new_categories) & set(self.dtype.categories)\n    if len(already_included) != 0:\n        raise ValueError(\n            f\"new categories must not include old categories: {already_included}\"\n        )\n    new_categories = list(self.dtype.categories) + list(new_categories)\n    new_dtype = CategoricalDtype(new_categories, self.ordered)\n\n    cat = self if inplace else self.copy()\n    cat._dtype = new_dtype\n    cat._codes = coerce_indexer_dtype(cat._codes, new_dtype.categories)\n    if not inplace:\n        return cat",
                "def remove_categories(self, removals, inplace=False):\n    \"\"\"\n    Remove the specified categories.\n\n    `removals` must be included in the old categories. Values which were in\n    the removed categories will be set to NaN\n\n    Parameters\n    ----------\n    removals : category or list of categories\n       The categories which should be removed.\n    inplace : bool, default False\n       Whether or not to remove the categories inplace or return a copy of\n       this categorical with removed categories.\n\n    Returns\n    -------\n    cat : Categorical with removed categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the removals are not contained in the categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if not is_list_like(removals):\n        removals = [removals]\n\n    removal_set = set(removals)\n    not_included = removal_set - set(self.dtype.categories)\n    new_categories = [c for c in self.dtype.categories if c not in removal_set]\n\n    # GH 10156\n    if any(isna(removals)):\n        not_included = {x for x in not_included if notna(x)}\n        new_categories = [x for x in new_categories if notna(x)]\n\n    if len(not_included) != 0:\n        raise ValueError(f\"removals must all be in old categories: {not_included}\")\n\n    return self.set_categories(\n        new_categories, ordered=self.ordered, rename=False, inplace=inplace\n    )",
                "def remove_unused_categories(self, inplace=False):\n    \"\"\"\n    Remove categories which are not used.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to drop unused categories inplace or return a copy of\n       this categorical with unused categories dropped.\n\n    Returns\n    -------\n    cat : Categorical with unused categories dropped or None if inplace.\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    cat = self if inplace else self.copy()\n    idx, inv = np.unique(cat._codes, return_inverse=True)\n\n    if idx.size != 0 and idx[0] == -1:  # na sentinel\n        idx, inv = idx[1:], inv - 1\n\n    new_categories = cat.dtype.categories.take(idx)\n    new_dtype = CategoricalDtype._from_fastpath(\n        new_categories, ordered=self.ordered\n    )\n    cat._dtype = new_dtype\n    cat._codes = coerce_indexer_dtype(inv, new_dtype.categories)\n\n    if not inplace:\n        return cat",
                "def map(self, mapper):\n    \"\"\"\n    Map categories using input correspondence (dict, Series, or function).\n\n    Maps the categories to new categories. If the mapping correspondence is\n    one-to-one the result is a :class:`~pandas.Categorical` which has the\n    same order property as the original, otherwise a :class:`~pandas.Index`\n    is returned. NaN values are unaffected.\n\n    If a `dict` or :class:`~pandas.Series` is used any unmapped category is\n    mapped to `NaN`. Note that if this happens an :class:`~pandas.Index`\n    will be returned.\n\n    Parameters\n    ----------\n    mapper : function, dict, or Series\n        Mapping correspondence.\n\n    Returns\n    -------\n    pandas.Categorical or pandas.Index\n        Mapped categorical.\n\n    See Also\n    --------\n    CategoricalIndex.map : Apply a mapping correspondence on a\n        :class:`~pandas.CategoricalIndex`.\n    Index.map : Apply a mapping correspondence on an\n        :class:`~pandas.Index`.\n    Series.map : Apply a mapping correspondence on a\n        :class:`~pandas.Series`.\n    Series.apply : Apply more complex functions on a\n        :class:`~pandas.Series`.\n\n    Examples\n    --------\n    >>> cat = pd.Categorical(['a', 'b', 'c'])\n    >>> cat\n    [a, b, c]\n    Categories (3, object): [a, b, c]\n    >>> cat.map(lambda x: x.upper())\n    [A, B, C]\n    Categories (3, object): [A, B, C]\n    >>> cat.map({'a': 'first', 'b': 'second', 'c': 'third'})\n    [first, second, third]\n    Categories (3, object): [first, second, third]\n\n    If the mapping is one-to-one the ordering of the categories is\n    preserved:\n\n    >>> cat = pd.Categorical(['a', 'b', 'c'], ordered=True)\n    >>> cat\n    [a, b, c]\n    Categories (3, object): [a < b < c]\n    >>> cat.map({'a': 3, 'b': 2, 'c': 1})\n    [3, 2, 1]\n    Categories (3, int64): [3 < 2 < 1]\n\n    If the mapping is not one-to-one an :class:`~pandas.Index` is returned:\n\n    >>> cat.map({'a': 'first', 'b': 'second', 'c': 'first'})\n    Index(['first', 'second', 'first'], dtype='object')\n\n    If a `dict` is used, all unmapped categories are mapped to `NaN` and\n    the result is an :class:`~pandas.Index`:\n\n    >>> cat.map({'a': 'first', 'b': 'second'})\n    Index(['first', 'second', nan], dtype='object')\n    \"\"\"\n    new_categories = self.categories.map(mapper)\n    try:\n        return self.from_codes(\n            self._codes.copy(), categories=new_categories, ordered=self.ordered\n        )\n    except ValueError:\n        # NA values are represented in self._codes with -1\n        # np.take causes NA values to take final element in new_categories\n        if np.any(self._codes == -1):\n            new_categories = new_categories.insert(len(new_categories), np.nan)\n        return np.take(new_categories, self._codes)",
                "@property\ndef shape(self):\n    \"\"\"\n    Shape of the Categorical.\n\n    For internal compatibility with numpy arrays.\n\n    Returns\n    -------\n    shape : tuple\n    \"\"\"\n    return tuple([len(self._codes)])",
                "def shift(self, periods, fill_value=None):\n    \"\"\"\n    Shift Categorical by desired number of periods.\n\n    Parameters\n    ----------\n    periods : int\n        Number of periods to move, can be positive or negative\n    fill_value : object, optional\n        The scalar value to use for newly introduced missing values.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    shifted : Categorical\n    \"\"\"\n    # since categoricals always have ndim == 1, an axis parameter\n    # doesn't make any sense here.\n    codes = self.codes\n    if codes.ndim > 1:\n        raise NotImplementedError(\"Categorical with ndim > 1.\")\n    if np.prod(codes.shape) and (periods != 0):\n        codes = np.roll(codes, ensure_platform_int(periods), axis=0)\n        if isna(fill_value):\n            fill_value = -1\n        elif fill_value in self.categories:\n            fill_value = self.categories.get_loc(fill_value)\n        else:\n            raise ValueError(\n                f\"'fill_value={fill_value}' is not present \"\n                \"in this Categorical's categories\"\n            )\n        if periods > 0:\n            codes[:periods] = fill_value\n        else:\n            codes[periods:] = fill_value\n\n    return self.from_codes(codes, dtype=self.dtype)",
                "def __array__(self, dtype=None) -> np.ndarray:\n    \"\"\"\n    The numpy array interface.\n\n    Returns\n    -------\n    numpy.array\n        A numpy array of either the specified dtype or,\n        if dtype==None (default), the same dtype as\n        categorical.categories.dtype.\n    \"\"\"\n    ret = take_1d(self.categories.values, self._codes)\n    if dtype and not is_dtype_equal(dtype, self.categories.dtype):\n        return np.asarray(ret, dtype)\n    if is_extension_array_dtype(ret):\n        # When we're a Categorical[ExtensionArray], like Interval,\n        # we need to ensure __array__ get's all the way to an\n        # ndarray.\n        ret = np.asarray(ret)\n    return ret",
                "def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n    # for binary ops, use our custom dunder methods\n    result = ops.maybe_dispatch_ufunc_to_dunder_op(\n        self, ufunc, method, *inputs, **kwargs\n    )\n    if result is not NotImplemented:\n        return result\n\n    # for all other cases, raise for now (similarly as what happens in\n    # Series.__array_prepare__)\n    raise TypeError(\n        f\"Object with dtype {self.dtype} cannot perform \"\n        f\"the numpy op {ufunc.__name__}\"\n    )",
                "def __setstate__(self, state):\n    \"\"\"Necessary for making this object picklable\"\"\"\n    if not isinstance(state, dict):\n        raise Exception(\"invalid pickle state\")\n\n    # compat with pre 0.21.0 CategoricalDtype change\n    if \"_dtype\" not in state:\n        state[\"_dtype\"] = CategoricalDtype(state[\"_categories\"], state[\"_ordered\"])\n\n    for k, v in state.items():\n        setattr(self, k, v)",
                "@property\ndef T(self):\n    \"\"\"\n    Return transposed numpy array.\n    \"\"\"\n    return self",
                "@property\ndef nbytes(self):\n    return self._codes.nbytes + self.dtype.categories.values.nbytes",
                "def memory_usage(self, deep=False):\n    \"\"\"\n    Memory usage of my values\n\n    Parameters\n    ----------\n    deep : bool\n        Introspect the data deeply, interrogate\n        `object` dtypes for system-level memory consumption\n\n    Returns\n    -------\n    bytes used\n\n    Notes\n    -----\n    Memory usage does not include memory consumed by elements that\n    are not components of the array if deep=False\n\n    See Also\n    --------\n    numpy.ndarray.nbytes\n    \"\"\"\n    return self._codes.nbytes + self.dtype.categories.memory_usage(deep=deep)",
                "@Substitution(klass=\"Categorical\")\n@Appender(_shared_docs[\"searchsorted\"])\ndef searchsorted(self, value, side=\"left\", sorter=None):\n    # searchsorted is very performance sensitive. By converting codes\n    # to same dtype as self.codes, we get much faster performance.\n    if is_scalar(value):\n        codes = self.categories.get_loc(value)\n        codes = self.codes.dtype.type(codes)\n    else:\n        locs = [self.categories.get_loc(x) for x in value]\n        codes = np.array(locs, dtype=self.codes.dtype)\n    return self.codes.searchsorted(codes, side=side, sorter=sorter)",
                "def isna(self):\n    \"\"\"\n    Detect missing values\n\n    Missing values (-1 in .codes) are detected.\n\n    Returns\n    -------\n    a boolean array of whether my values are null\n\n    See Also\n    --------\n    isna : Top-level isna.\n    isnull : Alias of isna.\n    Categorical.notna : Boolean inverse of Categorical.isna.\n\n    \"\"\"\n    ret = self._codes == -1\n    return ret",
                "def notna(self):\n    \"\"\"\n    Inverse of isna\n\n    Both missing values (-1 in .codes) and NA as a category are detected as\n    null.\n\n    Returns\n    -------\n    a boolean array of whether my values are not null\n\n    See Also\n    --------\n    notna : Top-level notna.\n    notnull : Alias of notna.\n    Categorical.isna : Boolean inverse of Categorical.notna.\n\n    \"\"\"\n    return ~self.isna()",
                "def put(self, *args, **kwargs):\n    \"\"\"\n    Replace specific elements in the Categorical with given values.\n    \"\"\"\n    raise NotImplementedError((\"'put' is not yet implemented for Categorical\"))",
                "def dropna(self):\n    \"\"\"\n    Return the Categorical without null values.\n\n    Missing values (-1 in .codes) are detected.\n\n    Returns\n    -------\n    valid : Categorical\n    \"\"\"\n    result = self[self.notna()]\n\n    return result",
                "def value_counts(self, dropna=True):\n    \"\"\"\n    Return a Series containing counts of each category.\n\n    Every category will have an entry, even those with a count of 0.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't include counts of NaN.\n\n    Returns\n    -------\n    counts : Series\n\n    See Also\n    --------\n    Series.value_counts\n    \"\"\"\n    from pandas import Series, CategoricalIndex\n\n    code, cat = self._codes, self.categories\n    ncat, mask = len(cat), 0 <= code\n    ix, clean = np.arange(ncat), mask.all()\n\n    if dropna or clean:\n        obs = code if clean else code[mask]\n        count = np.bincount(obs, minlength=ncat or 0)\n    else:\n        count = np.bincount(np.where(mask, code, ncat))\n        ix = np.append(ix, -1)\n\n    ix = self._constructor(ix, dtype=self.dtype, fastpath=True)\n\n    return Series(count, index=CategoricalIndex(ix), dtype=\"int64\")",
                "def _internal_get_values(self):\n    \"\"\"\n    Return the values.\n\n    For internal compatibility with pandas formatting.\n\n    Returns\n    -------\n    np.ndarray or Index\n        A numpy array of the same dtype as categorical.categories.dtype or\n        Index if datetime / periods.\n    \"\"\"\n    # if we are a datetime and period index, return Index to keep metadata\n    if needs_i8_conversion(self.categories):\n        return self.categories.take(self._codes, fill_value=np.nan)\n    elif is_integer_dtype(self.categories) and -1 in self._codes:\n        return self.categories.astype(\"object\").take(self._codes, fill_value=np.nan)\n    return np.array(self)",
                "def check_for_ordered(self, op):\n    \"\"\" assert that we are ordered \"\"\"\n    if not self.ordered:\n        raise TypeError(\n            f\"Categorical is not ordered for operation {op}\\n\"\n            \"you can use .as_ordered() to change the \"\n            \"Categorical to an ordered one\\n\"\n        )",
                "def _values_for_argsort(self):\n    return self._codes.copy()",
                "def argsort(self, ascending=True, kind=\"quicksort\", *args, **kwargs):\n    \"\"\"\n    Return the indices that would sort the Categorical.\n\n    .. versionchanged:: 0.25.0\n\n       Changed to sort missing values at the end.\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        Whether the indices should result in an ascending\n        or descending sort.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n        Sorting algorithm.\n    *args, **kwargs:\n        passed through to :func:`numpy.argsort`.\n\n    Returns\n    -------\n    numpy.array\n\n    See Also\n    --------\n    numpy.ndarray.argsort\n\n    Notes\n    -----\n    While an ordering is applied to the category values, arg-sorting\n    in this context refers more to organizing and grouping together\n    based on matching category values. Thus, this function can be\n    called on an unordered Categorical instance unlike the functions\n    'Categorical.min' and 'Categorical.max'.\n\n    Examples\n    --------\n    >>> pd.Categorical(['b', 'b', 'a', 'c']).argsort()\n    array([2, 0, 1, 3])\n\n    >>> cat = pd.Categorical(['b', 'b', 'a', 'c'],\n    ...                      categories=['c', 'b', 'a'],\n    ...                      ordered=True)\n    >>> cat.argsort()\n    array([3, 0, 1, 2])\n\n    Missing values are placed at the end\n\n    >>> cat = pd.Categorical([2, None, 1])\n    >>> cat.argsort()\n    array([2, 0, 1])\n    \"\"\"\n    return super().argsort(ascending=ascending, kind=kind, *args, **kwargs)",
                "def sort_values(self, inplace=False, ascending=True, na_position=\"last\"):\n    \"\"\"\n    Sort the Categorical by category value returning a new\n    Categorical by default.\n\n    While an ordering is applied to the category values, sorting in this\n    context refers more to organizing and grouping together based on\n    matching category values. Thus, this function can be called on an\n    unordered Categorical instance unlike the functions 'Categorical.min'\n    and 'Categorical.max'.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n        Do operation in place.\n    ascending : bool, default True\n        Order ascending. Passing False orders descending. The\n        ordering parameter provides the method by which the\n        category values are organized.\n    na_position : {'first', 'last'} (optional, default='last')\n        'first' puts NaNs at the beginning\n        'last' puts NaNs at the end\n\n    Returns\n    -------\n    Categorical or None\n\n    See Also\n    --------\n    Categorical.sort\n    Series.sort_values\n\n    Examples\n    --------\n    >>> c = pd.Categorical([1, 2, 2, 1, 5])\n    >>> c\n    [1, 2, 2, 1, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>> c.sort_values()\n    [1, 1, 2, 2, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>> c.sort_values(ascending=False)\n    [5, 2, 2, 1, 1]\n    Categories (3, int64): [1, 2, 5]\n\n    Inplace sorting can be done as well:\n\n    >>> c.sort_values(inplace=True)\n    >>> c\n    [1, 1, 2, 2, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>>\n    >>> c = pd.Categorical([1, 2, 2, 1, 5])\n\n    'sort_values' behaviour with NaNs. Note that 'na_position'\n    is independent of the 'ascending' parameter:\n\n    >>> c = pd.Categorical([np.nan, 2, 2, np.nan, 5])\n    >>> c\n    [NaN, 2.0, 2.0, NaN, 5.0]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values()\n    [2.0, 2.0, 5.0, NaN, NaN]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(ascending=False)\n    [5.0, 2.0, 2.0, NaN, NaN]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(na_position='first')\n    [NaN, NaN, 2.0, 2.0, 5.0]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(ascending=False, na_position='first')\n    [NaN, NaN, 5.0, 2.0, 2.0]\n    Categories (2, int64): [2, 5]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if na_position not in [\"last\", \"first\"]:\n        raise ValueError(f\"invalid na_position: {repr(na_position)}\")\n\n    sorted_idx = nargsort(self, ascending=ascending, na_position=na_position)\n\n    if inplace:\n        self._codes = self._codes[sorted_idx]\n    else:\n        return self._constructor(\n            values=self._codes[sorted_idx], dtype=self.dtype, fastpath=True\n        )",
                "def _values_for_rank(self):\n    \"\"\"\n    For correctly ranking ordered categorical data. See GH#15420\n\n    Ordered categorical data should be ranked on the basis of\n    codes with -1 translated to NaN.\n\n    Returns\n    -------\n    numpy.array\n\n    \"\"\"\n    from pandas import Series\n\n    if self.ordered:\n        values = self.codes\n        mask = values == -1\n        if mask.any():\n            values = values.astype(\"float64\")\n            values[mask] = np.nan\n    elif self.categories.is_numeric():\n        values = np.array(self)\n    else:\n        #  reorder the categories (so rank can use the float codes)\n        #  instead of passing an object array to rank\n        values = np.array(\n            self.rename_categories(Series(self.categories).rank().values)\n        )\n    return values",
                "def view(self, dtype=None):\n    if dtype is not None:\n        raise NotImplementedError(dtype)\n    return self._constructor(values=self._codes, dtype=self.dtype, fastpath=True)",
                "def to_dense(self):\n    \"\"\"\n    Return my 'dense' representation\n\n    For internal compatibility with numpy arrays.\n\n    Returns\n    -------\n    dense : array\n    \"\"\"\n    return np.asarray(self)",
                "def fillna(self, value=None, method=None, limit=None):\n    \"\"\"\n    Fill NA/NaN values using the specified method.\n\n    Parameters\n    ----------\n    value : scalar, dict, Series\n        If a scalar value is passed it is used to fill all missing values.\n        Alternatively, a Series or dict can be used to fill in different\n        values for each index. The value should not be a list. The\n        value(s) passed should either be in the categories or should be\n        NaN.\n    method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n        Method to use for filling holes in reindexed Series\n        pad / ffill: propagate last valid observation forward to next valid\n        backfill / bfill: use NEXT valid observation to fill gap\n    limit : int, default None\n        (Not implemented yet for Categorical!)\n        If method is specified, this is the maximum number of consecutive\n        NaN values to forward/backward fill. In other words, if there is\n        a gap with more than this number of consecutive NaNs, it will only\n        be partially filled. If method is not specified, this is the\n        maximum number of entries along the entire axis where NaNs will be\n        filled.\n\n    Returns\n    -------\n    filled : Categorical with NA/NaN filled\n    \"\"\"\n    value, method = validate_fillna_kwargs(\n        value, method, validate_scalar_dict_value=False\n    )\n\n    if value is None:\n        value = np.nan\n    if limit is not None:\n        raise NotImplementedError(\n            \"specifying a limit for fillna has not been implemented yet\"\n        )\n\n    codes = self._codes\n\n    # pad / bfill\n    if method is not None:\n\n        values = self.to_dense().reshape(-1, len(self))\n        values = interpolate_2d(values, method, 0, None, value).astype(\n            self.categories.dtype\n        )[0]\n        codes = _get_codes_for_values(values, self.categories)\n\n    else:\n\n        # If value is a dict or a Series (a dict value has already\n        # been converted to a Series)\n        if isinstance(value, ABCSeries):\n            if not value[~value.isin(self.categories)].isna().all():\n                raise ValueError(\"fill value must be in categories\")\n\n            values_codes = _get_codes_for_values(value, self.categories)\n            indexer = np.where(codes == -1)\n            codes[indexer] = values_codes[indexer]\n\n        # If value is not a dict or Series it should be a scalar\n        elif is_hashable(value):\n            if not isna(value) and value not in self.categories:\n                raise ValueError(\"fill value must be in categories\")\n\n            mask = codes == -1\n            if mask.any():\n                codes = codes.copy()\n                if isna(value):\n                    codes[mask] = -1\n                else:\n                    codes[mask] = self.categories.get_loc(value)\n\n        else:\n            raise TypeError(\n                f\"'value' parameter must be a scalar, dict \"\n                f\"or Series, but you passed a {type(value).__name__}\"\n            )\n\n    return self._constructor(codes, dtype=self.dtype, fastpath=True)",
                "def take(self, indexer, allow_fill: bool = False, fill_value=None):\n    \"\"\"\n    Take elements from the Categorical.\n\n    Parameters\n    ----------\n    indexer : sequence of int\n        The indices in `self` to take. The meaning of negative values in\n        `indexer` depends on the value of `allow_fill`.\n    allow_fill : bool, default False\n        How to handle negative values in `indexer`.\n\n        * False: negative values in `indices` indicate positional indices\n          from the right. This is similar to\n          :func:`numpy.take`.\n\n        * True: negative values in `indices` indicate missing values\n          (the default). These values are set to `fill_value`. Any other\n          other negative values raise a ``ValueError``.\n\n        .. versionchanged:: 1.0.0\n\n           Default value changed from ``True`` to ``False``.\n\n    fill_value : object\n        The value to use for `indices` that are missing (-1), when\n        ``allow_fill=True``. This should be the category, i.e. a value\n        in ``self.categories``, not a code.\n\n    Returns\n    -------\n    Categorical\n        This Categorical will have the same categories and ordered as\n        `self`.\n\n    See Also\n    --------\n    Series.take : Similar method for Series.\n    numpy.ndarray.take : Similar method for NumPy arrays.\n\n    Examples\n    --------\n    >>> cat = pd.Categorical(['a', 'a', 'b'])\n    >>> cat\n    [a, a, b]\n    Categories (2, object): [a, b]\n\n    Specify ``allow_fill==False`` to have negative indices mean indexing\n    from the right.\n\n    >>> cat.take([0, -1, -2], allow_fill=False)\n    [a, b, a]\n    Categories (2, object): [a, b]\n\n    With ``allow_fill=True``, indices equal to ``-1`` mean \"missing\"\n    values that should be filled with the `fill_value`, which is\n    ``np.nan`` by default.\n\n    >>> cat.take([0, -1, -1], allow_fill=True)\n    [a, NaN, NaN]\n    Categories (2, object): [a, b]\n\n    The fill value can be specified.\n\n    >>> cat.take([0, -1, -1], allow_fill=True, fill_value='a')\n    [a, a, a]\n    Categories (3, object): [a, b]\n\n    Specifying a fill value that's not in ``self.categories``\n    will raise a ``TypeError``.\n    \"\"\"\n    indexer = np.asarray(indexer, dtype=np.intp)\n\n    dtype = self.dtype\n\n    if isna(fill_value):\n        fill_value = -1\n    elif allow_fill:\n        # convert user-provided `fill_value` to codes\n        if fill_value in self.categories:\n            fill_value = self.categories.get_loc(fill_value)\n        else:\n            msg = (\n                f\"'fill_value' ('{fill_value}') is not in this \"\n                \"Categorical's categories.\"\n            )\n            raise TypeError(msg)\n\n    codes = take(self._codes, indexer, allow_fill=allow_fill, fill_value=fill_value)\n    result = type(self).from_codes(codes, dtype=dtype)\n    return result",
                "def take_nd(self, indexer, allow_fill: bool = False, fill_value=None):\n    # GH#27745 deprecate alias that other EAs dont have\n    warn(\n        \"Categorical.take_nd is deprecated, use Categorical.take instead\",\n        FutureWarning,\n        stacklevel=2,\n    )\n    return self.take(indexer, allow_fill=allow_fill, fill_value=fill_value)",
                "def __len__(self) -> int:\n    \"\"\"\n    The length of this Categorical.\n    \"\"\"\n    return len(self._codes)",
                "def __iter__(self):\n    \"\"\"\n    Returns an Iterator over the values of this Categorical.\n    \"\"\"\n    return iter(self._internal_get_values().tolist())",
                "def __contains__(self, key) -> bool:\n    \"\"\"\n    Returns True if `key` is in this Categorical.\n    \"\"\"\n    # if key is a NaN, check if any NaN is in self.\n    if is_scalar(key) and isna(key):\n        return self.isna().any()\n\n    return contains(self, key, container=self._codes)",
                "def _tidy_repr(self, max_vals=10, footer=True) -> str:\n    \"\"\"\n    a short repr displaying only max_vals and an optional (but default\n    footer)\n    \"\"\"\n    num = max_vals // 2\n    head = self[:num]._get_repr(length=False, footer=False)\n    tail = self[-(max_vals - num) :]._get_repr(length=False, footer=False)\n\n    result = f\"{head[:-1]}, ..., {tail[1:]}\"\n    if footer:\n        result = f\"{result}\\n{self._repr_footer()}\"\n\n    return str(result)",
                "def _repr_categories(self):\n    \"\"\"\n    return the base repr for the categories\n    \"\"\"\n    max_categories = (\n        10\n        if get_option(\"display.max_categories\") == 0\n        else get_option(\"display.max_categories\")\n    )\n    from pandas.io.formats import format as fmt\n\n    if len(self.categories) > max_categories:\n        num = max_categories // 2\n        head = fmt.format_array(self.categories[:num], None)\n        tail = fmt.format_array(self.categories[-num:], None)\n        category_strs = head + [\"...\"] + tail\n    else:\n        category_strs = fmt.format_array(self.categories, None)\n\n    # Strip all leading spaces, which format_array adds for columns...\n    category_strs = [x.strip() for x in category_strs]\n    return category_strs",
                "def _repr_categories_info(self) -> str:\n    \"\"\"\n    Returns a string representation of the footer.\n    \"\"\"\n    category_strs = self._repr_categories()\n    dtype = str(self.categories.dtype)\n    levheader = f\"Categories ({len(self.categories)}, {dtype}): \"\n    width, height = get_terminal_size()\n    max_width = get_option(\"display.width\") or width\n    if console.in_ipython_frontend():\n        # 0 = no breaks\n        max_width = 0\n    levstring = \"\"\n    start = True\n    cur_col_len = len(levheader)  # header\n    sep_len, sep = (3, \" < \") if self.ordered else (2, \", \")\n    linesep = sep.rstrip() + \"\\n\"  # remove whitespace\n    for val in category_strs:\n        if max_width != 0 and cur_col_len + sep_len + len(val) > max_width:\n            levstring += linesep + (\" \" * (len(levheader) + 1))\n            cur_col_len = len(levheader) + 1  # header + a whitespace\n        elif not start:\n            levstring += sep\n            cur_col_len += len(val)\n        levstring += val\n        start = False\n    # replace to simple save space by\n    return levheader + \"[\" + levstring.replace(\" < ... < \", \" ... \") + \"]\"",
                "def _repr_footer(self) -> str:\n    info = self._repr_categories_info()\n    return f\"Length: {len(self)}\\n{info}\"",
                "def _get_repr(self, length=True, na_rep=\"NaN\", footer=True) -> str:\n    from pandas.io.formats import format as fmt\n\n    formatter = fmt.CategoricalFormatter(\n        self, length=length, na_rep=na_rep, footer=footer\n    )\n    result = formatter.to_string()\n    return str(result)",
                "def __repr__(self) -> str:\n    \"\"\"\n    String representation.\n    \"\"\"\n    _maxlen = 10\n    if len(self._codes) > _maxlen:\n        result = self._tidy_repr(_maxlen)\n    elif len(self._codes) > 0:\n        result = self._get_repr(length=len(self) > _maxlen)\n    else:\n        msg = self._get_repr(length=False, footer=True).replace(\"\\n\", \", \")\n        result = f\"[], {msg}\"\n\n    return result",
                "def _maybe_coerce_indexer(self, indexer):\n    \"\"\"\n    return an indexer coerced to the codes dtype\n    \"\"\"\n    if isinstance(indexer, np.ndarray) and indexer.dtype.kind == \"i\":\n        indexer = indexer.astype(self._codes.dtype)\n    return indexer",
                "def __getitem__(self, key):\n    \"\"\"\n    Return an item.\n    \"\"\"\n    if isinstance(key, (int, np.integer)):\n        i = self._codes[key]\n        if i == -1:\n            return np.nan\n        else:\n            return self.categories[i]\n\n    key = check_array_indexer(self, key)\n\n    result = self._codes[key]\n    if result.ndim > 1:\n        deprecate_ndim_indexing(result)\n        return result\n    return self._constructor(result, dtype=self.dtype, fastpath=True)",
                "def __setitem__(self, key, value):\n    \"\"\"\n    Item assignment.\n\n    Raises\n    ------\n    ValueError\n        If (one or more) Value is not in categories or if a assigned\n        `Categorical` does not have the same categories\n    \"\"\"\n    value = extract_array(value, extract_numpy=True)\n\n    # require identical categories set\n    if isinstance(value, Categorical):\n        if not is_dtype_equal(self, value):\n            raise ValueError(\n                \"Cannot set a Categorical with another, \"\n                \"without identical categories\"\n            )\n        if not self.categories.equals(value.categories):\n            new_codes = _recode_for_categories(\n                value.codes, value.categories, self.categories\n            )\n            value = Categorical.from_codes(new_codes, dtype=self.dtype)\n\n    rvalue = value if is_list_like(value) else [value]\n\n    from pandas import Index\n\n    to_add = Index(rvalue).difference(self.categories)\n\n    # no assignments of values not in categories, but it's always ok to set\n    # something to np.nan\n    if len(to_add) and not isna(to_add).all():\n        raise ValueError(\n            \"Cannot setitem on a Categorical with a new \"\n            \"category, set the categories first\"\n        )\n\n    # set by position\n    if isinstance(key, (int, np.integer)):\n        pass\n\n    # tuple of indexers (dataframe)\n    elif isinstance(key, tuple):\n        # only allow 1 dimensional slicing, but can\n        # in a 2-d case be passd (slice(None),....)\n        if len(key) == 2:\n            if not com.is_null_slice(key[0]):\n                raise AssertionError(\"invalid slicing for a 1-ndim categorical\")\n            key = key[1]\n        elif len(key) == 1:\n            key = key[0]\n        else:\n            raise AssertionError(\"invalid slicing for a 1-ndim categorical\")\n\n    # slicing in Series or Categorical\n    elif isinstance(key, slice):\n        pass\n\n    # else: array of True/False in Series or Categorical\n\n    lindexer = self.categories.get_indexer(rvalue)\n    lindexer = self._maybe_coerce_indexer(lindexer)\n\n    key = check_array_indexer(self, key)\n    self._codes[key] = lindexer",
                "def _reverse_indexer(self) -> Dict[Hashable, np.ndarray]:\n    \"\"\"\n    Compute the inverse of a categorical, returning\n    a dict of categories -> indexers.\n\n    *This is an internal function*\n\n    Returns\n    -------\n    dict of categories -> indexers\n\n    Examples\n    --------\n    >>> c = pd.Categorical(list('aabca'))\n    >>> c\n    [a, a, b, c, a]\n    Categories (3, object): [a, b, c]\n    >>> c.categories\n    Index(['a', 'b', 'c'], dtype='object')\n    >>> c.codes\n    array([0, 0, 1, 2, 0], dtype=int8)\n    >>> c._reverse_indexer()\n    {'a': array([0, 1, 4]), 'b': array([2]), 'c': array([3])}\n\n    \"\"\"\n    categories = self.categories\n    r, counts = libalgos.groupsort_indexer(\n        self.codes.astype(\"int64\"), categories.size\n    )\n    counts = counts.cumsum()\n    _result = (r[start:end] for start, end in zip(counts, counts[1:]))\n    result = dict(zip(categories, _result))\n    return result",
                "def _reduce(self, name, axis=0, **kwargs):\n    func = getattr(self, name, None)\n    if func is None:\n        raise TypeError(f\"Categorical cannot perform the operation {name}\")\n    return func(**kwargs)",
                "@deprecate_kwarg(old_arg_name=\"numeric_only\", new_arg_name=\"skipna\")\ndef min(self, skipna=True):\n    \"\"\"\n    The minimum value of the object.\n\n    Only ordered `Categoricals` have a minimum!\n\n    .. versionchanged:: 1.0.0\n\n       Returns an NA value on empty arrays\n\n    Raises\n    ------\n    TypeError\n        If the `Categorical` is not `ordered`.\n\n    Returns\n    -------\n    min : the minimum of this `Categorical`\n    \"\"\"\n    self.check_for_ordered(\"min\")\n\n    if not len(self._codes):\n        return self.dtype.na_value\n\n    good = self._codes != -1\n    if not good.all():\n        if skipna:\n            pointer = self._codes[good].min()\n        else:\n            return np.nan\n    else:\n        pointer = self._codes.min()\n    return self.categories[pointer]",
                "@deprecate_kwarg(old_arg_name=\"numeric_only\", new_arg_name=\"skipna\")\ndef max(self, skipna=True):\n    \"\"\"\n    The maximum value of the object.\n\n    Only ordered `Categoricals` have a maximum!\n\n    .. versionchanged:: 1.0.0\n\n       Returns an NA value on empty arrays\n\n    Raises\n    ------\n    TypeError\n        If the `Categorical` is not `ordered`.\n\n    Returns\n    -------\n    max : the maximum of this `Categorical`\n    \"\"\"\n    self.check_for_ordered(\"max\")\n\n    if not len(self._codes):\n        return self.dtype.na_value\n\n    good = self._codes != -1\n    if not good.all():\n        if skipna:\n            pointer = self._codes[good].max()\n        else:\n            return np.nan\n    else:\n        pointer = self._codes.max()\n    return self.categories[pointer]",
                "def mode(self, dropna=True):\n    \"\"\"\n    Returns the mode(s) of the Categorical.\n\n    Always returns `Categorical` even if only one value.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't consider counts of NaN/NaT.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    modes : `Categorical` (sorted)\n    \"\"\"\n    codes = self._codes\n    if dropna:\n        good = self._codes != -1\n        codes = self._codes[good]\n    codes = sorted(htable.mode_int64(ensure_int64(codes), dropna))\n    return self._constructor(values=codes, dtype=self.dtype, fastpath=True)",
                "def unique(self):\n    \"\"\"\n    Return the ``Categorical`` which ``categories`` and ``codes`` are\n    unique. Unused categories are NOT returned.\n\n    - unordered category: values and categories are sorted by appearance\n      order.\n    - ordered category: values are sorted by appearance order, categories\n      keeps existing order.\n\n    Returns\n    -------\n    unique values : ``Categorical``\n\n    Examples\n    --------\n    An unordered Categorical will return categories in the\n    order of appearance.\n\n    >>> pd.Categorical(list('baabc'))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    >>> pd.Categorical(list('baabc'), categories=list('abc'))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    An ordered Categorical preserves the category ordering.\n\n    >>> pd.Categorical(list('baabc'),\n    ...                categories=list('abc'),\n    ...                ordered=True)\n    [b, a, c]\n    Categories (3, object): [a < b < c]\n\n    See Also\n    --------\n    unique\n    CategoricalIndex.unique\n    Series.unique\n\n    \"\"\"\n    # unlike np.unique, unique1d does not sort\n    unique_codes = unique1d(self.codes)\n    cat = self.copy()\n\n    # keep nan in codes\n    cat._codes = unique_codes\n\n    # exclude nan from indexer for categories\n    take_codes = unique_codes[unique_codes != -1]\n    if self.ordered:\n        take_codes = np.sort(take_codes)\n    return cat.set_categories(cat.categories.take(take_codes))",
                "def _values_for_factorize(self):\n    codes = self.codes.astype(\"int64\")\n    return codes, -1",
                "@classmethod\ndef _from_factorized(cls, uniques, original):\n    return original._constructor(\n        original.categories.take(uniques), dtype=original.dtype\n    )",
                "def equals(self, other):\n    \"\"\"\n    Returns True if categorical arrays are equal.\n\n    Parameters\n    ----------\n    other : `Categorical`\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if self.is_dtype_equal(other):\n        if self.categories.equals(other.categories):\n            # fastpath to avoid re-coding\n            other_codes = other._codes\n        else:\n            other_codes = _recode_for_categories(\n                other.codes, other.categories, self.categories\n            )\n        return np.array_equal(self._codes, other_codes)\n    return False",
                "def is_dtype_equal(self, other):\n    \"\"\"\n    Returns True if categoricals are the same dtype\n      same categories, and same ordered\n\n    Parameters\n    ----------\n    other : Categorical\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    try:\n        return hash(self.dtype) == hash(other.dtype)\n    except (AttributeError, TypeError):\n        return False",
                "def describe(self):\n    \"\"\"\n    Describes this Categorical\n\n    Returns\n    -------\n    description: `DataFrame`\n        A dataframe with frequency and counts by category.\n    \"\"\"\n    counts = self.value_counts(dropna=False)\n    freqs = counts / float(counts.sum())\n\n    from pandas.core.reshape.concat import concat\n\n    result = concat([counts, freqs], axis=1)\n    result.columns = [\"counts\", \"freqs\"]\n    result.index.name = \"categories\"\n\n    return result",
                "@Substitution(klass=\"Categorical\")\n@Appender(_extension_array_shared_docs[\"repeat\"])\ndef repeat(self, repeats, axis=None):\n    nv.validate_repeat(tuple(), dict(axis=axis))\n    codes = self._codes.repeat(repeats)\n    return self._constructor(values=codes, dtype=self.dtype, fastpath=True)",
                "@property\ndef _can_hold_na(self):\n    return True",
                "@classmethod\ndef _concat_same_type(self, to_concat):\n    from pandas.core.dtypes.concat import concat_categorical\n\n    return concat_categorical(to_concat)",
                "def isin(self, values):\n    \"\"\"\n    Check whether `values` are contained in Categorical.\n\n    Return a boolean NumPy Array showing whether each element in\n    the Categorical matches an element in the passed sequence of\n    `values` exactly.\n\n    Parameters\n    ----------\n    values : set or list-like\n        The sequence of values to test. Passing in a single string will\n        raise a ``TypeError``. Instead, turn a single string into a\n        list of one element.\n\n    Returns\n    -------\n    isin : numpy.ndarray (bool dtype)\n\n    Raises\n    ------\n    TypeError\n      * If `values` is not a set or list-like\n\n    See Also\n    --------\n    pandas.Series.isin : Equivalent method on Series.\n\n    Examples\n    --------\n    >>> s = pd.Categorical(['lama', 'cow', 'lama', 'beetle', 'lama',\n    ...                'hippo'])\n    >>> s.isin(['cow', 'lama'])\n    array([ True,  True,  True, False,  True, False])\n\n    Passing a single string as ``s.isin('lama')`` will raise an error. Use\n    a list of one element instead:\n\n    >>> s.isin(['lama'])\n    array([ True, False,  True, False,  True, False])\n    \"\"\"\n    if not is_list_like(values):\n        values_type = type(values).__name__\n        raise TypeError(\n            \"only list-like objects are allowed to be passed \"\n            f\"to isin(), you passed a [{values_type}]\"\n        )\n    values = sanitize_array(values, None, None)\n    null_mask = np.asarray(isna(values))\n    code_values = self.categories.get_indexer(values)\n    code_values = code_values[null_mask | (code_values >= 0)]\n    return algorithms.isin(self.codes, code_values)",
                "def replace(self, to_replace, value, inplace: bool = False):\n    \"\"\"\n    Replaces all instances of one value with another\n\n    Parameters\n    ----------\n    to_replace: object\n        The value to be replaced\n\n    value: object\n        The value to replace it with\n\n    inplace: bool\n        Whether the operation is done in-place\n\n    Returns\n    -------\n    None if inplace is True, otherwise the new Categorical after replacement\n\n\n    Examples\n    --------\n    >>> s = pd.Categorical([1, 2, 1, 3])\n    >>> s.replace(1, 3)\n    [3, 3, 2, 3]\n    Categories (2, int64): [2, 3]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    cat = self if inplace else self.copy()\n    if to_replace in cat.categories:\n        if isna(value):\n            cat.remove_categories(to_replace, inplace=True)\n        else:\n            categories = cat.categories.tolist()\n            index = categories.index(to_replace)\n            if value in cat.categories:\n                value_index = categories.index(value)\n                cat._codes[cat._codes == index] = value_index\n                cat.remove_categories(to_replace, inplace=True)\n            else:\n                categories[index] = value\n                cat.rename_categories(categories, inplace=True)\n    if not inplace:\n        return cat",
                "def __init__(self, data):\n    self._validate(data)\n    self._parent = data.values\n    self._index = data.index\n    self._name = data.name\n    self._freeze()",
                "@staticmethod\ndef _validate(data):\n    if not is_categorical_dtype(data.dtype):\n        raise AttributeError(\"Can only use .cat accessor with a 'category' dtype\")",
                "def _delegate_property_get(self, name):\n    return getattr(self._parent, name)",
                "def _delegate_property_set(self, name, new_values):\n    return setattr(self._parent, name, new_values)",
                "@property\ndef codes(self):\n    \"\"\"\n    Return Series of codes as well as the index.\n    \"\"\"\n    from pandas import Series\n\n    return Series(self._parent.codes, index=self._index)",
                "def _delegate_method(self, name, *args, **kwargs):\n    from pandas import Series\n\n    method = getattr(self._parent, name)\n    res = method(*args, **kwargs)\n    if res is not None:\n        return Series(res, index=self._index, name=self._name)"
            ],
            "inscope_function_signatures": [
                "_cat_compare_op(op)",
                "contains(cat, key, container)",
                "_get_codes_for_values(values, categories)",
                "_recode_for_categories(codes: np.ndarray, old_categories, new_categories)",
                "_convert_to_list_like(list_like)",
                "factorize_from_iterable(values)",
                "factorize_from_iterables(iterables)",
                "func(self, other)",
                "__init__(self, values, categories=None, ordered=None, dtype=None, fastpath=False)",
                "categories(self)",
                "categories(self, categories)",
                "ordered(self) -> Ordered",
                "dtype(self) -> CategoricalDtype",
                "_ndarray_values(self) -> np.ndarray",
                "_constructor(self) -> Type['Categorical']",
                "_from_sequence(cls, scalars, dtype=None, copy=False)",
                "_formatter(self, boxed=False)",
                "copy(self) -> 'Categorical'",
                "astype(self, dtype: Dtype, copy: bool=True) -> ArrayLike",
                "size(self) -> int",
                "itemsize(self) -> int",
                "tolist(self) -> List[Scalar]",
                "_from_inferred_categories(cls, inferred_categories, inferred_codes, dtype, true_values=None)",
                "from_codes(cls, codes, categories=None, ordered=None, dtype=None)",
                "_get_codes(self)",
                "_set_codes(self, codes)",
                "_set_categories(self, categories, fastpath=False)",
                "_set_dtype(self, dtype: CategoricalDtype) -> 'Categorical'",
                "set_ordered(self, value, inplace=False)",
                "as_ordered(self, inplace=False)",
                "as_unordered(self, inplace=False)",
                "set_categories(self, new_categories, ordered=None, rename=False, inplace=False)",
                "rename_categories(self, new_categories, inplace=False)",
                "reorder_categories(self, new_categories, ordered=None, inplace=False)",
                "add_categories(self, new_categories, inplace=False)",
                "remove_categories(self, removals, inplace=False)",
                "remove_unused_categories(self, inplace=False)",
                "map(self, mapper)",
                "shape(self)",
                "shift(self, periods, fill_value=None)",
                "__array__(self, dtype=None) -> np.ndarray",
                "__array_ufunc__(self, ufunc, method, *inputs, **kwargs)",
                "__setstate__(self, state)",
                "T(self)",
                "nbytes(self)",
                "memory_usage(self, deep=False)",
                "searchsorted(self, value, side='left', sorter=None)",
                "isna(self)",
                "notna(self)",
                "put(self, *args, **kwargs)",
                "dropna(self)",
                "value_counts(self, dropna=True)",
                "_internal_get_values(self)",
                "check_for_ordered(self, op)",
                "_values_for_argsort(self)",
                "argsort(self, ascending=True, kind='quicksort', *args, **kwargs)",
                "sort_values(self, inplace=False, ascending=True, na_position='last')",
                "_values_for_rank(self)",
                "view(self, dtype=None)",
                "to_dense(self)",
                "fillna(self, value=None, method=None, limit=None)",
                "take(self, indexer, allow_fill: bool=False, fill_value=None)",
                "take_nd(self, indexer, allow_fill: bool=False, fill_value=None)",
                "__len__(self) -> int",
                "__iter__(self)",
                "__contains__(self, key) -> bool",
                "_tidy_repr(self, max_vals=10, footer=True) -> str",
                "_repr_categories(self)",
                "_repr_categories_info(self) -> str",
                "_repr_footer(self) -> str",
                "_get_repr(self, length=True, na_rep='NaN', footer=True) -> str",
                "__repr__(self) -> str",
                "_maybe_coerce_indexer(self, indexer)",
                "__getitem__(self, key)",
                "__setitem__(self, key, value)",
                "_reverse_indexer(self) -> Dict[Hashable, np.ndarray]",
                "_reduce(self, name, axis=0, **kwargs)",
                "min(self, skipna=True)",
                "max(self, skipna=True)",
                "mode(self, dropna=True)",
                "unique(self)",
                "_values_for_factorize(self)",
                "_from_factorized(cls, uniques, original)",
                "equals(self, other)",
                "is_dtype_equal(self, other)",
                "describe(self)",
                "repeat(self, repeats, axis=None)",
                "_can_hold_na(self)",
                "_concat_same_type(self, to_concat)",
                "isin(self, values)",
                "replace(self, to_replace, value, inplace: bool=False)",
                "__init__(self, data)",
                "_validate(data)",
                "_delegate_property_get(self, name)",
                "_delegate_property_set(self, name, new_values)",
                "codes(self)",
                "_delegate_method(self, name, *args, **kwargs)"
            ],
            "variables_in_file": {
                "opname": [
                    66,
                    68,
                    101,
                    133,
                    134,
                    137,
                    75,
                    142,
                    112,
                    114,
                    120,
                    122,
                    126
                ],
                "op.__name__": [
                    66
                ],
                "op": [
                    66,
                    1491
                ],
                "is_list_like": [
                    2403,
                    70,
                    1071,
                    2644,
                    2040,
                    1022
                ],
                "other": [
                    134,
                    138,
                    2320,
                    70,
                    79,
                    84,
                    86,
                    88,
                    91,
                    95,
                    97,
                    99,
                    109,
                    110,
                    111,
                    2295,
                    2296,
                    2298,
                    2301
                ],
                "len": [
                    2048,
                    1025,
                    2181,
                    2573,
                    654,
                    2062,
                    657,
                    1937,
                    2066,
                    1945,
                    1949,
                    1950,
                    1951,
                    1954,
                    2599,
                    1962,
                    430,
                    1454,
                    1207,
                    1978,
                    1083,
                    1980,
                    1981,
                    2683,
                    1731,
                    70,
                    711,
                    1229,
                    849,
                    1875,
                    84,
                    853,
                    344,
                    2651,
                    2146,
                    121,
                    123,
                    1919
                ],
                "self": [
                    1024,
                    516,
                    1029,
                    1030,
                    1032,
                    526,
                    2077,
                    2078,
                    2080,
                    2081,
                    1075,
                    1076,
                    2108,
                    1086,
                    1087,
                    2110,
                    70,
                    2119,
                    74,
                    84,
                    86,
                    88,
                    1113,
                    91,
                    1630,
                    95,
                    2144,
                    97,
                    1121,
                    1633,
                    1635,
                    101,
                    1636,
                    103,
                    2146,
                    2147,
                    2149,
                    2152,
                    2156,
                    2157,
                    110,
                    111,
                    112,
                    116,
                    1653,
                    1654,
                    121,
                    123,
                    1659,
                    1660,
                    1665,
                    2179,
                    2181,
                    134,
                    2182,
                    1672,
                    2184,
                    2187,
                    2191,
                    2192,
                    1684,
                    671,
                    2211,
                    2213,
                    2214,
                    2216,
                    1198,
                    1200,
                    1201,
                    1206,
                    1208,
                    1726,
                    705,
                    707,
                    1731,
                    1733,
                    710,
                    711,
                    1735,
                    1229,
                    718,
                    1742,
                    1745,
                    2261,
                    2262,
                    1751,
                    733,
                    734,
                    2269,
                    1760,
                    1250,
                    2274,
                    1768,
                    1257,
                    1258,
                    749,
                    750,
                    1269,
                    2295,
                    2296,
                    2301,
                    2303,
                    1282,
                    771,
                    1283,
                    1295,
                    2320,
                    789,
                    1303,
                    2333,
                    1317,
                    1324,
                    2348,
                    2349,
                    1328,
                    1843,
                    1849,
                    1850,
                    1858,
                    1859,
                    324,
                    325,
                    1353,
                    844,
                    1869,
                    847,
                    1361,
                    1362,
                    1875,
                    1364,
                    1365,
                    1366,
                    1881,
                    1889,
                    1891,
                    1385,
                    1899,
                    1900,
                    2411,
                    2413,
                    1904,
                    1919,
                    1408,
                    1921,
                    1922,
                    1925,
                    393,
                    394,
                    2443,
                    1935,
                    1936,
                    1937,
                    1428,
                    1946,
                    934,
                    425,
                    1961,
                    1962,
                    429,
                    430,
                    1453,
                    1968,
                    437,
                    1464,
                    1978,
                    1979,
                    444,
                    1980,
                    1981,
                    1983,
                    451,
                    455,
                    1481,
                    1482,
                    1483,
                    1484,
                    1485,
                    1993,
                    2508,
                    2509,
                    1489,
                    2001,
                    2510,
                    2511,
                    2005,
                    982,
                    2007,
                    2512,
                    473,
                    474,
                    986,
                    1497,
                    2009,
                    2013,
                    2520,
                    2523,
                    2532,
                    2537,
                    2540,
                    493,
                    494,
                    495,
                    496,
                    497,
                    2029,
                    499,
                    500,
                    2034,
                    502,
                    2036,
                    2038,
                    2044,
                    509
                ],
                "ValueError": [
                    2049,
                    1026,
                    645,
                    650,
                    655,
                    658,
                    679,
                    433,
                    1203,
                    1084,
                    72,
                    713,
                    1743,
                    983,
                    1752,
                    1628,
                    1260,
                    366,
                    2030,
                    501
                ],
                "self.ordered": [
                    705,
                    1121,
                    707,
                    1030,
                    74,
                    429,
                    1201,
                    1489,
                    1653,
                    86,
                    2269,
                    1946,
                    91,
                    1087,
                    95
                ],
                "TypeError": [
                    1856,
                    1763,
                    356,
                    2405,
                    136,
                    361,
                    2121,
                    76,
                    2321,
                    1490,
                    85,
                    1302,
                    87,
                    2645,
                    89,
                    92,
                    125,
                    183
                ],
                "isinstance": [
                    2563,
                    2055,
                    1992,
                    2059,
                    2028,
                    1741,
                    558,
                    79,
                    336,
                    2000,
                    340,
                    2615,
                    2072,
                    2617,
                    378,
                    1309
                ],
                "Categorical": [
                    2465,
                    2658,
                    2468,
                    459,
                    2028,
                    463,
                    79,
                    2038,
                    2652
                ],
                "msg": [
                    1856,
                    641,
                    1984,
                    645,
                    83,
                    85,
                    87,
                    89,
                    1852,
                    1983
                ],
                "self.categories": [
                    1665,
                    1282,
                    1283,
                    516,
                    1921,
                    1922,
                    1925,
                    1936,
                    1937,
                    2192,
                    2077,
                    1453,
                    1198,
                    1849,
                    1850,
                    2108,
                    1733,
                    1735,
                    1481,
                    1482,
                    1483,
                    1484,
                    1742,
                    1361,
                    1745,
                    84,
                    1364,
                    86,
                    1751,
                    88,
                    2005,
                    733,
                    95,
                    1760,
                    97,
                    1257,
                    1258,
                    2411,
                    749,
                    110,
                    111,
                    2157,
                    2034,
                    2036,
                    2296,
                    1659,
                    2044,
                    2301,
                    1919
                ],
                "other.categories": [
                    2296,
                    84,
                    86,
                    88,
                    2301,
                    95
                ],
                "all": [
                    2048,
                    1742,
                    86
                ],
                "set": [
                    1024,
                    1074,
                    1075,
                    982,
                    88
                ],
                "other.ordered": [
                    91
                ],
                "self.categories.equals": [
                    2296,
                    2034,
                    95
                ],
                "other_codes": [
                    97,
                    99,
                    102,
                    103,
                    2298,
                    2300,
                    2303
                ],
                "_get_codes_for_values": [
                    97,
                    385,
                    1745,
                    1735
                ],
                "other._codes": [
                    2298,
                    99
                ],
                "f": [
                    101,
                    102
                ],
                "getattr": [
                    101,
                    134,
                    2119,
                    2537,
                    112,
                    2520,
                    2555,
                    2556
                ],
                "self._codes": [
                    1282,
                    2181,
                    1672,
                    2184,
                    394,
                    2187,
                    2191,
                    671,
                    2081,
                    2211,
                    2213,
                    2214,
                    2348,
                    1453,
                    1328,
                    1201,
                    1206,
                    1208,
                    1978,
                    1980,
                    1726,
                    1858,
                    324,
                    1353,
                    1482,
                    1483,
                    1484,
                    1229,
                    1993,
                    2001,
                    1875,
                    1497,
                    474,
                    2009,
                    1633,
                    2146,
                    1891,
                    1636,
                    101,
                    2149,
                    103,
                    2152,
                    1385,
                    2156,
                    112,
                    116,
                    509,
                    2303
                ],
                "ret": [
                    1282,
                    1284,
                    1285,
                    102,
                    1289,
                    106,
                    107,
                    1290,
                    1385,
                    1386,
                    112,
                    117,
                    118
                ],
                "mask": [
                    1760,
                    103,
                    104,
                    106,
                    1454,
                    1455,
                    1458,
                    116,
                    117,
                    1461,
                    1655,
                    1656,
                    1754,
                    1658,
                    1755,
                    1758
                ],
                "mask.any": [
                    104,
                    1755,
                    1656
                ],
                "is_scalar": [
                    1888,
                    109,
                    1360,
                    2619,
                    191
                ],
                "i": [
                    111,
                    112,
                    2001,
                    2002,
                    2005
                ],
                "self.categories.get_loc": [
                    1760,
                    1258,
                    111,
                    1361,
                    1364,
                    1850
                ],
                "np.zeros": [
                    121
                ],
                "np": [
                    1664,
                    1284,
                    389,
                    134,
                    2055,
                    1289,
                    651,
                    653,
                    2189,
                    2578,
                    1684,
                    2083,
                    1455,
                    1841,
                    1459,
                    1461,
                    1206,
                    1207,
                    1208,
                    1462,
                    1720,
                    454,
                    1992,
                    330,
                    1482,
                    1484,
                    1485,
                    2000,
                    1746,
                    2003,
                    340,
                    1365,
                    1114,
                    2651,
                    350,
                    2270,
                    1253,
                    1254,
                    2154,
                    2410,
                    502,
                    1271,
                    121,
                    1658,
                    123,
                    1660,
                    2303
                ],
                "bool": [
                    1883,
                    1862,
                    1770,
                    2415,
                    121,
                    123,
                    477
                ],
                "np.ones": [
                    123,
                    389
                ],
                "np.array": [
                    1664,
                    134,
                    330,
                    1485,
                    1365,
                    502,
                    1660
                ],
                "type": [
                    1859,
                    2404,
                    1765,
                    138,
                    734
                ],
                "unpack_zerodim_and_defer": [
                    68
                ],
                "func.__name__": [
                    142
                ],
                "func": [
                    2119,
                    2120,
                    2122,
                    142,
                    144
                ],
                "hash": [
                    176,
                    2320
                ],
                "key": [
                    1888,
                    2080,
                    2081,
                    1891,
                    2055,
                    2059,
                    2062,
                    2063,
                    176,
                    2000,
                    2001,
                    2065,
                    2066,
                    2067,
                    182,
                    2007,
                    2072,
                    2009
                ],
                "loc": [
                    192,
                    195,
                    182,
                    191
                ],
                "cat.categories.get_loc": [
                    182
                ],
                "cat.categories": [
                    2659,
                    937,
                    939,
                    2444,
                    941,
                    2448,
                    2450,
                    182,
                    856,
                    2271
                ],
                "cat": [
                    1032,
                    1033,
                    1034,
                    2443,
                    1036,
                    2444,
                    2446,
                    2448,
                    2450,
                    2452,
                    2453,
                    2456,
                    2458,
                    934,
                    937,
                    939,
                    941,
                    1453,
                    943,
                    1454,
                    182,
                    847,
                    849,
                    850,
                    853,
                    2262,
                    856,
                    1113,
                    858,
                    859,
                    1114,
                    2265,
                    862,
                    1119,
                    2271,
                    2658,
                    1123,
                    1124,
                    2659,
                    2660,
                    1127,
                    750,
                    751,
                    753
                ],
                "KeyError": [
                    183
                ],
                "container": [
                    192,
                    195
                ],
                "any": [
                    1889,
                    195,
                    649,
                    500,
                    1079
                ],
                "loc_": [
                    195
                ],
                "_codes_doc": [
                    681,
                    198
                ],
                "ExtensionArray": [
                    209
                ],
                "PandasObject": [
                    209,
                    2481,
                    309
                ],
                "__array_priority__": [
                    306
                ],
                "_dtype": [
                    307
                ],
                "CategoricalDtype": [
                    1030,
                    1314,
                    429,
                    558,
                    307,
                    316,
                    447,
                    705,
                    707,
                    585,
                    587,
                    845,
                    335,
                    720,
                    1120,
                    490,
                    749,
                    374,
                    637
                ],
                "_deprecations": [
                    309
                ],
                "PandasObject._deprecations": [
                    309
                ],
                "frozenset": [
                    309
                ],
                "_typ": [
                    310
                ],
                "dtype": [
                    640,
                    385,
                    1283,
                    1284,
                    637,
                    1670,
                    1671,
                    393,
                    394,
                    1936,
                    657,
                    1937,
                    660,
                    558,
                    563,
                    1843,
                    565,
                    567,
                    569,
                    316,
                    317,
                    577,
                    1859,
                    324,
                    325,
                    585,
                    587,
                    334,
                    335,
                    463,
                    590,
                    733,
                    734,
                    353,
                    358,
                    489,
                    490,
                    493,
                    495,
                    497,
                    498,
                    499,
                    500,
                    374,
                    502,
                    381,
                    638
                ],
                "CategoricalDtype._from_values_or_dtype": [
                    316,
                    637
                ],
                "values": [
                    1664,
                    385,
                    1665,
                    1667,
                    2562,
                    2563,
                    2565,
                    2568,
                    2571,
                    1658,
                    2555,
                    317,
                    2557,
                    1731,
                    324,
                    1732,
                    1735,
                    333,
                    335,
                    336,
                    339,
                    340,
                    341,
                    2644,
                    2647,
                    344,
                    2648,
                    2651,
                    348,
                    2652,
                    350,
                    351,
                    2653,
                    2658,
                    355,
                    2403,
                    357,
                    2404,
                    2409,
                    2410,
                    2411,
                    1654,
                    1655,
                    376,
                    1657,
                    378,
                    2550,
                    1660,
                    381
                ],
                "categories": [
                    2561,
                    2566,
                    2569,
                    2572,
                    2448,
                    2449,
                    2451,
                    2455,
                    2456,
                    427,
                    429,
                    2108,
                    317,
                    2110,
                    577,
                    578,
                    705,
                    707,
                    2114,
                    582,
                    584,
                    585,
                    2652,
                    355,
                    2659,
                    357,
                    2661,
                    374,
                    2550,
                    2556,
                    2557,
                    638
                ],
                "ordered": [
                    843,
                    844,
                    845,
                    986,
                    317,
                    638
                ],
                "fastpath": [
                    704,
                    323,
                    709
                ],
                "coerce_indexer_dtype": [
                    1124,
                    324,
                    394,
                    1034,
                    2605,
                    2575
                ],
                "dtype.categories": [
                    640,
                    353,
                    385,
                    577,
                    324,
                    733,
                    394,
                    334,
                    558,
                    657,
                    563,
                    565,
                    567,
                    569,
                    381
                ],
                "self._dtype": [
                    451,
                    325,
                    393,
                    718,
                    437
                ],
                "self._dtype.update_dtype": [
                    393,
                    325
                ],
                "null_mask": [
                    387,
                    389,
                    390,
                    330,
                    2410,
                    2412,
                    348,
                    349,
                    350
                ],
                "is_categorical_dtype": [
                    489,
                    333,
                    2516,
                    2647,
                    376
                ],
                "values.categories": [
                    2651,
                    335
                ],
                "dtype.ordered": [
                    374,
                    358,
                    335
                ],
                "ABCIndexClass": [
                    336
                ],
                "ABCSeries": [
                    336,
                    378,
                    1741
                ],
                "maybe_infer_to_datetimelike": [
                    339
                ],
                "np.ndarray": [
                    2083,
                    454,
                    1992,
                    2578,
                    340,
                    1271
                ],
                "_convert_to_list_like": [
                    341
                ],
                "sanitize_dtype": [
                    345,
                    347,
                    351
                ],
                "isna": [
                    1888,
                    2048,
                    1255,
                    649,
                    1751,
                    2410,
                    1388,
                    2445,
                    1742,
                    1845,
                    1079,
                    348,
                    1757
                ],
                "null_mask.any": [
                    387,
                    349
                ],
                "idx": [
                    1114,
                    1116,
                    1117,
                    350,
                    1119
                ],
                "np.where": [
                    1746,
                    1461,
                    350
                ],
                "sanitize_array": [
                    2409,
                    351
                ],
                "codes": [
                    385,
                    389,
                    390,
                    391,
                    647,
                    649,
                    394,
                    651,
                    653,
                    654,
                    657,
                    660,
                    2211,
                    2214,
                    2215,
                    2216,
                    681,
                    2601,
                    2348,
                    2349,
                    2604,
                    2608,
                    1726,
                    578,
                    1858,
                    1859,
                    1735,
                    584,
                    588,
                    590,
                    1361,
                    1362,
                    1746,
                    1747,
                    1365,
                    1366,
                    855,
                    858,
                    1754,
                    1756,
                    733,
                    734,
                    1758,
                    1760,
                    2653,
                    1250,
                    355,
                    1251,
                    357,
                    1253,
                    1254,
                    1768,
                    2274,
                    2275,
                    2660,
                    2661,
                    1265,
                    1267,
                    1269,
                    380
                ],
                "factorize": [
                    355,
                    357
                ],
                "NotImplementedError": [
                    1252,
                    1671,
                    1416,
                    369,
                    1722
                ],
                "old_codes": [
                    377,
                    381
                ],
                "values._values.codes": [
                    378
                ],
                "values._values": [
                    378
                ],
                "values.codes": [
                    378,
                    2651,
                    2653
                ],
                "_recode_for_categories": [
                    578,
                    584,
                    2035,
                    2300,
                    855,
                    380,
                    733
                ],
                "values.dtype.categories": [
                    381
                ],
                "values.dtype": [
                    2652,
                    381,
                    2550
                ],
                "full_codes": [
                    389,
                    390,
                    391
                ],
                "null_mask.shape": [
                    389
                ],
                "codes.dtype": [
                    389
                ],
                "self.dtype.categories": [
                    1024,
                    1029,
                    710,
                    711,
                    425,
                    1353,
                    430,
                    1328,
                    1075,
                    1076,
                    982
                ],
                "self.dtype": [
                    1024,
                    1029,
                    2182,
                    1672,
                    2320,
                    1303,
                    2216,
                    425,
                    2349,
                    430,
                    1328,
                    1075,
                    1076,
                    1843,
                    1464,
                    444,
                    710,
                    711,
                    1353,
                    844,
                    982,
                    474,
                    2013,
                    2147,
                    1636,
                    1768,
                    493,
                    495,
                    1269,
                    2038
                ],
                "property": [
                    1218,
                    453,
                    1319,
                    457,
                    681,
                    396,
                    1326,
                    2352,
                    439,
                    2525,
                    446
                ],
                "new_dtype": [
                    1030,
                    1033,
                    1034,
                    429,
                    431,
                    437,
                    705,
                    707,
                    711,
                    845,
                    718,
                    849,
                    853,
                    856,
                    859,
                    1120,
                    1123,
                    1124,
                    749,
                    751
                ],
                "new_dtype.categories": [
                    1124,
                    711,
                    1034,
                    431,
                    849,
                    853,
                    856
                ],
                "categories.setter": [
                    427
                ],
                "self.dtype.ordered": [
                    444,
                    844
                ],
                "Ordered": [
                    440
                ],
                "self.codes": [
                    1250,
                    2274,
                    455,
                    2413,
                    1362,
                    1365,
                    1366,
                    1654,
                    2261,
                    733,
                    2110
                ],
                "Type": [
                    458
                ],
                "scalars": [
                    463
                ],
                "classmethod": [
                    2277,
                    461,
                    592,
                    530,
                    2356
                ],
                "self._constructor": [
                    1635,
                    1768,
                    1672,
                    2216,
                    2349,
                    1464,
                    473,
                    2013
                ],
                "self._codes.copy": [
                    1201,
                    474,
                    1497
                ],
                "Dtype": [
                    477
                ],
                "cast": [
                    490
                ],
                "Union": [
                    490
                ],
                "str": [
                    1893,
                    1960,
                    490,
                    1931,
                    1964,
                    1936,
                    1906,
                    1971,
                    1973
                ],
                "self.dtype.update_dtype": [
                    493
                ],
                "copy": [
                    499,
                    494,
                    502
                ],
                "self.copy": [
                    934,
                    1032,
                    2443,
                    494,
                    847,
                    750,
                    2262,
                    1113
                ],
                "self._set_dtype": [
                    497
                ],
                "is_extension_array_dtype": [
                    2557,
                    498,
                    1285,
                    647
                ],
                "array": [
                    499
                ],
                "is_integer_dtype": [
                    1483,
                    500,
                    654,
                    647
                ],
                "self.isna": [
                    1408,
                    1889,
                    500
                ],
                "ArrayLike": [
                    477
                ],
                "self._codes.size": [
                    509
                ],
                "cache_readonly": [
                    504,
                    511
                ],
                "int": [
                    512,
                    2055,
                    1871,
                    2000,
                    505
                ],
                "self.categories.itemsize": [
                    516
                ],
                "list": [
                    1029,
                    526,
                    2615,
                    2618,
                    2686
                ],
                "List": [
                    518
                ],
                "Scalar": [
                    518
                ],
                "to_list": [
                    528
                ],
                "tolist": [
                    528,
                    1881
                ],
                "cats": [
                    578,
                    579,
                    581,
                    582,
                    587,
                    556,
                    2572,
                    2573,
                    2574,
                    2575,
                    564,
                    566,
                    568,
                    573
                ],
                "Index": [
                    556,
                    2044
                ],
                "inferred_categories": [
                    566,
                    568,
                    556,
                    564
                ],
                "known_categories": [
                    561,
                    557,
                    575
                ],
                "dtype.categories.is_numeric": [
                    563
                ],
                "to_numeric": [
                    564
                ],
                "is_datetime64_dtype": [
                    565
                ],
                "to_datetime": [
                    566
                ],
                "is_timedelta64_dtype": [
                    567
                ],
                "to_timedelta": [
                    568
                ],
                "dtype.categories.is_boolean": [
                    569
                ],
                "true_values": [
                    570,
                    571,
                    573
                ],
                "cats.isin": [
                    573
                ],
                "inferred_codes": [
                    584,
                    578,
                    588
                ],
                "cats.is_monotonic_increasing": [
                    579
                ],
                "unsorted": [
                    584,
                    581
                ],
                "cats.copy": [
                    581
                ],
                "cats.sort_values": [
                    582
                ],
                "cls": [
                    2561,
                    2562,
                    2563,
                    590,
                    660
                ],
                "codes.to_numpy": [
                    651
                ],
                "np.int64": [
                    651
                ],
                "np.asarray": [
                    1284,
                    1289,
                    2410,
                    653,
                    1841,
                    1684
                ],
                "codes.max": [
                    657
                ],
                "codes.min": [
                    657
                ],
                "v": [
                    672,
                    673,
                    1316,
                    1317,
                    671
                ],
                "self._codes.view": [
                    671
                ],
                "v.flags.writeable": [
                    672
                ],
                "v.flags": [
                    672
                ],
                "_get_codes": [
                    681
                ],
                "_set_codes": [
                    681
                ],
                "CategoricalDtype._from_fastpath": [
                    1120,
                    705
                ],
                "inplace": [
                    770,
                    771,
                    1032,
                    2442,
                    1035,
                    2443,
                    788,
                    789,
                    2457,
                    933,
                    934,
                    942,
                    1070,
                    1087,
                    842,
                    847,
                    981,
                    1112,
                    1113,
                    986,
                    1626,
                    861,
                    1632,
                    1126,
                    748,
                    750,
                    752,
                    1021
                ],
                "validate_bool_kwarg": [
                    770,
                    933,
                    842,
                    2442,
                    748,
                    1070,
                    788,
                    981,
                    1112,
                    1626,
                    1021
                ],
                "value": [
                    2445,
                    2450,
                    2451,
                    2455,
                    1715,
                    1716,
                    1719,
                    1720,
                    1732,
                    1741,
                    1742,
                    1360,
                    1361,
                    1745,
                    1364,
                    1750,
                    1751,
                    1757,
                    1760,
                    1765,
                    2025,
                    2028,
                    749,
                    2029,
                    2034,
                    2036,
                    2038,
                    2040
                ],
                "cat._dtype": [
                    1033,
                    859,
                    1123,
                    751
                ],
                "self.set_ordered": [
                    771,
                    789
                ],
                "new_categories": [
                    1024,
                    1029,
                    1030,
                    936,
                    937,
                    938,
                    939,
                    2602,
                    941,
                    1198,
                    2606,
                    1201,
                    1076,
                    1207,
                    1208,
                    1081,
                    1087,
                    845,
                    982,
                    986,
                    1119,
                    1121,
                    1022,
                    1023
                ],
                "rename": [
                    848
                ],
                "cat.dtype.categories": [
                    849,
                    850,
                    1119
                ],
                "cat.dtype": [
                    849,
                    850,
                    1119
                ],
                "cat._codes": [
                    1124,
                    1034,
                    2452,
                    853,
                    2265,
                    1114,
                    858
                ],
                "cat.codes": [
                    856,
                    2660
                ],
                "is_dict_like": [
                    936
                ],
                "new_categories.get": [
                    937
                ],
                "item": [
                    937,
                    939
                ],
                "callable": [
                    938
                ],
                "self.set_categories": [
                    986,
                    1086
                ],
                "already_included": [
                    1024,
                    1025,
                    1027
                ],
                "removals": [
                    1072,
                    1074,
                    1079,
                    1071
                ],
                "removal_set": [
                    1074,
                    1075,
                    1076
                ],
                "not_included": [
                    1080,
                    1083,
                    1075,
                    1084
                ],
                "c": [
                    1076
                ],
                "x": [
                    1080,
                    1081,
                    1364,
                    1928
                ],
                "notna": [
                    1080,
                    1081,
                    1410
                ],
                "inv": [
                    1114,
                    1124,
                    1117
                ],
                "np.unique": [
                    1114
                ],
                "idx.size": [
                    1116
                ],
                "cat.dtype.categories.take": [
                    1119
                ],
                "self.categories.map": [
                    1198
                ],
                "mapper": [
                    1198
                ],
                "self.from_codes": [
                    1200,
                    1269
                ],
                "np.any": [
                    1206
                ],
                "new_categories.insert": [
                    1207
                ],
                "np.nan": [
                    1482,
                    2154,
                    1484,
                    2189,
                    2003,
                    1207,
                    1720,
                    1658
                ],
                "np.take": [
                    1208
                ],
                "__eq__": [
                    1210
                ],
                "_cat_compare_op": [
                    1210,
                    1211,
                    1212,
                    1213,
                    1214,
                    1215
                ],
                "operator.eq": [
                    1210
                ],
                "operator": [
                    1210,
                    1211,
                    1212,
                    1213,
                    1214,
                    1215
                ],
                "__ne__": [
                    1211
                ],
                "operator.ne": [
                    1211
                ],
                "__lt__": [
                    1212
                ],
                "operator.lt": [
                    1212
                ],
                "__gt__": [
                    1213
                ],
                "operator.gt": [
                    1213
                ],
                "__le__": [
                    1214
                ],
                "operator.le": [
                    1214
                ],
                "__ge__": [
                    1215
                ],
                "operator.ge": [
                    1215
                ],
                "tuple": [
                    2347,
                    2059,
                    1229,
                    2617
                ],
                "codes.ndim": [
                    1251
                ],
                "np.prod": [
                    1253
                ],
                "codes.shape": [
                    1253
                ],
                "periods": [
                    1253,
                    1254,
                    1264,
                    1265,
                    1267
                ],
                "np.roll": [
                    1254
                ],
                "ensure_platform_int": [
                    1254
                ],
                "fill_value": [
                    1858,
                    1255,
                    1256,
                    1257,
                    1258,
                    1261,
                    1869,
                    1265,
                    1267,
                    1845,
                    1846,
                    1849,
                    1850,
                    1853
                ],
                "take_1d": [
                    2608,
                    1282
                ],
                "self.categories.values": [
                    1282
                ],
                "is_dtype_equal": [
                    1283,
                    2029,
                    2550
                ],
                "self.categories.dtype": [
                    1936,
                    1283,
                    1733
                ],
                "result": [
                    1294,
                    1297,
                    1298,
                    1428,
                    1430,
                    2338,
                    2339,
                    2340,
                    2342,
                    1970,
                    1971,
                    1979,
                    1981,
                    1984,
                    1986,
                    1859,
                    1860,
                    2114,
                    2115,
                    2009,
                    2010,
                    2011,
                    2012,
                    2013,
                    1902,
                    1904,
                    1906
                ],
                "ops.maybe_dispatch_ufunc_to_dunder_op": [
                    1294
                ],
                "ops": [
                    1294
                ],
                "ufunc": [
                    1304,
                    1295
                ],
                "method": [
                    1729,
                    1732,
                    2537,
                    2538,
                    1295,
                    1715,
                    1716
                ],
                "inputs": [
                    1295
                ],
                "kwargs": [
                    2122,
                    2538,
                    1550,
                    1295
                ],
                "NotImplemented": [
                    1297
                ],
                "ufunc.__name__": [
                    1304
                ],
                "state": [
                    1313,
                    1314,
                    1316,
                    1309
                ],
                "dict": [
                    2114,
                    2347,
                    1309
                ],
                "Exception": [
                    1310
                ],
                "k": [
                    1316,
                    1317
                ],
                "state.items": [
                    1316
                ],
                "setattr": [
                    2523,
                    1317
                ],
                "self._codes.nbytes": [
                    1328,
                    1353
                ],
                "self.dtype.categories.values.nbytes": [
                    1328
                ],
                "self.dtype.categories.values": [
                    1328
                ],
                "self.dtype.categories.memory_usage": [
                    1353
                ],
                "deep": [
                    1353
                ],
                "self.codes.dtype.type": [
                    1362
                ],
                "self.codes.dtype": [
                    1362,
                    1365
                ],
                "locs": [
                    1364,
                    1365
                ],
                "self.codes.searchsorted": [
                    1366
                ],
                "side": [
                    1366
                ],
                "sorter": [
                    1366
                ],
                "Substitution": [
                    2344,
                    1355
                ],
                "Appender": [
                    2345,
                    1356
                ],
                "_shared_docs": [
                    1356
                ],
                "isnull": [
                    1388
                ],
                "notnull": [
                    1410
                ],
                "self.notna": [
                    1428
                ],
                "code": [
                    1458,
                    1453,
                    1454,
                    1461
                ],
                "ncat": [
                    1459,
                    1461,
                    1454,
                    1455
                ],
                "ix": [
                    1464,
                    1466,
                    1462,
                    1455
                ],
                "clean": [
                    1457,
                    1458,
                    1455
                ],
                "np.arange": [
                    2651,
                    1455
                ],
                "mask.all": [
                    1455
                ],
                "dropna": [
                    1457,
                    2212,
                    2215
                ],
                "obs": [
                    1458,
                    1459
                ],
                "count": [
                    1466,
                    1459,
                    1461
                ],
                "np.bincount": [
                    1459,
                    1461
                ],
                "np.append": [
                    1462
                ],
                "Series": [
                    1665,
                    1466,
                    2532,
                    2540
                ],
                "CategoricalIndex": [
                    1466
                ],
                "needs_i8_conversion": [
                    1481
                ],
                "self.categories.take": [
                    1482
                ],
                "take": [
                    1858,
                    1484
                ],
                "self.categories.astype": [
                    1484
                ],
                "argsort": [
                    1550
                ],
                "super": [
                    1550
                ],
                "args": [
                    2538,
                    1550
                ],
                "ascending": [
                    1630,
                    1550
                ],
                "kind": [
                    1550
                ],
                "na_position": [
                    1627,
                    1628,
                    1630
                ],
                "repr": [
                    1628
                ],
                "sorted_idx": [
                    1633,
                    1636,
                    1630
                ],
                "nargsort": [
                    1630
                ],
                "values.astype": [
                    1657
                ],
                "self.categories.is_numeric": [
                    1659
                ],
                "self.rename_categories": [
                    1665
                ],
                "rank": [
                    1665
                ],
                "validate_fillna_kwargs": [
                    1715
                ],
                "limit": [
                    1721
                ],
                "reshape": [
                    1731
                ],
                "self.to_dense": [
                    1731
                ],
                "astype": [
                    1732
                ],
                "interpolate_2d": [
                    1732
                ],
                "value.isin": [
                    1742
                ],
                "values_codes": [
                    1745,
                    1747
                ],
                "indexer": [
                    1858,
                    1992,
                    1993,
                    1994,
                    1869,
                    2605,
                    2608,
                    1841,
                    1746,
                    1747
                ],
                "is_hashable": [
                    1750
                ],
                "codes.copy": [
                    2608,
                    2601,
                    1756,
                    2604
                ],
                "__name__": [
                    2404,
                    1765
                ],
                "np.intp": [
                    1841
                ],
                "allow_fill": [
                    1858,
                    1869,
                    1847
                ],
                "from_codes": [
                    1859
                ],
                "warn": [
                    1864
                ],
                "FutureWarning": [
                    1866
                ],
                "self.take": [
                    1869
                ],
                "iter": [
                    1881
                ],
                "self._internal_get_values": [
                    1881
                ],
                "contains": [
                    1891
                ],
                "num": [
                    1920,
                    1921,
                    1922,
                    1898,
                    1899,
                    1900
                ],
                "max_vals": [
                    1898,
                    1900
                ],
                "head": [
                    1921,
                    1899,
                    1923,
                    1902
                ],
                "_get_repr": [
                    1899,
                    1900
                ],
                "tail": [
                    1922,
                    1923,
                    1900,
                    1902
                ],
                "footer": [
                    1968,
                    1903
                ],
                "self._repr_footer": [
                    1904
                ],
                "max_categories": [
                    1912,
                    1920,
                    1919
                ],
                "get_option": [
                    1914,
                    1915,
                    1939
                ],
                "fmt.format_array": [
                    1921,
                    1922,
                    1925
                ],
                "fmt": [
                    1921,
                    1922,
                    1925,
                    1967
                ],
                "category_strs": [
                    1923,
                    1925,
                    1928,
                    1929,
                    1935,
                    1948
                ],
                "x.strip": [
                    1928
                ],
                "self._repr_categories": [
                    1935
                ],
                "levheader": [
                    1958,
                    1937,
                    1945,
                    1950,
                    1951
                ],
                "width": [
                    1938,
                    1939
                ],
                "height": [
                    1938
                ],
                "get_terminal_size": [
                    1938
                ],
                "max_width": [
                    1939,
                    1949,
                    1942
                ],
                "console.in_ipython_frontend": [
                    1940
                ],
                "console": [
                    1940
                ],
                "levstring": [
                    1953,
                    1955,
                    1958,
                    1943,
                    1950
                ],
                "start": [
                    1944,
                    2113,
                    1956,
                    1952
                ],
                "cur_col_len": [
                    1945,
                    1954,
                    1949,
                    1951
                ],
                "sep_len": [
                    1946,
                    1949
                ],
                "sep": [
                    1953,
                    1946,
                    1947
                ],
                "linesep": [
                    1947,
                    1950
                ],
                "sep.rstrip": [
                    1947
                ],
                "val": [
                    1954,
                    1955,
                    1948,
                    1949
                ],
                "levstring.replace": [
                    1958
                ],
                "info": [
                    1961,
                    1962
                ],
                "self._repr_categories_info": [
                    1961
                ],
                "formatter": [
                    1970,
                    1967
                ],
                "fmt.CategoricalFormatter": [
                    1967
                ],
                "length": [
                    1968
                ],
                "na_rep": [
                    1968
                ],
                "formatter.to_string": [
                    1970
                ],
                "_maxlen": [
                    1977,
                    1978,
                    1979,
                    1981
                ],
                "self._tidy_repr": [
                    1979
                ],
                "self._get_repr": [
                    1981,
                    1983
                ],
                "replace": [
                    1983
                ],
                "indexer.dtype.kind": [
                    1992
                ],
                "indexer.dtype": [
                    1992
                ],
                "indexer.astype": [
                    1993
                ],
                "self._codes.dtype": [
                    1993
                ],
                "np.integer": [
                    2000,
                    2055
                ],
                "check_array_indexer": [
                    2080,
                    2007
                ],
                "result.ndim": [
                    2010
                ],
                "deprecate_ndim_indexing": [
                    2011
                ],
                "extract_array": [
                    2648,
                    2025
                ],
                "value.categories": [
                    2034,
                    2036
                ],
                "new_codes": [
                    2608,
                    2609,
                    2035,
                    2038
                ],
                "value.codes": [
                    2036
                ],
                "Categorical.from_codes": [
                    2652,
                    2038
                ],
                "rvalue": [
                    2040,
                    2044,
                    2077
                ],
                "to_add": [
                    2048,
                    2044
                ],
                "difference": [
                    2044
                ],
                "com.is_null_slice": [
                    2063
                ],
                "com": [
                    2063
                ],
                "AssertionError": [
                    2064,
                    2069
                ],
                "slice": [
                    2072
                ],
                "lindexer": [
                    2081,
                    2077,
                    2078
                ],
                "self.categories.get_indexer": [
                    2411,
                    2077
                ],
                "self._maybe_coerce_indexer": [
                    2078
                ],
                "r": [
                    2113,
                    2109
                ],
                "counts": [
                    2112,
                    2113,
                    2338,
                    2109,
                    2333,
                    2334
                ],
                "libalgos.groupsort_indexer": [
                    2109
                ],
                "libalgos": [
                    2109
                ],
                "self.codes.astype": [
                    2274,
                    2110
                ],
                "categories.size": [
                    2110
                ],
                "counts.cumsum": [
                    2112
                ],
                "_result": [
                    2113,
                    2114
                ],
                "end": [
                    2113
                ],
                "zip": [
                    2113,
                    2114,
                    2686
                ],
                "Dict": [
                    2083
                ],
                "Hashable": [
                    2083
                ],
                "name": [
                    2119,
                    2121,
                    2537,
                    2520,
                    2523
                ],
                "self.check_for_ordered": [
                    2144,
                    2179
                ],
                "self.dtype.na_value": [
                    2147,
                    2182
                ],
                "good": [
                    2149,
                    2150,
                    2213,
                    2152,
                    2185,
                    2184,
                    2187,
                    2214
                ],
                "good.all": [
                    2185,
                    2150
                ],
                "skipna": [
                    2186,
                    2151
                ],
                "pointer": [
                    2152,
                    2187,
                    2156,
                    2157,
                    2191,
                    2192
                ],
                "min": [
                    2152
                ],
                "self._codes.min": [
                    2156
                ],
                "deprecate_kwarg": [
                    2124,
                    2159
                ],
                "max": [
                    2187
                ],
                "self._codes.max": [
                    2191
                ],
                "sorted": [
                    2215
                ],
                "htable.mode_int64": [
                    2215
                ],
                "htable": [
                    2215
                ],
                "ensure_int64": [
                    2215
                ],
                "unique_codes": [
                    2265,
                    2268,
                    2261
                ],
                "unique1d": [
                    2261
                ],
                "take_codes": [
                    2268,
                    2270,
                    2271
                ],
                "np.sort": [
                    2270
                ],
                "cat.set_categories": [
                    2271
                ],
                "cat.categories.take": [
                    2271
                ],
                "original._constructor": [
                    2279
                ],
                "original": [
                    2280,
                    2279
                ],
                "original.categories.take": [
                    2280
                ],
                "original.categories": [
                    2280
                ],
                "uniques": [
                    2280
                ],
                "original.dtype": [
                    2280
                ],
                "self.is_dtype_equal": [
                    2295
                ],
                "other.codes": [
                    2301
                ],
                "np.array_equal": [
                    2303
                ],
                "other.dtype": [
                    2320
                ],
                "AttributeError": [
                    2321,
                    2517
                ],
                "self.value_counts": [
                    2333
                ],
                "freqs": [
                    2338,
                    2334
                ],
                "float": [
                    2334
                ],
                "counts.sum": [
                    2334
                ],
                "concat": [
                    2338
                ],
                "result.columns": [
                    2339
                ],
                "result.index.name": [
                    2340
                ],
                "result.index": [
                    2340
                ],
                "nv.validate_repeat": [
                    2347
                ],
                "nv": [
                    2347
                ],
                "axis": [
                    2347
                ],
                "self._codes.repeat": [
                    2348
                ],
                "repeats": [
                    2348
                ],
                "_extension_array_shared_docs": [
                    2345
                ],
                "concat_categorical": [
                    2360
                ],
                "to_concat": [
                    2360
                ],
                "values_type": [
                    2404,
                    2407
                ],
                "code_values": [
                    2411,
                    2412,
                    2413
                ],
                "algorithms.isin": [
                    2413
                ],
                "algorithms": [
                    2413
                ],
                "to_replace": [
                    2449,
                    2444,
                    2453,
                    2446
                ],
                "cat.remove_categories": [
                    2453,
                    2446
                ],
                "cat.categories.tolist": [
                    2448
                ],
                "index": [
                    2449,
                    2452,
                    2455
                ],
                "categories.index": [
                    2449,
                    2451
                ],
                "value_index": [
                    2451,
                    2452
                ],
                "cat.rename_categories": [
                    2456
                ],
                "PandasDelegate": [
                    2481
                ],
                "NoNewAttributesMixin": [
                    2481
                ],
                "self._validate": [
                    2508
                ],
                "data": [
                    2508,
                    2509,
                    2510,
                    2511,
                    2516
                ],
                "self._parent": [
                    2532,
                    2537,
                    2509,
                    2520,
                    2523
                ],
                "data.values": [
                    2509
                ],
                "self._index": [
                    2532,
                    2510,
                    2540
                ],
                "data.index": [
                    2510
                ],
                "self._name": [
                    2540,
                    2511
                ],
                "data.name": [
                    2511
                ],
                "self._freeze": [
                    2512
                ],
                "data.dtype": [
                    2516
                ],
                "staticmethod": [
                    2514
                ],
                "new_values": [
                    2523
                ],
                "self._parent.codes": [
                    2532
                ],
                "res": [
                    2538,
                    2539,
                    2540
                ],
                "delegate_names": [
                    2464,
                    2467
                ],
                "dtype_equal": [
                    2552,
                    2550
                ],
                "categories.dtype": [
                    2561,
                    2557,
                    2550
                ],
                "is_object_dtype": [
                    2557
                ],
                "categories.dtype.construct_array_type": [
                    2561
                ],
                "try_cast_to_ea": [
                    2562
                ],
                "ensure_object": [
                    2568,
                    2569,
                    2565,
                    2566
                ],
                "hash_klass": [
                    2571,
                    2573
                ],
                "vals": [
                    2571,
                    2575
                ],
                "_get_data_algo": [
                    2571,
                    2572
                ],
                "_": [
                    2572
                ],
                "t": [
                    2573,
                    2574,
                    2575
                ],
                "t.map_locations": [
                    2574
                ],
                "t.lookup": [
                    2575
                ],
                "old_categories": [
                    2602,
                    2606,
                    2599
                ],
                "new_categories.equals": [
                    2602
                ],
                "new_categories.get_indexer": [
                    2606
                ],
                "hasattr": [
                    2613
                ],
                "list_like": [
                    2613,
                    2614,
                    2615,
                    2616,
                    2617,
                    2618,
                    2619,
                    2620,
                    2623
                ],
                "is_sequence": [
                    2617
                ],
                "is_iterator": [
                    2617
                ],
                "cat_codes": [
                    2651,
                    2652
                ],
                "values.codes.dtype": [
                    2651
                ],
                "iterables": [
                    2683,
                    2686
                ],
                "map": [
                    2686
                ],
                "factorize_from_iterable": [
                    2686
                ],
                "it": [
                    2686
                ]
            },
            "filtered_variables_in_file": {
                "opname": [
                    66,
                    68,
                    101,
                    133,
                    134,
                    137,
                    75,
                    142,
                    112,
                    114,
                    120,
                    122,
                    126
                ],
                "op.__name__": [
                    66
                ],
                "op": [
                    66,
                    1491
                ],
                "is_list_like": [
                    2403,
                    70,
                    1071,
                    2644,
                    2040,
                    1022
                ],
                "other": [
                    134,
                    138,
                    2320,
                    70,
                    79,
                    84,
                    86,
                    88,
                    91,
                    95,
                    97,
                    99,
                    109,
                    110,
                    111,
                    2295,
                    2296,
                    2298,
                    2301
                ],
                "self": [
                    1024,
                    516,
                    1029,
                    1030,
                    1032,
                    526,
                    2077,
                    2078,
                    2080,
                    2081,
                    1075,
                    1076,
                    2108,
                    1086,
                    1087,
                    2110,
                    70,
                    2119,
                    74,
                    84,
                    86,
                    88,
                    1113,
                    91,
                    1630,
                    95,
                    2144,
                    97,
                    1121,
                    1633,
                    1635,
                    101,
                    1636,
                    103,
                    2146,
                    2147,
                    2149,
                    2152,
                    2156,
                    2157,
                    110,
                    111,
                    112,
                    116,
                    1653,
                    1654,
                    121,
                    123,
                    1659,
                    1660,
                    1665,
                    2179,
                    2181,
                    134,
                    2182,
                    1672,
                    2184,
                    2187,
                    2191,
                    2192,
                    1684,
                    671,
                    2211,
                    2213,
                    2214,
                    2216,
                    1198,
                    1200,
                    1201,
                    1206,
                    1208,
                    1726,
                    705,
                    707,
                    1731,
                    1733,
                    710,
                    711,
                    1735,
                    1229,
                    718,
                    1742,
                    1745,
                    2261,
                    2262,
                    1751,
                    733,
                    734,
                    2269,
                    1760,
                    1250,
                    2274,
                    1768,
                    1257,
                    1258,
                    749,
                    750,
                    1269,
                    2295,
                    2296,
                    2301,
                    2303,
                    1282,
                    771,
                    1283,
                    1295,
                    2320,
                    789,
                    1303,
                    2333,
                    1317,
                    1324,
                    2348,
                    2349,
                    1328,
                    1843,
                    1849,
                    1850,
                    1858,
                    1859,
                    324,
                    325,
                    1353,
                    844,
                    1869,
                    847,
                    1361,
                    1362,
                    1875,
                    1364,
                    1365,
                    1366,
                    1881,
                    1889,
                    1891,
                    1385,
                    1899,
                    1900,
                    2411,
                    2413,
                    1904,
                    1919,
                    1408,
                    1921,
                    1922,
                    1925,
                    393,
                    394,
                    2443,
                    1935,
                    1936,
                    1937,
                    1428,
                    1946,
                    934,
                    425,
                    1961,
                    1962,
                    429,
                    430,
                    1453,
                    1968,
                    437,
                    1464,
                    1978,
                    1979,
                    444,
                    1980,
                    1981,
                    1983,
                    451,
                    455,
                    1481,
                    1482,
                    1483,
                    1484,
                    1485,
                    1993,
                    2508,
                    2509,
                    1489,
                    2001,
                    2510,
                    2511,
                    2005,
                    982,
                    2007,
                    2512,
                    473,
                    474,
                    986,
                    1497,
                    2009,
                    2013,
                    2520,
                    2523,
                    2532,
                    2537,
                    2540,
                    493,
                    494,
                    495,
                    496,
                    497,
                    2029,
                    499,
                    500,
                    2034,
                    502,
                    2036,
                    2038,
                    2044,
                    509
                ],
                "self.ordered": [
                    705,
                    1121,
                    707,
                    1030,
                    74,
                    429,
                    1201,
                    1489,
                    1653,
                    86,
                    2269,
                    1946,
                    91,
                    1087,
                    95
                ],
                "Categorical": [
                    2465,
                    2658,
                    2468,
                    459,
                    2028,
                    463,
                    79,
                    2038,
                    2652
                ],
                "msg": [
                    1856,
                    641,
                    1984,
                    645,
                    83,
                    85,
                    87,
                    89,
                    1852,
                    1983
                ],
                "self.categories": [
                    1665,
                    1282,
                    1283,
                    516,
                    1921,
                    1922,
                    1925,
                    1936,
                    1937,
                    2192,
                    2077,
                    1453,
                    1198,
                    1849,
                    1850,
                    2108,
                    1733,
                    1735,
                    1481,
                    1482,
                    1483,
                    1484,
                    1742,
                    1361,
                    1745,
                    84,
                    1364,
                    86,
                    1751,
                    88,
                    2005,
                    733,
                    95,
                    1760,
                    97,
                    1257,
                    1258,
                    2411,
                    749,
                    110,
                    111,
                    2157,
                    2034,
                    2036,
                    2296,
                    1659,
                    2044,
                    2301,
                    1919
                ],
                "other.categories": [
                    2296,
                    84,
                    86,
                    88,
                    2301,
                    95
                ],
                "other.ordered": [
                    91
                ],
                "self.categories.equals": [
                    2296,
                    2034,
                    95
                ],
                "other_codes": [
                    97,
                    99,
                    102,
                    103,
                    2298,
                    2300,
                    2303
                ],
                "_get_codes_for_values": [
                    97,
                    385,
                    1745,
                    1735
                ],
                "other._codes": [
                    2298,
                    99
                ],
                "f": [
                    101,
                    102
                ],
                "self._codes": [
                    1282,
                    2181,
                    1672,
                    2184,
                    394,
                    2187,
                    2191,
                    671,
                    2081,
                    2211,
                    2213,
                    2214,
                    2348,
                    1453,
                    1328,
                    1201,
                    1206,
                    1208,
                    1978,
                    1980,
                    1726,
                    1858,
                    324,
                    1353,
                    1482,
                    1483,
                    1484,
                    1229,
                    1993,
                    2001,
                    1875,
                    1497,
                    474,
                    2009,
                    1633,
                    2146,
                    1891,
                    1636,
                    101,
                    2149,
                    103,
                    2152,
                    1385,
                    2156,
                    112,
                    116,
                    509,
                    2303
                ],
                "ret": [
                    1282,
                    1284,
                    1285,
                    102,
                    1289,
                    106,
                    107,
                    1290,
                    1385,
                    1386,
                    112,
                    117,
                    118
                ],
                "mask": [
                    1760,
                    103,
                    104,
                    106,
                    1454,
                    1455,
                    1458,
                    116,
                    117,
                    1461,
                    1655,
                    1656,
                    1754,
                    1658,
                    1755,
                    1758
                ],
                "mask.any": [
                    104,
                    1755,
                    1656
                ],
                "is_scalar": [
                    1888,
                    109,
                    1360,
                    2619,
                    191
                ],
                "i": [
                    111,
                    112,
                    2001,
                    2002,
                    2005
                ],
                "self.categories.get_loc": [
                    1760,
                    1258,
                    111,
                    1361,
                    1364,
                    1850
                ],
                "np.zeros": [
                    121
                ],
                "np": [
                    1664,
                    1284,
                    389,
                    134,
                    2055,
                    1289,
                    651,
                    653,
                    2189,
                    2578,
                    1684,
                    2083,
                    1455,
                    1841,
                    1459,
                    1461,
                    1206,
                    1207,
                    1208,
                    1462,
                    1720,
                    454,
                    1992,
                    330,
                    1482,
                    1484,
                    1485,
                    2000,
                    1746,
                    2003,
                    340,
                    1365,
                    1114,
                    2651,
                    350,
                    2270,
                    1253,
                    1254,
                    2154,
                    2410,
                    502,
                    1271,
                    121,
                    1658,
                    123,
                    1660,
                    2303
                ],
                "np.ones": [
                    123,
                    389
                ],
                "np.array": [
                    1664,
                    134,
                    330,
                    1485,
                    1365,
                    502,
                    1660
                ],
                "unpack_zerodim_and_defer": [
                    68
                ],
                "func.__name__": [
                    142
                ],
                "func": [
                    2119,
                    2120,
                    2122,
                    142,
                    144
                ],
                "key": [
                    1888,
                    2080,
                    2081,
                    1891,
                    2055,
                    2059,
                    2062,
                    2063,
                    176,
                    2000,
                    2001,
                    2065,
                    2066,
                    2067,
                    182,
                    2007,
                    2072,
                    2009
                ],
                "loc": [
                    192,
                    195,
                    182,
                    191
                ],
                "cat.categories.get_loc": [
                    182
                ],
                "cat.categories": [
                    2659,
                    937,
                    939,
                    2444,
                    941,
                    2448,
                    2450,
                    182,
                    856,
                    2271
                ],
                "cat": [
                    1032,
                    1033,
                    1034,
                    2443,
                    1036,
                    2444,
                    2446,
                    2448,
                    2450,
                    2452,
                    2453,
                    2456,
                    2458,
                    934,
                    937,
                    939,
                    941,
                    1453,
                    943,
                    1454,
                    182,
                    847,
                    849,
                    850,
                    853,
                    2262,
                    856,
                    1113,
                    858,
                    859,
                    1114,
                    2265,
                    862,
                    1119,
                    2271,
                    2658,
                    1123,
                    1124,
                    2659,
                    2660,
                    1127,
                    750,
                    751,
                    753
                ],
                "container": [
                    192,
                    195
                ],
                "loc_": [
                    195
                ],
                "_codes_doc": [
                    681,
                    198
                ],
                "ExtensionArray": [
                    209
                ],
                "PandasObject": [
                    209,
                    2481,
                    309
                ],
                "__array_priority__": [
                    306
                ],
                "_dtype": [
                    307
                ],
                "CategoricalDtype": [
                    1030,
                    1314,
                    429,
                    558,
                    307,
                    316,
                    447,
                    705,
                    707,
                    585,
                    587,
                    845,
                    335,
                    720,
                    1120,
                    490,
                    749,
                    374,
                    637
                ],
                "_deprecations": [
                    309
                ],
                "PandasObject._deprecations": [
                    309
                ],
                "_typ": [
                    310
                ],
                "dtype": [
                    640,
                    385,
                    1283,
                    1284,
                    637,
                    1670,
                    1671,
                    393,
                    394,
                    1936,
                    657,
                    1937,
                    660,
                    558,
                    563,
                    1843,
                    565,
                    567,
                    569,
                    316,
                    317,
                    577,
                    1859,
                    324,
                    325,
                    585,
                    587,
                    334,
                    335,
                    463,
                    590,
                    733,
                    734,
                    353,
                    358,
                    489,
                    490,
                    493,
                    495,
                    497,
                    498,
                    499,
                    500,
                    374,
                    502,
                    381,
                    638
                ],
                "CategoricalDtype._from_values_or_dtype": [
                    316,
                    637
                ],
                "values": [
                    1664,
                    385,
                    1665,
                    1667,
                    2562,
                    2563,
                    2565,
                    2568,
                    2571,
                    1658,
                    2555,
                    317,
                    2557,
                    1731,
                    324,
                    1732,
                    1735,
                    333,
                    335,
                    336,
                    339,
                    340,
                    341,
                    2644,
                    2647,
                    344,
                    2648,
                    2651,
                    348,
                    2652,
                    350,
                    351,
                    2653,
                    2658,
                    355,
                    2403,
                    357,
                    2404,
                    2409,
                    2410,
                    2411,
                    1654,
                    1655,
                    376,
                    1657,
                    378,
                    2550,
                    1660,
                    381
                ],
                "categories": [
                    2561,
                    2566,
                    2569,
                    2572,
                    2448,
                    2449,
                    2451,
                    2455,
                    2456,
                    427,
                    429,
                    2108,
                    317,
                    2110,
                    577,
                    578,
                    705,
                    707,
                    2114,
                    582,
                    584,
                    585,
                    2652,
                    355,
                    2659,
                    357,
                    2661,
                    374,
                    2550,
                    2556,
                    2557,
                    638
                ],
                "ordered": [
                    843,
                    844,
                    845,
                    986,
                    317,
                    638
                ],
                "fastpath": [
                    704,
                    323,
                    709
                ],
                "coerce_indexer_dtype": [
                    1124,
                    324,
                    394,
                    1034,
                    2605,
                    2575
                ],
                "dtype.categories": [
                    640,
                    353,
                    385,
                    577,
                    324,
                    733,
                    394,
                    334,
                    558,
                    657,
                    563,
                    565,
                    567,
                    569,
                    381
                ],
                "self._dtype": [
                    451,
                    325,
                    393,
                    718,
                    437
                ],
                "self._dtype.update_dtype": [
                    393,
                    325
                ],
                "null_mask": [
                    387,
                    389,
                    390,
                    330,
                    2410,
                    2412,
                    348,
                    349,
                    350
                ],
                "is_categorical_dtype": [
                    489,
                    333,
                    2516,
                    2647,
                    376
                ],
                "values.categories": [
                    2651,
                    335
                ],
                "dtype.ordered": [
                    374,
                    358,
                    335
                ],
                "ABCIndexClass": [
                    336
                ],
                "ABCSeries": [
                    336,
                    378,
                    1741
                ],
                "maybe_infer_to_datetimelike": [
                    339
                ],
                "np.ndarray": [
                    2083,
                    454,
                    1992,
                    2578,
                    340,
                    1271
                ],
                "_convert_to_list_like": [
                    341
                ],
                "sanitize_dtype": [
                    345,
                    347,
                    351
                ],
                "isna": [
                    1888,
                    2048,
                    1255,
                    649,
                    1751,
                    2410,
                    1388,
                    2445,
                    1742,
                    1845,
                    1079,
                    348,
                    1757
                ],
                "null_mask.any": [
                    387,
                    349
                ],
                "idx": [
                    1114,
                    1116,
                    1117,
                    350,
                    1119
                ],
                "np.where": [
                    1746,
                    1461,
                    350
                ],
                "sanitize_array": [
                    2409,
                    351
                ],
                "codes": [
                    385,
                    389,
                    390,
                    391,
                    647,
                    649,
                    394,
                    651,
                    653,
                    654,
                    657,
                    660,
                    2211,
                    2214,
                    2215,
                    2216,
                    681,
                    2601,
                    2348,
                    2349,
                    2604,
                    2608,
                    1726,
                    578,
                    1858,
                    1859,
                    1735,
                    584,
                    588,
                    590,
                    1361,
                    1362,
                    1746,
                    1747,
                    1365,
                    1366,
                    855,
                    858,
                    1754,
                    1756,
                    733,
                    734,
                    1758,
                    1760,
                    2653,
                    1250,
                    355,
                    1251,
                    357,
                    1253,
                    1254,
                    1768,
                    2274,
                    2275,
                    2660,
                    2661,
                    1265,
                    1267,
                    1269,
                    380
                ],
                "factorize": [
                    355,
                    357
                ],
                "old_codes": [
                    377,
                    381
                ],
                "values._values.codes": [
                    378
                ],
                "values._values": [
                    378
                ],
                "values.codes": [
                    378,
                    2651,
                    2653
                ],
                "_recode_for_categories": [
                    578,
                    584,
                    2035,
                    2300,
                    855,
                    380,
                    733
                ],
                "values.dtype.categories": [
                    381
                ],
                "values.dtype": [
                    2652,
                    381,
                    2550
                ],
                "full_codes": [
                    389,
                    390,
                    391
                ],
                "null_mask.shape": [
                    389
                ],
                "codes.dtype": [
                    389
                ],
                "self.dtype.categories": [
                    1024,
                    1029,
                    710,
                    711,
                    425,
                    1353,
                    430,
                    1328,
                    1075,
                    1076,
                    982
                ],
                "self.dtype": [
                    1024,
                    1029,
                    2182,
                    1672,
                    2320,
                    1303,
                    2216,
                    425,
                    2349,
                    430,
                    1328,
                    1075,
                    1076,
                    1843,
                    1464,
                    444,
                    710,
                    711,
                    1353,
                    844,
                    982,
                    474,
                    2013,
                    2147,
                    1636,
                    1768,
                    493,
                    495,
                    1269,
                    2038
                ],
                "new_dtype": [
                    1030,
                    1033,
                    1034,
                    429,
                    431,
                    437,
                    705,
                    707,
                    711,
                    845,
                    718,
                    849,
                    853,
                    856,
                    859,
                    1120,
                    1123,
                    1124,
                    749,
                    751
                ],
                "new_dtype.categories": [
                    1124,
                    711,
                    1034,
                    431,
                    849,
                    853,
                    856
                ],
                "categories.setter": [
                    427
                ],
                "self.dtype.ordered": [
                    444,
                    844
                ],
                "Ordered": [
                    440
                ],
                "self.codes": [
                    1250,
                    2274,
                    455,
                    2413,
                    1362,
                    1365,
                    1366,
                    1654,
                    2261,
                    733,
                    2110
                ],
                "Type": [
                    458
                ],
                "scalars": [
                    463
                ],
                "self._constructor": [
                    1635,
                    1768,
                    1672,
                    2216,
                    2349,
                    1464,
                    473,
                    2013
                ],
                "self._codes.copy": [
                    1201,
                    474,
                    1497
                ],
                "Dtype": [
                    477
                ],
                "cast": [
                    490
                ],
                "Union": [
                    490
                ],
                "self.dtype.update_dtype": [
                    493
                ],
                "copy": [
                    499,
                    494,
                    502
                ],
                "self.copy": [
                    934,
                    1032,
                    2443,
                    494,
                    847,
                    750,
                    2262,
                    1113
                ],
                "self._set_dtype": [
                    497
                ],
                "is_extension_array_dtype": [
                    2557,
                    498,
                    1285,
                    647
                ],
                "array": [
                    499
                ],
                "is_integer_dtype": [
                    1483,
                    500,
                    654,
                    647
                ],
                "self.isna": [
                    1408,
                    1889,
                    500
                ],
                "ArrayLike": [
                    477
                ],
                "self._codes.size": [
                    509
                ],
                "cache_readonly": [
                    504,
                    511
                ],
                "self.categories.itemsize": [
                    516
                ],
                "List": [
                    518
                ],
                "Scalar": [
                    518
                ],
                "to_list": [
                    528
                ],
                "tolist": [
                    528,
                    1881
                ],
                "cats": [
                    578,
                    579,
                    581,
                    582,
                    587,
                    556,
                    2572,
                    2573,
                    2574,
                    2575,
                    564,
                    566,
                    568,
                    573
                ],
                "Index": [
                    556,
                    2044
                ],
                "inferred_categories": [
                    566,
                    568,
                    556,
                    564
                ],
                "known_categories": [
                    561,
                    557,
                    575
                ],
                "dtype.categories.is_numeric": [
                    563
                ],
                "to_numeric": [
                    564
                ],
                "is_datetime64_dtype": [
                    565
                ],
                "to_datetime": [
                    566
                ],
                "is_timedelta64_dtype": [
                    567
                ],
                "to_timedelta": [
                    568
                ],
                "dtype.categories.is_boolean": [
                    569
                ],
                "true_values": [
                    570,
                    571,
                    573
                ],
                "cats.isin": [
                    573
                ],
                "inferred_codes": [
                    584,
                    578,
                    588
                ],
                "cats.is_monotonic_increasing": [
                    579
                ],
                "unsorted": [
                    584,
                    581
                ],
                "cats.copy": [
                    581
                ],
                "cats.sort_values": [
                    582
                ],
                "cls": [
                    2561,
                    2562,
                    2563,
                    590,
                    660
                ],
                "codes.to_numpy": [
                    651
                ],
                "np.int64": [
                    651
                ],
                "np.asarray": [
                    1284,
                    1289,
                    2410,
                    653,
                    1841,
                    1684
                ],
                "codes.max": [
                    657
                ],
                "codes.min": [
                    657
                ],
                "v": [
                    672,
                    673,
                    1316,
                    1317,
                    671
                ],
                "self._codes.view": [
                    671
                ],
                "v.flags.writeable": [
                    672
                ],
                "v.flags": [
                    672
                ],
                "_get_codes": [
                    681
                ],
                "_set_codes": [
                    681
                ],
                "CategoricalDtype._from_fastpath": [
                    1120,
                    705
                ],
                "inplace": [
                    770,
                    771,
                    1032,
                    2442,
                    1035,
                    2443,
                    788,
                    789,
                    2457,
                    933,
                    934,
                    942,
                    1070,
                    1087,
                    842,
                    847,
                    981,
                    1112,
                    1113,
                    986,
                    1626,
                    861,
                    1632,
                    1126,
                    748,
                    750,
                    752,
                    1021
                ],
                "validate_bool_kwarg": [
                    770,
                    933,
                    842,
                    2442,
                    748,
                    1070,
                    788,
                    981,
                    1112,
                    1626,
                    1021
                ],
                "value": [
                    2445,
                    2450,
                    2451,
                    2455,
                    1715,
                    1716,
                    1719,
                    1720,
                    1732,
                    1741,
                    1742,
                    1360,
                    1361,
                    1745,
                    1364,
                    1750,
                    1751,
                    1757,
                    1760,
                    1765,
                    2025,
                    2028,
                    749,
                    2029,
                    2034,
                    2036,
                    2038,
                    2040
                ],
                "cat._dtype": [
                    1033,
                    859,
                    1123,
                    751
                ],
                "self.set_ordered": [
                    771,
                    789
                ],
                "new_categories": [
                    1024,
                    1029,
                    1030,
                    936,
                    937,
                    938,
                    939,
                    2602,
                    941,
                    1198,
                    2606,
                    1201,
                    1076,
                    1207,
                    1208,
                    1081,
                    1087,
                    845,
                    982,
                    986,
                    1119,
                    1121,
                    1022,
                    1023
                ],
                "rename": [
                    848
                ],
                "cat.dtype.categories": [
                    849,
                    850,
                    1119
                ],
                "cat.dtype": [
                    849,
                    850,
                    1119
                ],
                "cat._codes": [
                    1124,
                    1034,
                    2452,
                    853,
                    2265,
                    1114,
                    858
                ],
                "cat.codes": [
                    856,
                    2660
                ],
                "is_dict_like": [
                    936
                ],
                "new_categories.get": [
                    937
                ],
                "item": [
                    937,
                    939
                ],
                "self.set_categories": [
                    986,
                    1086
                ],
                "already_included": [
                    1024,
                    1025,
                    1027
                ],
                "removals": [
                    1072,
                    1074,
                    1079,
                    1071
                ],
                "removal_set": [
                    1074,
                    1075,
                    1076
                ],
                "not_included": [
                    1080,
                    1083,
                    1075,
                    1084
                ],
                "c": [
                    1076
                ],
                "x": [
                    1080,
                    1081,
                    1364,
                    1928
                ],
                "notna": [
                    1080,
                    1081,
                    1410
                ],
                "inv": [
                    1114,
                    1124,
                    1117
                ],
                "np.unique": [
                    1114
                ],
                "idx.size": [
                    1116
                ],
                "cat.dtype.categories.take": [
                    1119
                ],
                "self.categories.map": [
                    1198
                ],
                "mapper": [
                    1198
                ],
                "self.from_codes": [
                    1200,
                    1269
                ],
                "np.any": [
                    1206
                ],
                "new_categories.insert": [
                    1207
                ],
                "np.nan": [
                    1482,
                    2154,
                    1484,
                    2189,
                    2003,
                    1207,
                    1720,
                    1658
                ],
                "np.take": [
                    1208
                ],
                "__eq__": [
                    1210
                ],
                "_cat_compare_op": [
                    1210,
                    1211,
                    1212,
                    1213,
                    1214,
                    1215
                ],
                "operator.eq": [
                    1210
                ],
                "operator": [
                    1210,
                    1211,
                    1212,
                    1213,
                    1214,
                    1215
                ],
                "__ne__": [
                    1211
                ],
                "operator.ne": [
                    1211
                ],
                "__lt__": [
                    1212
                ],
                "operator.lt": [
                    1212
                ],
                "__gt__": [
                    1213
                ],
                "operator.gt": [
                    1213
                ],
                "__le__": [
                    1214
                ],
                "operator.le": [
                    1214
                ],
                "__ge__": [
                    1215
                ],
                "operator.ge": [
                    1215
                ],
                "codes.ndim": [
                    1251
                ],
                "np.prod": [
                    1253
                ],
                "codes.shape": [
                    1253
                ],
                "periods": [
                    1253,
                    1254,
                    1264,
                    1265,
                    1267
                ],
                "np.roll": [
                    1254
                ],
                "ensure_platform_int": [
                    1254
                ],
                "fill_value": [
                    1858,
                    1255,
                    1256,
                    1257,
                    1258,
                    1261,
                    1869,
                    1265,
                    1267,
                    1845,
                    1846,
                    1849,
                    1850,
                    1853
                ],
                "take_1d": [
                    2608,
                    1282
                ],
                "self.categories.values": [
                    1282
                ],
                "is_dtype_equal": [
                    1283,
                    2029,
                    2550
                ],
                "self.categories.dtype": [
                    1936,
                    1283,
                    1733
                ],
                "result": [
                    1294,
                    1297,
                    1298,
                    1428,
                    1430,
                    2338,
                    2339,
                    2340,
                    2342,
                    1970,
                    1971,
                    1979,
                    1981,
                    1984,
                    1986,
                    1859,
                    1860,
                    2114,
                    2115,
                    2009,
                    2010,
                    2011,
                    2012,
                    2013,
                    1902,
                    1904,
                    1906
                ],
                "ops.maybe_dispatch_ufunc_to_dunder_op": [
                    1294
                ],
                "ops": [
                    1294
                ],
                "ufunc": [
                    1304,
                    1295
                ],
                "method": [
                    1729,
                    1732,
                    2537,
                    2538,
                    1295,
                    1715,
                    1716
                ],
                "inputs": [
                    1295
                ],
                "kwargs": [
                    2122,
                    2538,
                    1550,
                    1295
                ],
                "ufunc.__name__": [
                    1304
                ],
                "state": [
                    1313,
                    1314,
                    1316,
                    1309
                ],
                "k": [
                    1316,
                    1317
                ],
                "state.items": [
                    1316
                ],
                "self._codes.nbytes": [
                    1328,
                    1353
                ],
                "self.dtype.categories.values.nbytes": [
                    1328
                ],
                "self.dtype.categories.values": [
                    1328
                ],
                "self.dtype.categories.memory_usage": [
                    1353
                ],
                "deep": [
                    1353
                ],
                "self.codes.dtype.type": [
                    1362
                ],
                "self.codes.dtype": [
                    1362,
                    1365
                ],
                "locs": [
                    1364,
                    1365
                ],
                "self.codes.searchsorted": [
                    1366
                ],
                "side": [
                    1366
                ],
                "sorter": [
                    1366
                ],
                "Substitution": [
                    2344,
                    1355
                ],
                "Appender": [
                    2345,
                    1356
                ],
                "_shared_docs": [
                    1356
                ],
                "isnull": [
                    1388
                ],
                "notnull": [
                    1410
                ],
                "self.notna": [
                    1428
                ],
                "code": [
                    1458,
                    1453,
                    1454,
                    1461
                ],
                "ncat": [
                    1459,
                    1461,
                    1454,
                    1455
                ],
                "ix": [
                    1464,
                    1466,
                    1462,
                    1455
                ],
                "clean": [
                    1457,
                    1458,
                    1455
                ],
                "np.arange": [
                    2651,
                    1455
                ],
                "mask.all": [
                    1455
                ],
                "dropna": [
                    1457,
                    2212,
                    2215
                ],
                "obs": [
                    1458,
                    1459
                ],
                "count": [
                    1466,
                    1459,
                    1461
                ],
                "np.bincount": [
                    1459,
                    1461
                ],
                "np.append": [
                    1462
                ],
                "Series": [
                    1665,
                    1466,
                    2532,
                    2540
                ],
                "CategoricalIndex": [
                    1466
                ],
                "needs_i8_conversion": [
                    1481
                ],
                "self.categories.take": [
                    1482
                ],
                "take": [
                    1858,
                    1484
                ],
                "self.categories.astype": [
                    1484
                ],
                "argsort": [
                    1550
                ],
                "args": [
                    2538,
                    1550
                ],
                "ascending": [
                    1630,
                    1550
                ],
                "kind": [
                    1550
                ],
                "na_position": [
                    1627,
                    1628,
                    1630
                ],
                "sorted_idx": [
                    1633,
                    1636,
                    1630
                ],
                "nargsort": [
                    1630
                ],
                "values.astype": [
                    1657
                ],
                "self.categories.is_numeric": [
                    1659
                ],
                "self.rename_categories": [
                    1665
                ],
                "rank": [
                    1665
                ],
                "validate_fillna_kwargs": [
                    1715
                ],
                "limit": [
                    1721
                ],
                "reshape": [
                    1731
                ],
                "self.to_dense": [
                    1731
                ],
                "astype": [
                    1732
                ],
                "interpolate_2d": [
                    1732
                ],
                "value.isin": [
                    1742
                ],
                "values_codes": [
                    1745,
                    1747
                ],
                "indexer": [
                    1858,
                    1992,
                    1993,
                    1994,
                    1869,
                    2605,
                    2608,
                    1841,
                    1746,
                    1747
                ],
                "is_hashable": [
                    1750
                ],
                "codes.copy": [
                    2608,
                    2601,
                    1756,
                    2604
                ],
                "np.intp": [
                    1841
                ],
                "allow_fill": [
                    1858,
                    1869,
                    1847
                ],
                "from_codes": [
                    1859
                ],
                "warn": [
                    1864
                ],
                "self.take": [
                    1869
                ],
                "self._internal_get_values": [
                    1881
                ],
                "contains": [
                    1891
                ],
                "num": [
                    1920,
                    1921,
                    1922,
                    1898,
                    1899,
                    1900
                ],
                "max_vals": [
                    1898,
                    1900
                ],
                "head": [
                    1921,
                    1899,
                    1923,
                    1902
                ],
                "_get_repr": [
                    1899,
                    1900
                ],
                "tail": [
                    1922,
                    1923,
                    1900,
                    1902
                ],
                "footer": [
                    1968,
                    1903
                ],
                "self._repr_footer": [
                    1904
                ],
                "max_categories": [
                    1912,
                    1920,
                    1919
                ],
                "get_option": [
                    1914,
                    1915,
                    1939
                ],
                "fmt.format_array": [
                    1921,
                    1922,
                    1925
                ],
                "fmt": [
                    1921,
                    1922,
                    1925,
                    1967
                ],
                "category_strs": [
                    1923,
                    1925,
                    1928,
                    1929,
                    1935,
                    1948
                ],
                "x.strip": [
                    1928
                ],
                "self._repr_categories": [
                    1935
                ],
                "levheader": [
                    1958,
                    1937,
                    1945,
                    1950,
                    1951
                ],
                "width": [
                    1938,
                    1939
                ],
                "height": [
                    1938
                ],
                "get_terminal_size": [
                    1938
                ],
                "max_width": [
                    1939,
                    1949,
                    1942
                ],
                "console.in_ipython_frontend": [
                    1940
                ],
                "console": [
                    1940
                ],
                "levstring": [
                    1953,
                    1955,
                    1958,
                    1943,
                    1950
                ],
                "start": [
                    1944,
                    2113,
                    1956,
                    1952
                ],
                "cur_col_len": [
                    1945,
                    1954,
                    1949,
                    1951
                ],
                "sep_len": [
                    1946,
                    1949
                ],
                "sep": [
                    1953,
                    1946,
                    1947
                ],
                "linesep": [
                    1947,
                    1950
                ],
                "sep.rstrip": [
                    1947
                ],
                "val": [
                    1954,
                    1955,
                    1948,
                    1949
                ],
                "levstring.replace": [
                    1958
                ],
                "info": [
                    1961,
                    1962
                ],
                "self._repr_categories_info": [
                    1961
                ],
                "formatter": [
                    1970,
                    1967
                ],
                "fmt.CategoricalFormatter": [
                    1967
                ],
                "length": [
                    1968
                ],
                "na_rep": [
                    1968
                ],
                "formatter.to_string": [
                    1970
                ],
                "_maxlen": [
                    1977,
                    1978,
                    1979,
                    1981
                ],
                "self._tidy_repr": [
                    1979
                ],
                "self._get_repr": [
                    1981,
                    1983
                ],
                "replace": [
                    1983
                ],
                "indexer.dtype.kind": [
                    1992
                ],
                "indexer.dtype": [
                    1992
                ],
                "indexer.astype": [
                    1993
                ],
                "self._codes.dtype": [
                    1993
                ],
                "np.integer": [
                    2000,
                    2055
                ],
                "check_array_indexer": [
                    2080,
                    2007
                ],
                "result.ndim": [
                    2010
                ],
                "deprecate_ndim_indexing": [
                    2011
                ],
                "extract_array": [
                    2648,
                    2025
                ],
                "value.categories": [
                    2034,
                    2036
                ],
                "new_codes": [
                    2608,
                    2609,
                    2035,
                    2038
                ],
                "value.codes": [
                    2036
                ],
                "Categorical.from_codes": [
                    2652,
                    2038
                ],
                "rvalue": [
                    2040,
                    2044,
                    2077
                ],
                "to_add": [
                    2048,
                    2044
                ],
                "difference": [
                    2044
                ],
                "com.is_null_slice": [
                    2063
                ],
                "com": [
                    2063
                ],
                "lindexer": [
                    2081,
                    2077,
                    2078
                ],
                "self.categories.get_indexer": [
                    2411,
                    2077
                ],
                "self._maybe_coerce_indexer": [
                    2078
                ],
                "r": [
                    2113,
                    2109
                ],
                "counts": [
                    2112,
                    2113,
                    2338,
                    2109,
                    2333,
                    2334
                ],
                "libalgos.groupsort_indexer": [
                    2109
                ],
                "libalgos": [
                    2109
                ],
                "self.codes.astype": [
                    2274,
                    2110
                ],
                "categories.size": [
                    2110
                ],
                "counts.cumsum": [
                    2112
                ],
                "_result": [
                    2113,
                    2114
                ],
                "end": [
                    2113
                ],
                "Dict": [
                    2083
                ],
                "Hashable": [
                    2083
                ],
                "name": [
                    2119,
                    2121,
                    2537,
                    2520,
                    2523
                ],
                "self.check_for_ordered": [
                    2144,
                    2179
                ],
                "self.dtype.na_value": [
                    2147,
                    2182
                ],
                "good": [
                    2149,
                    2150,
                    2213,
                    2152,
                    2185,
                    2184,
                    2187,
                    2214
                ],
                "good.all": [
                    2185,
                    2150
                ],
                "skipna": [
                    2186,
                    2151
                ],
                "pointer": [
                    2152,
                    2187,
                    2156,
                    2157,
                    2191,
                    2192
                ],
                "self._codes.min": [
                    2156
                ],
                "deprecate_kwarg": [
                    2124,
                    2159
                ],
                "self._codes.max": [
                    2191
                ],
                "htable.mode_int64": [
                    2215
                ],
                "htable": [
                    2215
                ],
                "ensure_int64": [
                    2215
                ],
                "unique_codes": [
                    2265,
                    2268,
                    2261
                ],
                "unique1d": [
                    2261
                ],
                "take_codes": [
                    2268,
                    2270,
                    2271
                ],
                "np.sort": [
                    2270
                ],
                "cat.set_categories": [
                    2271
                ],
                "cat.categories.take": [
                    2271
                ],
                "original._constructor": [
                    2279
                ],
                "original": [
                    2280,
                    2279
                ],
                "original.categories.take": [
                    2280
                ],
                "original.categories": [
                    2280
                ],
                "uniques": [
                    2280
                ],
                "original.dtype": [
                    2280
                ],
                "self.is_dtype_equal": [
                    2295
                ],
                "other.codes": [
                    2301
                ],
                "np.array_equal": [
                    2303
                ],
                "other.dtype": [
                    2320
                ],
                "self.value_counts": [
                    2333
                ],
                "freqs": [
                    2338,
                    2334
                ],
                "counts.sum": [
                    2334
                ],
                "concat": [
                    2338
                ],
                "result.columns": [
                    2339
                ],
                "result.index.name": [
                    2340
                ],
                "result.index": [
                    2340
                ],
                "nv.validate_repeat": [
                    2347
                ],
                "nv": [
                    2347
                ],
                "axis": [
                    2347
                ],
                "self._codes.repeat": [
                    2348
                ],
                "repeats": [
                    2348
                ],
                "_extension_array_shared_docs": [
                    2345
                ],
                "concat_categorical": [
                    2360
                ],
                "to_concat": [
                    2360
                ],
                "values_type": [
                    2404,
                    2407
                ],
                "code_values": [
                    2411,
                    2412,
                    2413
                ],
                "algorithms.isin": [
                    2413
                ],
                "algorithms": [
                    2413
                ],
                "to_replace": [
                    2449,
                    2444,
                    2453,
                    2446
                ],
                "cat.remove_categories": [
                    2453,
                    2446
                ],
                "cat.categories.tolist": [
                    2448
                ],
                "index": [
                    2449,
                    2452,
                    2455
                ],
                "categories.index": [
                    2449,
                    2451
                ],
                "value_index": [
                    2451,
                    2452
                ],
                "cat.rename_categories": [
                    2456
                ],
                "PandasDelegate": [
                    2481
                ],
                "NoNewAttributesMixin": [
                    2481
                ],
                "self._validate": [
                    2508
                ],
                "data": [
                    2508,
                    2509,
                    2510,
                    2511,
                    2516
                ],
                "self._parent": [
                    2532,
                    2537,
                    2509,
                    2520,
                    2523
                ],
                "data.values": [
                    2509
                ],
                "self._index": [
                    2532,
                    2510,
                    2540
                ],
                "data.index": [
                    2510
                ],
                "self._name": [
                    2540,
                    2511
                ],
                "data.name": [
                    2511
                ],
                "self._freeze": [
                    2512
                ],
                "data.dtype": [
                    2516
                ],
                "new_values": [
                    2523
                ],
                "self._parent.codes": [
                    2532
                ],
                "res": [
                    2538,
                    2539,
                    2540
                ],
                "delegate_names": [
                    2464,
                    2467
                ],
                "dtype_equal": [
                    2552,
                    2550
                ],
                "categories.dtype": [
                    2561,
                    2557,
                    2550
                ],
                "is_object_dtype": [
                    2557
                ],
                "categories.dtype.construct_array_type": [
                    2561
                ],
                "try_cast_to_ea": [
                    2562
                ],
                "ensure_object": [
                    2568,
                    2569,
                    2565,
                    2566
                ],
                "hash_klass": [
                    2571,
                    2573
                ],
                "vals": [
                    2571,
                    2575
                ],
                "_get_data_algo": [
                    2571,
                    2572
                ],
                "_": [
                    2572
                ],
                "t": [
                    2573,
                    2574,
                    2575
                ],
                "t.map_locations": [
                    2574
                ],
                "t.lookup": [
                    2575
                ],
                "old_categories": [
                    2602,
                    2606,
                    2599
                ],
                "new_categories.equals": [
                    2602
                ],
                "new_categories.get_indexer": [
                    2606
                ],
                "list_like": [
                    2613,
                    2614,
                    2615,
                    2616,
                    2617,
                    2618,
                    2619,
                    2620,
                    2623
                ],
                "is_sequence": [
                    2617
                ],
                "is_iterator": [
                    2617
                ],
                "cat_codes": [
                    2651,
                    2652
                ],
                "values.codes.dtype": [
                    2651
                ],
                "iterables": [
                    2683,
                    2686
                ],
                "factorize_from_iterable": [
                    2686
                ],
                "it": [
                    2686
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_57/pandas/tests/arrays/categorical/test_replace.py",
                "test_function": "test_replace",
                "test_function_code": "@pytest.mark.parametrize(\n    \"to_replace,value,expected,check_types,check_categorical\",\n    [\n        # one-to-one\n        (1, 2, [2, 2, 3], True, True),\n        (1, 4, [4, 2, 3], True, True),\n        (4, 1, [1, 2, 3], True, True),\n        (5, 6, [1, 2, 3], True, True),\n        # many-to-one\n        ([1], 2, [2, 2, 3], True, True),\n        ([1, 2], 3, [3, 3, 3], True, True),\n        ([1, 2], 4, [4, 4, 3], True, True),\n        ((1, 2, 4), 5, [5, 5, 3], True, True),\n        ((5, 6), 2, [1, 2, 3], True, True),\n        # many-to-many, handled outside of Categorical and results in separate dtype\n        ([1], [2], [2, 2, 3], False, False),\n        ([1, 4], [5, 2], [5, 2, 3], False, False),\n        # check_categorical sorts categories, which crashes on mixed dtypes\n        (3, \"4\", [1, 2, \"4\"], True, False),\n        ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n    ],\n)\ndef test_replace(to_replace, value, expected, check_types, check_categorical):\n    # GH 31720\n    s = pd.Series([1, 2, 3], dtype=\"category\")\n    result = s.replace(to_replace, value)\n    expected = pd.Series(expected, dtype=\"category\")\n    s.replace(to_replace, value, inplace=True)\n    tm.assert_series_equal(\n        expected,\n        result,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )\n    tm.assert_series_equal(\n        expected,\n        s,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )",
                "test_error": "TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'",
                "full_test_error": "to_replace = 1, value = 2\nexpected = 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]\ncheck_types = True, check_categorical = True\n\n    @pytest.mark.parametrize(\n        \"to_replace,value,expected,check_types,check_categorical\",\n        [\n            # one-to-one\n            (1, 2, [2, 2, 3], True, True),\n            (1, 4, [4, 2, 3], True, True),\n            (4, 1, [1, 2, 3], True, True),\n            (5, 6, [1, 2, 3], True, True),\n            # many-to-one\n            ([1], 2, [2, 2, 3], True, True),\n            ([1, 2], 3, [3, 3, 3], True, True),\n            ([1, 2], 4, [4, 4, 3], True, True),\n            ((1, 2, 4), 5, [5, 5, 3], True, True),\n            ((5, 6), 2, [1, 2, 3], True, True),\n            # many-to-many, handled outside of Categorical and results in separate dtype\n            ([1], [2], [2, 2, 3], False, False),\n            ([1, 4], [5, 2], [5, 2, 3], False, False),\n            # check_categorical sorts categories, which crashes on mixed dtypes\n            (3, \"4\", [1, 2, \"4\"], True, False),\n            ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n        ],\n    )\n    def test_replace(to_replace, value, expected, check_types, check_categorical):\n        # GH 31720\n        s = pd.Series([1, 2, 3], dtype=\"category\")\n        result = s.replace(to_replace, value)\n        expected = pd.Series(expected, dtype=\"category\")\n        s.replace(to_replace, value, inplace=True)\n>       tm.assert_series_equal(\n            expected,\n            result,\n            check_dtype=check_types,\n            check_categorical=check_categorical,\n            check_category_order=False,\n        )\nE       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'\n\npandas/tests/arrays/categorical/test_replace.py:35: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('to_replace,value,expected,check_types,check_categorical', [(1, 2, [2, 2, 3], True, True), (1, 4, [4, 2, 3], True, True), (4, 1, [1, 2, 3], True, True), (5, 6, [1, 2, 3], True, True), ([1], 2, [2, 2, 3], True, True), ([1, 2], 3, [3, 3, 3], True, True), ([1, 2], 4, [4, 4, 3], True, True), ((1, 2, 4), 5, [5, 5, 3], True, True), ((5, 6), 2, [1, 2, 3], True, True), ([1], [2], [2, 2, 3], False, False), ([1, 4], [5, 2], [5, 2, 3], False, False), (3, '4', [1, 2, '4'], True, False), ([1, 2, '3'], '5', ['5', '5', 3], True, False)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_57/pandas/tests/arrays/categorical/test_replace.py",
                "test_function": "test_replace",
                "test_function_code": "@pytest.mark.parametrize(\n    \"to_replace,value,expected,check_types,check_categorical\",\n    [\n        # one-to-one\n        (1, 2, [2, 2, 3], True, True),\n        (1, 4, [4, 2, 3], True, True),\n        (4, 1, [1, 2, 3], True, True),\n        (5, 6, [1, 2, 3], True, True),\n        # many-to-one\n        ([1], 2, [2, 2, 3], True, True),\n        ([1, 2], 3, [3, 3, 3], True, True),\n        ([1, 2], 4, [4, 4, 3], True, True),\n        ((1, 2, 4), 5, [5, 5, 3], True, True),\n        ((5, 6), 2, [1, 2, 3], True, True),\n        # many-to-many, handled outside of Categorical and results in separate dtype\n        ([1], [2], [2, 2, 3], False, False),\n        ([1, 4], [5, 2], [5, 2, 3], False, False),\n        # check_categorical sorts categories, which crashes on mixed dtypes\n        (3, \"4\", [1, 2, \"4\"], True, False),\n        ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n    ],\n)\ndef test_replace(to_replace, value, expected, check_types, check_categorical):\n    # GH 31720\n    s = pd.Series([1, 2, 3], dtype=\"category\")\n    result = s.replace(to_replace, value)\n    expected = pd.Series(expected, dtype=\"category\")\n    s.replace(to_replace, value, inplace=True)\n    tm.assert_series_equal(\n        expected,\n        result,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )\n    tm.assert_series_equal(\n        expected,\n        s,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )",
                "test_error": "TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'",
                "full_test_error": "to_replace = 1, value = 4\nexpected = 0    4\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 4]\ncheck_types = True, check_categorical = True\n\n    @pytest.mark.parametrize(\n        \"to_replace,value,expected,check_types,check_categorical\",\n        [\n            # one-to-one\n            (1, 2, [2, 2, 3], True, True),\n            (1, 4, [4, 2, 3], True, True),\n            (4, 1, [1, 2, 3], True, True),\n            (5, 6, [1, 2, 3], True, True),\n            # many-to-one\n            ([1], 2, [2, 2, 3], True, True),\n            ([1, 2], 3, [3, 3, 3], True, True),\n            ([1, 2], 4, [4, 4, 3], True, True),\n            ((1, 2, 4), 5, [5, 5, 3], True, True),\n            ((5, 6), 2, [1, 2, 3], True, True),\n            # many-to-many, handled outside of Categorical and results in separate dtype\n            ([1], [2], [2, 2, 3], False, False),\n            ([1, 4], [5, 2], [5, 2, 3], False, False),\n            # check_categorical sorts categories, which crashes on mixed dtypes\n            (3, \"4\", [1, 2, \"4\"], True, False),\n            ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n        ],\n    )\n    def test_replace(to_replace, value, expected, check_types, check_categorical):\n        # GH 31720\n        s = pd.Series([1, 2, 3], dtype=\"category\")\n        result = s.replace(to_replace, value)\n        expected = pd.Series(expected, dtype=\"category\")\n        s.replace(to_replace, value, inplace=True)\n>       tm.assert_series_equal(\n            expected,\n            result,\n            check_dtype=check_types,\n            check_categorical=check_categorical,\n            check_category_order=False,\n        )\nE       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'\n\npandas/tests/arrays/categorical/test_replace.py:35: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('to_replace,value,expected,check_types,check_categorical', [(1, 2, [2, 2, 3], True, True), (1, 4, [4, 2, 3], True, True), (4, 1, [1, 2, 3], True, True), (5, 6, [1, 2, 3], True, True), ([1], 2, [2, 2, 3], True, True), ([1, 2], 3, [3, 3, 3], True, True), ([1, 2], 4, [4, 4, 3], True, True), ((1, 2, 4), 5, [5, 5, 3], True, True), ((5, 6), 2, [1, 2, 3], True, True), ([1], [2], [2, 2, 3], False, False), ([1, 4], [5, 2], [5, 2, 3], False, False), (3, '4', [1, 2, '4'], True, False), ([1, 2, '3'], '5', ['5', '5', 3], True, False)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_57/pandas/tests/arrays/categorical/test_replace.py",
                "test_function": "test_replace",
                "test_function_code": "@pytest.mark.parametrize(\n    \"to_replace,value,expected,check_types,check_categorical\",\n    [\n        # one-to-one\n        (1, 2, [2, 2, 3], True, True),\n        (1, 4, [4, 2, 3], True, True),\n        (4, 1, [1, 2, 3], True, True),\n        (5, 6, [1, 2, 3], True, True),\n        # many-to-one\n        ([1], 2, [2, 2, 3], True, True),\n        ([1, 2], 3, [3, 3, 3], True, True),\n        ([1, 2], 4, [4, 4, 3], True, True),\n        ((1, 2, 4), 5, [5, 5, 3], True, True),\n        ((5, 6), 2, [1, 2, 3], True, True),\n        # many-to-many, handled outside of Categorical and results in separate dtype\n        ([1], [2], [2, 2, 3], False, False),\n        ([1, 4], [5, 2], [5, 2, 3], False, False),\n        # check_categorical sorts categories, which crashes on mixed dtypes\n        (3, \"4\", [1, 2, \"4\"], True, False),\n        ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n    ],\n)\ndef test_replace(to_replace, value, expected, check_types, check_categorical):\n    # GH 31720\n    s = pd.Series([1, 2, 3], dtype=\"category\")\n    result = s.replace(to_replace, value)\n    expected = pd.Series(expected, dtype=\"category\")\n    s.replace(to_replace, value, inplace=True)\n    tm.assert_series_equal(\n        expected,\n        result,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )\n    tm.assert_series_equal(\n        expected,\n        s,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )",
                "test_error": "TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'",
                "full_test_error": "to_replace = 4, value = 1\nexpected = 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]\ncheck_types = True, check_categorical = True\n\n    @pytest.mark.parametrize(\n        \"to_replace,value,expected,check_types,check_categorical\",\n        [\n            # one-to-one\n            (1, 2, [2, 2, 3], True, True),\n            (1, 4, [4, 2, 3], True, True),\n            (4, 1, [1, 2, 3], True, True),\n            (5, 6, [1, 2, 3], True, True),\n            # many-to-one\n            ([1], 2, [2, 2, 3], True, True),\n            ([1, 2], 3, [3, 3, 3], True, True),\n            ([1, 2], 4, [4, 4, 3], True, True),\n            ((1, 2, 4), 5, [5, 5, 3], True, True),\n            ((5, 6), 2, [1, 2, 3], True, True),\n            # many-to-many, handled outside of Categorical and results in separate dtype\n            ([1], [2], [2, 2, 3], False, False),\n            ([1, 4], [5, 2], [5, 2, 3], False, False),\n            # check_categorical sorts categories, which crashes on mixed dtypes\n            (3, \"4\", [1, 2, \"4\"], True, False),\n            ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n        ],\n    )\n    def test_replace(to_replace, value, expected, check_types, check_categorical):\n        # GH 31720\n        s = pd.Series([1, 2, 3], dtype=\"category\")\n        result = s.replace(to_replace, value)\n        expected = pd.Series(expected, dtype=\"category\")\n        s.replace(to_replace, value, inplace=True)\n>       tm.assert_series_equal(\n            expected,\n            result,\n            check_dtype=check_types,\n            check_categorical=check_categorical,\n            check_category_order=False,\n        )\nE       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'\n\npandas/tests/arrays/categorical/test_replace.py:35: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('to_replace,value,expected,check_types,check_categorical', [(1, 2, [2, 2, 3], True, True), (1, 4, [4, 2, 3], True, True), (4, 1, [1, 2, 3], True, True), (5, 6, [1, 2, 3], True, True), ([1], 2, [2, 2, 3], True, True), ([1, 2], 3, [3, 3, 3], True, True), ([1, 2], 4, [4, 4, 3], True, True), ((1, 2, 4), 5, [5, 5, 3], True, True), ((5, 6), 2, [1, 2, 3], True, True), ([1], [2], [2, 2, 3], False, False), ([1, 4], [5, 2], [5, 2, 3], False, False), (3, '4', [1, 2, '4'], True, False), ([1, 2, '3'], '5', ['5', '5', 3], True, False)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_57/pandas/tests/arrays/categorical/test_replace.py",
                "test_function": "test_replace",
                "test_function_code": "@pytest.mark.parametrize(\n    \"to_replace,value,expected,check_types,check_categorical\",\n    [\n        # one-to-one\n        (1, 2, [2, 2, 3], True, True),\n        (1, 4, [4, 2, 3], True, True),\n        (4, 1, [1, 2, 3], True, True),\n        (5, 6, [1, 2, 3], True, True),\n        # many-to-one\n        ([1], 2, [2, 2, 3], True, True),\n        ([1, 2], 3, [3, 3, 3], True, True),\n        ([1, 2], 4, [4, 4, 3], True, True),\n        ((1, 2, 4), 5, [5, 5, 3], True, True),\n        ((5, 6), 2, [1, 2, 3], True, True),\n        # many-to-many, handled outside of Categorical and results in separate dtype\n        ([1], [2], [2, 2, 3], False, False),\n        ([1, 4], [5, 2], [5, 2, 3], False, False),\n        # check_categorical sorts categories, which crashes on mixed dtypes\n        (3, \"4\", [1, 2, \"4\"], True, False),\n        ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n    ],\n)\ndef test_replace(to_replace, value, expected, check_types, check_categorical):\n    # GH 31720\n    s = pd.Series([1, 2, 3], dtype=\"category\")\n    result = s.replace(to_replace, value)\n    expected = pd.Series(expected, dtype=\"category\")\n    s.replace(to_replace, value, inplace=True)\n    tm.assert_series_equal(\n        expected,\n        result,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )\n    tm.assert_series_equal(\n        expected,\n        s,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )",
                "test_error": "TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'",
                "full_test_error": "to_replace = 5, value = 6\nexpected = 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]\ncheck_types = True, check_categorical = True\n\n    @pytest.mark.parametrize(\n        \"to_replace,value,expected,check_types,check_categorical\",\n        [\n            # one-to-one\n            (1, 2, [2, 2, 3], True, True),\n            (1, 4, [4, 2, 3], True, True),\n            (4, 1, [1, 2, 3], True, True),\n            (5, 6, [1, 2, 3], True, True),\n            # many-to-one\n            ([1], 2, [2, 2, 3], True, True),\n            ([1, 2], 3, [3, 3, 3], True, True),\n            ([1, 2], 4, [4, 4, 3], True, True),\n            ((1, 2, 4), 5, [5, 5, 3], True, True),\n            ((5, 6), 2, [1, 2, 3], True, True),\n            # many-to-many, handled outside of Categorical and results in separate dtype\n            ([1], [2], [2, 2, 3], False, False),\n            ([1, 4], [5, 2], [5, 2, 3], False, False),\n            # check_categorical sorts categories, which crashes on mixed dtypes\n            (3, \"4\", [1, 2, \"4\"], True, False),\n            ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n        ],\n    )\n    def test_replace(to_replace, value, expected, check_types, check_categorical):\n        # GH 31720\n        s = pd.Series([1, 2, 3], dtype=\"category\")\n        result = s.replace(to_replace, value)\n        expected = pd.Series(expected, dtype=\"category\")\n        s.replace(to_replace, value, inplace=True)\n>       tm.assert_series_equal(\n            expected,\n            result,\n            check_dtype=check_types,\n            check_categorical=check_categorical,\n            check_category_order=False,\n        )\nE       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'\n\npandas/tests/arrays/categorical/test_replace.py:35: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('to_replace,value,expected,check_types,check_categorical', [(1, 2, [2, 2, 3], True, True), (1, 4, [4, 2, 3], True, True), (4, 1, [1, 2, 3], True, True), (5, 6, [1, 2, 3], True, True), ([1], 2, [2, 2, 3], True, True), ([1, 2], 3, [3, 3, 3], True, True), ([1, 2], 4, [4, 4, 3], True, True), ((1, 2, 4), 5, [5, 5, 3], True, True), ((5, 6), 2, [1, 2, 3], True, True), ([1], [2], [2, 2, 3], False, False), ([1, 4], [5, 2], [5, 2, 3], False, False), (3, '4', [1, 2, '4'], True, False), ([1, 2, '3'], '5', ['5', '5', 3], True, False)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_57/pandas/tests/arrays/categorical/test_replace.py",
                "test_function": "test_replace",
                "test_function_code": "@pytest.mark.parametrize(\n    \"to_replace,value,expected,check_types,check_categorical\",\n    [\n        # one-to-one\n        (1, 2, [2, 2, 3], True, True),\n        (1, 4, [4, 2, 3], True, True),\n        (4, 1, [1, 2, 3], True, True),\n        (5, 6, [1, 2, 3], True, True),\n        # many-to-one\n        ([1], 2, [2, 2, 3], True, True),\n        ([1, 2], 3, [3, 3, 3], True, True),\n        ([1, 2], 4, [4, 4, 3], True, True),\n        ((1, 2, 4), 5, [5, 5, 3], True, True),\n        ((5, 6), 2, [1, 2, 3], True, True),\n        # many-to-many, handled outside of Categorical and results in separate dtype\n        ([1], [2], [2, 2, 3], False, False),\n        ([1, 4], [5, 2], [5, 2, 3], False, False),\n        # check_categorical sorts categories, which crashes on mixed dtypes\n        (3, \"4\", [1, 2, \"4\"], True, False),\n        ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n    ],\n)\ndef test_replace(to_replace, value, expected, check_types, check_categorical):\n    # GH 31720\n    s = pd.Series([1, 2, 3], dtype=\"category\")\n    result = s.replace(to_replace, value)\n    expected = pd.Series(expected, dtype=\"category\")\n    s.replace(to_replace, value, inplace=True)\n    tm.assert_series_equal(\n        expected,\n        result,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )\n    tm.assert_series_equal(\n        expected,\n        s,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )",
                "test_error": "TypeError: unhashable type: 'list'",
                "full_test_error": "to_replace = [1], value = 2, expected = [2, 2, 3], check_types = True\ncheck_categorical = True\n\n    @pytest.mark.parametrize(\n        \"to_replace,value,expected,check_types,check_categorical\",\n        [\n            # one-to-one\n            (1, 2, [2, 2, 3], True, True),\n            (1, 4, [4, 2, 3], True, True),\n            (4, 1, [1, 2, 3], True, True),\n            (5, 6, [1, 2, 3], True, True),\n            # many-to-one\n            ([1], 2, [2, 2, 3], True, True),\n            ([1, 2], 3, [3, 3, 3], True, True),\n            ([1, 2], 4, [4, 4, 3], True, True),\n            ((1, 2, 4), 5, [5, 5, 3], True, True),\n            ((5, 6), 2, [1, 2, 3], True, True),\n            # many-to-many, handled outside of Categorical and results in separate dtype\n            ([1], [2], [2, 2, 3], False, False),\n            ([1, 4], [5, 2], [5, 2, 3], False, False),\n            # check_categorical sorts categories, which crashes on mixed dtypes\n            (3, \"4\", [1, 2, \"4\"], True, False),\n            ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n        ],\n    )\n    def test_replace(to_replace, value, expected, check_types, check_categorical):\n        # GH 31720\n        s = pd.Series([1, 2, 3], dtype=\"category\")\n>       result = s.replace(to_replace, value)\n\npandas/tests/arrays/categorical/test_replace.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:4155: in replace\n    return super().replace(\npandas/core/generic.py:6499: in replace\n    new_data = self._data.replace(\npandas/core/internals/managers.py:568: in replace\n    return self.apply(\"replace\", value=value, **kwargs)\npandas/core/internals/managers.py:420: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:2960: in replace\n    result.values.replace(to_replace, value, inplace=True)\npandas/core/arrays/categorical.py:2444: in replace\n    if to_replace in cat.categories:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Int64Index([1, 2, 3], dtype='int64'), key = [1]\n\n    def __contains__(self, key) -> bool:\n        \"\"\"\n        Check if key is a float and has a decimal. If it has, return False.\n        \"\"\"\n>       hash(key)\nE       TypeError: unhashable type: 'list'\n\npandas/core/indexes/numeric.py:232: TypeError",
                "traceback": "pandas/core/series.py:4155: in replace\n    return super().replace(\npandas/core/generic.py:6499: in replace\n    new_data = self._data.replace(\npandas/core/internals/managers.py:568: in replace\n    return self.apply(\"replace\", value=value, **kwargs)\npandas/core/internals/managers.py:420: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:2960: in replace\n    result.values.replace(to_replace, value, inplace=True)\npandas/core/arrays/categorical.py:2444: in replace\n    if to_replace in cat.categories:",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Int64Index([1, 2, 3], dtype='int64'), key = [1]\n\n    def __contains__(self, key) -> bool:\n        \"\"\"\n        Check if key is a float and has a decimal. If it has, return False.\n        \"\"\"\n>       hash(key)\nE       TypeError: unhashable type: 'list'\n\npandas/core/indexes/numeric.py:232: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('to_replace,value,expected,check_types,check_categorical', [(1, 2, [2, 2, 3], True, True), (1, 4, [4, 2, 3], True, True), (4, 1, [1, 2, 3], True, True), (5, 6, [1, 2, 3], True, True), ([1], 2, [2, 2, 3], True, True), ([1, 2], 3, [3, 3, 3], True, True), ([1, 2], 4, [4, 4, 3], True, True), ((1, 2, 4), 5, [5, 5, 3], True, True), ((5, 6), 2, [1, 2, 3], True, True), ([1], [2], [2, 2, 3], False, False), ([1, 4], [5, 2], [5, 2, 3], False, False), (3, '4', [1, 2, '4'], True, False), ([1, 2, '3'], '5', ['5', '5', 3], True, False)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_57/pandas/tests/arrays/categorical/test_replace.py",
                "test_function": "test_replace",
                "test_function_code": "@pytest.mark.parametrize(\n    \"to_replace,value,expected,check_types,check_categorical\",\n    [\n        # one-to-one\n        (1, 2, [2, 2, 3], True, True),\n        (1, 4, [4, 2, 3], True, True),\n        (4, 1, [1, 2, 3], True, True),\n        (5, 6, [1, 2, 3], True, True),\n        # many-to-one\n        ([1], 2, [2, 2, 3], True, True),\n        ([1, 2], 3, [3, 3, 3], True, True),\n        ([1, 2], 4, [4, 4, 3], True, True),\n        ((1, 2, 4), 5, [5, 5, 3], True, True),\n        ((5, 6), 2, [1, 2, 3], True, True),\n        # many-to-many, handled outside of Categorical and results in separate dtype\n        ([1], [2], [2, 2, 3], False, False),\n        ([1, 4], [5, 2], [5, 2, 3], False, False),\n        # check_categorical sorts categories, which crashes on mixed dtypes\n        (3, \"4\", [1, 2, \"4\"], True, False),\n        ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n    ],\n)\ndef test_replace(to_replace, value, expected, check_types, check_categorical):\n    # GH 31720\n    s = pd.Series([1, 2, 3], dtype=\"category\")\n    result = s.replace(to_replace, value)\n    expected = pd.Series(expected, dtype=\"category\")\n    s.replace(to_replace, value, inplace=True)\n    tm.assert_series_equal(\n        expected,\n        result,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )\n    tm.assert_series_equal(\n        expected,\n        s,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )",
                "test_error": "TypeError: unhashable type: 'list'",
                "full_test_error": "to_replace = [1, 2], value = 3, expected = [3, 3, 3], check_types = True\ncheck_categorical = True\n\n    @pytest.mark.parametrize(\n        \"to_replace,value,expected,check_types,check_categorical\",\n        [\n            # one-to-one\n            (1, 2, [2, 2, 3], True, True),\n            (1, 4, [4, 2, 3], True, True),\n            (4, 1, [1, 2, 3], True, True),\n            (5, 6, [1, 2, 3], True, True),\n            # many-to-one\n            ([1], 2, [2, 2, 3], True, True),\n            ([1, 2], 3, [3, 3, 3], True, True),\n            ([1, 2], 4, [4, 4, 3], True, True),\n            ((1, 2, 4), 5, [5, 5, 3], True, True),\n            ((5, 6), 2, [1, 2, 3], True, True),\n            # many-to-many, handled outside of Categorical and results in separate dtype\n            ([1], [2], [2, 2, 3], False, False),\n            ([1, 4], [5, 2], [5, 2, 3], False, False),\n            # check_categorical sorts categories, which crashes on mixed dtypes\n            (3, \"4\", [1, 2, \"4\"], True, False),\n            ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n        ],\n    )\n    def test_replace(to_replace, value, expected, check_types, check_categorical):\n        # GH 31720\n        s = pd.Series([1, 2, 3], dtype=\"category\")\n>       result = s.replace(to_replace, value)\n\npandas/tests/arrays/categorical/test_replace.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:4155: in replace\n    return super().replace(\npandas/core/generic.py:6499: in replace\n    new_data = self._data.replace(\npandas/core/internals/managers.py:568: in replace\n    return self.apply(\"replace\", value=value, **kwargs)\npandas/core/internals/managers.py:420: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:2960: in replace\n    result.values.replace(to_replace, value, inplace=True)\npandas/core/arrays/categorical.py:2444: in replace\n    if to_replace in cat.categories:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Int64Index([1, 2, 3], dtype='int64'), key = [1, 2]\n\n    def __contains__(self, key) -> bool:\n        \"\"\"\n        Check if key is a float and has a decimal. If it has, return False.\n        \"\"\"\n>       hash(key)\nE       TypeError: unhashable type: 'list'\n\npandas/core/indexes/numeric.py:232: TypeError",
                "traceback": "pandas/core/series.py:4155: in replace\n    return super().replace(\npandas/core/generic.py:6499: in replace\n    new_data = self._data.replace(\npandas/core/internals/managers.py:568: in replace\n    return self.apply(\"replace\", value=value, **kwargs)\npandas/core/internals/managers.py:420: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:2960: in replace\n    result.values.replace(to_replace, value, inplace=True)\npandas/core/arrays/categorical.py:2444: in replace\n    if to_replace in cat.categories:",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Int64Index([1, 2, 3], dtype='int64'), key = [1, 2]\n\n    def __contains__(self, key) -> bool:\n        \"\"\"\n        Check if key is a float and has a decimal. If it has, return False.\n        \"\"\"\n>       hash(key)\nE       TypeError: unhashable type: 'list'\n\npandas/core/indexes/numeric.py:232: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('to_replace,value,expected,check_types,check_categorical', [(1, 2, [2, 2, 3], True, True), (1, 4, [4, 2, 3], True, True), (4, 1, [1, 2, 3], True, True), (5, 6, [1, 2, 3], True, True), ([1], 2, [2, 2, 3], True, True), ([1, 2], 3, [3, 3, 3], True, True), ([1, 2], 4, [4, 4, 3], True, True), ((1, 2, 4), 5, [5, 5, 3], True, True), ((5, 6), 2, [1, 2, 3], True, True), ([1], [2], [2, 2, 3], False, False), ([1, 4], [5, 2], [5, 2, 3], False, False), (3, '4', [1, 2, '4'], True, False), ([1, 2, '3'], '5', ['5', '5', 3], True, False)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_57/pandas/tests/arrays/categorical/test_replace.py",
                "test_function": "test_replace",
                "test_function_code": "@pytest.mark.parametrize(\n    \"to_replace,value,expected,check_types,check_categorical\",\n    [\n        # one-to-one\n        (1, 2, [2, 2, 3], True, True),\n        (1, 4, [4, 2, 3], True, True),\n        (4, 1, [1, 2, 3], True, True),\n        (5, 6, [1, 2, 3], True, True),\n        # many-to-one\n        ([1], 2, [2, 2, 3], True, True),\n        ([1, 2], 3, [3, 3, 3], True, True),\n        ([1, 2], 4, [4, 4, 3], True, True),\n        ((1, 2, 4), 5, [5, 5, 3], True, True),\n        ((5, 6), 2, [1, 2, 3], True, True),\n        # many-to-many, handled outside of Categorical and results in separate dtype\n        ([1], [2], [2, 2, 3], False, False),\n        ([1, 4], [5, 2], [5, 2, 3], False, False),\n        # check_categorical sorts categories, which crashes on mixed dtypes\n        (3, \"4\", [1, 2, \"4\"], True, False),\n        ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n    ],\n)\ndef test_replace(to_replace, value, expected, check_types, check_categorical):\n    # GH 31720\n    s = pd.Series([1, 2, 3], dtype=\"category\")\n    result = s.replace(to_replace, value)\n    expected = pd.Series(expected, dtype=\"category\")\n    s.replace(to_replace, value, inplace=True)\n    tm.assert_series_equal(\n        expected,\n        result,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )\n    tm.assert_series_equal(\n        expected,\n        s,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )",
                "test_error": "TypeError: unhashable type: 'list'",
                "full_test_error": "to_replace = [1, 2], value = 4, expected = [4, 4, 3], check_types = True\ncheck_categorical = True\n\n    @pytest.mark.parametrize(\n        \"to_replace,value,expected,check_types,check_categorical\",\n        [\n            # one-to-one\n            (1, 2, [2, 2, 3], True, True),\n            (1, 4, [4, 2, 3], True, True),\n            (4, 1, [1, 2, 3], True, True),\n            (5, 6, [1, 2, 3], True, True),\n            # many-to-one\n            ([1], 2, [2, 2, 3], True, True),\n            ([1, 2], 3, [3, 3, 3], True, True),\n            ([1, 2], 4, [4, 4, 3], True, True),\n            ((1, 2, 4), 5, [5, 5, 3], True, True),\n            ((5, 6), 2, [1, 2, 3], True, True),\n            # many-to-many, handled outside of Categorical and results in separate dtype\n            ([1], [2], [2, 2, 3], False, False),\n            ([1, 4], [5, 2], [5, 2, 3], False, False),\n            # check_categorical sorts categories, which crashes on mixed dtypes\n            (3, \"4\", [1, 2, \"4\"], True, False),\n            ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n        ],\n    )\n    def test_replace(to_replace, value, expected, check_types, check_categorical):\n        # GH 31720\n        s = pd.Series([1, 2, 3], dtype=\"category\")\n>       result = s.replace(to_replace, value)\n\npandas/tests/arrays/categorical/test_replace.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:4155: in replace\n    return super().replace(\npandas/core/generic.py:6499: in replace\n    new_data = self._data.replace(\npandas/core/internals/managers.py:568: in replace\n    return self.apply(\"replace\", value=value, **kwargs)\npandas/core/internals/managers.py:420: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:2960: in replace\n    result.values.replace(to_replace, value, inplace=True)\npandas/core/arrays/categorical.py:2444: in replace\n    if to_replace in cat.categories:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Int64Index([1, 2, 3], dtype='int64'), key = [1, 2]\n\n    def __contains__(self, key) -> bool:\n        \"\"\"\n        Check if key is a float and has a decimal. If it has, return False.\n        \"\"\"\n>       hash(key)\nE       TypeError: unhashable type: 'list'\n\npandas/core/indexes/numeric.py:232: TypeError",
                "traceback": "pandas/core/series.py:4155: in replace\n    return super().replace(\npandas/core/generic.py:6499: in replace\n    new_data = self._data.replace(\npandas/core/internals/managers.py:568: in replace\n    return self.apply(\"replace\", value=value, **kwargs)\npandas/core/internals/managers.py:420: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:2960: in replace\n    result.values.replace(to_replace, value, inplace=True)\npandas/core/arrays/categorical.py:2444: in replace\n    if to_replace in cat.categories:",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Int64Index([1, 2, 3], dtype='int64'), key = [1, 2]\n\n    def __contains__(self, key) -> bool:\n        \"\"\"\n        Check if key is a float and has a decimal. If it has, return False.\n        \"\"\"\n>       hash(key)\nE       TypeError: unhashable type: 'list'\n\npandas/core/indexes/numeric.py:232: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('to_replace,value,expected,check_types,check_categorical', [(1, 2, [2, 2, 3], True, True), (1, 4, [4, 2, 3], True, True), (4, 1, [1, 2, 3], True, True), (5, 6, [1, 2, 3], True, True), ([1], 2, [2, 2, 3], True, True), ([1, 2], 3, [3, 3, 3], True, True), ([1, 2], 4, [4, 4, 3], True, True), ((1, 2, 4), 5, [5, 5, 3], True, True), ((5, 6), 2, [1, 2, 3], True, True), ([1], [2], [2, 2, 3], False, False), ([1, 4], [5, 2], [5, 2, 3], False, False), (3, '4', [1, 2, '4'], True, False), ([1, 2, '3'], '5', ['5', '5', 3], True, False)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_57/pandas/tests/arrays/categorical/test_replace.py",
                "test_function": "test_replace",
                "test_function_code": "@pytest.mark.parametrize(\n    \"to_replace,value,expected,check_types,check_categorical\",\n    [\n        # one-to-one\n        (1, 2, [2, 2, 3], True, True),\n        (1, 4, [4, 2, 3], True, True),\n        (4, 1, [1, 2, 3], True, True),\n        (5, 6, [1, 2, 3], True, True),\n        # many-to-one\n        ([1], 2, [2, 2, 3], True, True),\n        ([1, 2], 3, [3, 3, 3], True, True),\n        ([1, 2], 4, [4, 4, 3], True, True),\n        ((1, 2, 4), 5, [5, 5, 3], True, True),\n        ((5, 6), 2, [1, 2, 3], True, True),\n        # many-to-many, handled outside of Categorical and results in separate dtype\n        ([1], [2], [2, 2, 3], False, False),\n        ([1, 4], [5, 2], [5, 2, 3], False, False),\n        # check_categorical sorts categories, which crashes on mixed dtypes\n        (3, \"4\", [1, 2, \"4\"], True, False),\n        ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n    ],\n)\ndef test_replace(to_replace, value, expected, check_types, check_categorical):\n    # GH 31720\n    s = pd.Series([1, 2, 3], dtype=\"category\")\n    result = s.replace(to_replace, value)\n    expected = pd.Series(expected, dtype=\"category\")\n    s.replace(to_replace, value, inplace=True)\n    tm.assert_series_equal(\n        expected,\n        result,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )\n    tm.assert_series_equal(\n        expected,\n        s,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )",
                "test_error": "TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'",
                "full_test_error": "to_replace = (1, 2, 4), value = 5\nexpected = 0    5\n1    5\n2    3\ndtype: category\nCategories (2, int64): [3, 5]\ncheck_types = True, check_categorical = True\n\n    @pytest.mark.parametrize(\n        \"to_replace,value,expected,check_types,check_categorical\",\n        [\n            # one-to-one\n            (1, 2, [2, 2, 3], True, True),\n            (1, 4, [4, 2, 3], True, True),\n            (4, 1, [1, 2, 3], True, True),\n            (5, 6, [1, 2, 3], True, True),\n            # many-to-one\n            ([1], 2, [2, 2, 3], True, True),\n            ([1, 2], 3, [3, 3, 3], True, True),\n            ([1, 2], 4, [4, 4, 3], True, True),\n            ((1, 2, 4), 5, [5, 5, 3], True, True),\n            ((5, 6), 2, [1, 2, 3], True, True),\n            # many-to-many, handled outside of Categorical and results in separate dtype\n            ([1], [2], [2, 2, 3], False, False),\n            ([1, 4], [5, 2], [5, 2, 3], False, False),\n            # check_categorical sorts categories, which crashes on mixed dtypes\n            (3, \"4\", [1, 2, \"4\"], True, False),\n            ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n        ],\n    )\n    def test_replace(to_replace, value, expected, check_types, check_categorical):\n        # GH 31720\n        s = pd.Series([1, 2, 3], dtype=\"category\")\n        result = s.replace(to_replace, value)\n        expected = pd.Series(expected, dtype=\"category\")\n        s.replace(to_replace, value, inplace=True)\n>       tm.assert_series_equal(\n            expected,\n            result,\n            check_dtype=check_types,\n            check_categorical=check_categorical,\n            check_category_order=False,\n        )\nE       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'\n\npandas/tests/arrays/categorical/test_replace.py:35: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('to_replace,value,expected,check_types,check_categorical', [(1, 2, [2, 2, 3], True, True), (1, 4, [4, 2, 3], True, True), (4, 1, [1, 2, 3], True, True), (5, 6, [1, 2, 3], True, True), ([1], 2, [2, 2, 3], True, True), ([1, 2], 3, [3, 3, 3], True, True), ([1, 2], 4, [4, 4, 3], True, True), ((1, 2, 4), 5, [5, 5, 3], True, True), ((5, 6), 2, [1, 2, 3], True, True), ([1], [2], [2, 2, 3], False, False), ([1, 4], [5, 2], [5, 2, 3], False, False), (3, '4', [1, 2, '4'], True, False), ([1, 2, '3'], '5', ['5', '5', 3], True, False)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_57/pandas/tests/arrays/categorical/test_replace.py",
                "test_function": "test_replace",
                "test_function_code": "@pytest.mark.parametrize(\n    \"to_replace,value,expected,check_types,check_categorical\",\n    [\n        # one-to-one\n        (1, 2, [2, 2, 3], True, True),\n        (1, 4, [4, 2, 3], True, True),\n        (4, 1, [1, 2, 3], True, True),\n        (5, 6, [1, 2, 3], True, True),\n        # many-to-one\n        ([1], 2, [2, 2, 3], True, True),\n        ([1, 2], 3, [3, 3, 3], True, True),\n        ([1, 2], 4, [4, 4, 3], True, True),\n        ((1, 2, 4), 5, [5, 5, 3], True, True),\n        ((5, 6), 2, [1, 2, 3], True, True),\n        # many-to-many, handled outside of Categorical and results in separate dtype\n        ([1], [2], [2, 2, 3], False, False),\n        ([1, 4], [5, 2], [5, 2, 3], False, False),\n        # check_categorical sorts categories, which crashes on mixed dtypes\n        (3, \"4\", [1, 2, \"4\"], True, False),\n        ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n    ],\n)\ndef test_replace(to_replace, value, expected, check_types, check_categorical):\n    # GH 31720\n    s = pd.Series([1, 2, 3], dtype=\"category\")\n    result = s.replace(to_replace, value)\n    expected = pd.Series(expected, dtype=\"category\")\n    s.replace(to_replace, value, inplace=True)\n    tm.assert_series_equal(\n        expected,\n        result,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )\n    tm.assert_series_equal(\n        expected,\n        s,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )",
                "test_error": "TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'",
                "full_test_error": "to_replace = (5, 6), value = 2\nexpected = 0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [1, 2, 3]\ncheck_types = True, check_categorical = True\n\n    @pytest.mark.parametrize(\n        \"to_replace,value,expected,check_types,check_categorical\",\n        [\n            # one-to-one\n            (1, 2, [2, 2, 3], True, True),\n            (1, 4, [4, 2, 3], True, True),\n            (4, 1, [1, 2, 3], True, True),\n            (5, 6, [1, 2, 3], True, True),\n            # many-to-one\n            ([1], 2, [2, 2, 3], True, True),\n            ([1, 2], 3, [3, 3, 3], True, True),\n            ([1, 2], 4, [4, 4, 3], True, True),\n            ((1, 2, 4), 5, [5, 5, 3], True, True),\n            ((5, 6), 2, [1, 2, 3], True, True),\n            # many-to-many, handled outside of Categorical and results in separate dtype\n            ([1], [2], [2, 2, 3], False, False),\n            ([1, 4], [5, 2], [5, 2, 3], False, False),\n            # check_categorical sorts categories, which crashes on mixed dtypes\n            (3, \"4\", [1, 2, \"4\"], True, False),\n            ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n        ],\n    )\n    def test_replace(to_replace, value, expected, check_types, check_categorical):\n        # GH 31720\n        s = pd.Series([1, 2, 3], dtype=\"category\")\n        result = s.replace(to_replace, value)\n        expected = pd.Series(expected, dtype=\"category\")\n        s.replace(to_replace, value, inplace=True)\n>       tm.assert_series_equal(\n            expected,\n            result,\n            check_dtype=check_types,\n            check_categorical=check_categorical,\n            check_category_order=False,\n        )\nE       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'\n\npandas/tests/arrays/categorical/test_replace.py:35: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('to_replace,value,expected,check_types,check_categorical', [(1, 2, [2, 2, 3], True, True), (1, 4, [4, 2, 3], True, True), (4, 1, [1, 2, 3], True, True), (5, 6, [1, 2, 3], True, True), ([1], 2, [2, 2, 3], True, True), ([1, 2], 3, [3, 3, 3], True, True), ([1, 2], 4, [4, 4, 3], True, True), ((1, 2, 4), 5, [5, 5, 3], True, True), ((5, 6), 2, [1, 2, 3], True, True), ([1], [2], [2, 2, 3], False, False), ([1, 4], [5, 2], [5, 2, 3], False, False), (3, '4', [1, 2, '4'], True, False), ([1, 2, '3'], '5', ['5', '5', 3], True, False)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_57/pandas/tests/arrays/categorical/test_replace.py",
                "test_function": "test_replace",
                "test_function_code": "@pytest.mark.parametrize(\n    \"to_replace,value,expected,check_types,check_categorical\",\n    [\n        # one-to-one\n        (1, 2, [2, 2, 3], True, True),\n        (1, 4, [4, 2, 3], True, True),\n        (4, 1, [1, 2, 3], True, True),\n        (5, 6, [1, 2, 3], True, True),\n        # many-to-one\n        ([1], 2, [2, 2, 3], True, True),\n        ([1, 2], 3, [3, 3, 3], True, True),\n        ([1, 2], 4, [4, 4, 3], True, True),\n        ((1, 2, 4), 5, [5, 5, 3], True, True),\n        ((5, 6), 2, [1, 2, 3], True, True),\n        # many-to-many, handled outside of Categorical and results in separate dtype\n        ([1], [2], [2, 2, 3], False, False),\n        ([1, 4], [5, 2], [5, 2, 3], False, False),\n        # check_categorical sorts categories, which crashes on mixed dtypes\n        (3, \"4\", [1, 2, \"4\"], True, False),\n        ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n    ],\n)\ndef test_replace(to_replace, value, expected, check_types, check_categorical):\n    # GH 31720\n    s = pd.Series([1, 2, 3], dtype=\"category\")\n    result = s.replace(to_replace, value)\n    expected = pd.Series(expected, dtype=\"category\")\n    s.replace(to_replace, value, inplace=True)\n    tm.assert_series_equal(\n        expected,\n        result,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )\n    tm.assert_series_equal(\n        expected,\n        s,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )",
                "test_error": "TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'",
                "full_test_error": "to_replace = [1], value = [2]\nexpected = 0    2\n1    2\n2    3\ndtype: category\nCategories (2, int64): [2, 3]\ncheck_types = False, check_categorical = False\n\n    @pytest.mark.parametrize(\n        \"to_replace,value,expected,check_types,check_categorical\",\n        [\n            # one-to-one\n            (1, 2, [2, 2, 3], True, True),\n            (1, 4, [4, 2, 3], True, True),\n            (4, 1, [1, 2, 3], True, True),\n            (5, 6, [1, 2, 3], True, True),\n            # many-to-one\n            ([1], 2, [2, 2, 3], True, True),\n            ([1, 2], 3, [3, 3, 3], True, True),\n            ([1, 2], 4, [4, 4, 3], True, True),\n            ((1, 2, 4), 5, [5, 5, 3], True, True),\n            ((5, 6), 2, [1, 2, 3], True, True),\n            # many-to-many, handled outside of Categorical and results in separate dtype\n            ([1], [2], [2, 2, 3], False, False),\n            ([1, 4], [5, 2], [5, 2, 3], False, False),\n            # check_categorical sorts categories, which crashes on mixed dtypes\n            (3, \"4\", [1, 2, \"4\"], True, False),\n            ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n        ],\n    )\n    def test_replace(to_replace, value, expected, check_types, check_categorical):\n        # GH 31720\n        s = pd.Series([1, 2, 3], dtype=\"category\")\n        result = s.replace(to_replace, value)\n        expected = pd.Series(expected, dtype=\"category\")\n        s.replace(to_replace, value, inplace=True)\n>       tm.assert_series_equal(\n            expected,\n            result,\n            check_dtype=check_types,\n            check_categorical=check_categorical,\n            check_category_order=False,\n        )\nE       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'\n\npandas/tests/arrays/categorical/test_replace.py:35: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('to_replace,value,expected,check_types,check_categorical', [(1, 2, [2, 2, 3], True, True), (1, 4, [4, 2, 3], True, True), (4, 1, [1, 2, 3], True, True), (5, 6, [1, 2, 3], True, True), ([1], 2, [2, 2, 3], True, True), ([1, 2], 3, [3, 3, 3], True, True), ([1, 2], 4, [4, 4, 3], True, True), ((1, 2, 4), 5, [5, 5, 3], True, True), ((5, 6), 2, [1, 2, 3], True, True), ([1], [2], [2, 2, 3], False, False), ([1, 4], [5, 2], [5, 2, 3], False, False), (3, '4', [1, 2, '4'], True, False), ([1, 2, '3'], '5', ['5', '5', 3], True, False)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_57/pandas/tests/arrays/categorical/test_replace.py",
                "test_function": "test_replace",
                "test_function_code": "@pytest.mark.parametrize(\n    \"to_replace,value,expected,check_types,check_categorical\",\n    [\n        # one-to-one\n        (1, 2, [2, 2, 3], True, True),\n        (1, 4, [4, 2, 3], True, True),\n        (4, 1, [1, 2, 3], True, True),\n        (5, 6, [1, 2, 3], True, True),\n        # many-to-one\n        ([1], 2, [2, 2, 3], True, True),\n        ([1, 2], 3, [3, 3, 3], True, True),\n        ([1, 2], 4, [4, 4, 3], True, True),\n        ((1, 2, 4), 5, [5, 5, 3], True, True),\n        ((5, 6), 2, [1, 2, 3], True, True),\n        # many-to-many, handled outside of Categorical and results in separate dtype\n        ([1], [2], [2, 2, 3], False, False),\n        ([1, 4], [5, 2], [5, 2, 3], False, False),\n        # check_categorical sorts categories, which crashes on mixed dtypes\n        (3, \"4\", [1, 2, \"4\"], True, False),\n        ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n    ],\n)\ndef test_replace(to_replace, value, expected, check_types, check_categorical):\n    # GH 31720\n    s = pd.Series([1, 2, 3], dtype=\"category\")\n    result = s.replace(to_replace, value)\n    expected = pd.Series(expected, dtype=\"category\")\n    s.replace(to_replace, value, inplace=True)\n    tm.assert_series_equal(\n        expected,\n        result,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )\n    tm.assert_series_equal(\n        expected,\n        s,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )",
                "test_error": "TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'",
                "full_test_error": "to_replace = [1, 4], value = [5, 2]\nexpected = 0    5\n1    2\n2    3\ndtype: category\nCategories (3, int64): [2, 3, 5]\ncheck_types = False, check_categorical = False\n\n    @pytest.mark.parametrize(\n        \"to_replace,value,expected,check_types,check_categorical\",\n        [\n            # one-to-one\n            (1, 2, [2, 2, 3], True, True),\n            (1, 4, [4, 2, 3], True, True),\n            (4, 1, [1, 2, 3], True, True),\n            (5, 6, [1, 2, 3], True, True),\n            # many-to-one\n            ([1], 2, [2, 2, 3], True, True),\n            ([1, 2], 3, [3, 3, 3], True, True),\n            ([1, 2], 4, [4, 4, 3], True, True),\n            ((1, 2, 4), 5, [5, 5, 3], True, True),\n            ((5, 6), 2, [1, 2, 3], True, True),\n            # many-to-many, handled outside of Categorical and results in separate dtype\n            ([1], [2], [2, 2, 3], False, False),\n            ([1, 4], [5, 2], [5, 2, 3], False, False),\n            # check_categorical sorts categories, which crashes on mixed dtypes\n            (3, \"4\", [1, 2, \"4\"], True, False),\n            ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n        ],\n    )\n    def test_replace(to_replace, value, expected, check_types, check_categorical):\n        # GH 31720\n        s = pd.Series([1, 2, 3], dtype=\"category\")\n        result = s.replace(to_replace, value)\n        expected = pd.Series(expected, dtype=\"category\")\n        s.replace(to_replace, value, inplace=True)\n>       tm.assert_series_equal(\n            expected,\n            result,\n            check_dtype=check_types,\n            check_categorical=check_categorical,\n            check_category_order=False,\n        )\nE       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'\n\npandas/tests/arrays/categorical/test_replace.py:35: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('to_replace,value,expected,check_types,check_categorical', [(1, 2, [2, 2, 3], True, True), (1, 4, [4, 2, 3], True, True), (4, 1, [1, 2, 3], True, True), (5, 6, [1, 2, 3], True, True), ([1], 2, [2, 2, 3], True, True), ([1, 2], 3, [3, 3, 3], True, True), ([1, 2], 4, [4, 4, 3], True, True), ((1, 2, 4), 5, [5, 5, 3], True, True), ((5, 6), 2, [1, 2, 3], True, True), ([1], [2], [2, 2, 3], False, False), ([1, 4], [5, 2], [5, 2, 3], False, False), (3, '4', [1, 2, '4'], True, False), ([1, 2, '3'], '5', ['5', '5', 3], True, False)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_57/pandas/tests/arrays/categorical/test_replace.py",
                "test_function": "test_replace",
                "test_function_code": "@pytest.mark.parametrize(\n    \"to_replace,value,expected,check_types,check_categorical\",\n    [\n        # one-to-one\n        (1, 2, [2, 2, 3], True, True),\n        (1, 4, [4, 2, 3], True, True),\n        (4, 1, [1, 2, 3], True, True),\n        (5, 6, [1, 2, 3], True, True),\n        # many-to-one\n        ([1], 2, [2, 2, 3], True, True),\n        ([1, 2], 3, [3, 3, 3], True, True),\n        ([1, 2], 4, [4, 4, 3], True, True),\n        ((1, 2, 4), 5, [5, 5, 3], True, True),\n        ((5, 6), 2, [1, 2, 3], True, True),\n        # many-to-many, handled outside of Categorical and results in separate dtype\n        ([1], [2], [2, 2, 3], False, False),\n        ([1, 4], [5, 2], [5, 2, 3], False, False),\n        # check_categorical sorts categories, which crashes on mixed dtypes\n        (3, \"4\", [1, 2, \"4\"], True, False),\n        ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n    ],\n)\ndef test_replace(to_replace, value, expected, check_types, check_categorical):\n    # GH 31720\n    s = pd.Series([1, 2, 3], dtype=\"category\")\n    result = s.replace(to_replace, value)\n    expected = pd.Series(expected, dtype=\"category\")\n    s.replace(to_replace, value, inplace=True)\n    tm.assert_series_equal(\n        expected,\n        result,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )\n    tm.assert_series_equal(\n        expected,\n        s,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )",
                "test_error": "TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'",
                "full_test_error": "to_replace = 3, value = '4'\nexpected = 0    1\n1    2\n2    4\ndtype: category\nCategories (3, object): [1, 2, 4]\ncheck_types = True, check_categorical = False\n\n    @pytest.mark.parametrize(\n        \"to_replace,value,expected,check_types,check_categorical\",\n        [\n            # one-to-one\n            (1, 2, [2, 2, 3], True, True),\n            (1, 4, [4, 2, 3], True, True),\n            (4, 1, [1, 2, 3], True, True),\n            (5, 6, [1, 2, 3], True, True),\n            # many-to-one\n            ([1], 2, [2, 2, 3], True, True),\n            ([1, 2], 3, [3, 3, 3], True, True),\n            ([1, 2], 4, [4, 4, 3], True, True),\n            ((1, 2, 4), 5, [5, 5, 3], True, True),\n            ((5, 6), 2, [1, 2, 3], True, True),\n            # many-to-many, handled outside of Categorical and results in separate dtype\n            ([1], [2], [2, 2, 3], False, False),\n            ([1, 4], [5, 2], [5, 2, 3], False, False),\n            # check_categorical sorts categories, which crashes on mixed dtypes\n            (3, \"4\", [1, 2, \"4\"], True, False),\n            ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n        ],\n    )\n    def test_replace(to_replace, value, expected, check_types, check_categorical):\n        # GH 31720\n        s = pd.Series([1, 2, 3], dtype=\"category\")\n        result = s.replace(to_replace, value)\n        expected = pd.Series(expected, dtype=\"category\")\n        s.replace(to_replace, value, inplace=True)\n>       tm.assert_series_equal(\n            expected,\n            result,\n            check_dtype=check_types,\n            check_categorical=check_categorical,\n            check_category_order=False,\n        )\nE       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'\n\npandas/tests/arrays/categorical/test_replace.py:35: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('to_replace,value,expected,check_types,check_categorical', [(1, 2, [2, 2, 3], True, True), (1, 4, [4, 2, 3], True, True), (4, 1, [1, 2, 3], True, True), (5, 6, [1, 2, 3], True, True), ([1], 2, [2, 2, 3], True, True), ([1, 2], 3, [3, 3, 3], True, True), ([1, 2], 4, [4, 4, 3], True, True), ((1, 2, 4), 5, [5, 5, 3], True, True), ((5, 6), 2, [1, 2, 3], True, True), ([1], [2], [2, 2, 3], False, False), ([1, 4], [5, 2], [5, 2, 3], False, False), (3, '4', [1, 2, '4'], True, False), ([1, 2, '3'], '5', ['5', '5', 3], True, False)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_57/pandas/tests/arrays/categorical/test_replace.py",
                "test_function": "test_replace",
                "test_function_code": "@pytest.mark.parametrize(\n    \"to_replace,value,expected,check_types,check_categorical\",\n    [\n        # one-to-one\n        (1, 2, [2, 2, 3], True, True),\n        (1, 4, [4, 2, 3], True, True),\n        (4, 1, [1, 2, 3], True, True),\n        (5, 6, [1, 2, 3], True, True),\n        # many-to-one\n        ([1], 2, [2, 2, 3], True, True),\n        ([1, 2], 3, [3, 3, 3], True, True),\n        ([1, 2], 4, [4, 4, 3], True, True),\n        ((1, 2, 4), 5, [5, 5, 3], True, True),\n        ((5, 6), 2, [1, 2, 3], True, True),\n        # many-to-many, handled outside of Categorical and results in separate dtype\n        ([1], [2], [2, 2, 3], False, False),\n        ([1, 4], [5, 2], [5, 2, 3], False, False),\n        # check_categorical sorts categories, which crashes on mixed dtypes\n        (3, \"4\", [1, 2, \"4\"], True, False),\n        ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n    ],\n)\ndef test_replace(to_replace, value, expected, check_types, check_categorical):\n    # GH 31720\n    s = pd.Series([1, 2, 3], dtype=\"category\")\n    result = s.replace(to_replace, value)\n    expected = pd.Series(expected, dtype=\"category\")\n    s.replace(to_replace, value, inplace=True)\n    tm.assert_series_equal(\n        expected,\n        result,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )\n    tm.assert_series_equal(\n        expected,\n        s,\n        check_dtype=check_types,\n        check_categorical=check_categorical,\n        check_category_order=False,\n    )",
                "test_error": "TypeError: unhashable type: 'list'",
                "full_test_error": "to_replace = [1, 2, '3'], value = '5', expected = ['5', '5', 3]\ncheck_types = True, check_categorical = False\n\n    @pytest.mark.parametrize(\n        \"to_replace,value,expected,check_types,check_categorical\",\n        [\n            # one-to-one\n            (1, 2, [2, 2, 3], True, True),\n            (1, 4, [4, 2, 3], True, True),\n            (4, 1, [1, 2, 3], True, True),\n            (5, 6, [1, 2, 3], True, True),\n            # many-to-one\n            ([1], 2, [2, 2, 3], True, True),\n            ([1, 2], 3, [3, 3, 3], True, True),\n            ([1, 2], 4, [4, 4, 3], True, True),\n            ((1, 2, 4), 5, [5, 5, 3], True, True),\n            ((5, 6), 2, [1, 2, 3], True, True),\n            # many-to-many, handled outside of Categorical and results in separate dtype\n            ([1], [2], [2, 2, 3], False, False),\n            ([1, 4], [5, 2], [5, 2, 3], False, False),\n            # check_categorical sorts categories, which crashes on mixed dtypes\n            (3, \"4\", [1, 2, \"4\"], True, False),\n            ([1, 2, \"3\"], \"5\", [\"5\", \"5\", 3], True, False),\n        ],\n    )\n    def test_replace(to_replace, value, expected, check_types, check_categorical):\n        # GH 31720\n        s = pd.Series([1, 2, 3], dtype=\"category\")\n>       result = s.replace(to_replace, value)\n\npandas/tests/arrays/categorical/test_replace.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:4155: in replace\n    return super().replace(\npandas/core/generic.py:6499: in replace\n    new_data = self._data.replace(\npandas/core/internals/managers.py:568: in replace\n    return self.apply(\"replace\", value=value, **kwargs)\npandas/core/internals/managers.py:420: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:2960: in replace\n    result.values.replace(to_replace, value, inplace=True)\npandas/core/arrays/categorical.py:2444: in replace\n    if to_replace in cat.categories:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Int64Index([1, 2, 3], dtype='int64'), key = [1, 2, '3']\n\n    def __contains__(self, key) -> bool:\n        \"\"\"\n        Check if key is a float and has a decimal. If it has, return False.\n        \"\"\"\n>       hash(key)\nE       TypeError: unhashable type: 'list'\n\npandas/core/indexes/numeric.py:232: TypeError",
                "traceback": "pandas/core/series.py:4155: in replace\n    return super().replace(\npandas/core/generic.py:6499: in replace\n    new_data = self._data.replace(\npandas/core/internals/managers.py:568: in replace\n    return self.apply(\"replace\", value=value, **kwargs)\npandas/core/internals/managers.py:420: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:2960: in replace\n    result.values.replace(to_replace, value, inplace=True)\npandas/core/arrays/categorical.py:2444: in replace\n    if to_replace in cat.categories:",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Int64Index([1, 2, 3], dtype='int64'), key = [1, 2, '3']\n\n    def __contains__(self, key) -> bool:\n        \"\"\"\n        Check if key is a float and has a decimal. If it has, return False.\n        \"\"\"\n>       hash(key)\nE       TypeError: unhashable type: 'list'\n\npandas/core/indexes/numeric.py:232: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('to_replace,value,expected,check_types,check_categorical', [(1, 2, [2, 2, 3], True, True), (1, 4, [4, 2, 3], True, True), (4, 1, [1, 2, 3], True, True), (5, 6, [1, 2, 3], True, True), ([1], 2, [2, 2, 3], True, True), ([1, 2], 3, [3, 3, 3], True, True), ([1, 2], 4, [4, 4, 3], True, True), ((1, 2, 4), 5, [5, 5, 3], True, True), ((5, 6), 2, [1, 2, 3], True, True), ([1], [2], [2, 2, 3], False, False), ([1, 4], [5, 2], [5, 2, 3], False, False), (3, '4', [1, 2, '4'], True, False), ([1, 2, '3'], '5', ['5', '5', 3], True, False)])"
                ]
            }
        ]
    }
}