{
    "pandas": [
        {
            "bugID": 81,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 419,
            "file_name": "pandas/core/arrays/integer.py",
            "replace_code": "def astype(self, dtype, copy=True, na_value=None):\n\n    \"\"\"\n    Cast to a NumPy array or IntegerArray with 'dtype'.\n    \n    Parameters\n    ----------\n    dtype : str or dtype\n        Typecode or data-type to which the array is cast.\n    copy : bool, default True\n        Whether to copy the data, even if not necessary. If False,\n        a copy is made only if the old dtype does not match the\n        new dtype.\n    \n    na_value : scalar, default None\n        The value to be used to fill NaN values when dtype is converted to a floating point type. If None, the default behavior is to fill NaN values with np.nan.\n    \n    Returns\n    -------\n    array : ndarray or IntegerArray\n        NumPy ndarray or IntergerArray with 'dtype' for its dtype.\n    \n    Raises\n    ------\n    TypeError\n        if incompatible type with an IntegerDtype, equivalent of same_kind\n        casting\n    \"\"\"\n    \n    # if we are astyping to an existing IntegerDtype we can fastpath\n    if isinstance(dtype, _IntegerDtype):\n        result = self._data.astype(dtype.numpy_dtype, copy=False)\n        return type(self)(result, mask=self._mask, copy=False)\n    \n    # coerce\n    if is_float_dtype(dtype):\n        # In astype, we consider dtype=float to also mean na_value=np.nan\n        na_value = na_value if na_value is not None else np.nan\n    else:\n        na_value = None\n    \n    data = self.to_numpy(dtype=dtype, na_value=na_value)\n    return astype_nansafe(data, dtype, copy=False)"
        }
    ]
}