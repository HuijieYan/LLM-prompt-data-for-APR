{
    "pandas": [
        {
            "bugID": 81,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 419,
            "file_name": "core/arrays/integer.py",
            "replace_code": "def astype(self, dtype, copy=True, errors='raise'):\n    from pandas import api\n    \"\"\"\n    Cast to a NumPy array or IntegerArray with 'dtype'.\n    \n    Parameters\n    ----------\n    dtype : str or dtype\n        Typecode or data-type to which the array is cast.\n    copy : bool, default True\n        Whether to copy the data, even if not necessary. If False,\n        a copy is made only if the old dtype does not match the\n        new dtype.\n    errors : {'raise', 'ignore'}, default 'raise'\n        control raising of errors.\n    \n    Returns\n    -------\n    array : ndarray or BooleanArray\n        NumPy ndarray or BooleanArray with 'dtype' for its dtype.\n    \n    Raises\n    ------\n    TypeError\n        if incompatible type with a BooleanDtype, equivalent of same_kind\n        casting\n    \"\"\"\n    if isinstance(dtype, str):\n        from pandas import api\n        dtype = api.types.pandas_dtype(dtype)\n    \n    # if we are astyping to an existing BooleanDtype we can fastpath\n    if isinstance(dtype, BooleanDtype):\n        # astype_nan needs to be used because DataFrame.dropna needs\n        # to have type specific algorithm\n        result = astype_nan(self._data, dtype, copy=copy)\n        return type(self)(result, mask=self._mask, copy=False, na_value=dtype.na_value)\n    \n    # coerce types\n    elif is_float_dtype(dtype) or is_integer_dtype(dtype):\n        kwargs = {}\n    else:\n        kwargs = {}\n        errors = 'ignore'\n    \n    data = self.to_numpy(dtype=dtype, **kwargs)\n    return astype_nansafe(data, dtype, copy=False, errors=errors)"
        }
    ]
}