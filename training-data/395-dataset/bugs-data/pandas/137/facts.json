{
    "1.1.1": "def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:\n    \n    if is_categorical_dtype(dtype):\n        dtype = cast(Union[str, CategoricalDtype], dtype)\n\n        # GH 10696/18593\n        dtype = self.dtype.update_dtype(dtype)\n        self = self.copy() if copy else self\n        if dtype == self.dtype:\n            return self\n        return self._set_dtype(dtype)\n    if is_integer_dtype(dtype) and self.isna().any():\n        msg = \"Cannot convert float NaN to integer\"\n        raise ValueError(msg)\n    return np.array(self, dtype=dtype, copy=copy)\n",
    "1.1.2": "Coerce this type to another dtype\n\nParameters\n----------\ndtype : numpy dtype or pandas type\ncopy : bool, default True\n    By default, astype always returns a newly allocated object.\n    If copy is set to False and dtype is categorical, the original\n    object is returned.",
    "1.2.1": "class Categorical(ExtensionArray, PandasObject)",
    "1.2.2": "Represent a categorical variable in classic R / S-plus fashion.\n\n`Categoricals` can only take on only a limited, and usually fixed, number\nof possible values (`categories`). In contrast to statistical categorical\nvariables, a `Categorical` might have an order, but numerical operations\n(additions, divisions, ...) are not possible.\n\nAll values of the `Categorical` are either in `categories` or `np.nan`.\nAssigning values outside of `categories` will raise a `ValueError`. Order\nis defined by the order of the `categories`, not lexical order of the\nvalues.\n\nParameters\n----------\nvalues : list-like\n    The values of the categorical. If categories are given, values not in\n    categories will be replaced with NaN.\ncategories : Index-like (unique), optional\n    The unique categories for this categorical. If not given, the\n    categories are assumed to be the unique values of `values` (sorted, if\n    possible, otherwise in the order in which they appear).\nordered : bool, default False\n    Whether or not this categorical is treated as a ordered categorical.\n    If True, the resulting categorical will be ordered.\n    An ordered categorical respects, when sorted, the order of its\n    `categories` attribute (which in turn is the `categories` argument, if\n    provided).\ndtype : CategoricalDtype\n    An instance of ``CategoricalDtype`` to use for this categorical\n\n    .. versionadded:: 0.21.0\n\nAttributes\n----------\ncategories : Index\n    The categories of this categorical\ncodes : ndarray\n    The codes (integer positions, which point to the categories) of this\n    categorical, read only.\nordered : bool\n    Whether or not this Categorical is ordered.\ndtype : CategoricalDtype\n    The instance of ``CategoricalDtype`` storing the ``categories``\n    and ``ordered``.\n\n    .. versionadded:: 0.21.0\n\nMethods\n-------\nfrom_codes\n__array__\n\nRaises\n------\nValueError\n    If the categories do not validate.\nTypeError\n    If an explicit ``ordered=True`` is given but no `categories` and the\n    `values` are not sortable.\n\nSee Also\n--------\napi.types.CategoricalDtype : Type for categorical data.\nCategoricalIndex : An Index with an underlying ``Categorical``.\n\nNotes\n-----\nSee the `user guide\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html>`_\nfor more.\n\nExamples\n--------\n>>> pd.Categorical([1, 2, 3, 1, 2, 3])\n[1, 2, 3, 1, 2, 3]\nCategories (3, int64): [1, 2, 3]\n\n>>> pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'])\n[a, b, c, a, b, c]\nCategories (3, object): [a, b, c]\n\nOrdered `Categoricals` can be sorted according to the custom order\nof the categories and can have a min and max value.\n\n>>> c = pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'], ordered=True,\n...                    categories=['c', 'b', 'a'])\n>>> c\n[a, b, c, a, b, c]\nCategories (3, object): [c < b < a]\n>>> c.min()\n'c'",
    "1.2.3": [
        "dtype(self) -> CategoricalDtype",
        "copy(self) -> 'Categorical'",
        "_set_dtype(self, dtype: CategoricalDtype) -> 'Categorical'",
        "isna(self)"
    ],
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_137/pandas/core/arrays/categorical.py",
    "1.3.2": [
        "dtype(self) -> CategoricalDtype",
        "copy(self) -> 'Categorical'",
        "_set_dtype(self, dtype: CategoricalDtype) -> 'Categorical'",
        "isna(self)"
    ],
    "1.4.1": [
        "    @pytest.mark.parametrize(\n        \"expected\",\n        [\n            pd.Series([\"2019\", \"2020\"], dtype=\"datetime64[ns, UTC]\"),\n            pd.Series([0, 0], dtype=\"timedelta64[ns]\"),\n            pd.Series([pd.Period(\"2019\"), pd.Period(\"2020\")], dtype=\"period[A-DEC]\"),\n            pd.Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype=\"interval\"),\n            pd.Series([1, np.nan], dtype=\"Int64\"),\n        ],\n    )\n    def test_cast_category_to_extension_dtype(self, expected):\n        # GH 28668\n        result = expected.astype(\"category\").astype(expected.dtype)\n\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"expected\",\n        [\n            pd.Series([\"2019\", \"2020\"], dtype=\"datetime64[ns, UTC]\"),\n            pd.Series([0, 0], dtype=\"timedelta64[ns]\"),\n            pd.Series([pd.Period(\"2019\"), pd.Period(\"2020\")], dtype=\"period[A-DEC]\"),\n            pd.Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype=\"interval\"),\n            pd.Series([1, np.nan], dtype=\"Int64\"),\n        ],\n    )\n    def test_cast_category_to_extension_dtype(self, expected):\n        # GH 28668\n        result = expected.astype(\"category\").astype(expected.dtype)\n\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"expected\",\n        [\n            pd.Series([\"2019\", \"2020\"], dtype=\"datetime64[ns, UTC]\"),\n            pd.Series([0, 0], dtype=\"timedelta64[ns]\"),\n            pd.Series([pd.Period(\"2019\"), pd.Period(\"2020\")], dtype=\"period[A-DEC]\"),\n            pd.Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype=\"interval\"),\n            pd.Series([1, np.nan], dtype=\"Int64\"),\n        ],\n    )\n    def test_cast_category_to_extension_dtype(self, expected):\n        # GH 28668\n        result = expected.astype(\"category\").astype(expected.dtype)\n\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"expected\",\n        [\n            pd.Series([\"2019\", \"2020\"], dtype=\"datetime64[ns, UTC]\"),\n            pd.Series([0, 0], dtype=\"timedelta64[ns]\"),\n            pd.Series([pd.Period(\"2019\"), pd.Period(\"2020\")], dtype=\"period[A-DEC]\"),\n            pd.Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype=\"interval\"),\n            pd.Series([1, np.nan], dtype=\"Int64\"),\n        ],\n    )\n    def test_cast_category_to_extension_dtype(self, expected):\n        # GH 28668\n        result = expected.astype(\"category\").astype(expected.dtype)\n\n        tm.assert_series_equal(result, expected)",
        "def test_merge_on_cat_and_ext_array():\n    # GH 28668\n    right = DataFrame(\n        {\"a\": Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype=\"interval\")}\n    )\n    left = right.copy()\n    left[\"a\"] = left[\"a\"].astype(\"category\")\n\n    result = pd.merge(left, right, how=\"inner\", on=\"a\")\n    expected = right.copy()\n\n    assert_frame_equal(result, expected)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_137/pandas/tests/extension/test_categorical.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_137/pandas/tests/extension/test_categorical.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_137/pandas/tests/extension/test_categorical.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_137/pandas/tests/extension/test_categorical.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_137/pandas/tests/reshape/merge/test_merge.py"
    ],
    "2.1.1": [
        [
            "E       TypeError: data type not understood"
        ],
        [
            "E       TypeError: data type not understood"
        ],
        [
            "E       TypeError: data type not understood"
        ],
        [
            "E           ValueError: Cannot convert float NaN to integer"
        ],
        [
            "E       TypeError: data type not understood"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.extension.test_categorical.TestCasting object at 0x118da1070>\nexpected = 0   2019-01-01 00:00:00+00:00\n1   2020-01-01 00:00:00+00:00\ndtype: datetime64[ns, UTC]\n\n    @pytest.mark.parametrize(\n        \"expected\",\n        [\n            pd.Series([\"2019\", \"2020\"], dtype=\"datetime64[ns, UTC]\"),\n            pd.Series([0, 0], dtype=\"timedelta64[ns]\"),\n            pd.Series([pd.Period(\"2019\"), pd.Period(\"2020\")], dtype=\"period[A-DEC]\"),\n            pd.Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype=\"interval\"),\n            pd.Series([1, np.nan], dtype=\"Int64\"),\n        ],\n    )\n    def test_cast_category_to_extension_dtype(self, expected):\n        # GH 28668\n>       result = expected.astype(\"category\").astype(expected.dtype)\n\npandas/tests/extension/test_categorical.py:222: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/generic.py:5914: in astype\n    new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)\npandas/core/internals/managers.py:581: in astype\n    return self.apply(\"astype\", dtype=dtype, **kwargs)\npandas/core/internals/managers.py:438: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:540: in astype\n    return self._astype(dtype, copy=copy, errors=errors, **kwargs)\npandas/core/internals/blocks.py:594: in _astype\n    values = self.values.astype(dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]\nCategories (2, datetime64[ns, UTC]): [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]\ndtype = datetime64[ns, UTC], copy = True\n\n    def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:\n        \"\"\"\n        Coerce this type to another dtype\n    \n        Parameters\n        ----------\n        dtype : numpy dtype or pandas type\n        copy : bool, default True\n            By default, astype always returns a newly allocated object.\n            If copy is set to False and dtype is categorical, the original\n            object is returned.\n        \"\"\"\n        if is_categorical_dtype(dtype):\n            dtype = cast(Union[str, CategoricalDtype], dtype)\n    \n            # GH 10696/18593\n            dtype = self.dtype.update_dtype(dtype)\n            self = self.copy() if copy else self\n            if dtype == self.dtype:\n                return self\n            return self._set_dtype(dtype)\n        if is_integer_dtype(dtype) and self.isna().any():\n            msg = \"Cannot convert float NaN to integer\"\n            raise ValueError(msg)\n>       return np.array(self, dtype=dtype, copy=copy)",
            "\npandas/core/arrays/categorical.py:526: TypeError"
        ],
        [
            "self = <pandas.tests.extension.test_categorical.TestCasting object at 0x121610190>\nexpected = 0    2019\n1    2020\ndtype: period[A-DEC]\n\n    @pytest.mark.parametrize(\n        \"expected\",\n        [\n            pd.Series([\"2019\", \"2020\"], dtype=\"datetime64[ns, UTC]\"),\n            pd.Series([0, 0], dtype=\"timedelta64[ns]\"),\n            pd.Series([pd.Period(\"2019\"), pd.Period(\"2020\")], dtype=\"period[A-DEC]\"),\n            pd.Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype=\"interval\"),\n            pd.Series([1, np.nan], dtype=\"Int64\"),\n        ],\n    )\n    def test_cast_category_to_extension_dtype(self, expected):\n        # GH 28668\n>       result = expected.astype(\"category\").astype(expected.dtype)\n\npandas/tests/extension/test_categorical.py:222: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/generic.py:5914: in astype\n    new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)\npandas/core/internals/managers.py:581: in astype\n    return self.apply(\"astype\", dtype=dtype, **kwargs)\npandas/core/internals/managers.py:438: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:540: in astype\n    return self._astype(dtype, copy=copy, errors=errors, **kwargs)\npandas/core/internals/blocks.py:594: in _astype\n    values = self.values.astype(dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = [2019, 2020]\nCategories (2, period[A-DEC]): [2019, 2020]\ndtype = period[A-DEC], copy = True\n\n    def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:\n        \"\"\"\n        Coerce this type to another dtype\n    \n        Parameters\n        ----------\n        dtype : numpy dtype or pandas type\n        copy : bool, default True\n            By default, astype always returns a newly allocated object.\n            If copy is set to False and dtype is categorical, the original\n            object is returned.\n        \"\"\"\n        if is_categorical_dtype(dtype):\n            dtype = cast(Union[str, CategoricalDtype], dtype)\n    \n            # GH 10696/18593\n            dtype = self.dtype.update_dtype(dtype)\n            self = self.copy() if copy else self\n            if dtype == self.dtype:\n                return self\n            return self._set_dtype(dtype)\n        if is_integer_dtype(dtype) and self.isna().any():\n            msg = \"Cannot convert float NaN to integer\"\n            raise ValueError(msg)\n>       return np.array(self, dtype=dtype, copy=copy)",
            "\npandas/core/arrays/categorical.py:526: TypeError"
        ],
        [
            "self = <pandas.tests.extension.test_categorical.TestCasting object at 0x121413ca0>\nexpected = 0    (0, 1]\n1    (1, 2]\ndtype: interval\n\n    @pytest.mark.parametrize(\n        \"expected\",\n        [\n            pd.Series([\"2019\", \"2020\"], dtype=\"datetime64[ns, UTC]\"),\n            pd.Series([0, 0], dtype=\"timedelta64[ns]\"),\n            pd.Series([pd.Period(\"2019\"), pd.Period(\"2020\")], dtype=\"period[A-DEC]\"),\n            pd.Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype=\"interval\"),\n            pd.Series([1, np.nan], dtype=\"Int64\"),\n        ],\n    )\n    def test_cast_category_to_extension_dtype(self, expected):\n        # GH 28668\n>       result = expected.astype(\"category\").astype(expected.dtype)\n\npandas/tests/extension/test_categorical.py:222: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/generic.py:5914: in astype\n    new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)\npandas/core/internals/managers.py:581: in astype\n    return self.apply(\"astype\", dtype=dtype, **kwargs)\npandas/core/internals/managers.py:438: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:540: in astype\n    return self._astype(dtype, copy=copy, errors=errors, **kwargs)\npandas/core/internals/blocks.py:594: in _astype\n    values = self.values.astype(dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = [(0, 1], (1, 2]]\nCategories (2, interval[int64]): [(0, 1], (1, 2]]\ndtype = interval[int64], copy = True\n\n    def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:\n        \"\"\"\n        Coerce this type to another dtype\n    \n        Parameters\n        ----------\n        dtype : numpy dtype or pandas type\n        copy : bool, default True\n            By default, astype always returns a newly allocated object.\n            If copy is set to False and dtype is categorical, the original\n            object is returned.\n        \"\"\"\n        if is_categorical_dtype(dtype):\n            dtype = cast(Union[str, CategoricalDtype], dtype)\n    \n            # GH 10696/18593\n            dtype = self.dtype.update_dtype(dtype)\n            self = self.copy() if copy else self\n            if dtype == self.dtype:\n                return self\n            return self._set_dtype(dtype)\n        if is_integer_dtype(dtype) and self.isna().any():\n            msg = \"Cannot convert float NaN to integer\"\n            raise ValueError(msg)\n>       return np.array(self, dtype=dtype, copy=copy)",
            "\npandas/core/arrays/categorical.py:526: TypeError"
        ],
        [
            "self = <pandas.tests.extension.test_categorical.TestCasting object at 0x121298730>\nexpected = 0      1\n1    NaN\ndtype: Int64\n\n    @pytest.mark.parametrize(\n        \"expected\",\n        [\n            pd.Series([\"2019\", \"2020\"], dtype=\"datetime64[ns, UTC]\"),\n            pd.Series([0, 0], dtype=\"timedelta64[ns]\"),\n            pd.Series([pd.Period(\"2019\"), pd.Period(\"2020\")], dtype=\"period[A-DEC]\"),\n            pd.Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype=\"interval\"),\n            pd.Series([1, np.nan], dtype=\"Int64\"),\n        ],\n    )\n    def test_cast_category_to_extension_dtype(self, expected):\n        # GH 28668\n>       result = expected.astype(\"category\").astype(expected.dtype)\n\npandas/tests/extension/test_categorical.py:222: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/generic.py:5914: in astype\n    new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)\npandas/core/internals/managers.py:581: in astype\n    return self.apply(\"astype\", dtype=dtype, **kwargs)\npandas/core/internals/managers.py:438: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:540: in astype\n    return self._astype(dtype, copy=copy, errors=errors, **kwargs)\npandas/core/internals/blocks.py:594: in _astype\n    values = self.values.astype(dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = [1, NaN]\nCategories (1, int64): [1], dtype = Int64Dtype(), copy = True\n\n    def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:\n        \"\"\"\n        Coerce this type to another dtype\n    \n        Parameters\n        ----------\n        dtype : numpy dtype or pandas type\n        copy : bool, default True\n            By default, astype always returns a newly allocated object.\n            If copy is set to False and dtype is categorical, the original\n            object is returned.\n        \"\"\"\n        if is_categorical_dtype(dtype):\n            dtype = cast(Union[str, CategoricalDtype], dtype)\n    \n            # GH 10696/18593\n            dtype = self.dtype.update_dtype(dtype)\n            self = self.copy() if copy else self\n            if dtype == self.dtype:\n                return self\n            return self._set_dtype(dtype)\n        if is_integer_dtype(dtype) and self.isna().any():\n            msg = \"Cannot convert float NaN to integer\"\n>           raise ValueError(msg)",
            "\npandas/core/arrays/categorical.py:525: ValueError"
        ],
        [
            "def test_merge_on_cat_and_ext_array():\n        # GH 28668\n        right = DataFrame(\n            {\"a\": Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype=\"interval\")}\n        )\n        left = right.copy()\n        left[\"a\"] = left[\"a\"].astype(\"category\")\n    \n>       result = pd.merge(left, right, how=\"inner\", on=\"a\")\n\npandas/tests/reshape/merge/test_merge.py:2107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/reshape/merge.py:69: in merge\n    op = _MergeOperation(\npandas/core/reshape/merge.py:615: in __init__\n    self._maybe_coerce_merge_keys()\npandas/core/reshape/merge.py:1147: in _maybe_coerce_merge_keys\n    self.left = self.left.assign(**{name: self.left[name].astype(typ)})\npandas/core/generic.py:5914: in astype\n    new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)\npandas/core/internals/managers.py:581: in astype\n    return self.apply(\"astype\", dtype=dtype, **kwargs)\npandas/core/internals/managers.py:438: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:540: in astype\n    return self._astype(dtype, copy=copy, errors=errors, **kwargs)\npandas/core/internals/blocks.py:594: in _astype\n    values = self.values.astype(dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = [(0, 1], (1, 2]]\nCategories (2, interval[int64]): [(0, 1], (1, 2]]\ndtype = interval[int64], copy = True\n\n    def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:\n        \"\"\"\n        Coerce this type to another dtype\n    \n        Parameters\n        ----------\n        dtype : numpy dtype or pandas type\n        copy : bool, default True\n            By default, astype always returns a newly allocated object.\n            If copy is set to False and dtype is categorical, the original\n            object is returned.\n        \"\"\"\n        if is_categorical_dtype(dtype):\n            dtype = cast(Union[str, CategoricalDtype], dtype)\n    \n            # GH 10696/18593\n            dtype = self.dtype.update_dtype(dtype)\n            self = self.copy() if copy else self\n            if dtype == self.dtype:\n                return self\n            return self._set_dtype(dtype)\n        if is_integer_dtype(dtype) and self.isna().any():\n            msg = \"Cannot convert float NaN to integer\"\n            raise ValueError(msg)\n>       return np.array(self, dtype=dtype, copy=copy)",
            "\npandas/core/arrays/categorical.py:526: TypeError"
        ]
    ],
    "2.1.3": [
        [
            {
                "dtype": "datetime64[ns, UTC]",
                "self.dtype": "CategoricalDtype(categories=['2019-01-01 00:00:00+00:00', '2020-01-01 00:00:00+00:00'], ordered=False)",
                "self": "[2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]\nCategories (2, datetime64[ns, UTC]): [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]",
                "copy": "True",
                "self.copy": "<bound method Categorical.copy of [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]\nCategories (2, datetime64[ns, UTC]): [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]>",
                "self._set_dtype": "<bound method Categorical._set_dtype of [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]\nCategories (2, datetime64[ns, UTC]): [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]>",
                "self.isna": "<bound method Categorical.isna of [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]\nCategories (2, datetime64[ns, UTC]): [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]>"
            },
            {}
        ],
        [
            {
                "dtype": "dtype('<m8[ns]')",
                "self.dtype": "CategoricalDtype(categories=['0 days'], ordered=False)",
                "self": "[0 days, 0 days]\nCategories (1, timedelta64[ns]): [0 days]",
                "copy": "True",
                "self.copy": "<bound method Categorical.copy of [0 days, 0 days]\nCategories (1, timedelta64[ns]): [0 days]>",
                "self._set_dtype": "<bound method Categorical._set_dtype of [0 days, 0 days]\nCategories (1, timedelta64[ns]): [0 days]>",
                "self.isna": "<bound method Categorical.isna of [0 days, 0 days]\nCategories (1, timedelta64[ns]): [0 days]>"
            },
            {}
        ],
        [
            {
                "dtype": "period[A-DEC]",
                "self.dtype": "CategoricalDtype(categories=['2019', '2020'], ordered=False)",
                "self": "[2019, 2020]\nCategories (2, period[A-DEC]): [2019, 2020]",
                "copy": "True",
                "self.copy": "<bound method Categorical.copy of [2019, 2020]\nCategories (2, period[A-DEC]): [2019, 2020]>",
                "self._set_dtype": "<bound method Categorical._set_dtype of [2019, 2020]\nCategories (2, period[A-DEC]): [2019, 2020]>",
                "self.isna": "<bound method Categorical.isna of [2019, 2020]\nCategories (2, period[A-DEC]): [2019, 2020]>"
            },
            {}
        ],
        [
            {
                "dtype": "interval[int64]",
                "self.dtype": "CategoricalDtype(categories=[(0, 1], (1, 2]],\n              ordered=False)",
                "self": "[(0, 1], (1, 2]]\nCategories (2, interval[int64]): [(0, 1], (1, 2]]",
                "copy": "True",
                "self.copy": "<bound method Categorical.copy of [(0, 1], (1, 2]]\nCategories (2, interval[int64]): [(0, 1], (1, 2]]>",
                "self._set_dtype": "<bound method Categorical._set_dtype of [(0, 1], (1, 2]]\nCategories (2, interval[int64]): [(0, 1], (1, 2]]>",
                "self.isna": "<bound method Categorical.isna of [(0, 1], (1, 2]]\nCategories (2, interval[int64]): [(0, 1], (1, 2]]>"
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "dtype": "DatetimeTZDtype",
                "self.dtype": "CategoricalDtype",
                "self": "Categorical",
                "copy": "bool",
                "self.copy": "method",
                "self._set_dtype": "method",
                "self.isna": "method"
            },
            {}
        ],
        [
            {
                "dtype": "dtype",
                "self.dtype": "CategoricalDtype",
                "self": "Categorical",
                "copy": "bool",
                "self.copy": "method",
                "self._set_dtype": "method",
                "self.isna": "method"
            },
            {}
        ],
        [
            {
                "dtype": "PeriodDtype",
                "self.dtype": "CategoricalDtype",
                "self": "Categorical",
                "copy": "bool",
                "self.copy": "method",
                "self._set_dtype": "method",
                "self.isna": "method"
            },
            {}
        ],
        [
            {
                "dtype": "IntervalDtype",
                "self.dtype": "CategoricalDtype",
                "self": "Categorical",
                "copy": "bool",
                "self.copy": "method",
                "self._set_dtype": "method",
                "self.isna": "method"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "dtype": "datetime64[ns, UTC]",
                "self.dtype": "CategoricalDtype(categories=['2019-01-01 00:00:00+00:00', '2020-01-01 00:00:00+00:00'], ordered=False)",
                "self": "[2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]\nCategories (2, datetime64[ns, UTC]): [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]",
                "copy": "True",
                "self.copy": "<bound method Categorical.copy of [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]\nCategories (2, datetime64[ns, UTC]): [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]>",
                "self._set_dtype": "<bound method Categorical._set_dtype of [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]\nCategories (2, datetime64[ns, UTC]): [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]>",
                "self.isna": "<bound method Categorical.isna of [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]\nCategories (2, datetime64[ns, UTC]): [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]>"
            },
            {}
        ],
        [
            {
                "dtype": "dtype('<m8[ns]')",
                "self.dtype": "CategoricalDtype(categories=['0 days'], ordered=False)",
                "self": "[0 days, 0 days]\nCategories (1, timedelta64[ns]): [0 days]",
                "copy": "True",
                "self.copy": "<bound method Categorical.copy of [0 days, 0 days]\nCategories (1, timedelta64[ns]): [0 days]>",
                "self._set_dtype": "<bound method Categorical._set_dtype of [0 days, 0 days]\nCategories (1, timedelta64[ns]): [0 days]>",
                "self.isna": "<bound method Categorical.isna of [0 days, 0 days]\nCategories (1, timedelta64[ns]): [0 days]>"
            },
            {}
        ],
        [
            {
                "dtype": "period[A-DEC]",
                "self.dtype": "CategoricalDtype(categories=['2019', '2020'], ordered=False)",
                "self": "[2019, 2020]\nCategories (2, period[A-DEC]): [2019, 2020]",
                "copy": "True",
                "self.copy": "<bound method Categorical.copy of [2019, 2020]\nCategories (2, period[A-DEC]): [2019, 2020]>",
                "self._set_dtype": "<bound method Categorical._set_dtype of [2019, 2020]\nCategories (2, period[A-DEC]): [2019, 2020]>",
                "self.isna": "<bound method Categorical.isna of [2019, 2020]\nCategories (2, period[A-DEC]): [2019, 2020]>"
            },
            {}
        ],
        [
            {
                "dtype": "interval[int64]",
                "self.dtype": "CategoricalDtype(categories=[(0, 1], (1, 2]],\n              ordered=False)",
                "self": "[(0, 1], (1, 2]]\nCategories (2, interval[int64]): [(0, 1], (1, 2]]",
                "copy": "True",
                "self.copy": "<bound method Categorical.copy of [(0, 1], (1, 2]]\nCategories (2, interval[int64]): [(0, 1], (1, 2]]>",
                "self._set_dtype": "<bound method Categorical._set_dtype of [(0, 1], (1, 2]]\nCategories (2, interval[int64]): [(0, 1], (1, 2]]>",
                "self.isna": "<bound method Categorical.isna of [(0, 1], (1, 2]]\nCategories (2, interval[int64]): [(0, 1], (1, 2]]>"
            },
            {}
        ],
        [
            {
                "dtype": "Int64Dtype()",
                "self.dtype": "CategoricalDtype(categories=[1], ordered=False)",
                "self": "[1, NaN]\nCategories (1, int64): [1]",
                "copy": "True",
                "self.copy": "<bound method Categorical.copy of [1, NaN]\nCategories (1, int64): [1]>",
                "self._set_dtype": "<bound method Categorical._set_dtype of [1, NaN]\nCategories (1, int64): [1]>",
                "self.isna": "<bound method Categorical.isna of [1, NaN]\nCategories (1, int64): [1]>"
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "dtype": "DatetimeTZDtype",
                "self.dtype": "CategoricalDtype",
                "self": "Categorical",
                "copy": "bool",
                "self.copy": "method",
                "self._set_dtype": "method",
                "self.isna": "method"
            },
            {}
        ],
        [
            {
                "dtype": "dtype",
                "self.dtype": "CategoricalDtype",
                "self": "Categorical",
                "copy": "bool",
                "self.copy": "method",
                "self._set_dtype": "method",
                "self.isna": "method"
            },
            {}
        ],
        [
            {
                "dtype": "PeriodDtype",
                "self.dtype": "CategoricalDtype",
                "self": "Categorical",
                "copy": "bool",
                "self.copy": "method",
                "self._set_dtype": "method",
                "self.isna": "method"
            },
            {}
        ],
        [
            {
                "dtype": "IntervalDtype",
                "self.dtype": "CategoricalDtype",
                "self": "Categorical",
                "copy": "bool",
                "self.copy": "method",
                "self._set_dtype": "method",
                "self.isna": "method"
            },
            {}
        ],
        [
            {
                "dtype": "Int64Dtype",
                "self.dtype": "CategoricalDtype",
                "self": "Categorical",
                "copy": "bool",
                "self.copy": "method",
                "self._set_dtype": "method",
                "self.isna": "method"
            },
            {}
        ]
    ],
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}