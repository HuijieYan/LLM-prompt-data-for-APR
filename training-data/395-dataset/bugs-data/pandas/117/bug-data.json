{
    "pandas:117": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_117/pandas/core/dtypes/missing.py": {
            "buggy_functions": [
                {
                    "function_name": "_isna_old",
                    "function_code": "def _isna_old(obj):\n    \"\"\"\n    Detect missing values, treating None, NaN, INF, -INF as null.\n\n    Parameters\n    ----------\n    arr: ndarray or object value\n\n    Returns\n    -------\n    boolean ndarray or boolean\n    \"\"\"\n    if is_scalar(obj):\n        return libmissing.checknull_old(obj)\n    # hack (for now) because MI registers as ndarray\n    elif isinstance(obj, ABCMultiIndex):\n        raise NotImplementedError(\"isna is not defined for MultiIndex\")\n    elif isinstance(obj, type):\n        return False\n    elif isinstance(obj, (ABCSeries, np.ndarray, ABCIndexClass)):\n        return _isna_ndarraylike_old(obj)\n    elif isinstance(obj, ABCGeneric):\n        return obj._constructor(obj._data.isna(func=_isna_old))\n    elif isinstance(obj, list):\n        return _isna_ndarraylike_old(np.asarray(obj, dtype=object))\n    elif hasattr(obj, \"__array__\"):\n        return _isna_ndarraylike_old(np.asarray(obj))\n    else:\n        return obj is None\n",
                    "decorators": [],
                    "docstring": "Detect missing values, treating None, NaN, INF, -INF as null.\n\nParameters\n----------\narr: ndarray or object value\n\nReturns\n-------\nboolean ndarray or boolean",
                    "start_line": 160,
                    "end_line": 188,
                    "variables": {
                        "is_scalar": [
                            172
                        ],
                        "obj": [
                            172,
                            173,
                            175,
                            177,
                            179,
                            180,
                            181,
                            182,
                            183,
                            184,
                            185,
                            186,
                            188
                        ],
                        "libmissing.checknull_old": [
                            173
                        ],
                        "libmissing": [
                            173
                        ],
                        "isinstance": [
                            175,
                            177,
                            179,
                            181,
                            183
                        ],
                        "ABCMultiIndex": [
                            175
                        ],
                        "NotImplementedError": [
                            176
                        ],
                        "type": [
                            177
                        ],
                        "ABCSeries": [
                            179
                        ],
                        "np.ndarray": [
                            179
                        ],
                        "np": [
                            184,
                            186,
                            179
                        ],
                        "ABCIndexClass": [
                            179
                        ],
                        "_isna_ndarraylike_old": [
                            184,
                            186,
                            180
                        ],
                        "ABCGeneric": [
                            181
                        ],
                        "obj._constructor": [
                            182
                        ],
                        "obj._data.isna": [
                            182
                        ],
                        "obj._data": [
                            182
                        ],
                        "_isna_old": [
                            182
                        ],
                        "list": [
                            183
                        ],
                        "np.asarray": [
                            184,
                            186
                        ],
                        "object": [
                            184
                        ],
                        "hasattr": [
                            185
                        ]
                    },
                    "filtered_variables": {
                        "is_scalar": [
                            172
                        ],
                        "obj": [
                            172,
                            173,
                            175,
                            177,
                            179,
                            180,
                            181,
                            182,
                            183,
                            184,
                            185,
                            186,
                            188
                        ],
                        "libmissing.checknull_old": [
                            173
                        ],
                        "libmissing": [
                            173
                        ],
                        "ABCMultiIndex": [
                            175
                        ],
                        "ABCSeries": [
                            179
                        ],
                        "np.ndarray": [
                            179
                        ],
                        "np": [
                            184,
                            186,
                            179
                        ],
                        "ABCIndexClass": [
                            179
                        ],
                        "_isna_ndarraylike_old": [
                            184,
                            186,
                            180
                        ],
                        "ABCGeneric": [
                            181
                        ],
                        "obj._constructor": [
                            182
                        ],
                        "obj._data.isna": [
                            182
                        ],
                        "obj._data": [
                            182
                        ],
                        "_isna_old": [
                            182
                        ],
                        "np.asarray": [
                            184,
                            186
                        ]
                    },
                    "diff_line_number": 179,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "<DatetimeArray>\n['1990-01-01 00:00:00']\nLength: 1, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(1,)"
                                },
                                "libmissing.checknull_old": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "libmissing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCIndexClass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_isna_ndarraylike_old": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCGeneric": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj._constructor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "obj._data.isna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "obj._data": {
                                    "variable_value": "array(['1990-01-01T00:00:00.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "_isna_old": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "<DatetimeArray>\n['1990-01-01 00:00:00']\nLength: 1, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(1,)"
                                },
                                "libmissing.checknull_old": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "libmissing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCIndexClass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_isna_ndarraylike_old": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCGeneric": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj._constructor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "obj._data.isna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "obj._data": {
                                    "variable_value": "array(['1990-01-01T00:00:00.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "_isna_old": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "<DatetimeArray>\n['1990-01-01 00:00:00']\nLength: 1, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(1,)"
                                },
                                "libmissing.checknull_old": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "libmissing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCIndexClass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCExtensionArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_isna_ndarraylike_old": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCGeneric": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj._constructor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "obj._data.isna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "obj._data": {
                                    "variable_value": "array(['1990-01-01T00:00:00.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "_isna_old": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "<DatetimeArray>\n['1990-01-01 00:00:00']\nLength: 1, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(1,)"
                                },
                                "libmissing.checknull_old": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "libmissing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCIndexClass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCExtensionArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_isna_ndarraylike_old": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCGeneric": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj._constructor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "obj._data.isna": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "obj._data": {
                                    "variable_value": "array(['1990-01-01T00:00:00.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "_isna_old": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def isna(obj):\n    \"\"\"\n    Detect missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are missing (``NaN`` in numeric arrays, ``None`` or ``NaN``\n    in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : scalar or array-like\n        Object to check for null or missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is missing.\n\n    See Also\n    --------\n    notna : Boolean inverse of pandas.isna.\n    Series.isna : Detect missing values in a Series.\n    DataFrame.isna : Detect missing values in a DataFrame.\n    Index.isna : Detect missing values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.isna('dog')\n    False\n\n    >>> pd.isna(np.nan)\n    True\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.isna(array)\n    array([[False,  True, False],\n           [False, False,  True]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                           \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.isna(index)\n    array([False, False,  True, False])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.isna(df)\n           0      1      2\n    0  False  False  False\n    1  False   True  False\n\n    >>> pd.isna(df[1])\n    0    False\n    1     True\n    Name: 1, dtype: bool\n    \"\"\"\n    return _isna(obj)",
                "def _isna_new(obj):\n\n    if is_scalar(obj):\n        return libmissing.checknull(obj)\n    # hack (for now) because MI registers as ndarray\n    elif isinstance(obj, ABCMultiIndex):\n        raise NotImplementedError(\"isna is not defined for MultiIndex\")\n    elif isinstance(obj, type):\n        return False\n    elif isinstance(\n        obj,\n        (\n            ABCSeries,\n            np.ndarray,\n            ABCIndexClass,\n            ABCExtensionArray,\n            ABCDatetimeArray,\n            ABCTimedeltaArray,\n        ),\n    ):\n        return _isna_ndarraylike(obj)\n    elif isinstance(obj, ABCGeneric):\n        return obj._constructor(obj._data.isna(func=isna))\n    elif isinstance(obj, list):\n        return _isna_ndarraylike(np.asarray(obj, dtype=object))\n    elif hasattr(obj, \"__array__\"):\n        return _isna_ndarraylike(np.asarray(obj))\n    else:\n        return obj is None",
                "def _isna_old(obj):\n    \"\"\"\n    Detect missing values, treating None, NaN, INF, -INF as null.\n\n    Parameters\n    ----------\n    arr: ndarray or object value\n\n    Returns\n    -------\n    boolean ndarray or boolean\n    \"\"\"\n    if is_scalar(obj):\n        return libmissing.checknull_old(obj)\n    # hack (for now) because MI registers as ndarray\n    elif isinstance(obj, ABCMultiIndex):\n        raise NotImplementedError(\"isna is not defined for MultiIndex\")\n    elif isinstance(obj, type):\n        return False\n    elif isinstance(obj, (ABCSeries, np.ndarray, ABCIndexClass)):\n        return _isna_ndarraylike_old(obj)\n    elif isinstance(obj, ABCGeneric):\n        return obj._constructor(obj._data.isna(func=_isna_old))\n    elif isinstance(obj, list):\n        return _isna_ndarraylike_old(np.asarray(obj, dtype=object))\n    elif hasattr(obj, \"__array__\"):\n        return _isna_ndarraylike_old(np.asarray(obj))\n    else:\n        return obj is None",
                "def _use_inf_as_na(key):\n    \"\"\"\n    Option change callback for na/inf behaviour.\n\n    Choose which replacement for numpy.isnan / -numpy.isfinite is used.\n\n    Parameters\n    ----------\n    flag: bool\n        True means treat None, NaN, INF, -INF as null (old way),\n        False means None and NaN are null, but INF, -INF are not null\n        (new way).\n\n    Notes\n    -----\n    This approach to setting global module values is discussed and\n    approved here:\n\n    * http://stackoverflow.com/questions/4859217/\n      programmatically-creating-variables-in-python/4859312#4859312\n    \"\"\"\n    flag = get_option(key)\n    if flag:\n        globals()[\"_isna\"] = _isna_old\n    else:\n        globals()[\"_isna\"] = _isna_new",
                "def _isna_ndarraylike(obj):\n    is_extension = is_extension_array_dtype(obj)\n\n    if not is_extension:\n        # Avoid accessing `.values` on things like\n        # PeriodIndex, which may be expensive.\n        values = getattr(obj, \"values\", obj)\n    else:\n        values = obj\n\n    dtype = values.dtype\n\n    if is_extension:\n        if isinstance(obj, (ABCIndexClass, ABCSeries)):\n            values = obj._values\n        else:\n            values = obj\n        result = values.isna()\n    elif isinstance(obj, ABCDatetimeArray):\n        return obj.isna()\n    elif is_string_dtype(dtype):\n        # Working around NumPy ticket 1542\n        shape = values.shape\n\n        if is_string_like_dtype(dtype):\n            # object array of strings\n            result = np.zeros(values.shape, dtype=bool)\n        else:\n            # object array of non-strings\n            result = np.empty(shape, dtype=bool)\n            vec = libmissing.isnaobj(values.ravel())\n            result[...] = vec.reshape(shape)\n\n    elif needs_i8_conversion(dtype):\n        # this is the NaT pattern\n        result = values.view(\"i8\") == iNaT\n    else:\n        result = np.isnan(values)\n\n    # box\n    if isinstance(obj, ABCSeries):\n        result = obj._constructor(result, index=obj.index, name=obj.name, copy=False)\n\n    return result",
                "def _isna_ndarraylike_old(obj):\n    values = getattr(obj, \"values\", obj)\n    dtype = values.dtype\n\n    if is_string_dtype(dtype):\n        # Working around NumPy ticket 1542\n        shape = values.shape\n\n        if is_string_like_dtype(dtype):\n            result = np.zeros(values.shape, dtype=bool)\n        else:\n            result = np.empty(shape, dtype=bool)\n            vec = libmissing.isnaobj_old(values.ravel())\n            result[:] = vec.reshape(shape)\n\n    elif is_datetime64_dtype(dtype):\n        # this is the NaT pattern\n        result = values.view(\"i8\") == iNaT\n    else:\n        result = ~np.isfinite(values)\n\n    # box\n    if isinstance(obj, ABCSeries):\n        result = obj._constructor(result, index=obj.index, name=obj.name, copy=False)\n\n    return result",
                "def notna(obj):\n    \"\"\"\n    Detect non-missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are valid (not missing, which is ``NaN`` in numeric\n    arrays, ``None`` or ``NaN`` in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : array-like or object value\n        Object to check for *not* null or *non*-missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is valid.\n\n    See Also\n    --------\n    isna : Boolean inverse of pandas.notna.\n    Series.notna : Detect valid values in a Series.\n    DataFrame.notna : Detect valid values in a DataFrame.\n    Index.notna : Detect valid values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.notna('dog')\n    True\n\n    >>> pd.notna(np.nan)\n    False\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.notna(array)\n    array([[ True, False,  True],\n           [ True,  True, False]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                          \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.notna(index)\n    array([ True,  True, False,  True])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.notna(df)\n          0      1     2\n    0  True   True  True\n    1  True  False  True\n\n    >>> pd.notna(df[1])\n    0     True\n    1    False\n    Name: 1, dtype: bool\n    \"\"\"\n    res = isna(obj)\n    if is_scalar(res):\n        return not res\n    return ~res",
                "def _isna_compat(arr, fill_value=np.nan) -> bool:\n    \"\"\"\n    Parameters\n    ----------\n    arr: a numpy array\n    fill_value: fill value, default to np.nan\n\n    Returns\n    -------\n    True if we can fill using this fill_value\n    \"\"\"\n    dtype = arr.dtype\n    if isna(fill_value):\n        return not (is_bool_dtype(dtype) or is_integer_dtype(dtype))\n    return True",
                "def array_equivalent(left, right, strict_nan: bool = False) -> bool:\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations.  False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n\n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n\n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n\n    Examples\n    --------\n    >>> array_equivalent(\n    ...     np.array([1, 2, np.nan]),\n    ...     np.array([1, 2, np.nan]))\n    True\n    >>> array_equivalent(\n    ...     np.array([1, np.nan, 2]),\n    ...     np.array([1, 2, np.nan]))\n    False\n    \"\"\"\n\n    left, right = np.asarray(left), np.asarray(right)\n\n    # shape compat\n    if left.shape != right.shape:\n        return False\n\n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    if is_string_dtype(left) or is_string_dtype(right):\n\n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return lib.array_equivalent_object(\n                ensure_object(left.ravel()), ensure_object(right.ravel())\n            )\n\n        for left_value, right_value in zip(left, right):\n            if left_value is NaT and right_value is not NaT:\n                return False\n\n            elif isinstance(left_value, float) and np.isnan(left_value):\n                if not isinstance(right_value, float) or not np.isnan(right_value):\n                    return False\n            else:\n                try:\n                    if np.any(np.asarray(left_value != right_value)):\n                        return False\n                except TypeError as err:\n                    if \"Cannot compare tz-naive\" in str(err):\n                        # tzawareness compat failure, see GH#28507\n                        return False\n                    raise\n        return True\n\n    # NaNs can occur in float and complex arrays.\n    if is_float_dtype(left) or is_complex_dtype(left):\n\n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((left == right) | (isna(left) & isna(right))).all()\n\n    elif is_datetimelike_v_numeric(left, right):\n        # GH#29553 avoid numpy deprecation warning\n        return False\n\n    elif needs_i8_conversion(left) or needs_i8_conversion(right):\n        # datetime64, timedelta64, Period\n        if not is_dtype_equal(left.dtype, right.dtype):\n            return False\n\n        left = left.view(\"i8\")\n        right = right.view(\"i8\")\n\n    # if we have structured dtypes, compare first\n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if left.dtype != right.dtype:\n            return False\n\n    return np.array_equal(left, right)",
                "def _infer_fill_value(val):\n    \"\"\"\n    infer the fill value for the nan/NaT from the provided\n    scalar/ndarray/list-like if we are a NaT, return the correct dtyped\n    element to provide proper block construction\n    \"\"\"\n\n    if not is_list_like(val):\n        val = [val]\n    val = np.array(val, copy=False)\n    if needs_i8_conversion(val):\n        return np.array(\"NaT\", dtype=val.dtype)\n    elif is_object_dtype(val.dtype):\n        dtype = lib.infer_dtype(ensure_object(val), skipna=False)\n        if dtype in [\"datetime\", \"datetime64\"]:\n            return np.array(\"NaT\", dtype=_NS_DTYPE)\n        elif dtype in [\"timedelta\", \"timedelta64\"]:\n            return np.array(\"NaT\", dtype=_TD_DTYPE)\n    return np.nan",
                "def _maybe_fill(arr, fill_value=np.nan):\n    \"\"\"\n    if we have a compatible fill_value and arr dtype, then fill\n    \"\"\"\n    if _isna_compat(arr, fill_value):\n        arr.fill(fill_value)\n    return arr",
                "def na_value_for_dtype(dtype, compat: bool = True):\n    \"\"\"\n    Return a dtype compat na value\n\n    Parameters\n    ----------\n    dtype : string / dtype\n    compat : bool, default True\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Examples\n    --------\n    >>> na_value_for_dtype(np.dtype('int64'))\n    0\n    >>> na_value_for_dtype(np.dtype('int64'), compat=False)\n    nan\n    >>> na_value_for_dtype(np.dtype('float64'))\n    nan\n    >>> na_value_for_dtype(np.dtype('bool'))\n    False\n    >>> na_value_for_dtype(np.dtype('datetime64[ns]'))\n    NaT\n    \"\"\"\n    dtype = pandas_dtype(dtype)\n\n    if is_extension_array_dtype(dtype):\n        return dtype.na_value\n    if (\n        is_datetime64_dtype(dtype)\n        or is_datetime64tz_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n        or is_period_dtype(dtype)\n    ):\n        return NaT\n    elif is_float_dtype(dtype):\n        return np.nan\n    elif is_integer_dtype(dtype):\n        if compat:\n            return 0\n        return np.nan\n    elif is_bool_dtype(dtype):\n        return False\n    return np.nan",
                "def remove_na_arraylike(arr):\n    \"\"\"\n    Return array-like containing only true/non-NaN values, possibly empty.\n    \"\"\"\n    if is_extension_array_dtype(arr):\n        return arr[notna(arr)]\n    else:\n        return arr[notna(lib.values_from_object(arr))]",
                "def is_valid_nat_for_dtype(obj, dtype) -> bool:\n    \"\"\"\n    isna check that excludes incompatible dtypes\n\n    Parameters\n    ----------\n    obj : object\n    dtype : np.datetime64, np.timedelta64, DatetimeTZDtype, or PeriodDtype\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if not lib.is_scalar(obj) or not isna(obj):\n        return False\n    if dtype.kind == \"M\":\n        return not isinstance(obj, np.timedelta64)\n    if dtype.kind == \"m\":\n        return not isinstance(obj, np.datetime64)\n\n    # must be PeriodDType\n    return not isinstance(obj, (np.datetime64, np.timedelta64))"
            ],
            "inscope_function_signatures": [
                "isna(obj)",
                "_isna_new(obj)",
                "_isna_old(obj)",
                "_use_inf_as_na(key)",
                "_isna_ndarraylike(obj)",
                "_isna_ndarraylike_old(obj)",
                "notna(obj)",
                "_isna_compat(arr, fill_value=np.nan) -> bool",
                "array_equivalent(left, right, strict_nan: bool=False) -> bool",
                "_infer_fill_value(val)",
                "_maybe_fill(arr, fill_value=np.nan)",
                "na_value_for_dtype(dtype, compat: bool=True)",
                "remove_na_arraylike(arr)",
                "is_valid_nat_for_dtype(obj, dtype) -> bool"
            ],
            "variables_in_file": {
                "isposinf_scalar": [
                    45
                ],
                "libmissing.isposinf_scalar": [
                    45
                ],
                "libmissing": [
                    132,
                    45,
                    46,
                    173,
                    280,
                    252
                ],
                "isneginf_scalar": [
                    46
                ],
                "libmissing.isneginf_scalar": [
                    46
                ],
                "_isna": [
                    123,
                    191
                ],
                "obj": [
                    131,
                    132,
                    134,
                    262,
                    136,
                    263,
                    139,
                    269,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    157,
                    290,
                    291,
                    172,
                    173,
                    175,
                    177,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    188,
                    590,
                    593,
                    595,
                    598,
                    223,
                    228,
                    230,
                    235,
                    236,
                    238,
                    240,
                    241,
                    370,
                    123
                ],
                "isnull": [
                    126
                ],
                "isna": [
                    391,
                    590,
                    370,
                    467,
                    151,
                    126
                ],
                "is_scalar": [
                    371,
                    131,
                    172
                ],
                "libmissing.checknull": [
                    132
                ],
                "isinstance": [
                    134,
                    262,
                    136,
                    138,
                    150,
                    152,
                    290,
                    175,
                    177,
                    179,
                    181,
                    183,
                    447,
                    448,
                    593,
                    595,
                    598,
                    235,
                    240
                ],
                "ABCMultiIndex": [
                    134,
                    175
                ],
                "NotImplementedError": [
                    176,
                    135
                ],
                "type": [
                    136,
                    177
                ],
                "ABCSeries": [
                    290,
                    262,
                    235,
                    141,
                    179
                ],
                "np.ndarray": [
                    179,
                    142
                ],
                "np": [
                    259,
                    142,
                    277,
                    279,
                    153,
                    155,
                    287,
                    427,
                    557,
                    561,
                    179,
                    564,
                    184,
                    186,
                    447,
                    448,
                    452,
                    465,
                    593,
                    595,
                    598,
                    482,
                    486,
                    504,
                    498,
                    379,
                    500,
                    507,
                    248,
                    506,
                    251,
                    510
                ],
                "ABCIndexClass": [
                    179,
                    235,
                    143
                ],
                "ABCExtensionArray": [
                    144
                ],
                "ABCDatetimeArray": [
                    240,
                    145
                ],
                "ABCTimedeltaArray": [
                    146
                ],
                "_isna_ndarraylike": [
                    153,
                    155,
                    149
                ],
                "ABCGeneric": [
                    181,
                    150
                ],
                "obj._constructor": [
                    291,
                    263,
                    182,
                    151
                ],
                "obj._data.isna": [
                    182,
                    151
                ],
                "obj._data": [
                    182,
                    151
                ],
                "list": [
                    152,
                    183
                ],
                "np.asarray": [
                    452,
                    427,
                    184,
                    153,
                    186,
                    155
                ],
                "object": [
                    184,
                    153
                ],
                "hasattr": [
                    185,
                    154
                ],
                "libmissing.checknull_old": [
                    173
                ],
                "_isna_ndarraylike_old": [
                    184,
                    186,
                    180
                ],
                "_isna_old": [
                    217,
                    182
                ],
                "_isna_new": [
                    219,
                    191
                ],
                "flag": [
                    216,
                    215
                ],
                "get_option": [
                    215
                ],
                "key": [
                    215
                ],
                "globals": [
                    217,
                    219
                ],
                "is_extension": [
                    225,
                    234,
                    223
                ],
                "is_extension_array_dtype": [
                    571,
                    547,
                    223
                ],
                "values": [
                    257,
                    280,
                    259,
                    228,
                    230,
                    232,
                    236,
                    269,
                    238,
                    239,
                    270,
                    274,
                    244,
                    277,
                    248,
                    252,
                    285,
                    287
                ],
                "getattr": [
                    228,
                    269
                ],
                "dtype": [
                    390,
                    392,
                    270,
                    272,
                    276,
                    283,
                    545,
                    547,
                    548,
                    550,
                    551,
                    552,
                    553,
                    556,
                    558,
                    562,
                    592,
                    594,
                    232,
                    242,
                    246,
                    503,
                    502,
                    505,
                    255
                ],
                "values.dtype": [
                    232,
                    270
                ],
                "obj._values": [
                    236
                ],
                "result": [
                    257,
                    259,
                    291,
                    293,
                    263,
                    265,
                    239,
                    277,
                    279,
                    248,
                    281,
                    285,
                    251,
                    253,
                    287
                ],
                "values.isna": [
                    239
                ],
                "obj.isna": [
                    241
                ],
                "is_string_dtype": [
                    272,
                    242,
                    435
                ],
                "shape": [
                    274,
                    244,
                    279,
                    281,
                    251,
                    253
                ],
                "values.shape": [
                    248,
                    274,
                    244,
                    277
                ],
                "is_string_like_dtype": [
                    276,
                    246
                ],
                "np.zeros": [
                    248,
                    277
                ],
                "bool": [
                    577,
                    519,
                    396,
                    251,
                    277,
                    279,
                    248,
                    379
                ],
                "np.empty": [
                    251,
                    279
                ],
                "vec": [
                    280,
                    281,
                    252,
                    253
                ],
                "libmissing.isnaobj": [
                    252
                ],
                "values.ravel": [
                    280,
                    252
                ],
                "vec.reshape": [
                    281,
                    253
                ],
                "needs_i8_conversion": [
                    473,
                    499,
                    255
                ],
                "values.view": [
                    257,
                    285
                ],
                "iNaT": [
                    257,
                    285
                ],
                "np.isnan": [
                    448,
                    259,
                    447
                ],
                "obj.index": [
                    291,
                    263
                ],
                "obj.name": [
                    291,
                    263
                ],
                "libmissing.isnaobj_old": [
                    280
                ],
                "is_datetime64_dtype": [
                    283,
                    550
                ],
                "np.isfinite": [
                    287
                ],
                "res": [
                    370,
                    371,
                    372,
                    373
                ],
                "notnull": [
                    376
                ],
                "notna": [
                    376,
                    572,
                    574
                ],
                "np.nan": [
                    557,
                    561,
                    564,
                    507,
                    379,
                    510
                ],
                "arr.dtype": [
                    390
                ],
                "arr": [
                    514,
                    515,
                    516,
                    390,
                    571,
                    572,
                    574
                ],
                "fill_value": [
                    514,
                    515,
                    391
                ],
                "is_bool_dtype": [
                    392,
                    562
                ],
                "is_integer_dtype": [
                    392,
                    558
                ],
                "left": [
                    482,
                    483,
                    486,
                    427,
                    430,
                    462,
                    465,
                    435,
                    467,
                    469,
                    475,
                    440,
                    473,
                    443,
                    478
                ],
                "right": [
                    482,
                    483,
                    486,
                    427,
                    430,
                    465,
                    435,
                    467,
                    469,
                    475,
                    440,
                    473,
                    443,
                    479
                ],
                "left.shape": [
                    465,
                    430
                ],
                "right.shape": [
                    465,
                    430
                ],
                "strict_nan": [
                    437
                ],
                "lib.array_equivalent_object": [
                    439
                ],
                "lib": [
                    574,
                    590,
                    502,
                    439
                ],
                "ensure_object": [
                    440,
                    502
                ],
                "left.ravel": [
                    440
                ],
                "right.ravel": [
                    440
                ],
                "left_value": [
                    452,
                    443,
                    444,
                    447
                ],
                "right_value": [
                    448,
                    452,
                    443,
                    444
                ],
                "zip": [
                    443
                ],
                "NaT": [
                    555,
                    444
                ],
                "float": [
                    448,
                    447
                ],
                "np.any": [
                    452
                ],
                "TypeError": [
                    454
                ],
                "str": [
                    455
                ],
                "err": [
                    455
                ],
                "is_float_dtype": [
                    556,
                    462
                ],
                "is_complex_dtype": [
                    462
                ],
                "np.prod": [
                    465
                ],
                "all": [
                    467
                ],
                "is_datetimelike_v_numeric": [
                    469
                ],
                "is_dtype_equal": [
                    475
                ],
                "left.dtype": [
                    482,
                    475,
                    483
                ],
                "right.dtype": [
                    482,
                    475,
                    483
                ],
                "left.view": [
                    478
                ],
                "right.view": [
                    479
                ],
                "left.dtype.type": [
                    482
                ],
                "np.void": [
                    482
                ],
                "right.dtype.type": [
                    482
                ],
                "np.array_equal": [
                    486
                ],
                "is_list_like": [
                    496
                ],
                "val": [
                    496,
                    497,
                    498,
                    499,
                    500,
                    501,
                    502
                ],
                "np.array": [
                    504,
                    498,
                    506,
                    500
                ],
                "val.dtype": [
                    500,
                    501
                ],
                "is_object_dtype": [
                    501
                ],
                "lib.infer_dtype": [
                    502
                ],
                "_NS_DTYPE": [
                    504
                ],
                "_TD_DTYPE": [
                    506
                ],
                "_isna_compat": [
                    514
                ],
                "arr.fill": [
                    515
                ],
                "pandas_dtype": [
                    545
                ],
                "dtype.na_value": [
                    548
                ],
                "is_datetime64tz_dtype": [
                    551
                ],
                "is_timedelta64_dtype": [
                    552
                ],
                "is_period_dtype": [
                    553
                ],
                "compat": [
                    559
                ],
                "lib.values_from_object": [
                    574
                ],
                "lib.is_scalar": [
                    590
                ],
                "dtype.kind": [
                    592,
                    594
                ],
                "np.timedelta64": [
                    593,
                    598
                ],
                "np.datetime64": [
                    595,
                    598
                ]
            },
            "filtered_variables_in_file": {
                "isposinf_scalar": [
                    45
                ],
                "libmissing.isposinf_scalar": [
                    45
                ],
                "libmissing": [
                    132,
                    45,
                    46,
                    173,
                    280,
                    252
                ],
                "isneginf_scalar": [
                    46
                ],
                "libmissing.isneginf_scalar": [
                    46
                ],
                "_isna": [
                    123,
                    191
                ],
                "obj": [
                    131,
                    132,
                    134,
                    262,
                    136,
                    263,
                    139,
                    269,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    157,
                    290,
                    291,
                    172,
                    173,
                    175,
                    177,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    188,
                    590,
                    593,
                    595,
                    598,
                    223,
                    228,
                    230,
                    235,
                    236,
                    238,
                    240,
                    241,
                    370,
                    123
                ],
                "isnull": [
                    126
                ],
                "isna": [
                    391,
                    590,
                    370,
                    467,
                    151,
                    126
                ],
                "is_scalar": [
                    371,
                    131,
                    172
                ],
                "libmissing.checknull": [
                    132
                ],
                "ABCMultiIndex": [
                    134,
                    175
                ],
                "ABCSeries": [
                    290,
                    262,
                    235,
                    141,
                    179
                ],
                "np.ndarray": [
                    179,
                    142
                ],
                "np": [
                    259,
                    142,
                    277,
                    279,
                    153,
                    155,
                    287,
                    427,
                    557,
                    561,
                    179,
                    564,
                    184,
                    186,
                    447,
                    448,
                    452,
                    465,
                    593,
                    595,
                    598,
                    482,
                    486,
                    504,
                    498,
                    379,
                    500,
                    507,
                    248,
                    506,
                    251,
                    510
                ],
                "ABCIndexClass": [
                    179,
                    235,
                    143
                ],
                "ABCExtensionArray": [
                    144
                ],
                "ABCDatetimeArray": [
                    240,
                    145
                ],
                "ABCTimedeltaArray": [
                    146
                ],
                "_isna_ndarraylike": [
                    153,
                    155,
                    149
                ],
                "ABCGeneric": [
                    181,
                    150
                ],
                "obj._constructor": [
                    291,
                    263,
                    182,
                    151
                ],
                "obj._data.isna": [
                    182,
                    151
                ],
                "obj._data": [
                    182,
                    151
                ],
                "np.asarray": [
                    452,
                    427,
                    184,
                    153,
                    186,
                    155
                ],
                "libmissing.checknull_old": [
                    173
                ],
                "_isna_ndarraylike_old": [
                    184,
                    186,
                    180
                ],
                "_isna_old": [
                    217,
                    182
                ],
                "_isna_new": [
                    219,
                    191
                ],
                "flag": [
                    216,
                    215
                ],
                "get_option": [
                    215
                ],
                "key": [
                    215
                ],
                "is_extension": [
                    225,
                    234,
                    223
                ],
                "is_extension_array_dtype": [
                    571,
                    547,
                    223
                ],
                "values": [
                    257,
                    280,
                    259,
                    228,
                    230,
                    232,
                    236,
                    269,
                    238,
                    239,
                    270,
                    274,
                    244,
                    277,
                    248,
                    252,
                    285,
                    287
                ],
                "dtype": [
                    390,
                    392,
                    270,
                    272,
                    276,
                    283,
                    545,
                    547,
                    548,
                    550,
                    551,
                    552,
                    553,
                    556,
                    558,
                    562,
                    592,
                    594,
                    232,
                    242,
                    246,
                    503,
                    502,
                    505,
                    255
                ],
                "values.dtype": [
                    232,
                    270
                ],
                "obj._values": [
                    236
                ],
                "result": [
                    257,
                    259,
                    291,
                    293,
                    263,
                    265,
                    239,
                    277,
                    279,
                    248,
                    281,
                    285,
                    251,
                    253,
                    287
                ],
                "values.isna": [
                    239
                ],
                "obj.isna": [
                    241
                ],
                "is_string_dtype": [
                    272,
                    242,
                    435
                ],
                "shape": [
                    274,
                    244,
                    279,
                    281,
                    251,
                    253
                ],
                "values.shape": [
                    248,
                    274,
                    244,
                    277
                ],
                "is_string_like_dtype": [
                    276,
                    246
                ],
                "np.zeros": [
                    248,
                    277
                ],
                "np.empty": [
                    251,
                    279
                ],
                "vec": [
                    280,
                    281,
                    252,
                    253
                ],
                "libmissing.isnaobj": [
                    252
                ],
                "values.ravel": [
                    280,
                    252
                ],
                "vec.reshape": [
                    281,
                    253
                ],
                "needs_i8_conversion": [
                    473,
                    499,
                    255
                ],
                "values.view": [
                    257,
                    285
                ],
                "iNaT": [
                    257,
                    285
                ],
                "np.isnan": [
                    448,
                    259,
                    447
                ],
                "obj.index": [
                    291,
                    263
                ],
                "obj.name": [
                    291,
                    263
                ],
                "libmissing.isnaobj_old": [
                    280
                ],
                "is_datetime64_dtype": [
                    283,
                    550
                ],
                "np.isfinite": [
                    287
                ],
                "res": [
                    370,
                    371,
                    372,
                    373
                ],
                "notnull": [
                    376
                ],
                "notna": [
                    376,
                    572,
                    574
                ],
                "np.nan": [
                    557,
                    561,
                    564,
                    507,
                    379,
                    510
                ],
                "arr.dtype": [
                    390
                ],
                "arr": [
                    514,
                    515,
                    516,
                    390,
                    571,
                    572,
                    574
                ],
                "fill_value": [
                    514,
                    515,
                    391
                ],
                "is_bool_dtype": [
                    392,
                    562
                ],
                "is_integer_dtype": [
                    392,
                    558
                ],
                "left": [
                    482,
                    483,
                    486,
                    427,
                    430,
                    462,
                    465,
                    435,
                    467,
                    469,
                    475,
                    440,
                    473,
                    443,
                    478
                ],
                "right": [
                    482,
                    483,
                    486,
                    427,
                    430,
                    465,
                    435,
                    467,
                    469,
                    475,
                    440,
                    473,
                    443,
                    479
                ],
                "left.shape": [
                    465,
                    430
                ],
                "right.shape": [
                    465,
                    430
                ],
                "strict_nan": [
                    437
                ],
                "lib.array_equivalent_object": [
                    439
                ],
                "lib": [
                    574,
                    590,
                    502,
                    439
                ],
                "ensure_object": [
                    440,
                    502
                ],
                "left.ravel": [
                    440
                ],
                "right.ravel": [
                    440
                ],
                "left_value": [
                    452,
                    443,
                    444,
                    447
                ],
                "right_value": [
                    448,
                    452,
                    443,
                    444
                ],
                "NaT": [
                    555,
                    444
                ],
                "np.any": [
                    452
                ],
                "err": [
                    455
                ],
                "is_float_dtype": [
                    556,
                    462
                ],
                "is_complex_dtype": [
                    462
                ],
                "np.prod": [
                    465
                ],
                "is_datetimelike_v_numeric": [
                    469
                ],
                "is_dtype_equal": [
                    475
                ],
                "left.dtype": [
                    482,
                    475,
                    483
                ],
                "right.dtype": [
                    482,
                    475,
                    483
                ],
                "left.view": [
                    478
                ],
                "right.view": [
                    479
                ],
                "left.dtype.type": [
                    482
                ],
                "np.void": [
                    482
                ],
                "right.dtype.type": [
                    482
                ],
                "np.array_equal": [
                    486
                ],
                "is_list_like": [
                    496
                ],
                "val": [
                    496,
                    497,
                    498,
                    499,
                    500,
                    501,
                    502
                ],
                "np.array": [
                    504,
                    498,
                    506,
                    500
                ],
                "val.dtype": [
                    500,
                    501
                ],
                "is_object_dtype": [
                    501
                ],
                "lib.infer_dtype": [
                    502
                ],
                "_NS_DTYPE": [
                    504
                ],
                "_TD_DTYPE": [
                    506
                ],
                "_isna_compat": [
                    514
                ],
                "arr.fill": [
                    515
                ],
                "pandas_dtype": [
                    545
                ],
                "dtype.na_value": [
                    548
                ],
                "is_datetime64tz_dtype": [
                    551
                ],
                "is_timedelta64_dtype": [
                    552
                ],
                "is_period_dtype": [
                    553
                ],
                "compat": [
                    559
                ],
                "lib.values_from_object": [
                    574
                ],
                "lib.is_scalar": [
                    590
                ],
                "dtype.kind": [
                    592,
                    594
                ],
                "np.timedelta64": [
                    593,
                    598
                ],
                "np.datetime64": [
                    595,
                    598
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_117/pandas/tests/series/test_analytics.py",
                "test_function": "test_count",
                "test_function_code": "    def test_count(self, datetime_series):\n        assert datetime_series.count() == len(datetime_series)\n\n        datetime_series[::2] = np.NaN\n\n        assert datetime_series.count() == np.isfinite(datetime_series).sum()\n\n        mi = MultiIndex.from_arrays([list(\"aabbcc\"), [1, 2, 2, np.nan, 1, 2]])\n        ts = Series(np.arange(len(mi)), index=mi)\n\n        left = ts.count(level=1)\n        right = Series([2, 3, 1], index=[1, 2, np.nan])\n        tm.assert_series_equal(left, right)\n\n        ts.iloc[[0, 3, 5]] = np.nan\n        tm.assert_series_equal(ts.count(level=1), right - 1)\n\n        # GH29478\n        with pd.option_context(\"use_inf_as_na\", True):\n            assert pd.Series([pd.Timestamp(\"1990/1/1\")]).count() == 1",
                "test_error": "AttributeError: 'DatetimeArray' object has no attribute '_constructor'",
                "full_test_error": "self = <pandas.tests.series.test_analytics.TestSeriesAnalytics object at 0x117db3670>\ndatetime_series = 2000-01-03         NaN\n2000-01-04    0.241328\n2000-01-05         NaN\n2000-01-06    0.315998\n2000-01-07         NaN\n200...2-08         NaN\n2000-02-09    1.435739\n2000-02-10         NaN\n2000-02-11   -0.240967\nFreq: B, Name: ts, dtype: float64\n\n    def test_count(self, datetime_series):\n        assert datetime_series.count() == len(datetime_series)\n    \n        datetime_series[::2] = np.NaN\n    \n        assert datetime_series.count() == np.isfinite(datetime_series).sum()\n    \n        mi = MultiIndex.from_arrays([list(\"aabbcc\"), [1, 2, 2, np.nan, 1, 2]])\n        ts = Series(np.arange(len(mi)), index=mi)\n    \n        left = ts.count(level=1)\n        right = Series([2, 3, 1], index=[1, 2, np.nan])\n        tm.assert_series_equal(left, right)\n    \n        ts.iloc[[0, 3, 5]] = np.nan\n        tm.assert_series_equal(ts.count(level=1), right - 1)\n    \n        # GH29478\n        with pd.option_context(\"use_inf_as_na\", True):\n>           assert pd.Series([pd.Timestamp(\"1990/1/1\")]).count() == 1\n\npandas/tests/series/test_analytics.py:559: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:1707: in count\n    return notna(self.array).sum()\npandas/core/dtypes/missing.py:370: in notna\n    res = isna(obj)\npandas/core/dtypes/missing.py:123: in isna\n    return _isna(obj)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = <DatetimeArray>\n['1990-01-01 00:00:00']\nLength: 1, dtype: datetime64[ns]\n\n    def _isna_old(obj):\n        \"\"\"\n        Detect missing values, treating None, NaN, INF, -INF as null.\n    \n        Parameters\n        ----------\n        arr: ndarray or object value\n    \n        Returns\n        -------\n        boolean ndarray or boolean\n        \"\"\"\n        if is_scalar(obj):\n            return libmissing.checknull_old(obj)\n        # hack (for now) because MI registers as ndarray\n        elif isinstance(obj, ABCMultiIndex):\n            raise NotImplementedError(\"isna is not defined for MultiIndex\")\n        elif isinstance(obj, type):\n            return False\n        elif isinstance(obj, (ABCSeries, np.ndarray, ABCIndexClass)):\n            return _isna_ndarraylike_old(obj)\n        elif isinstance(obj, ABCGeneric):\n>           return obj._constructor(obj._data.isna(func=_isna_old))\nE           AttributeError: 'DatetimeArray' object has no attribute '_constructor'\n\npandas/core/dtypes/missing.py:182: AttributeError",
                "traceback": "pandas/core/series.py:1707: in count\n    return notna(self.array).sum()\npandas/core/dtypes/missing.py:370: in notna\n    res = isna(obj)\npandas/core/dtypes/missing.py:123: in isna\n    return _isna(obj)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = <DatetimeArray>\n['1990-01-01 00:00:00']\nLength: 1, dtype: datetime64[ns]\n\n    def _isna_old(obj):\n        \"\"\"\n        Detect missing values, treating None, NaN, INF, -INF as null.\n    \n        Parameters\n        ----------\n        arr: ndarray or object value\n    \n        Returns\n        -------\n        boolean ndarray or boolean\n        \"\"\"\n        if is_scalar(obj):\n            return libmissing.checknull_old(obj)\n        # hack (for now) because MI registers as ndarray\n        elif isinstance(obj, ABCMultiIndex):\n            raise NotImplementedError(\"isna is not defined for MultiIndex\")\n        elif isinstance(obj, type):\n            return False\n        elif isinstance(obj, (ABCSeries, np.ndarray, ABCIndexClass)):\n            return _isna_ndarraylike_old(obj)\n        elif isinstance(obj, ABCGeneric):\n>           return obj._constructor(obj._data.isna(func=_isna_old))\nE           AttributeError: 'DatetimeArray' object has no attribute '_constructor'\n\npandas/core/dtypes/missing.py:182: AttributeError",
                "test_function_decorators": []
            }
        ]
    }
}