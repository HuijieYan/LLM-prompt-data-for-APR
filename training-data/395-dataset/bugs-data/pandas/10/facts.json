{
    "1.1.1": "def putmask(\n    self, mask, new, inplace: bool = False, axis: int = 0, transpose: bool = False,\n) -> List[\"Block\"]:\n    \n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    mask = _extract_bool_array(mask)\n\n    new_values = self.values if inplace else self.values.copy()\n\n    if isinstance(new, np.ndarray) and len(new) == len(mask):\n        new = new[mask]\n\n    mask = _safe_reshape(mask, new_values.shape)\n\n    new_values[mask] = new\n    return [self.make_block(values=new_values)]\n",
    "1.1.2": "See Block.putmask.__doc__",
    "1.2.1": "class ExtensionBlock(Block)",
    "1.2.2": "Block for holding extension types.\n\nNotes\n-----\nThis holds all 3rd-party extension array types. It's also the immediate\nparent class for our internal extension types' blocks, CategoricalBlock.\n\nExtensionArrays are limited to 1-D.",
    "1.2.3": [
        "shape(self)"
    ],
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_10/pandas/core/internals/blocks.py",
    "1.3.2": [
        "make_block(values, placement, klass=None, ndim=None, dtype=None)",
        "_safe_reshape(arr, new_shape)",
        "_extract_bool_array(mask: ArrayLike) -> np.ndarray",
        "make_block(self, values, placement=None) -> 'Block'",
        "shape(self)",
        "copy(self, deep: bool=True)",
        "shape(self)"
    ],
    "1.4.1": [
        "    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n        result.update(target)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n        result.update(target)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n        result.update(target)\n        tm.assert_series_equal(result, expected)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_10/pandas/tests/series/methods/test_update.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_10/pandas/tests/series/methods/test_update.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_10/pandas/tests/series/methods/test_update.py"
    ],
    "2.1.1": [
        [
            "E       ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true"
        ],
        [
            "E       ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true"
        ],
        [
            "E       ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.series.methods.test_update.TestUpdate object at 0x11e3a5250>\nresult = 0       a\n1    <NA>\ndtype: string\ntarget = 0    <NA>\n1       b\ndtype: string\nexpected = 0    a\n1    b\ndtype: string\n\n    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n>       result.update(target)\n\npandas/tests/series/methods/test_update.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:2855: in update\n    self._mgr = self._mgr.putmask(mask=mask, new=other)\npandas/core/internals/managers.py:544: in putmask\n    return self.apply(\npandas/core/internals/managers.py:397: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:1607: in putmask\n    new_values[mask] = new\npandas/core/arrays/string_.py:263: in __setitem__\n    super().__setitem__(key, value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <StringArray>\n['a', <NA>]\nLength: 2, dtype: string\nkey = array([False,  True]), value = array([<NA>, 'b'], dtype=object)\n\n    def __setitem__(self, key, value) -> None:\n        value = extract_array(value, extract_numpy=True)\n    \n        key = check_array_indexer(self, key)\n        scalar_value = lib.is_scalar(value)\n    \n        if not scalar_value:\n            value = np.asarray(value, dtype=self._ndarray.dtype)\n    \n>       self._ndarray[key] = value",
            "\npandas/core/arrays/numpy_.py:279: ValueError"
        ],
        [
            "self = <pandas.tests.series.methods.test_update.TestUpdate object at 0x11e8032b0>\nresult = 0       1\n1    <NA>\ndtype: Int64\ntarget = 0    <NA>\n1       2\ndtype: Int64, expected = 0    1\n1    2\ndtype: Int64\n\n    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n>       result.update(target)\n\npandas/tests/series/methods/test_update.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:2855: in update\n    self._mgr = self._mgr.putmask(mask=mask, new=other)\npandas/core/internals/managers.py:544: in putmask\n    return self.apply(\npandas/core/internals/managers.py:397: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:1607: in putmask\n    new_values[mask] = new\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <IntegerArray>\n[1, <NA>]\nLength: 2, dtype: Int64\nkey = array([False,  True]), value = array([1, 2])\n\n    def __setitem__(self, key, value) -> None:\n        _is_scalar = is_scalar(value)\n        if _is_scalar:\n            value = [value]\n        value, mask = coerce_to_array(value, dtype=self.dtype)\n    \n        if _is_scalar:\n            value = value[0]\n            mask = mask[0]\n    \n        key = check_array_indexer(self, key)\n>       self._data[key] = value",
            "\npandas/core/arrays/integer.py:437: ValueError"
        ],
        [
            "self = <pandas.tests.series.methods.test_update.TestUpdate object at 0x11e913250>\nresult = 0    True\n1    <NA>\ndtype: boolean\ntarget = 0     <NA>\n1    False\ndtype: boolean\nexpected = 0     True\n1    False\ndtype: boolean\n\n    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n>       result.update(target)\n\npandas/tests/series/methods/test_update.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:2855: in update\n    self._mgr = self._mgr.putmask(mask=mask, new=other)\npandas/core/internals/managers.py:544: in putmask\n    return self.apply(\npandas/core/internals/managers.py:397: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:1607: in putmask\n    new_values[mask] = new\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BooleanArray>\n[True, <NA>]\nLength: 2, dtype: boolean\nkey = array([False,  True]), value = array([False, False])\n\n    def __setitem__(self, key, value) -> None:\n        _is_scalar = is_scalar(value)\n        if _is_scalar:\n            value = [value]\n        value, mask = coerce_to_array(value)\n    \n        if _is_scalar:\n            value = value[0]\n            mask = mask[0]\n    \n        key = check_array_indexer(self, key)\n>       self._data[key] = value",
            "\npandas/core/arrays/boolean.py:374: ValueError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "inplace": "True",
                "mask": "array([False,  True])",
                "self.values": "<StringArray>\n['a', <NA>]\nLength: 2, dtype: string",
                "self": "ExtensionBlock: 2 dtype: string",
                "new": "<StringArray>\n[<NA>, 'b']\nLength: 2, dtype: string",
                "self.make_block": "<bound method Block.make_block of ExtensionBlock: 2 dtype: string>"
            },
            {
                "new_values": "<StringArray>\n['a', 'b']\nLength: 2, dtype: string",
                "self.values": "<StringArray>\n['a', 'b']\nLength: 2, dtype: string",
                "new": "<StringArray>\n['b']\nLength: 1, dtype: string",
                "new_values.shape": "(2,)"
            }
        ],
        [
            {
                "inplace": "True",
                "mask": "array([False,  True])",
                "self.values": "<IntegerArray>\n[1, <NA>]\nLength: 2, dtype: Int64",
                "self": "ExtensionBlock: 2 dtype: Int64",
                "new": "<IntegerArray>\n[<NA>, 2]\nLength: 2, dtype: Int64",
                "self.make_block": "<bound method Block.make_block of ExtensionBlock: 2 dtype: Int64>"
            },
            {
                "new_values": "<IntegerArray>\n[1, 2]\nLength: 2, dtype: Int64",
                "self.values": "<IntegerArray>\n[1, 2]\nLength: 2, dtype: Int64",
                "new": "<IntegerArray>\n[2]\nLength: 1, dtype: Int64",
                "new_values.shape": "(2,)"
            }
        ],
        [
            {
                "inplace": "True",
                "mask": "array([False,  True])",
                "self.values": "<BooleanArray>\n[True, <NA>]\nLength: 2, dtype: boolean",
                "self": "ExtensionBlock: 2 dtype: boolean",
                "new": "<BooleanArray>\n[<NA>, False]\nLength: 2, dtype: boolean",
                "self.make_block": "<bound method Block.make_block of ExtensionBlock: 2 dtype: boolean>"
            },
            {
                "new_values": "<BooleanArray>\n[True, False]\nLength: 2, dtype: boolean",
                "self.values": "<BooleanArray>\n[True, False]\nLength: 2, dtype: boolean",
                "new": "<BooleanArray>\n[False]\nLength: 1, dtype: boolean",
                "new_values.shape": "(2,)"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "inplace": "bool",
                "mask": "ndarray",
                "self.values": "StringArray",
                "self": "ExtensionBlock",
                "new": "StringArray",
                "self.make_block": "method"
            },
            {
                "new_values": "StringArray",
                "self.values": "StringArray",
                "new": "StringArray",
                "new_values.shape": "tuple"
            }
        ],
        [
            {
                "inplace": "bool",
                "mask": "ndarray",
                "self.values": "IntegerArray",
                "self": "ExtensionBlock",
                "new": "IntegerArray",
                "self.make_block": "method"
            },
            {
                "new_values": "IntegerArray",
                "self.values": "IntegerArray",
                "new": "IntegerArray",
                "new_values.shape": "tuple"
            }
        ],
        [
            {
                "inplace": "bool",
                "mask": "ndarray",
                "self.values": "BooleanArray",
                "self": "ExtensionBlock",
                "new": "BooleanArray",
                "self.make_block": "method"
            },
            {
                "new_values": "BooleanArray",
                "self.values": "BooleanArray",
                "new": "BooleanArray",
                "new_values.shape": "tuple"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}