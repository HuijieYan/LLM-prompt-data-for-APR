{
    "pandas:115": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_115/pandas/core/missing.py": {
            "buggy_functions": [
                {
                    "function_name": "interpolate_1d",
                    "function_code": "def interpolate_1d(\n    xvalues,\n    yvalues,\n    method=\"linear\",\n    limit=None,\n    limit_direction=\"forward\",\n    limit_area=None,\n    fill_value=None,\n    bounds_error=False,\n    order=None,\n    **kwargs,\n):\n    \"\"\"\n    Logic for the 1-d interpolation.  The result should be 1-d, inputs\n    xvalues and yvalues will each be 1-d arrays of the same length.\n\n    Bounds_error is currently hardcoded to False since non-scipy ones don't\n    take it as an argument.\n    \"\"\"\n    # Treat the original, non-scipy methods first.\n\n    invalid = isna(yvalues)\n    valid = ~invalid\n\n    if not valid.any():\n        # have to call np.asarray(xvalues) since xvalues could be an Index\n        # which can't be mutated\n        result = np.empty_like(np.asarray(xvalues), dtype=np.float64)\n        result.fill(np.nan)\n        return result\n\n    if valid.all():\n        return yvalues\n\n    if method == \"time\":\n        if not getattr(xvalues, \"is_all_dates\", None):\n            # if not issubclass(xvalues.dtype.type, np.datetime64):\n            raise ValueError(\n                \"time-weighted interpolation only works \"\n                \"on Series or DataFrames with a \"\n                \"DatetimeIndex\"\n            )\n        method = \"values\"\n\n    valid_limit_directions = [\"forward\", \"backward\", \"both\"]\n    limit_direction = limit_direction.lower()\n    if limit_direction not in valid_limit_directions:\n        msg = \"Invalid limit_direction: expecting one of {valid!r}, got {invalid!r}.\"\n        raise ValueError(\n            msg.format(valid=valid_limit_directions, invalid=limit_direction)\n        )\n\n    if limit_area is not None:\n        valid_limit_areas = [\"inside\", \"outside\"]\n        limit_area = limit_area.lower()\n        if limit_area not in valid_limit_areas:\n            raise ValueError(\n                \"Invalid limit_area: expecting one of {}, got \"\n                \"{}.\".format(valid_limit_areas, limit_area)\n            )\n\n    # default limit is unlimited GH #16282\n    limit = algos._validate_limit(nobs=None, limit=limit)\n\n    # These are sets of index pointers to invalid values... i.e. {0, 1, etc...\n    all_nans = set(np.flatnonzero(invalid))\n    start_nans = set(range(find_valid_index(yvalues, \"first\")))\n    end_nans = set(range(1 + find_valid_index(yvalues, \"last\"), len(valid)))\n    mid_nans = all_nans - start_nans - end_nans\n\n    # Like the sets above, preserve_nans contains indices of invalid values,\n    # but in this case, it is the final set of indices that need to be\n    # preserved as NaN after the interpolation.\n\n    # For example if limit_direction='forward' then preserve_nans will\n    # contain indices of NaNs at the beginning of the series, and NaNs that\n    # are more than'limit' away from the prior non-NaN.\n\n    # set preserve_nans based on direction using _interp_limit\n    if limit_direction == \"forward\":\n        preserve_nans = start_nans | set(_interp_limit(invalid, limit, 0))\n    elif limit_direction == \"backward\":\n        preserve_nans = end_nans | set(_interp_limit(invalid, 0, limit))\n    else:\n        # both directions... just use _interp_limit\n        preserve_nans = set(_interp_limit(invalid, limit, limit))\n\n    # if limit_area is set, add either mid or outside indices\n    # to preserve_nans GH #16284\n    if limit_area == \"inside\":\n        # preserve NaNs on the outside\n        preserve_nans |= start_nans | end_nans\n    elif limit_area == \"outside\":\n        # preserve NaNs on the inside\n        preserve_nans |= mid_nans\n\n    # sort preserve_nans and covert to list\n    preserve_nans = sorted(preserve_nans)\n\n    xvalues = getattr(xvalues, \"values\", xvalues)\n    yvalues = getattr(yvalues, \"values\", yvalues)\n    result = yvalues.copy()\n\n    if method in [\"linear\", \"time\", \"index\", \"values\"]:\n        if method in (\"values\", \"index\"):\n            inds = np.asarray(xvalues)\n            # hack for DatetimeIndex, #1646\n            if needs_i8_conversion(inds.dtype.type):\n                inds = inds.view(np.int64)\n            if inds.dtype == np.object_:\n                inds = lib.maybe_convert_objects(inds)\n        else:\n            inds = xvalues\n        result[invalid] = np.interp(inds[invalid], inds[valid], yvalues[valid])\n        result[preserve_nans] = np.nan\n        return result\n\n    sp_methods = [\n        \"nearest\",\n        \"zero\",\n        \"slinear\",\n        \"quadratic\",\n        \"cubic\",\n        \"barycentric\",\n        \"krogh\",\n        \"spline\",\n        \"polynomial\",\n        \"from_derivatives\",\n        \"piecewise_polynomial\",\n        \"pchip\",\n        \"akima\",\n    ]\n\n    if method in sp_methods:\n        inds = np.asarray(xvalues)\n        # hack for DatetimeIndex, #1646\n        if issubclass(inds.dtype.type, np.datetime64):\n            inds = inds.view(np.int64)\n        result[invalid] = _interpolate_scipy_wrapper(\n            inds[valid],\n            yvalues[valid],\n            inds[invalid],\n            method=method,\n            fill_value=fill_value,\n            bounds_error=bounds_error,\n            order=order,\n            **kwargs,\n        )\n        result[preserve_nans] = np.nan\n        return result\n",
                    "decorators": [],
                    "docstring": "Logic for the 1-d interpolation.  The result should be 1-d, inputs\nxvalues and yvalues will each be 1-d arrays of the same length.\n\nBounds_error is currently hardcoded to False since non-scipy ones don't\ntake it as an argument.",
                    "start_line": 167,
                    "end_line": 316,
                    "variables": {
                        "invalid": [
                            232,
                            305,
                            252,
                            308,
                            247,
                            280,
                            249,
                            188,
                            189
                        ],
                        "isna": [
                            188
                        ],
                        "yvalues": [
                            199,
                            233,
                            234,
                            267,
                            268,
                            307,
                            280,
                            188
                        ],
                        "valid": [
                            198,
                            234,
                            306,
                            307,
                            280,
                            189,
                            191
                        ],
                        "valid.any": [
                            191
                        ],
                        "result": [
                            194,
                            195,
                            196,
                            268,
                            305,
                            280,
                            281,
                            282,
                            315,
                            316
                        ],
                        "np.empty_like": [
                            194
                        ],
                        "np": [
                            194,
                            195,
                            232,
                            301,
                            303,
                            272,
                            304,
                            275,
                            276,
                            280,
                            281,
                            315
                        ],
                        "np.asarray": [
                            272,
                            194,
                            301
                        ],
                        "xvalues": [
                            194,
                            202,
                            266,
                            301,
                            272,
                            279
                        ],
                        "np.float64": [
                            194
                        ],
                        "result.fill": [
                            195
                        ],
                        "np.nan": [
                            281,
                            195,
                            315
                        ],
                        "valid.all": [
                            198
                        ],
                        "method": [
                            201,
                            300,
                            270,
                            271,
                            209,
                            309
                        ],
                        "getattr": [
                            267,
                            202,
                            266
                        ],
                        "ValueError": [
                            223,
                            204,
                            215
                        ],
                        "valid_limit_directions": [
                            216,
                            211,
                            213
                        ],
                        "limit_direction": [
                            248,
                            212,
                            213,
                            246,
                            216
                        ],
                        "limit_direction.lower": [
                            212
                        ],
                        "msg": [
                            216,
                            214
                        ],
                        "msg.format": [
                            216
                        ],
                        "limit_area": [
                            256,
                            225,
                            259,
                            219,
                            221,
                            222
                        ],
                        "valid_limit_areas": [
                            225,
                            220,
                            222
                        ],
                        "limit_area.lower": [
                            221
                        ],
                        "format": [
                            224
                        ],
                        "limit": [
                            249,
                            252,
                            229,
                            247
                        ],
                        "algos._validate_limit": [
                            229
                        ],
                        "algos": [
                            229
                        ],
                        "all_nans": [
                            232,
                            235
                        ],
                        "set": [
                            232,
                            233,
                            234,
                            247,
                            249,
                            252
                        ],
                        "np.flatnonzero": [
                            232
                        ],
                        "start_nans": [
                            233,
                            258,
                            235,
                            247
                        ],
                        "range": [
                            233,
                            234
                        ],
                        "find_valid_index": [
                            233,
                            234
                        ],
                        "end_nans": [
                            258,
                            249,
                            234,
                            235
                        ],
                        "len": [
                            234
                        ],
                        "mid_nans": [
                            235,
                            261
                        ],
                        "preserve_nans": [
                            258,
                            261,
                            281,
                            264,
                            247,
                            249,
                            315,
                            252
                        ],
                        "_interp_limit": [
                            249,
                            252,
                            247
                        ],
                        "sorted": [
                            264
                        ],
                        "yvalues.copy": [
                            268
                        ],
                        "inds": [
                            301,
                            303,
                            272,
                            304,
                            274,
                            275,
                            276,
                            277,
                            306,
                            279,
                            280,
                            308
                        ],
                        "needs_i8_conversion": [
                            274
                        ],
                        "inds.dtype.type": [
                            274,
                            303
                        ],
                        "inds.dtype": [
                            274,
                            276,
                            303
                        ],
                        "inds.view": [
                            304,
                            275
                        ],
                        "np.int64": [
                            304,
                            275
                        ],
                        "np.object_": [
                            276
                        ],
                        "lib.maybe_convert_objects": [
                            277
                        ],
                        "lib": [
                            277
                        ],
                        "np.interp": [
                            280
                        ],
                        "sp_methods": [
                            284,
                            300
                        ],
                        "issubclass": [
                            303
                        ],
                        "np.datetime64": [
                            303
                        ],
                        "_interpolate_scipy_wrapper": [
                            305
                        ],
                        "fill_value": [
                            310
                        ],
                        "bounds_error": [
                            311
                        ],
                        "order": [
                            312
                        ],
                        "kwargs": [
                            313
                        ]
                    },
                    "filtered_variables": {
                        "invalid": [
                            232,
                            305,
                            252,
                            308,
                            247,
                            280,
                            249,
                            188,
                            189
                        ],
                        "isna": [
                            188
                        ],
                        "yvalues": [
                            199,
                            233,
                            234,
                            267,
                            268,
                            307,
                            280,
                            188
                        ],
                        "valid": [
                            198,
                            234,
                            306,
                            307,
                            280,
                            189,
                            191
                        ],
                        "valid.any": [
                            191
                        ],
                        "result": [
                            194,
                            195,
                            196,
                            268,
                            305,
                            280,
                            281,
                            282,
                            315,
                            316
                        ],
                        "np.empty_like": [
                            194
                        ],
                        "np": [
                            194,
                            195,
                            232,
                            301,
                            303,
                            272,
                            304,
                            275,
                            276,
                            280,
                            281,
                            315
                        ],
                        "np.asarray": [
                            272,
                            194,
                            301
                        ],
                        "xvalues": [
                            194,
                            202,
                            266,
                            301,
                            272,
                            279
                        ],
                        "np.float64": [
                            194
                        ],
                        "result.fill": [
                            195
                        ],
                        "np.nan": [
                            281,
                            195,
                            315
                        ],
                        "valid.all": [
                            198
                        ],
                        "method": [
                            201,
                            300,
                            270,
                            271,
                            209,
                            309
                        ],
                        "valid_limit_directions": [
                            216,
                            211,
                            213
                        ],
                        "limit_direction": [
                            248,
                            212,
                            213,
                            246,
                            216
                        ],
                        "limit_direction.lower": [
                            212
                        ],
                        "msg": [
                            216,
                            214
                        ],
                        "msg.format": [
                            216
                        ],
                        "limit_area": [
                            256,
                            225,
                            259,
                            219,
                            221,
                            222
                        ],
                        "valid_limit_areas": [
                            225,
                            220,
                            222
                        ],
                        "limit_area.lower": [
                            221
                        ],
                        "limit": [
                            249,
                            252,
                            229,
                            247
                        ],
                        "algos._validate_limit": [
                            229
                        ],
                        "algos": [
                            229
                        ],
                        "all_nans": [
                            232,
                            235
                        ],
                        "np.flatnonzero": [
                            232
                        ],
                        "start_nans": [
                            233,
                            258,
                            235,
                            247
                        ],
                        "find_valid_index": [
                            233,
                            234
                        ],
                        "end_nans": [
                            258,
                            249,
                            234,
                            235
                        ],
                        "mid_nans": [
                            235,
                            261
                        ],
                        "preserve_nans": [
                            258,
                            261,
                            281,
                            264,
                            247,
                            249,
                            315,
                            252
                        ],
                        "_interp_limit": [
                            249,
                            252,
                            247
                        ],
                        "yvalues.copy": [
                            268
                        ],
                        "inds": [
                            301,
                            303,
                            272,
                            304,
                            274,
                            275,
                            276,
                            277,
                            306,
                            279,
                            280,
                            308
                        ],
                        "needs_i8_conversion": [
                            274
                        ],
                        "inds.dtype.type": [
                            274,
                            303
                        ],
                        "inds.dtype": [
                            274,
                            276,
                            303
                        ],
                        "inds.view": [
                            304,
                            275
                        ],
                        "np.int64": [
                            304,
                            275
                        ],
                        "np.object_": [
                            276
                        ],
                        "lib.maybe_convert_objects": [
                            277
                        ],
                        "lib": [
                            277
                        ],
                        "np.interp": [
                            280
                        ],
                        "sp_methods": [
                            284,
                            300
                        ],
                        "np.datetime64": [
                            303
                        ],
                        "_interpolate_scipy_wrapper": [
                            305
                        ],
                        "fill_value": [
                            310
                        ],
                        "bounds_error": [
                            311
                        ],
                        "order": [
                            312
                        ],
                        "kwargs": [
                            313
                        ]
                    },
                    "diff_line_number": 280,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "invalid": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvalues": {
                                    "variable_value": "array([ 1.,  2., nan,  9., 10.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "valid": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.empty_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvalues": {
                                    "variable_value": "Int64Index([1, 2, 3, 9, 10], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(5,)"
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.fill": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid.all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "valid_limit_directions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_direction": {
                                    "variable_value": "'forward'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "limit_direction.lower": {
                                    "variable_value": "<built-in method lower of str object at 0x1034bbbb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_area": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "valid_limit_areas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_area.lower": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "algos._validate_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.flatnonzero": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "find_valid_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mid_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "preserve_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_interp_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvalues.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x115c048a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inds": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inds.dtype.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inds.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inds.view": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.object_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.interp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sp_methods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_interpolate_scipy_wrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "bounds_error": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "invalid": {
                                    "variable_value": "array([False, False,  True, False, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvalues": {
                                    "variable_value": "array([ 1.,  2., nan,  9., 10.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "valid": {
                                    "variable_value": "array([ True,  True, False,  True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "valid.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x115c04ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "array([ 1.,  2.,  3.,  9., 10.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "np.empty_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvalues": {
                                    "variable_value": "array([ 1,  2,  3,  9, 10])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.fill": {
                                    "variable_value": "<built-in method fill of numpy.ndarray object at 0x115c04b70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid.all": {
                                    "variable_value": "<built-in method all of numpy.ndarray object at 0x115c04ad0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "valid_limit_directions": {
                                    "variable_value": "['forward', 'backward', 'both']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "limit_direction": {
                                    "variable_value": "'forward'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "limit_direction.lower": {
                                    "variable_value": "<built-in method lower of str object at 0x115c03ef0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_area": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "valid_limit_areas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_area.lower": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "algos._validate_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_nans": {
                                    "variable_value": "{2}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "np.flatnonzero": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start_nans": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "find_valid_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end_nans": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "mid_nans": {
                                    "variable_value": "{2}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "preserve_nans": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "_interp_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvalues.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x115c048a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inds": {
                                    "variable_value": "array([ 1,  2,  3,  9, 10])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inds.dtype.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inds.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "inds.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x115c04bc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.object_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.interp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sp_methods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_interpolate_scipy_wrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "bounds_error": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "invalid": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvalues": {
                                    "variable_value": "array([10.,  9., nan,  2.,  1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "valid": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.empty_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvalues": {
                                    "variable_value": "Int64Index([10, 9, 3, 2, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(5,)"
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.fill": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid.all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "valid_limit_directions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_direction": {
                                    "variable_value": "'forward'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "limit_direction.lower": {
                                    "variable_value": "<built-in method lower of str object at 0x1034bbbb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_area": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "valid_limit_areas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_area.lower": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "algos._validate_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.flatnonzero": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "find_valid_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mid_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "preserve_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_interp_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvalues.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x115c190d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inds": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inds.dtype.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inds.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inds.view": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.object_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.interp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sp_methods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_interpolate_scipy_wrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "bounds_error": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "invalid": {
                                    "variable_value": "array([False, False,  True, False, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvalues": {
                                    "variable_value": "array([10.,  9., nan,  2.,  1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "valid": {
                                    "variable_value": "array([ True,  True, False,  True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "valid.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x115c19670>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "array([10.,  9.,  1.,  2.,  1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "np.empty_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvalues": {
                                    "variable_value": "array([10,  9,  3,  2,  1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.fill": {
                                    "variable_value": "<built-in method fill of numpy.ndarray object at 0x115c19760>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid.all": {
                                    "variable_value": "<built-in method all of numpy.ndarray object at 0x115c19670>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "valid_limit_directions": {
                                    "variable_value": "['forward', 'backward', 'both']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "limit_direction": {
                                    "variable_value": "'forward'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "limit_direction.lower": {
                                    "variable_value": "<built-in method lower of str object at 0x115c1d1b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_area": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "valid_limit_areas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_area.lower": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "algos._validate_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_nans": {
                                    "variable_value": "{2}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "np.flatnonzero": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start_nans": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "find_valid_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end_nans": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "mid_nans": {
                                    "variable_value": "{2}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "preserve_nans": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "_interp_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvalues.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x115c190d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inds": {
                                    "variable_value": "array([10,  9,  3,  2,  1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inds.dtype.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inds.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "inds.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x115c197b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.object_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.interp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sp_methods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_interpolate_scipy_wrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "bounds_error": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "invalid": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvalues": {
                                    "variable_value": "array([ 1.,  2., nan,  9., 10.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "valid": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.empty_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvalues": {
                                    "variable_value": "Int64Index([1, 2, 3, 9, 10], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(5,)"
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.fill": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid.all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "valid_limit_directions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_direction": {
                                    "variable_value": "'forward'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "limit_direction.lower": {
                                    "variable_value": "<built-in method lower of str object at 0x10dd27cf0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_area": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "valid_limit_areas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_area.lower": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "algos._validate_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.flatnonzero": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "find_valid_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mid_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "preserve_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_interp_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvalues.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x120552c60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inds": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inds.dtype.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inds.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inds.view": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.object_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.argsort": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.interp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sp_methods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_interpolate_scipy_wrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "bounds_error": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "invalid": {
                                    "variable_value": "array([False, False,  True, False, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvalues": {
                                    "variable_value": "array([ 1.,  2., nan,  9., 10.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "valid": {
                                    "variable_value": "array([ True,  True, False,  True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "valid.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x120552850>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "array([ 1.,  2.,  3.,  9., 10.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "np.empty_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvalues": {
                                    "variable_value": "array([ 1,  2,  3,  9, 10])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.fill": {
                                    "variable_value": "<built-in method fill of numpy.ndarray object at 0x120552bc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid.all": {
                                    "variable_value": "<built-in method all of numpy.ndarray object at 0x120552850>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "valid_limit_directions": {
                                    "variable_value": "['forward', 'backward', 'both']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "limit_direction": {
                                    "variable_value": "'forward'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "limit_direction.lower": {
                                    "variable_value": "<built-in method lower of str object at 0x12088cf70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_area": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "valid_limit_areas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_area.lower": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "algos._validate_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_nans": {
                                    "variable_value": "{2}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "np.flatnonzero": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start_nans": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "find_valid_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end_nans": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "mid_nans": {
                                    "variable_value": "{2}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "preserve_nans": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "_interp_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvalues.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x120552c60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inds": {
                                    "variable_value": "array([ 1,  2,  3,  9, 10])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inds.dtype.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inds.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "inds.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x120552b70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.object_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer": {
                                    "variable_value": "array([0, 1, 2, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "np.argsort": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.interp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sp_methods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_interpolate_scipy_wrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "bounds_error": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "invalid": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvalues": {
                                    "variable_value": "array([10.,  9., nan,  2.,  1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "valid": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.empty_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvalues": {
                                    "variable_value": "Int64Index([10, 9, 3, 2, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(5,)"
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.fill": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid.all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "valid_limit_directions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_direction": {
                                    "variable_value": "'forward'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "limit_direction.lower": {
                                    "variable_value": "<built-in method lower of str object at 0x10dd27cf0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_area": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "valid_limit_areas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_area.lower": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "algos._validate_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.flatnonzero": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "find_valid_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mid_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "preserve_nans": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_interp_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvalues.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x1205528f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inds": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inds.dtype.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inds.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inds.view": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.object_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.argsort": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.interp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sp_methods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_interpolate_scipy_wrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "bounds_error": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "invalid": {
                                    "variable_value": "array([False, False,  True, False, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvalues": {
                                    "variable_value": "array([10.,  9., nan,  2.,  1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "valid": {
                                    "variable_value": "array([ True,  True, False,  True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "valid.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x1205385d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "array([10.,  9.,  3.,  2.,  1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "np.empty_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xvalues": {
                                    "variable_value": "array([10,  9,  3,  2,  1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.fill": {
                                    "variable_value": "<built-in method fill of numpy.ndarray object at 0x120538490>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid.all": {
                                    "variable_value": "<built-in method all of numpy.ndarray object at 0x1205385d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "valid_limit_directions": {
                                    "variable_value": "['forward', 'backward', 'both']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "limit_direction": {
                                    "variable_value": "'forward'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "limit_direction.lower": {
                                    "variable_value": "<built-in method lower of str object at 0x12088c930>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_area": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "valid_limit_areas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit_area.lower": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "algos._validate_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_nans": {
                                    "variable_value": "{2}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "np.flatnonzero": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start_nans": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "find_valid_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end_nans": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "mid_nans": {
                                    "variable_value": "{2}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "preserve_nans": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "_interp_limit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yvalues.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x1205528f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inds": {
                                    "variable_value": "array([10,  9,  3,  2,  1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inds.dtype.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inds.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "inds.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x120538620>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.int64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.object_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer": {
                                    "variable_value": "array([3, 2, 1, 0])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "np.argsort": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.interp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sp_methods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.datetime64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_interpolate_scipy_wrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_value": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "bounds_error": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "order": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def mask_missing(arr, values_to_mask):\n    \"\"\"\n    Return a masking array of same size/shape as arr\n    with entries equaling any member of values_to_mask set to True\n    \"\"\"\n    dtype, values_to_mask = infer_dtype_from_array(values_to_mask)\n\n    try:\n        values_to_mask = np.array(values_to_mask, dtype=dtype)\n\n    except Exception:\n        values_to_mask = np.array(values_to_mask, dtype=object)\n\n    na_mask = isna(values_to_mask)\n    nonna = values_to_mask[~na_mask]\n\n    mask = None\n    for x in nonna:\n        if mask is None:\n            if is_numeric_v_string_like(arr, x):\n                # GH#29553 prevent numpy deprecation warnings\n                mask = False\n            else:\n                mask = arr == x\n\n            # if x is a string and arr is not, then we get False and we must\n            # expand the mask to size arr.shape\n            if is_scalar(mask):\n                mask = np.zeros(arr.shape, dtype=bool)\n        else:\n            if is_numeric_v_string_like(arr, x):\n                # GH#29553 prevent numpy deprecation warnings\n                mask |= False\n            else:\n                mask |= arr == x\n\n    if na_mask.any():\n        if mask is None:\n            mask = isna(arr)\n        else:\n            mask |= isna(arr)\n\n    # GH 21977\n    if mask is None:\n        mask = np.zeros(arr.shape, dtype=bool)\n\n    return mask",
                "def clean_fill_method(method, allow_nearest=False):\n    # asfreq is compat for resampling\n    if method in [None, \"asfreq\"]:\n        return None\n\n    if isinstance(method, str):\n        method = method.lower()\n        if method == \"ffill\":\n            method = \"pad\"\n        elif method == \"bfill\":\n            method = \"backfill\"\n\n    valid_methods = [\"pad\", \"backfill\"]\n    expecting = \"pad (ffill) or backfill (bfill)\"\n    if allow_nearest:\n        valid_methods.append(\"nearest\")\n        expecting = \"pad (ffill), backfill (bfill) or nearest\"\n    if method not in valid_methods:\n        msg = \"Invalid fill method. Expecting {expecting}. Got {method}\".format(\n            expecting=expecting, method=method\n        )\n        raise ValueError(msg)\n    return method",
                "def clean_interp_method(method, **kwargs):\n    order = kwargs.get(\"order\")\n    valid = [\n        \"linear\",\n        \"time\",\n        \"index\",\n        \"values\",\n        \"nearest\",\n        \"zero\",\n        \"slinear\",\n        \"quadratic\",\n        \"cubic\",\n        \"barycentric\",\n        \"polynomial\",\n        \"krogh\",\n        \"piecewise_polynomial\",\n        \"pchip\",\n        \"akima\",\n        \"spline\",\n        \"from_derivatives\",\n    ]\n    if method in (\"spline\", \"polynomial\") and order is None:\n        raise ValueError(\"You must specify the order of the spline or polynomial.\")\n    if method not in valid:\n        raise ValueError(\n            \"method must be one of {valid}. Got '{method}' \"\n            \"instead.\".format(valid=valid, method=method)\n        )\n\n    return method",
                "def find_valid_index(values, how: str):\n    \"\"\"\n    Retrieves the index of the first valid value.\n\n    Parameters\n    ----------\n    values : ndarray or ExtensionArray\n    how : {'first', 'last'}\n        Use this parameter to change between the first or last valid index.\n\n    Returns\n    -------\n    int or None\n    \"\"\"\n    assert how in [\"first\", \"last\"]\n\n    if len(values) == 0:  # early stop\n        return None\n\n    is_valid = ~isna(values)\n\n    if values.ndim == 2:\n        is_valid = is_valid.any(1)  # reduce axis 1\n\n    if how == \"first\":\n        idxpos = is_valid[::].argmax()\n\n    if how == \"last\":\n        idxpos = len(values) - 1 - is_valid[::-1].argmax()\n\n    chk_notna = is_valid[idxpos]\n\n    if not chk_notna:\n        return None\n    return idxpos",
                "def interpolate_1d(\n    xvalues,\n    yvalues,\n    method=\"linear\",\n    limit=None,\n    limit_direction=\"forward\",\n    limit_area=None,\n    fill_value=None,\n    bounds_error=False,\n    order=None,\n    **kwargs,\n):\n    \"\"\"\n    Logic for the 1-d interpolation.  The result should be 1-d, inputs\n    xvalues and yvalues will each be 1-d arrays of the same length.\n\n    Bounds_error is currently hardcoded to False since non-scipy ones don't\n    take it as an argument.\n    \"\"\"\n    # Treat the original, non-scipy methods first.\n\n    invalid = isna(yvalues)\n    valid = ~invalid\n\n    if not valid.any():\n        # have to call np.asarray(xvalues) since xvalues could be an Index\n        # which can't be mutated\n        result = np.empty_like(np.asarray(xvalues), dtype=np.float64)\n        result.fill(np.nan)\n        return result\n\n    if valid.all():\n        return yvalues\n\n    if method == \"time\":\n        if not getattr(xvalues, \"is_all_dates\", None):\n            # if not issubclass(xvalues.dtype.type, np.datetime64):\n            raise ValueError(\n                \"time-weighted interpolation only works \"\n                \"on Series or DataFrames with a \"\n                \"DatetimeIndex\"\n            )\n        method = \"values\"\n\n    valid_limit_directions = [\"forward\", \"backward\", \"both\"]\n    limit_direction = limit_direction.lower()\n    if limit_direction not in valid_limit_directions:\n        msg = \"Invalid limit_direction: expecting one of {valid!r}, got {invalid!r}.\"\n        raise ValueError(\n            msg.format(valid=valid_limit_directions, invalid=limit_direction)\n        )\n\n    if limit_area is not None:\n        valid_limit_areas = [\"inside\", \"outside\"]\n        limit_area = limit_area.lower()\n        if limit_area not in valid_limit_areas:\n            raise ValueError(\n                \"Invalid limit_area: expecting one of {}, got \"\n                \"{}.\".format(valid_limit_areas, limit_area)\n            )\n\n    # default limit is unlimited GH #16282\n    limit = algos._validate_limit(nobs=None, limit=limit)\n\n    # These are sets of index pointers to invalid values... i.e. {0, 1, etc...\n    all_nans = set(np.flatnonzero(invalid))\n    start_nans = set(range(find_valid_index(yvalues, \"first\")))\n    end_nans = set(range(1 + find_valid_index(yvalues, \"last\"), len(valid)))\n    mid_nans = all_nans - start_nans - end_nans\n\n    # Like the sets above, preserve_nans contains indices of invalid values,\n    # but in this case, it is the final set of indices that need to be\n    # preserved as NaN after the interpolation.\n\n    # For example if limit_direction='forward' then preserve_nans will\n    # contain indices of NaNs at the beginning of the series, and NaNs that\n    # are more than'limit' away from the prior non-NaN.\n\n    # set preserve_nans based on direction using _interp_limit\n    if limit_direction == \"forward\":\n        preserve_nans = start_nans | set(_interp_limit(invalid, limit, 0))\n    elif limit_direction == \"backward\":\n        preserve_nans = end_nans | set(_interp_limit(invalid, 0, limit))\n    else:\n        # both directions... just use _interp_limit\n        preserve_nans = set(_interp_limit(invalid, limit, limit))\n\n    # if limit_area is set, add either mid or outside indices\n    # to preserve_nans GH #16284\n    if limit_area == \"inside\":\n        # preserve NaNs on the outside\n        preserve_nans |= start_nans | end_nans\n    elif limit_area == \"outside\":\n        # preserve NaNs on the inside\n        preserve_nans |= mid_nans\n\n    # sort preserve_nans and covert to list\n    preserve_nans = sorted(preserve_nans)\n\n    xvalues = getattr(xvalues, \"values\", xvalues)\n    yvalues = getattr(yvalues, \"values\", yvalues)\n    result = yvalues.copy()\n\n    if method in [\"linear\", \"time\", \"index\", \"values\"]:\n        if method in (\"values\", \"index\"):\n            inds = np.asarray(xvalues)\n            # hack for DatetimeIndex, #1646\n            if needs_i8_conversion(inds.dtype.type):\n                inds = inds.view(np.int64)\n            if inds.dtype == np.object_:\n                inds = lib.maybe_convert_objects(inds)\n        else:\n            inds = xvalues\n        result[invalid] = np.interp(inds[invalid], inds[valid], yvalues[valid])\n        result[preserve_nans] = np.nan\n        return result\n\n    sp_methods = [\n        \"nearest\",\n        \"zero\",\n        \"slinear\",\n        \"quadratic\",\n        \"cubic\",\n        \"barycentric\",\n        \"krogh\",\n        \"spline\",\n        \"polynomial\",\n        \"from_derivatives\",\n        \"piecewise_polynomial\",\n        \"pchip\",\n        \"akima\",\n    ]\n\n    if method in sp_methods:\n        inds = np.asarray(xvalues)\n        # hack for DatetimeIndex, #1646\n        if issubclass(inds.dtype.type, np.datetime64):\n            inds = inds.view(np.int64)\n        result[invalid] = _interpolate_scipy_wrapper(\n            inds[valid],\n            yvalues[valid],\n            inds[invalid],\n            method=method,\n            fill_value=fill_value,\n            bounds_error=bounds_error,\n            order=order,\n            **kwargs,\n        )\n        result[preserve_nans] = np.nan\n        return result",
                "def _interpolate_scipy_wrapper(\n    x, y, new_x, method, fill_value=None, bounds_error=False, order=None, **kwargs\n):\n    \"\"\"\n    Passed off to scipy.interpolate.interp1d. method is scipy's kind.\n    Returns an array interpolated at new_x.  Add any new methods to\n    the list in _clean_interp_method.\n    \"\"\"\n    extra = \"{method} interpolation requires SciPy.\".format(method=method)\n    import_optional_dependency(\"scipy\", extra=extra)\n    from scipy import interpolate\n\n    new_x = np.asarray(new_x)\n\n    # ignores some kwargs that could be passed along.\n    alt_methods = {\n        \"barycentric\": interpolate.barycentric_interpolate,\n        \"krogh\": interpolate.krogh_interpolate,\n        \"from_derivatives\": _from_derivatives,\n        \"piecewise_polynomial\": _from_derivatives,\n    }\n\n    if getattr(x, \"is_all_dates\", False):\n        # GH 5975, scipy.interp1d can't handle datetime64s\n        x, new_x = x._values.astype(\"i8\"), new_x.astype(\"i8\")\n\n    if method == \"pchip\":\n        try:\n            alt_methods[\"pchip\"] = interpolate.pchip_interpolate\n        except AttributeError:\n            raise ImportError(\n                \"Your version of Scipy does not support PCHIP interpolation.\"\n            )\n    elif method == \"akima\":\n        alt_methods[\"akima\"] = _akima_interpolate\n\n    interp1d_methods = [\n        \"nearest\",\n        \"zero\",\n        \"slinear\",\n        \"quadratic\",\n        \"cubic\",\n        \"polynomial\",\n    ]\n    if method in interp1d_methods:\n        if method == \"polynomial\":\n            method = order\n        terp = interpolate.interp1d(\n            x, y, kind=method, fill_value=fill_value, bounds_error=bounds_error\n        )\n        new_y = terp(new_x)\n    elif method == \"spline\":\n        # GH #10633, #24014\n        if isna(order) or (order <= 0):\n            raise ValueError(\n                \"order needs to be specified and greater than 0; \"\n                \"got order: {}\".format(order)\n            )\n        terp = interpolate.UnivariateSpline(x, y, k=order, **kwargs)\n        new_y = terp(new_x)\n    else:\n        # GH 7295: need to be able to write for some reason\n        # in some circumstances: check all three\n        if not x.flags.writeable:\n            x = x.copy()\n        if not y.flags.writeable:\n            y = y.copy()\n        if not new_x.flags.writeable:\n            new_x = new_x.copy()\n        method = alt_methods[method]\n        new_y = method(x, y, new_x, **kwargs)\n    return new_y",
                "def _from_derivatives(xi, yi, x, order=None, der=0, extrapolate=False):\n    \"\"\"\n    Convenience function for interpolate.BPoly.from_derivatives.\n\n    Construct a piecewise polynomial in the Bernstein basis, compatible\n    with the specified values and derivatives at breakpoints.\n\n    Parameters\n    ----------\n    xi : array_like\n        sorted 1D array of x-coordinates\n    yi : array_like or list of array-likes\n        yi[i][j] is the j-th derivative known at xi[i]\n    order: None or int or array_like of ints. Default: None.\n        Specifies the degree of local polynomials. If not None, some\n        derivatives are ignored.\n    der : int or list\n        How many derivatives to extract; None for all potentially nonzero\n        derivatives (that is a number equal to the number of points), or a\n        list of derivatives to extract. This numberincludes the function\n        value as 0th derivative.\n     extrapolate : bool, optional\n        Whether to extrapolate to ouf-of-bounds points based on first and last\n        intervals, or to return NaNs. Default: True.\n\n    See Also\n    --------\n    scipy.interpolate.BPoly.from_derivatives\n\n    Returns\n    -------\n    y : scalar or array_like\n        The result, of length R or length M or M by R.\n    \"\"\"\n    from scipy import interpolate\n\n    # return the method for compat with scipy version & backwards compat\n    method = interpolate.BPoly.from_derivatives\n    m = method(xi, yi.reshape(-1, 1), orders=order, extrapolate=extrapolate)\n\n    return m(x)",
                "def _akima_interpolate(xi, yi, x, der=0, axis=0):\n    \"\"\"\n    Convenience function for akima interpolation.\n    xi and yi are arrays of values used to approximate some function f,\n    with ``yi = f(xi)``.\n\n    See `Akima1DInterpolator` for details.\n\n    Parameters\n    ----------\n    xi : array_like\n        A sorted list of x-coordinates, of length N.\n    yi : array_like\n        A 1-D array of real values.  `yi`'s length along the interpolation\n        axis must be equal to the length of `xi`. If N-D array, use axis\n        parameter to select correct axis.\n    x : scalar or array_like\n        Of length M.\n    der : int or list, optional\n        How many derivatives to extract; None for all potentially\n        nonzero derivatives (that is a number equal to the number\n        of points), or a list of derivatives to extract. This number\n        includes the function value as 0th derivative.\n    axis : int, optional\n        Axis in the yi array corresponding to the x-coordinate values.\n\n    See Also\n    --------\n    scipy.interpolate.Akima1DInterpolator\n\n    Returns\n    -------\n    y : scalar or array_like\n        The result, of length R or length M or M by R,\n\n    \"\"\"\n    from scipy import interpolate\n\n    P = interpolate.Akima1DInterpolator(xi, yi, axis=axis)\n\n    if der == 0:\n        return P(x)\n    elif interpolate._isscalar(der):\n        return P(x, der=der)\n    else:\n        return [P(x, nu) for nu in der]",
                "def interpolate_2d(\n    values, method=\"pad\", axis=0, limit=None, fill_value=None, dtype=None\n):\n    \"\"\"\n    Perform an actual interpolation of values, values will be make 2-d if\n    needed fills inplace, returns the result.\n    \"\"\"\n    orig_values = values\n\n    transf = (lambda x: x) if axis == 0 else (lambda x: x.T)\n\n    # reshape a 1 dim if needed\n    ndim = values.ndim\n    if values.ndim == 1:\n        if axis != 0:  # pragma: no cover\n            raise AssertionError(\"cannot interpolate on a ndim == 1 with axis != 0\")\n        values = values.reshape(tuple((1,) + values.shape))\n\n    if fill_value is None:\n        mask = None\n    else:  # todo create faster fill func without masking\n        mask = mask_missing(transf(values), fill_value)\n\n    method = clean_fill_method(method)\n    if method == \"pad\":\n        values = transf(pad_2d(transf(values), limit=limit, mask=mask, dtype=dtype))\n    else:\n        values = transf(\n            backfill_2d(transf(values), limit=limit, mask=mask, dtype=dtype)\n        )\n\n    # reshape back\n    if ndim == 1:\n        values = values[0]\n\n    if orig_values.dtype.kind == \"M\":\n        # convert float back to datetime64\n        values = values.astype(orig_values.dtype)\n\n    return values",
                "def _cast_values_for_fillna(values, dtype):\n    \"\"\"\n    Cast values to a dtype that algos.pad and algos.backfill can handle.\n    \"\"\"\n    # TODO: for int-dtypes we make a copy, but for everything else this\n    #  alters the values in-place.  Is this intentional?\n\n    if (\n        is_datetime64_dtype(dtype)\n        or is_datetime64tz_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n    ):\n        values = values.view(np.int64)\n\n    elif is_integer_dtype(values):\n        # NB: this check needs to come after the datetime64 check above\n        values = ensure_float64(values)\n\n    return values",
                "def _fillna_prep(values, mask=None, dtype=None):\n    # boilerplate for pad_1d, backfill_1d, pad_2d, backfill_2d\n    if dtype is None:\n        dtype = values.dtype\n\n    if mask is None:\n        # This needs to occur before datetime/timedeltas are cast to int64\n        mask = isna(values)\n\n    values = _cast_values_for_fillna(values, dtype)\n\n    mask = mask.view(np.uint8)\n    return values, mask",
                "def pad_1d(values, limit=None, mask=None, dtype=None):\n    values, mask = _fillna_prep(values, mask, dtype)\n    algos.pad_inplace(values, mask, limit=limit)\n    return values",
                "def backfill_1d(values, limit=None, mask=None, dtype=None):\n    values, mask = _fillna_prep(values, mask, dtype)\n    algos.backfill_inplace(values, mask, limit=limit)\n    return values",
                "def pad_2d(values, limit=None, mask=None, dtype=None):\n    values, mask = _fillna_prep(values, mask, dtype)\n\n    if np.all(values.shape):\n        algos.pad_2d_inplace(values, mask, limit=limit)\n    else:\n        # for test coverage\n        pass\n    return values",
                "def backfill_2d(values, limit=None, mask=None, dtype=None):\n    values, mask = _fillna_prep(values, mask, dtype)\n\n    if np.all(values.shape):\n        algos.backfill_2d_inplace(values, mask, limit=limit)\n    else:\n        # for test coverage\n        pass\n    return values",
                "def get_fill_func(method):\n    method = clean_fill_method(method)\n    return _fill_methods[method]",
                "def clean_reindex_fill_method(method):\n    return clean_fill_method(method, allow_nearest=True)",
                "def _interp_limit(invalid, fw_limit, bw_limit):\n    \"\"\"\n    Get indexers of values that won't be filled\n    because they exceed the limits.\n\n    Parameters\n    ----------\n    invalid : boolean ndarray\n    fw_limit : int or None\n        forward limit to index\n    bw_limit : int or None\n        backward limit to index\n\n    Returns\n    -------\n    set of indexers\n\n    Notes\n    -----\n    This is equivalent to the more readable, but slower\n\n    .. code-block:: python\n\n        def _interp_limit(invalid, fw_limit, bw_limit):\n            for x in np.where(invalid)[0]:\n                if invalid[max(0, x - fw_limit):x + bw_limit + 1].all():\n                    yield x\n    \"\"\"\n    # handle forward first; the backward direction is the same except\n    # 1. operate on the reversed array\n    # 2. subtract the returned indices from N - 1\n    N = len(invalid)\n    f_idx = set()\n    b_idx = set()\n\n    def inner(invalid, limit):\n        limit = min(limit, N)\n        windowed = _rolling_window(invalid, limit + 1).all(1)\n        idx = set(np.where(windowed)[0] + limit) | set(\n            np.where((~invalid[: limit + 1]).cumsum() == 0)[0]\n        )\n        return idx\n\n    if fw_limit is not None:\n\n        if fw_limit == 0:\n            f_idx = set(np.where(invalid)[0])\n        else:\n            f_idx = inner(invalid, fw_limit)\n\n    if bw_limit is not None:\n\n        if bw_limit == 0:\n            # then we don't even need to care about backwards\n            # just use forwards\n            return f_idx\n        else:\n            b_idx = list(inner(invalid[::-1], bw_limit))\n            b_idx = set(N - 1 - np.asarray(b_idx))\n            if fw_limit == 0:\n                return b_idx\n\n    return f_idx & b_idx",
                "def _rolling_window(a, window):\n    \"\"\"\n    [True, True, False, True, False], 2 ->\n\n    [\n        [True,  True],\n        [True, False],\n        [False, True],\n        [True, False],\n    ]\n    \"\"\"\n    # https://stackoverflow.com/a/6811241\n    shape = a.shape[:-1] + (a.shape[-1] - window + 1, window)\n    strides = a.strides + (a.strides[-1],)\n    return np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)",
                "def inner(invalid, limit):\n    limit = min(limit, N)\n    windowed = _rolling_window(invalid, limit + 1).all(1)\n    idx = set(np.where(windowed)[0] + limit) | set(\n        np.where((~invalid[: limit + 1]).cumsum() == 0)[0]\n    )\n    return idx"
            ],
            "inscope_function_signatures": [
                "mask_missing(arr, values_to_mask)",
                "clean_fill_method(method, allow_nearest=False)",
                "clean_interp_method(method, **kwargs)",
                "find_valid_index(values, how: str)",
                "interpolate_1d(xvalues, yvalues, method='linear', limit=None, limit_direction='forward', limit_area=None, fill_value=None, bounds_error=False, order=None, **kwargs)",
                "_interpolate_scipy_wrapper(x, y, new_x, method, fill_value=None, bounds_error=False, order=None, **kwargs)",
                "_from_derivatives(xi, yi, x, order=None, der=0, extrapolate=False)",
                "_akima_interpolate(xi, yi, x, der=0, axis=0)",
                "interpolate_2d(values, method='pad', axis=0, limit=None, fill_value=None, dtype=None)",
                "_cast_values_for_fillna(values, dtype)",
                "_fillna_prep(values, mask=None, dtype=None)",
                "pad_1d(values, limit=None, mask=None, dtype=None)",
                "backfill_1d(values, limit=None, mask=None, dtype=None)",
                "pad_2d(values, limit=None, mask=None, dtype=None)",
                "backfill_2d(values, limit=None, mask=None, dtype=None)",
                "get_fill_func(method)",
                "clean_reindex_fill_method(method)",
                "_interp_limit(invalid, fw_limit, bw_limit)",
                "_rolling_window(a, window)",
                "inner(invalid, limit)"
            ],
            "variables_in_file": {
                "dtype": [
                    32,
                    512,
                    549,
                    550,
                    586,
                    556,
                    29,
                    563,
                    534,
                    535,
                    536,
                    569,
                    509,
                    575
                ],
                "values_to_mask": [
                    32,
                    35,
                    37,
                    38,
                    29
                ],
                "infer_dtype_from_array": [
                    29
                ],
                "np.array": [
                    32,
                    35
                ],
                "np": [
                    646,
                    647,
                    654,
                    272,
                    275,
                    276,
                    280,
                    281,
                    538,
                    666,
                    32,
                    35,
                    301,
                    558,
                    303,
                    304,
                    687,
                    52,
                    315,
                    577,
                    194,
                    195,
                    68,
                    331,
                    588,
                    232
                ],
                "Exception": [
                    34
                ],
                "object": [
                    35
                ],
                "na_mask": [
                    60,
                    37,
                    38
                ],
                "isna": [
                    64,
                    37,
                    554,
                    372,
                    149,
                    188,
                    62
                ],
                "nonna": [
                    41,
                    38
                ],
                "mask": [
                    512,
                    40,
                    552,
                    42,
                    554,
                    45,
                    558,
                    47,
                    559,
                    51,
                    52,
                    563,
                    564,
                    56,
                    569,
                    58,
                    570,
                    61,
                    62,
                    575,
                    64,
                    578,
                    67,
                    68,
                    70,
                    586,
                    589,
                    503,
                    505,
                    509
                ],
                "x": [
                    481,
                    389,
                    41,
                    479,
                    43,
                    493,
                    47,
                    367,
                    433,
                    341,
                    54,
                    343,
                    377,
                    58,
                    477,
                    382,
                    383
                ],
                "is_numeric_v_string_like": [
                    43,
                    54
                ],
                "arr": [
                    64,
                    68,
                    43,
                    47,
                    52,
                    54,
                    58,
                    62
                ],
                "is_scalar": [
                    51
                ],
                "np.zeros": [
                    52,
                    68
                ],
                "arr.shape": [
                    52,
                    68
                ],
                "bool": [
                    52,
                    68
                ],
                "na_mask.any": [
                    60
                ],
                "method": [
                    388,
                    389,
                    270,
                    271,
                    300,
                    430,
                    431,
                    309,
                    327,
                    201,
                    75,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    209,
                    600,
                    345,
                    90,
                    601,
                    92,
                    605,
                    95,
                    352,
                    363,
                    364,
                    365,
                    508,
                    367,
                    370,
                    119,
                    121,
                    507,
                    124,
                    127
                ],
                "isinstance": [
                    78
                ],
                "str": [
                    130,
                    78
                ],
                "method.lower": [
                    79
                ],
                "valid_methods": [
                    88,
                    90,
                    85
                ],
                "expecting": [
                    89,
                    92,
                    86
                ],
                "allow_nearest": [
                    87
                ],
                "valid_methods.append": [
                    88
                ],
                "msg": [
                    216,
                    91,
                    214,
                    94
                ],
                "format": [
                    224,
                    327,
                    91,
                    374,
                    123
                ],
                "ValueError": [
                    204,
                    373,
                    215,
                    120,
                    122,
                    94,
                    223
                ],
                "order": [
                    99,
                    365,
                    431,
                    372,
                    119,
                    312,
                    377,
                    375
                ],
                "kwargs.get": [
                    99
                ],
                "kwargs": [
                    313,
                    99,
                    389,
                    377
                ],
                "valid": [
                    100,
                    198,
                    234,
                    306,
                    307,
                    280,
                    121,
                    124,
                    189,
                    191
                ],
                "how": [
                    144,
                    154,
                    157
                ],
                "len": [
                    146,
                    234,
                    158,
                    639
                ],
                "values": [
                    512,
                    517,
                    521,
                    523,
                    146,
                    149,
                    151,
                    538,
                    540,
                    542,
                    158,
                    544,
                    550,
                    554,
                    556,
                    559,
                    563,
                    564,
                    565,
                    569,
                    570,
                    571,
                    575,
                    577,
                    578,
                    582,
                    586,
                    588,
                    589,
                    593,
                    491,
                    496,
                    497,
                    500,
                    505,
                    509,
                    511
                ],
                "is_valid": [
                    160,
                    149,
                    152,
                    155,
                    158
                ],
                "values.ndim": [
                    496,
                    497,
                    151
                ],
                "is_valid.any": [
                    152
                ],
                "idxpos": [
                    160,
                    155,
                    164,
                    158
                ],
                "argmax": [
                    155,
                    158
                ],
                "chk_notna": [
                    160,
                    162
                ],
                "invalid": [
                    645,
                    647,
                    232,
                    654,
                    656,
                    305,
                    665,
                    252,
                    308,
                    247,
                    280,
                    249,
                    188,
                    189,
                    639
                ],
                "yvalues": [
                    199,
                    233,
                    234,
                    267,
                    268,
                    307,
                    280,
                    188
                ],
                "valid.any": [
                    191
                ],
                "result": [
                    194,
                    195,
                    196,
                    268,
                    305,
                    280,
                    281,
                    282,
                    315,
                    316
                ],
                "np.empty_like": [
                    194
                ],
                "np.asarray": [
                    194,
                    331,
                    301,
                    272,
                    666
                ],
                "xvalues": [
                    194,
                    202,
                    266,
                    301,
                    272,
                    279
                ],
                "np.float64": [
                    194
                ],
                "result.fill": [
                    195
                ],
                "np.nan": [
                    281,
                    195,
                    315
                ],
                "valid.all": [
                    198
                ],
                "getattr": [
                    267,
                    202,
                    266,
                    341
                ],
                "valid_limit_directions": [
                    216,
                    211,
                    213
                ],
                "limit_direction": [
                    248,
                    212,
                    213,
                    246,
                    216
                ],
                "limit_direction.lower": [
                    212
                ],
                "msg.format": [
                    216
                ],
                "limit_area": [
                    256,
                    225,
                    259,
                    219,
                    221,
                    222
                ],
                "valid_limit_areas": [
                    225,
                    220,
                    222
                ],
                "limit_area.lower": [
                    221
                ],
                "limit": [
                    512,
                    578,
                    644,
                    229,
                    645,
                    646,
                    647,
                    589,
                    564,
                    247,
                    249,
                    570,
                    252,
                    509
                ],
                "algos._validate_limit": [
                    229
                ],
                "algos": [
                    578,
                    229,
                    589,
                    564,
                    570
                ],
                "all_nans": [
                    232,
                    235
                ],
                "set": [
                    640,
                    641,
                    646,
                    232,
                    233,
                    234,
                    654,
                    247,
                    249,
                    666,
                    252
                ],
                "np.flatnonzero": [
                    232
                ],
                "start_nans": [
                    233,
                    258,
                    235,
                    247
                ],
                "range": [
                    233,
                    234
                ],
                "find_valid_index": [
                    233,
                    234
                ],
                "end_nans": [
                    258,
                    249,
                    234,
                    235
                ],
                "mid_nans": [
                    235,
                    261
                ],
                "preserve_nans": [
                    258,
                    261,
                    281,
                    264,
                    247,
                    249,
                    315,
                    252
                ],
                "_interp_limit": [
                    249,
                    252,
                    247
                ],
                "sorted": [
                    264
                ],
                "yvalues.copy": [
                    268
                ],
                "inds": [
                    301,
                    303,
                    272,
                    304,
                    274,
                    275,
                    276,
                    277,
                    306,
                    279,
                    280,
                    308
                ],
                "needs_i8_conversion": [
                    274
                ],
                "inds.dtype.type": [
                    274,
                    303
                ],
                "inds.dtype": [
                    274,
                    276,
                    303
                ],
                "inds.view": [
                    304,
                    275
                ],
                "np.int64": [
                    304,
                    538,
                    275
                ],
                "np.object_": [
                    276
                ],
                "lib.maybe_convert_objects": [
                    277
                ],
                "lib": [
                    277
                ],
                "np.interp": [
                    280
                ],
                "sp_methods": [
                    284,
                    300
                ],
                "issubclass": [
                    303
                ],
                "np.datetime64": [
                    303
                ],
                "_interpolate_scipy_wrapper": [
                    305
                ],
                "fill_value": [
                    505,
                    502,
                    310,
                    367
                ],
                "bounds_error": [
                    367,
                    311
                ],
                "extra": [
                    328,
                    327
                ],
                "import_optional_dependency": [
                    328
                ],
                "new_x": [
                    386,
                    387,
                    389,
                    331,
                    369,
                    343,
                    378
                ],
                "alt_methods": [
                    353,
                    347,
                    388,
                    334
                ],
                "interpolate.barycentric_interpolate": [
                    335
                ],
                "interpolate": [
                    366,
                    335,
                    336,
                    430,
                    377,
                    474,
                    347,
                    478
                ],
                "interpolate.krogh_interpolate": [
                    336
                ],
                "_from_derivatives": [
                    337,
                    338
                ],
                "x._values.astype": [
                    343
                ],
                "x._values": [
                    343
                ],
                "new_x.astype": [
                    343
                ],
                "interpolate.pchip_interpolate": [
                    347
                ],
                "AttributeError": [
                    348
                ],
                "ImportError": [
                    349
                ],
                "_akima_interpolate": [
                    353
                ],
                "interp1d_methods": [
                    363,
                    355
                ],
                "terp": [
                    369,
                    378,
                    366,
                    377
                ],
                "interpolate.interp1d": [
                    366
                ],
                "y": [
                    384,
                    385,
                    389,
                    367,
                    377
                ],
                "new_y": [
                    369,
                    378,
                    389,
                    390
                ],
                "interpolate.UnivariateSpline": [
                    377
                ],
                "x.flags.writeable": [
                    382
                ],
                "x.flags": [
                    382
                ],
                "x.copy": [
                    383
                ],
                "y.flags.writeable": [
                    384
                ],
                "y.flags": [
                    384
                ],
                "y.copy": [
                    385
                ],
                "new_x.flags.writeable": [
                    386
                ],
                "new_x.flags": [
                    386
                ],
                "new_x.copy": [
                    387
                ],
                "interpolate.BPoly.from_derivatives": [
                    430
                ],
                "interpolate.BPoly": [
                    430
                ],
                "m": [
                    433,
                    431
                ],
                "xi": [
                    474,
                    431
                ],
                "yi.reshape": [
                    431
                ],
                "yi": [
                    474,
                    431
                ],
                "extrapolate": [
                    431
                ],
                "P": [
                    481,
                    474,
                    477,
                    479
                ],
                "interpolate.Akima1DInterpolator": [
                    474
                ],
                "axis": [
                    474,
                    498,
                    493
                ],
                "der": [
                    481,
                    476,
                    478,
                    479
                ],
                "interpolate._isscalar": [
                    478
                ],
                "nu": [
                    481
                ],
                "orig_values": [
                    521,
                    491,
                    519
                ],
                "transf": [
                    512,
                    493,
                    505,
                    509,
                    511
                ],
                "x.T": [
                    493
                ],
                "ndim": [
                    496,
                    516
                ],
                "AssertionError": [
                    499
                ],
                "values.reshape": [
                    500
                ],
                "tuple": [
                    500
                ],
                "values.shape": [
                    577,
                    500,
                    588
                ],
                "mask_missing": [
                    505
                ],
                "clean_fill_method": [
                    600,
                    507,
                    605
                ],
                "pad_2d": [
                    509
                ],
                "backfill_2d": [
                    512
                ],
                "orig_values.dtype.kind": [
                    519
                ],
                "orig_values.dtype": [
                    521,
                    519
                ],
                "values.astype": [
                    521
                ],
                "is_datetime64_dtype": [
                    534
                ],
                "is_datetime64tz_dtype": [
                    535
                ],
                "is_timedelta64_dtype": [
                    536
                ],
                "values.view": [
                    538
                ],
                "is_integer_dtype": [
                    540
                ],
                "ensure_float64": [
                    542
                ],
                "values.dtype": [
                    550
                ],
                "_cast_values_for_fillna": [
                    556
                ],
                "mask.view": [
                    558
                ],
                "np.uint8": [
                    558
                ],
                "_fillna_prep": [
                    569,
                    586,
                    563,
                    575
                ],
                "algos.pad_inplace": [
                    564
                ],
                "algos.backfill_inplace": [
                    570
                ],
                "np.all": [
                    577,
                    588
                ],
                "algos.pad_2d_inplace": [
                    578
                ],
                "algos.backfill_2d_inplace": [
                    589
                ],
                "_fill_methods": [
                    601,
                    596
                ],
                "pad_1d": [
                    596
                ],
                "backfill_1d": [
                    596
                ],
                "N": [
                    666,
                    644,
                    639
                ],
                "f_idx": [
                    640,
                    654,
                    656,
                    663,
                    670
                ],
                "b_idx": [
                    641,
                    665,
                    666,
                    668,
                    670
                ],
                "min": [
                    644
                ],
                "windowed": [
                    645,
                    646
                ],
                "all": [
                    645
                ],
                "_rolling_window": [
                    645
                ],
                "idx": [
                    649,
                    646
                ],
                "np.where": [
                    654,
                    646,
                    647
                ],
                "cumsum": [
                    647
                ],
                "fw_limit": [
                    656,
                    651,
                    667,
                    653
                ],
                "inner": [
                    656,
                    665
                ],
                "bw_limit": [
                    665,
                    658,
                    660
                ],
                "list": [
                    665
                ],
                "shape": [
                    685,
                    687
                ],
                "a.shape": [
                    685
                ],
                "a": [
                    685,
                    686,
                    687
                ],
                "window": [
                    685
                ],
                "strides": [
                    686,
                    687
                ],
                "a.strides": [
                    686
                ],
                "np.lib.stride_tricks.as_strided": [
                    687
                ],
                "np.lib.stride_tricks": [
                    687
                ],
                "np.lib": [
                    687
                ]
            },
            "filtered_variables_in_file": {
                "dtype": [
                    32,
                    512,
                    549,
                    550,
                    586,
                    556,
                    29,
                    563,
                    534,
                    535,
                    536,
                    569,
                    509,
                    575
                ],
                "values_to_mask": [
                    32,
                    35,
                    37,
                    38,
                    29
                ],
                "infer_dtype_from_array": [
                    29
                ],
                "np.array": [
                    32,
                    35
                ],
                "np": [
                    646,
                    647,
                    654,
                    272,
                    275,
                    276,
                    280,
                    281,
                    538,
                    666,
                    32,
                    35,
                    301,
                    558,
                    303,
                    304,
                    687,
                    52,
                    315,
                    577,
                    194,
                    195,
                    68,
                    331,
                    588,
                    232
                ],
                "na_mask": [
                    60,
                    37,
                    38
                ],
                "isna": [
                    64,
                    37,
                    554,
                    372,
                    149,
                    188,
                    62
                ],
                "nonna": [
                    41,
                    38
                ],
                "mask": [
                    512,
                    40,
                    552,
                    42,
                    554,
                    45,
                    558,
                    47,
                    559,
                    51,
                    52,
                    563,
                    564,
                    56,
                    569,
                    58,
                    570,
                    61,
                    62,
                    575,
                    64,
                    578,
                    67,
                    68,
                    70,
                    586,
                    589,
                    503,
                    505,
                    509
                ],
                "x": [
                    481,
                    389,
                    41,
                    479,
                    43,
                    493,
                    47,
                    367,
                    433,
                    341,
                    54,
                    343,
                    377,
                    58,
                    477,
                    382,
                    383
                ],
                "is_numeric_v_string_like": [
                    43,
                    54
                ],
                "arr": [
                    64,
                    68,
                    43,
                    47,
                    52,
                    54,
                    58,
                    62
                ],
                "is_scalar": [
                    51
                ],
                "np.zeros": [
                    52,
                    68
                ],
                "arr.shape": [
                    52,
                    68
                ],
                "na_mask.any": [
                    60
                ],
                "method": [
                    388,
                    389,
                    270,
                    271,
                    300,
                    430,
                    431,
                    309,
                    327,
                    201,
                    75,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    209,
                    600,
                    345,
                    90,
                    601,
                    92,
                    605,
                    95,
                    352,
                    363,
                    364,
                    365,
                    508,
                    367,
                    370,
                    119,
                    121,
                    507,
                    124,
                    127
                ],
                "method.lower": [
                    79
                ],
                "valid_methods": [
                    88,
                    90,
                    85
                ],
                "expecting": [
                    89,
                    92,
                    86
                ],
                "allow_nearest": [
                    87
                ],
                "valid_methods.append": [
                    88
                ],
                "msg": [
                    216,
                    91,
                    214,
                    94
                ],
                "order": [
                    99,
                    365,
                    431,
                    372,
                    119,
                    312,
                    377,
                    375
                ],
                "kwargs.get": [
                    99
                ],
                "kwargs": [
                    313,
                    99,
                    389,
                    377
                ],
                "valid": [
                    100,
                    198,
                    234,
                    306,
                    307,
                    280,
                    121,
                    124,
                    189,
                    191
                ],
                "how": [
                    144,
                    154,
                    157
                ],
                "values": [
                    512,
                    517,
                    521,
                    523,
                    146,
                    149,
                    151,
                    538,
                    540,
                    542,
                    158,
                    544,
                    550,
                    554,
                    556,
                    559,
                    563,
                    564,
                    565,
                    569,
                    570,
                    571,
                    575,
                    577,
                    578,
                    582,
                    586,
                    588,
                    589,
                    593,
                    491,
                    496,
                    497,
                    500,
                    505,
                    509,
                    511
                ],
                "is_valid": [
                    160,
                    149,
                    152,
                    155,
                    158
                ],
                "values.ndim": [
                    496,
                    497,
                    151
                ],
                "is_valid.any": [
                    152
                ],
                "idxpos": [
                    160,
                    155,
                    164,
                    158
                ],
                "argmax": [
                    155,
                    158
                ],
                "chk_notna": [
                    160,
                    162
                ],
                "invalid": [
                    645,
                    647,
                    232,
                    654,
                    656,
                    305,
                    665,
                    252,
                    308,
                    247,
                    280,
                    249,
                    188,
                    189,
                    639
                ],
                "yvalues": [
                    199,
                    233,
                    234,
                    267,
                    268,
                    307,
                    280,
                    188
                ],
                "valid.any": [
                    191
                ],
                "result": [
                    194,
                    195,
                    196,
                    268,
                    305,
                    280,
                    281,
                    282,
                    315,
                    316
                ],
                "np.empty_like": [
                    194
                ],
                "np.asarray": [
                    194,
                    331,
                    301,
                    272,
                    666
                ],
                "xvalues": [
                    194,
                    202,
                    266,
                    301,
                    272,
                    279
                ],
                "np.float64": [
                    194
                ],
                "result.fill": [
                    195
                ],
                "np.nan": [
                    281,
                    195,
                    315
                ],
                "valid.all": [
                    198
                ],
                "valid_limit_directions": [
                    216,
                    211,
                    213
                ],
                "limit_direction": [
                    248,
                    212,
                    213,
                    246,
                    216
                ],
                "limit_direction.lower": [
                    212
                ],
                "msg.format": [
                    216
                ],
                "limit_area": [
                    256,
                    225,
                    259,
                    219,
                    221,
                    222
                ],
                "valid_limit_areas": [
                    225,
                    220,
                    222
                ],
                "limit_area.lower": [
                    221
                ],
                "limit": [
                    512,
                    578,
                    644,
                    229,
                    645,
                    646,
                    647,
                    589,
                    564,
                    247,
                    249,
                    570,
                    252,
                    509
                ],
                "algos._validate_limit": [
                    229
                ],
                "algos": [
                    578,
                    229,
                    589,
                    564,
                    570
                ],
                "all_nans": [
                    232,
                    235
                ],
                "np.flatnonzero": [
                    232
                ],
                "start_nans": [
                    233,
                    258,
                    235,
                    247
                ],
                "find_valid_index": [
                    233,
                    234
                ],
                "end_nans": [
                    258,
                    249,
                    234,
                    235
                ],
                "mid_nans": [
                    235,
                    261
                ],
                "preserve_nans": [
                    258,
                    261,
                    281,
                    264,
                    247,
                    249,
                    315,
                    252
                ],
                "_interp_limit": [
                    249,
                    252,
                    247
                ],
                "yvalues.copy": [
                    268
                ],
                "inds": [
                    301,
                    303,
                    272,
                    304,
                    274,
                    275,
                    276,
                    277,
                    306,
                    279,
                    280,
                    308
                ],
                "needs_i8_conversion": [
                    274
                ],
                "inds.dtype.type": [
                    274,
                    303
                ],
                "inds.dtype": [
                    274,
                    276,
                    303
                ],
                "inds.view": [
                    304,
                    275
                ],
                "np.int64": [
                    304,
                    538,
                    275
                ],
                "np.object_": [
                    276
                ],
                "lib.maybe_convert_objects": [
                    277
                ],
                "lib": [
                    277
                ],
                "np.interp": [
                    280
                ],
                "sp_methods": [
                    284,
                    300
                ],
                "np.datetime64": [
                    303
                ],
                "_interpolate_scipy_wrapper": [
                    305
                ],
                "fill_value": [
                    505,
                    502,
                    310,
                    367
                ],
                "bounds_error": [
                    367,
                    311
                ],
                "extra": [
                    328,
                    327
                ],
                "import_optional_dependency": [
                    328
                ],
                "new_x": [
                    386,
                    387,
                    389,
                    331,
                    369,
                    343,
                    378
                ],
                "alt_methods": [
                    353,
                    347,
                    388,
                    334
                ],
                "interpolate.barycentric_interpolate": [
                    335
                ],
                "interpolate": [
                    366,
                    335,
                    336,
                    430,
                    377,
                    474,
                    347,
                    478
                ],
                "interpolate.krogh_interpolate": [
                    336
                ],
                "_from_derivatives": [
                    337,
                    338
                ],
                "x._values.astype": [
                    343
                ],
                "x._values": [
                    343
                ],
                "new_x.astype": [
                    343
                ],
                "interpolate.pchip_interpolate": [
                    347
                ],
                "_akima_interpolate": [
                    353
                ],
                "interp1d_methods": [
                    363,
                    355
                ],
                "terp": [
                    369,
                    378,
                    366,
                    377
                ],
                "interpolate.interp1d": [
                    366
                ],
                "y": [
                    384,
                    385,
                    389,
                    367,
                    377
                ],
                "new_y": [
                    369,
                    378,
                    389,
                    390
                ],
                "interpolate.UnivariateSpline": [
                    377
                ],
                "x.flags.writeable": [
                    382
                ],
                "x.flags": [
                    382
                ],
                "x.copy": [
                    383
                ],
                "y.flags.writeable": [
                    384
                ],
                "y.flags": [
                    384
                ],
                "y.copy": [
                    385
                ],
                "new_x.flags.writeable": [
                    386
                ],
                "new_x.flags": [
                    386
                ],
                "new_x.copy": [
                    387
                ],
                "interpolate.BPoly.from_derivatives": [
                    430
                ],
                "interpolate.BPoly": [
                    430
                ],
                "m": [
                    433,
                    431
                ],
                "xi": [
                    474,
                    431
                ],
                "yi.reshape": [
                    431
                ],
                "yi": [
                    474,
                    431
                ],
                "extrapolate": [
                    431
                ],
                "P": [
                    481,
                    474,
                    477,
                    479
                ],
                "interpolate.Akima1DInterpolator": [
                    474
                ],
                "axis": [
                    474,
                    498,
                    493
                ],
                "der": [
                    481,
                    476,
                    478,
                    479
                ],
                "interpolate._isscalar": [
                    478
                ],
                "nu": [
                    481
                ],
                "orig_values": [
                    521,
                    491,
                    519
                ],
                "transf": [
                    512,
                    493,
                    505,
                    509,
                    511
                ],
                "x.T": [
                    493
                ],
                "ndim": [
                    496,
                    516
                ],
                "values.reshape": [
                    500
                ],
                "values.shape": [
                    577,
                    500,
                    588
                ],
                "mask_missing": [
                    505
                ],
                "clean_fill_method": [
                    600,
                    507,
                    605
                ],
                "pad_2d": [
                    509
                ],
                "backfill_2d": [
                    512
                ],
                "orig_values.dtype.kind": [
                    519
                ],
                "orig_values.dtype": [
                    521,
                    519
                ],
                "values.astype": [
                    521
                ],
                "is_datetime64_dtype": [
                    534
                ],
                "is_datetime64tz_dtype": [
                    535
                ],
                "is_timedelta64_dtype": [
                    536
                ],
                "values.view": [
                    538
                ],
                "is_integer_dtype": [
                    540
                ],
                "ensure_float64": [
                    542
                ],
                "values.dtype": [
                    550
                ],
                "_cast_values_for_fillna": [
                    556
                ],
                "mask.view": [
                    558
                ],
                "np.uint8": [
                    558
                ],
                "_fillna_prep": [
                    569,
                    586,
                    563,
                    575
                ],
                "algos.pad_inplace": [
                    564
                ],
                "algos.backfill_inplace": [
                    570
                ],
                "np.all": [
                    577,
                    588
                ],
                "algos.pad_2d_inplace": [
                    578
                ],
                "algos.backfill_2d_inplace": [
                    589
                ],
                "_fill_methods": [
                    601,
                    596
                ],
                "pad_1d": [
                    596
                ],
                "backfill_1d": [
                    596
                ],
                "N": [
                    666,
                    644,
                    639
                ],
                "f_idx": [
                    640,
                    654,
                    656,
                    663,
                    670
                ],
                "b_idx": [
                    641,
                    665,
                    666,
                    668,
                    670
                ],
                "windowed": [
                    645,
                    646
                ],
                "_rolling_window": [
                    645
                ],
                "idx": [
                    649,
                    646
                ],
                "np.where": [
                    654,
                    646,
                    647
                ],
                "cumsum": [
                    647
                ],
                "fw_limit": [
                    656,
                    651,
                    667,
                    653
                ],
                "inner": [
                    656,
                    665
                ],
                "bw_limit": [
                    665,
                    658,
                    660
                ],
                "shape": [
                    685,
                    687
                ],
                "a.shape": [
                    685
                ],
                "a": [
                    685,
                    686,
                    687
                ],
                "window": [
                    685
                ],
                "strides": [
                    686,
                    687
                ],
                "a.strides": [
                    686
                ],
                "np.lib.stride_tricks.as_strided": [
                    687
                ],
                "np.lib.stride_tricks": [
                    687
                ],
                "np.lib": [
                    687
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_115/pandas/tests/series/test_missing.py",
                "test_function": "test_interpolate_unsorted_index",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"ascending, expected_values\",\n        [(True, [1, 2, 3, 9, 10]), (False, [10, 9, 3, 2, 1])],\n    )\n    def test_interpolate_unsorted_index(self, ascending, expected_values):\n        # GH 21037\n        ts = pd.Series(data=[10, 9, np.nan, 2, 1], index=[10, 9, 3, 2, 1])\n        result = ts.sort_index(ascending=ascending).interpolate(method=\"index\")\n        expected = pd.Series(data=expected_values, index=expected_values, dtype=float)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Series are different  Series values are different (20.0 %) [left]:  [10.0, 9.0, 1.0, 2.0, 1.0] [right]: [10.0, 9.0, 3.0, 2.0, 1.0]",
                "full_test_error": "self = <pandas.tests.series.test_missing.TestSeriesInterpolateData object at 0x116631400>\nascending = False, expected_values = [10, 9, 3, 2, 1]\n\n    @pytest.mark.parametrize(\n        \"ascending, expected_values\",\n        [(True, [1, 2, 3, 9, 10]), (False, [10, 9, 3, 2, 1])],\n    )\n    def test_interpolate_unsorted_index(self, ascending, expected_values):\n        # GH 21037\n        ts = pd.Series(data=[10, 9, np.nan, 2, 1], index=[10, 9, 3, 2, 1])\n        result = ts.sort_index(ascending=ascending).interpolate(method=\"index\")\n        expected = pd.Series(data=expected_values, index=expected_values, dtype=float)\n>       tm.assert_series_equal(result, expected)\n\npandas/tests/series/test_missing.py:1662: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: Series are different\nE   \nE   Series values are different (20.0 %)\nE   [left]:  [10.0, 9.0, 1.0, 2.0, 1.0]\nE   [right]: [10.0, 9.0, 3.0, 2.0, 1.0]\n\npandas/_libs/testing.pyx:174: AssertionError",
                "traceback": "pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: Series are different\nE   \nE   Series values are different (20.0 %)\nE   [left]:  [10.0, 9.0, 1.0, 2.0, 1.0]\nE   [right]: [10.0, 9.0, 3.0, 2.0, 1.0]\n\npandas/_libs/testing.pyx:174: AssertionError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('ascending, expected_values', [(True, [1, 2, 3, 9, 10]), (False, [10, 9, 3, 2, 1])])"
                ]
            }
        ]
    }
}