{
    "pandas": [
        {
            "bugID": 115,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 167,
            "file_name": "/pandas/core/missing.py",
            "replace_code": "def interpolate_1d(\n        xvalues,\n        yvalues,\n        method=\"linear\",\n        limit=None,\n        limit_direction=\"forward\",\n        limit_area=None,\n        fill_value=None,\n        bounds_error=False,\n        order=None,\n        **kwargs,\n    ):\n        # other code remains the same\n\n    if method in [\"linear\", \"time\", \"index\", \"values\"]:\n        if method in (\"values\", \"index\"):\n            inds = np.asarray(xvalues)\n            inds_sorted = np.argsort(inds)\n            sorted_yvalues = yvalues[inds_sorted]\n            sorted_xvalues = np.sort(inds)\n            # hack for DatetimeIndex, #1646\n            if needs_i8_conversion(sorted_xvalues.dtype.type):\n                sorted_xvalues = sorted_xvalues.view(np.int64)\n            if sorted_xvalues.dtype == np.object_:\n                sorted_xvalues = lib.maybe_convert_objects(sorted_xvalues)\n        else:\n            inds = xvalues\n            sorted_xvalues = np.sort(inds)\n            sorted_yvalues = yvalues[np.argsort(inds)]\n        result = np.interp(sorted_xvalues, sorted_xvalues[invalid], sorted_yvalues[invalid])\n        preserve_nans_sorted = np.argsort([*preserve_nans])\n        preserve_nans = preserve_nans_sorted[preserve_nans_sorted]\n        result[preserve_nans] = np.nan\n        result = result[np.argsort(inds_sorted)]\n        return result"
        }
    ]
}