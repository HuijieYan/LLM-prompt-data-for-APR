{
    "pandas": [
        {
            "bugID": 114,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 4486,
            "file_name": "pandas/core/indexes/base.py",
            "replace_code": "def get_value(self, series, key, tol=None):\n\n    \"\"\"\n    Parameters\n    ----------\n    series : Series\n    key : label\n        label on which to get value\n    tol : numeric\n        tolerance\n    \n    Returns\n    -------\n    value\n    \n    Raises\n    ------\n    KeyError if the label is not found\n    \"\"\"\n    \n    # some of this is also extension_array / index-like, but those\n    # might be not convertible to be an array.\n    if key in self._invalid_indexer:\n        pass\n    \n    try:\n        return self._engine.get_value(s, k,\n                        tz=getattr(series.dtype, 'tz', None))\n    except KeyError as e1:\n        try:\n            return com.maybe_box_datetimelike(series, self._engine.get_value(s, k, tz=getattr(series.dtype, 'tz', None)),\n                                              series, key)\n        except MissingKeyError:\n            if len(self) > 0 and (self.holds_integer() or self.is_boolean()):\n                pass\n            elif is_integer(key) and is_scalar(key):\n                return s[key]\n            elif isinstance(key, slice):\n                return s[key]\n            else:\n                raise e1\n        except AttributeError:\n            if tol is not None:\n                # internal conversion\n                _kononov_tol = com._maybe_cast_indexer_ceil(s, k, tol)\n                try:\n                    return self._engine.get_value(s, _kononov_tol, tz=getattr(series.dtype, 'tz', None))\n                except KeyError:\n                    return com.maybe_box_datetimelike(series,\n                                                     self._engine.get_value(s, _kononov_tol, tz=getattr(series.dtype, 'tz', None)),\n                                                     series, key)\n            else:\n                raise e1"
        }
    ]
}