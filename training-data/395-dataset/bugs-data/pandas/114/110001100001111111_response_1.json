{
    "pandas": [
        {
            "bugID": 114,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 4486,
            "file_name": "core/indexes/base.py",
            "replace_code": "def get_value(self, series, key):\n\n    # Check if the series is an ExtensionArray or Index, and if key is a scalar\n\n    s = getattr(series, \"_values\", series)\n    if isinstance(s, (ExtensionArray, Index)) and isinstance(key, (int, np.integer)):\n        try:\n            iloc = self.get_loc(key)\n            return s[iloc]\n        except KeyError:\n            if len(self) > 0 and (self.holds_integer() or self.is_boolean()):\n                raise\n            elif isinstance(key, (int, np.integer)):\n                return s[key]\n    \n    # Convert series and key to their respective values\n    s = com.values_from_object(series)\n    k = com.values_from_object(key)\n    \n    # Convert key to a scalar indexer\n    k = self._convert_scalar_indexer(k, kind=\"getitem\")\n    try:\n        # Get the value using the engine\n        return self._engine.get_value(s, k, tz=getattr(series.dtype, \"tz\", None))\n    except KeyError as e1:\n        if len(self) > 0 and (self.holds_integer() or self.is_boolean()):\n            raise\n    \n        try:\n            # Get the value using libindex\n            return libindex.get_value_at(s, key)\n        except IndexError:\n            raise\n        except TypeError:\n            # Handle generator/iterator-like\n            if is_iterator(key):\n                raise InvalidIndexError(key)\n            else:\n                raise e1\n        except Exception:\n            raise e1\n    except TypeError:\n        # Handle invalid key error\n        if isinstance(key, (int, np.integer)):\n            raise IndexError(key)\n        raise InvalidIndexError(key)"
        }
    ]
}