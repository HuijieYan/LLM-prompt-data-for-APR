{
    "pandas": [
        {
            "bugID": 102,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 123,
            "file_name": "pandas/core/internals/construction.py",
            "replace_code": "def init_ndarray(values, index, columns, dtype=None, copy=False):\n    # input must be a ndarray, list, Series, index\n    from pandas.core.internals.blocks import make_block\n    if isinstance(values, (np.ndarray, list, pd.Series, pd.Index)):\n        if isinstance(values, pd.Series):\n            if columns is None:\n                if values.name is not None:\n                    columns = [values.name]\n                if index is None:\n                    index = values.index\n                else:\n                    values = values.reindex(index)\n                # zero len case (GH #2234)\n                if not len(values) and columns is not None and len(columns):\n                    values = np.empty((0, 1), dtype=object)\n                # we could have a categorical type passed or coerced to 'category'\n        if pd.api.types.is_categorical_dtype(getattr(values, \"dtype\", None)) or pd.api.types.is_categorical_dtype(dtype):\n            if not hasattr(values, \"dtype\"):\n                values = prep_ndarray(values, copy=copy)\n                values = values.ravel()\n            elif copy:\n                values = values.copy()\n            index, columns = _get_axes(N=len(values), K=1, index=index, columns=columns)\n            return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n        elif pd.api.types.is_extension_array_dtype(values) or pd.api.types.is_extension_array_dtype(dtype):\n            # GH#19157\n            if columns is None:\n                columns = [0]\n            return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n        else:\n            values = prep_ndarray(values, copy=copy)\n            if dtype is not None:\n                if not pd.api.types.is_dtype_equal(values.dtype, dtype):\n                    try:\n                        values = values.astype(dtype)\n                    except Exception as orig:\n                        # e.g. ValueError when trying to cast object dtype to float64\n                        raise ValueError(\n                            f\"failed to cast to '{dtype}' (Exception was: {orig})\"\n                        ) from orig\n            index, columns = _get_axes(N=values.shape[0], K=values.shape[1], index=index, columns=columns)\n            values = values.T\n            if dtype is None and pd.api.types.is_object_dtype(values):\n                if values.ndim == 2 and values.shape[0] != 1:\n                    # transpose and separate blocks\n                    dvals_list = [maybe_infer_to_datetimelike(row) for row in values]\n                    for n in range(len(dvals_list)):\n                        if isinstance(dvals_list[n], np.ndarray):\n                            dvals_list[n] = dvals_list[n].reshape(1, -1)\n                    from pandas.core.internals.blocks import make_block\n                    # TODO: What about re-joining object columns?\n                    block_values = [\n                        make_block(dvals_list[n], placement=[n]) for n in range(len(dvals_list))\n                    ]\n                else:\n                    datelike_vals = maybe_infer_to_datetimelike(values)\n                    block_values = [datelike_vals]\n            else:\n                block_values = [values]\n            return create_block_manager_from_blocks(block_values, [columns, index])\n    else:\n        raise ValueError(\"Input must be a ndarray, list, Series, or index\")"
        }
    ]
}