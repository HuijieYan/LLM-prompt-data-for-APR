{
    "pandas": [
        {
            "bugID": 102,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 123,
            "file_name": "pandas/core/internals/construction.py",
            "replace_code": "def init_ndarray(values, index, columns, dtype=None, copy=False):\n    # input must be a ndarray, list, Series, index\n    import numpy as np\n    from pandas.core.dtypes.common import (\n    is_categorical_dtype,\n    is_object_dtype,\n    is_extension_array_dtype,\n)\n    from pandas.core.indexers import _get_axes\n    from pandas.arrays import ABCSeries\n    from pandas.core.dtypes.cast import maybe_infer_to_datetimelike\n    from pandas.core.internals.construction import (\n    arrays_to_mgr,\n    create_block_manager_from_blocks,\n)\n    from pandas.core.dtypes.generic import _check\n    from pandas.core.dtypes.cast import ensure_float\n    from pandas.core.arrays import Categorical\n    values = _check(values, copy=copy)\n    \n    if isinstance(values, ABCSeries):\n        if columns is None:\n            if values.name is not None:\n                columns = [values.name]\n        if index is None:\n            index = values.index\n        else:\n            values = values.reindex(index)\n    \n        # zero len case (GH #2234)\n        if not len(values) and columns is not None and len(columns):\n            values = np.empty((0, 1), dtype=object)\n    \n    if is_categorical_dtype(values) or (\n        dtype is not None and is_categorical_dtype(dtype)\n    ):\n        values = ensure_float(values)\n        index, columns = _get_axes(len(values), 1, index, columns)\n        return arrays_to_mgr([values], columns, index=index, dtype=dtype)\n    \n    elif is_extension_array_dtype(values) or (\n        dtype is not None and is_extension_array_dtype(dtype)\n    ):\n        if columns is None:\n            columns = [0]\n        return arrays_to_mgr([values], columns, index=index, dtype=dtype)\n    \n    values = _check(values, copy=copy)\n    \n    if dtype is not None:\n        try:\n            values = values.astype(dtype)\n        except (ValueError, TypeError) as e:\n            raise ValueError(f\"failed to cast to {dtype}\") from e\n    \n    index, columns = _get_axes(*values.shape, index=index, columns=columns)\n    values = values.T\n    \n    if dtype is None and is_object_dtype(values):\n        datelike_vals = maybe_infer_to_datetimelike(values)\n        block_values = [datelike_vals]\n    else:\n        block_values = [values]\n    \n    return create_block_manager_from_blocks(block_values, [columns, index])"
        }
    ]
}