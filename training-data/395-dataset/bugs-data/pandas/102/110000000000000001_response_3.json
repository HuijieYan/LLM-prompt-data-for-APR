{
    "pandas": [
        {
            "bugID": 102,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 123,
            "file_name": "pandas/core/internals/construction.py",
            "replace_code": "def init_ndarray(values, index=None, columns=None, dtype=None, copy=False):\n    import numpy as np\n    import pandas as pd\n    if isinstance(values, (pd.Series, np.ndarray, list, pd.Index)):\n        if isinstance(values, pd.Series):\n            if columns is None:\n                if values.name is not None:\n                    columns = [values.name]\n            if index is None:\n                index = values.index\n            else:\n                values = values.reindex(index)\n    \n            if len(values) == 0 and columns is not None and len(columns) > 0:\n                values = np.empty((0, 1), dtype=object)\n    \n            if pd.api.types.is_categorical_dtype(getattr(values, \"dtype\", None)) or pd.api.types.is_categorical_dtype(dtype):\n                if not hasattr(values, \"dtype\"):\n                    values = pd.api.types.pandas.Categorical(values, copy=copy)\n                    values = values.categories.values.ravel()\n                elif copy:\n                    values = values.copy()\n    \n                index, columns = pd.core.index._get_axes(len(values), 1, index, columns)\n                return pd.core.internals.managers.create_block_manager_from_blocks([pd.core.internals.blocks.make_block(values, placement=(0,))], [columns, index])\n    \n            elif pd.api.types.is_extension_array_dtype(values) or pd.api.types.is_extension_array_dtype(dtype):\n                if columns is None:\n                    columns = [0]\n                return pd.core.internals.managers.create_block_manager_from_blocks([pd.core.internals.blocks.make_block(values, placement=(0,))], [columns, index])\n    \n            values = pd.core.arrays._prep_ndarray(values, copy=copy)\n    \n            if dtype is not None:\n                if not pd.api.types.is_dtype_equal(values.dtype, dtype):\n                    try:\n                        values = values.astype(dtype)\n                    except Exception as orig:\n                        raise ValueError(f\"failed to cast to '{dtype}' (Exception was: {orig})\") from orig\n    \n            index, columns = pd.core.index._get_axes(*values.shape, index=index, columns=columns)\n            values = np.transpose(values)\n    \n            if dtype is None and pd.api.types.is_object_dtype(values):\n                if values.ndim == 2 and values.shape[0] != 1:\n                    dvals_list = [pd.core.dtypes.common.maybe_infer_to_datetimelike(row) for row in values]\n                    block_values = [pd.core.internals.blocks.make_block(dvals_list[n].reshape(1, -1), placement=[n]) for n in range(len(dvals_list))]\n                else:\n                    datelike_vals = pd.core.dtypes.common.maybe_infer_to_datetimelike(values)\n                    block_values = [datelike_vals]\n            else:\n                block_values = [values]\n    \n            return pd.core.internals.managers.create_block_manager_from_blocks(block_values, [columns, index])\n        else:\n            raise ValueError(\"Input must be a Series, ndarray, list, or Index.\")\n    else:\n        raise ValueError(\"Input must be a Series, ndarray, list, or Index.\")"
        }
    ]
}