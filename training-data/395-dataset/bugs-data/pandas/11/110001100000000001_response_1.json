{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 590,
            "file_name": "/pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    from pandas.core.indexes.base import ensure_index\n    from pandas.core.indexes.multi import MultiIndex\n    import numpy as np\n    if (levels is None and isinstance(keys[0], tuple)) or (levels is not None and len(levels) > 1):\n        zipped = list(zip(*keys))\n        if names is None:\n            names = [None] * len(zipped)\n    \n        if levels is None:\n            _, levels = factorize_from_iterables(zipped)\n        else:\n            levels = [ensure_index(x) for x in levels]\n    else:\n        zipped = [keys]\n        if names is None:\n            names = [None]\n    \n        if levels is None:\n            levels = [ensure_index(keys)]\n        else:\n            levels = [ensure_index(x) for x in levels]\n    \n    if not all_indexes_same(indexes):\n        codes_list = []\n    \n        for hlevel, level in zip(zipped, levels):\n            to_concat = []\n            for key in hlevel:\n                i = level.get_loc(key)\n                to_concat.append(np.repeat(i, len(level)))\n            codes_list.append(np.concatenate(to_concat))\n    \n        concat_index = MultiIndex._concat(indexes)\n    \n        levels.extend(concat_index._get_level_values(0).levels)\n        codes_list.extend(concat_index.codes)\n    \n        if len(names) < len(levels):\n            names.extend(get_consensus_names(indexes))\n    \n        return MultiIndex(levels=levels, codes=codes_list, names=names, verify_integrity=False)\n    \n    new_index = indexes[0]\n    kpieces = len(indexes)\n    \n    new_levels = list(levels)\n    new_codes = []\n    \n    for hlevel, level in zip(zipped, levels):\n        hlevel = ensure_index(hlevel)\n        mapped = level.get_indexer(hlevel)\n    \n        mask = mapped == -1\n        if mask.any():\n            raise ValueError(f\"Values not found in passed level: {hlevel[mask]!s}\")\n    \n        new_codes.append(np.repeat(mapped, len(level)))\n    \n    new_levels.extend(new_index.levels)\n    new_codes.extend([np.tile(lab, kpieces) for lab in new_index.codes])\n    \n    if len(names) < len(new_levels):\n        names.extend(new_index.names)\n    \n    return MultiIndex(levels=new_levels, codes=new_codes, names=names, verify_integrity=False)"
        }
    ]
}