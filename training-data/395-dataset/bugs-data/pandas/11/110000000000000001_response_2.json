{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    from pandas import MultiIndex\n    import numpy as np\n    if (levels is None and isinstance(keys[0], tuple)) or (levels is not None and len(levels) > 1):\n        zipped = list(zip(*keys))\n        if names is None:\n            names = [None] * len(zipped)\n    \n        if levels is None:\n            _, levels = pd.factorize_from_iterables(zipped)\n        else:\n            levels = [pd.ensure_index(x) for x in levels]\n    else:\n        zipped = [keys]\n        if names is None:\n            names = [None]\n    \n        if levels is None:\n            levels = [pd.ensure_index(keys)]\n        else:\n            levels = [pd.ensure_index(x) for x in levels]\n    \n    if not all(index.equals(indexes[0]) for index in indexes):\n        raise ValueError(\"Cannot concat indices that do not have the same number of levels\")\n    \n    codes_list = [index.codes[0] for index in indexes]  # Using the first level codes\n    \n    concat_index = _concat_indexes(indexes)\n    \n    if isinstance(concat_index, MultiIndex):\n        levels.extend(concat_index.levels)\n        codes_list.extend(concat_index.codes)\n    else:\n        codes, categories = pd.factorize_from_iterables(concat_index)\n        levels.append(categories)\n        codes_list.append(codes)\n    \n    # Handle names\n    if len(names) == len(levels):\n        names = list(names)\n    else:\n        names = names + get_consensus_names(indexes)\n    \n    return MultiIndex(levels=levels, codes=codes_list, names=names, verify_integrity=False)"
        }
    ]
}