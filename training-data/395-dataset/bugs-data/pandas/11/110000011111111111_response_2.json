{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    import numpy as np\n    from pandas import Index, MultiIndex\n    from pandas.core.dtypes.common import ensure_index\n    from pandas.core.algorithms import factorize_from_iterables\n    if (levels is None and isinstance(keys[0], tuple)) or (\n        levels is not None and len(levels) > 1\n    ):\n        zipped = list(zip(*keys))\n        if names is None:\n            names = [None] * len(zipped)\n    \n        if levels is None:\n            _, levels = factorize_from_iterables(zipped)\n        else:\n            levels = [ensure_index(x) for x in levels]\n    else:\n        zipped = [keys]\n        if names is None:\n            names = [None]\n    \n        if levels is None:\n            levels = [ensure_index(keys)]\n        else:\n            levels = [ensure_index(x) for x in levels]\n    \n    if not all(len(idx) == len(indexes[0]) for idx in indexes):\n        raise AssertionError(\"Cannot concat indices that do not have the same length\")\n    \n    new_levels = list(levels)\n    new_codes = []\n    \n    for hlevel, level in zip(zipped, levels):\n        hlevel = ensure_index(hlevel)\n        mapped = level.get_indexer(hlevel)\n    \n        mask = mapped == -1\n        if mask.any():\n            raise ValueError(f\"Values not found in passed level: {hlevel[mask]!s}\")\n    \n        new_codes.append(mapped)\n    \n    for index in indexes:\n        new_codes.append(np.arange(len(index)))\n    \n    if names is None:\n        names = [None] * len(new_levels)\n    elif len(names) < len(new_levels):\n        names.extend([None] * (len(new_levels) - len(names)))\n    \n    return MultiIndex(\n        levels=new_levels, codes=new_codes, names=names, verify_integrity=False\n    )"
        }
    ]
}