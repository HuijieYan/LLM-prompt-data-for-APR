{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    from pandas import MultiIndex\n    if not names:\n        names = [None] * len(keys)\n    \n    if levels:\n        levels = [ensure_index(x) for x in levels]\n    \n    codes_list = []\n    new_levels = []\n    new_names = []\n    new_codes = []\n    \n    for key, index in zip(keys, indexes):\n        try:\n            i = level.get_loc(key)\n        except KeyError as err:\n            raise ValueError(f\"Key {key} not in level {level}\") from err\n    \n        to_concat.append(np.repeat(i, len(index)))\n    codes_list.append(np.concatenate(to_concat))\n    \n    for level, zipped_level in zip(levels, zipped):\n        mapped = level.get_indexer(ensure_index(zipped_level))\n    \n        mask = mapped == -1\n        if mask.any():\n            raise ValueError(f\"Values not found in passed level: {hlevel[mask]!s}\")\n    \n        new_codes.append(np.repeat(mapped, len(indexes[0])))\n    \n    if isinstance(keys[0], tuple):\n        for key, index in zip(keys[0], indexes):\n            try:\n                i = level.get_loc(key)\n            except KeyError as err:\n                raise ValueError(f\"Key {key} not in level {level}\") from err\n    \n            to_concat.append(np.repeat(i, len(index)))\n            codes_list.append(np.concatenate(to_concat))\n        else:\n            zipped = [keys]\n            for index in indexes:\n                to_concat.append(np.repeat(level.get_loc(index), len(index)))\n                codes_list.append(np.concatenate(to_concat))\n    \n    new_index = indexes[0]\n    new_names = names\n    new_levels = levels\n    \n    if isinstance(new_index, MultiIndex):\n        new_levels.extend(new_index.levels)\n        new_codes.extend(new_index.codes)\n    else:\n        new_levels.append(new_index)\n        new_codes.append(np.tile(np.arange(len(new_index)), len(indexes)))\n    \n    if len(new_names) < len(new_levels):\n        new_names.extend(new_index.names)\n    \n    return MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)"
        }
    ]
}