{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 590,
            "file_name": "core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    \n\n    if levels is None and isinstance(keys[0], tuple):\n        zipped = list(zip(*keys))\n        if names is None:\n            names = [None] * len(zipped)\n    \n        _, levels = factorize_from_iterables(zipped)\n    else:\n        if levels is not None and len(levels) > 1:\n            level_list = levels\n        else:\n            level_list = [ensure_index(keys)]\n            \n        zipped = [keys]\n        names = [None]\n        levels = [ensure_index(keys)]\n    \n    if not all_indexes_same(indexes):\n        codes_list = []\n    \n        # things are potentially different sizes, so compute the exact codes\n        # for each level and pass those to MultiIndex.from_arrays\n    \n        for hlevel, level in zip(zipped, level_list):\n            to_concat = []\n            for key, index in zip(hlevel, indexes):\n                try:\n                    i = level.get_loc(key)\n                except KeyError as err:\n                    raise ValueError(f\"Key {key} not in level {level}\") from err\n    \n                to_concat.append(np.repeat(i, len(index)))\n            codes_list.append(np.concatenate(to_concat))\n    \n        concat_index = _concat_indexes(indexes)\n    \n        # these go at the end\n        if isinstance(concat_index, MultiIndex):\n            level_list.extend(concat_index.levels)\n            codes_list.extend(concat_index.codes)\n        else:\n            codes, categories = factorize_from_iterable(concat_index)\n            level_list.append(categories)\n            codes_list.append(codes)\n    \n        if len(names) == len(level_list):\n            names = list(names)\n        else:\n            # make sure that all of the passed indices have the same nlevels\n            if not len({idx.nlevels for idx in indexes}) == 1:\n                raise AssertionError(\n                    \"Cannot concat indices that do not have the same number of levels\"\n                )\n    \n            # also copies\n            names = names + get_consensus_names(indexes)\n    \n        return MultiIndex(\n            levels=level_list, codes=codes_list, names=names, verify_integrity=False\n        )\n    \n    new_index = indexes[0]\n    n = len(new_index)\n    kpieces = len(indexes)\n    \n    # also copies\n    new_names = list(names)\n    new_levels = list(levels)\n    \n    # construct codes\n    new_codes = []\n    \n    # do something a bit more speedy\n    \n    for hlevel, level in zip(zipped, level_list):\n        hlevel = ensure_index(hlevel)\n        mapped = level.get_indexer(hlevel)\n    \n        mask = mapped == -1\n        if mask.any():\n            raise ValueError(f\"Values not found in passed level: {hlevel[mask]!s}\")\n    \n        new_codes.append(np.repeat(mapped, n))\n    \n    if isinstance(new_index, MultiIndex):\n        new_levels.extend(new_index.levels)\n        new_codes.extend([np.tile(lab, kpieces) for lab in new_index.codes])\n    else:\n        new_levels.append(new_index)\n        new_codes.append(np.tile(np.arange(n), kpieces))\n    \n    if len(new_names) < len(new_levels):\n        new_names.extend(new_index.names)\n    \n    return MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )"
        }
    ]
}