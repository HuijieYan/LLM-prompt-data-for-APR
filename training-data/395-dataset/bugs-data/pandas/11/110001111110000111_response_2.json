{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    from pandas import Index\n    from pandas.core.indexes.multi import MultiIndex\n    from pandas.core.reshape.concat import _concat_indexes, ensure_index, all_indexes_same\n    import numpy as np\n    from pandas.core.algorithms import factorize_from_iterables\n    if levels is None:\n        levels = [keys] * len(indexes)\n    else:\n        levels = [ensure_index(x) for x in levels]\n    \n    if names is None:\n        names = [None] * len(levels)\n    \n    if not all_indexes_same(indexes):\n        codes_list = []\n        for level, index in zip(levels, indexes):\n            codes = level.get_indexer_for(index.get_level_values(0))\n            codes_list.append(codes)\n    \n        concat_index = _concat_indexes(indexes)\n    \n        if isinstance(concat_index, MultiIndex):\n            levels.extend(concat_index.levels)\n            codes_list.extend(concat_index.codes)\n        else:\n            codes, categories = factorize_from_iterables(concat_index)\n            levels.append(categories)\n            codes_list.append(codes)\n    \n        return MultiIndex(\n            levels=levels, codes=codes_list, names=names, verify_integrity=False\n        )\n    \n    new_index = indexes[0]\n    \n    new_codes_list = []\n    for level, key in zip(levels, keys):\n        codes = level.get_indexer(key)\n        new_codes_list.append(codes)\n    \n    if isinstance(new_index, MultiIndex):\n        levels.extend(new_index.levels)\n        new_codes_list.extend(new_index.codes)\n    else:\n        levels.append(new_index)\n        new_codes_list.append(np.tile(np.arange(len(new_index)), len(indexes)))\n    \n    return MultiIndex(\n        levels=levels, codes=new_codes_list, names=names, verify_integrity=False\n    )"
        }
    ]
}