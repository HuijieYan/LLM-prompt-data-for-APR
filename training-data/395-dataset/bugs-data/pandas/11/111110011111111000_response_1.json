{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    from pandas import MultiIndex, DataFrame, Series, concat, Index\n    import pandas._testing as tm\n    from pandas.api.types import ensure_index\n    from pandas import MultiIndex, DataFrame, Series, concat, Index\n    import pandas._testing as tm\n    \n    zipped = [Index(keys)]\n    if names is None:\n        names = [None]\n    \n    if levels is None:\n        from pandas.api.types import ensure_index\n        levels = [ensure_index(keys)]\n    else:\n        levels = [ensure_index(x) for x in levels]\n    \n    if not all(indexes[0].equals(index) for index in indexes[1:]):\n        raise AssertionError(\n            \"Cannot concat indices that do not have the same number of levels\"\n        )\n    \n    new_index = indexes[0]\n    n = len(new_index)\n    kpieces = len(indexes)\n    \n    # also copies\n    new_names = list(names)\n    new_levels = list(levels)\n    new_codes = []\n    \n    for hlevel, level in zip(zipped, levels):\n        hlevel = ensure_index(hlevel)\n        mapped = level.get_indexer(hlevel)\n    \n        mask = mapped == -1\n        if mask.any():\n            raise ValueError(f\"Values not found in passed level: {hlevel[mask]!s}\")\n    \n        new_codes.append(mapped.repeat(n))\n    \n    new_levels.append(new_index)\n    new_codes.append(new_index.repeat(kpieces))\n    \n    if len(new_names) < len(new_levels):\n        new_names.extend(new_index.names)\n    \n    return MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)"
        }
    ]
}