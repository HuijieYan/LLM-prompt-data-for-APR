{
    "pandas": [
        {
            "bugID": 161,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1782,
            "file_name": "core/arrays/categorical.py",
            "replace_code": "def fillna(self, value=None, method=None, limit=None):\n\n    if value is None:\n        value = np.nan\n    if limit is not None:\n        raise NotImplementedError(\"specifying a limit for fillna has not been implemented yet\")\n    \n    if method is not None:\n        raise NotImplementedError(\"Method to fill holes has not been implemented\")\n    \n    codes = self._codes\n    \n    if isinstance(value, (dict, pd.Series)):\n        if not pd.Series(value).isin(self.categories).all():\n            raise ValueError(\"fill value must be in categories\")\n    \n        values_codes = _get_codes_for_values(value, self.categories)\n        indexer = np.where(values_codes != -1)\n        codes[indexer] = values_codes[values_codes != -1]\n    elif pd.api.types.is_scalar(value):\n        if value not in self.categories:\n            raise ValueError(\"fill value must be in categories\")\n        mask = codes == -1\n        if mask.any():\n            codes[mask] = self.categories.get_loc(value)\n    else:\n        raise TypeError('\"value\" parameter must be a scalar, dict or Series')\n    \n    return self._constructor(codes, dtype=self.dtype, fastpath=True)"
        }
    ]
}