{
    "pandas": [
        {
            "bugID": 161,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1782,
            "file_name": "core/arrays/categorical.py",
            "replace_code": "def fillna(self, value=None, method=None, limit=None):\n\n    ...\n    \n    # pad / bfill\n    if method is not None:\n        ...\n    else:\n        # If value is a dict or a Series (a dict value has already\n        # been converted to a Series)\n        if isinstance(value, ABCSeries):\n            mask = self._codes == -1\n            not_na_mask = ~self.isna()\n            codes = self._codes\n            values_codes = _get_codes_for_values(value, self.categories)\n    \n            if not value[self._codes[not_na_mask]].isin(self.categories).all():\n                raise ValueError(\"fill value must be in categories\")\n    \n            # Update only NaN values\n            codes[mask] = values_codes[mask]\n    \n        # If value is not a dict or Series it should be a scalar\n        elif is_hashable(value):\n            if not isna(value) and value not in self.categories:\n                raise ValueError(\"fill value must be in categories\")\n    \n            mask = self._codes == -1\n            if mask.any():\n                codes[mask] = self.categories.get_loc(value)\n    \n        else:\n            raise TypeError(\n                '\"value\" parameter must be a scalar, dict or Series, but you passed a '\n                '\"{0}\"'.format(type(value).__name__)\n            )\n    \n    return self._constructor(codes, dtype=self.dtype, fastpath=True)"
        }
    ]
}