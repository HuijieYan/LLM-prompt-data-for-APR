{
    "pandas": [
        {
            "bugID": 161,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 1782,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def fillna(self, value=None, method=None, limit=None):\n\n    \"\"\"\n    Fill NA/NaN values using the specified method.\n    ... omitted code ...\n    \"\"\"\n    value, method = validate_fillna_kwargs(\n        value, method, validate_scalar_dict_value=False\n    )\n    \n    codes = self._codes.copy()\n    \n    if method is not None:\n        values = self.to_dense().copy()\n        values[self.isna()] = value\n        codes = _get_codes_for_values(values, self.categories)\n    else:\n        if isinstance(value, ABCSeries):\n            mask = value[~value.isin(self.categories)].isna()\n            if ~mask.all():\n                raise ValueError(\"fill value must be in categories\")\n            values_codes = _get_codes_for_values(value, self.categories)\n            indexer = np.where(values_codes != -1)\n            codes[indexer] = values_codes[values_codes != -1]\n        elif is_hashable(value):\n            mask = codes == -1\n            if mask.any():\n                if value not in self.categories:\n                    raise ValueError(\"fill value must be in categories\")\n                codes[mask] = self.categories.get_loc(value)\n        else:\n            raise TypeError(\n                '\"value\" parameter must be a scalar, dict '\n                \"or Series, but you passed a \"\n                '\"{0}\"'.format(type(value).__name__)\n            )\n    \n    return self._constructor(codes, dtype=self.dtype, fastpath=True)"
        }
    ]
}