{
    "pandas": [
        {
            "bugID": 164,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 265,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n        arg,\n        box,\n        format=None,\n        name=None,\n        tz=None,\n        unit=None,\n        errors=None,\n        infer_datetime_format=None,\n        dayfirst=None,\n        yearfirst=None,\n        exact=None,\n):\n    import numpy as np\n    from pandas import Timestamp, DatetimeIndex\n    from pandas.core.arrays import DatetimeArray\n    from pandas.core.arrays.datetimes import maybe_convert_dtype, objects_to_datetime64ns\n    from pandas._libs import tslib\n    from pandas.core.dtypes.common import is_datetime64tz_dtype, is_datetime64_ns_dtype\n    from pandas import Index\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n    \n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parsed\n    box : boolean\n        True boxes result as an Index-like, False returns an ndarray\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n    \n    Returns\n    -------\n    ndarray of parsed dates\n        Returns:\n    \n        - Index-like if box=True\n        - ndarray of Timestamps if box=False\n    \"\"\"\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n    \n    if is_datetime64tz_dtype(arg):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            return DatetimeIndex(arg, tz=tz, name=name)\n        if tz == \"utc\":\n            arg = arg.tz_convert(None).tz_localize(tz)\n        return arg\n    elif is_datetime64_ns_dtype(arg):\n        if box and not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            try:\n                return DatetimeIndex(arg, tz=tz, name=name)\n            except ValueError:\n                pass\n        return arg\n    elif unit is not None:\n        if format is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n        arg = getattr(arg, \"values\", arg)\n        result, tz_parsed = tslib.array_with_unit_to_datetime(arg, unit, errors=errors)\n        if box:\n            if errors == \"ignore\":\n                from pandas import Index\n                result = Index(result, name=name)\n            else:\n                result = DatetimeIndex(result, name=name)\n            if tz is not None:\n                result = result.tz_localize(\"UTC\").tz_convert(tz_parsed)\n        return result\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n        )\n    else:\n        orig_arg = arg\n        arg, _ = maybe_convert_dtype(arg, copy=False)\n        arg = tslib.maybe_convert_objects(arg, convert_dates=True)\n        require_iso8601 = False\n        if infer_datetime_format and format is None:\n            format = _guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n        if format is not None:\n            format_is_iso8601 = tslib.array_should_be_1d(arg)\n            if format_is_iso8601:\n                require_iso8601 = not infer_datetime_format\n                format = None\n        tz_parsed = None\n        result = None\n        if format is not None:\n            try:\n                result, tz_parsed = tslib.array_strptime(format, arg, exact=exact, errors=errors)\n            except Exception as e:\n                print(e)\n        if result is None:\n            assert format is None or infer_datetime_format\n            result, tz_parsed = objects_to_datetime64ns(\n                arg,\n                dayfirst=dayfirst,\n                yearfirst=yearfirst,\n                utc=(tz == \"utc\"),\n                errors=errors,\n                require_iso8601=require_iso8601,\n                allow_object=True\n            )\n    \n        if tz_parsed is not None:\n            if box:\n                return DatetimeIndex._simple_new(result, name=name, tz=tz_parsed)\n            else:\n                result = [\n                    Timestamp(ts, tz=tz_parsed).to_pydatetime() for ts in result\n                ]\n                return np.array(result, dtype=object)\n        if box:\n            utc = tz == \"utc\"\n            return tslib.array_with_unit_to_datetime(arg, unit, errors=errors, box=box, name=name)\n        return result"
        }
    ]
}