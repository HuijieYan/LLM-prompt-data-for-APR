{
    "pandas": [
        {
            "bugID": 164,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 265,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n    arg,\n    box,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    from pandas import DatetimeIndex\n    from pandas.core.arrays import DatetimeArray\n    from pandas import Index\n    import numpy as np\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n    \n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parced\n    box : boolean\n        True boxes result as an Index-like, False returns an ndarray\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n    \n    Returns\n    -------\n    ndarray of parsed dates\n        Returns:\n    \n        - Index-like if box=True\n        - ndarray of Timestamps if box=False\n    \"\"\"\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n    \n    # These are shortcutable\n    if isinstance(arg, DatetimeArray):\n        if box:\n            result = DatetimeIndex(arg, tz=tz, name=name)\n            if tz == \"utc\":\n                result = result.tz_convert(None).tz_localize(tz)\n            return result\n        else:\n            if unit is not None:\n                arg_values = getattr(arg, \"values\", arg)\n                result, tz_parsed = tslib.array_with_unit_to_datetime(\n                    arg_values, unit, errors=errors\n                )\n                if box:\n                    if errors == \"ignore\":\n                        result = Index(result, name=name)\n                    else:\n                        result = DatetimeIndex(result, name=name)\n                    try:\n                        result = result.tz_localize(\"UTC\").tz_convert(tz_parsed)\n                    except AttributeError:\n                        return result\n                    if tz is not None:\n                        if result.tz is None:\n                            result = result.tz_localize(tz)\n                        else:\n                            result = result.tz_convert(tz)\n                return result\n            elif getattr(arg, \"ndim\", 1) > 1:\n                raise TypeError(\n                    \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n                )\n    \n    return DatetimeIndex(arg, tz=tz, name=name)"
        }
    ]
}