{
    "pandas": [
        {
            "bugID": 164,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 265,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n    arg,\n    box,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    from pandas import DatetimeIndex\n    from pandas.core.arrays.datetimes import (\n        maybe_convert_dtype,\n        objects_to_datetime64ns,\n    )\n    from pandas.tseries.index import DatetimeIndex\n    from pandas import Index\n    from pandas._libs.tslibs import strp\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n    \n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parced\n    box : boolean\n        True boxes result as an Index-like, False returns an ndarray\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n    \n    Returns\n    -------\n    ndarray of parsed dates\n        Returns:\n    \n        - Index-like if box=True\n        - ndarray of Timestamps if box=False\n    \"\"\"\n    from pandas import DatetimeIndex\n    from pandas.core.arrays.datetimes import (\n        maybe_convert_dtype,\n        objects_to_datetime64ns,\n    )\n    \n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n    \n    # these are shortcutable\n    if is_datetime64tz_dtype(arg):\n        return arg\n    \n    elif is_datetime64_ns_dtype(arg):\n        if box and not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            try:\n                return DatetimeIndex(arg, tz=tz, name=name)\n            except ValueError:\n                pass\n    \n        return arg\n    \n    elif unit is not None:\n        if box:\n            if errors == \"ignore\":\n                from pandas import Index\n    \n                result = Index(result, name=name)\n            else:\n                result = DatetimeIndex(result, name=name)\n            if \"%.3\" in unit:\n                from pandas._libs.tslibs import strp\n    \n                # ...\n                # (existing implementation)\n                # ...\n        if tz is \"utc\":\n            from pandas.tseries.index import DatetimeIndex\n    \n            result = DatetimeIndex(result, tz=\"UTC\", name=name)\n    \n        return result\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n        )\n    \n    orig_arg = arg\n    arg, _ = maybe_convert_dtype(arg, copy=False)\n    \n    arg = ensure_object(arg)\n    \n    if infer_datetime_format and format is None:\n        format = _guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n    \n    if format is not None:\n        if format == \"%Y%m%d\":\n            try:\n                # pass orig_arg as float-dtype may have been converted to\n                # datetime64[ns]\n                orig_arg = ensure_object(orig_arg)\n                result = _attempt_YYYYMMDD(orig_arg, errors=errors)\n            except (ValueError, TypeError, tslibs.OutOfBoundsDatetime):\n                raise ValueError(\"cannot convert the input to '%Y%m%d' date format\")\n    \n        try:\n            result, timezones = array_strptime(\n                arg, format, exact=exact, errors=errors\n            )\n            if \"%Z\" in format or \"%z\" in format:\n                return _return_parsed_timezone_results(result, timezones, box, tz, name)\n        except tslibs.OutOfBoundsDatetime:\n            if errors == \"raise\":\n                raise\n            elif errors == \"coerce\":\n                result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                iresult = result.view(\"i8\")\n                iresult.fill(tslibs.iNaT)\n            else:\n                result = arg\n        except ValueError:\n            # if format was inferred, try falling back\n            # to array_to_datetime - terminate here\n            # for specified formats\n            if not infer_datetime_format:\n                if errors == \"raise\":\n                    raise\n                elif errors == \"coerce\":\n                    result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                    iresult = result.view(\"i8\")\n                    iresult.fill(tslibs.iNaT)\n                else:\n                    result = arg\n    \n        except ValueError as e:\n            # Fallback to try to convert datetime objects if timezone-aware\n            #  datetime objects are found without passing `utc=True`\n            try:\n                values, tz = conversion.datetime_to_datetime64(arg)\n                return DatetimeIndex._simple_new(values, name=name, tz=tz)\n            except (ValueError, TypeError):\n                raise e\n    \n    assert format is None or infer_datetime_format\n    utc = tz == \"utc\"\n    result, tz_parsed = objects_to_datetime64ns(\n        arg,\n        dayfirst=dayfirst,\n        yearfirst=yearfirst,\n        utc=utc,\n        errors=errors,\n    )\n    \n    if np.any(tz):\n        if box:\n            # We can take a shortcut since the datetime64 numpy array\n            # is in UTC\n            return DatetimeIndex._simple_new(result, name=name, tz=tz_parsed)\n        else:\n            # Convert the datetime64 numpy array to an numpy array\n            # of datetime objects\n            result = [ts.to_pydatetime() for ts in result]\n            return np.array(result, dtype=object)\n    \n    if box:\n        utc = tz == \"utc\"\n        return _box_as_indexlike(result, utc=utc, name=name)\n    return result"
        }
    ]
}