{
    "pandas": [
        {
            "bugID": 164,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 265,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n        arg,\n        box,\n        format,\n        name=None,\n        tz=None,\n        unit=None,\n        errors=None,\n        infer_datetime_format=None,\n        dayfirst=None,\n        yearfirst=None,\n        exact=None,\n    ):\n    import numpy as np\n    from pandas import DatetimeIndex, Timestamp, Index\n    from pandas.core.arrays import DatetimeArray\n    from pandas.core.tools.timedeltas import array_with_unit_to_datetime\n    from pandas.core.arrays.datetimes import (\n            maybe_convert_dtype,\n            objects_to_datetime64ns,\n            is_datetime64_ns_dtype,\n            is_datetime64tz_dtype,\n        )\n    from pandas._libs.tslibs import iNaT, OutOfBoundsDatetime\n    from pandas.core.tools.datetimes import _format_is_iso, array_strptime, ensure_object, errstate, tslib, conversion\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n    \n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parsed\n    box : boolean\n        True boxes result as an Index-like, False returns an ndarray\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n    \n    Returns\n    -------\n    ndarray of parsed dates\n        Returns:\n        - Index-like if box=True\n        - ndarray of Timestamps if box=False\n    \"\"\"\n    import numpy as np\n    from pandas import DatetimeIndex, Timestamp, Index\n    from pandas.core.arrays import DatetimeArray\n    from pandas.core.tools.timedeltas import array_with_unit_to_datetime\n    from pandas.core.arrays.datetimes import (\n        maybe_convert_dtype,\n        objects_to_datetime64ns,\n        is_datetime64_ns_dtype,\n        is_datetime64tz_dtype,\n    )\n    from pandas._libs.tslibs import iNaT, OutOfBoundsDatetime\n    from pandas.core.tools.datetimes import _format_is_iso, array_strptime, ensure_object, errstate, tslib, conversion\n    \n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n    \n    # these are shortcutable\n    if is_datetime64tz_dtype(arg):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            return DatetimeIndex(arg, tz=tz, name=name)\n        if tz == \"utc\":\n            arg = arg.tz_convert(None).tz_localize(tz)\n        return arg\n    \n    elif is_datetime64_ns_dtype(arg):\n        if box and not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            try:\n                return DatetimeIndex(arg, tz=tz, name=name)\n            except ValueError:\n                pass\n    \n        return arg\n    \n    elif unit is not None:\n        if format is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n        result, tz_parsed = array_with_unit_to_datetime(\n            getattr(arg, \"values\", arg), unit, errors=errors\n        )\n        if box:\n            if errors == \"ignore\":\n                result = Index(result, name=name)\n            else:\n                result = DatetimeIndex(result, name=name)\n    \n            if tz_parsed is not None:\n                return DatetimeIndex(result, tz=tz_parsed, name=name)\n            if tz is not None:\n                result = result.tz_localize(tz)\n            return result\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n        )\n    \n    # warn if passing timedelta64, raise for PeriodDtype\n    # NB: this must come after unit transformation\n    orig_arg = arg\n    arg, _ = maybe_convert_dtype(arg, copy=False)\n    \n    arg = ensure_object(arg)\n    require_iso8601 = False\n    \n    if infer_datetime_format and format is None:\n        format = _guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n    \n    if format is not None:\n        format_is_iso = _format_is_iso(format)\n        if format_is_iso:\n            require_iso8601 = not infer_datetime_format\n            format = None\n    \n    tz_parsed = None\n    result = None\n    \n    if format is not None:\n        if format == \"%Y%m%d\":\n            try:\n                result = tslib.array_strptime_vectorized(\n                    np.array([str(x) for x in arg]), format, dayfirst=dayfirst\n                )\n            except OutOfBoundsDatetime:\n                raise ValueError(\"cannot convert the input to '%Y%m%d' date format\")\n    \n        # fallback\n        if result is None:\n            try:\n                result = array_strptime(arg, format, exact=exact, errors=errors)\n                with errstate(inf=\"ignore\"):\n                    if any(\"%Z\" in fmt or \"%z\" in fmt for fmt in format.split()):\n                        return _return_parsed_timezone_results(\n                            result, arg, box, tz, name\n                        )\n            except OutOfBoundsDatetime:\n                if errors == \"coerce\":\n                    try:\n                        result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                        result[...] = iNaT\n                    except (ValueError, TypeError):\n                        return arg\n                elif errors == \"raise\":\n                    raise\n                else:\n                    return arg\n            except ValueError:\n                pass\n    \n    if result is None:\n        assert format is None or infer_datetime_format\n        utc = tz == \"utc\"\n        result, tz_parsed = objects_to_datetime64ns(\n            arg,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            utc=utc,\n            errors=errors,\n            require_iso8601=require_iso8601,\n            allow_object=True,\n        )\n    \n    if tz_parsed is not None:\n        if box:\n            return DatetimeIndex(result, tz=tz_parsed, name=name)\n        else:\n            result = [Timestamp(ts, tz=tz_parsed).to_pydatetime() for ts in result]\n            return np.array(result, dtype=object)\n    \n    if box:\n        utc = tz == \"utc\"\n        return _box_as_indexlike(result, utc=utc, name=name)\n    \n    return result"
        }
    ]
}