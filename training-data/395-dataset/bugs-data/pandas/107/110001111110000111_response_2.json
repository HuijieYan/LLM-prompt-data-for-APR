{
    "pandas": [
        {
            "bugID": 107,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 6658,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def append(self, other, ignore_index=False, verify_integrity=False, sort=False):\n    from pandas.core.reshape.concat import concat\n    \"\"\"\n    Append rows of `other` to the end of caller, returning a new object.\n    \n    Columns in `other` that are not in the caller are added as new columns.\n    \n    Parameters\n    ----------\n    other : DataFrame or Series/dict-like object, or list of these\n        The data to append.\n    ignore_index : bool, default False\n        If True, do not use the index labels.\n    verify_integrity : bool, default False\n        If True, raise ValueError on creating index with duplicates.\n    sort : bool, default False\n        Sort columns if the columns of `self` and `other` are not aligned.\n    \n        .. versionadded:: 0.23.0\n        .. versionchanged:: 1.0.0\n    \n            Changed to not sort by default.\n    \n    Returns\n    -------\n    DataFrame\n    \n    See Also\n    --------\n    concat : General function to concatenate DataFrame or Series objects.\n    \n    Notes\n    -----\n    If a list of dict/series is passed and the keys are all contained in\n    the DataFrame's index, the order of the columns in the resulting\n    DataFrame will be unchanged.\n    \n    Iteratively appending rows to a DataFrame can be more computationally\n    intensive than a single concatenate. A better solution is to append\n    those rows to a list and then concatenate the list with the original\n    DataFrame all at once.\n    \"\"\"\n    # Copy the 'other' DataFrame to preserve the timezone information\n    other_copy = other.copy()\n    if isinstance(other, (Series, dict)):\n        if isinstance(other, dict):\n            other_copy = Series(other)\n        if other_copy.name is None and not ignore_index:\n            raise TypeError(\n                \"Can only append a Series if ignore_index=True\"\n                \" or if the Series has a name\"\n            )\n    \n        if other_copy.name is None:\n            index = None\n        else:\n            # other must have the same index name as self, otherwise\n            # index name will be reset\n            index = Index([other_copy.name], name=self.index.name)\n    \n        idx_diff = other_copy.index.difference(self.columns)\n        try:\n            combined_columns = self.columns.append(idx_diff)\n        except TypeError:\n            combined_columns = self.columns.astype(object).append(idx_diff)\n        other_copy = other_copy.reindex(combined_columns, copy=False)\n        other_copy = DataFrame(\n            other_copy.values.reshape((1, len(other_copy))),\n            index=index,\n            columns=combined_columns,\n        )\n        other_copy = other_copy._convert(datetime=True, timedelta=True)\n        if not self.columns.equals(combined_columns):\n            self = self.reindex(columns=combined_columns)\n    elif isinstance(other, list):\n        if not other:\n            pass\n        elif not isinstance(other[0], DataFrame):\n            other_copy = DataFrame(other)\n            if (self.columns.get_indexer(other_copy.columns) >= 0).all():\n                other_copy = other_copy.reindex(columns=self.columns)\n    \n    from pandas.core.reshape.concat import concat\n    \n    if isinstance(other_copy, (list, tuple)):\n        to_concat = [self] + other_copy\n    else:\n        to_concat = [self, other_copy]\n    return concat(\n        to_concat,\n        ignore_index=ignore_index,\n        verify_integrity=verify_integrity,\n        sort=sort,\n    )"
        }
    ]
}