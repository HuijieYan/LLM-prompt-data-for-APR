{
    "pandas": [
        {
            "bugID": 107,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 6658,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def append(self, other, ignore_index=False, verify_integrity=False, sort=False):\n\n    \"\"\"\n    Append rows of `other` to the end of caller, returning a new object.\n    \n    Columns in `other` that are not in the caller are added as new columns.\n    \n    Parameters\n    ----------\n    other : DataFrame or Series/dict-like object, or list of these\n        The data to append.\n    ignore_index : bool, default False\n        If True, do not use the index labels.\n    verify_integrity : bool, default False\n        If True, raise ValueError on creating index with duplicates.\n    sort : bool, default False\n        Sort columns if the columns of `self` and `other` are not aligned.\n    \n        .. versionadded:: 0.23.0\n        .. versionchanged:: 1.0.0\n    \n            Changed to not sort by default.\n    \n    Returns\n    -------\n    DataFrame\n    \n    See Also\n    --------\n    concat : General function to concatenate DataFrame or Series objects.\n    \n    Notes\n    -----\n    If a list of dict/series is passed and the keys are all contained in\n    the DataFrame's index, the order of the columns in the resulting\n    DataFrame will be unchanged.\n    \n    Iteratively appending rows to a DataFrame can be more computationally\n    intensive than a single concatenate. A better solution is to append\n    those rows to a list and then concatenate the list with the original\n    DataFrame all at once.\n    \"\"\"\n    if isinstance(other, (pd.Series, dict)):\n        other = pd.DataFrame(other)\n    return pd.concat([self, other], ignore_index=ignore_index, verify_integrity=verify_integrity, sort=sort)"
        }
    ]
}