{
    "pandas:107": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/core/frame.py": {
            "buggy_functions": [
                {
                    "function_name": "append",
                    "function_code": "def append(self, other, ignore_index=False, verify_integrity=False, sort=False):\n    \"\"\"\n    Append rows of `other` to the end of caller, returning a new object.\n\n    Columns in `other` that are not in the caller are added as new columns.\n\n    Parameters\n    ----------\n    other : DataFrame or Series/dict-like object, or list of these\n        The data to append.\n    ignore_index : bool, default False\n        If True, do not use the index labels.\n    verify_integrity : bool, default False\n        If True, raise ValueError on creating index with duplicates.\n    sort : bool, default False\n        Sort columns if the columns of `self` and `other` are not aligned.\n\n        .. versionadded:: 0.23.0\n        .. versionchanged:: 1.0.0\n\n            Changed to not sort by default.\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    concat : General function to concatenate DataFrame or Series objects.\n\n    Notes\n    -----\n    If a list of dict/series is passed and the keys are all contained in\n    the DataFrame's index, the order of the columns in the resulting\n    DataFrame will be unchanged.\n\n    Iteratively appending rows to a DataFrame can be more computationally\n    intensive than a single concatenate. A better solution is to append\n    those rows to a list and then concatenate the list with the original\n    DataFrame all at once.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n    >>> df\n       A  B\n    0  1  2\n    1  3  4\n    >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n    >>> df.append(df2)\n       A  B\n    0  1  2\n    1  3  4\n    0  5  6\n    1  7  8\n\n    With `ignore_index` set to True:\n\n    >>> df.append(df2, ignore_index=True)\n       A  B\n    0  1  2\n    1  3  4\n    2  5  6\n    3  7  8\n\n    The following, while not recommended methods for generating DataFrames,\n    show two ways to generate a DataFrame from multiple data sources.\n\n    Less efficient:\n\n    >>> df = pd.DataFrame(columns=['A'])\n    >>> for i in range(5):\n    ...     df = df.append({'A': i}, ignore_index=True)\n    >>> df\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n\n    More efficient:\n\n    >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n    ...           ignore_index=True)\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n    \"\"\"\n    if isinstance(other, (Series, dict)):\n        if isinstance(other, dict):\n            other = Series(other)\n        if other.name is None and not ignore_index:\n            raise TypeError(\n                \"Can only append a Series if ignore_index=True\"\n                \" or if the Series has a name\"\n            )\n\n        if other.name is None:\n            index = None\n        else:\n            # other must have the same index name as self, otherwise\n            # index name will be reset\n            index = Index([other.name], name=self.index.name)\n\n        idx_diff = other.index.difference(self.columns)\n        try:\n            combined_columns = self.columns.append(idx_diff)\n        except TypeError:\n            combined_columns = self.columns.astype(object).append(idx_diff)\n        other = other.reindex(combined_columns, copy=False)\n        other = DataFrame(\n            other.values.reshape((1, len(other))),\n            index=index,\n            columns=combined_columns,\n        )\n        other = other._convert(datetime=True, timedelta=True)\n        if not self.columns.equals(combined_columns):\n            self = self.reindex(columns=combined_columns)\n    elif isinstance(other, list):\n        if not other:\n            pass\n        elif not isinstance(other[0], DataFrame):\n            other = DataFrame(other)\n            if (self.columns.get_indexer(other.columns) >= 0).all():\n                other = other.reindex(columns=self.columns)\n\n    from pandas.core.reshape.concat import concat\n\n    if isinstance(other, (list, tuple)):\n        to_concat = [self] + other\n    else:\n        to_concat = [self, other]\n    return concat(\n        to_concat,\n        ignore_index=ignore_index,\n        verify_integrity=verify_integrity,\n        sort=sort,\n    )\n",
                    "decorators": [],
                    "docstring": "Append rows of `other` to the end of caller, returning a new object.\n\nColumns in `other` that are not in the caller are added as new columns.\n\nParameters\n----------\nother : DataFrame or Series/dict-like object, or list of these\n    The data to append.\nignore_index : bool, default False\n    If True, do not use the index labels.\nverify_integrity : bool, default False\n    If True, raise ValueError on creating index with duplicates.\nsort : bool, default False\n    Sort columns if the columns of `self` and `other` are not aligned.\n\n    .. versionadded:: 0.23.0\n    .. versionchanged:: 1.0.0\n\n        Changed to not sort by default.\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nconcat : General function to concatenate DataFrame or Series objects.\n\nNotes\n-----\nIf a list of dict/series is passed and the keys are all contained in\nthe DataFrame's index, the order of the columns in the resulting\nDataFrame will be unchanged.\n\nIteratively appending rows to a DataFrame can be more computationally\nintensive than a single concatenate. A better solution is to append\nthose rows to a list and then concatenate the list with the original\nDataFrame all at once.\n\nExamples\n--------\n\n>>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n>>> df\n   A  B\n0  1  2\n1  3  4\n>>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n>>> df.append(df2)\n   A  B\n0  1  2\n1  3  4\n0  5  6\n1  7  8\n\nWith `ignore_index` set to True:\n\n>>> df.append(df2, ignore_index=True)\n   A  B\n0  1  2\n1  3  4\n2  5  6\n3  7  8\n\nThe following, while not recommended methods for generating DataFrames,\nshow two ways to generate a DataFrame from multiple data sources.\n\nLess efficient:\n\n>>> df = pd.DataFrame(columns=['A'])\n>>> for i in range(5):\n...     df = df.append({'A': i}, ignore_index=True)\n>>> df\n   A\n0  0\n1  1\n2  2\n3  3\n4  4\n\nMore efficient:\n\n>>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n...           ignore_index=True)\n   A\n0  0\n1  1\n2  2\n3  3\n4  4",
                    "start_line": 6658,
                    "end_line": 6800,
                    "variables": {
                        "isinstance": [
                            6752,
                            6784,
                            6791,
                            6781,
                            6751
                        ],
                        "other": [
                            6784,
                            6785,
                            6786,
                            6787,
                            6791,
                            6792,
                            6794,
                            6751,
                            6752,
                            6753,
                            6754,
                            6760,
                            6765,
                            6767,
                            6772,
                            6773,
                            6774,
                            6778,
                            6781,
                            6782
                        ],
                        "Series": [
                            6753,
                            6751
                        ],
                        "dict": [
                            6752,
                            6751
                        ],
                        "other.name": [
                            6760,
                            6754,
                            6765
                        ],
                        "ignore_index": [
                            6754,
                            6797
                        ],
                        "TypeError": [
                            6770,
                            6755
                        ],
                        "index": [
                            6761,
                            6765,
                            6775
                        ],
                        "Index": [
                            6765
                        ],
                        "self.index.name": [
                            6765
                        ],
                        "self.index": [
                            6765
                        ],
                        "self": [
                            6786,
                            6787,
                            6792,
                            6794,
                            6765,
                            6767,
                            6769,
                            6771,
                            6779,
                            6780
                        ],
                        "idx_diff": [
                            6769,
                            6771,
                            6767
                        ],
                        "other.index.difference": [
                            6767
                        ],
                        "other.index": [
                            6767
                        ],
                        "self.columns": [
                            6786,
                            6787,
                            6767,
                            6769,
                            6771,
                            6779
                        ],
                        "combined_columns": [
                            6769,
                            6771,
                            6772,
                            6776,
                            6779,
                            6780
                        ],
                        "self.columns.append": [
                            6769
                        ],
                        "append": [
                            6771
                        ],
                        "self.columns.astype": [
                            6771
                        ],
                        "object": [
                            6771
                        ],
                        "other.reindex": [
                            6787,
                            6772
                        ],
                        "DataFrame": [
                            6784,
                            6785,
                            6773
                        ],
                        "other.values.reshape": [
                            6774
                        ],
                        "other.values": [
                            6774
                        ],
                        "len": [
                            6774
                        ],
                        "other._convert": [
                            6778
                        ],
                        "self.columns.equals": [
                            6779
                        ],
                        "self.reindex": [
                            6780
                        ],
                        "list": [
                            6781,
                            6791
                        ],
                        "all": [
                            6786
                        ],
                        "self.columns.get_indexer": [
                            6786
                        ],
                        "other.columns": [
                            6786
                        ],
                        "tuple": [
                            6791
                        ],
                        "to_concat": [
                            6792,
                            6794,
                            6796
                        ],
                        "concat": [
                            6795
                        ],
                        "verify_integrity": [
                            6798
                        ],
                        "sort": [
                            6799
                        ]
                    },
                    "filtered_variables": {
                        "other": [
                            6784,
                            6785,
                            6786,
                            6787,
                            6791,
                            6792,
                            6794,
                            6751,
                            6752,
                            6753,
                            6754,
                            6760,
                            6765,
                            6767,
                            6772,
                            6773,
                            6774,
                            6778,
                            6781,
                            6782
                        ],
                        "Series": [
                            6753,
                            6751
                        ],
                        "other.name": [
                            6760,
                            6754,
                            6765
                        ],
                        "ignore_index": [
                            6754,
                            6797
                        ],
                        "index": [
                            6761,
                            6765,
                            6775
                        ],
                        "Index": [
                            6765
                        ],
                        "self.index.name": [
                            6765
                        ],
                        "self.index": [
                            6765
                        ],
                        "self": [
                            6786,
                            6787,
                            6792,
                            6794,
                            6765,
                            6767,
                            6769,
                            6771,
                            6779,
                            6780
                        ],
                        "idx_diff": [
                            6769,
                            6771,
                            6767
                        ],
                        "other.index.difference": [
                            6767
                        ],
                        "other.index": [
                            6767
                        ],
                        "self.columns": [
                            6786,
                            6787,
                            6767,
                            6769,
                            6771,
                            6779
                        ],
                        "combined_columns": [
                            6769,
                            6771,
                            6772,
                            6776,
                            6779,
                            6780
                        ],
                        "self.columns.append": [
                            6769
                        ],
                        "append": [
                            6771
                        ],
                        "self.columns.astype": [
                            6771
                        ],
                        "other.reindex": [
                            6787,
                            6772
                        ],
                        "DataFrame": [
                            6784,
                            6785,
                            6773
                        ],
                        "other.values.reshape": [
                            6774
                        ],
                        "other.values": [
                            6774
                        ],
                        "other._convert": [
                            6778
                        ],
                        "self.columns.equals": [
                            6779
                        ],
                        "self.reindex": [
                            6780
                        ],
                        "self.columns.get_indexer": [
                            6786
                        ],
                        "other.columns": [
                            6786
                        ],
                        "to_concat": [
                            6792,
                            6794,
                            6796
                        ],
                        "concat": [
                            6795
                        ],
                        "verify_integrity": [
                            6798
                        ],
                        "sort": [
                            6799
                        ]
                    },
                    "diff_line_number": 6760,
                    "class_data": {
                        "signature": "class DataFrame(NDFrame)",
                        "docstring": "Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n\nData structure also contains labeled axes (rows and columns).\nArithmetic operations align on both row and column labels. Can be\nthought of as a dict-like container for Series objects. The primary\npandas data structure.\n\nParameters\n----------\ndata : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n    Dict can contain Series, arrays, constants, or list-like objects.\n\n    .. versionchanged:: 0.23.0\n       If data is a dict, column order follows insertion-order for\n       Python 3.6 and later.\n\n    .. versionchanged:: 0.25.0\n       If data is a list of dicts, column order follows insertion-order\n       for Python 3.6 and later.\n\nindex : Index or array-like\n    Index to use for resulting frame. Will default to RangeIndex if\n    no indexing information part of input data and no index provided.\ncolumns : Index or array-like\n    Column labels to use for resulting frame. Will default to\n    RangeIndex (0, 1, 2, ..., n) if no column labels are provided.\ndtype : dtype, default None\n    Data type to force. Only a single dtype is allowed. If None, infer.\ncopy : bool, default False\n    Copy data from inputs. Only affects DataFrame / 2d ndarray input.\n\nSee Also\n--------\nDataFrame.from_records : Constructor from tuples, also record arrays.\nDataFrame.from_dict : From dicts of Series, arrays, or dicts.\nread_csv\nread_table\nread_clipboard\n\nExamples\n--------\nConstructing DataFrame from a dictionary.\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n\nNotice that the inferred dtype is int64.\n\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nTo enforce a single dtype:\n\n>>> df = pd.DataFrame(data=d, dtype=np.int8)\n>>> df.dtypes\ncol1    int8\ncol2    int8\ndtype: object\n\nConstructing DataFrame from numpy ndarray:\n\n>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n...                    columns=['a', 'b', 'c'])\n>>> df2\n   a  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9",
                        "constructor_docstring": null,
                        "functions": [
                            "@property\ndef _constructor(self) -> Type['DataFrame']:\n    return DataFrame",
                            "@property\ndef _constructor_expanddim(self):\n    raise NotImplementedError('Not supported for DataFrames!')",
                            "def __init__(self, data=None, index: Optional[Axes]=None, columns: Optional[Axes]=None, dtype: Optional[Dtype]=None, copy: bool=False):\n    if data is None:\n        data = {}\n    if dtype is not None:\n        dtype = self._validate_dtype(dtype)\n    if isinstance(data, DataFrame):\n        data = data._data\n    if isinstance(data, BlockManager):\n        mgr = self._init_mgr(data, axes=dict(index=index, columns=columns), dtype=dtype, copy=copy)\n    elif isinstance(data, dict):\n        mgr = init_dict(data, index, columns, dtype=dtype)\n    elif isinstance(data, ma.MaskedArray):\n        import numpy.ma.mrecords as mrecords\n        if isinstance(data, mrecords.MaskedRecords):\n            mgr = masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n        else:\n            mask = ma.getmaskarray(data)\n            if mask.any():\n                data, fill_value = maybe_upcast(data, copy=True)\n                data.soften_mask()\n                data[mask] = fill_value\n            else:\n                data = data.copy()\n            mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n    elif isinstance(data, (np.ndarray, Series, Index)):\n        if data.dtype.names:\n            data_columns = list(data.dtype.names)\n            data = {k: data[k] for k in data_columns}\n            if columns is None:\n                columns = data_columns\n            mgr = init_dict(data, index, columns, dtype=dtype)\n        elif getattr(data, 'name', None) is not None:\n            mgr = init_dict({data.name: data}, index, columns, dtype=dtype)\n        else:\n            mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n    elif isinstance(data, abc.Iterable) and (not isinstance(data, (str, bytes))):\n        if not isinstance(data, (abc.Sequence, ExtensionArray)):\n            data = list(data)\n        if len(data) > 0:\n            if is_list_like(data[0]) and getattr(data[0], 'ndim', 1) == 1:\n                if is_named_tuple(data[0]) and columns is None:\n                    columns = data[0]._fields\n                arrays, columns = to_arrays(data, columns, dtype=dtype)\n                columns = ensure_index(columns)\n                if index is None:\n                    if isinstance(data[0], Series):\n                        index = get_names_from_index(data)\n                    elif isinstance(data[0], Categorical):\n                        index = ibase.default_index(len(data[0]))\n                    else:\n                        index = ibase.default_index(len(data))\n                mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n            else:\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n        else:\n            mgr = init_dict({}, index, columns, dtype=dtype)\n    else:\n        try:\n            arr = np.array(data, dtype=dtype, copy=copy)\n        except (ValueError, TypeError) as e:\n            exc = TypeError(f'DataFrame constructor called with incompatible data and dtype: {e}')\n            raise exc from e\n        if arr.ndim == 0 and index is not None and (columns is not None):\n            values = cast_scalar_to_array((len(index), len(columns)), data, dtype=dtype)\n            mgr = init_ndarray(values, index, columns, dtype=values.dtype, copy=False)\n        else:\n            raise ValueError('DataFrame constructor not properly called!')\n    NDFrame.__init__(self, mgr, fastpath=True)",
                            "@property\ndef axes(self) -> List[Index]:\n    \"\"\"\n    Return a list representing the axes of the DataFrame.\n\n    It has the row axis labels and column axis labels as the only members.\n    They are returned in that order.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.axes\n    [RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],\n    dtype='object')]\n    \"\"\"\n    return [self.index, self.columns]",
                            "@property\ndef shape(self) -> Tuple[int, int]:\n    \"\"\"\n    Return a tuple representing the dimensionality of the DataFrame.\n\n    See Also\n    --------\n    ndarray.shape\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.shape\n    (2, 2)\n\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n    ...                    'col3': [5, 6]})\n    >>> df.shape\n    (2, 3)\n    \"\"\"\n    return (len(self.index), len(self.columns))",
                            "@property\ndef _is_homogeneous_type(self) -> bool:\n    \"\"\"\n    Whether all the columns in a DataFrame have the same type.\n\n    Returns\n    -------\n    bool\n\n    See Also\n    --------\n    Index._is_homogeneous_type : Whether the object has a single\n        dtype.\n    MultiIndex._is_homogeneous_type : Whether all the levels of a\n        MultiIndex have the same dtype.\n\n    Examples\n    --------\n    >>> DataFrame({\"A\": [1, 2], \"B\": [3, 4]})._is_homogeneous_type\n    True\n    >>> DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.0]})._is_homogeneous_type\n    False\n\n    Items with the same type but different sizes are considered\n    different types.\n\n    >>> DataFrame({\n    ...    \"A\": np.array([1, 2], dtype=np.int32),\n    ...    \"B\": np.array([1, 2], dtype=np.int64)})._is_homogeneous_type\n    False\n    \"\"\"\n    if self._data.any_extension_types:\n        return len({block.dtype for block in self._data.blocks}) == 1\n    else:\n        return not self._data.is_mixed_type",
                            "def _repr_fits_vertical_(self) -> bool:\n    \"\"\"\n    Check length against max_rows.\n    \"\"\"\n    max_rows = get_option('display.max_rows')\n    return len(self) <= max_rows",
                            "def _repr_fits_horizontal_(self, ignore_width: bool=False) -> bool:\n    \"\"\"\n    Check if full repr fits in horizontal boundaries imposed by the display\n    options width and max_columns.\n\n    In case off non-interactive session, no boundaries apply.\n\n    `ignore_width` is here so ipnb+HTML output can behave the way\n    users expect. display.max_columns remains in effect.\n    GH3541, GH3573\n    \"\"\"\n    width, height = console.get_console_size()\n    max_columns = get_option('display.max_columns')\n    nb_columns = len(self.columns)\n    if max_columns and nb_columns > max_columns or (not ignore_width and width and (nb_columns > width // 2)):\n        return False\n    if ignore_width or not console.in_interactive_session():\n        return True\n    if get_option('display.width') is not None or console.in_ipython_frontend():\n        max_rows = 1\n    else:\n        max_rows = get_option('display.max_rows')\n    buf = StringIO()\n    d = self\n    if not max_rows is None:\n        d = d.iloc[:min(max_rows, len(d))]\n    else:\n        return True\n    d.to_string(buf=buf)\n    value = buf.getvalue()\n    repr_width = max((len(l) for l in value.split('\\n')))\n    return repr_width < width",
                            "def _info_repr(self) -> bool:\n    \"\"\"\n    True if the repr should show the info view.\n    \"\"\"\n    info_repr_option = get_option('display.large_repr') == 'info'\n    return info_repr_option and (not (self._repr_fits_horizontal_() and self._repr_fits_vertical_()))",
                            "def __repr__(self) -> str:\n    \"\"\"\n    Return a string representation for a particular DataFrame.\n    \"\"\"\n    buf = StringIO('')\n    if self._info_repr():\n        self.info(buf=buf)\n        return buf.getvalue()\n    max_rows = get_option('display.max_rows')\n    min_rows = get_option('display.min_rows')\n    max_cols = get_option('display.max_columns')\n    max_colwidth = get_option('display.max_colwidth')\n    show_dimensions = get_option('display.show_dimensions')\n    if get_option('display.expand_frame_repr'):\n        width, _ = console.get_console_size()\n    else:\n        width = None\n    self.to_string(buf=buf, max_rows=max_rows, min_rows=min_rows, max_cols=max_cols, line_width=width, max_colwidth=max_colwidth, show_dimensions=show_dimensions)\n    return buf.getvalue()",
                            "def _repr_html_(self) -> Optional[str]:\n    \"\"\"\n    Return a html representation for a particular DataFrame.\n\n    Mainly for IPython notebook.\n    \"\"\"\n    if self._info_repr():\n        buf = StringIO('')\n        self.info(buf=buf)\n        val = buf.getvalue().replace('<', '&lt;', 1)\n        val = val.replace('>', '&gt;', 1)\n        return '<pre>' + val + '</pre>'\n    if get_option('display.notebook_repr_html'):\n        max_rows = get_option('display.max_rows')\n        min_rows = get_option('display.min_rows')\n        max_cols = get_option('display.max_columns')\n        show_dimensions = get_option('display.show_dimensions')\n        formatter = fmt.DataFrameFormatter(self, columns=None, col_space=None, na_rep='NaN', formatters=None, float_format=None, sparsify=None, justify=None, index_names=True, header=True, index=True, bold_rows=True, escape=True, max_rows=max_rows, min_rows=min_rows, max_cols=max_cols, show_dimensions=show_dimensions, decimal='.', table_id=None, render_links=False)\n        return formatter.to_html(notebook=True)\n    else:\n        return None",
                            "@Substitution(header_type='bool or sequence', header='Write out the column names. If a list of strings is given, it is assumed to be aliases for the column names', col_space_type='int', col_space='The minimum width of each column')\n@Substitution(shared_params=fmt.common_docstring, returns=fmt.return_docstring)\ndef to_string(self, buf: Optional[FilePathOrBuffer[str]]=None, columns: Optional[Sequence[str]]=None, col_space: Optional[int]=None, header: Union[bool, Sequence[str]]=True, index: bool=True, na_rep: str='NaN', formatters: Optional[fmt.formatters_type]=None, float_format: Optional[fmt.float_format_type]=None, sparsify: Optional[bool]=None, index_names: bool=True, justify: Optional[str]=None, max_rows: Optional[int]=None, min_rows: Optional[int]=None, max_cols: Optional[int]=None, show_dimensions: bool=False, decimal: str='.', line_width: Optional[int]=None, max_colwidth: Optional[int]=None, encoding: Optional[str]=None) -> Optional[str]:\n    \"\"\"\n    Render a DataFrame to a console-friendly tabular output.\n    %(shared_params)s\n    line_width : int, optional\n        Width to wrap a line in characters.\n    max_colwidth : int, optional\n        Max width to truncate each column in characters. By default, no limit.\n\n        .. versionadded:: 1.0.0\n    encoding : str, default \"utf-8\"\n        Set character encoding.\n\n        .. versionadded:: 1.0\n    %(returns)s\n    See Also\n    --------\n    to_html : Convert DataFrame to HTML.\n\n    Examples\n    --------\n    >>> d = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}\n    >>> df = pd.DataFrame(d)\n    >>> print(df.to_string())\n       col1  col2\n    0     1     4\n    1     2     5\n    2     3     6\n    \"\"\"\n    from pandas import option_context\n    with option_context('display.max_colwidth', max_colwidth):\n        formatter = fmt.DataFrameFormatter(self, columns=columns, col_space=col_space, na_rep=na_rep, formatters=formatters, float_format=float_format, sparsify=sparsify, justify=justify, index_names=index_names, header=header, index=index, min_rows=min_rows, max_rows=max_rows, max_cols=max_cols, show_dimensions=show_dimensions, decimal=decimal, line_width=line_width)\n        return formatter.to_string(buf=buf, encoding=encoding)",
                            "@property\ndef style(self):\n    \"\"\"\n    Returns a Styler object.\n\n    Contains methods for building a styled HTML representation of the DataFrame.\n    a styled HTML representation fo the DataFrame.\n\n    See Also\n    --------\n    io.formats.style.Styler\n    \"\"\"\n    from pandas.io.formats.style import Styler\n    return Styler(self)",
                            "@Appender(_shared_docs['items'])\ndef items(self) -> Iterable[Tuple[Optional[Hashable], Series]]:\n    if self.columns.is_unique and hasattr(self, '_item_cache'):\n        for k in self.columns:\n            yield (k, self._get_item_cache(k))\n    else:\n        for i, k in enumerate(self.columns):\n            yield (k, self._ixs(i, axis=1))",
                            "@Appender(_shared_docs['items'])\ndef iteritems(self):\n    yield from self.items()",
                            "def iterrows(self):\n    \"\"\"\n    Iterate over DataFrame rows as (index, Series) pairs.\n\n    Yields\n    ------\n    index : label or tuple of label\n        The index of the row. A tuple for a `MultiIndex`.\n    data : Series\n        The data of the row as a Series.\n\n    it : generator\n        A generator that iterates over the rows of the frame.\n\n    See Also\n    --------\n    DataFrame.itertuples : Iterate over DataFrame rows as namedtuples of the values.\n    DataFrame.items : Iterate over (column name, Series) pairs.\n\n    Notes\n    -----\n\n    1. Because ``iterrows`` returns a Series for each row,\n       it does **not** preserve dtypes across the rows (dtypes are\n       preserved across columns for DataFrames). For example,\n\n       >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n       >>> row = next(df.iterrows())[1]\n       >>> row\n       int      1.0\n       float    1.5\n       Name: 0, dtype: float64\n       >>> print(row['int'].dtype)\n       float64\n       >>> print(df['int'].dtype)\n       int64\n\n       To preserve dtypes while iterating over the rows, it is better\n       to use :meth:`itertuples` which returns namedtuples of the values\n       and which is generally faster than ``iterrows``.\n\n    2. You should **never modify** something you are iterating over.\n       This is not guaranteed to work in all cases. Depending on the\n       data types, the iterator returns a copy and not a view, and writing\n       to it will have no effect.\n    \"\"\"\n    columns = self.columns\n    klass = self._constructor_sliced\n    for k, v in zip(self.index, self.values):\n        s = klass(v, index=columns, name=k)\n        yield (k, s)",
                            "def itertuples(self, index=True, name='Pandas'):\n    \"\"\"\n    Iterate over DataFrame rows as namedtuples.\n\n    Parameters\n    ----------\n    index : bool, default True\n        If True, return the index as the first element of the tuple.\n    name : str or None, default \"Pandas\"\n        The name of the returned namedtuples or None to return regular\n        tuples.\n\n    Returns\n    -------\n    iterator\n        An object to iterate over namedtuples for each row in the\n        DataFrame with the first field possibly being the index and\n        following fields being the column values.\n\n    See Also\n    --------\n    DataFrame.iterrows : Iterate over DataFrame rows as (index, Series)\n        pairs.\n    DataFrame.items : Iterate over (column name, Series) pairs.\n\n    Notes\n    -----\n    The column names will be renamed to positional names if they are\n    invalid Python identifiers, repeated, or start with an underscore.\n    With a large number of columns (>255), regular tuples are returned.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'num_legs': [4, 2], 'num_wings': [0, 2]},\n    ...                   index=['dog', 'hawk'])\n    >>> df\n          num_legs  num_wings\n    dog          4          0\n    hawk         2          2\n    >>> for row in df.itertuples():\n    ...     print(row)\n    ...\n    Pandas(Index='dog', num_legs=4, num_wings=0)\n    Pandas(Index='hawk', num_legs=2, num_wings=2)\n\n    By setting the `index` parameter to False we can remove the index\n    as the first element of the tuple:\n\n    >>> for row in df.itertuples(index=False):\n    ...     print(row)\n    ...\n    Pandas(num_legs=4, num_wings=0)\n    Pandas(num_legs=2, num_wings=2)\n\n    With the `name` parameter set we set a custom name for the yielded\n    namedtuples:\n\n    >>> for row in df.itertuples(name='Animal'):\n    ...     print(row)\n    ...\n    Animal(Index='dog', num_legs=4, num_wings=0)\n    Animal(Index='hawk', num_legs=2, num_wings=2)\n    \"\"\"\n    arrays = []\n    fields = list(self.columns)\n    if index:\n        arrays.append(self.index)\n        fields.insert(0, 'Index')\n    arrays.extend((self.iloc[:, k] for k in range(len(self.columns))))\n    if name is not None and len(self.columns) + index < 256:\n        itertuple = collections.namedtuple(name, fields, rename=True)\n        return map(itertuple._make, zip(*arrays))\n    return zip(*arrays)",
                            "def __len__(self) -> int:\n    \"\"\"\n    Returns length of info axis, but here we use the index.\n    \"\"\"\n    return len(self.index)",
                            "def dot(self, other):\n    \"\"\"\n    Compute the matrix multiplication between the DataFrame and other.\n\n    This method computes the matrix product between the DataFrame and the\n    values of an other Series, DataFrame or a numpy array.\n\n    It can also be called using ``self @ other`` in Python >= 3.5.\n\n    Parameters\n    ----------\n    other : Series, DataFrame or array-like\n        The other object to compute the matrix product with.\n\n    Returns\n    -------\n    Series or DataFrame\n        If other is a Series, return the matrix product between self and\n        other as a Serie. If other is a DataFrame or a numpy.array, return\n        the matrix product of self and other in a DataFrame of a np.array.\n\n    See Also\n    --------\n    Series.dot: Similar method for Series.\n\n    Notes\n    -----\n    The dimensions of DataFrame and other must be compatible in order to\n    compute the matrix multiplication. In addition, the column names of\n    DataFrame and the index of other must contain the same values, as they\n    will be aligned prior to the multiplication.\n\n    The dot method for Series computes the inner product, instead of the\n    matrix product here.\n\n    Examples\n    --------\n    Here we multiply a DataFrame with a Series.\n\n    >>> df = pd.DataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])\n    >>> s = pd.Series([1, 1, 2, 1])\n    >>> df.dot(s)\n    0    -4\n    1     5\n    dtype: int64\n\n    Here we multiply a DataFrame with another DataFrame.\n\n    >>> other = pd.DataFrame([[0, 1], [1, 2], [-1, -1], [2, 0]])\n    >>> df.dot(other)\n        0   1\n    0   1   4\n    1   2   2\n\n    Note that the dot method give the same result as @\n\n    >>> df @ other\n        0   1\n    0   1   4\n    1   2   2\n\n    The dot method works also if other is an np.array.\n\n    >>> arr = np.array([[0, 1], [1, 2], [-1, -1], [2, 0]])\n    >>> df.dot(arr)\n        0   1\n    0   1   4\n    1   2   2\n\n    Note how shuffling of the objects does not change the result.\n\n    >>> s2 = s.reindex([1, 0, 2, 3])\n    >>> df.dot(s2)\n    0    -4\n    1     5\n    dtype: int64\n    \"\"\"\n    if isinstance(other, (Series, DataFrame)):\n        common = self.columns.union(other.index)\n        if len(common) > len(self.columns) or len(common) > len(other.index):\n            raise ValueError('matrices are not aligned')\n        left = self.reindex(columns=common, copy=False)\n        right = other.reindex(index=common, copy=False)\n        lvals = left.values\n        rvals = right.values\n    else:\n        left = self\n        lvals = self.values\n        rvals = np.asarray(other)\n        if lvals.shape[1] != rvals.shape[0]:\n            raise ValueError(f'Dot product shape mismatch, {lvals.shape} vs {rvals.shape}')\n    if isinstance(other, DataFrame):\n        return self._constructor(np.dot(lvals, rvals), index=left.index, columns=other.columns)\n    elif isinstance(other, Series):\n        return Series(np.dot(lvals, rvals), index=left.index)\n    elif isinstance(rvals, (np.ndarray, Index)):\n        result = np.dot(lvals, rvals)\n        if result.ndim == 2:\n            return self._constructor(result, index=left.index)\n        else:\n            return Series(result, index=left.index)\n    else:\n        raise TypeError(f'unsupported type: {type(other)}')",
                            "def __matmul__(self, other):\n    \"\"\"\n    Matrix multiplication using binary `@` operator in Python>=3.5.\n    \"\"\"\n    return self.dot(other)",
                            "def __rmatmul__(self, other):\n    \"\"\"\n    Matrix multiplication using binary `@` operator in Python>=3.5.\n    \"\"\"\n    return self.T.dot(np.transpose(other)).T",
                            "@classmethod\ndef from_dict(cls, data, orient='columns', dtype=None, columns=None):\n    \"\"\"\n    Construct DataFrame from dict of array-like or dicts.\n\n    Creates DataFrame object from dictionary by columns or by index\n    allowing dtype specification.\n\n    Parameters\n    ----------\n    data : dict\n        Of the form {field : array-like} or {field : dict}.\n    orient : {'columns', 'index'}, default 'columns'\n        The \"orientation\" of the data. If the keys of the passed dict\n        should be the columns of the resulting DataFrame, pass 'columns'\n        (default). Otherwise if the keys should be rows, pass 'index'.\n    dtype : dtype, default None\n        Data type to force, otherwise infer.\n    columns : list, default None\n        Column labels to use when ``orient='index'``. Raises a ValueError\n        if used with ``orient='columns'``.\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.from_records : DataFrame from ndarray (structured\n        dtype), list of tuples, dict, or DataFrame.\n    DataFrame : DataFrame object creation using constructor.\n\n    Examples\n    --------\n    By default the keys of the dict become the DataFrame columns:\n\n    >>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n    >>> pd.DataFrame.from_dict(data)\n       col_1 col_2\n    0      3     a\n    1      2     b\n    2      1     c\n    3      0     d\n\n    Specify ``orient='index'`` to create the DataFrame using dictionary\n    keys as rows:\n\n    >>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n    >>> pd.DataFrame.from_dict(data, orient='index')\n           0  1  2  3\n    row_1  3  2  1  0\n    row_2  a  b  c  d\n\n    When using the 'index' orientation, the column names can be\n    specified manually:\n\n    >>> pd.DataFrame.from_dict(data, orient='index',\n    ...                        columns=['A', 'B', 'C', 'D'])\n           A  B  C  D\n    row_1  3  2  1  0\n    row_2  a  b  c  d\n    \"\"\"\n    index = None\n    orient = orient.lower()\n    if orient == 'index':\n        if len(data) > 0:\n            if isinstance(list(data.values())[0], (Series, dict)):\n                data = _from_nested_dict(data)\n            else:\n                data, index = (list(data.values()), list(data.keys()))\n    elif orient == 'columns':\n        if columns is not None:\n            raise ValueError(\"cannot use columns parameter with orient='columns'\")\n    else:\n        raise ValueError('only recognize index or columns for orient')\n    return cls(data, index=index, columns=columns, dtype=dtype)",
                            "def to_numpy(self, dtype=None, copy=False):\n    \"\"\"\n    Convert the DataFrame to a NumPy array.\n\n    .. versionadded:: 0.24.0\n\n    By default, the dtype of the returned array will be the common NumPy\n    dtype of all types in the DataFrame. For example, if the dtypes are\n    ``float16`` and ``float32``, the results dtype will be ``float32``.\n    This may require copying data and coercing values, which may be\n    expensive.\n\n    Parameters\n    ----------\n    dtype : str or numpy.dtype, optional\n        The dtype to pass to :meth:`numpy.asarray`.\n    copy : bool, default False\n        Whether to ensure that the returned value is a not a view on\n        another array. Note that ``copy=False`` does not *ensure* that\n        ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n        a copy is made, even if not strictly necessary.\n\n    Returns\n    -------\n    numpy.ndarray\n\n    See Also\n    --------\n    Series.to_numpy : Similar method for Series.\n\n    Examples\n    --------\n    >>> pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]}).to_numpy()\n    array([[1, 3],\n           [2, 4]])\n\n    With heterogeneous data, the lowest common type will have to\n    be used.\n\n    >>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.5]})\n    >>> df.to_numpy()\n    array([[1. , 3. ],\n           [2. , 4.5]])\n\n    For a mix of numeric and non-numeric types, the output array will\n    have object dtype.\n\n    >>> df['C'] = pd.date_range('2000', periods=2)\n    >>> df.to_numpy()\n    array([[1, 3.0, Timestamp('2000-01-01 00:00:00')],\n           [2, 4.5, Timestamp('2000-01-02 00:00:00')]], dtype=object)\n    \"\"\"\n    result = np.array(self.values, dtype=dtype, copy=copy)\n    return result",
                            "def to_dict(self, orient='dict', into=dict):\n    \"\"\"\n    Convert the DataFrame to a dictionary.\n\n    The type of the key-value pairs can be customized with the parameters\n    (see below).\n\n    Parameters\n    ----------\n    orient : str {'dict', 'list', 'series', 'split', 'records', 'index'}\n        Determines the type of the values of the dictionary.\n\n        - 'dict' (default) : dict like {column -> {index -> value}}\n        - 'list' : dict like {column -> [values]}\n        - 'series' : dict like {column -> Series(values)}\n        - 'split' : dict like\n          {'index' -> [index], 'columns' -> [columns], 'data' -> [values]}\n        - 'records' : list like\n          [{column -> value}, ... , {column -> value}]\n        - 'index' : dict like {index -> {column -> value}}\n\n        Abbreviations are allowed. `s` indicates `series` and `sp`\n        indicates `split`.\n\n    into : class, default dict\n        The collections.abc.Mapping subclass used for all Mappings\n        in the return value.  Can be the actual class or an empty\n        instance of the mapping type you want.  If you want a\n        collections.defaultdict, you must pass it initialized.\n\n        .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    dict, list or collections.abc.Mapping\n        Return a collections.abc.Mapping object representing the DataFrame.\n        The resulting transformation depends on the `orient` parameter.\n\n    See Also\n    --------\n    DataFrame.from_dict: Create a DataFrame from a dictionary.\n    DataFrame.to_json: Convert a DataFrame to JSON format.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2],\n    ...                    'col2': [0.5, 0.75]},\n    ...                   index=['row1', 'row2'])\n    >>> df\n          col1  col2\n    row1     1  0.50\n    row2     2  0.75\n    >>> df.to_dict()\n    {'col1': {'row1': 1, 'row2': 2}, 'col2': {'row1': 0.5, 'row2': 0.75}}\n\n    You can specify the return orientation.\n\n    >>> df.to_dict('series')\n    {'col1': row1    1\n             row2    2\n    Name: col1, dtype: int64,\n    'col2': row1    0.50\n            row2    0.75\n    Name: col2, dtype: float64}\n\n    >>> df.to_dict('split')\n    {'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],\n     'data': [[1, 0.5], [2, 0.75]]}\n\n    >>> df.to_dict('records')\n    [{'col1': 1, 'col2': 0.5}, {'col1': 2, 'col2': 0.75}]\n\n    >>> df.to_dict('index')\n    {'row1': {'col1': 1, 'col2': 0.5}, 'row2': {'col1': 2, 'col2': 0.75}}\n\n    You can also specify the mapping type.\n\n    >>> from collections import OrderedDict, defaultdict\n    >>> df.to_dict(into=OrderedDict)\n    OrderedDict([('col1', OrderedDict([('row1', 1), ('row2', 2)])),\n                 ('col2', OrderedDict([('row1', 0.5), ('row2', 0.75)]))])\n\n    If you want a `defaultdict`, you need to initialize it:\n\n    >>> dd = defaultdict(list)\n    >>> df.to_dict('records', into=dd)\n    [defaultdict(<class 'list'>, {'col1': 1, 'col2': 0.5}),\n     defaultdict(<class 'list'>, {'col1': 2, 'col2': 0.75})]\n    \"\"\"\n    if not self.columns.is_unique:\n        warnings.warn('DataFrame columns are not unique, some columns will be omitted.', UserWarning, stacklevel=2)\n    into_c = com.standardize_mapping(into)\n    if orient.lower().startswith('d'):\n        return into_c(((k, v.to_dict(into)) for k, v in self.items()))\n    elif orient.lower().startswith('l'):\n        return into_c(((k, v.tolist()) for k, v in self.items()))\n    elif orient.lower().startswith('sp'):\n        return into_c((('index', self.index.tolist()), ('columns', self.columns.tolist()), ('data', [list(map(com.maybe_box_datetimelike, t)) for t in self.itertuples(index=False, name=None)])))\n    elif orient.lower().startswith('s'):\n        return into_c(((k, com.maybe_box_datetimelike(v)) for k, v in self.items()))\n    elif orient.lower().startswith('r'):\n        columns = self.columns.tolist()\n        rows = (dict(zip(columns, row)) for row in self.itertuples(index=False, name=None))\n        return [into_c(((k, com.maybe_box_datetimelike(v)) for k, v in row.items())) for row in rows]\n    elif orient.lower().startswith('i'):\n        if not self.index.is_unique:\n            raise ValueError(\"DataFrame index must be unique for orient='index'.\")\n        return into_c(((t[0], dict(zip(self.columns, t[1:]))) for t in self.itertuples(name=None)))\n    else:\n        raise ValueError(f\"orient '{orient}' not understood\")",
                            "def to_gbq(self, destination_table, project_id=None, chunksize=None, reauth=False, if_exists='fail', auth_local_webserver=False, table_schema=None, location=None, progress_bar=True, credentials=None):\n    \"\"\"\n    Write a DataFrame to a Google BigQuery table.\n\n    This function requires the `pandas-gbq package\n    <https://pandas-gbq.readthedocs.io>`__.\n\n    See the `How to authenticate with Google BigQuery\n    <https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__\n    guide for authentication instructions.\n\n    Parameters\n    ----------\n    destination_table : str\n        Name of table to be written, in the form ``dataset.tablename``.\n    project_id : str, optional\n        Google BigQuery Account project ID. Optional when available from\n        the environment.\n    chunksize : int, optional\n        Number of rows to be inserted in each chunk from the dataframe.\n        Set to ``None`` to load the whole dataframe at once.\n    reauth : bool, default False\n        Force Google BigQuery to re-authenticate the user. This is useful\n        if multiple accounts are used.\n    if_exists : str, default 'fail'\n        Behavior when the destination table exists. Value can be one of:\n\n        ``'fail'``\n            If table exists, do nothing.\n        ``'replace'``\n            If table exists, drop it, recreate it, and insert data.\n        ``'append'``\n            If table exists, insert data. Create if does not exist.\n    auth_local_webserver : bool, default False\n        Use the `local webserver flow`_ instead of the `console flow`_\n        when getting user credentials.\n\n        .. _local webserver flow:\n            http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n        .. _console flow:\n            http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n        *New in version 0.2.0 of pandas-gbq*.\n    table_schema : list of dicts, optional\n        List of BigQuery table fields to which according DataFrame\n        columns conform to, e.g. ``[{'name': 'col1', 'type':\n        'STRING'},...]``. If schema is not provided, it will be\n        generated according to dtypes of DataFrame columns. See\n        BigQuery API documentation on available names of a field.\n\n        *New in version 0.3.1 of pandas-gbq*.\n    location : str, optional\n        Location where the load job should run. See the `BigQuery locations\n        documentation\n        <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a\n        list of available locations. The location must match that of the\n        target dataset.\n\n        *New in version 0.5.0 of pandas-gbq*.\n    progress_bar : bool, default True\n        Use the library `tqdm` to show the progress bar for the upload,\n        chunk by chunk.\n\n        *New in version 0.5.0 of pandas-gbq*.\n    credentials : google.auth.credentials.Credentials, optional\n        Credentials for accessing Google APIs. Use this parameter to\n        override default credentials, such as to use Compute Engine\n        :class:`google.auth.compute_engine.Credentials` or Service\n        Account :class:`google.oauth2.service_account.Credentials`\n        directly.\n\n        *New in version 0.8.0 of pandas-gbq*.\n\n        .. versionadded:: 0.24.0\n\n    See Also\n    --------\n    pandas_gbq.to_gbq : This function in the pandas-gbq library.\n    read_gbq : Read a DataFrame from Google BigQuery.\n    \"\"\"\n    from pandas.io import gbq\n    gbq.to_gbq(self, destination_table, project_id=project_id, chunksize=chunksize, reauth=reauth, if_exists=if_exists, auth_local_webserver=auth_local_webserver, table_schema=table_schema, location=location, progress_bar=progress_bar, credentials=credentials)",
                            "@classmethod\ndef from_records(cls, data, index=None, exclude=None, columns=None, coerce_float=False, nrows=None):\n    \"\"\"\n    Convert structured or record ndarray to DataFrame.\n\n    Parameters\n    ----------\n    data : ndarray (structured dtype), list of tuples, dict, or DataFrame\n    index : str, list of fields, array-like\n        Field of array to use as the index, alternately a specific set of\n        input labels to use.\n    exclude : sequence, default None\n        Columns or fields to exclude.\n    columns : sequence, default None\n        Column names to use. If the passed data do not have names\n        associated with them, this argument provides names for the\n        columns. Otherwise this argument indicates the order of the columns\n        in the result (any names not found in the data will become all-NA\n        columns).\n    coerce_float : bool, default False\n        Attempt to convert values of non-string, non-numeric objects (like\n        decimal.Decimal) to floating point, useful for SQL result sets.\n    nrows : int, default None\n        Number of rows to read if data is an iterator.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    if columns is not None:\n        columns = ensure_index(columns)\n    if is_iterator(data):\n        if nrows == 0:\n            return cls()\n        try:\n            first_row = next(data)\n        except StopIteration:\n            return cls(index=index, columns=columns)\n        dtype = None\n        if hasattr(first_row, 'dtype') and first_row.dtype.names:\n            dtype = first_row.dtype\n        values = [first_row]\n        if nrows is None:\n            values += data\n        else:\n            values.extend(itertools.islice(data, nrows - 1))\n        if dtype is not None:\n            data = np.array(values, dtype=dtype)\n        else:\n            data = values\n    if isinstance(data, dict):\n        if columns is None:\n            columns = arr_columns = ensure_index(sorted(data))\n            arrays = [data[k] for k in columns]\n        else:\n            arrays = []\n            arr_columns = []\n            for k, v in data.items():\n                if k in columns:\n                    arr_columns.append(k)\n                    arrays.append(v)\n            arrays, arr_columns = reorder_arrays(arrays, arr_columns, columns)\n    elif isinstance(data, (np.ndarray, DataFrame)):\n        arrays, columns = to_arrays(data, columns)\n        if columns is not None:\n            columns = ensure_index(columns)\n        arr_columns = columns\n    else:\n        arrays, arr_columns = to_arrays(data, columns, coerce_float=coerce_float)\n        arr_columns = ensure_index(arr_columns)\n        if columns is not None:\n            columns = ensure_index(columns)\n        else:\n            columns = arr_columns\n    if exclude is None:\n        exclude = set()\n    else:\n        exclude = set(exclude)\n    result_index = None\n    if index is not None:\n        if isinstance(index, str) or not hasattr(index, '__iter__'):\n            i = columns.get_loc(index)\n            exclude.add(index)\n            if len(arrays) > 0:\n                result_index = Index(arrays[i], name=index)\n            else:\n                result_index = Index([], name=index)\n        else:\n            try:\n                index_data = [arrays[arr_columns.get_loc(field)] for field in index]\n            except (KeyError, TypeError):\n                result_index = index\n            else:\n                result_index = ensure_index_from_sequences(index_data, names=index)\n                exclude.update(index)\n    if any(exclude):\n        arr_exclude = [x for x in exclude if x in arr_columns]\n        to_remove = [arr_columns.get_loc(col) for col in arr_exclude]\n        arrays = [v for i, v in enumerate(arrays) if i not in to_remove]\n        arr_columns = arr_columns.drop(arr_exclude)\n        columns = columns.drop(exclude)\n    mgr = arrays_to_mgr(arrays, arr_columns, result_index, columns)\n    return cls(mgr)",
                            "def to_records(self, index=True, column_dtypes=None, index_dtypes=None):\n    \"\"\"\n    Convert DataFrame to a NumPy record array.\n\n    Index will be included as the first field of the record array if\n    requested.\n\n    Parameters\n    ----------\n    index : bool, default True\n        Include index in resulting record array, stored in 'index'\n        field or using the index label, if set.\n    column_dtypes : str, type, dict, default None\n        .. versionadded:: 0.24.0\n\n        If a string or type, the data type to store all columns. If\n        a dictionary, a mapping of column names and indices (zero-indexed)\n        to specific data types.\n    index_dtypes : str, type, dict, default None\n        .. versionadded:: 0.24.0\n\n        If a string or type, the data type to store all index levels. If\n        a dictionary, a mapping of index level names and indices\n        (zero-indexed) to specific data types.\n\n        This mapping is applied only if `index=True`.\n\n    Returns\n    -------\n    numpy.recarray\n        NumPy ndarray with the DataFrame labels as fields and each row\n        of the DataFrame as entries.\n\n    See Also\n    --------\n    DataFrame.from_records: Convert structured or record ndarray\n        to DataFrame.\n    numpy.recarray: An ndarray that allows field access using\n        attributes, analogous to typed columns in a\n        spreadsheet.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},\n    ...                   index=['a', 'b'])\n    >>> df\n       A     B\n    a  1  0.50\n    b  2  0.75\n    >>> df.to_records()\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n    If the DataFrame index has no label then the recarray field name\n    is set to 'index'. If the index has a label then this is used as the\n    field name:\n\n    >>> df.index = df.index.rename(\"I\")\n    >>> df.to_records()\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('I', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n    The index can be excluded from the record array:\n\n    >>> df.to_records(index=False)\n    rec.array([(1, 0.5 ), (2, 0.75)],\n              dtype=[('A', '<i8'), ('B', '<f8')])\n\n    Data types can be specified for the columns:\n\n    >>> df.to_records(column_dtypes={\"A\": \"int32\"})\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('I', 'O'), ('A', '<i4'), ('B', '<f8')])\n\n    As well as for the index:\n\n    >>> df.to_records(index_dtypes=\"<S2\")\n    rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n              dtype=[('I', 'S2'), ('A', '<i8'), ('B', '<f8')])\n\n    >>> index_dtypes = f\"<S{df.index.str.len().max()}\"\n    >>> df.to_records(index_dtypes=index_dtypes)\n    rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n              dtype=[('I', 'S1'), ('A', '<i8'), ('B', '<f8')])\n    \"\"\"\n    if index:\n        if isinstance(self.index, ABCMultiIndex):\n            ix_vals = list(map(np.array, zip(*self.index.values)))\n        else:\n            ix_vals = [self.index.values]\n        arrays = ix_vals + [self[c]._internal_get_values() for c in self.columns]\n        count = 0\n        index_names = list(self.index.names)\n        if isinstance(self.index, ABCMultiIndex):\n            for i, n in enumerate(index_names):\n                if n is None:\n                    index_names[i] = f'level_{count}'\n                    count += 1\n        elif index_names[0] is None:\n            index_names = ['index']\n        names = [str(name) for name in itertools.chain(index_names, self.columns)]\n    else:\n        arrays = [self[c]._internal_get_values() for c in self.columns]\n        names = [str(c) for c in self.columns]\n        index_names = []\n    index_len = len(index_names)\n    formats = []\n    for i, v in enumerate(arrays):\n        index = i\n        if index < index_len:\n            dtype_mapping = index_dtypes\n            name = index_names[index]\n        else:\n            index -= index_len\n            dtype_mapping = column_dtypes\n            name = self.columns[index]\n        if is_dict_like(dtype_mapping):\n            if name in dtype_mapping:\n                dtype_mapping = dtype_mapping[name]\n            elif index in dtype_mapping:\n                dtype_mapping = dtype_mapping[index]\n            else:\n                dtype_mapping = None\n        if dtype_mapping is None:\n            formats.append(v.dtype)\n        elif isinstance(dtype_mapping, (type, np.dtype, str)):\n            formats.append(dtype_mapping)\n        else:\n            element = 'row' if i < index_len else 'column'\n            msg = f'Invalid dtype {dtype_mapping} specified for {element} {name}'\n            raise ValueError(msg)\n    return np.rec.fromarrays(arrays, dtype={'names': names, 'formats': formats})",
                            "@classmethod\ndef _from_arrays(cls, arrays, columns, index, dtype=None):\n    mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n    return cls(mgr)",
                            "@deprecate_kwarg(old_arg_name='fname', new_arg_name='path')\ndef to_stata(self, path, convert_dates=None, write_index=True, byteorder=None, time_stamp=None, data_label=None, variable_labels=None, version=114, convert_strl=None):\n    \"\"\"\n    Export DataFrame object to Stata dta format.\n\n    Writes the DataFrame to a Stata dataset file.\n    \"dta\" files contain a Stata dataset.\n\n    Parameters\n    ----------\n    path : str, buffer or path object\n        String, path object (pathlib.Path or py._path.local.LocalPath) or\n        object implementing a binary write() function. If using a buffer\n        then the buffer will not be automatically closed after the file\n        data has been written.\n\n        .. versionchanged:: 1.0.0\n\n        Previously this was \"fname\"\n\n    convert_dates : dict\n        Dictionary mapping columns containing datetime types to stata\n        internal format to use when writing the dates. Options are 'tc',\n        'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer\n        or a name. Datetime columns that do not have a conversion type\n        specified will be converted to 'tc'. Raises NotImplementedError if\n        a datetime column has timezone information.\n    write_index : bool\n        Write the index to Stata dataset.\n    byteorder : str\n        Can be \">\", \"<\", \"little\", or \"big\". default is `sys.byteorder`.\n    time_stamp : datetime\n        A datetime to use as file creation date.  Default is the current\n        time.\n    data_label : str, optional\n        A label for the data set.  Must be 80 characters or smaller.\n    variable_labels : dict\n        Dictionary containing columns as keys and variable labels as\n        values. Each label must be 80 characters or smaller.\n    version : {114, 117}, default 114\n        Version to use in the output dta file.  Version 114 can be used\n        read by Stata 10 and later.  Version 117 can be read by Stata 13\n        or later. Version 114 limits string variables to 244 characters or\n        fewer while 117 allows strings with lengths up to 2,000,000\n        characters.\n\n        .. versionadded:: 0.23.0\n\n    convert_strl : list, optional\n        List of column names to convert to string columns to Stata StrL\n        format. Only available if version is 117.  Storing strings in the\n        StrL format can produce smaller dta files if strings have more than\n        8 characters and values are repeated.\n\n        .. versionadded:: 0.23.0\n\n    Raises\n    ------\n    NotImplementedError\n        * If datetimes contain timezone information\n        * Column dtype is not representable in Stata\n    ValueError\n        * Columns listed in convert_dates are neither datetime64[ns]\n          or datetime.datetime\n        * Column listed in convert_dates is not in DataFrame\n        * Categorical label contains more than 32,000 characters\n\n    See Also\n    --------\n    read_stata : Import Stata data files.\n    io.stata.StataWriter : Low-level writer for Stata data files.\n    io.stata.StataWriter117 : Low-level writer for version 117 files.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'animal': ['falcon', 'parrot', 'falcon',\n    ...                               'parrot'],\n    ...                    'speed': [350, 18, 361, 15]})\n    >>> df.to_stata('animals.dta')  # doctest: +SKIP\n    \"\"\"\n    kwargs = {}\n    if version not in (114, 117):\n        raise ValueError('Only formats 114 and 117 supported.')\n    if version == 114:\n        if convert_strl is not None:\n            raise ValueError('strl support is only available when using format 117')\n        from pandas.io.stata import StataWriter as statawriter\n    else:\n        from pandas.io.stata import StataWriter117 as statawriter\n        kwargs['convert_strl'] = convert_strl\n    writer = statawriter(path, self, convert_dates=convert_dates, byteorder=byteorder, time_stamp=time_stamp, data_label=data_label, write_index=write_index, variable_labels=variable_labels, **kwargs)\n    writer.write_file()",
                            "@deprecate_kwarg(old_arg_name='fname', new_arg_name='path')\ndef to_feather(self, path):\n    \"\"\"\n    Write out the binary feather-format for DataFrames.\n\n    Parameters\n    ----------\n    path : str\n        String file path.\n    \"\"\"\n    from pandas.io.feather_format import to_feather\n    to_feather(self, path)",
                            "@deprecate_kwarg(old_arg_name='fname', new_arg_name='path')\ndef to_parquet(self, path, engine='auto', compression='snappy', index=None, partition_cols=None, **kwargs):\n    \"\"\"\n    Write a DataFrame to the binary parquet format.\n\n    .. versionadded:: 0.21.0\n\n    This function writes the dataframe as a `parquet file\n    <https://parquet.apache.org/>`_. You can choose different parquet\n    backends, and have the option of compression. See\n    :ref:`the user guide <io.parquet>` for more details.\n\n    Parameters\n    ----------\n    path : str\n        File path or Root Directory path. Will be used as Root Directory\n        path while writing a partitioned dataset.\n\n        .. versionchanged:: 1.0.0\n\n        Previously this was \"fname\"\n\n    engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n        Parquet library to use. If 'auto', then the option\n        ``io.parquet.engine`` is used. The default ``io.parquet.engine``\n        behavior is to try 'pyarrow', falling back to 'fastparquet' if\n        'pyarrow' is unavailable.\n    compression : {'snappy', 'gzip', 'brotli', None}, default 'snappy'\n        Name of the compression to use. Use ``None`` for no compression.\n    index : bool, default None\n        If ``True``, include the dataframe's index(es) in the file output.\n        If ``False``, they will not be written to the file.\n        If ``None``, similar to ``True`` the dataframe's index(es)\n        will be saved. However, instead of being saved as values,\n        the RangeIndex will be stored as a range in the metadata so it\n        doesn't require much space and is faster. Other indexes will\n        be included as columns in the file output.\n\n        .. versionadded:: 0.24.0\n\n    partition_cols : list, optional, default None\n        Column names by which to partition the dataset.\n        Columns are partitioned in the order they are given.\n\n        .. versionadded:: 0.24.0\n\n    **kwargs\n        Additional arguments passed to the parquet library. See\n        :ref:`pandas io <io.parquet>` for more details.\n\n    See Also\n    --------\n    read_parquet : Read a parquet file.\n    DataFrame.to_csv : Write a csv file.\n    DataFrame.to_sql : Write to a sql table.\n    DataFrame.to_hdf : Write to hdf.\n\n    Notes\n    -----\n    This function requires either the `fastparquet\n    <https://pypi.org/project/fastparquet>`_ or `pyarrow\n    <https://arrow.apache.org/docs/python/>`_ library.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.to_parquet('df.parquet.gzip',\n    ...               compression='gzip')  # doctest: +SKIP\n    >>> pd.read_parquet('df.parquet.gzip')  # doctest: +SKIP\n       col1  col2\n    0     1     3\n    1     2     4\n    \"\"\"\n    from pandas.io.parquet import to_parquet\n    to_parquet(self, path, engine, compression=compression, index=index, partition_cols=partition_cols, **kwargs)",
                            "@Substitution(header_type='bool', header='Whether to print column labels, default True', col_space_type='str or int', col_space='The minimum width of each column in CSS length units.  An int is assumed to be px units.\\n\\n            .. versionadded:: 0.25.0\\n                Ability to use str')\n@Substitution(shared_params=fmt.common_docstring, returns=fmt.return_docstring)\ndef to_html(self, buf=None, columns=None, col_space=None, header=True, index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=None, index_names=True, justify=None, max_rows=None, max_cols=None, show_dimensions=False, decimal='.', bold_rows=True, classes=None, escape=True, notebook=False, border=None, table_id=None, render_links=False, encoding=None):\n    \"\"\"\n    Render a DataFrame as an HTML table.\n    %(shared_params)s\n    bold_rows : bool, default True\n        Make the row labels bold in the output.\n    classes : str or list or tuple, default None\n        CSS class(es) to apply to the resulting html table.\n    escape : bool, default True\n        Convert the characters <, >, and & to HTML-safe sequences.\n    notebook : {True, False}, default False\n        Whether the generated HTML is for IPython Notebook.\n    border : int\n        A ``border=border`` attribute is included in the opening\n        `<table>` tag. Default ``pd.options.display.html.border``.\n    encoding : str, default \"utf-8\"\n        Set character encoding\n\n        .. versionadded:: 1.0\n    table_id : str, optional\n        A css id is included in the opening `<table>` tag if specified.\n\n        .. versionadded:: 0.23.0\n\n    render_links : bool, default False\n        Convert URLs to HTML links.\n\n        .. versionadded:: 0.24.0\n    %(returns)s\n    See Also\n    --------\n    to_string : Convert DataFrame to a string.\n    \"\"\"\n    if justify is not None and justify not in fmt._VALID_JUSTIFY_PARAMETERS:\n        raise ValueError('Invalid value for justify parameter')\n    formatter = fmt.DataFrameFormatter(self, columns=columns, col_space=col_space, na_rep=na_rep, formatters=formatters, float_format=float_format, sparsify=sparsify, justify=justify, index_names=index_names, header=header, index=index, bold_rows=bold_rows, escape=escape, max_rows=max_rows, max_cols=max_cols, show_dimensions=show_dimensions, decimal=decimal, table_id=table_id, render_links=render_links)\n    return formatter.to_html(buf=buf, classes=classes, notebook=notebook, border=border, encoding=encoding)",
                            "def info(self, verbose=None, buf=None, max_cols=None, memory_usage=None, null_counts=None):\n    \"\"\"\n    Print a concise summary of a DataFrame.\n\n    This method prints information about a DataFrame including\n    the index dtype and column dtypes, non-null values and memory usage.\n\n    Parameters\n    ----------\n    verbose : bool, optional\n        Whether to print the full summary. By default, the setting in\n        ``pandas.options.display.max_info_columns`` is followed.\n    buf : writable buffer, defaults to sys.stdout\n        Where to send the output. By default, the output is printed to\n        sys.stdout. Pass a writable buffer if you need to further process\n        the output.\n    max_cols : int, optional\n        When to switch from the verbose to the truncated output. If the\n        DataFrame has more than `max_cols` columns, the truncated output\n        is used. By default, the setting in\n        ``pandas.options.display.max_info_columns`` is used.\n    memory_usage : bool, str, optional\n        Specifies whether total memory usage of the DataFrame\n        elements (including the index) should be displayed. By default,\n        this follows the ``pandas.options.display.memory_usage`` setting.\n\n        True always show memory usage. False never shows memory usage.\n        A value of 'deep' is equivalent to \"True with deep introspection\".\n        Memory usage is shown in human-readable units (base-2\n        representation). Without deep introspection a memory estimation is\n        made based in column dtype and number of rows assuming values\n        consume the same memory amount for corresponding dtypes. With deep\n        memory introspection, a real memory usage calculation is performed\n        at the cost of computational resources.\n    null_counts : bool, optional\n        Whether to show the non-null counts. By default, this is shown\n        only if the frame is smaller than\n        ``pandas.options.display.max_info_rows`` and\n        ``pandas.options.display.max_info_columns``. A value of True always\n        shows the counts, and False never shows the counts.\n\n    Returns\n    -------\n    None\n        This method prints a summary of a DataFrame and returns None.\n\n    See Also\n    --------\n    DataFrame.describe: Generate descriptive statistics of DataFrame\n        columns.\n    DataFrame.memory_usage: Memory usage of DataFrame columns.\n\n    Examples\n    --------\n    >>> int_values = [1, 2, 3, 4, 5]\n    >>> text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']\n    >>> float_values = [0.0, 0.25, 0.5, 0.75, 1.0]\n    >>> df = pd.DataFrame({\"int_col\": int_values, \"text_col\": text_values,\n    ...                   \"float_col\": float_values})\n    >>> df\n       int_col text_col  float_col\n    0        1    alpha       0.00\n    1        2     beta       0.25\n    2        3    gamma       0.50\n    3        4    delta       0.75\n    4        5  epsilon       1.00\n\n    Prints information of all columns:\n\n    >>> df.info(verbose=True)\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 5 entries, 0 to 4\n    Data columns (total 3 columns):\n    int_col      5 non-null int64\n    text_col     5 non-null object\n    float_col    5 non-null float64\n    dtypes: float64(1), int64(1), object(1)\n    memory usage: 248.0+ bytes\n\n    Prints a summary of columns count and its dtypes but not per column\n    information:\n\n    >>> df.info(verbose=False)\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 5 entries, 0 to 4\n    Columns: 3 entries, int_col to float_col\n    dtypes: float64(1), int64(1), object(1)\n    memory usage: 248.0+ bytes\n\n    Pipe output of DataFrame.info to buffer instead of sys.stdout, get\n    buffer content and writes to a text file:\n\n    >>> import io\n    >>> buffer = io.StringIO()\n    >>> df.info(buf=buffer)\n    >>> s = buffer.getvalue()\n    >>> with open(\"df_info.txt\", \"w\",\n    ...           encoding=\"utf-8\") as f:  # doctest: +SKIP\n    ...     f.write(s)\n    260\n\n    The `memory_usage` parameter allows deep introspection mode, specially\n    useful for big DataFrames and fine-tune memory optimization:\n\n    >>> random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)\n    >>> df = pd.DataFrame({\n    ...     'column_1': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n    ...     'column_2': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n    ...     'column_3': np.random.choice(['a', 'b', 'c'], 10 ** 6)\n    ... })\n    >>> df.info()\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 1000000 entries, 0 to 999999\n    Data columns (total 3 columns):\n    column_1    1000000 non-null object\n    column_2    1000000 non-null object\n    column_3    1000000 non-null object\n    dtypes: object(3)\n    memory usage: 22.9+ MB\n\n    >>> df.info(memory_usage='deep')\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 1000000 entries, 0 to 999999\n    Data columns (total 3 columns):\n    column_1    1000000 non-null object\n    column_2    1000000 non-null object\n    column_3    1000000 non-null object\n    dtypes: object(3)\n    memory usage: 188.8 MB\n    \"\"\"\n    if buf is None:\n        buf = sys.stdout\n    lines = []\n    lines.append(str(type(self)))\n    lines.append(self.index._summary())\n    if len(self.columns) == 0:\n        lines.append(f'Empty {type(self).__name__}')\n        fmt.buffer_put_lines(buf, lines)\n        return\n    cols = self.columns\n    if max_cols is None:\n        max_cols = get_option('display.max_info_columns', len(self.columns) + 1)\n    max_rows = get_option('display.max_info_rows', len(self) + 1)\n    if null_counts is None:\n        show_counts = len(self.columns) <= max_cols and len(self) < max_rows\n    else:\n        show_counts = null_counts\n    exceeds_info_cols = len(self.columns) > max_cols\n\n    def _verbose_repr():\n        lines.append(f'Data columns (total {len(self.columns)} columns):')\n        space = max((len(pprint_thing(k)) for k in self.columns)) + 4\n        counts = None\n        tmpl = '{count}{dtype}'\n        if show_counts:\n            counts = self.count()\n            if len(cols) != len(counts):\n                raise AssertionError(f'Columns must equal counts ({len(cols)} != {len(counts)})')\n            tmpl = '{count} non-null {dtype}'\n        dtypes = self.dtypes\n        for i, col in enumerate(self.columns):\n            dtype = dtypes.iloc[i]\n            col = pprint_thing(col)\n            count = ''\n            if show_counts:\n                count = counts.iloc[i]\n            lines.append(_put_str(col, space) + tmpl.format(count=count, dtype=dtype))\n\n    def _non_verbose_repr():\n        lines.append(self.columns._summary(name='Columns'))\n\n    def _sizeof_fmt(num, size_qualifier):\n        for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n            if num < 1024.0:\n                return f'{num:3.1f}{size_qualifier} {x}'\n            num /= 1024.0\n        return f'{num:3.1f}{size_qualifier} PB'\n    if verbose:\n        _verbose_repr()\n    elif verbose is False:\n        _non_verbose_repr()\n    elif exceeds_info_cols:\n        _non_verbose_repr()\n    else:\n        _verbose_repr()\n    counts = self._data.get_dtype_counts()\n    dtypes = [f'{k[0]}({k[1]:d})' for k in sorted(counts.items())]\n    lines.append(f\"dtypes: {', '.join(dtypes)}\")\n    if memory_usage is None:\n        memory_usage = get_option('display.memory_usage')\n    if memory_usage:\n        size_qualifier = ''\n        if memory_usage == 'deep':\n            deep = True\n        else:\n            deep = False\n            if 'object' in counts or self.index._is_memory_usage_qualified():\n                size_qualifier = '+'\n        mem_usage = self.memory_usage(index=True, deep=deep).sum()\n        lines.append(f'memory usage: {_sizeof_fmt(mem_usage, size_qualifier)}\\n')\n    fmt.buffer_put_lines(buf, lines)",
                            "def memory_usage(self, index=True, deep=False):\n    \"\"\"\n    Return the memory usage of each column in bytes.\n\n    The memory usage can optionally include the contribution of\n    the index and elements of `object` dtype.\n\n    This value is displayed in `DataFrame.info` by default. This can be\n    suppressed by setting ``pandas.options.display.memory_usage`` to False.\n\n    Parameters\n    ----------\n    index : bool, default True\n        Specifies whether to include the memory usage of the DataFrame's\n        index in returned Series. If ``index=True``, the memory usage of\n        the index is the first item in the output.\n    deep : bool, default False\n        If True, introspect the data deeply by interrogating\n        `object` dtypes for system-level memory consumption, and include\n        it in the returned values.\n\n    Returns\n    -------\n    Series\n        A Series whose index is the original column names and whose values\n        is the memory usage of each column in bytes.\n\n    See Also\n    --------\n    numpy.ndarray.nbytes : Total bytes consumed by the elements of an\n        ndarray.\n    Series.memory_usage : Bytes consumed by a Series.\n    Categorical : Memory-efficient array for string values with\n        many repeated values.\n    DataFrame.info : Concise summary of a DataFrame.\n\n    Examples\n    --------\n    >>> dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']\n    >>> data = dict([(t, np.ones(shape=5000).astype(t))\n    ...              for t in dtypes])\n    >>> df = pd.DataFrame(data)\n    >>> df.head()\n       int64  float64            complex128  object  bool\n    0      1      1.0    1.000000+0.000000j       1  True\n    1      1      1.0    1.000000+0.000000j       1  True\n    2      1      1.0    1.000000+0.000000j       1  True\n    3      1      1.0    1.000000+0.000000j       1  True\n    4      1      1.0    1.000000+0.000000j       1  True\n\n    >>> df.memory_usage()\n    Index           128\n    int64         40000\n    float64       40000\n    complex128    80000\n    object        40000\n    bool           5000\n    dtype: int64\n\n    >>> df.memory_usage(index=False)\n    int64         40000\n    float64       40000\n    complex128    80000\n    object        40000\n    bool           5000\n    dtype: int64\n\n    The memory footprint of `object` dtype columns is ignored by default:\n\n    >>> df.memory_usage(deep=True)\n    Index            128\n    int64          40000\n    float64        40000\n    complex128     80000\n    object        160000\n    bool            5000\n    dtype: int64\n\n    Use a Categorical for efficient storage of an object-dtype column with\n    many repeated values.\n\n    >>> df['object'].astype('category').memory_usage(deep=True)\n    5216\n    \"\"\"\n    result = Series([c.memory_usage(index=False, deep=deep) for col, c in self.items()], index=self.columns)\n    if index:\n        result = Series(self.index.memory_usage(deep=deep), index=['Index']).append(result)\n    return result",
                            "def transpose(self, *args, **kwargs):\n    \"\"\"\n    Transpose index and columns.\n\n    Reflect the DataFrame over its main diagonal by writing rows as columns\n    and vice-versa. The property :attr:`.T` is an accessor to the method\n    :meth:`transpose`.\n\n    Parameters\n    ----------\n    *args, **kwargs\n        Additional arguments and keywords have no effect but might be\n        accepted for compatibility with numpy.\n\n    Returns\n    -------\n    DataFrame\n        The transposed DataFrame.\n\n    See Also\n    --------\n    numpy.transpose : Permute the dimensions of a given array.\n\n    Notes\n    -----\n    Transposing a DataFrame with mixed dtypes will result in a homogeneous\n    DataFrame with the `object` dtype. In such a case, a copy of the data\n    is always made.\n\n    Examples\n    --------\n    **Square DataFrame with homogeneous dtype**\n\n    >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df1 = pd.DataFrame(data=d1)\n    >>> df1\n       col1  col2\n    0     1     3\n    1     2     4\n\n    >>> df1_transposed = df1.T # or df1.transpose()\n    >>> df1_transposed\n          0  1\n    col1  1  2\n    col2  3  4\n\n    When the dtype is homogeneous in the original DataFrame, we get a\n    transposed DataFrame with the same dtype:\n\n    >>> df1.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n    >>> df1_transposed.dtypes\n    0    int64\n    1    int64\n    dtype: object\n\n    **Non-square DataFrame with mixed dtypes**\n\n    >>> d2 = {'name': ['Alice', 'Bob'],\n    ...       'score': [9.5, 8],\n    ...       'employed': [False, True],\n    ...       'kids': [0, 0]}\n    >>> df2 = pd.DataFrame(data=d2)\n    >>> df2\n        name  score  employed  kids\n    0  Alice    9.5     False     0\n    1    Bob    8.0      True     0\n\n    >>> df2_transposed = df2.T # or df2.transpose()\n    >>> df2_transposed\n                  0     1\n    name      Alice   Bob\n    score       9.5     8\n    employed  False  True\n    kids          0     0\n\n    When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n    the `object` dtype:\n\n    >>> df2.dtypes\n    name         object\n    score       float64\n    employed       bool\n    kids          int64\n    dtype: object\n    >>> df2_transposed.dtypes\n    0    object\n    1    object\n    dtype: object\n    \"\"\"\n    nv.validate_transpose(args, dict())\n    return super().transpose(1, 0, **kwargs)",
                            "def _ixs(self, i: int, axis: int=0):\n    \"\"\"\n    Parameters\n    ----------\n    i : int\n    axis : int\n\n    Notes\n    -----\n    If slice passed, the resulting data will be a view.\n    \"\"\"\n    if axis == 0:\n        new_values = self._data.fast_xs(i)\n        copy = isinstance(new_values, np.ndarray) and new_values.base is None\n        result = self._constructor_sliced(new_values, index=self.columns, name=self.index[i], dtype=new_values.dtype)\n        result._set_is_copy(self, copy=copy)\n        return result\n    else:\n        label = self.columns[i]\n        values = self._data.iget(i)\n        if len(self.index) and (not len(values)):\n            values = np.array([np.nan] * len(self.index), dtype=object)\n        result = self._box_col_values(values, label)\n        result._set_as_cached(label, self)\n        return result",
                            "def __getitem__(self, key):\n    key = lib.item_from_zerodim(key)\n    key = com.apply_if_callable(key, self)\n    if is_hashable(key):\n        if self.columns.is_unique and key in self.columns:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            return self._get_item_cache(key)\n    indexer = convert_to_index_sliceable(self, key)\n    if indexer is not None:\n        return self._slice(indexer, axis=0)\n    if isinstance(key, DataFrame):\n        return self.where(key)\n    if com.is_bool_indexer(key):\n        return self._getitem_bool_array(key)\n    is_single_key = isinstance(key, tuple) or not is_list_like(key)\n    if is_single_key:\n        if self.columns.nlevels > 1:\n            return self._getitem_multilevel(key)\n        indexer = self.columns.get_loc(key)\n        if is_integer(indexer):\n            indexer = [indexer]\n    else:\n        if is_iterator(key):\n            key = list(key)\n        indexer = self.loc._get_listlike_indexer(key, axis=1, raise_missing=True)[1]\n    if getattr(indexer, 'dtype', None) == bool:\n        indexer = np.where(indexer)[0]\n    data = self.take(indexer, axis=1)\n    if is_single_key:\n        if data.shape[1] == 1 and (not isinstance(self.columns, ABCMultiIndex)):\n            data = data[key]\n    return data",
                            "def _getitem_bool_array(self, key):\n    if isinstance(key, Series) and (not key.index.equals(self.index)):\n        warnings.warn('Boolean Series key will be reindexed to match DataFrame index.', UserWarning, stacklevel=3)\n    elif len(key) != len(self.index):\n        raise ValueError(f'Item wrong length {len(key)} instead of {len(self.index)}.')\n    key = check_bool_indexer(self.index, key)\n    indexer = key.nonzero()[0]\n    return self.take(indexer, axis=0)",
                            "def _getitem_multilevel(self, key):\n    loc = self.columns.get_loc(key)\n    if isinstance(loc, (slice, Series, np.ndarray, Index)):\n        new_columns = self.columns[loc]\n        result_columns = maybe_droplevels(new_columns, key)\n        if self._is_mixed_type:\n            result = self.reindex(columns=new_columns)\n            result.columns = result_columns\n        else:\n            new_values = self.values[:, loc]\n            result = self._constructor(new_values, index=self.index, columns=result_columns)\n            result = result.__finalize__(self)\n        if len(result.columns) == 1:\n            top = result.columns[0]\n            if isinstance(top, tuple):\n                top = top[0]\n            if top == '':\n                result = result['']\n                if isinstance(result, Series):\n                    result = self._constructor_sliced(result, index=self.index, name=key)\n        result._set_is_copy(self)\n        return result\n    else:\n        return self._get_item_cache(key)",
                            "def _get_value(self, index, col, takeable: bool=False):\n    \"\"\"\n    Quickly retrieve single value at passed column and index.\n\n    Parameters\n    ----------\n    index : row label\n    col : column label\n    takeable : interpret the index/col as indexers, default False\n\n    Returns\n    -------\n    scalar\n    \"\"\"\n    if takeable:\n        series = self._iget_item_cache(col)\n        return com.maybe_box_datetimelike(series._values[index])\n    series = self._get_item_cache(col)\n    engine = self.index._engine\n    try:\n        return engine.get_value(series._values, index)\n    except KeyError:\n        if self.index.nlevels > 1:\n            raise\n    except (TypeError, ValueError):\n        pass\n    col = self.columns.get_loc(col)\n    index = self.index.get_loc(index)\n    return self._get_value(index, col, takeable=True)",
                            "def __setitem__(self, key, value):\n    key = com.apply_if_callable(key, self)\n    indexer = convert_to_index_sliceable(self, key)\n    if indexer is not None:\n        return self._setitem_slice(indexer, value)\n    if isinstance(key, DataFrame) or getattr(key, 'ndim', None) == 2:\n        self._setitem_frame(key, value)\n    elif isinstance(key, (Series, np.ndarray, list, Index)):\n        self._setitem_array(key, value)\n    else:\n        self._set_item(key, value)",
                            "def _setitem_slice(self, key, value):\n    self._check_setitem_copy()\n    self.loc[key] = value",
                            "def _setitem_array(self, key, value):\n    if com.is_bool_indexer(key):\n        if len(key) != len(self.index):\n            raise ValueError(f'Item wrong length {len(key)} instead of {len(self.index)}!')\n        key = check_bool_indexer(self.index, key)\n        indexer = key.nonzero()[0]\n        self._check_setitem_copy()\n        self.loc._setitem_with_indexer(indexer, value)\n    elif isinstance(value, DataFrame):\n        if len(value.columns) != len(key):\n            raise ValueError('Columns must be same length as key')\n        for k1, k2 in zip(key, value.columns):\n            self[k1] = value[k2]\n    else:\n        indexer = self.loc._get_listlike_indexer(key, axis=1, raise_missing=False)[1]\n        self._check_setitem_copy()\n        self.loc._setitem_with_indexer((slice(None), indexer), value)",
                            "def _setitem_frame(self, key, value):\n    if isinstance(key, np.ndarray):\n        if key.shape != self.shape:\n            raise ValueError('Array conditional must be same shape as self')\n        key = self._constructor(key, **self._construct_axes_dict())\n    if key.values.size and (not is_bool_dtype(key.values)):\n        raise TypeError('Must pass DataFrame or 2-d ndarray with boolean values only')\n    self._check_inplace_setting(value)\n    self._check_setitem_copy()\n    self._where(-key, value, inplace=True)",
                            "def _set_item(self, key, value):\n    \"\"\"\n    Add series to DataFrame in specified column.\n\n    If series is a numpy-array (not a Series/TimeSeries), it must be the\n    same length as the DataFrames index or an error will be thrown.\n\n    Series/TimeSeries will be conformed to the DataFrames index to\n    ensure homogeneity.\n    \"\"\"\n    self._ensure_valid_index(value)\n    value = self._sanitize_column(key, value)\n    NDFrame._set_item(self, key, value)\n    if len(self):\n        self._check_setitem_copy()",
                            "def _set_value(self, index, col, value, takeable: bool=False):\n    \"\"\"\n    Put single value at passed column and index.\n\n    Parameters\n    ----------\n    index : row label\n    col : column label\n    value : scalar\n    takeable : interpret the index/col as indexers, default False\n\n    Returns\n    -------\n    DataFrame\n        If label pair is contained, will be reference to calling DataFrame,\n        otherwise a new object.\n    \"\"\"\n    try:\n        if takeable is True:\n            series = self._iget_item_cache(col)\n            return series._set_value(index, value, takeable=True)\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n        engine.set_value(series._values, index, value)\n        return self\n    except (KeyError, TypeError):\n        if takeable:\n            self.iloc[index, col] = value\n        else:\n            self.loc[index, col] = value\n        self._item_cache.pop(col, None)\n        return self",
                            "def _ensure_valid_index(self, value):\n    \"\"\"\n    Ensure that if we don't have an index, that we can create one from the\n    passed value.\n    \"\"\"\n    if not len(self.index) and is_list_like(value) and len(value):\n        try:\n            value = Series(value)\n        except (ValueError, NotImplementedError, TypeError):\n            raise ValueError('Cannot set a frame with no defined index and a value that cannot be converted to a Series')\n        self._data = self._data.reindex_axis(value.index.copy(), axis=1, fill_value=np.nan)",
                            "def _box_item_values(self, key, values):\n    items = self.columns[self.columns.get_loc(key)]\n    if values.ndim == 2:\n        return self._constructor(values.T, columns=items, index=self.index)\n    else:\n        return self._box_col_values(values, items)",
                            "def _box_col_values(self, values, items):\n    \"\"\"\n    Provide boxed values for a column.\n    \"\"\"\n    klass = self._constructor_sliced\n    return klass(values, index=self.index, name=items, fastpath=True)",
                            "def query(self, expr, inplace=False, **kwargs):\n    \"\"\"\n    Query the columns of a DataFrame with a boolean expression.\n\n    Parameters\n    ----------\n    expr : str\n        The query string to evaluate.  You can refer to variables\n        in the environment by prefixing them with an '@' character like\n        ``@a + b``.\n\n        .. versionadded:: 0.25.0\n\n        You can refer to column names that contain spaces by surrounding\n        them in backticks.\n\n        For example, if one of your columns is called ``a a`` and you want\n        to sum it with ``b``, your query should be ```a a` + b``.\n\n    inplace : bool\n        Whether the query should modify the data in place or return\n        a modified copy.\n    **kwargs\n        See the documentation for :func:`eval` for complete details\n        on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame resulting from the provided query expression.\n\n    See Also\n    --------\n    eval : Evaluate a string describing operations on\n        DataFrame columns.\n    DataFrame.eval : Evaluate a string describing operations on\n        DataFrame columns.\n\n    Notes\n    -----\n    The result of the evaluation of this expression is first passed to\n    :attr:`DataFrame.loc` and if that fails because of a\n    multidimensional key (e.g., a DataFrame) then the result will be passed\n    to :meth:`DataFrame.__getitem__`.\n\n    This method uses the top-level :func:`eval` function to\n    evaluate the passed query.\n\n    The :meth:`~pandas.DataFrame.query` method uses a slightly\n    modified Python syntax by default. For example, the ``&`` and ``|``\n    (bitwise) operators have the precedence of their boolean cousins,\n    :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n    however the semantics are different.\n\n    You can change the semantics of the expression by passing the keyword\n    argument ``parser='python'``. This enforces the same semantics as\n    evaluation in Python space. Likewise, you can pass ``engine='python'``\n    to evaluate an expression using Python itself as a backend. This is not\n    recommended as it is inefficient compared to using ``numexpr`` as the\n    engine.\n\n    The :attr:`DataFrame.index` and\n    :attr:`DataFrame.columns` attributes of the\n    :class:`~pandas.DataFrame` instance are placed in the query namespace\n    by default, which allows you to treat both the index and columns of the\n    frame as a column in the frame.\n    The identifier ``index`` is used for the frame index; you can also\n    use the name of the index to identify it in a query. Please note that\n    Python keywords may not be used as identifiers.\n\n    For further details and examples see the ``query`` documentation in\n    :ref:`indexing <indexing.query>`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': range(1, 6),\n    ...                    'B': range(10, 0, -2),\n    ...                    'C C': range(10, 5, -1)})\n    >>> df\n       A   B  C C\n    0  1  10   10\n    1  2   8    9\n    2  3   6    8\n    3  4   4    7\n    4  5   2    6\n    >>> df.query('A > B')\n       A  B  C C\n    4  5  2    6\n\n    The previous expression is equivalent to\n\n    >>> df[df.A > df.B]\n       A  B  C C\n    4  5  2    6\n\n    For columns with spaces in their name, you can use backtick quoting.\n\n    >>> df.query('B == `C C`')\n       A   B  C C\n    0  1  10   10\n\n    The previous expression is equivalent to\n\n    >>> df[df.B == df['C C']]\n       A   B  C C\n    0  1  10   10\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if not isinstance(expr, str):\n        msg = f'expr must be a string to be evaluated, {type(expr)} given'\n        raise ValueError(msg)\n    kwargs['level'] = kwargs.pop('level', 0) + 1\n    kwargs['target'] = None\n    res = self.eval(expr, **kwargs)\n    try:\n        new_data = self.loc[res]\n    except ValueError:\n        new_data = self[res]\n    if inplace:\n        self._update_inplace(new_data)\n    else:\n        return new_data",
                            "def eval(self, expr, inplace=False, **kwargs):\n    \"\"\"\n    Evaluate a string describing operations on DataFrame columns.\n\n    Operates on columns only, not specific rows or elements.  This allows\n    `eval` to run arbitrary code, which can make you vulnerable to code\n    injection if you pass user input to this function.\n\n    Parameters\n    ----------\n    expr : str\n        The expression string to evaluate.\n    inplace : bool, default False\n        If the expression contains an assignment, whether to perform the\n        operation inplace and mutate the existing DataFrame. Otherwise,\n        a new DataFrame is returned.\n    **kwargs\n        See the documentation for :func:`eval` for complete details\n        on the keyword arguments accepted by\n        :meth:`~pandas.DataFrame.query`.\n\n    Returns\n    -------\n    ndarray, scalar, or pandas object\n        The result of the evaluation.\n\n    See Also\n    --------\n    DataFrame.query : Evaluates a boolean expression to query the columns\n        of a frame.\n    DataFrame.assign : Can evaluate an expression or function to create new\n        values for a column.\n    eval : Evaluate a Python expression as a string using various\n        backends.\n\n    Notes\n    -----\n    For more details see the API documentation for :func:`~eval`.\n    For detailed examples see :ref:`enhancing performance with eval\n    <enhancingperf.eval>`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})\n    >>> df\n       A   B\n    0  1  10\n    1  2   8\n    2  3   6\n    3  4   4\n    4  5   2\n    >>> df.eval('A + B')\n    0    11\n    1    10\n    2     9\n    3     8\n    4     7\n    dtype: int64\n\n    Assignment is allowed though by default the original DataFrame is not\n    modified.\n\n    >>> df.eval('C = A + B')\n       A   B   C\n    0  1  10  11\n    1  2   8  10\n    2  3   6   9\n    3  4   4   8\n    4  5   2   7\n    >>> df\n       A   B\n    0  1  10\n    1  2   8\n    2  3   6\n    3  4   4\n    4  5   2\n\n    Use ``inplace=True`` to modify the original DataFrame.\n\n    >>> df.eval('C = A + B', inplace=True)\n    >>> df\n       A   B   C\n    0  1  10  11\n    1  2   8  10\n    2  3   6   9\n    3  4   4   8\n    4  5   2   7\n    \"\"\"\n    from pandas.core.computation.eval import eval as _eval\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    resolvers = kwargs.pop('resolvers', None)\n    kwargs['level'] = kwargs.pop('level', 0) + 1\n    if resolvers is None:\n        index_resolvers = self._get_index_resolvers()\n        column_resolvers = self._get_space_character_free_column_resolvers()\n        resolvers = (column_resolvers, index_resolvers)\n    if 'target' not in kwargs:\n        kwargs['target'] = self\n    kwargs['resolvers'] = kwargs.get('resolvers', ()) + tuple(resolvers)\n    return _eval(expr, inplace=inplace, **kwargs)",
                            "def select_dtypes(self, include=None, exclude=None):\n    \"\"\"\n    Return a subset of the DataFrame's columns based on the column dtypes.\n\n    Parameters\n    ----------\n    include, exclude : scalar or list-like\n        A selection of dtypes or strings to be included/excluded. At least\n        one of these parameters must be supplied.\n\n    Returns\n    -------\n    DataFrame\n        The subset of the frame including the dtypes in ``include`` and\n        excluding the dtypes in ``exclude``.\n\n    Raises\n    ------\n    ValueError\n        * If both of ``include`` and ``exclude`` are empty\n        * If ``include`` and ``exclude`` have overlapping elements\n        * If any kind of string dtype is passed in.\n\n    Notes\n    -----\n    * To select all *numeric* types, use ``np.number`` or ``'number'``\n    * To select strings you must use the ``object`` dtype, but note that\n      this will return *all* object dtype columns\n    * See the `numpy dtype hierarchy\n      <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__\n    * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n      ``'datetime64'``\n    * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n      ``'timedelta64'``\n    * To select Pandas categorical dtypes, use ``'category'``\n    * To select Pandas datetimetz dtypes, use ``'datetimetz'`` (new in\n      0.20.0) or ``'datetime64[ns, tz]'``\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'a': [1, 2] * 3,\n    ...                    'b': [True, False] * 3,\n    ...                    'c': [1.0, 2.0] * 3})\n    >>> df\n            a      b  c\n    0       1   True  1.0\n    1       2  False  2.0\n    2       1   True  1.0\n    3       2  False  2.0\n    4       1   True  1.0\n    5       2  False  2.0\n\n    >>> df.select_dtypes(include='bool')\n       b\n    0  True\n    1  False\n    2  True\n    3  False\n    4  True\n    5  False\n\n    >>> df.select_dtypes(include=['float64'])\n       c\n    0  1.0\n    1  2.0\n    2  1.0\n    3  2.0\n    4  1.0\n    5  2.0\n\n    >>> df.select_dtypes(exclude=['int'])\n           b    c\n    0   True  1.0\n    1  False  2.0\n    2   True  1.0\n    3  False  2.0\n    4   True  1.0\n    5  False  2.0\n    \"\"\"\n    if not is_list_like(include):\n        include = (include,) if include is not None else ()\n    if not is_list_like(exclude):\n        exclude = (exclude,) if exclude is not None else ()\n    selection = (frozenset(include), frozenset(exclude))\n    if not any(selection):\n        raise ValueError('at least one of include or exclude must be nonempty')\n    include = frozenset((infer_dtype_from_object(x) for x in include))\n    exclude = frozenset((infer_dtype_from_object(x) for x in exclude))\n    for dtypes in (include, exclude):\n        invalidate_string_dtypes(dtypes)\n    if not include.isdisjoint(exclude):\n        raise ValueError(f'include and exclude overlap on {include & exclude}')\n    keep_these = np.full(self.shape[1], True)\n\n    def extract_unique_dtypes_from_dtypes_set(dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray) -> List[Dtype]:\n        extracted_dtypes = [unique_dtype for unique_dtype in unique_dtypes if issubclass(unique_dtype.type, tuple(dtypes_set))]\n        return extracted_dtypes\n    unique_dtypes = self.dtypes.unique()\n    if include:\n        included_dtypes = extract_unique_dtypes_from_dtypes_set(include, unique_dtypes)\n        keep_these &= self.dtypes.isin(included_dtypes)\n    if exclude:\n        excluded_dtypes = extract_unique_dtypes_from_dtypes_set(exclude, unique_dtypes)\n        keep_these &= ~self.dtypes.isin(excluded_dtypes)\n    return self.iloc[:, keep_these.values]",
                            "def insert(self, loc, column, value, allow_duplicates=False):\n    \"\"\"\n    Insert column into DataFrame at specified location.\n\n    Raises a ValueError if `column` is already contained in the DataFrame,\n    unless `allow_duplicates` is set to True.\n\n    Parameters\n    ----------\n    loc : int\n        Insertion index. Must verify 0 <= loc <= len(columns).\n    column : str, number, or hashable object\n        Label of the inserted column.\n    value : int, Series, or array-like\n    allow_duplicates : bool, optional\n    \"\"\"\n    self._ensure_valid_index(value)\n    value = self._sanitize_column(column, value, broadcast=False)\n    self._data.insert(loc, column, value, allow_duplicates=allow_duplicates)",
                            "def assign(self, **kwargs):\n    \"\"\"\n    Assign new columns to a DataFrame.\n\n    Returns a new object with all original columns in addition to new ones.\n    Existing columns that are re-assigned will be overwritten.\n\n    Parameters\n    ----------\n    **kwargs : dict of {str: callable or Series}\n        The column names are keywords. If the values are\n        callable, they are computed on the DataFrame and\n        assigned to the new columns. The callable must not\n        change input DataFrame (though pandas doesn't check it).\n        If the values are not callable, (e.g. a Series, scalar, or array),\n        they are simply assigned.\n\n    Returns\n    -------\n    DataFrame\n        A new DataFrame with the new columns in addition to\n        all the existing columns.\n\n    Notes\n    -----\n    Assigning multiple columns within the same ``assign`` is possible.\n    Later items in '\\\\*\\\\*kwargs' may refer to newly created or modified\n    columns in 'df'; items are computed and assigned into 'df' in order.\n\n    .. versionchanged:: 0.23.0\n\n       Keyword argument order is maintained.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'temp_c': [17.0, 25.0]},\n    ...                   index=['Portland', 'Berkeley'])\n    >>> df\n              temp_c\n    Portland    17.0\n    Berkeley    25.0\n\n    Where the value is a callable, evaluated on `df`:\n\n    >>> df.assign(temp_f=lambda x: x.temp_c * 9 / 5 + 32)\n              temp_c  temp_f\n    Portland    17.0    62.6\n    Berkeley    25.0    77.0\n\n    Alternatively, the same behavior can be achieved by directly\n    referencing an existing Series or sequence:\n\n    >>> df.assign(temp_f=df['temp_c'] * 9 / 5 + 32)\n              temp_c  temp_f\n    Portland    17.0    62.6\n    Berkeley    25.0    77.0\n\n    You can create multiple columns within the same assign where one\n    of the columns depends on another one defined within the same assign:\n\n    >>> df.assign(temp_f=lambda x: x['temp_c'] * 9 / 5 + 32,\n    ...           temp_k=lambda x: (x['temp_f'] +  459.67) * 5 / 9)\n              temp_c  temp_f  temp_k\n    Portland    17.0    62.6  290.15\n    Berkeley    25.0    77.0  298.15\n    \"\"\"\n    data = self.copy()\n    for k, v in kwargs.items():\n        data[k] = com.apply_if_callable(v, data)\n    return data",
                            "def _sanitize_column(self, key, value, broadcast=True):\n    \"\"\"\n    Ensures new columns (which go into the BlockManager as new blocks) are\n    always copied and converted into an array.\n\n    Parameters\n    ----------\n    key : object\n    value : scalar, Series, or array-like\n    broadcast : bool, default True\n        If ``key`` matches multiple duplicate column names in the\n        DataFrame, this parameter indicates whether ``value`` should be\n        tiled so that the returned array contains a (duplicated) column for\n        each occurrence of the key. If False, ``value`` will not be tiled.\n\n    Returns\n    -------\n    numpy.ndarray\n    \"\"\"\n\n    def reindexer(value):\n        if value.index.equals(self.index) or not len(self.index):\n            value = value._values.copy()\n        else:\n            try:\n                value = value.reindex(self.index)._values\n            except ValueError as err:\n                if not value.index.is_unique:\n                    raise err\n                raise TypeError('incompatible index of inserted column with frame index')\n        return value\n    if isinstance(value, Series):\n        value = reindexer(value)\n    elif isinstance(value, DataFrame):\n        if isinstance(self.columns, ABCMultiIndex) and key in self.columns:\n            loc = self.columns.get_loc(key)\n            if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                cols = maybe_droplevels(self.columns[loc], key)\n                if len(cols) and (not cols.equals(value.columns)):\n                    value = value.reindex(cols, axis=1)\n        value = reindexer(value).T\n    elif isinstance(value, ExtensionArray):\n        value = value.copy()\n        value = sanitize_index(value, self.index, copy=False)\n    elif isinstance(value, Index) or is_sequence(value):\n        value = sanitize_index(value, self.index, copy=False)\n        if not isinstance(value, (np.ndarray, Index)):\n            if isinstance(value, list) and len(value) > 0:\n                value = maybe_convert_platform(value)\n            else:\n                value = com.asarray_tuplesafe(value)\n        elif value.ndim == 2:\n            value = value.copy().T\n        elif isinstance(value, Index):\n            value = value.copy(deep=True)\n        else:\n            value = value.copy()\n        if is_object_dtype(value.dtype):\n            value = maybe_infer_to_datetimelike(value)\n    else:\n        infer_dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n        value = cast_scalar_to_array(len(self.index), value)\n        value = maybe_cast_to_datetime(value, infer_dtype)\n    if is_extension_array_dtype(value):\n        return value\n    if broadcast and key in self.columns and (value.ndim == 1):\n        if not self.columns.is_unique or isinstance(self.columns, ABCMultiIndex):\n            existing_piece = self[key]\n            if isinstance(existing_piece, DataFrame):\n                value = np.tile(value, (len(existing_piece.columns), 1))\n    return np.atleast_2d(np.asarray(value))",
                            "@property\ndef _series(self):\n    return {item: Series(self._data.iget(idx), index=self.index, name=item) for idx, item in enumerate(self.columns)}",
                            "def lookup(self, row_labels, col_labels):\n    \"\"\"\n    Label-based \"fancy indexing\" function for DataFrame.\n\n    Given equal-length arrays of row and column labels, return an\n    array of the values corresponding to each (row, col) pair.\n\n    Parameters\n    ----------\n    row_labels : sequence\n        The row labels to use for lookup.\n    col_labels : sequence\n        The column labels to use for lookup.\n\n    Returns\n    -------\n    numpy.ndarray\n\n    Examples\n    --------\n    values : ndarray\n        The found values\n    \"\"\"\n    n = len(row_labels)\n    if n != len(col_labels):\n        raise ValueError('Row labels must have same size as column labels')\n    thresh = 1000\n    if not self._is_mixed_type or n > thresh:\n        values = self.values\n        ridx = self.index.get_indexer(row_labels)\n        cidx = self.columns.get_indexer(col_labels)\n        if (ridx == -1).any():\n            raise KeyError('One or more row labels was not found')\n        if (cidx == -1).any():\n            raise KeyError('One or more column labels was not found')\n        flat_index = ridx * len(self.columns) + cidx\n        result = values.flat[flat_index]\n    else:\n        result = np.empty(n, dtype='O')\n        for i, (r, c) in enumerate(zip(row_labels, col_labels)):\n            result[i] = self._get_value(r, c)\n    if is_object_dtype(result):\n        result = lib.maybe_convert_objects(result)\n    return result",
                            "def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy):\n    frame = self\n    columns = axes['columns']\n    if columns is not None:\n        frame = frame._reindex_columns(columns, method, copy, level, fill_value, limit, tolerance)\n    index = axes['index']\n    if index is not None:\n        frame = frame._reindex_index(index, method, copy, level, fill_value, limit, tolerance)\n    return frame",
                            "def _reindex_index(self, new_index, method, copy, level, fill_value=np.nan, limit=None, tolerance=None):\n    new_index, indexer = self.index.reindex(new_index, method=method, level=level, limit=limit, tolerance=tolerance)\n    return self._reindex_with_indexers({0: [new_index, indexer]}, copy=copy, fill_value=fill_value, allow_dups=False)",
                            "def _reindex_columns(self, new_columns, method, copy, level, fill_value=None, limit=None, tolerance=None):\n    new_columns, indexer = self.columns.reindex(new_columns, method=method, level=level, limit=limit, tolerance=tolerance)\n    return self._reindex_with_indexers({1: [new_columns, indexer]}, copy=copy, fill_value=fill_value, allow_dups=False)",
                            "def _reindex_multi(self, axes, copy, fill_value):\n    \"\"\"\n    We are guaranteed non-Nones in the axes.\n    \"\"\"\n    new_index, row_indexer = self.index.reindex(axes['index'])\n    new_columns, col_indexer = self.columns.reindex(axes['columns'])\n    if row_indexer is not None and col_indexer is not None:\n        indexer = (row_indexer, col_indexer)\n        new_values = algorithms.take_2d_multi(self.values, indexer, fill_value=fill_value)\n        return self._constructor(new_values, index=new_index, columns=new_columns)\n    else:\n        return self._reindex_with_indexers({0: [new_index, row_indexer], 1: [new_columns, col_indexer]}, copy=copy, fill_value=fill_value)",
                            "@Appender(_shared_docs['align'] % _shared_doc_kwargs)\ndef align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None):\n    return super().align(other, join=join, axis=axis, level=level, copy=copy, fill_value=fill_value, method=method, limit=limit, fill_axis=fill_axis, broadcast_axis=broadcast_axis)",
                            "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.reindex.__doc__)\n@rewrite_axis_style_signature('labels', [('method', None), ('copy', True), ('level', None), ('fill_value', np.nan), ('limit', None), ('tolerance', None)])\ndef reindex(self, *args, **kwargs):\n    axes = validate_axis_style_args(self, args, kwargs, 'labels', 'reindex')\n    kwargs.update(axes)\n    kwargs.pop('axis', None)\n    kwargs.pop('labels', None)\n    return super().reindex(**kwargs)",
                            "def drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise'):\n    \"\"\"\n    Drop specified labels from rows or columns.\n\n    Remove rows or columns by specifying label names and corresponding\n    axis, or by specifying directly index or column names. When using a\n    multi-index, labels on different levels can be removed by specifying\n    the level.\n\n    Parameters\n    ----------\n    labels : single label or list-like\n        Index or column labels to drop.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Whether to drop labels from the index (0 or 'index') or\n        columns (1 or 'columns').\n    index : single label or list-like\n        Alternative to specifying axis (``labels, axis=0``\n        is equivalent to ``index=labels``).\n\n        .. versionadded:: 0.21.0\n    columns : single label or list-like\n        Alternative to specifying axis (``labels, axis=1``\n        is equivalent to ``columns=labels``).\n\n        .. versionadded:: 0.21.0\n    level : int or level name, optional\n        For MultiIndex, level from which the labels will be removed.\n    inplace : bool, default False\n        If True, do operation inplace and return None.\n    errors : {'ignore', 'raise'}, default 'raise'\n        If 'ignore', suppress error and only existing labels are\n        dropped.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame without the removed index or column labels.\n\n    Raises\n    ------\n    KeyError\n        If any of the labels is not found in the selected axis.\n\n    See Also\n    --------\n    DataFrame.loc : Label-location based indexer for selection by label.\n    DataFrame.dropna : Return DataFrame with labels on given axis omitted\n        where (all or any) data are missing.\n    DataFrame.drop_duplicates : Return DataFrame with duplicate rows\n        removed, optionally only considering certain columns.\n    Series.drop : Return Series with specified index labels removed.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.arange(12).reshape(3, 4),\n    ...                   columns=['A', 'B', 'C', 'D'])\n    >>> df\n       A  B   C   D\n    0  0  1   2   3\n    1  4  5   6   7\n    2  8  9  10  11\n\n    Drop columns\n\n    >>> df.drop(['B', 'C'], axis=1)\n       A   D\n    0  0   3\n    1  4   7\n    2  8  11\n\n    >>> df.drop(columns=['B', 'C'])\n       A   D\n    0  0   3\n    1  4   7\n    2  8  11\n\n    Drop a row by index\n\n    >>> df.drop([0, 1])\n       A  B   C   D\n    2  8  9  10  11\n\n    Drop columns and/or rows of MultiIndex DataFrame\n\n    >>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n    ...                              ['speed', 'weight', 'length']],\n    ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n    ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n    >>> df = pd.DataFrame(index=midx, columns=['big', 'small'],\n    ...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n    ...                         [250, 150], [1.5, 0.8], [320, 250],\n    ...                         [1, 0.8], [0.3, 0.2]])\n    >>> df\n                    big     small\n    lama    speed   45.0    30.0\n            weight  200.0   100.0\n            length  1.5     1.0\n    cow     speed   30.0    20.0\n            weight  250.0   150.0\n            length  1.5     0.8\n    falcon  speed   320.0   250.0\n            weight  1.0     0.8\n            length  0.3     0.2\n\n    >>> df.drop(index='cow', columns='small')\n                    big\n    lama    speed   45.0\n            weight  200.0\n            length  1.5\n    falcon  speed   320.0\n            weight  1.0\n            length  0.3\n\n    >>> df.drop(index='length', level=1)\n                    big     small\n    lama    speed   45.0    30.0\n            weight  200.0   100.0\n    cow     speed   30.0    20.0\n            weight  250.0   150.0\n    falcon  speed   320.0   250.0\n            weight  1.0     0.8\n    \"\"\"\n    return super().drop(labels=labels, axis=axis, index=index, columns=columns, level=level, inplace=inplace, errors=errors)",
                            "@rewrite_axis_style_signature('mapper', [('copy', True), ('inplace', False), ('level', None), ('errors', 'ignore')])\ndef rename(self, *args, **kwargs):\n    \"\"\"\n    Alter axes labels.\n\n    Function / dict values must be unique (1-to-1). Labels not contained in\n    a dict / Series will be left as-is. Extra labels listed don't throw an\n    error.\n\n    See the :ref:`user guide <basics.rename>` for more.\n\n    Parameters\n    ----------\n    mapper : dict-like or function\n        Dict-like or functions transformations to apply to\n        that axis' values. Use either ``mapper`` and ``axis`` to\n        specify the axis to target with ``mapper``, or ``index`` and\n        ``columns``.\n    index : dict-like or function\n        Alternative to specifying axis (``mapper, axis=0``\n        is equivalent to ``index=mapper``).\n    columns : dict-like or function\n        Alternative to specifying axis (``mapper, axis=1``\n        is equivalent to ``columns=mapper``).\n    axis : int or str\n        Axis to target with ``mapper``. Can be either the axis name\n        ('index', 'columns') or number (0, 1). The default is 'index'.\n    copy : bool, default True\n        Also copy underlying data.\n    inplace : bool, default False\n        Whether to return a new DataFrame. If True then value of copy is\n        ignored.\n    level : int or level name, default None\n        In case of a MultiIndex, only rename labels in the specified\n        level.\n    errors : {'ignore', 'raise'}, default 'ignore'\n        If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n        or `columns` contains labels that are not present in the Index\n        being transformed.\n        If 'ignore', existing keys will be renamed and extra keys will be\n        ignored.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with the renamed axis labels.\n\n    Raises\n    ------\n    KeyError\n        If any of the labels is not found in the selected axis and\n        \"errors='raise'\".\n\n    See Also\n    --------\n    DataFrame.rename_axis : Set the name of the axis.\n\n    Examples\n    --------\n\n    ``DataFrame.rename`` supports two calling conventions\n\n    * ``(index=index_mapper, columns=columns_mapper, ...)``\n    * ``(mapper, axis={'index', 'columns'}, ...)``\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    Rename columns using a mapping:\n\n    >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n    >>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})\n       a  c\n    0  1  4\n    1  2  5\n    2  3  6\n\n    Rename index using a mapping:\n\n    >>> df.rename(index={0: \"x\", 1: \"y\", 2: \"z\"})\n       A  B\n    x  1  4\n    y  2  5\n    z  3  6\n\n    Cast index labels to a different type:\n\n    >>> df.index\n    RangeIndex(start=0, stop=3, step=1)\n    >>> df.rename(index=str).index\n    Index(['0', '1', '2'], dtype='object')\n\n    >>> df.rename(columns={\"A\": \"a\", \"B\": \"b\", \"C\": \"c\"}, errors=\"raise\")\n    Traceback (most recent call last):\n    KeyError: ['C'] not found in axis\n\n    Using axis-style parameters\n\n    >>> df.rename(str.lower, axis='columns')\n       a  b\n    0  1  4\n    1  2  5\n    2  3  6\n\n    >>> df.rename({1: 2, 2: 4}, axis='index')\n       A  B\n    0  1  4\n    2  2  5\n    4  3  6\n    \"\"\"\n    axes = validate_axis_style_args(self, args, kwargs, 'mapper', 'rename')\n    kwargs.update(axes)\n    kwargs.pop('axis', None)\n    kwargs.pop('mapper', None)\n    return super().rename(**kwargs)",
                            "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.fillna.__doc__)\ndef fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None, **kwargs):\n    return super().fillna(value=value, method=method, axis=axis, inplace=inplace, limit=limit, downcast=downcast, **kwargs)",
                            "@Appender(_shared_docs['replace'] % _shared_doc_kwargs)\ndef replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad'):\n    return super().replace(to_replace=to_replace, value=value, inplace=inplace, limit=limit, regex=regex, method=method)",
                            "@Appender(_shared_docs['shift'] % _shared_doc_kwargs)\ndef shift(self, periods=1, freq=None, axis=0, fill_value=None):\n    return super().shift(periods=periods, freq=freq, axis=axis, fill_value=fill_value)",
                            "def set_index(self, keys, drop=True, append=False, inplace=False, verify_integrity=False):\n    \"\"\"\n    Set the DataFrame index using existing columns.\n\n    Set the DataFrame index (row labels) using one or more existing\n    columns or arrays (of the correct length). The index can replace the\n    existing index or expand on it.\n\n    Parameters\n    ----------\n    keys : label or array-like or list of labels/arrays\n        This parameter can be either a single column key, a single array of\n        the same length as the calling DataFrame, or a list containing an\n        arbitrary combination of column keys and arrays. Here, \"array\"\n        encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and\n        instances of :class:`~collections.abc.Iterator`.\n    drop : bool, default True\n        Delete columns to be used as the new index.\n    append : bool, default False\n        Whether to append columns to existing index.\n    inplace : bool, default False\n        Modify the DataFrame in place (do not create a new object).\n    verify_integrity : bool, default False\n        Check the new index for duplicates. Otherwise defer the check until\n        necessary. Setting to False will improve the performance of this\n        method.\n\n    Returns\n    -------\n    DataFrame\n        Changed row labels.\n\n    See Also\n    --------\n    DataFrame.reset_index : Opposite of set_index.\n    DataFrame.reindex : Change to new indices or expand indices.\n    DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n    ...                    'year': [2012, 2014, 2013, 2014],\n    ...                    'sale': [55, 40, 84, 31]})\n    >>> df\n       month  year  sale\n    0      1  2012    55\n    1      4  2014    40\n    2      7  2013    84\n    3     10  2014    31\n\n    Set the index to become the 'month' column:\n\n    >>> df.set_index('month')\n           year  sale\n    month\n    1      2012    55\n    4      2014    40\n    7      2013    84\n    10     2014    31\n\n    Create a MultiIndex using columns 'year' and 'month':\n\n    >>> df.set_index(['year', 'month'])\n                sale\n    year  month\n    2012  1     55\n    2014  4     40\n    2013  7     84\n    2014  10    31\n\n    Create a MultiIndex using an Index and a column:\n\n    >>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])\n             month  sale\n       year\n    1  2012  1      55\n    2  2014  4      40\n    3  2013  7      84\n    4  2014  10     31\n\n    Create a MultiIndex using two Series:\n\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> df.set_index([s, s**2])\n          month  year  sale\n    1 1       1  2012    55\n    2 4       4  2014    40\n    3 9       7  2013    84\n    4 16     10  2014    31\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if not isinstance(keys, list):\n        keys = [keys]\n    err_msg = 'The parameter \"keys\" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays.'\n    missing = []\n    for col in keys:\n        if isinstance(col, (ABCIndexClass, ABCSeries, np.ndarray, list, abc.Iterator)):\n            if getattr(col, 'ndim', 1) != 1:\n                raise ValueError(err_msg)\n        else:\n            try:\n                found = col in self.columns\n            except TypeError:\n                raise TypeError(f'{err_msg}. Received column of type {type(col)}')\n            else:\n                if not found:\n                    missing.append(col)\n    if missing:\n        raise KeyError(f'None of {missing} are in the columns')\n    if inplace:\n        frame = self\n    else:\n        frame = self.copy()\n    arrays = []\n    names = []\n    if append:\n        names = list(self.index.names)\n        if isinstance(self.index, ABCMultiIndex):\n            for i in range(self.index.nlevels):\n                arrays.append(self.index._get_level_values(i))\n        else:\n            arrays.append(self.index)\n    to_remove = []\n    for col in keys:\n        if isinstance(col, ABCMultiIndex):\n            for n in range(col.nlevels):\n                arrays.append(col._get_level_values(n))\n            names.extend(col.names)\n        elif isinstance(col, (ABCIndexClass, ABCSeries)):\n            arrays.append(col)\n            names.append(col.name)\n        elif isinstance(col, (list, np.ndarray)):\n            arrays.append(col)\n            names.append(None)\n        elif isinstance(col, abc.Iterator):\n            arrays.append(list(col))\n            names.append(None)\n        else:\n            arrays.append(frame[col]._values)\n            names.append(col)\n            if drop:\n                to_remove.append(col)\n        if len(arrays[-1]) != len(self):\n            raise ValueError(f'Length mismatch: Expected {len(self)} rows, received array of length {len(arrays[-1])}')\n    index = ensure_index_from_sequences(arrays, names)\n    if verify_integrity and (not index.is_unique):\n        duplicates = index[index.duplicated()].unique()\n        raise ValueError(f'Index has duplicate keys: {duplicates}')\n    for c in set(to_remove):\n        del frame[c]\n    index._cleanup()\n    frame.index = index\n    if not inplace:\n        return frame",
                            "def reset_index(self, level: Optional[Union[Hashable, Sequence[Hashable]]]=None, drop: bool=False, inplace: bool=False, col_level: Hashable=0, col_fill: Optional[Hashable]='') -> Optional['DataFrame']:\n    \"\"\"\n    Reset the index, or a level of it.\n\n    Reset the index of the DataFrame, and use the default one instead.\n    If the DataFrame has a MultiIndex, this method can remove one or more\n    levels.\n\n    Parameters\n    ----------\n    level : int, str, tuple, or list, default None\n        Only remove the given levels from the index. Removes all levels by\n        default.\n    drop : bool, default False\n        Do not try to insert index into dataframe columns. This resets\n        the index to the default integer index.\n    inplace : bool, default False\n        Modify the DataFrame in place (do not create a new object).\n    col_level : int or str, default 0\n        If the columns have multiple levels, determines which level the\n        labels are inserted into. By default it is inserted into the first\n        level.\n    col_fill : object, default ''\n        If the columns have multiple levels, determines how the other\n        levels are named. If None then the index name is repeated.\n\n    Returns\n    -------\n    DataFrame or None\n        DataFrame with the new index or None if ``inplace=True``.\n\n    See Also\n    --------\n    DataFrame.set_index : Opposite of reset_index.\n    DataFrame.reindex : Change to new indices or expand indices.\n    DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('bird', 389.0),\n    ...                    ('bird', 24.0),\n    ...                    ('mammal', 80.5),\n    ...                    ('mammal', np.nan)],\n    ...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n    ...                   columns=('class', 'max_speed'))\n    >>> df\n             class  max_speed\n    falcon    bird      389.0\n    parrot    bird       24.0\n    lion    mammal       80.5\n    monkey  mammal        NaN\n\n    When we reset the index, the old index is added as a column, and a\n    new sequential index is used:\n\n    >>> df.reset_index()\n        index   class  max_speed\n    0  falcon    bird      389.0\n    1  parrot    bird       24.0\n    2    lion  mammal       80.5\n    3  monkey  mammal        NaN\n\n    We can use the `drop` parameter to avoid the old index being added as\n    a column:\n\n    >>> df.reset_index(drop=True)\n        class  max_speed\n    0    bird      389.0\n    1    bird       24.0\n    2  mammal       80.5\n    3  mammal        NaN\n\n    You can also use `reset_index` with `MultiIndex`.\n\n    >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n    ...                                    ('bird', 'parrot'),\n    ...                                    ('mammal', 'lion'),\n    ...                                    ('mammal', 'monkey')],\n    ...                                   names=['class', 'name'])\n    >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n    ...                                      ('species', 'type')])\n    >>> df = pd.DataFrame([(389.0, 'fly'),\n    ...                    ( 24.0, 'fly'),\n    ...                    ( 80.5, 'run'),\n    ...                    (np.nan, 'jump')],\n    ...                   index=index,\n    ...                   columns=columns)\n    >>> df\n                   speed species\n                     max    type\n    class  name\n    bird   falcon  389.0     fly\n           parrot   24.0     fly\n    mammal lion     80.5     run\n           monkey    NaN    jump\n\n    If the index has multiple levels, we can reset a subset of them:\n\n    >>> df.reset_index(level='class')\n             class  speed species\n                      max    type\n    name\n    falcon    bird  389.0     fly\n    parrot    bird   24.0     fly\n    lion    mammal   80.5     run\n    monkey  mammal    NaN    jump\n\n    If we are not dropping the index, by default, it is placed in the top\n    level. We can place it in another level:\n\n    >>> df.reset_index(level='class', col_level=1)\n                    speed species\n             class    max    type\n    name\n    falcon    bird  389.0     fly\n    parrot    bird   24.0     fly\n    lion    mammal   80.5     run\n    monkey  mammal    NaN    jump\n\n    When the index is inserted under another level, we can specify under\n    which one with the parameter `col_fill`:\n\n    >>> df.reset_index(level='class', col_level=1, col_fill='species')\n                  species  speed species\n                    class    max    type\n    name\n    falcon           bird  389.0     fly\n    parrot           bird   24.0     fly\n    lion           mammal   80.5     run\n    monkey         mammal    NaN    jump\n\n    If we specify a nonexistent level for `col_fill`, it is created:\n\n    >>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                    genus  speed species\n                    class    max    type\n    name\n    falcon           bird  389.0     fly\n    parrot           bird   24.0     fly\n    lion           mammal   80.5     run\n    monkey         mammal    NaN    jump\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if inplace:\n        new_obj = self\n    else:\n        new_obj = self.copy()\n\n    def _maybe_casted_values(index, labels=None):\n        values = index._values\n        if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n            if values.dtype == np.object_:\n                values = lib.maybe_convert_objects(values)\n        if labels is not None:\n            mask = labels == -1\n            if mask.all():\n                values = np.empty(len(mask))\n                values.fill(np.nan)\n            else:\n                values = values.take(labels)\n                values_type = type(values)\n                values_dtype = values.dtype\n                if issubclass(values_type, DatetimeLikeArray):\n                    values = values._data\n                if mask.any():\n                    values, _ = maybe_upcast_putmask(values, mask, np.nan)\n                if issubclass(values_type, DatetimeLikeArray):\n                    values = values_type(values, dtype=values_dtype)\n        return values\n    new_index = ibase.default_index(len(new_obj))\n    if level is not None:\n        if not isinstance(level, (tuple, list)):\n            level = [level]\n        level = [self.index._get_level_number(lev) for lev in level]\n        if len(level) < self.index.nlevels:\n            new_index = self.index.droplevel(level)\n    if not drop:\n        to_insert: Iterable[Tuple[Any, Optional[Any]]]\n        if isinstance(self.index, ABCMultiIndex):\n            names = [n if n is not None else f'level_{i}' for i, n in enumerate(self.index.names)]\n            to_insert = zip(self.index.levels, self.index.codes)\n        else:\n            default = 'index' if 'index' not in self else 'level_0'\n            names = [default] if self.index.name is None else [self.index.name]\n            to_insert = ((self.index, None),)\n        multi_col = isinstance(self.columns, ABCMultiIndex)\n        for i, (lev, lab) in reversed(list(enumerate(to_insert))):\n            if not (level is None or i in level):\n                continue\n            name = names[i]\n            if multi_col:\n                col_name = list(name) if isinstance(name, tuple) else [name]\n                if col_fill is None:\n                    if len(col_name) not in (1, self.columns.nlevels):\n                        raise ValueError(f'col_fill=None is incompatible with incomplete column name {name}')\n                    col_fill = col_name[0]\n                lev_num = self.columns._get_level_number(col_level)\n                name_lst = [col_fill] * lev_num + col_name\n                missing = self.columns.nlevels - len(name_lst)\n                name_lst += [col_fill] * missing\n                name = tuple(name_lst)\n            level_values = _maybe_casted_values(lev, lab)\n            new_obj.insert(0, name, level_values)\n    new_obj.index = new_index\n    if not inplace:\n        return new_obj\n    return None",
                            "@Appender(_shared_docs['isna'] % _shared_doc_kwargs)\ndef isna(self):\n    return super().isna()",
                            "@Appender(_shared_docs['isna'] % _shared_doc_kwargs)\ndef isnull(self):\n    return super().isnull()",
                            "@Appender(_shared_docs['notna'] % _shared_doc_kwargs)\ndef notna(self):\n    return super().notna()",
                            "@Appender(_shared_docs['notna'] % _shared_doc_kwargs)\ndef notnull(self):\n    return super().notnull()",
                            "def dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False):\n    \"\"\"\n    Remove missing values.\n\n    See the :ref:`User Guide <missing_data>` for more on which values are\n    considered missing, and how to work with missing data.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Determine if rows or columns which contain missing values are\n        removed.\n\n        * 0, or 'index' : Drop rows which contain missing values.\n        * 1, or 'columns' : Drop columns which contain missing value.\n\n        .. versionchanged:: 1.0.0\n\n           Pass tuple or list to drop on multiple axes.\n           Only a single axis is allowed.\n\n    how : {'any', 'all'}, default 'any'\n        Determine if row or column is removed from DataFrame, when we have\n        at least one NA or all NA.\n\n        * 'any' : If any NA values are present, drop that row or column.\n        * 'all' : If all values are NA, drop that row or column.\n\n    thresh : int, optional\n        Require that many non-NA values.\n    subset : array-like, optional\n        Labels along other axis to consider, e.g. if you are dropping rows\n        these would be a list of columns to include.\n    inplace : bool, default False\n        If True, do operation inplace and return None.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with NA entries dropped from it.\n\n    See Also\n    --------\n    DataFrame.isna: Indicate missing values.\n    DataFrame.notna : Indicate existing (non-missing) values.\n    DataFrame.fillna : Replace missing values.\n    Series.dropna : Drop missing values.\n    Index.dropna : Drop missing indices.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n    ...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n    ...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n    ...                             pd.NaT]})\n    >>> df\n           name        toy       born\n    0    Alfred        NaN        NaT\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Drop the rows where at least one element is missing.\n\n    >>> df.dropna()\n         name        toy       born\n    1  Batman  Batmobile 1940-04-25\n\n    Drop the columns where at least one element is missing.\n\n    >>> df.dropna(axis='columns')\n           name\n    0    Alfred\n    1    Batman\n    2  Catwoman\n\n    Drop the rows where all elements are missing.\n\n    >>> df.dropna(how='all')\n           name        toy       born\n    0    Alfred        NaN        NaT\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Keep only the rows with at least 2 non-NA values.\n\n    >>> df.dropna(thresh=2)\n           name        toy       born\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Define in which columns to look for missing values.\n\n    >>> df.dropna(subset=['name', 'born'])\n           name        toy       born\n    1    Batman  Batmobile 1940-04-25\n\n    Keep the DataFrame with valid entries in the same variable.\n\n    >>> df.dropna(inplace=True)\n    >>> df\n         name        toy       born\n    1  Batman  Batmobile 1940-04-25\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if isinstance(axis, (tuple, list)):\n        raise TypeError('supplying multiple axes to axis is no longer supported.')\n    axis = self._get_axis_number(axis)\n    agg_axis = 1 - axis\n    agg_obj = self\n    if subset is not None:\n        ax = self._get_axis(agg_axis)\n        indices = ax.get_indexer_for(subset)\n        check = indices == -1\n        if check.any():\n            raise KeyError(list(np.compress(check, subset)))\n        agg_obj = self.take(indices, axis=agg_axis)\n    count = agg_obj.count(axis=agg_axis)\n    if thresh is not None:\n        mask = count >= thresh\n    elif how == 'any':\n        mask = count == len(agg_obj._get_axis(agg_axis))\n    elif how == 'all':\n        mask = count > 0\n    elif how is not None:\n        raise ValueError(f'invalid how option: {how}')\n    else:\n        raise TypeError('must specify how or thresh')\n    result = self.loc(axis=axis)[mask]\n    if inplace:\n        self._update_inplace(result)\n    else:\n        return result",
                            "def drop_duplicates(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first', inplace: bool=False) -> Optional['DataFrame']:\n    \"\"\"\n    Return DataFrame with duplicate rows removed.\n\n    Considering certain columns is optional. Indexes, including time indexes\n    are ignored.\n\n    Parameters\n    ----------\n    subset : column label or sequence of labels, optional\n        Only consider certain columns for identifying duplicates, by\n        default use all of the columns.\n    keep : {'first', 'last', False}, default 'first'\n        Determines which duplicates (if any) to keep.\n        - ``first`` : Drop duplicates except for the first occurrence.\n        - ``last`` : Drop duplicates except for the last occurrence.\n        - False : Drop all duplicates.\n    inplace : bool, default False\n        Whether to drop duplicates in place or to return a copy.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with duplicates removed or None if ``inplace=True``.\n    \"\"\"\n    if self.empty:\n        return self.copy()\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    duplicated = self.duplicated(subset, keep=keep)\n    if inplace:\n        inds, = (-duplicated)._ndarray_values.nonzero()\n        new_data = self._data.take(inds)\n        self._update_inplace(new_data)\n    else:\n        return self[-duplicated]\n    return None",
                            "def duplicated(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first') -> 'Series':\n    \"\"\"\n    Return boolean Series denoting duplicate rows.\n\n    Considering certain columns is optional.\n\n    Parameters\n    ----------\n    subset : column label or sequence of labels, optional\n        Only consider certain columns for identifying duplicates, by\n        default use all of the columns.\n    keep : {'first', 'last', False}, default 'first'\n        Determines which duplicates (if any) to mark.\n\n        - ``first`` : Mark duplicates as ``True`` except for the first occurrence.\n        - ``last`` : Mark duplicates as ``True`` except for the last occurrence.\n        - False : Mark all duplicates as ``True``.\n\n    Returns\n    -------\n    Series\n    \"\"\"\n    from pandas.core.sorting import get_group_index\n    from pandas._libs.hashtable import duplicated_int64, _SIZE_HINT_LIMIT\n    if self.empty:\n        return Series(dtype=bool)\n\n    def f(vals):\n        labels, shape = algorithms.factorize(vals, size_hint=min(len(self), _SIZE_HINT_LIMIT))\n        return (labels.astype('i8', copy=False), len(shape))\n    if subset is None:\n        subset = self.columns\n    elif not np.iterable(subset) or isinstance(subset, str) or (isinstance(subset, tuple) and subset in self.columns):\n        subset = (subset,)\n    subset = cast(Iterable, subset)\n    diff = Index(subset).difference(self.columns)\n    if not diff.empty:\n        raise KeyError(diff)\n    vals = (col.values for name, col in self.items() if name in subset)\n    labels, shape = map(list, zip(*map(f, vals)))\n    ids = get_group_index(labels, shape, sort=False, xnull=False)\n    return Series(duplicated_int64(ids, keep), index=self.index)",
                            "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.sort_values.__doc__)\ndef sort_values(self, by, axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last'):\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    axis = self._get_axis_number(axis)\n    if not isinstance(by, list):\n        by = [by]\n    if is_sequence(ascending) and len(by) != len(ascending):\n        raise ValueError(f'Length of ascending ({len(ascending)}) != length of by ({len(by)})')\n    if len(by) > 1:\n        from pandas.core.sorting import lexsort_indexer\n        keys = [self._get_label_or_level_values(x, axis=axis) for x in by]\n        indexer = lexsort_indexer(keys, orders=ascending, na_position=na_position)\n        indexer = ensure_platform_int(indexer)\n    else:\n        from pandas.core.sorting import nargsort\n        by = by[0]\n        k = self._get_label_or_level_values(by, axis=axis)\n        if isinstance(ascending, (tuple, list)):\n            ascending = ascending[0]\n        indexer = nargsort(k, kind=kind, ascending=ascending, na_position=na_position)\n    new_data = self._data.take(indexer, axis=self._get_block_manager_axis(axis), verify=False)\n    if inplace:\n        return self._update_inplace(new_data)\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                            "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.sort_index.__doc__)\ndef sort_index(self, axis=0, level=None, ascending=True, inplace=False, kind='quicksort', na_position='last', sort_remaining=True):\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    axis = self._get_axis_number(axis)\n    labels = self._get_axis(axis)\n    labels = labels._sort_levels_monotonic()\n    if level is not None:\n        new_axis, indexer = labels.sortlevel(level, ascending=ascending, sort_remaining=sort_remaining)\n    elif isinstance(labels, ABCMultiIndex):\n        from pandas.core.sorting import lexsort_indexer\n        indexer = lexsort_indexer(labels._get_codes_for_sorting(), orders=ascending, na_position=na_position)\n    else:\n        from pandas.core.sorting import nargsort\n        if ascending and labels.is_monotonic_increasing or (not ascending and labels.is_monotonic_decreasing):\n            if inplace:\n                return\n            else:\n                return self.copy()\n        indexer = nargsort(labels, kind=kind, ascending=ascending, na_position=na_position)\n    baxis = self._get_block_manager_axis(axis)\n    new_data = self._data.take(indexer, axis=baxis, verify=False)\n    new_data.axes[baxis] = new_data.axes[baxis]._sort_levels_monotonic()\n    if inplace:\n        return self._update_inplace(new_data)\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                            "def nlargest(self, n, columns, keep='first'):\n    \"\"\"\n    Return the first `n` rows ordered by `columns` in descending order.\n\n    Return the first `n` rows with the largest values in `columns`, in\n    descending order. The columns that are not specified are returned as\n    well, but not used for ordering.\n\n    This method is equivalent to\n    ``df.sort_values(columns, ascending=False).head(n)``, but more\n    performant.\n\n    Parameters\n    ----------\n    n : int\n        Number of rows to return.\n    columns : label or list of labels\n        Column label(s) to order by.\n    keep : {'first', 'last', 'all'}, default 'first'\n        Where there are duplicate values:\n\n        - `first` : prioritize the first occurrence(s)\n        - `last` : prioritize the last occurrence(s)\n        - ``all`` : do not drop any duplicates, even it means\n                    selecting more than `n` items.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n        The first `n` rows ordered by the given columns in descending\n        order.\n\n    See Also\n    --------\n    DataFrame.nsmallest : Return the first `n` rows ordered by `columns` in\n        ascending order.\n    DataFrame.sort_values : Sort DataFrame by the values.\n    DataFrame.head : Return the first `n` rows without re-ordering.\n\n    Notes\n    -----\n    This function cannot be used with all column types. For example, when\n    specifying columns with `object` or `category` dtypes, ``TypeError`` is\n    raised.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n    ...                                   434000, 434000, 337000, 11300,\n    ...                                   11300, 11300],\n    ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n    ...                            17036, 182, 38, 311],\n    ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n    ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n    ...                   index=[\"Italy\", \"France\", \"Malta\",\n    ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n    ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n    >>> df\n              population      GDP alpha-2\n    Italy       59000000  1937894      IT\n    France      65000000  2583560      FR\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n    Iceland       337000    17036      IS\n    Nauru          11300      182      NR\n    Tuvalu         11300       38      TV\n    Anguilla       11300      311      AI\n\n    In the following example, we will use ``nlargest`` to select the three\n    rows having the largest values in column \"population\".\n\n    >>> df.nlargest(3, 'population')\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Malta       434000    12011      MT\n\n    When using ``keep='last'``, ties are resolved in reverse order:\n\n    >>> df.nlargest(3, 'population', keep='last')\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Brunei      434000    12128      BN\n\n    When using ``keep='all'``, all duplicate items are maintained:\n\n    >>> df.nlargest(3, 'population', keep='all')\n              population      GDP alpha-2\n    France      65000000  2583560      FR\n    Italy       59000000  1937894      IT\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n\n    To order by the largest values in column \"population\" and then \"GDP\",\n    we can specify multiple columns like in the next example.\n\n    >>> df.nlargest(3, ['population', 'GDP'])\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Brunei      434000    12128      BN\n    \"\"\"\n    return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns).nlargest()",
                            "def nsmallest(self, n, columns, keep='first'):\n    \"\"\"\n    Return the first `n` rows ordered by `columns` in ascending order.\n\n    Return the first `n` rows with the smallest values in `columns`, in\n    ascending order. The columns that are not specified are returned as\n    well, but not used for ordering.\n\n    This method is equivalent to\n    ``df.sort_values(columns, ascending=True).head(n)``, but more\n    performant.\n\n    Parameters\n    ----------\n    n : int\n        Number of items to retrieve.\n    columns : list or str\n        Column name or names to order by.\n    keep : {'first', 'last', 'all'}, default 'first'\n        Where there are duplicate values:\n\n        - ``first`` : take the first occurrence.\n        - ``last`` : take the last occurrence.\n        - ``all`` : do not drop any duplicates, even it means\n          selecting more than `n` items.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.nlargest : Return the first `n` rows ordered by `columns` in\n        descending order.\n    DataFrame.sort_values : Sort DataFrame by the values.\n    DataFrame.head : Return the first `n` rows without re-ordering.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n    ...                                   434000, 434000, 337000, 11300,\n    ...                                   11300, 11300],\n    ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n    ...                            17036, 182, 38, 311],\n    ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n    ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n    ...                   index=[\"Italy\", \"France\", \"Malta\",\n    ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n    ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n    >>> df\n              population      GDP alpha-2\n    Italy       59000000  1937894      IT\n    France      65000000  2583560      FR\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n    Iceland       337000    17036      IS\n    Nauru          11300      182      NR\n    Tuvalu         11300       38      TV\n    Anguilla       11300      311      AI\n\n    In the following example, we will use ``nsmallest`` to select the\n    three rows having the smallest values in column \"a\".\n\n    >>> df.nsmallest(3, 'population')\n              population  GDP alpha-2\n    Nauru          11300  182      NR\n    Tuvalu         11300   38      TV\n    Anguilla       11300  311      AI\n\n    When using ``keep='last'``, ties are resolved in reverse order:\n\n    >>> df.nsmallest(3, 'population', keep='last')\n              population  GDP alpha-2\n    Anguilla       11300  311      AI\n    Tuvalu         11300   38      TV\n    Nauru          11300  182      NR\n\n    When using ``keep='all'``, all duplicate items are maintained:\n\n    >>> df.nsmallest(3, 'population', keep='all')\n              population  GDP alpha-2\n    Nauru          11300  182      NR\n    Tuvalu         11300   38      TV\n    Anguilla       11300  311      AI\n\n    To order by the largest values in column \"a\" and then \"c\", we can\n    specify multiple columns like in the next example.\n\n    >>> df.nsmallest(3, ['population', 'GDP'])\n              population  GDP alpha-2\n    Tuvalu         11300   38      TV\n    Nauru          11300  182      NR\n    Anguilla       11300  311      AI\n    \"\"\"\n    return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns).nsmallest()",
                            "def swaplevel(self, i=-2, j=-1, axis=0):\n    \"\"\"\n    Swap levels i and j in a MultiIndex on a particular axis.\n\n    Parameters\n    ----------\n    i, j : int or str\n        Levels of the indices to be swapped. Can pass level name as string.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    result = self.copy()\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        result.index = result.index.swaplevel(i, j)\n    else:\n        result.columns = result.columns.swaplevel(i, j)\n    return result",
                            "def reorder_levels(self, order, axis=0):\n    \"\"\"\n    Rearrange index levels using input order. May not drop or duplicate levels.\n\n    Parameters\n    ----------\n    order : list of int or list of str\n        List representing new level order. Reference level by number\n        (position) or by key (label).\n    axis : int\n        Where to reorder levels.\n\n    Returns\n    -------\n    type of caller (new object)\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    if not isinstance(self._get_axis(axis), ABCMultiIndex):\n        raise TypeError('Can only reorder levels on a hierarchical axis.')\n    result = self.copy()\n    if axis == 0:\n        result.index = result.index.reorder_levels(order)\n    else:\n        result.columns = result.columns.reorder_levels(order)\n    return result",
                            "def _combine_frame(self, other, func, fill_value=None, level=None):\n    this, other = self.align(other, join='outer', level=level, copy=False)\n    if fill_value is None:\n        _arith_op = func\n    else:\n\n        def _arith_op(left, right):\n            left, right = ops.fill_binop(left, right, fill_value)\n            return func(left, right)\n    if ops.should_series_dispatch(this, other, func):\n        new_data = ops.dispatch_to_series(this, other, _arith_op)\n    else:\n        with np.errstate(all='ignore'):\n            res_values = _arith_op(this.values, other.values)\n        new_data = dispatch_fill_zeros(func, this.values, other.values, res_values)\n    return this._construct_result(new_data)",
                            "def _combine_match_index(self, other, func):\n    if ops.should_series_dispatch(self, other, func):\n        new_data = ops.dispatch_to_series(self, other, func)\n    else:\n        with np.errstate(all='ignore'):\n            new_data = func(self.values.T, other.values).T\n    return new_data",
                            "def _construct_result(self, result) -> 'DataFrame':\n    \"\"\"\n    Wrap the result of an arithmetic, comparison, or logical operation.\n\n    Parameters\n    ----------\n    result : DataFrame\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    out = self._constructor(result, index=self.index, copy=False)\n    out.columns = self.columns\n    return out",
                            "def combine(self, other, func, fill_value=None, overwrite=True):\n    \"\"\"\n    Perform column-wise combine with another DataFrame.\n\n    Combines a DataFrame with `other` DataFrame using `func`\n    to element-wise combine columns. The row and column indexes of the\n    resulting DataFrame will be the union of the two.\n\n    Parameters\n    ----------\n    other : DataFrame\n        The DataFrame to merge column-wise.\n    func : function\n        Function that takes two series as inputs and return a Series or a\n        scalar. Used to merge the two dataframes column by columns.\n    fill_value : scalar value, default None\n        The value to fill NaNs with prior to passing any column to the\n        merge func.\n    overwrite : bool, default True\n        If True, columns in `self` that do not exist in `other` will be\n        overwritten with NaNs.\n\n    Returns\n    -------\n    DataFrame\n        Combination of the provided DataFrames.\n\n    See Also\n    --------\n    DataFrame.combine_first : Combine two DataFrame objects and default to\n        non-null values in frame calling the method.\n\n    Examples\n    --------\n    Combine using a simple function that chooses the smaller column.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> take_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2\n    >>> df1.combine(df2, take_smaller)\n       A  B\n    0  0  3\n    1  0  3\n\n    Example using a true element-wise combine function.\n\n    >>> df1 = pd.DataFrame({'A': [5, 0], 'B': [2, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine(df2, np.minimum)\n       A  B\n    0  1  2\n    1  0  3\n\n    Using `fill_value` fills Nones prior to passing the column to the\n    merge function.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine(df2, take_smaller, fill_value=-5)\n       A    B\n    0  0 -5.0\n    1  0  4.0\n\n    However, if the same element in both dataframes is None, that None\n    is preserved\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [None, 3]})\n    >>> df1.combine(df2, take_smaller, fill_value=-5)\n        A    B\n    0  0 -5.0\n    1  0  3.0\n\n    Example that demonstrates the use of `overwrite` and behavior when\n    the axis differ between the dataframes.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [-10, 1], }, index=[1, 2])\n    >>> df1.combine(df2, take_smaller)\n         A    B     C\n    0  NaN  NaN   NaN\n    1  NaN  3.0 -10.0\n    2  NaN  3.0   1.0\n\n    >>> df1.combine(df2, take_smaller, overwrite=False)\n         A    B     C\n    0  0.0  NaN   NaN\n    1  0.0  3.0 -10.0\n    2  NaN  3.0   1.0\n\n    Demonstrating the preference of the passed in dataframe.\n\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1], }, index=[1, 2])\n    >>> df2.combine(df1, take_smaller)\n       A    B   C\n    0  0.0  NaN NaN\n    1  0.0  3.0 NaN\n    2  NaN  3.0 NaN\n\n    >>> df2.combine(df1, take_smaller, overwrite=False)\n         A    B   C\n    0  0.0  NaN NaN\n    1  0.0  3.0 1.0\n    2  NaN  3.0 1.0\n    \"\"\"\n    other_idxlen = len(other.index)\n    this, other = self.align(other, copy=False)\n    new_index = this.index\n    if other.empty and len(new_index) == len(self.index):\n        return self.copy()\n    if self.empty and len(other) == other_idxlen:\n        return other.copy()\n    new_columns = this.columns.union(other.columns)\n    do_fill = fill_value is not None\n    result = {}\n    for col in new_columns:\n        series = this[col]\n        otherSeries = other[col]\n        this_dtype = series.dtype\n        other_dtype = otherSeries.dtype\n        this_mask = isna(series)\n        other_mask = isna(otherSeries)\n        if not overwrite and other_mask.all():\n            result[col] = this[col].copy()\n            continue\n        if do_fill:\n            series = series.copy()\n            otherSeries = otherSeries.copy()\n            series[this_mask] = fill_value\n            otherSeries[other_mask] = fill_value\n        if col not in self.columns:\n            new_dtype = other_dtype\n            try:\n                series = series.astype(new_dtype, copy=False)\n            except ValueError:\n                pass\n        else:\n            new_dtype = find_common_type([this_dtype, other_dtype])\n            if not is_dtype_equal(this_dtype, new_dtype):\n                series = series.astype(new_dtype)\n            if not is_dtype_equal(other_dtype, new_dtype):\n                otherSeries = otherSeries.astype(new_dtype)\n        arr = func(series, otherSeries)\n        arr = maybe_downcast_to_dtype(arr, this_dtype)\n        result[col] = arr\n    return self._constructor(result, index=new_index, columns=new_columns)",
                            "def combine_first(self, other):\n    \"\"\"\n    Update null elements with value in the same location in `other`.\n\n    Combine two DataFrame objects by filling null values in one DataFrame\n    with non-null values from other DataFrame. The row and column indexes\n    of the resulting DataFrame will be the union of the two.\n\n    Parameters\n    ----------\n    other : DataFrame\n        Provided DataFrame to use to fill null values.\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.combine : Perform series-wise operation on two DataFrames\n        using a given function.\n\n    Examples\n    --------\n\n    >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine_first(df2)\n         A    B\n    0  1.0  3.0\n    1  0.0  4.0\n\n    Null values still persist if the location of that null value\n    does not exist in `other`\n\n    >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [4, None]})\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1]}, index=[1, 2])\n    >>> df1.combine_first(df2)\n         A    B    C\n    0  NaN  4.0  NaN\n    1  0.0  3.0  1.0\n    2  NaN  3.0  1.0\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    def extract_values(arr):\n        if isinstance(arr, (ABCIndexClass, ABCSeries)):\n            arr = arr._values\n        if needs_i8_conversion(arr):\n            if is_extension_array_dtype(arr.dtype):\n                arr = arr.asi8\n            else:\n                arr = arr.view('i8')\n        return arr\n\n    def combiner(x, y):\n        mask = isna(x)\n        if isinstance(mask, (ABCIndexClass, ABCSeries)):\n            mask = mask._values\n        x_values = extract_values(x)\n        y_values = extract_values(y)\n        if y.name not in self.columns:\n            return y_values\n        return expressions.where(mask, y_values, x_values)\n    return self.combine(other, combiner, overwrite=False)",
                            "def update(self, other, join='left', overwrite=True, filter_func=None, errors='ignore'):\n    \"\"\"\n    Modify in place using non-NA values from another DataFrame.\n\n    Aligns on indices. There is no return value.\n\n    Parameters\n    ----------\n    other : DataFrame, or object coercible into a DataFrame\n        Should have at least one matching index/column label\n        with the original DataFrame. If a Series is passed,\n        its name attribute must be set, and that will be\n        used as the column name to align with the original DataFrame.\n    join : {'left'}, default 'left'\n        Only left join is implemented, keeping the index and columns of the\n        original object.\n    overwrite : bool, default True\n        How to handle non-NA values for overlapping keys:\n\n        * True: overwrite original DataFrame's values\n          with values from `other`.\n        * False: only update values that are NA in\n          the original DataFrame.\n\n    filter_func : callable(1d-array) -> bool 1d-array, optional\n        Can choose to replace values other than NA. Return True for values\n        that should be updated.\n    errors : {'raise', 'ignore'}, default 'ignore'\n        If 'raise', will raise a ValueError if the DataFrame and `other`\n        both contain non-NA data in the same place.\n\n        .. versionchanged:: 0.24.0\n           Changed from `raise_conflict=False|True`\n           to `errors='ignore'|'raise'`.\n\n    Returns\n    -------\n    None : method directly changes calling object\n\n    Raises\n    ------\n    ValueError\n        * When `errors='raise'` and there's overlapping non-NA data.\n        * When `errors` is not either `'ignore'` or `'raise'`\n    NotImplementedError\n        * If `join != 'left'`\n\n    See Also\n    --------\n    dict.update : Similar method for dictionaries.\n    DataFrame.merge : For column(s)-on-columns(s) operations.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2, 3],\n    ...                    'B': [400, 500, 600]})\n    >>> new_df = pd.DataFrame({'B': [4, 5, 6],\n    ...                        'C': [7, 8, 9]})\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  1  4\n    1  2  5\n    2  3  6\n\n    The DataFrame's length does not increase as a result of the update,\n    only values at matching index/column labels are updated.\n\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  a  d\n    1  b  e\n    2  c  f\n\n    For Series, it's name attribute must be set.\n\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_column = pd.Series(['d', 'e'], name='B', index=[0, 2])\n    >>> df.update(new_column)\n    >>> df\n       A  B\n    0  a  d\n    1  b  y\n    2  c  e\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_df = pd.DataFrame({'B': ['d', 'e']}, index=[1, 2])\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  a  x\n    1  b  d\n    2  c  e\n\n    If `other` contains NaNs the corresponding values are not updated\n    in the original dataframe.\n\n    >>> df = pd.DataFrame({'A': [1, 2, 3],\n    ...                    'B': [400, 500, 600]})\n    >>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})\n    >>> df.update(new_df)\n    >>> df\n       A      B\n    0  1    4.0\n    1  2  500.0\n    2  3    6.0\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n    if join != 'left':\n        raise NotImplementedError('Only left join is supported')\n    if errors not in ['ignore', 'raise']:\n        raise ValueError(\"The parameter errors must be either 'ignore' or 'raise'\")\n    if not isinstance(other, DataFrame):\n        other = DataFrame(other)\n    other = other.reindex_like(self)\n    for col in self.columns:\n        this = self[col]._values\n        that = other[col]._values\n        if filter_func is not None:\n            with np.errstate(all='ignore'):\n                mask = ~filter_func(this) | isna(that)\n        else:\n            if errors == 'raise':\n                mask_this = notna(that)\n                mask_that = notna(this)\n                if any(mask_this & mask_that):\n                    raise ValueError('Data overlaps.')\n            if overwrite:\n                mask = isna(that)\n            else:\n                mask = notna(this)\n        if mask.all():\n            continue\n        self[col] = expressions.where(mask, this, that)",
                            "@Substitution('')\n@Appender(_shared_docs['pivot'])\ndef pivot(self, index=None, columns=None, values=None):\n    from pandas.core.reshape.pivot import pivot\n    return pivot(self, index=index, columns=columns, values=values)",
                            "@Substitution('')\n@Appender(_shared_docs['pivot_table'])\ndef pivot_table(self, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False):\n    from pandas.core.reshape.pivot import pivot_table\n    return pivot_table(self, values=values, index=index, columns=columns, aggfunc=aggfunc, fill_value=fill_value, margins=margins, dropna=dropna, margins_name=margins_name, observed=observed)",
                            "def stack(self, level=-1, dropna=True):\n    \"\"\"\n    Stack the prescribed level(s) from columns to index.\n\n    Return a reshaped DataFrame or Series having a multi-level\n    index with one or more new inner-most levels compared to the current\n    DataFrame. The new inner-most levels are created by pivoting the\n    columns of the current dataframe:\n\n      - if the columns have a single level, the output is a Series;\n      - if the columns have multiple levels, the new index\n        level(s) is (are) taken from the prescribed level(s) and\n        the output is a DataFrame.\n\n    The new index levels are sorted.\n\n    Parameters\n    ----------\n    level : int, str, list, default -1\n        Level(s) to stack from the column axis onto the index\n        axis, defined as one index or label, or a list of indices\n        or labels.\n    dropna : bool, default True\n        Whether to drop rows in the resulting Frame/Series with\n        missing values. Stacking a column level onto the index\n        axis can create combinations of index and column values\n        that are missing from the original dataframe. See Examples\n        section.\n\n    Returns\n    -------\n    DataFrame or Series\n        Stacked dataframe or series.\n\n    See Also\n    --------\n    DataFrame.unstack : Unstack prescribed level(s) from index axis\n         onto column axis.\n    DataFrame.pivot : Reshape dataframe from long format to wide\n         format.\n    DataFrame.pivot_table : Create a spreadsheet-style pivot table\n         as a DataFrame.\n\n    Notes\n    -----\n    The function is named by analogy with a collection of books\n    being reorganized from being side by side on a horizontal\n    position (the columns of the dataframe) to being stacked\n    vertically on top of each other (in the index of the\n    dataframe).\n\n    Examples\n    --------\n    **Single level columns**\n\n    >>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=['weight', 'height'])\n\n    Stacking a dataframe with a single level column axis returns a Series:\n\n    >>> df_single_level_cols\n         weight height\n    cat       0      1\n    dog       2      3\n    >>> df_single_level_cols.stack()\n    cat  weight    0\n         height    1\n    dog  weight    2\n         height    3\n    dtype: int64\n\n    **Multi level columns: simple case**\n\n    >>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n    ...                                        ('weight', 'pounds')])\n    >>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol1)\n\n    Stacking a dataframe with a multi-level column axis:\n\n    >>> df_multi_level_cols1\n         weight\n             kg    pounds\n    cat       1        2\n    dog       2        4\n    >>> df_multi_level_cols1.stack()\n                weight\n    cat kg           1\n        pounds       2\n    dog kg           2\n        pounds       4\n\n    **Missing values**\n\n    >>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n    ...                                        ('height', 'm')])\n    >>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol2)\n\n    It is common to have missing values when stacking a dataframe\n    with multi-level columns, as the stacked dataframe typically\n    has more values than the original dataframe. Missing values\n    are filled with NaNs:\n\n    >>> df_multi_level_cols2\n        weight height\n            kg      m\n    cat    1.0    2.0\n    dog    3.0    4.0\n    >>> df_multi_level_cols2.stack()\n            height  weight\n    cat kg     NaN     1.0\n        m      2.0     NaN\n    dog kg     NaN     3.0\n        m      4.0     NaN\n\n    **Prescribing the level(s) to be stacked**\n\n    The first parameter controls which level or levels are stacked:\n\n    >>> df_multi_level_cols2.stack(0)\n                 kg    m\n    cat height  NaN  2.0\n        weight  1.0  NaN\n    dog height  NaN  4.0\n        weight  3.0  NaN\n    >>> df_multi_level_cols2.stack([0, 1])\n    cat  height  m     2.0\n         weight  kg    1.0\n    dog  height  m     4.0\n         weight  kg    3.0\n    dtype: float64\n\n    **Dropping missing values**\n\n    >>> df_multi_level_cols3 = pd.DataFrame([[None, 1.0], [2.0, 3.0]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol2)\n\n    Note that rows where all values are missing are dropped by\n    default but this behaviour can be controlled via the dropna\n    keyword parameter:\n\n    >>> df_multi_level_cols3\n        weight height\n            kg      m\n    cat    NaN    1.0\n    dog    2.0    3.0\n    >>> df_multi_level_cols3.stack(dropna=False)\n            height  weight\n    cat kg     NaN     NaN\n        m      1.0     NaN\n    dog kg     NaN     2.0\n        m      3.0     NaN\n    >>> df_multi_level_cols3.stack(dropna=True)\n            height  weight\n    cat m      1.0     NaN\n    dog kg     NaN     2.0\n        m      3.0     NaN\n    \"\"\"\n    from pandas.core.reshape.reshape import stack, stack_multiple\n    if isinstance(level, (tuple, list)):\n        return stack_multiple(self, level, dropna=dropna)\n    else:\n        return stack(self, level, dropna=dropna)",
                            "def explode(self, column: Union[str, Tuple]) -> 'DataFrame':\n    \"\"\"\n    Transform each element of a list-like to a row, replicating index values.\n\n    .. versionadded:: 0.25.0\n\n    Parameters\n    ----------\n    column : str or tuple\n        Column to explode.\n\n    Returns\n    -------\n    DataFrame\n        Exploded lists to rows of the subset columns;\n        index will be duplicated for these rows.\n\n    Raises\n    ------\n    ValueError :\n        if columns of the frame are not unique.\n\n    See Also\n    --------\n    DataFrame.unstack : Pivot a level of the (necessarily hierarchical)\n        index labels.\n    DataFrame.melt : Unpivot a DataFrame from wide format to long format.\n    Series.explode : Explode a DataFrame from list-like columns to long format.\n\n    Notes\n    -----\n    This routine will explode list-likes including lists, tuples,\n    Series, and np.ndarray. The result dtype of the subset rows will\n    be object. Scalars will be returned unchanged. Empty list-likes will\n    result in a np.nan for that row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [[1, 2, 3], 'foo', [], [3, 4]], 'B': 1})\n    >>> df\n               A  B\n    0  [1, 2, 3]  1\n    1        foo  1\n    2         []  1\n    3     [3, 4]  1\n\n    >>> df.explode('A')\n         A  B\n    0    1  1\n    0    2  1\n    0    3  1\n    1  foo  1\n    2  NaN  1\n    3    3  1\n    3    4  1\n    \"\"\"\n    if not (is_scalar(column) or isinstance(column, tuple)):\n        raise ValueError('column must be a scalar')\n    if not self.columns.is_unique:\n        raise ValueError('columns must be unique')\n    df = self.reset_index(drop=True)\n    assert df is not None\n    result = df[column].explode()\n    result = df.drop([column], axis=1).join(result)\n    result.index = self.index.take(result.index)\n    result = result.reindex(columns=self.columns, copy=False)\n    return result",
                            "def unstack(self, level=-1, fill_value=None):\n    \"\"\"\n    Pivot a level of the (necessarily hierarchical) index labels.\n\n    Returns a DataFrame having a new level of column labels whose inner-most level\n    consists of the pivoted index labels.\n\n    If the index is not a MultiIndex, the output will be a Series\n    (the analogue of stack when the columns are not a MultiIndex).\n\n    The level involved will automatically get sorted.\n\n    Parameters\n    ----------\n    level : int, str, or list of these, default -1 (last level)\n        Level(s) of index to unstack, can pass level name.\n    fill_value : int, str or dict\n        Replace NaN with this value if the unstack produces missing values.\n\n    Returns\n    -------\n    Series or DataFrame\n\n    See Also\n    --------\n    DataFrame.pivot : Pivot a table based on column values.\n    DataFrame.stack : Pivot a level of the column labels (inverse operation\n        from `unstack`).\n\n    Examples\n    --------\n    >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n    ...                                    ('two', 'a'), ('two', 'b')])\n    >>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n    >>> s\n    one  a   1.0\n         b   2.0\n    two  a   3.0\n         b   4.0\n    dtype: float64\n\n    >>> s.unstack(level=-1)\n         a   b\n    one  1.0  2.0\n    two  3.0  4.0\n\n    >>> s.unstack(level=0)\n       one  two\n    a  1.0   3.0\n    b  2.0   4.0\n\n    >>> df = s.unstack(level=0)\n    >>> df.unstack()\n    one  a  1.0\n         b  2.0\n    two  a  3.0\n         b  4.0\n    dtype: float64\n    \"\"\"\n    from pandas.core.reshape.reshape import unstack\n    return unstack(self, level, fill_value)",
                            "@Appender(_shared_docs['melt'] % dict(caller='df.melt(', versionadded='.. versionadded:: 0.20.0\\n', other='melt'))\ndef melt(self, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None):\n    from pandas.core.reshape.melt import melt\n    return melt(self, id_vars=id_vars, value_vars=value_vars, var_name=var_name, value_name=value_name, col_level=col_level)",
                            "def diff(self, periods=1, axis=0):\n    \"\"\"\n    First discrete difference of element.\n\n    Calculates the difference of a DataFrame element compared with another\n    element in the DataFrame (default is the element in the same column\n    of the previous row).\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Periods to shift for calculating difference, accepts negative\n        values.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Take difference over rows (0) or columns (1).\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    Series.diff: First discrete difference for a Series.\n    DataFrame.pct_change: Percent change over given number of periods.\n    DataFrame.shift: Shift index by desired number of periods with an\n        optional time freq.\n\n    Examples\n    --------\n    Difference with previous row\n\n    >>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n    ...                    'b': [1, 1, 2, 3, 5, 8],\n    ...                    'c': [1, 4, 9, 16, 25, 36]})\n    >>> df\n       a  b   c\n    0  1  1   1\n    1  2  1   4\n    2  3  2   9\n    3  4  3  16\n    4  5  5  25\n    5  6  8  36\n\n    >>> df.diff()\n         a    b     c\n    0  NaN  NaN   NaN\n    1  1.0  0.0   3.0\n    2  1.0  1.0   5.0\n    3  1.0  1.0   7.0\n    4  1.0  2.0   9.0\n    5  1.0  3.0  11.0\n\n    Difference with previous column\n\n    >>> df.diff(axis=1)\n        a    b     c\n    0 NaN  0.0   0.0\n    1 NaN -1.0   3.0\n    2 NaN -1.0   7.0\n    3 NaN -1.0  13.0\n    4 NaN  0.0  20.0\n    5 NaN  2.0  28.0\n\n    Difference with 3rd previous row\n\n    >>> df.diff(periods=3)\n         a    b     c\n    0  NaN  NaN   NaN\n    1  NaN  NaN   NaN\n    2  NaN  NaN   NaN\n    3  3.0  2.0  15.0\n    4  3.0  4.0  21.0\n    5  3.0  6.0  27.0\n\n    Difference with following row\n\n    >>> df.diff(periods=-1)\n         a    b     c\n    0 -1.0  0.0  -3.0\n    1 -1.0 -1.0  -5.0\n    2 -1.0 -1.0  -7.0\n    3 -1.0 -2.0  -9.0\n    4 -1.0 -3.0 -11.0\n    5  NaN  NaN   NaN\n    \"\"\"\n    bm_axis = self._get_block_manager_axis(axis)\n    new_data = self._data.diff(n=periods, axis=bm_axis)\n    return self._constructor(new_data)",
                            "def _gotitem(self, key: Union[str, List[str]], ndim: int, subset: Optional[Union[Series, ABCDataFrame]]=None) -> Union[Series, ABCDataFrame]:\n    \"\"\"\n    Sub-classes to define. Return a sliced object.\n\n    Parameters\n    ----------\n    key : string / list of selections\n    ndim : 1,2\n        requested ndim of result\n    subset : object, default None\n        subset to act on\n    \"\"\"\n    if subset is None:\n        subset = self\n    elif subset.ndim == 1:\n        return subset\n    return subset[key]",
                            "@Substitution(see_also=_agg_summary_and_see_also_doc, examples=_agg_examples_doc, versionadded='\\n.. versionadded:: 0.20.0\\n', **_shared_doc_kwargs)\n@Appender(_shared_docs['aggregate'])\ndef aggregate(self, func, axis=0, *args, **kwargs):\n    axis = self._get_axis_number(axis)\n    result = None\n    try:\n        result, how = self._aggregate(func, *args, axis=axis, **kwargs)\n    except TypeError:\n        pass\n    if result is None:\n        return self.apply(func, axis=axis, args=args, **kwargs)\n    return result",
                            "def _aggregate(self, arg, axis=0, *args, **kwargs):\n    if axis == 1:\n        result, how = self.T._aggregate(arg, *args, **kwargs)\n        result = result.T if result is not None else result\n        return (result, how)\n    return super()._aggregate(arg, *args, **kwargs)",
                            "@Appender(_shared_docs['transform'] % _shared_doc_kwargs)\ndef transform(self, func, axis=0, *args, **kwargs):\n    axis = self._get_axis_number(axis)\n    if axis == 1:\n        return self.T.transform(func, *args, **kwargs).T\n    return super().transform(func, *args, **kwargs)",
                            "def apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds):\n    \"\"\"\n    Apply a function along an axis of the DataFrame.\n\n    Objects passed to the function are Series objects whose index is\n    either the DataFrame's index (``axis=0``) or the DataFrame's columns\n    (``axis=1``). By default (``result_type=None``), the final return type\n    is inferred from the return type of the applied function. Otherwise,\n    it depends on the `result_type` argument.\n\n    Parameters\n    ----------\n    func : function\n        Function to apply to each column or row.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Axis along which the function is applied:\n\n        * 0 or 'index': apply function to each column.\n        * 1 or 'columns': apply function to each row.\n\n    raw : bool, default False\n        Determines if row or column is passed as a Series or ndarray object:\n\n        * ``False`` : passes each row or column as a Series to the\n          function.\n        * ``True`` : the passed function will receive ndarray objects\n          instead.\n          If you are just applying a NumPy reduction function this will\n          achieve much better performance.\n\n    result_type : {'expand', 'reduce', 'broadcast', None}, default None\n        These only act when ``axis=1`` (columns):\n\n        * 'expand' : list-like results will be turned into columns.\n        * 'reduce' : returns a Series if possible rather than expanding\n          list-like results. This is the opposite of 'expand'.\n        * 'broadcast' : results will be broadcast to the original shape\n          of the DataFrame, the original index and columns will be\n          retained.\n\n        The default behaviour (None) depends on the return value of the\n        applied function: list-like results will be returned as a Series\n        of those. However if the apply function returns a Series these\n        are expanded to columns.\n\n        .. versionadded:: 0.23.0\n\n    args : tuple\n        Positional arguments to pass to `func` in addition to the\n        array/series.\n    **kwds\n        Additional keyword arguments to pass as keywords arguments to\n        `func`.\n\n    Returns\n    -------\n    Series or DataFrame\n        Result of applying ``func`` along the given axis of the\n        DataFrame.\n\n    See Also\n    --------\n    DataFrame.applymap: For elementwise operations.\n    DataFrame.aggregate: Only perform aggregating type operations.\n    DataFrame.transform: Only perform transforming type operations.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])\n    >>> df\n       A  B\n    0  4  9\n    1  4  9\n    2  4  9\n\n    Using a numpy universal function (in this case the same as\n    ``np.sqrt(df)``):\n\n    >>> df.apply(np.sqrt)\n         A    B\n    0  2.0  3.0\n    1  2.0  3.0\n    2  2.0  3.0\n\n    Using a reducing function on either axis\n\n    >>> df.apply(np.sum, axis=0)\n    A    12\n    B    27\n    dtype: int64\n\n    >>> df.apply(np.sum, axis=1)\n    0    13\n    1    13\n    2    13\n    dtype: int64\n\n    Returning a list-like will result in a Series\n\n    >>> df.apply(lambda x: [1, 2], axis=1)\n    0    [1, 2]\n    1    [1, 2]\n    2    [1, 2]\n    dtype: object\n\n    Passing result_type='expand' will expand list-like results\n    to columns of a Dataframe\n\n    >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n       0  1\n    0  1  2\n    1  1  2\n    2  1  2\n\n    Returning a Series inside the function is similar to passing\n    ``result_type='expand'``. The resulting column names\n    will be the Series index.\n\n    >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n       foo  bar\n    0    1    2\n    1    1    2\n    2    1    2\n\n    Passing ``result_type='broadcast'`` will ensure the same shape\n    result, whether list-like or scalar is returned by the function,\n    and broadcast it along the axis. The resulting column names will\n    be the originals.\n\n    >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n       A  B\n    0  1  2\n    1  1  2\n    2  1  2\n    \"\"\"\n    from pandas.core.apply import frame_apply\n    op = frame_apply(self, func=func, axis=axis, raw=raw, result_type=result_type, args=args, kwds=kwds)\n    return op.get_result()",
                            "def applymap(self, func):\n    \"\"\"\n    Apply a function to a Dataframe elementwise.\n\n    This method applies a function that accepts and returns a scalar\n    to every element of a DataFrame.\n\n    Parameters\n    ----------\n    func : callable\n        Python function, returns a single value from a single value.\n\n    Returns\n    -------\n    DataFrame\n        Transformed DataFrame.\n\n    See Also\n    --------\n    DataFrame.apply : Apply a function along input axis of DataFrame.\n\n    Notes\n    -----\n    In the current implementation applymap calls `func` twice on the\n    first column/row to decide whether it can take a fast or slow\n    code path. This can lead to unexpected behavior if `func` has\n    side-effects, as they will take effect twice for the first\n    column/row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n    >>> df\n           0      1\n    0  1.000  2.120\n    1  3.356  4.567\n\n    >>> df.applymap(lambda x: len(str(x)))\n       0  1\n    0  3  4\n    1  5  5\n\n    Note that a vectorized version of `func` often exists, which will\n    be much faster. You could square each number elementwise.\n\n    >>> df.applymap(lambda x: x**2)\n               0          1\n    0   1.000000   4.494400\n    1  11.262736  20.857489\n\n    But it's better to avoid applymap in that case.\n\n    >>> df ** 2\n               0          1\n    0   1.000000   4.494400\n    1  11.262736  20.857489\n    \"\"\"\n\n    def infer(x):\n        if x.empty:\n            return lib.map_infer(x, func)\n        return lib.map_infer(x.astype(object).values, func)\n    return self.apply(infer)",
                            "def append(self, other, ignore_index=False, verify_integrity=False, sort=False):\n    \"\"\"\n    Append rows of `other` to the end of caller, returning a new object.\n\n    Columns in `other` that are not in the caller are added as new columns.\n\n    Parameters\n    ----------\n    other : DataFrame or Series/dict-like object, or list of these\n        The data to append.\n    ignore_index : bool, default False\n        If True, do not use the index labels.\n    verify_integrity : bool, default False\n        If True, raise ValueError on creating index with duplicates.\n    sort : bool, default False\n        Sort columns if the columns of `self` and `other` are not aligned.\n\n        .. versionadded:: 0.23.0\n        .. versionchanged:: 1.0.0\n\n            Changed to not sort by default.\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    concat : General function to concatenate DataFrame or Series objects.\n\n    Notes\n    -----\n    If a list of dict/series is passed and the keys are all contained in\n    the DataFrame's index, the order of the columns in the resulting\n    DataFrame will be unchanged.\n\n    Iteratively appending rows to a DataFrame can be more computationally\n    intensive than a single concatenate. A better solution is to append\n    those rows to a list and then concatenate the list with the original\n    DataFrame all at once.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n    >>> df\n       A  B\n    0  1  2\n    1  3  4\n    >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n    >>> df.append(df2)\n       A  B\n    0  1  2\n    1  3  4\n    0  5  6\n    1  7  8\n\n    With `ignore_index` set to True:\n\n    >>> df.append(df2, ignore_index=True)\n       A  B\n    0  1  2\n    1  3  4\n    2  5  6\n    3  7  8\n\n    The following, while not recommended methods for generating DataFrames,\n    show two ways to generate a DataFrame from multiple data sources.\n\n    Less efficient:\n\n    >>> df = pd.DataFrame(columns=['A'])\n    >>> for i in range(5):\n    ...     df = df.append({'A': i}, ignore_index=True)\n    >>> df\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n\n    More efficient:\n\n    >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n    ...           ignore_index=True)\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n    \"\"\"\n    if isinstance(other, (Series, dict)):\n        if isinstance(other, dict):\n            other = Series(other)\n        if other.name is None and (not ignore_index):\n            raise TypeError('Can only append a Series if ignore_index=True or if the Series has a name')\n        if other.name is None:\n            index = None\n        else:\n            index = Index([other.name], name=self.index.name)\n        idx_diff = other.index.difference(self.columns)\n        try:\n            combined_columns = self.columns.append(idx_diff)\n        except TypeError:\n            combined_columns = self.columns.astype(object).append(idx_diff)\n        other = other.reindex(combined_columns, copy=False)\n        other = DataFrame(other.values.reshape((1, len(other))), index=index, columns=combined_columns)\n        other = other._convert(datetime=True, timedelta=True)\n        if not self.columns.equals(combined_columns):\n            self = self.reindex(columns=combined_columns)\n    elif isinstance(other, list):\n        if not other:\n            pass\n        elif not isinstance(other[0], DataFrame):\n            other = DataFrame(other)\n            if (self.columns.get_indexer(other.columns) >= 0).all():\n                other = other.reindex(columns=self.columns)\n    from pandas.core.reshape.concat import concat\n    if isinstance(other, (list, tuple)):\n        to_concat = [self] + other\n    else:\n        to_concat = [self, other]\n    return concat(to_concat, ignore_index=ignore_index, verify_integrity=verify_integrity, sort=sort)",
                            "def join(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False):\n    \"\"\"\n    Join columns of another DataFrame.\n\n    Join columns with `other` DataFrame either on index or on a key\n    column. Efficiently join multiple DataFrame objects by index at once by\n    passing a list.\n\n    Parameters\n    ----------\n    other : DataFrame, Series, or list of DataFrame\n        Index should be similar to one of the columns in this one. If a\n        Series is passed, its name attribute must be set, and that will be\n        used as the column name in the resulting joined DataFrame.\n    on : str, list of str, or array-like, optional\n        Column or index level name(s) in the caller to join on the index\n        in `other`, otherwise joins index-on-index. If multiple\n        values given, the `other` DataFrame must have a MultiIndex. Can\n        pass an array as the join key if it is not already contained in\n        the calling DataFrame. Like an Excel VLOOKUP operation.\n    how : {'left', 'right', 'outer', 'inner'}, default 'left'\n        How to handle the operation of the two objects.\n\n        * left: use calling frame's index (or column if on is specified)\n        * right: use `other`'s index.\n        * outer: form union of calling frame's index (or column if on is\n          specified) with `other`'s index, and sort it.\n          lexicographically.\n        * inner: form intersection of calling frame's index (or column if\n          on is specified) with `other`'s index, preserving the order\n          of the calling's one.\n    lsuffix : str, default ''\n        Suffix to use from left frame's overlapping columns.\n    rsuffix : str, default ''\n        Suffix to use from right frame's overlapping columns.\n    sort : bool, default False\n        Order result DataFrame lexicographically by the join key. If False,\n        the order of the join key depends on the join type (how keyword).\n\n    Returns\n    -------\n    DataFrame\n        A dataframe containing columns from both the caller and `other`.\n\n    See Also\n    --------\n    DataFrame.merge : For column(s)-on-columns(s) operations.\n\n    Notes\n    -----\n    Parameters `on`, `lsuffix`, and `rsuffix` are not supported when\n    passing a list of `DataFrame` objects.\n\n    Support for specifying index levels as the `on` parameter was added\n    in version 0.23.0.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n    ...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n    >>> df\n      key   A\n    0  K0  A0\n    1  K1  A1\n    2  K2  A2\n    3  K3  A3\n    4  K4  A4\n    5  K5  A5\n\n    >>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n    ...                       'B': ['B0', 'B1', 'B2']})\n\n    >>> other\n      key   B\n    0  K0  B0\n    1  K1  B1\n    2  K2  B2\n\n    Join DataFrames using their indexes.\n\n    >>> df.join(other, lsuffix='_caller', rsuffix='_other')\n      key_caller   A key_other    B\n    0         K0  A0        K0   B0\n    1         K1  A1        K1   B1\n    2         K2  A2        K2   B2\n    3         K3  A3       NaN  NaN\n    4         K4  A4       NaN  NaN\n    5         K5  A5       NaN  NaN\n\n    If we want to join using the key columns, we need to set key to be\n    the index in both `df` and `other`. The joined DataFrame will have\n    key as its index.\n\n    >>> df.set_index('key').join(other.set_index('key'))\n          A    B\n    key\n    K0   A0   B0\n    K1   A1   B1\n    K2   A2   B2\n    K3   A3  NaN\n    K4   A4  NaN\n    K5   A5  NaN\n\n    Another option to join using the key columns is to use the `on`\n    parameter. DataFrame.join always uses `other`'s index but we can use\n    any column in `df`. This method preserves the original DataFrame's\n    index in the result.\n\n    >>> df.join(other.set_index('key'), on='key')\n      key   A    B\n    0  K0  A0   B0\n    1  K1  A1   B1\n    2  K2  A2   B2\n    3  K3  A3  NaN\n    4  K4  A4  NaN\n    5  K5  A5  NaN\n    \"\"\"\n    return self._join_compat(other, on=on, how=how, lsuffix=lsuffix, rsuffix=rsuffix, sort=sort)",
                            "def _join_compat(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False):\n    from pandas.core.reshape.merge import merge\n    from pandas.core.reshape.concat import concat\n    if isinstance(other, Series):\n        if other.name is None:\n            raise ValueError('Other Series must have a name')\n        other = DataFrame({other.name: other})\n    if isinstance(other, DataFrame):\n        return merge(self, other, left_on=on, how=how, left_index=on is None, right_index=True, suffixes=(lsuffix, rsuffix), sort=sort)\n    else:\n        if on is not None:\n            raise ValueError('Joining multiple DataFrames only supported for joining on index')\n        frames = [self] + list(other)\n        can_concat = all((df.index.is_unique for df in frames))\n        if can_concat:\n            if how == 'left':\n                res = concat(frames, axis=1, join='outer', verify_integrity=True, sort=sort)\n                return res.reindex(self.index, copy=False)\n            else:\n                return concat(frames, axis=1, join=how, verify_integrity=True, sort=sort)\n        joined = frames[0]\n        for frame in frames[1:]:\n            joined = merge(joined, frame, how=how, left_index=True, right_index=True)\n        return joined",
                            "@Substitution('')\n@Appender(_merge_doc, indents=2)\ndef merge(self, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'), copy=True, indicator=False, validate=None):\n    from pandas.core.reshape.merge import merge\n    return merge(self, right, how=how, on=on, left_on=left_on, right_on=right_on, left_index=left_index, right_index=right_index, sort=sort, suffixes=suffixes, copy=copy, indicator=indicator, validate=validate)",
                            "def round(self, decimals=0, *args, **kwargs):\n    \"\"\"\n    Round a DataFrame to a variable number of decimal places.\n\n    Parameters\n    ----------\n    decimals : int, dict, Series\n        Number of decimal places to round each column to. If an int is\n        given, round each column to the same number of places.\n        Otherwise dict and Series round to variable numbers of places.\n        Column names should be in the keys if `decimals` is a\n        dict-like, or in the index if `decimals` is a Series. Any\n        columns not included in `decimals` will be left as is. Elements\n        of `decimals` which are not columns of the input will be\n        ignored.\n    *args\n        Additional keywords have no effect but might be accepted for\n        compatibility with numpy.\n    **kwargs\n        Additional keywords have no effect but might be accepted for\n        compatibility with numpy.\n\n    Returns\n    -------\n    DataFrame\n        A DataFrame with the affected columns rounded to the specified\n        number of decimal places.\n\n    See Also\n    --------\n    numpy.around : Round a numpy array to the given number of decimals.\n    Series.round : Round a Series to the given number of decimals.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df\n        dogs  cats\n    0  0.21  0.32\n    1  0.01  0.67\n    2  0.66  0.03\n    3  0.21  0.18\n\n    By providing an integer each column is rounded to the same number\n    of decimal places\n\n    >>> df.round(1)\n        dogs  cats\n    0   0.2   0.3\n    1   0.0   0.7\n    2   0.7   0.0\n    3   0.2   0.2\n\n    With a dict, the number of places for specific columns can be\n    specified with the column names as key and the number of decimal\n    places as value\n\n    >>> df.round({'dogs': 1, 'cats': 0})\n        dogs  cats\n    0   0.2   0.0\n    1   0.0   1.0\n    2   0.7   0.0\n    3   0.2   0.0\n\n    Using a Series, the number of places for specific columns can be\n    specified with the column names as index and the number of\n    decimal places as value\n\n    >>> decimals = pd.Series([0, 1], index=['cats', 'dogs'])\n    >>> df.round(decimals)\n        dogs  cats\n    0   0.2   0.0\n    1   0.0   1.0\n    2   0.7   0.0\n    3   0.2   0.0\n    \"\"\"\n    from pandas.core.reshape.concat import concat\n\n    def _dict_round(df, decimals):\n        for col, vals in df.items():\n            try:\n                yield _series_round(vals, decimals[col])\n            except KeyError:\n                yield vals\n\n    def _series_round(s, decimals):\n        if is_integer_dtype(s) or is_float_dtype(s):\n            return s.round(decimals)\n        return s\n    nv.validate_round(args, kwargs)\n    if isinstance(decimals, (dict, Series)):\n        if isinstance(decimals, Series):\n            if not decimals.index.is_unique:\n                raise ValueError('Index of decimals must be unique')\n        new_cols = list(_dict_round(self, decimals))\n    elif is_integer(decimals):\n        new_cols = [_series_round(v, decimals) for _, v in self.items()]\n    else:\n        raise TypeError('decimals must be an integer, a dict-like or a Series')\n    if len(new_cols) > 0:\n        return self._constructor(concat(new_cols, axis=1), index=self.index, columns=self.columns)\n    else:\n        return self",
                            "def corr(self, method='pearson', min_periods=1):\n    \"\"\"\n    Compute pairwise correlation of columns, excluding NA/null values.\n\n    Parameters\n    ----------\n    method : {'pearson', 'kendall', 'spearman'} or callable\n        Method of correlation:\n\n        * pearson : standard correlation coefficient\n        * kendall : Kendall Tau correlation coefficient\n        * spearman : Spearman rank correlation\n        * callable: callable with input two 1d ndarrays\n            and returning a float. Note that the returned matrix from corr\n            will have 1 along the diagonals and will be symmetric\n            regardless of the callable's behavior.\n\n            .. versionadded:: 0.24.0\n\n    min_periods : int, optional\n        Minimum number of observations required per pair of columns\n        to have a valid result. Currently only available for Pearson\n        and Spearman correlation.\n\n    Returns\n    -------\n    DataFrame\n        Correlation matrix.\n\n    See Also\n    --------\n    DataFrame.corrwith\n    Series.corr\n\n    Examples\n    --------\n    >>> def histogram_intersection(a, b):\n    ...     v = np.minimum(a, b).sum().round(decimals=1)\n    ...     return v\n    >>> df = pd.DataFrame([(.2, .3), (.0, .6), (.6, .0), (.2, .1)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df.corr(method=histogram_intersection)\n          dogs  cats\n    dogs   1.0   0.3\n    cats   0.3   1.0\n    \"\"\"\n    numeric_df = self._get_numeric_data()\n    cols = numeric_df.columns\n    idx = cols.copy()\n    mat = numeric_df.values\n    if method == 'pearson':\n        correl = libalgos.nancorr(ensure_float64(mat), minp=min_periods)\n    elif method == 'spearman':\n        correl = libalgos.nancorr_spearman(ensure_float64(mat), minp=min_periods)\n    elif method == 'kendall' or callable(method):\n        if min_periods is None:\n            min_periods = 1\n        mat = ensure_float64(mat).T\n        corrf = nanops.get_corr_func(method)\n        K = len(cols)\n        correl = np.empty((K, K), dtype=float)\n        mask = np.isfinite(mat)\n        for i, ac in enumerate(mat):\n            for j, bc in enumerate(mat):\n                if i > j:\n                    continue\n                valid = mask[i] & mask[j]\n                if valid.sum() < min_periods:\n                    c = np.nan\n                elif i == j:\n                    c = 1.0\n                elif not valid.all():\n                    c = corrf(ac[valid], bc[valid])\n                else:\n                    c = corrf(ac, bc)\n                correl[i, j] = c\n                correl[j, i] = c\n    else:\n        raise ValueError(f\"method must be either 'pearson', 'spearman', 'kendall', or a callable, '{method}' was supplied\")\n    return self._constructor(correl, index=idx, columns=cols)",
                            "def cov(self, min_periods=None):\n    \"\"\"\n    Compute pairwise covariance of columns, excluding NA/null values.\n\n    Compute the pairwise covariance among the series of a DataFrame.\n    The returned data frame is the `covariance matrix\n    <https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns\n    of the DataFrame.\n\n    Both NA and null values are automatically excluded from the\n    calculation. (See the note below about bias from missing values.)\n    A threshold can be set for the minimum number of\n    observations for each value created. Comparisons with observations\n    below this threshold will be returned as ``NaN``.\n\n    This method is generally used for the analysis of time series data to\n    understand the relationship between different measures\n    across time.\n\n    Parameters\n    ----------\n    min_periods : int, optional\n        Minimum number of observations required per pair of columns\n        to have a valid result.\n\n    Returns\n    -------\n    DataFrame\n        The covariance matrix of the series of the DataFrame.\n\n    See Also\n    --------\n    Series.cov : Compute covariance with another Series.\n    core.window.EWM.cov: Exponential weighted sample covariance.\n    core.window.Expanding.cov : Expanding sample covariance.\n    core.window.Rolling.cov : Rolling sample covariance.\n\n    Notes\n    -----\n    Returns the covariance matrix of the DataFrame's time series.\n    The covariance is normalized by N-1.\n\n    For DataFrames that have Series that are missing data (assuming that\n    data is `missing at random\n    <https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)\n    the returned covariance matrix will be an unbiased estimate\n    of the variance and covariance between the member Series.\n\n    However, for many applications this estimate may not be acceptable\n    because the estimate covariance matrix is not guaranteed to be positive\n    semi-definite. This could lead to estimate correlations having\n    absolute values which are greater than one, and/or a non-invertible\n    covariance matrix. See `Estimation of covariance matrices\n    <http://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\n    matrices>`__ for more details.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df.cov()\n              dogs      cats\n    dogs  0.666667 -1.000000\n    cats -1.000000  1.666667\n\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame(np.random.randn(1000, 5),\n    ...                   columns=['a', 'b', 'c', 'd', 'e'])\n    >>> df.cov()\n              a         b         c         d         e\n    a  0.998438 -0.020161  0.059277 -0.008943  0.014144\n    b -0.020161  1.059352 -0.008543 -0.024738  0.009826\n    c  0.059277 -0.008543  1.010670 -0.001486 -0.000271\n    d -0.008943 -0.024738 -0.001486  0.921297 -0.013692\n    e  0.014144  0.009826 -0.000271 -0.013692  0.977795\n\n    **Minimum number of periods**\n\n    This method also supports an optional ``min_periods`` keyword\n    that specifies the required minimum number of non-NA observations for\n    each column pair in order to have a valid result:\n\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame(np.random.randn(20, 3),\n    ...                   columns=['a', 'b', 'c'])\n    >>> df.loc[df.index[:5], 'a'] = np.nan\n    >>> df.loc[df.index[5:10], 'b'] = np.nan\n    >>> df.cov(min_periods=12)\n              a         b         c\n    a  0.316741       NaN -0.150812\n    b       NaN  1.248003  0.191417\n    c -0.150812  0.191417  0.895202\n    \"\"\"\n    numeric_df = self._get_numeric_data()\n    cols = numeric_df.columns\n    idx = cols.copy()\n    mat = numeric_df.values\n    if notna(mat).all():\n        if min_periods is not None and min_periods > len(mat):\n            baseCov = np.empty((mat.shape[1], mat.shape[1]))\n            baseCov.fill(np.nan)\n        else:\n            baseCov = np.cov(mat.T)\n        baseCov = baseCov.reshape((len(cols), len(cols)))\n    else:\n        baseCov = libalgos.nancorr(ensure_float64(mat), cov=True, minp=min_periods)\n    return self._constructor(baseCov, index=idx, columns=cols)",
                            "def corrwith(self, other, axis=0, drop=False, method='pearson'):\n    \"\"\"\n    Compute pairwise correlation.\n\n    Pairwise correlation is computed between rows or columns of\n    DataFrame with rows or columns of Series or DataFrame. DataFrames\n    are first aligned along both axes before computing the\n    correlations.\n\n    Parameters\n    ----------\n    other : DataFrame, Series\n        Object with which to compute correlations.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' to compute column-wise, 1 or 'columns' for\n        row-wise.\n    drop : bool, default False\n        Drop missing indices from result.\n    method : {'pearson', 'kendall', 'spearman'} or callable\n        Method of correlation:\n\n        * pearson : standard correlation coefficient\n        * kendall : Kendall Tau correlation coefficient\n        * spearman : Spearman rank correlation\n        * callable: callable with input two 1d ndarrays\n            and returning a float.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series\n        Pairwise correlations.\n\n    See Also\n    --------\n    DataFrame.corr\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    this = self._get_numeric_data()\n    if isinstance(other, Series):\n        return this.apply(lambda x: other.corr(x, method=method), axis=axis)\n    other = other._get_numeric_data()\n    left, right = this.align(other, join='inner', copy=False)\n    if axis == 1:\n        left = left.T\n        right = right.T\n    if method == 'pearson':\n        left = left + right * 0\n        right = right + left * 0\n        ldem = left - left.mean()\n        rdem = right - right.mean()\n        num = (ldem * rdem).sum()\n        dom = (left.count() - 1) * left.std() * right.std()\n        correl = num / dom\n    elif method in ['kendall', 'spearman'] or callable(method):\n\n        def c(x):\n            return nanops.nancorr(x[0], x[1], method=method)\n        correl = Series(map(c, zip(left.values.T, right.values.T)), index=left.columns)\n    else:\n        raise ValueError(f\"Invalid method {method} was passed, valid methods are: 'pearson', 'kendall', 'spearman', or callable\")\n    if not drop:\n        raxis = 1 if axis == 0 else 0\n        result_index = this._get_axis(raxis).union(other._get_axis(raxis))\n        idx_diff = result_index.difference(correl.index)\n        if len(idx_diff) > 0:\n            correl = correl.append(Series([np.nan] * len(idx_diff), index=idx_diff))\n    return correl",
                            "def count(self, axis=0, level=None, numeric_only=False):\n    \"\"\"\n    Count non-NA cells for each column or row.\n\n    The values `None`, `NaN`, `NaT`, and optionally `numpy.inf` (depending\n    on `pandas.options.mode.use_inf_as_na`) are considered NA.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        If 0 or 'index' counts are generated for each column.\n        If 1 or 'columns' counts are generated for each **row**.\n    level : int or str, optional\n        If the axis is a `MultiIndex` (hierarchical), count along a\n        particular `level`, collapsing into a `DataFrame`.\n        A `str` specifies the level name.\n    numeric_only : bool, default False\n        Include only `float`, `int` or `boolean` data.\n\n    Returns\n    -------\n    Series or DataFrame\n        For each column/row the number of non-NA/null entries.\n        If `level` is specified returns a `DataFrame`.\n\n    See Also\n    --------\n    Series.count: Number of non-NA elements in a Series.\n    DataFrame.shape: Number of DataFrame rows and columns (including NA\n        elements).\n    DataFrame.isna: Boolean same-sized DataFrame showing places of NA\n        elements.\n\n    Examples\n    --------\n    Constructing DataFrame from a dictionary:\n\n    >>> df = pd.DataFrame({\"Person\":\n    ...                    [\"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\"],\n    ...                    \"Age\": [24., np.nan, 21., 33, 26],\n    ...                    \"Single\": [False, True, True, True, False]})\n    >>> df\n       Person   Age  Single\n    0    John  24.0   False\n    1    Myla   NaN    True\n    2   Lewis  21.0    True\n    3    John  33.0    True\n    4    Myla  26.0   False\n\n    Notice the uncounted NA values:\n\n    >>> df.count()\n    Person    5\n    Age       4\n    Single    5\n    dtype: int64\n\n    Counts for each **row**:\n\n    >>> df.count(axis='columns')\n    0    3\n    1    2\n    2    3\n    3    3\n    4    3\n    dtype: int64\n\n    Counts for one level of a `MultiIndex`:\n\n    >>> df.set_index([\"Person\", \"Single\"]).count(level=\"Person\")\n            Age\n    Person\n    John      2\n    Lewis     1\n    Myla      1\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    if level is not None:\n        return self._count_level(level, axis=axis, numeric_only=numeric_only)\n    if numeric_only:\n        frame = self._get_numeric_data()\n    else:\n        frame = self\n    if len(frame._get_axis(axis)) == 0:\n        result = Series(0, index=frame._get_agg_axis(axis))\n    elif frame._is_mixed_type or frame._data.any_extension_types:\n        result = notna(frame).sum(axis=axis)\n    else:\n        series_counts = notna(frame).sum(axis=axis)\n        counts = series_counts.values\n        result = Series(counts, index=frame._get_agg_axis(axis))\n    return result.astype('int64')",
                            "def _count_level(self, level, axis=0, numeric_only=False):\n    if numeric_only:\n        frame = self._get_numeric_data()\n    else:\n        frame = self\n    count_axis = frame._get_axis(axis)\n    agg_axis = frame._get_agg_axis(axis)\n    if not isinstance(count_axis, ABCMultiIndex):\n        raise TypeError(f'Can only count levels on hierarchical {self._get_axis_name(axis)}.')\n    if frame._is_mixed_type:\n        mask = notna(frame).values\n    else:\n        mask = notna(frame.values)\n    if axis == 1:\n        mask = mask.T\n    if isinstance(level, str):\n        level = count_axis._get_level_number(level)\n    level_name = count_axis._names[level]\n    level_index = count_axis.levels[level]._shallow_copy(name=level_name)\n    level_codes = ensure_int64(count_axis.codes[level])\n    counts = lib.count_level_2d(mask, level_codes, len(level_index), axis=0)\n    result = DataFrame(counts, index=level_index, columns=agg_axis)\n    if axis == 1:\n        return result.T\n    else:\n        return result",
                            "def _reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds):\n    if axis is None and filter_type == 'bool':\n        labels = None\n        constructor = None\n    else:\n        axis = self._get_axis_number(axis)\n        labels = self._get_agg_axis(axis)\n        constructor = self._constructor\n\n    def f(x):\n        return op(x, axis=axis, skipna=skipna, **kwds)\n\n    def _get_data(axis_matters):\n        if filter_type is None or filter_type == 'numeric':\n            data = self._get_numeric_data()\n        elif filter_type == 'bool':\n            if axis_matters:\n                data = self._get_bool_data() if axis == 0 else self\n            else:\n                data = self._get_bool_data()\n        else:\n            msg = f'Generating numeric_only data with filter_type {filter_type} not supported.'\n            raise NotImplementedError(msg)\n        return data\n    if numeric_only is None:\n        values = self.values\n        try:\n            result = f(values)\n            if filter_type == 'bool' and is_object_dtype(values) and (axis is None):\n                result = np.bool_(result)\n        except TypeError:\n            if filter_type is None and axis == 0:\n                from pandas.core.apply import frame_apply\n                opa = frame_apply(self, func=f, result_type='expand', ignore_failures=True)\n                result = opa.get_result()\n                if result.ndim == self.ndim:\n                    result = result.iloc[0]\n                return result\n            data = _get_data(axis_matters=False)\n            with np.errstate(all='ignore'):\n                result = f(data.values)\n            labels = data._get_agg_axis(axis)\n    else:\n        if numeric_only:\n            data = _get_data(axis_matters=True)\n            values = data.values\n            labels = data._get_agg_axis(axis)\n        else:\n            values = self.values\n        result = f(values)\n    if hasattr(result, 'dtype') and is_object_dtype(result.dtype):\n        try:\n            if filter_type is None or filter_type == 'numeric':\n                result = result.astype(np.float64)\n            elif filter_type == 'bool' and notna(result).all():\n                result = result.astype(np.bool_)\n        except (ValueError, TypeError):\n            if axis == 0:\n                result = coerce_to_dtypes(result, self.dtypes)\n    if constructor is not None:\n        result = Series(result, index=labels)\n    return result",
                            "def nunique(self, axis=0, dropna=True):\n    \"\"\"\n    Count distinct observations over requested axis.\n\n    Return Series with number of distinct observations. Can ignore NaN\n    values.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for\n        column-wise.\n    dropna : bool, default True\n        Don't include NaN in the counts.\n\n    Returns\n    -------\n    Series\n\n    See Also\n    --------\n    Series.nunique: Method nunique for Series.\n    DataFrame.count: Count non-NA cells for each column or row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 1, 1]})\n    >>> df.nunique()\n    A    3\n    B    1\n    dtype: int64\n\n    >>> df.nunique(axis=1)\n    0    1\n    1    2\n    2    2\n    dtype: int64\n    \"\"\"\n    return self.apply(Series.nunique, axis=axis, dropna=dropna)",
                            "def idxmin(self, axis=0, skipna=True):\n    \"\"\"\n    Return index of first occurrence of minimum over requested axis.\n\n    NA/null values are excluded.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise\n    skipna : bool, default True\n        Exclude NA/null values. If an entire row/column is NA, the result\n        will be NA.\n\n    Returns\n    -------\n    Series\n        Indexes of minima along the specified axis.\n\n    Raises\n    ------\n    ValueError\n        * If the row/column is empty\n\n    See Also\n    --------\n    Series.idxmin\n\n    Notes\n    -----\n    This method is the DataFrame version of ``ndarray.argmin``.\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    indices = nanops.nanargmin(self.values, axis=axis, skipna=skipna)\n    index = self._get_axis(axis)\n    result = [index[i] if i >= 0 else np.nan for i in indices]\n    return Series(result, index=self._get_agg_axis(axis))",
                            "def idxmax(self, axis=0, skipna=True):\n    \"\"\"\n    Return index of first occurrence of maximum over requested axis.\n\n    NA/null values are excluded.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise\n    skipna : bool, default True\n        Exclude NA/null values. If an entire row/column is NA, the result\n        will be NA.\n\n    Returns\n    -------\n    Series\n        Indexes of maxima along the specified axis.\n\n    Raises\n    ------\n    ValueError\n        * If the row/column is empty\n\n    See Also\n    --------\n    Series.idxmax\n\n    Notes\n    -----\n    This method is the DataFrame version of ``ndarray.argmax``.\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    indices = nanops.nanargmax(self.values, axis=axis, skipna=skipna)\n    index = self._get_axis(axis)\n    result = [index[i] if i >= 0 else np.nan for i in indices]\n    return Series(result, index=self._get_agg_axis(axis))",
                            "def _get_agg_axis(self, axis_num):\n    \"\"\"\n    Let's be explicit about this.\n    \"\"\"\n    if axis_num == 0:\n        return self.columns\n    elif axis_num == 1:\n        return self.index\n    else:\n        raise ValueError(f'Axis must be 0 or 1 (got {repr(axis_num)})')",
                            "def mode(self, axis=0, numeric_only=False, dropna=True):\n    \"\"\"\n    Get the mode(s) of each element along the selected axis.\n\n    The mode of a set of values is the value that appears most often.\n    It can be multiple values.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to iterate over while searching for the mode:\n\n        * 0 or 'index' : get mode of each column\n        * 1 or 'columns' : get mode of each row.\n\n    numeric_only : bool, default False\n        If True, only apply to numeric columns.\n    dropna : bool, default True\n        Don't consider counts of NaN/NaT.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n        The modes of each column or row.\n\n    See Also\n    --------\n    Series.mode : Return the highest frequency value in a Series.\n    Series.value_counts : Return the counts of values in a Series.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('bird', 2, 2),\n    ...                    ('mammal', 4, np.nan),\n    ...                    ('arthropod', 8, 0),\n    ...                    ('bird', 2, np.nan)],\n    ...                   index=('falcon', 'horse', 'spider', 'ostrich'),\n    ...                   columns=('species', 'legs', 'wings'))\n    >>> df\n               species  legs  wings\n    falcon        bird     2    2.0\n    horse       mammal     4    NaN\n    spider   arthropod     8    0.0\n    ostrich       bird     2    NaN\n\n    By default, missing values are not considered, and the mode of wings\n    are both 0 and 2. The second row of species and legs contains ``NaN``,\n    because they have only one mode, but the DataFrame has two rows.\n\n    >>> df.mode()\n      species  legs  wings\n    0    bird   2.0    0.0\n    1     NaN   NaN    2.0\n\n    Setting ``dropna=False`` ``NaN`` values are considered and they can be\n    the mode (like for wings).\n\n    >>> df.mode(dropna=False)\n      species  legs  wings\n    0    bird     2    NaN\n\n    Setting ``numeric_only=True``, only the mode of numeric columns is\n    computed, and columns of other types are ignored.\n\n    >>> df.mode(numeric_only=True)\n       legs  wings\n    0   2.0    0.0\n    1   NaN    2.0\n\n    To compute the mode over columns and not rows, use the axis parameter:\n\n    >>> df.mode(axis='columns', numeric_only=True)\n               0    1\n    falcon   2.0  NaN\n    horse    4.0  NaN\n    spider   0.0  8.0\n    ostrich  2.0  NaN\n    \"\"\"\n    data = self if not numeric_only else self._get_numeric_data()\n\n    def f(s):\n        return s.mode(dropna=dropna)\n    return data.apply(f, axis=axis)",
                            "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear'):\n    \"\"\"\n    Return values at the given quantile over requested axis.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value between 0 <= q <= 1, the quantile(s) to compute.\n    axis : {0, 1, 'index', 'columns'} (default 0)\n        Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n    numeric_only : bool, default True\n        If False, the quantile of datetime and timedelta data will be\n        computed as well.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        This optional parameter specifies the interpolation method to use,\n        when the desired quantile lies between two data points `i` and `j`:\n\n        * linear: `i + (j - i) * fraction`, where `fraction` is the\n          fractional part of the index surrounded by `i` and `j`.\n        * lower: `i`.\n        * higher: `j`.\n        * nearest: `i` or `j` whichever is nearest.\n        * midpoint: (`i` + `j`) / 2.\n\n    Returns\n    -------\n    Series or DataFrame\n\n        If ``q`` is an array, a DataFrame will be returned where the\n          index is ``q``, the columns are the columns of self, and the\n          values are the quantiles.\n        If ``q`` is a float, a Series will be returned where the\n          index is the columns of self and the values are the quantiles.\n\n    See Also\n    --------\n    core.window.Rolling.quantile: Rolling quantile.\n    numpy.percentile: Numpy function to compute the percentile.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n    ...                   columns=['a', 'b'])\n    >>> df.quantile(.1)\n    a    1.3\n    b    3.7\n    Name: 0.1, dtype: float64\n    >>> df.quantile([.1, .5])\n           a     b\n    0.1  1.3   3.7\n    0.5  2.5  55.0\n\n    Specifying `numeric_only=False` will also compute the quantile of\n    datetime and timedelta data.\n\n    >>> df = pd.DataFrame({'A': [1, 2],\n    ...                    'B': [pd.Timestamp('2010'),\n    ...                          pd.Timestamp('2011')],\n    ...                    'C': [pd.Timedelta('1 days'),\n    ...                          pd.Timedelta('2 days')]})\n    >>> df.quantile(0.5, numeric_only=False)\n    A                    1.5\n    B    2010-07-02 12:00:00\n    C        1 days 12:00:00\n    Name: 0.5, dtype: object\n    \"\"\"\n    validate_percentile(q)\n    data = self._get_numeric_data() if numeric_only else self\n    axis = self._get_axis_number(axis)\n    is_transposed = axis == 1\n    if is_transposed:\n        data = data.T\n    if len(data.columns) == 0:\n        cols = Index([], name=self.columns.name)\n        if is_list_like(q):\n            return self._constructor([], index=q, columns=cols)\n        return self._constructor_sliced([], index=cols, name=q, dtype=np.float64)\n    result = data._data.quantile(qs=q, axis=1, interpolation=interpolation, transposed=is_transposed)\n    if result.ndim == 2:\n        result = self._constructor(result)\n    else:\n        result = self._constructor_sliced(result, name=q)\n    if is_transposed:\n        result = result.T\n    return result",
                            "def to_timestamp(self, freq=None, how='start', axis=0, copy=True):\n    \"\"\"\n    Cast to DatetimeIndex of timestamps, at *beginning* of period.\n\n    Parameters\n    ----------\n    freq : str, default frequency of PeriodIndex\n        Desired frequency.\n    how : {'s', 'e', 'start', 'end'}\n        Convention for converting period to timestamp; start of period\n        vs. end.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to convert (the index by default).\n    copy : bool, default True\n        If False then underlying input data is not copied.\n\n    Returns\n    -------\n    DataFrame with DatetimeIndex\n    \"\"\"\n    new_data = self._data\n    if copy:\n        new_data = new_data.copy()\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        new_data.set_axis(1, self.index.to_timestamp(freq=freq, how=how))\n    elif axis == 1:\n        new_data.set_axis(0, self.columns.to_timestamp(freq=freq, how=how))\n    else:\n        raise AssertionError(f'Axis must be 0 or 1. Got {axis}')\n    return self._constructor(new_data)",
                            "def to_period(self, freq=None, axis=0, copy=True):\n    \"\"\"\n    Convert DataFrame from DatetimeIndex to PeriodIndex.\n\n    Convert DataFrame from DatetimeIndex to PeriodIndex with desired\n    frequency (inferred from index if not passed).\n\n    Parameters\n    ----------\n    freq : str, default\n        Frequency of the PeriodIndex.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to convert (the index by default).\n    copy : bool, default True\n        If False then underlying input data is not copied.\n\n    Returns\n    -------\n    TimeSeries with PeriodIndex\n    \"\"\"\n    new_data = self._data\n    if copy:\n        new_data = new_data.copy()\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        new_data.set_axis(1, self.index.to_period(freq=freq))\n    elif axis == 1:\n        new_data.set_axis(0, self.columns.to_period(freq=freq))\n    else:\n        raise AssertionError(f'Axis must be 0 or 1. Got {axis}')\n    return self._constructor(new_data)",
                            "def isin(self, values):\n    \"\"\"\n    Whether each element in the DataFrame is contained in values.\n\n    Parameters\n    ----------\n    values : iterable, Series, DataFrame or dict\n        The result will only be true at a location if all the\n        labels match. If `values` is a Series, that's the index. If\n        `values` is a dict, the keys must be the column names,\n        which must match. If `values` is a DataFrame,\n        then both the index and column labels must match.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame of booleans showing whether each element in the DataFrame\n        is contained in values.\n\n    See Also\n    --------\n    DataFrame.eq: Equality test for DataFrame.\n    Series.isin: Equivalent method on Series.\n    Series.str.contains: Test if pattern or regex is contained within a\n        string of a Series or Index.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame({'num_legs': [2, 4], 'num_wings': [2, 0]},\n    ...                   index=['falcon', 'dog'])\n    >>> df\n            num_legs  num_wings\n    falcon         2          2\n    dog            4          0\n\n    When ``values`` is a list check whether every value in the DataFrame\n    is present in the list (which animals have 0 or 2 legs or wings)\n\n    >>> df.isin([0, 2])\n            num_legs  num_wings\n    falcon      True       True\n    dog        False       True\n\n    When ``values`` is a dict, we can pass values to check for each\n    column separately:\n\n    >>> df.isin({'num_wings': [0, 3]})\n            num_legs  num_wings\n    falcon     False      False\n    dog        False       True\n\n    When ``values`` is a Series or DataFrame the index and column must\n    match. Note that 'falcon' does not match based on the number of legs\n    in df2.\n\n    >>> other = pd.DataFrame({'num_legs': [8, 2], 'num_wings': [0, 2]},\n    ...                      index=['spider', 'falcon'])\n    >>> df.isin(other)\n            num_legs  num_wings\n    falcon      True       True\n    dog        False      False\n    \"\"\"\n    if isinstance(values, dict):\n        from pandas.core.reshape.concat import concat\n        values = collections.defaultdict(list, values)\n        return concat((self.iloc[:, [i]].isin(values[col]) for i, col in enumerate(self.columns)), axis=1)\n    elif isinstance(values, Series):\n        if not values.index.is_unique:\n            raise ValueError('cannot compute isin with a duplicate axis.')\n        return self.eq(values.reindex_like(self), axis='index')\n    elif isinstance(values, DataFrame):\n        if not (values.columns.is_unique and values.index.is_unique):\n            raise ValueError('cannot compute isin with a duplicate axis.')\n        return self.eq(values.reindex_like(self))\n    else:\n        if not is_list_like(values):\n            raise TypeError(f'only list-like or dict-like objects are allowed to be passed to DataFrame.isin(), you passed a {repr(type(values).__name__)}')\n        return DataFrame(algorithms.isin(self.values.ravel(), values).reshape(self.shape), self.index, self.columns)",
                            "def _verbose_repr():\n    lines.append(f'Data columns (total {len(self.columns)} columns):')\n    space = max((len(pprint_thing(k)) for k in self.columns)) + 4\n    counts = None\n    tmpl = '{count}{dtype}'\n    if show_counts:\n        counts = self.count()\n        if len(cols) != len(counts):\n            raise AssertionError(f'Columns must equal counts ({len(cols)} != {len(counts)})')\n        tmpl = '{count} non-null {dtype}'\n    dtypes = self.dtypes\n    for i, col in enumerate(self.columns):\n        dtype = dtypes.iloc[i]\n        col = pprint_thing(col)\n        count = ''\n        if show_counts:\n            count = counts.iloc[i]\n        lines.append(_put_str(col, space) + tmpl.format(count=count, dtype=dtype))",
                            "def _non_verbose_repr():\n    lines.append(self.columns._summary(name='Columns'))",
                            "def _sizeof_fmt(num, size_qualifier):\n    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if num < 1024.0:\n            return f'{num:3.1f}{size_qualifier} {x}'\n        num /= 1024.0\n    return f'{num:3.1f}{size_qualifier} PB'",
                            "def extract_unique_dtypes_from_dtypes_set(dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray) -> List[Dtype]:\n    extracted_dtypes = [unique_dtype for unique_dtype in unique_dtypes if issubclass(unique_dtype.type, tuple(dtypes_set))]\n    return extracted_dtypes",
                            "def reindexer(value):\n    if value.index.equals(self.index) or not len(self.index):\n        value = value._values.copy()\n    else:\n        try:\n            value = value.reindex(self.index)._values\n        except ValueError as err:\n            if not value.index.is_unique:\n                raise err\n            raise TypeError('incompatible index of inserted column with frame index')\n    return value",
                            "def _maybe_casted_values(index, labels=None):\n    values = index._values\n    if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n        if values.dtype == np.object_:\n            values = lib.maybe_convert_objects(values)\n    if labels is not None:\n        mask = labels == -1\n        if mask.all():\n            values = np.empty(len(mask))\n            values.fill(np.nan)\n        else:\n            values = values.take(labels)\n            values_type = type(values)\n            values_dtype = values.dtype\n            if issubclass(values_type, DatetimeLikeArray):\n                values = values._data\n            if mask.any():\n                values, _ = maybe_upcast_putmask(values, mask, np.nan)\n            if issubclass(values_type, DatetimeLikeArray):\n                values = values_type(values, dtype=values_dtype)\n    return values",
                            "def f(vals):\n    labels, shape = algorithms.factorize(vals, size_hint=min(len(self), _SIZE_HINT_LIMIT))\n    return (labels.astype('i8', copy=False), len(shape))",
                            "def extract_values(arr):\n    if isinstance(arr, (ABCIndexClass, ABCSeries)):\n        arr = arr._values\n    if needs_i8_conversion(arr):\n        if is_extension_array_dtype(arr.dtype):\n            arr = arr.asi8\n        else:\n            arr = arr.view('i8')\n    return arr",
                            "def combiner(x, y):\n    mask = isna(x)\n    if isinstance(mask, (ABCIndexClass, ABCSeries)):\n        mask = mask._values\n    x_values = extract_values(x)\n    y_values = extract_values(y)\n    if y.name not in self.columns:\n        return y_values\n    return expressions.where(mask, y_values, x_values)",
                            "def infer(x):\n    if x.empty:\n        return lib.map_infer(x, func)\n    return lib.map_infer(x.astype(object).values, func)",
                            "def _dict_round(df, decimals):\n    for col, vals in df.items():\n        try:\n            yield _series_round(vals, decimals[col])\n        except KeyError:\n            yield vals",
                            "def _series_round(s, decimals):\n    if is_integer_dtype(s) or is_float_dtype(s):\n        return s.round(decimals)\n    return s",
                            "def f(x):\n    return op(x, axis=axis, skipna=skipna, **kwds)",
                            "def _get_data(axis_matters):\n    if filter_type is None or filter_type == 'numeric':\n        data = self._get_numeric_data()\n    elif filter_type == 'bool':\n        if axis_matters:\n            data = self._get_bool_data() if axis == 0 else self\n        else:\n            data = self._get_bool_data()\n    else:\n        msg = f'Generating numeric_only data with filter_type {filter_type} not supported.'\n        raise NotImplementedError(msg)\n    return data",
                            "def f(s):\n    return s.mode(dropna=dropna)",
                            "def _arith_op(left, right):\n    left, right = ops.fill_binop(left, right, fill_value)\n    return func(left, right)",
                            "def c(x):\n    return nanops.nancorr(x[0], x[1], method=method)"
                        ],
                        "constructor_variables": [
                            "mgr",
                            "dtype",
                            "values",
                            "columns",
                            "index",
                            "mask",
                            "exc",
                            "data",
                            "data_columns",
                            "arr"
                        ],
                        "class_level_variables": [
                            "_typ",
                            "_constructor_sliced",
                            "_deprecations",
                            "_accessors",
                            "T",
                            "_agg_summary_and_see_also_doc",
                            "_agg_examples_doc",
                            "agg",
                            "plot",
                            "hist",
                            "boxplot",
                            "sparse"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "_constructor(self) -> Type['DataFrame']",
                            "_constructor_expanddim(self)",
                            "__init__(self, data=None, index: Optional[Axes]=None, columns: Optional[Axes]=None, dtype: Optional[Dtype]=None, copy: bool=False)",
                            "axes(self) -> List[Index]",
                            "shape(self) -> Tuple[int, int]",
                            "_is_homogeneous_type(self) -> bool",
                            "_repr_fits_vertical_(self) -> bool",
                            "_repr_fits_horizontal_(self, ignore_width: bool=False) -> bool",
                            "_info_repr(self) -> bool",
                            "__repr__(self) -> str",
                            "_repr_html_(self) -> Optional[str]",
                            "to_string(self, buf: Optional[FilePathOrBuffer[str]]=None, columns: Optional[Sequence[str]]=None, col_space: Optional[int]=None, header: Union[bool, Sequence[str]]=True, index: bool=True, na_rep: str='NaN', formatters: Optional[fmt.formatters_type]=None, float_format: Optional[fmt.float_format_type]=None, sparsify: Optional[bool]=None, index_names: bool=True, justify: Optional[str]=None, max_rows: Optional[int]=None, min_rows: Optional[int]=None, max_cols: Optional[int]=None, show_dimensions: bool=False, decimal: str='.', line_width: Optional[int]=None, max_colwidth: Optional[int]=None, encoding: Optional[str]=None) -> Optional[str]",
                            "style(self)",
                            "items(self) -> Iterable[Tuple[Optional[Hashable], Series]]",
                            "iteritems(self)",
                            "iterrows(self)",
                            "itertuples(self, index=True, name='Pandas')",
                            "__len__(self) -> int",
                            "dot(self, other)",
                            "__matmul__(self, other)",
                            "__rmatmul__(self, other)",
                            "from_dict(cls, data, orient='columns', dtype=None, columns=None)",
                            "to_numpy(self, dtype=None, copy=False)",
                            "to_dict(self, orient='dict', into=dict)",
                            "to_gbq(self, destination_table, project_id=None, chunksize=None, reauth=False, if_exists='fail', auth_local_webserver=False, table_schema=None, location=None, progress_bar=True, credentials=None)",
                            "from_records(cls, data, index=None, exclude=None, columns=None, coerce_float=False, nrows=None)",
                            "to_records(self, index=True, column_dtypes=None, index_dtypes=None)",
                            "_from_arrays(cls, arrays, columns, index, dtype=None)",
                            "to_stata(self, path, convert_dates=None, write_index=True, byteorder=None, time_stamp=None, data_label=None, variable_labels=None, version=114, convert_strl=None)",
                            "to_feather(self, path)",
                            "to_parquet(self, path, engine='auto', compression='snappy', index=None, partition_cols=None, **kwargs)",
                            "to_html(self, buf=None, columns=None, col_space=None, header=True, index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=None, index_names=True, justify=None, max_rows=None, max_cols=None, show_dimensions=False, decimal='.', bold_rows=True, classes=None, escape=True, notebook=False, border=None, table_id=None, render_links=False, encoding=None)",
                            "info(self, verbose=None, buf=None, max_cols=None, memory_usage=None, null_counts=None)",
                            "memory_usage(self, index=True, deep=False)",
                            "transpose(self, *args, **kwargs)",
                            "_ixs(self, i: int, axis: int=0)",
                            "__getitem__(self, key)",
                            "_getitem_bool_array(self, key)",
                            "_getitem_multilevel(self, key)",
                            "_get_value(self, index, col, takeable: bool=False)",
                            "__setitem__(self, key, value)",
                            "_setitem_slice(self, key, value)",
                            "_setitem_array(self, key, value)",
                            "_setitem_frame(self, key, value)",
                            "_set_item(self, key, value)",
                            "_set_value(self, index, col, value, takeable: bool=False)",
                            "_ensure_valid_index(self, value)",
                            "_box_item_values(self, key, values)",
                            "_box_col_values(self, values, items)",
                            "query(self, expr, inplace=False, **kwargs)",
                            "eval(self, expr, inplace=False, **kwargs)",
                            "select_dtypes(self, include=None, exclude=None)",
                            "insert(self, loc, column, value, allow_duplicates=False)",
                            "assign(self, **kwargs)",
                            "_sanitize_column(self, key, value, broadcast=True)",
                            "_series(self)",
                            "lookup(self, row_labels, col_labels)",
                            "_reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy)",
                            "_reindex_index(self, new_index, method, copy, level, fill_value=np.nan, limit=None, tolerance=None)",
                            "_reindex_columns(self, new_columns, method, copy, level, fill_value=None, limit=None, tolerance=None)",
                            "_reindex_multi(self, axes, copy, fill_value)",
                            "align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)",
                            "reindex(self, *args, **kwargs)",
                            "drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise')",
                            "rename(self, *args, **kwargs)",
                            "fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None, **kwargs)",
                            "replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')",
                            "shift(self, periods=1, freq=None, axis=0, fill_value=None)",
                            "set_index(self, keys, drop=True, append=False, inplace=False, verify_integrity=False)",
                            "reset_index(self, level: Optional[Union[Hashable, Sequence[Hashable]]]=None, drop: bool=False, inplace: bool=False, col_level: Hashable=0, col_fill: Optional[Hashable]='') -> Optional['DataFrame']",
                            "isna(self)",
                            "isnull(self)",
                            "notna(self)",
                            "notnull(self)",
                            "dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False)",
                            "drop_duplicates(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first', inplace: bool=False) -> Optional['DataFrame']",
                            "duplicated(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first') -> 'Series'",
                            "sort_values(self, by, axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')",
                            "sort_index(self, axis=0, level=None, ascending=True, inplace=False, kind='quicksort', na_position='last', sort_remaining=True)",
                            "nlargest(self, n, columns, keep='first')",
                            "nsmallest(self, n, columns, keep='first')",
                            "swaplevel(self, i=-2, j=-1, axis=0)",
                            "reorder_levels(self, order, axis=0)",
                            "_combine_frame(self, other, func, fill_value=None, level=None)",
                            "_combine_match_index(self, other, func)",
                            "_construct_result(self, result) -> 'DataFrame'",
                            "combine(self, other, func, fill_value=None, overwrite=True)",
                            "combine_first(self, other)",
                            "update(self, other, join='left', overwrite=True, filter_func=None, errors='ignore')",
                            "pivot(self, index=None, columns=None, values=None)",
                            "pivot_table(self, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False)",
                            "stack(self, level=-1, dropna=True)",
                            "explode(self, column: Union[str, Tuple]) -> 'DataFrame'",
                            "unstack(self, level=-1, fill_value=None)",
                            "melt(self, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None)",
                            "diff(self, periods=1, axis=0)",
                            "_gotitem(self, key: Union[str, List[str]], ndim: int, subset: Optional[Union[Series, ABCDataFrame]]=None) -> Union[Series, ABCDataFrame]",
                            "aggregate(self, func, axis=0, *args, **kwargs)",
                            "_aggregate(self, arg, axis=0, *args, **kwargs)",
                            "transform(self, func, axis=0, *args, **kwargs)",
                            "apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds)",
                            "applymap(self, func)",
                            "append(self, other, ignore_index=False, verify_integrity=False, sort=False)",
                            "join(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False)",
                            "_join_compat(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False)",
                            "merge(self, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'), copy=True, indicator=False, validate=None)",
                            "round(self, decimals=0, *args, **kwargs)",
                            "corr(self, method='pearson', min_periods=1)",
                            "cov(self, min_periods=None)",
                            "corrwith(self, other, axis=0, drop=False, method='pearson')",
                            "count(self, axis=0, level=None, numeric_only=False)",
                            "_count_level(self, level, axis=0, numeric_only=False)",
                            "_reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
                            "nunique(self, axis=0, dropna=True)",
                            "idxmin(self, axis=0, skipna=True)",
                            "idxmax(self, axis=0, skipna=True)",
                            "_get_agg_axis(self, axis_num)",
                            "mode(self, axis=0, numeric_only=False, dropna=True)",
                            "quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear')",
                            "to_timestamp(self, freq=None, how='start', axis=0, copy=True)",
                            "to_period(self, freq=None, axis=0, copy=True)",
                            "isin(self, values)",
                            "_verbose_repr()",
                            "_non_verbose_repr()",
                            "_sizeof_fmt(num, size_qualifier)",
                            "extract_unique_dtypes_from_dtypes_set(dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray) -> List[Dtype]",
                            "reindexer(value)",
                            "_maybe_casted_values(index, labels=None)",
                            "f(vals)",
                            "extract_values(arr)",
                            "combiner(x, y)",
                            "infer(x)",
                            "_dict_round(df, decimals)",
                            "_series_round(s, decimals)",
                            "f(x)",
                            "_get_data(axis_matters)",
                            "f(s)",
                            "_arith_op(left, right)",
                            "c(x)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(60)]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(60)]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(60)]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 06:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+01:00,                     0\n0 2019-07-19 06:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57\nName: 0, dtype: datetime64[ns]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                    0\n0 2019-07-19 07:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57\nName: 0, dtype: datetime64[ns]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T07:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 07:04:57\nName: 0, dtype: datetime64[ns]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 07:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 07:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                    0\n0 2019-07-19 07:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 07:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T07:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 07:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 07:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                    0\n0 2019-07-19 07:04:57,                     0\n0 2019-07-19 07:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 06:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 06:04:57+00:00,                     0\n0 2019-07-19 06:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T07:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 07:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 07:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T07:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 07:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+00:00,                     0\n0 2019-07-19 07:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 02:04:57-04:00\nName: 0, dtype: datetime64[ns, US/Eastern]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 02:04:57-04:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 02:04:57-04:00\nName: 0, dtype: datetime64[ns, US/Eastern]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 02:04:57-04:00\nName: 0, dtype: datetime64[ns, US/Eastern]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 02:04:57-04:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 06:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 02:04:57-04:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 02:04:57-04:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 02:04:57-04:00,                     0\n0 2019-07-19 06:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57-04:00\nName: 0, dtype: datetime64[ns, US/Eastern]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-04:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57-04:00\nName: 0, dtype: datetime64[ns, US/Eastern]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T11:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 07:04:57-04:00\nName: 0, dtype: datetime64[ns, US/Eastern]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-04:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 11:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-04:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 11:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T11:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 11:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-04:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57-04:00,                     0\n0 2019-07-19 11:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 15:04:57+09:00\nName: 0, dtype: datetime64[ns, Asia/Tokyo]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 15:04:57+09:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 15:04:57+09:00\nName: 0, dtype: datetime64[ns, Asia/Tokyo]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 15:04:57+09:00\nName: 0, dtype: datetime64[ns, Asia/Tokyo]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 15:04:57+09:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 06:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 15:04:57+09:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 15:04:57+09:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 15:04:57+09:00,                     0\n0 2019-07-19 06:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+09:00\nName: 0, dtype: datetime64[ns, Asia/Tokyo]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+09:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+09:00\nName: 0, dtype: datetime64[ns, Asia/Tokyo]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-18T22:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 07:04:57+09:00\nName: 0, dtype: datetime64[ns, Asia/Tokyo]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+09:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-18 22:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+09:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-18 22:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-18T22:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-18 22:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+09:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+09:00,                     0\n0 2019-07-18 22:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-18 23:04:57-07:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-18 23:04:57-07:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-18 23:04:57-07:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-18 23:04:57-07:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-18 23:04:57-07:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 06:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-18 23:04:57-07:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-18 23:04:57-07:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-18 23:04:57-07:00,                     0\n0 2019-07-19 06:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57-07:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-07:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57-07:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T14:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 07:04:57-07:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-07:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 14:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-07:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 14:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T14:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 14:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-07:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57-07:00,                     0\n0 2019-07-19 14:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 14:04:57+08:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 14:04:57+08:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 14:04:57+08:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 14:04:57+08:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 14:04:57+08:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 06:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 14:04:57+08:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 14:04:57+08:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 14:04:57+08:00,                     0\n0 2019-07-19 06:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+08:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+08:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+08:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-18T23:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 07:04:57+08:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+08:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-18 23:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+08:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-18 23:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-18T23:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-18 23:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+08:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+08:00,                     0\n0 2019-07-18 23:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, tzutc()]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, tzutc()]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, tzutc()]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 06:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 06:04:57+00:00,                     0\n0 2019-07-19 06:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, tzutc()]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, tzutc()]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T07:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, tzutc()]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 07:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 07:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T07:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 07:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+00:00,                     0\n0 2019-07-19 07:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, tzlocal()]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, tzlocal()]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, tzlocal()]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 06:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+01:00,                     0\n0 2019-07-19 06:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, tzlocal()]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, tzlocal()]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, tzlocal()]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 06:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+01:00,                     0\n0 2019-07-19 06:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 11:04:57+05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(300)]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 11:04:57+05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 11:04:57+05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(300)]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 11:04:57+05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(300)]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 11:04:57+05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 06:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 11:04:57+05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 11:04:57+05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 11:04:57+05:00,                     0\n0 2019-07-19 06:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(300)]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(300)]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T02:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 07:04:57+05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(300)]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 02:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 02:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T02:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 02:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+05:00,                     0\n0 2019-07-19 02:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 06:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 06:04:57+00:00,                     0\n0 2019-07-19 06:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T07:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 07:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 07:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T07:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 07:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+00:00,                     0\n0 2019-07-19 07:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 01:04:57-05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(-300)]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 01:04:57-05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 01:04:57-05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(-300)]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 01:04:57-05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(-300)]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 01:04:57-05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 06:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 01:04:57-05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 01:04:57-05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 01:04:57-05:00,                     0\n0 2019-07-19 06:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57-05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(-300)]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57-05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(-300)]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T12:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 07:04:57-05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(-300)]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 12:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 12:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T12:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 12:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57-05:00,                     0\n0 2019-07-19 12:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 06:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 06:04:57+00:00,                     0\n0 2019-07-19 06:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T07:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 07:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 07:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T07:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 07:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+00:00,                     0\n0 2019-07-19 07:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, UTC+01:00]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, UTC+01:00]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, UTC+01:00]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 06:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+01:00,                     0\n0 2019-07-19 06:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, UTC+01:00]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, UTC+01:00]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, UTC+01:00]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 06:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+01:00,                     0\n0 2019-07-19 06:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 05:04:57-01:00\nName: 0, dtype: datetime64[ns, foo]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 05:04:57-01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 05:04:57-01:00\nName: 0, dtype: datetime64[ns, foo]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T06:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 05:04:57-01:00\nName: 0, dtype: datetime64[ns, foo]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 05:04:57-01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 06:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 05:04:57-01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T06:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 06:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 05:04:57-01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 05:04:57-01:00,                     0\n0 2019-07-19 06:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57-01:00\nName: 0, dtype: datetime64[ns, foo]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57-01:00\nName: 0, dtype: datetime64[ns, foo]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array(['2019-07-19T08:04:57.000000000'], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of 0   2019-07-19 07:04:57-01:00\nName: 0, dtype: datetime64[ns, foo]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 08:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 08:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.values.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.values": {
                                    "variable_value": "array([['2019-07-19T08:04:57.000000000']], dtype='datetime64[ns]')",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "other._convert": {
                                    "variable_value": "<bound method NDFrame._convert of                     0\n0 2019-07-19 08:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57-01:00,                     0\n0 2019-07-19 08:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x11563e820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(60)]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(60)]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+01:00,                           0\n0 2019-07-19 07:04:57+01:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57\nName: 0, dtype: datetime64[ns]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                    0\n0 2019-07-19 07:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57\nName: 0, dtype: datetime64[ns]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 07:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                    0\n0 2019-07-19 07:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                    0\n0 2019-07-19 07:04:57",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 07:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                     0\n0 2019-07-19 07:04:57>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                    0\n0 2019-07-19 07:04:57,                     0\n0 2019-07-19 07:04:57]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 06:04:57+00:00,                           0\n0 2019-07-19 06:04:57+00:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+00:00,                           0\n0 2019-07-19 07:04:57+00:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 02:04:57-04:00\nName: 0, dtype: datetime64[ns, US/Eastern]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 02:04:57-04:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 02:04:57-04:00\nName: 0, dtype: datetime64[ns, US/Eastern]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 02:04:57-04:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 02:04:57-04:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 02:04:57-04:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 02:04:57-04:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 02:04:57-04:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 02:04:57-04:00,                           0\n0 2019-07-19 02:04:57-04:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57-04:00\nName: 0, dtype: datetime64[ns, US/Eastern]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-04:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57-04:00\nName: 0, dtype: datetime64[ns, US/Eastern]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-04:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-04:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-04:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-04:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-04:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57-04:00,                           0\n0 2019-07-19 07:04:57-04:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 15:04:57+09:00\nName: 0, dtype: datetime64[ns, Asia/Tokyo]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 15:04:57+09:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 15:04:57+09:00\nName: 0, dtype: datetime64[ns, Asia/Tokyo]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 15:04:57+09:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 15:04:57+09:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 15:04:57+09:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 15:04:57+09:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 15:04:57+09:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 15:04:57+09:00,                           0\n0 2019-07-19 15:04:57+09:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+09:00\nName: 0, dtype: datetime64[ns, Asia/Tokyo]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+09:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+09:00\nName: 0, dtype: datetime64[ns, Asia/Tokyo]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+09:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+09:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+09:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+09:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+09:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+09:00,                           0\n0 2019-07-19 07:04:57+09:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-18 23:04:57-07:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-18 23:04:57-07:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-18 23:04:57-07:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-18 23:04:57-07:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-18 23:04:57-07:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-18 23:04:57-07:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-18 23:04:57-07:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-18 23:04:57-07:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-18 23:04:57-07:00,                           0\n0 2019-07-18 23:04:57-07:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57-07:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-07:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57-07:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-07:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-07:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-07:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-07:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-07:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57-07:00,                           0\n0 2019-07-19 07:04:57-07:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 14:04:57+08:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 14:04:57+08:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 14:04:57+08:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 14:04:57+08:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 14:04:57+08:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 14:04:57+08:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 14:04:57+08:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 14:04:57+08:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 14:04:57+08:00,                           0\n0 2019-07-19 14:04:57+08:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+08:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+08:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+08:00\nName: 0, dtype: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+08:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+08:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+08:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+08:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+08:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+08:00,                           0\n0 2019-07-19 07:04:57+08:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, tzutc()]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, tzutc()]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 06:04:57+00:00,                           0\n0 2019-07-19 06:04:57+00:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, tzutc()]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, tzutc()]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+00:00,                           0\n0 2019-07-19 07:04:57+00:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, tzlocal()]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, tzlocal()]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+01:00,                           0\n0 2019-07-19 07:04:57+01:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, tzlocal()]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, tzlocal()]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+01:00,                           0\n0 2019-07-19 07:04:57+01:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 11:04:57+05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(300)]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 11:04:57+05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 11:04:57+05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(300)]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 11:04:57+05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 11:04:57+05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 11:04:57+05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 11:04:57+05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 11:04:57+05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 11:04:57+05:00,                           0\n0 2019-07-19 11:04:57+05:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(300)]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(300)]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+05:00,                           0\n0 2019-07-19 07:04:57+05:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 06:04:57+00:00,                           0\n0 2019-07-19 06:04:57+00:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+00:00,                           0\n0 2019-07-19 07:04:57+00:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 01:04:57-05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(-300)]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 01:04:57-05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 01:04:57-05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(-300)]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 01:04:57-05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 01:04:57-05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 01:04:57-05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 01:04:57-05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 01:04:57-05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 01:04:57-05:00,                           0\n0 2019-07-19 01:04:57-05:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57-05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(-300)]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57-05:00\nName: 0, dtype: datetime64[ns, pytz.FixedOffset(-300)]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-05:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-05:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57-05:00,                           0\n0 2019-07-19 07:04:57-05:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 06:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 06:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 06:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 06:04:57+00:00,                           0\n0 2019-07-19 06:04:57+00:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+00:00\nName: 0, dtype: datetime64[ns, UTC]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+00:00,                           0\n0 2019-07-19 07:04:57+00:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, UTC+01:00]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, UTC+01:00]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+01:00,                           0\n0 2019-07-19 07:04:57+01:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, UTC+01:00]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57+01:00\nName: 0, dtype: datetime64[ns, UTC+01:00]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57+01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57+01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57+01:00,                           0\n0 2019-07-19 07:04:57+01:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 05:04:57-01:00\nName: 0, dtype: datetime64[ns, foo]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 05:04:57-01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 05:04:57-01:00\nName: 0, dtype: datetime64[ns, foo]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 05:04:57-01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 05:04:57-01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 05:04:57-01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 05:04:57-01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 05:04:57-01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 05:04:57-01:00,                           0\n0 2019-07-19 05:04:57-01:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "0   2019-07-19 07:04:57-01:00\nName: 0, dtype: datetime64[ns, foo]",
                                    "variable_type": "Series",
                                    "variable_shape": "(1,)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method Series.reindex of 0   2019-07-19 07:04:57-01:00\nName: 0, dtype: datetime64[ns, foo]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ignore_index": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "self": {
                                    "variable_value": "                          0\n0 2019-07-19 07:04:57-01:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 1)"
                                },
                                "idx_diff": {
                                    "variable_value": "Int64Index([], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(0,)"
                                },
                                "other.index.difference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.index": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(1,)"
                                },
                                "combined_columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "self.columns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.astype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "rename_axis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T.infer_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_frame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": "FrozenList([None])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "self.columns.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.reindex": {
                                    "variable_value": "<bound method DataFrame.reindex of                           0\n0 2019-07-19 07:04:57-01:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.columns.get_indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(1,)"
                                },
                                "to_concat": {
                                    "variable_value": "[                          0\n0 2019-07-19 07:04:57-01:00,                           0\n0 2019-07-19 07:04:57-01:00]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "concat": {
                                    "variable_value": "<function concat at 0x115d43820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "verify_integrity": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sort": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _from_nested_dict(data):\n    # TODO: this should be seriously cythonized\n    new_data = {}\n    for index, s in data.items():\n        for col, v in s.items():\n            new_data[col] = new_data.get(col, {})\n            new_data[col][index] = v\n    return new_data",
                "def _put_str(s, space):\n    return str(s)[:space].ljust(space)",
                "@property\ndef _constructor(self) -> Type[\"DataFrame\"]:\n    return DataFrame",
                "@property\ndef _constructor_expanddim(self):\n    raise NotImplementedError(\"Not supported for DataFrames!\")",
                "def __init__(\n    self,\n    data=None,\n    index: Optional[Axes] = None,\n    columns: Optional[Axes] = None,\n    dtype: Optional[Dtype] = None,\n    copy: bool = False,\n):\n    if data is None:\n        data = {}\n    if dtype is not None:\n        dtype = self._validate_dtype(dtype)\n\n    if isinstance(data, DataFrame):\n        data = data._data\n\n    if isinstance(data, BlockManager):\n        mgr = self._init_mgr(\n            data, axes=dict(index=index, columns=columns), dtype=dtype, copy=copy\n        )\n    elif isinstance(data, dict):\n        mgr = init_dict(data, index, columns, dtype=dtype)\n    elif isinstance(data, ma.MaskedArray):\n        import numpy.ma.mrecords as mrecords\n\n        # masked recarray\n        if isinstance(data, mrecords.MaskedRecords):\n            mgr = masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n\n        # a masked array\n        else:\n            mask = ma.getmaskarray(data)\n            if mask.any():\n                data, fill_value = maybe_upcast(data, copy=True)\n                data.soften_mask()  # set hardmask False if it was True\n                data[mask] = fill_value\n            else:\n                data = data.copy()\n            mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n    elif isinstance(data, (np.ndarray, Series, Index)):\n        if data.dtype.names:\n            data_columns = list(data.dtype.names)\n            data = {k: data[k] for k in data_columns}\n            if columns is None:\n                columns = data_columns\n            mgr = init_dict(data, index, columns, dtype=dtype)\n        elif getattr(data, \"name\", None) is not None:\n            mgr = init_dict({data.name: data}, index, columns, dtype=dtype)\n        else:\n            mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n    # For data is list-like, or Iterable (will consume into list)\n    elif isinstance(data, abc.Iterable) and not isinstance(data, (str, bytes)):\n        if not isinstance(data, (abc.Sequence, ExtensionArray)):\n            data = list(data)\n        if len(data) > 0:\n            if is_list_like(data[0]) and getattr(data[0], \"ndim\", 1) == 1:\n                if is_named_tuple(data[0]) and columns is None:\n                    columns = data[0]._fields\n                arrays, columns = to_arrays(data, columns, dtype=dtype)\n                columns = ensure_index(columns)\n\n                # set the index\n                if index is None:\n                    if isinstance(data[0], Series):\n                        index = get_names_from_index(data)\n                    elif isinstance(data[0], Categorical):\n                        index = ibase.default_index(len(data[0]))\n                    else:\n                        index = ibase.default_index(len(data))\n\n                mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n            else:\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n        else:\n            mgr = init_dict({}, index, columns, dtype=dtype)\n    else:\n        try:\n            arr = np.array(data, dtype=dtype, copy=copy)\n        except (ValueError, TypeError) as e:\n            exc = TypeError(\n                \"DataFrame constructor called with \"\n                f\"incompatible data and dtype: {e}\"\n            )\n            raise exc from e\n\n        if arr.ndim == 0 and index is not None and columns is not None:\n            values = cast_scalar_to_array(\n                (len(index), len(columns)), data, dtype=dtype\n            )\n            mgr = init_ndarray(\n                values, index, columns, dtype=values.dtype, copy=False\n            )\n        else:\n            raise ValueError(\"DataFrame constructor not properly called!\")\n\n    NDFrame.__init__(self, mgr, fastpath=True)",
                "@property\ndef axes(self) -> List[Index]:\n    \"\"\"\n    Return a list representing the axes of the DataFrame.\n\n    It has the row axis labels and column axis labels as the only members.\n    They are returned in that order.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.axes\n    [RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],\n    dtype='object')]\n    \"\"\"\n    return [self.index, self.columns]",
                "@property\ndef shape(self) -> Tuple[int, int]:\n    \"\"\"\n    Return a tuple representing the dimensionality of the DataFrame.\n\n    See Also\n    --------\n    ndarray.shape\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.shape\n    (2, 2)\n\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n    ...                    'col3': [5, 6]})\n    >>> df.shape\n    (2, 3)\n    \"\"\"\n    return len(self.index), len(self.columns)",
                "@property\ndef _is_homogeneous_type(self) -> bool:\n    \"\"\"\n    Whether all the columns in a DataFrame have the same type.\n\n    Returns\n    -------\n    bool\n\n    See Also\n    --------\n    Index._is_homogeneous_type : Whether the object has a single\n        dtype.\n    MultiIndex._is_homogeneous_type : Whether all the levels of a\n        MultiIndex have the same dtype.\n\n    Examples\n    --------\n    >>> DataFrame({\"A\": [1, 2], \"B\": [3, 4]})._is_homogeneous_type\n    True\n    >>> DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.0]})._is_homogeneous_type\n    False\n\n    Items with the same type but different sizes are considered\n    different types.\n\n    >>> DataFrame({\n    ...    \"A\": np.array([1, 2], dtype=np.int32),\n    ...    \"B\": np.array([1, 2], dtype=np.int64)})._is_homogeneous_type\n    False\n    \"\"\"\n    if self._data.any_extension_types:\n        return len({block.dtype for block in self._data.blocks}) == 1\n    else:\n        return not self._data.is_mixed_type",
                "def _repr_fits_vertical_(self) -> bool:\n    \"\"\"\n    Check length against max_rows.\n    \"\"\"\n    max_rows = get_option(\"display.max_rows\")\n    return len(self) <= max_rows",
                "def _repr_fits_horizontal_(self, ignore_width: bool = False) -> bool:\n    \"\"\"\n    Check if full repr fits in horizontal boundaries imposed by the display\n    options width and max_columns.\n\n    In case off non-interactive session, no boundaries apply.\n\n    `ignore_width` is here so ipnb+HTML output can behave the way\n    users expect. display.max_columns remains in effect.\n    GH3541, GH3573\n    \"\"\"\n    width, height = console.get_console_size()\n    max_columns = get_option(\"display.max_columns\")\n    nb_columns = len(self.columns)\n\n    # exceed max columns\n    if (max_columns and nb_columns > max_columns) or (\n        (not ignore_width) and width and nb_columns > (width // 2)\n    ):\n        return False\n\n    # used by repr_html under IPython notebook or scripts ignore terminal\n    # dims\n    if ignore_width or not console.in_interactive_session():\n        return True\n\n    if get_option(\"display.width\") is not None or console.in_ipython_frontend():\n        # check at least the column row for excessive width\n        max_rows = 1\n    else:\n        max_rows = get_option(\"display.max_rows\")\n\n    # when auto-detecting, so width=None and not in ipython front end\n    # check whether repr fits horizontal by actually checking\n    # the width of the rendered repr\n    buf = StringIO()\n\n    # only care about the stuff we'll actually print out\n    # and to_string on entire frame may be expensive\n    d = self\n\n    if not (max_rows is None):  # unlimited rows\n        # min of two, where one may be None\n        d = d.iloc[: min(max_rows, len(d))]\n    else:\n        return True\n\n    d.to_string(buf=buf)\n    value = buf.getvalue()\n    repr_width = max(len(l) for l in value.split(\"\\n\"))\n\n    return repr_width < width",
                "def _info_repr(self) -> bool:\n    \"\"\"\n    True if the repr should show the info view.\n    \"\"\"\n    info_repr_option = get_option(\"display.large_repr\") == \"info\"\n    return info_repr_option and not (\n        self._repr_fits_horizontal_() and self._repr_fits_vertical_()\n    )",
                "def __repr__(self) -> str:\n    \"\"\"\n    Return a string representation for a particular DataFrame.\n    \"\"\"\n    buf = StringIO(\"\")\n    if self._info_repr():\n        self.info(buf=buf)\n        return buf.getvalue()\n\n    max_rows = get_option(\"display.max_rows\")\n    min_rows = get_option(\"display.min_rows\")\n    max_cols = get_option(\"display.max_columns\")\n    max_colwidth = get_option(\"display.max_colwidth\")\n    show_dimensions = get_option(\"display.show_dimensions\")\n    if get_option(\"display.expand_frame_repr\"):\n        width, _ = console.get_console_size()\n    else:\n        width = None\n    self.to_string(\n        buf=buf,\n        max_rows=max_rows,\n        min_rows=min_rows,\n        max_cols=max_cols,\n        line_width=width,\n        max_colwidth=max_colwidth,\n        show_dimensions=show_dimensions,\n    )\n\n    return buf.getvalue()",
                "def _repr_html_(self) -> Optional[str]:\n    \"\"\"\n    Return a html representation for a particular DataFrame.\n\n    Mainly for IPython notebook.\n    \"\"\"\n    if self._info_repr():\n        buf = StringIO(\"\")\n        self.info(buf=buf)\n        # need to escape the <class>, should be the first line.\n        val = buf.getvalue().replace(\"<\", r\"&lt;\", 1)\n        val = val.replace(\">\", r\"&gt;\", 1)\n        return \"<pre>\" + val + \"</pre>\"\n\n    if get_option(\"display.notebook_repr_html\"):\n        max_rows = get_option(\"display.max_rows\")\n        min_rows = get_option(\"display.min_rows\")\n        max_cols = get_option(\"display.max_columns\")\n        show_dimensions = get_option(\"display.show_dimensions\")\n\n        formatter = fmt.DataFrameFormatter(\n            self,\n            columns=None,\n            col_space=None,\n            na_rep=\"NaN\",\n            formatters=None,\n            float_format=None,\n            sparsify=None,\n            justify=None,\n            index_names=True,\n            header=True,\n            index=True,\n            bold_rows=True,\n            escape=True,\n            max_rows=max_rows,\n            min_rows=min_rows,\n            max_cols=max_cols,\n            show_dimensions=show_dimensions,\n            decimal=\".\",\n            table_id=None,\n            render_links=False,\n        )\n        return formatter.to_html(notebook=True)\n    else:\n        return None",
                "@Substitution(\n    header_type=\"bool or sequence\",\n    header=\"Write out the column names. If a list of strings \"\n    \"is given, it is assumed to be aliases for the \"\n    \"column names\",\n    col_space_type=\"int\",\n    col_space=\"The minimum width of each column\",\n)\n@Substitution(shared_params=fmt.common_docstring, returns=fmt.return_docstring)\ndef to_string(\n    self,\n    buf: Optional[FilePathOrBuffer[str]] = None,\n    columns: Optional[Sequence[str]] = None,\n    col_space: Optional[int] = None,\n    header: Union[bool, Sequence[str]] = True,\n    index: bool = True,\n    na_rep: str = \"NaN\",\n    formatters: Optional[fmt.formatters_type] = None,\n    float_format: Optional[fmt.float_format_type] = None,\n    sparsify: Optional[bool] = None,\n    index_names: bool = True,\n    justify: Optional[str] = None,\n    max_rows: Optional[int] = None,\n    min_rows: Optional[int] = None,\n    max_cols: Optional[int] = None,\n    show_dimensions: bool = False,\n    decimal: str = \".\",\n    line_width: Optional[int] = None,\n    max_colwidth: Optional[int] = None,\n    encoding: Optional[str] = None,\n) -> Optional[str]:\n    \"\"\"\n    Render a DataFrame to a console-friendly tabular output.\n    %(shared_params)s\n    line_width : int, optional\n        Width to wrap a line in characters.\n    max_colwidth : int, optional\n        Max width to truncate each column in characters. By default, no limit.\n\n        .. versionadded:: 1.0.0\n    encoding : str, default \"utf-8\"\n        Set character encoding.\n\n        .. versionadded:: 1.0\n    %(returns)s\n    See Also\n    --------\n    to_html : Convert DataFrame to HTML.\n\n    Examples\n    --------\n    >>> d = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}\n    >>> df = pd.DataFrame(d)\n    >>> print(df.to_string())\n       col1  col2\n    0     1     4\n    1     2     5\n    2     3     6\n    \"\"\"\n\n    from pandas import option_context\n\n    with option_context(\"display.max_colwidth\", max_colwidth):\n        formatter = fmt.DataFrameFormatter(\n            self,\n            columns=columns,\n            col_space=col_space,\n            na_rep=na_rep,\n            formatters=formatters,\n            float_format=float_format,\n            sparsify=sparsify,\n            justify=justify,\n            index_names=index_names,\n            header=header,\n            index=index,\n            min_rows=min_rows,\n            max_rows=max_rows,\n            max_cols=max_cols,\n            show_dimensions=show_dimensions,\n            decimal=decimal,\n            line_width=line_width,\n        )\n        return formatter.to_string(buf=buf, encoding=encoding)",
                "@property\ndef style(self):\n    \"\"\"\n    Returns a Styler object.\n\n    Contains methods for building a styled HTML representation of the DataFrame.\n    a styled HTML representation fo the DataFrame.\n\n    See Also\n    --------\n    io.formats.style.Styler\n    \"\"\"\n    from pandas.io.formats.style import Styler\n\n    return Styler(self)",
                "@Appender(_shared_docs[\"items\"])\ndef items(self) -> Iterable[Tuple[Optional[Hashable], Series]]:\n    if self.columns.is_unique and hasattr(self, \"_item_cache\"):\n        for k in self.columns:\n            yield k, self._get_item_cache(k)\n    else:\n        for i, k in enumerate(self.columns):\n            yield k, self._ixs(i, axis=1)",
                "@Appender(_shared_docs[\"items\"])\ndef iteritems(self):\n    yield from self.items()",
                "def iterrows(self):\n    \"\"\"\n    Iterate over DataFrame rows as (index, Series) pairs.\n\n    Yields\n    ------\n    index : label or tuple of label\n        The index of the row. A tuple for a `MultiIndex`.\n    data : Series\n        The data of the row as a Series.\n\n    it : generator\n        A generator that iterates over the rows of the frame.\n\n    See Also\n    --------\n    DataFrame.itertuples : Iterate over DataFrame rows as namedtuples of the values.\n    DataFrame.items : Iterate over (column name, Series) pairs.\n\n    Notes\n    -----\n\n    1. Because ``iterrows`` returns a Series for each row,\n       it does **not** preserve dtypes across the rows (dtypes are\n       preserved across columns for DataFrames). For example,\n\n       >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n       >>> row = next(df.iterrows())[1]\n       >>> row\n       int      1.0\n       float    1.5\n       Name: 0, dtype: float64\n       >>> print(row['int'].dtype)\n       float64\n       >>> print(df['int'].dtype)\n       int64\n\n       To preserve dtypes while iterating over the rows, it is better\n       to use :meth:`itertuples` which returns namedtuples of the values\n       and which is generally faster than ``iterrows``.\n\n    2. You should **never modify** something you are iterating over.\n       This is not guaranteed to work in all cases. Depending on the\n       data types, the iterator returns a copy and not a view, and writing\n       to it will have no effect.\n    \"\"\"\n    columns = self.columns\n    klass = self._constructor_sliced\n    for k, v in zip(self.index, self.values):\n        s = klass(v, index=columns, name=k)\n        yield k, s",
                "def itertuples(self, index=True, name=\"Pandas\"):\n    \"\"\"\n    Iterate over DataFrame rows as namedtuples.\n\n    Parameters\n    ----------\n    index : bool, default True\n        If True, return the index as the first element of the tuple.\n    name : str or None, default \"Pandas\"\n        The name of the returned namedtuples or None to return regular\n        tuples.\n\n    Returns\n    -------\n    iterator\n        An object to iterate over namedtuples for each row in the\n        DataFrame with the first field possibly being the index and\n        following fields being the column values.\n\n    See Also\n    --------\n    DataFrame.iterrows : Iterate over DataFrame rows as (index, Series)\n        pairs.\n    DataFrame.items : Iterate over (column name, Series) pairs.\n\n    Notes\n    -----\n    The column names will be renamed to positional names if they are\n    invalid Python identifiers, repeated, or start with an underscore.\n    With a large number of columns (>255), regular tuples are returned.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'num_legs': [4, 2], 'num_wings': [0, 2]},\n    ...                   index=['dog', 'hawk'])\n    >>> df\n          num_legs  num_wings\n    dog          4          0\n    hawk         2          2\n    >>> for row in df.itertuples():\n    ...     print(row)\n    ...\n    Pandas(Index='dog', num_legs=4, num_wings=0)\n    Pandas(Index='hawk', num_legs=2, num_wings=2)\n\n    By setting the `index` parameter to False we can remove the index\n    as the first element of the tuple:\n\n    >>> for row in df.itertuples(index=False):\n    ...     print(row)\n    ...\n    Pandas(num_legs=4, num_wings=0)\n    Pandas(num_legs=2, num_wings=2)\n\n    With the `name` parameter set we set a custom name for the yielded\n    namedtuples:\n\n    >>> for row in df.itertuples(name='Animal'):\n    ...     print(row)\n    ...\n    Animal(Index='dog', num_legs=4, num_wings=0)\n    Animal(Index='hawk', num_legs=2, num_wings=2)\n    \"\"\"\n    arrays = []\n    fields = list(self.columns)\n    if index:\n        arrays.append(self.index)\n        fields.insert(0, \"Index\")\n\n    # use integer indexing because of possible duplicate column names\n    arrays.extend(self.iloc[:, k] for k in range(len(self.columns)))\n\n    # Python 3 supports at most 255 arguments to constructor\n    if name is not None and len(self.columns) + index < 256:\n        itertuple = collections.namedtuple(name, fields, rename=True)\n        return map(itertuple._make, zip(*arrays))\n\n    # fallback to regular tuples\n    return zip(*arrays)",
                "def __len__(self) -> int:\n    \"\"\"\n    Returns length of info axis, but here we use the index.\n    \"\"\"\n    return len(self.index)",
                "def dot(self, other):\n    \"\"\"\n    Compute the matrix multiplication between the DataFrame and other.\n\n    This method computes the matrix product between the DataFrame and the\n    values of an other Series, DataFrame or a numpy array.\n\n    It can also be called using ``self @ other`` in Python >= 3.5.\n\n    Parameters\n    ----------\n    other : Series, DataFrame or array-like\n        The other object to compute the matrix product with.\n\n    Returns\n    -------\n    Series or DataFrame\n        If other is a Series, return the matrix product between self and\n        other as a Serie. If other is a DataFrame or a numpy.array, return\n        the matrix product of self and other in a DataFrame of a np.array.\n\n    See Also\n    --------\n    Series.dot: Similar method for Series.\n\n    Notes\n    -----\n    The dimensions of DataFrame and other must be compatible in order to\n    compute the matrix multiplication. In addition, the column names of\n    DataFrame and the index of other must contain the same values, as they\n    will be aligned prior to the multiplication.\n\n    The dot method for Series computes the inner product, instead of the\n    matrix product here.\n\n    Examples\n    --------\n    Here we multiply a DataFrame with a Series.\n\n    >>> df = pd.DataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])\n    >>> s = pd.Series([1, 1, 2, 1])\n    >>> df.dot(s)\n    0    -4\n    1     5\n    dtype: int64\n\n    Here we multiply a DataFrame with another DataFrame.\n\n    >>> other = pd.DataFrame([[0, 1], [1, 2], [-1, -1], [2, 0]])\n    >>> df.dot(other)\n        0   1\n    0   1   4\n    1   2   2\n\n    Note that the dot method give the same result as @\n\n    >>> df @ other\n        0   1\n    0   1   4\n    1   2   2\n\n    The dot method works also if other is an np.array.\n\n    >>> arr = np.array([[0, 1], [1, 2], [-1, -1], [2, 0]])\n    >>> df.dot(arr)\n        0   1\n    0   1   4\n    1   2   2\n\n    Note how shuffling of the objects does not change the result.\n\n    >>> s2 = s.reindex([1, 0, 2, 3])\n    >>> df.dot(s2)\n    0    -4\n    1     5\n    dtype: int64\n    \"\"\"\n    if isinstance(other, (Series, DataFrame)):\n        common = self.columns.union(other.index)\n        if len(common) > len(self.columns) or len(common) > len(other.index):\n            raise ValueError(\"matrices are not aligned\")\n\n        left = self.reindex(columns=common, copy=False)\n        right = other.reindex(index=common, copy=False)\n        lvals = left.values\n        rvals = right.values\n    else:\n        left = self\n        lvals = self.values\n        rvals = np.asarray(other)\n        if lvals.shape[1] != rvals.shape[0]:\n            raise ValueError(\n                f\"Dot product shape mismatch, {lvals.shape} vs {rvals.shape}\"\n            )\n\n    if isinstance(other, DataFrame):\n        return self._constructor(\n            np.dot(lvals, rvals), index=left.index, columns=other.columns\n        )\n    elif isinstance(other, Series):\n        return Series(np.dot(lvals, rvals), index=left.index)\n    elif isinstance(rvals, (np.ndarray, Index)):\n        result = np.dot(lvals, rvals)\n        if result.ndim == 2:\n            return self._constructor(result, index=left.index)\n        else:\n            return Series(result, index=left.index)\n    else:  # pragma: no cover\n        raise TypeError(f\"unsupported type: {type(other)}\")",
                "def __matmul__(self, other):\n    \"\"\"\n    Matrix multiplication using binary `@` operator in Python>=3.5.\n    \"\"\"\n    return self.dot(other)",
                "def __rmatmul__(self, other):\n    \"\"\"\n    Matrix multiplication using binary `@` operator in Python>=3.5.\n    \"\"\"\n    return self.T.dot(np.transpose(other)).T",
                "@classmethod\ndef from_dict(cls, data, orient=\"columns\", dtype=None, columns=None):\n    \"\"\"\n    Construct DataFrame from dict of array-like or dicts.\n\n    Creates DataFrame object from dictionary by columns or by index\n    allowing dtype specification.\n\n    Parameters\n    ----------\n    data : dict\n        Of the form {field : array-like} or {field : dict}.\n    orient : {'columns', 'index'}, default 'columns'\n        The \"orientation\" of the data. If the keys of the passed dict\n        should be the columns of the resulting DataFrame, pass 'columns'\n        (default). Otherwise if the keys should be rows, pass 'index'.\n    dtype : dtype, default None\n        Data type to force, otherwise infer.\n    columns : list, default None\n        Column labels to use when ``orient='index'``. Raises a ValueError\n        if used with ``orient='columns'``.\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.from_records : DataFrame from ndarray (structured\n        dtype), list of tuples, dict, or DataFrame.\n    DataFrame : DataFrame object creation using constructor.\n\n    Examples\n    --------\n    By default the keys of the dict become the DataFrame columns:\n\n    >>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n    >>> pd.DataFrame.from_dict(data)\n       col_1 col_2\n    0      3     a\n    1      2     b\n    2      1     c\n    3      0     d\n\n    Specify ``orient='index'`` to create the DataFrame using dictionary\n    keys as rows:\n\n    >>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n    >>> pd.DataFrame.from_dict(data, orient='index')\n           0  1  2  3\n    row_1  3  2  1  0\n    row_2  a  b  c  d\n\n    When using the 'index' orientation, the column names can be\n    specified manually:\n\n    >>> pd.DataFrame.from_dict(data, orient='index',\n    ...                        columns=['A', 'B', 'C', 'D'])\n           A  B  C  D\n    row_1  3  2  1  0\n    row_2  a  b  c  d\n    \"\"\"\n    index = None\n    orient = orient.lower()\n    if orient == \"index\":\n        if len(data) > 0:\n            # TODO speed up Series case\n            if isinstance(list(data.values())[0], (Series, dict)):\n                data = _from_nested_dict(data)\n            else:\n                data, index = list(data.values()), list(data.keys())\n    elif orient == \"columns\":\n        if columns is not None:\n            raise ValueError(\"cannot use columns parameter with orient='columns'\")\n    else:  # pragma: no cover\n        raise ValueError(\"only recognize index or columns for orient\")\n\n    return cls(data, index=index, columns=columns, dtype=dtype)",
                "def to_numpy(self, dtype=None, copy=False):\n    \"\"\"\n    Convert the DataFrame to a NumPy array.\n\n    .. versionadded:: 0.24.0\n\n    By default, the dtype of the returned array will be the common NumPy\n    dtype of all types in the DataFrame. For example, if the dtypes are\n    ``float16`` and ``float32``, the results dtype will be ``float32``.\n    This may require copying data and coercing values, which may be\n    expensive.\n\n    Parameters\n    ----------\n    dtype : str or numpy.dtype, optional\n        The dtype to pass to :meth:`numpy.asarray`.\n    copy : bool, default False\n        Whether to ensure that the returned value is a not a view on\n        another array. Note that ``copy=False`` does not *ensure* that\n        ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n        a copy is made, even if not strictly necessary.\n\n    Returns\n    -------\n    numpy.ndarray\n\n    See Also\n    --------\n    Series.to_numpy : Similar method for Series.\n\n    Examples\n    --------\n    >>> pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]}).to_numpy()\n    array([[1, 3],\n           [2, 4]])\n\n    With heterogeneous data, the lowest common type will have to\n    be used.\n\n    >>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.5]})\n    >>> df.to_numpy()\n    array([[1. , 3. ],\n           [2. , 4.5]])\n\n    For a mix of numeric and non-numeric types, the output array will\n    have object dtype.\n\n    >>> df['C'] = pd.date_range('2000', periods=2)\n    >>> df.to_numpy()\n    array([[1, 3.0, Timestamp('2000-01-01 00:00:00')],\n           [2, 4.5, Timestamp('2000-01-02 00:00:00')]], dtype=object)\n    \"\"\"\n    result = np.array(self.values, dtype=dtype, copy=copy)\n    return result",
                "def to_dict(self, orient=\"dict\", into=dict):\n    \"\"\"\n    Convert the DataFrame to a dictionary.\n\n    The type of the key-value pairs can be customized with the parameters\n    (see below).\n\n    Parameters\n    ----------\n    orient : str {'dict', 'list', 'series', 'split', 'records', 'index'}\n        Determines the type of the values of the dictionary.\n\n        - 'dict' (default) : dict like {column -> {index -> value}}\n        - 'list' : dict like {column -> [values]}\n        - 'series' : dict like {column -> Series(values)}\n        - 'split' : dict like\n          {'index' -> [index], 'columns' -> [columns], 'data' -> [values]}\n        - 'records' : list like\n          [{column -> value}, ... , {column -> value}]\n        - 'index' : dict like {index -> {column -> value}}\n\n        Abbreviations are allowed. `s` indicates `series` and `sp`\n        indicates `split`.\n\n    into : class, default dict\n        The collections.abc.Mapping subclass used for all Mappings\n        in the return value.  Can be the actual class or an empty\n        instance of the mapping type you want.  If you want a\n        collections.defaultdict, you must pass it initialized.\n\n        .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    dict, list or collections.abc.Mapping\n        Return a collections.abc.Mapping object representing the DataFrame.\n        The resulting transformation depends on the `orient` parameter.\n\n    See Also\n    --------\n    DataFrame.from_dict: Create a DataFrame from a dictionary.\n    DataFrame.to_json: Convert a DataFrame to JSON format.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2],\n    ...                    'col2': [0.5, 0.75]},\n    ...                   index=['row1', 'row2'])\n    >>> df\n          col1  col2\n    row1     1  0.50\n    row2     2  0.75\n    >>> df.to_dict()\n    {'col1': {'row1': 1, 'row2': 2}, 'col2': {'row1': 0.5, 'row2': 0.75}}\n\n    You can specify the return orientation.\n\n    >>> df.to_dict('series')\n    {'col1': row1    1\n             row2    2\n    Name: col1, dtype: int64,\n    'col2': row1    0.50\n            row2    0.75\n    Name: col2, dtype: float64}\n\n    >>> df.to_dict('split')\n    {'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],\n     'data': [[1, 0.5], [2, 0.75]]}\n\n    >>> df.to_dict('records')\n    [{'col1': 1, 'col2': 0.5}, {'col1': 2, 'col2': 0.75}]\n\n    >>> df.to_dict('index')\n    {'row1': {'col1': 1, 'col2': 0.5}, 'row2': {'col1': 2, 'col2': 0.75}}\n\n    You can also specify the mapping type.\n\n    >>> from collections import OrderedDict, defaultdict\n    >>> df.to_dict(into=OrderedDict)\n    OrderedDict([('col1', OrderedDict([('row1', 1), ('row2', 2)])),\n                 ('col2', OrderedDict([('row1', 0.5), ('row2', 0.75)]))])\n\n    If you want a `defaultdict`, you need to initialize it:\n\n    >>> dd = defaultdict(list)\n    >>> df.to_dict('records', into=dd)\n    [defaultdict(<class 'list'>, {'col1': 1, 'col2': 0.5}),\n     defaultdict(<class 'list'>, {'col1': 2, 'col2': 0.75})]\n    \"\"\"\n    if not self.columns.is_unique:\n        warnings.warn(\n            \"DataFrame columns are not unique, some columns will be omitted.\",\n            UserWarning,\n            stacklevel=2,\n        )\n    # GH16122\n    into_c = com.standardize_mapping(into)\n    if orient.lower().startswith(\"d\"):\n        return into_c((k, v.to_dict(into)) for k, v in self.items())\n    elif orient.lower().startswith(\"l\"):\n        return into_c((k, v.tolist()) for k, v in self.items())\n    elif orient.lower().startswith(\"sp\"):\n        return into_c(\n            (\n                (\"index\", self.index.tolist()),\n                (\"columns\", self.columns.tolist()),\n                (\n                    \"data\",\n                    [\n                        list(map(com.maybe_box_datetimelike, t))\n                        for t in self.itertuples(index=False, name=None)\n                    ],\n                ),\n            )\n        )\n    elif orient.lower().startswith(\"s\"):\n        return into_c((k, com.maybe_box_datetimelike(v)) for k, v in self.items())\n    elif orient.lower().startswith(\"r\"):\n        columns = self.columns.tolist()\n        rows = (\n            dict(zip(columns, row))\n            for row in self.itertuples(index=False, name=None)\n        )\n        return [\n            into_c((k, com.maybe_box_datetimelike(v)) for k, v in row.items())\n            for row in rows\n        ]\n    elif orient.lower().startswith(\"i\"):\n        if not self.index.is_unique:\n            raise ValueError(\"DataFrame index must be unique for orient='index'.\")\n        return into_c(\n            (t[0], dict(zip(self.columns, t[1:])))\n            for t in self.itertuples(name=None)\n        )\n    else:\n        raise ValueError(f\"orient '{orient}' not understood\")",
                "def to_gbq(\n    self,\n    destination_table,\n    project_id=None,\n    chunksize=None,\n    reauth=False,\n    if_exists=\"fail\",\n    auth_local_webserver=False,\n    table_schema=None,\n    location=None,\n    progress_bar=True,\n    credentials=None,\n):\n    \"\"\"\n    Write a DataFrame to a Google BigQuery table.\n\n    This function requires the `pandas-gbq package\n    <https://pandas-gbq.readthedocs.io>`__.\n\n    See the `How to authenticate with Google BigQuery\n    <https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__\n    guide for authentication instructions.\n\n    Parameters\n    ----------\n    destination_table : str\n        Name of table to be written, in the form ``dataset.tablename``.\n    project_id : str, optional\n        Google BigQuery Account project ID. Optional when available from\n        the environment.\n    chunksize : int, optional\n        Number of rows to be inserted in each chunk from the dataframe.\n        Set to ``None`` to load the whole dataframe at once.\n    reauth : bool, default False\n        Force Google BigQuery to re-authenticate the user. This is useful\n        if multiple accounts are used.\n    if_exists : str, default 'fail'\n        Behavior when the destination table exists. Value can be one of:\n\n        ``'fail'``\n            If table exists, do nothing.\n        ``'replace'``\n            If table exists, drop it, recreate it, and insert data.\n        ``'append'``\n            If table exists, insert data. Create if does not exist.\n    auth_local_webserver : bool, default False\n        Use the `local webserver flow`_ instead of the `console flow`_\n        when getting user credentials.\n\n        .. _local webserver flow:\n            http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n        .. _console flow:\n            http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n        *New in version 0.2.0 of pandas-gbq*.\n    table_schema : list of dicts, optional\n        List of BigQuery table fields to which according DataFrame\n        columns conform to, e.g. ``[{'name': 'col1', 'type':\n        'STRING'},...]``. If schema is not provided, it will be\n        generated according to dtypes of DataFrame columns. See\n        BigQuery API documentation on available names of a field.\n\n        *New in version 0.3.1 of pandas-gbq*.\n    location : str, optional\n        Location where the load job should run. See the `BigQuery locations\n        documentation\n        <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a\n        list of available locations. The location must match that of the\n        target dataset.\n\n        *New in version 0.5.0 of pandas-gbq*.\n    progress_bar : bool, default True\n        Use the library `tqdm` to show the progress bar for the upload,\n        chunk by chunk.\n\n        *New in version 0.5.0 of pandas-gbq*.\n    credentials : google.auth.credentials.Credentials, optional\n        Credentials for accessing Google APIs. Use this parameter to\n        override default credentials, such as to use Compute Engine\n        :class:`google.auth.compute_engine.Credentials` or Service\n        Account :class:`google.oauth2.service_account.Credentials`\n        directly.\n\n        *New in version 0.8.0 of pandas-gbq*.\n\n        .. versionadded:: 0.24.0\n\n    See Also\n    --------\n    pandas_gbq.to_gbq : This function in the pandas-gbq library.\n    read_gbq : Read a DataFrame from Google BigQuery.\n    \"\"\"\n    from pandas.io import gbq\n\n    gbq.to_gbq(\n        self,\n        destination_table,\n        project_id=project_id,\n        chunksize=chunksize,\n        reauth=reauth,\n        if_exists=if_exists,\n        auth_local_webserver=auth_local_webserver,\n        table_schema=table_schema,\n        location=location,\n        progress_bar=progress_bar,\n        credentials=credentials,\n    )",
                "@classmethod\ndef from_records(\n    cls,\n    data,\n    index=None,\n    exclude=None,\n    columns=None,\n    coerce_float=False,\n    nrows=None,\n):\n    \"\"\"\n    Convert structured or record ndarray to DataFrame.\n\n    Parameters\n    ----------\n    data : ndarray (structured dtype), list of tuples, dict, or DataFrame\n    index : str, list of fields, array-like\n        Field of array to use as the index, alternately a specific set of\n        input labels to use.\n    exclude : sequence, default None\n        Columns or fields to exclude.\n    columns : sequence, default None\n        Column names to use. If the passed data do not have names\n        associated with them, this argument provides names for the\n        columns. Otherwise this argument indicates the order of the columns\n        in the result (any names not found in the data will become all-NA\n        columns).\n    coerce_float : bool, default False\n        Attempt to convert values of non-string, non-numeric objects (like\n        decimal.Decimal) to floating point, useful for SQL result sets.\n    nrows : int, default None\n        Number of rows to read if data is an iterator.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n\n    # Make a copy of the input columns so we can modify it\n    if columns is not None:\n        columns = ensure_index(columns)\n\n    if is_iterator(data):\n        if nrows == 0:\n            return cls()\n\n        try:\n            first_row = next(data)\n        except StopIteration:\n            return cls(index=index, columns=columns)\n\n        dtype = None\n        if hasattr(first_row, \"dtype\") and first_row.dtype.names:\n            dtype = first_row.dtype\n\n        values = [first_row]\n\n        if nrows is None:\n            values += data\n        else:\n            values.extend(itertools.islice(data, nrows - 1))\n\n        if dtype is not None:\n            data = np.array(values, dtype=dtype)\n        else:\n            data = values\n\n    if isinstance(data, dict):\n        if columns is None:\n            columns = arr_columns = ensure_index(sorted(data))\n            arrays = [data[k] for k in columns]\n        else:\n            arrays = []\n            arr_columns = []\n            for k, v in data.items():\n                if k in columns:\n                    arr_columns.append(k)\n                    arrays.append(v)\n\n            arrays, arr_columns = reorder_arrays(arrays, arr_columns, columns)\n\n    elif isinstance(data, (np.ndarray, DataFrame)):\n        arrays, columns = to_arrays(data, columns)\n        if columns is not None:\n            columns = ensure_index(columns)\n        arr_columns = columns\n    else:\n        arrays, arr_columns = to_arrays(data, columns, coerce_float=coerce_float)\n\n        arr_columns = ensure_index(arr_columns)\n        if columns is not None:\n            columns = ensure_index(columns)\n        else:\n            columns = arr_columns\n\n    if exclude is None:\n        exclude = set()\n    else:\n        exclude = set(exclude)\n\n    result_index = None\n    if index is not None:\n        if isinstance(index, str) or not hasattr(index, \"__iter__\"):\n            i = columns.get_loc(index)\n            exclude.add(index)\n            if len(arrays) > 0:\n                result_index = Index(arrays[i], name=index)\n            else:\n                result_index = Index([], name=index)\n        else:\n            try:\n                index_data = [arrays[arr_columns.get_loc(field)] for field in index]\n            except (KeyError, TypeError):\n                # raised by get_loc, see GH#29258\n                result_index = index\n            else:\n                result_index = ensure_index_from_sequences(index_data, names=index)\n                exclude.update(index)\n\n    if any(exclude):\n        arr_exclude = [x for x in exclude if x in arr_columns]\n        to_remove = [arr_columns.get_loc(col) for col in arr_exclude]\n        arrays = [v for i, v in enumerate(arrays) if i not in to_remove]\n\n        arr_columns = arr_columns.drop(arr_exclude)\n        columns = columns.drop(exclude)\n\n    mgr = arrays_to_mgr(arrays, arr_columns, result_index, columns)\n\n    return cls(mgr)",
                "def to_records(self, index=True, column_dtypes=None, index_dtypes=None):\n    \"\"\"\n    Convert DataFrame to a NumPy record array.\n\n    Index will be included as the first field of the record array if\n    requested.\n\n    Parameters\n    ----------\n    index : bool, default True\n        Include index in resulting record array, stored in 'index'\n        field or using the index label, if set.\n    column_dtypes : str, type, dict, default None\n        .. versionadded:: 0.24.0\n\n        If a string or type, the data type to store all columns. If\n        a dictionary, a mapping of column names and indices (zero-indexed)\n        to specific data types.\n    index_dtypes : str, type, dict, default None\n        .. versionadded:: 0.24.0\n\n        If a string or type, the data type to store all index levels. If\n        a dictionary, a mapping of index level names and indices\n        (zero-indexed) to specific data types.\n\n        This mapping is applied only if `index=True`.\n\n    Returns\n    -------\n    numpy.recarray\n        NumPy ndarray with the DataFrame labels as fields and each row\n        of the DataFrame as entries.\n\n    See Also\n    --------\n    DataFrame.from_records: Convert structured or record ndarray\n        to DataFrame.\n    numpy.recarray: An ndarray that allows field access using\n        attributes, analogous to typed columns in a\n        spreadsheet.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},\n    ...                   index=['a', 'b'])\n    >>> df\n       A     B\n    a  1  0.50\n    b  2  0.75\n    >>> df.to_records()\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n    If the DataFrame index has no label then the recarray field name\n    is set to 'index'. If the index has a label then this is used as the\n    field name:\n\n    >>> df.index = df.index.rename(\"I\")\n    >>> df.to_records()\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('I', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n    The index can be excluded from the record array:\n\n    >>> df.to_records(index=False)\n    rec.array([(1, 0.5 ), (2, 0.75)],\n              dtype=[('A', '<i8'), ('B', '<f8')])\n\n    Data types can be specified for the columns:\n\n    >>> df.to_records(column_dtypes={\"A\": \"int32\"})\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('I', 'O'), ('A', '<i4'), ('B', '<f8')])\n\n    As well as for the index:\n\n    >>> df.to_records(index_dtypes=\"<S2\")\n    rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n              dtype=[('I', 'S2'), ('A', '<i8'), ('B', '<f8')])\n\n    >>> index_dtypes = f\"<S{df.index.str.len().max()}\"\n    >>> df.to_records(index_dtypes=index_dtypes)\n    rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n              dtype=[('I', 'S1'), ('A', '<i8'), ('B', '<f8')])\n    \"\"\"\n\n    if index:\n        if isinstance(self.index, ABCMultiIndex):\n            # array of tuples to numpy cols. copy copy copy\n            ix_vals = list(map(np.array, zip(*self.index.values)))\n        else:\n            ix_vals = [self.index.values]\n\n        arrays = ix_vals + [self[c]._internal_get_values() for c in self.columns]\n\n        count = 0\n        index_names = list(self.index.names)\n\n        if isinstance(self.index, ABCMultiIndex):\n            for i, n in enumerate(index_names):\n                if n is None:\n                    index_names[i] = f\"level_{count}\"\n                    count += 1\n        elif index_names[0] is None:\n            index_names = [\"index\"]\n\n        names = [str(name) for name in itertools.chain(index_names, self.columns)]\n    else:\n        arrays = [self[c]._internal_get_values() for c in self.columns]\n        names = [str(c) for c in self.columns]\n        index_names = []\n\n    index_len = len(index_names)\n    formats = []\n\n    for i, v in enumerate(arrays):\n        index = i\n\n        # When the names and arrays are collected, we\n        # first collect those in the DataFrame's index,\n        # followed by those in its columns.\n        #\n        # Thus, the total length of the array is:\n        # len(index_names) + len(DataFrame.columns).\n        #\n        # This check allows us to see whether we are\n        # handling a name / array in the index or column.\n        if index < index_len:\n            dtype_mapping = index_dtypes\n            name = index_names[index]\n        else:\n            index -= index_len\n            dtype_mapping = column_dtypes\n            name = self.columns[index]\n\n        # We have a dictionary, so we get the data type\n        # associated with the index or column (which can\n        # be denoted by its name in the DataFrame or its\n        # position in DataFrame's array of indices or\n        # columns, whichever is applicable.\n        if is_dict_like(dtype_mapping):\n            if name in dtype_mapping:\n                dtype_mapping = dtype_mapping[name]\n            elif index in dtype_mapping:\n                dtype_mapping = dtype_mapping[index]\n            else:\n                dtype_mapping = None\n\n        # If no mapping can be found, use the array's\n        # dtype attribute for formatting.\n        #\n        # A valid dtype must either be a type or\n        # string naming a type.\n        if dtype_mapping is None:\n            formats.append(v.dtype)\n        elif isinstance(dtype_mapping, (type, np.dtype, str)):\n            formats.append(dtype_mapping)\n        else:\n            element = \"row\" if i < index_len else \"column\"\n            msg = f\"Invalid dtype {dtype_mapping} specified for {element} {name}\"\n            raise ValueError(msg)\n\n    return np.rec.fromarrays(arrays, dtype={\"names\": names, \"formats\": formats})",
                "@classmethod\ndef _from_arrays(cls, arrays, columns, index, dtype=None):\n    mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n    return cls(mgr)",
                "@deprecate_kwarg(old_arg_name=\"fname\", new_arg_name=\"path\")\ndef to_stata(\n    self,\n    path,\n    convert_dates=None,\n    write_index=True,\n    byteorder=None,\n    time_stamp=None,\n    data_label=None,\n    variable_labels=None,\n    version=114,\n    convert_strl=None,\n):\n    \"\"\"\n    Export DataFrame object to Stata dta format.\n\n    Writes the DataFrame to a Stata dataset file.\n    \"dta\" files contain a Stata dataset.\n\n    Parameters\n    ----------\n    path : str, buffer or path object\n        String, path object (pathlib.Path or py._path.local.LocalPath) or\n        object implementing a binary write() function. If using a buffer\n        then the buffer will not be automatically closed after the file\n        data has been written.\n\n        .. versionchanged:: 1.0.0\n\n        Previously this was \"fname\"\n\n    convert_dates : dict\n        Dictionary mapping columns containing datetime types to stata\n        internal format to use when writing the dates. Options are 'tc',\n        'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer\n        or a name. Datetime columns that do not have a conversion type\n        specified will be converted to 'tc'. Raises NotImplementedError if\n        a datetime column has timezone information.\n    write_index : bool\n        Write the index to Stata dataset.\n    byteorder : str\n        Can be \">\", \"<\", \"little\", or \"big\". default is `sys.byteorder`.\n    time_stamp : datetime\n        A datetime to use as file creation date.  Default is the current\n        time.\n    data_label : str, optional\n        A label for the data set.  Must be 80 characters or smaller.\n    variable_labels : dict\n        Dictionary containing columns as keys and variable labels as\n        values. Each label must be 80 characters or smaller.\n    version : {114, 117}, default 114\n        Version to use in the output dta file.  Version 114 can be used\n        read by Stata 10 and later.  Version 117 can be read by Stata 13\n        or later. Version 114 limits string variables to 244 characters or\n        fewer while 117 allows strings with lengths up to 2,000,000\n        characters.\n\n        .. versionadded:: 0.23.0\n\n    convert_strl : list, optional\n        List of column names to convert to string columns to Stata StrL\n        format. Only available if version is 117.  Storing strings in the\n        StrL format can produce smaller dta files if strings have more than\n        8 characters and values are repeated.\n\n        .. versionadded:: 0.23.0\n\n    Raises\n    ------\n    NotImplementedError\n        * If datetimes contain timezone information\n        * Column dtype is not representable in Stata\n    ValueError\n        * Columns listed in convert_dates are neither datetime64[ns]\n          or datetime.datetime\n        * Column listed in convert_dates is not in DataFrame\n        * Categorical label contains more than 32,000 characters\n\n    See Also\n    --------\n    read_stata : Import Stata data files.\n    io.stata.StataWriter : Low-level writer for Stata data files.\n    io.stata.StataWriter117 : Low-level writer for version 117 files.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'animal': ['falcon', 'parrot', 'falcon',\n    ...                               'parrot'],\n    ...                    'speed': [350, 18, 361, 15]})\n    >>> df.to_stata('animals.dta')  # doctest: +SKIP\n    \"\"\"\n    kwargs = {}\n    if version not in (114, 117):\n        raise ValueError(\"Only formats 114 and 117 supported.\")\n    if version == 114:\n        if convert_strl is not None:\n            raise ValueError(\"strl support is only available when using format 117\")\n        from pandas.io.stata import StataWriter as statawriter\n    else:\n        from pandas.io.stata import StataWriter117 as statawriter\n\n        kwargs[\"convert_strl\"] = convert_strl\n\n    writer = statawriter(\n        path,\n        self,\n        convert_dates=convert_dates,\n        byteorder=byteorder,\n        time_stamp=time_stamp,\n        data_label=data_label,\n        write_index=write_index,\n        variable_labels=variable_labels,\n        **kwargs,\n    )\n    writer.write_file()",
                "@deprecate_kwarg(old_arg_name=\"fname\", new_arg_name=\"path\")\ndef to_feather(self, path):\n    \"\"\"\n    Write out the binary feather-format for DataFrames.\n\n    Parameters\n    ----------\n    path : str\n        String file path.\n    \"\"\"\n    from pandas.io.feather_format import to_feather\n\n    to_feather(self, path)",
                "@deprecate_kwarg(old_arg_name=\"fname\", new_arg_name=\"path\")\ndef to_parquet(\n    self,\n    path,\n    engine=\"auto\",\n    compression=\"snappy\",\n    index=None,\n    partition_cols=None,\n    **kwargs,\n):\n    \"\"\"\n    Write a DataFrame to the binary parquet format.\n\n    .. versionadded:: 0.21.0\n\n    This function writes the dataframe as a `parquet file\n    <https://parquet.apache.org/>`_. You can choose different parquet\n    backends, and have the option of compression. See\n    :ref:`the user guide <io.parquet>` for more details.\n\n    Parameters\n    ----------\n    path : str\n        File path or Root Directory path. Will be used as Root Directory\n        path while writing a partitioned dataset.\n\n        .. versionchanged:: 1.0.0\n\n        Previously this was \"fname\"\n\n    engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n        Parquet library to use. If 'auto', then the option\n        ``io.parquet.engine`` is used. The default ``io.parquet.engine``\n        behavior is to try 'pyarrow', falling back to 'fastparquet' if\n        'pyarrow' is unavailable.\n    compression : {'snappy', 'gzip', 'brotli', None}, default 'snappy'\n        Name of the compression to use. Use ``None`` for no compression.\n    index : bool, default None\n        If ``True``, include the dataframe's index(es) in the file output.\n        If ``False``, they will not be written to the file.\n        If ``None``, similar to ``True`` the dataframe's index(es)\n        will be saved. However, instead of being saved as values,\n        the RangeIndex will be stored as a range in the metadata so it\n        doesn't require much space and is faster. Other indexes will\n        be included as columns in the file output.\n\n        .. versionadded:: 0.24.0\n\n    partition_cols : list, optional, default None\n        Column names by which to partition the dataset.\n        Columns are partitioned in the order they are given.\n\n        .. versionadded:: 0.24.0\n\n    **kwargs\n        Additional arguments passed to the parquet library. See\n        :ref:`pandas io <io.parquet>` for more details.\n\n    See Also\n    --------\n    read_parquet : Read a parquet file.\n    DataFrame.to_csv : Write a csv file.\n    DataFrame.to_sql : Write to a sql table.\n    DataFrame.to_hdf : Write to hdf.\n\n    Notes\n    -----\n    This function requires either the `fastparquet\n    <https://pypi.org/project/fastparquet>`_ or `pyarrow\n    <https://arrow.apache.org/docs/python/>`_ library.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.to_parquet('df.parquet.gzip',\n    ...               compression='gzip')  # doctest: +SKIP\n    >>> pd.read_parquet('df.parquet.gzip')  # doctest: +SKIP\n       col1  col2\n    0     1     3\n    1     2     4\n    \"\"\"\n    from pandas.io.parquet import to_parquet\n\n    to_parquet(\n        self,\n        path,\n        engine,\n        compression=compression,\n        index=index,\n        partition_cols=partition_cols,\n        **kwargs,\n    )",
                "@Substitution(\n    header_type=\"bool\",\n    header=\"Whether to print column labels, default True\",\n    col_space_type=\"str or int\",\n    col_space=\"The minimum width of each column in CSS length \"\n    \"units.  An int is assumed to be px units.\\n\\n\"\n    \"            .. versionadded:: 0.25.0\\n\"\n    \"                Ability to use str\",\n)\n@Substitution(shared_params=fmt.common_docstring, returns=fmt.return_docstring)\ndef to_html(\n    self,\n    buf=None,\n    columns=None,\n    col_space=None,\n    header=True,\n    index=True,\n    na_rep=\"NaN\",\n    formatters=None,\n    float_format=None,\n    sparsify=None,\n    index_names=True,\n    justify=None,\n    max_rows=None,\n    max_cols=None,\n    show_dimensions=False,\n    decimal=\".\",\n    bold_rows=True,\n    classes=None,\n    escape=True,\n    notebook=False,\n    border=None,\n    table_id=None,\n    render_links=False,\n    encoding=None,\n):\n    \"\"\"\n    Render a DataFrame as an HTML table.\n    %(shared_params)s\n    bold_rows : bool, default True\n        Make the row labels bold in the output.\n    classes : str or list or tuple, default None\n        CSS class(es) to apply to the resulting html table.\n    escape : bool, default True\n        Convert the characters <, >, and & to HTML-safe sequences.\n    notebook : {True, False}, default False\n        Whether the generated HTML is for IPython Notebook.\n    border : int\n        A ``border=border`` attribute is included in the opening\n        `<table>` tag. Default ``pd.options.display.html.border``.\n    encoding : str, default \"utf-8\"\n        Set character encoding\n\n        .. versionadded:: 1.0\n    table_id : str, optional\n        A css id is included in the opening `<table>` tag if specified.\n\n        .. versionadded:: 0.23.0\n\n    render_links : bool, default False\n        Convert URLs to HTML links.\n\n        .. versionadded:: 0.24.0\n    %(returns)s\n    See Also\n    --------\n    to_string : Convert DataFrame to a string.\n    \"\"\"\n\n    if justify is not None and justify not in fmt._VALID_JUSTIFY_PARAMETERS:\n        raise ValueError(\"Invalid value for justify parameter\")\n\n    formatter = fmt.DataFrameFormatter(\n        self,\n        columns=columns,\n        col_space=col_space,\n        na_rep=na_rep,\n        formatters=formatters,\n        float_format=float_format,\n        sparsify=sparsify,\n        justify=justify,\n        index_names=index_names,\n        header=header,\n        index=index,\n        bold_rows=bold_rows,\n        escape=escape,\n        max_rows=max_rows,\n        max_cols=max_cols,\n        show_dimensions=show_dimensions,\n        decimal=decimal,\n        table_id=table_id,\n        render_links=render_links,\n    )\n    # TODO: a generic formatter wld b in DataFrameFormatter\n    return formatter.to_html(\n        buf=buf,\n        classes=classes,\n        notebook=notebook,\n        border=border,\n        encoding=encoding,\n    )",
                "def info(\n    self, verbose=None, buf=None, max_cols=None, memory_usage=None, null_counts=None\n):\n    \"\"\"\n    Print a concise summary of a DataFrame.\n\n    This method prints information about a DataFrame including\n    the index dtype and column dtypes, non-null values and memory usage.\n\n    Parameters\n    ----------\n    verbose : bool, optional\n        Whether to print the full summary. By default, the setting in\n        ``pandas.options.display.max_info_columns`` is followed.\n    buf : writable buffer, defaults to sys.stdout\n        Where to send the output. By default, the output is printed to\n        sys.stdout. Pass a writable buffer if you need to further process\n        the output.\n    max_cols : int, optional\n        When to switch from the verbose to the truncated output. If the\n        DataFrame has more than `max_cols` columns, the truncated output\n        is used. By default, the setting in\n        ``pandas.options.display.max_info_columns`` is used.\n    memory_usage : bool, str, optional\n        Specifies whether total memory usage of the DataFrame\n        elements (including the index) should be displayed. By default,\n        this follows the ``pandas.options.display.memory_usage`` setting.\n\n        True always show memory usage. False never shows memory usage.\n        A value of 'deep' is equivalent to \"True with deep introspection\".\n        Memory usage is shown in human-readable units (base-2\n        representation). Without deep introspection a memory estimation is\n        made based in column dtype and number of rows assuming values\n        consume the same memory amount for corresponding dtypes. With deep\n        memory introspection, a real memory usage calculation is performed\n        at the cost of computational resources.\n    null_counts : bool, optional\n        Whether to show the non-null counts. By default, this is shown\n        only if the frame is smaller than\n        ``pandas.options.display.max_info_rows`` and\n        ``pandas.options.display.max_info_columns``. A value of True always\n        shows the counts, and False never shows the counts.\n\n    Returns\n    -------\n    None\n        This method prints a summary of a DataFrame and returns None.\n\n    See Also\n    --------\n    DataFrame.describe: Generate descriptive statistics of DataFrame\n        columns.\n    DataFrame.memory_usage: Memory usage of DataFrame columns.\n\n    Examples\n    --------\n    >>> int_values = [1, 2, 3, 4, 5]\n    >>> text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']\n    >>> float_values = [0.0, 0.25, 0.5, 0.75, 1.0]\n    >>> df = pd.DataFrame({\"int_col\": int_values, \"text_col\": text_values,\n    ...                   \"float_col\": float_values})\n    >>> df\n       int_col text_col  float_col\n    0        1    alpha       0.00\n    1        2     beta       0.25\n    2        3    gamma       0.50\n    3        4    delta       0.75\n    4        5  epsilon       1.00\n\n    Prints information of all columns:\n\n    >>> df.info(verbose=True)\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 5 entries, 0 to 4\n    Data columns (total 3 columns):\n    int_col      5 non-null int64\n    text_col     5 non-null object\n    float_col    5 non-null float64\n    dtypes: float64(1), int64(1), object(1)\n    memory usage: 248.0+ bytes\n\n    Prints a summary of columns count and its dtypes but not per column\n    information:\n\n    >>> df.info(verbose=False)\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 5 entries, 0 to 4\n    Columns: 3 entries, int_col to float_col\n    dtypes: float64(1), int64(1), object(1)\n    memory usage: 248.0+ bytes\n\n    Pipe output of DataFrame.info to buffer instead of sys.stdout, get\n    buffer content and writes to a text file:\n\n    >>> import io\n    >>> buffer = io.StringIO()\n    >>> df.info(buf=buffer)\n    >>> s = buffer.getvalue()\n    >>> with open(\"df_info.txt\", \"w\",\n    ...           encoding=\"utf-8\") as f:  # doctest: +SKIP\n    ...     f.write(s)\n    260\n\n    The `memory_usage` parameter allows deep introspection mode, specially\n    useful for big DataFrames and fine-tune memory optimization:\n\n    >>> random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)\n    >>> df = pd.DataFrame({\n    ...     'column_1': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n    ...     'column_2': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n    ...     'column_3': np.random.choice(['a', 'b', 'c'], 10 ** 6)\n    ... })\n    >>> df.info()\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 1000000 entries, 0 to 999999\n    Data columns (total 3 columns):\n    column_1    1000000 non-null object\n    column_2    1000000 non-null object\n    column_3    1000000 non-null object\n    dtypes: object(3)\n    memory usage: 22.9+ MB\n\n    >>> df.info(memory_usage='deep')\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 1000000 entries, 0 to 999999\n    Data columns (total 3 columns):\n    column_1    1000000 non-null object\n    column_2    1000000 non-null object\n    column_3    1000000 non-null object\n    dtypes: object(3)\n    memory usage: 188.8 MB\n    \"\"\"\n\n    if buf is None:  # pragma: no cover\n        buf = sys.stdout\n\n    lines = []\n\n    lines.append(str(type(self)))\n    lines.append(self.index._summary())\n\n    if len(self.columns) == 0:\n        lines.append(f\"Empty {type(self).__name__}\")\n        fmt.buffer_put_lines(buf, lines)\n        return\n\n    cols = self.columns\n\n    # hack\n    if max_cols is None:\n        max_cols = get_option(\"display.max_info_columns\", len(self.columns) + 1)\n\n    max_rows = get_option(\"display.max_info_rows\", len(self) + 1)\n\n    if null_counts is None:\n        show_counts = (len(self.columns) <= max_cols) and (len(self) < max_rows)\n    else:\n        show_counts = null_counts\n    exceeds_info_cols = len(self.columns) > max_cols\n\n    def _verbose_repr():\n        lines.append(f\"Data columns (total {len(self.columns)} columns):\")\n        space = max(len(pprint_thing(k)) for k in self.columns) + 4\n        counts = None\n\n        tmpl = \"{count}{dtype}\"\n        if show_counts:\n            counts = self.count()\n            if len(cols) != len(counts):  # pragma: no cover\n                raise AssertionError(\n                    f\"Columns must equal counts ({len(cols)} != {len(counts)})\"\n                )\n            tmpl = \"{count} non-null {dtype}\"\n\n        dtypes = self.dtypes\n        for i, col in enumerate(self.columns):\n            dtype = dtypes.iloc[i]\n            col = pprint_thing(col)\n\n            count = \"\"\n            if show_counts:\n                count = counts.iloc[i]\n\n            lines.append(\n                _put_str(col, space) + tmpl.format(count=count, dtype=dtype)\n            )\n\n    def _non_verbose_repr():\n        lines.append(self.columns._summary(name=\"Columns\"))\n\n    def _sizeof_fmt(num, size_qualifier):\n        # returns size in human readable format\n        for x in [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\"]:\n            if num < 1024.0:\n                return f\"{num:3.1f}{size_qualifier} {x}\"\n            num /= 1024.0\n        return f\"{num:3.1f}{size_qualifier} PB\"\n\n    if verbose:\n        _verbose_repr()\n    elif verbose is False:  # specifically set to False, not nesc None\n        _non_verbose_repr()\n    else:\n        if exceeds_info_cols:\n            _non_verbose_repr()\n        else:\n            _verbose_repr()\n\n    counts = self._data.get_dtype_counts()\n    dtypes = [f\"{k[0]}({k[1]:d})\" for k in sorted(counts.items())]\n    lines.append(f\"dtypes: {', '.join(dtypes)}\")\n\n    if memory_usage is None:\n        memory_usage = get_option(\"display.memory_usage\")\n    if memory_usage:\n        # append memory usage of df to display\n        size_qualifier = \"\"\n        if memory_usage == \"deep\":\n            deep = True\n        else:\n            # size_qualifier is just a best effort; not guaranteed to catch\n            # all cases (e.g., it misses categorical data even with object\n            # categories)\n            deep = False\n            if \"object\" in counts or self.index._is_memory_usage_qualified():\n                size_qualifier = \"+\"\n        mem_usage = self.memory_usage(index=True, deep=deep).sum()\n        lines.append(f\"memory usage: {_sizeof_fmt(mem_usage, size_qualifier)}\\n\")\n    fmt.buffer_put_lines(buf, lines)",
                "def memory_usage(self, index=True, deep=False):\n    \"\"\"\n    Return the memory usage of each column in bytes.\n\n    The memory usage can optionally include the contribution of\n    the index and elements of `object` dtype.\n\n    This value is displayed in `DataFrame.info` by default. This can be\n    suppressed by setting ``pandas.options.display.memory_usage`` to False.\n\n    Parameters\n    ----------\n    index : bool, default True\n        Specifies whether to include the memory usage of the DataFrame's\n        index in returned Series. If ``index=True``, the memory usage of\n        the index is the first item in the output.\n    deep : bool, default False\n        If True, introspect the data deeply by interrogating\n        `object` dtypes for system-level memory consumption, and include\n        it in the returned values.\n\n    Returns\n    -------\n    Series\n        A Series whose index is the original column names and whose values\n        is the memory usage of each column in bytes.\n\n    See Also\n    --------\n    numpy.ndarray.nbytes : Total bytes consumed by the elements of an\n        ndarray.\n    Series.memory_usage : Bytes consumed by a Series.\n    Categorical : Memory-efficient array for string values with\n        many repeated values.\n    DataFrame.info : Concise summary of a DataFrame.\n\n    Examples\n    --------\n    >>> dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']\n    >>> data = dict([(t, np.ones(shape=5000).astype(t))\n    ...              for t in dtypes])\n    >>> df = pd.DataFrame(data)\n    >>> df.head()\n       int64  float64            complex128  object  bool\n    0      1      1.0    1.000000+0.000000j       1  True\n    1      1      1.0    1.000000+0.000000j       1  True\n    2      1      1.0    1.000000+0.000000j       1  True\n    3      1      1.0    1.000000+0.000000j       1  True\n    4      1      1.0    1.000000+0.000000j       1  True\n\n    >>> df.memory_usage()\n    Index           128\n    int64         40000\n    float64       40000\n    complex128    80000\n    object        40000\n    bool           5000\n    dtype: int64\n\n    >>> df.memory_usage(index=False)\n    int64         40000\n    float64       40000\n    complex128    80000\n    object        40000\n    bool           5000\n    dtype: int64\n\n    The memory footprint of `object` dtype columns is ignored by default:\n\n    >>> df.memory_usage(deep=True)\n    Index            128\n    int64          40000\n    float64        40000\n    complex128     80000\n    object        160000\n    bool            5000\n    dtype: int64\n\n    Use a Categorical for efficient storage of an object-dtype column with\n    many repeated values.\n\n    >>> df['object'].astype('category').memory_usage(deep=True)\n    5216\n    \"\"\"\n    result = Series(\n        [c.memory_usage(index=False, deep=deep) for col, c in self.items()],\n        index=self.columns,\n    )\n    if index:\n        result = Series(self.index.memory_usage(deep=deep), index=[\"Index\"]).append(\n            result\n        )\n    return result",
                "def transpose(self, *args, **kwargs):\n    \"\"\"\n    Transpose index and columns.\n\n    Reflect the DataFrame over its main diagonal by writing rows as columns\n    and vice-versa. The property :attr:`.T` is an accessor to the method\n    :meth:`transpose`.\n\n    Parameters\n    ----------\n    *args, **kwargs\n        Additional arguments and keywords have no effect but might be\n        accepted for compatibility with numpy.\n\n    Returns\n    -------\n    DataFrame\n        The transposed DataFrame.\n\n    See Also\n    --------\n    numpy.transpose : Permute the dimensions of a given array.\n\n    Notes\n    -----\n    Transposing a DataFrame with mixed dtypes will result in a homogeneous\n    DataFrame with the `object` dtype. In such a case, a copy of the data\n    is always made.\n\n    Examples\n    --------\n    **Square DataFrame with homogeneous dtype**\n\n    >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df1 = pd.DataFrame(data=d1)\n    >>> df1\n       col1  col2\n    0     1     3\n    1     2     4\n\n    >>> df1_transposed = df1.T # or df1.transpose()\n    >>> df1_transposed\n          0  1\n    col1  1  2\n    col2  3  4\n\n    When the dtype is homogeneous in the original DataFrame, we get a\n    transposed DataFrame with the same dtype:\n\n    >>> df1.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n    >>> df1_transposed.dtypes\n    0    int64\n    1    int64\n    dtype: object\n\n    **Non-square DataFrame with mixed dtypes**\n\n    >>> d2 = {'name': ['Alice', 'Bob'],\n    ...       'score': [9.5, 8],\n    ...       'employed': [False, True],\n    ...       'kids': [0, 0]}\n    >>> df2 = pd.DataFrame(data=d2)\n    >>> df2\n        name  score  employed  kids\n    0  Alice    9.5     False     0\n    1    Bob    8.0      True     0\n\n    >>> df2_transposed = df2.T # or df2.transpose()\n    >>> df2_transposed\n                  0     1\n    name      Alice   Bob\n    score       9.5     8\n    employed  False  True\n    kids          0     0\n\n    When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n    the `object` dtype:\n\n    >>> df2.dtypes\n    name         object\n    score       float64\n    employed       bool\n    kids          int64\n    dtype: object\n    >>> df2_transposed.dtypes\n    0    object\n    1    object\n    dtype: object\n    \"\"\"\n    nv.validate_transpose(args, dict())\n    return super().transpose(1, 0, **kwargs)",
                "def _ixs(self, i: int, axis: int = 0):\n    \"\"\"\n    Parameters\n    ----------\n    i : int\n    axis : int\n\n    Notes\n    -----\n    If slice passed, the resulting data will be a view.\n    \"\"\"\n    # irow\n    if axis == 0:\n        new_values = self._data.fast_xs(i)\n\n        # if we are a copy, mark as such\n        copy = isinstance(new_values, np.ndarray) and new_values.base is None\n        result = self._constructor_sliced(\n            new_values,\n            index=self.columns,\n            name=self.index[i],\n            dtype=new_values.dtype,\n        )\n        result._set_is_copy(self, copy=copy)\n        return result\n\n    # icol\n    else:\n        label = self.columns[i]\n\n        # if the values returned are not the same length\n        # as the index (iow a not found value), iget returns\n        # a 0-len ndarray. This is effectively catching\n        # a numpy error (as numpy should really raise)\n        values = self._data.iget(i)\n\n        if len(self.index) and not len(values):\n            values = np.array([np.nan] * len(self.index), dtype=object)\n        result = self._box_col_values(values, label)\n\n        # this is a cached value, mark it so\n        result._set_as_cached(label, self)\n\n        return result",
                "def __getitem__(self, key):\n    key = lib.item_from_zerodim(key)\n    key = com.apply_if_callable(key, self)\n\n    if is_hashable(key):\n        # shortcut if the key is in columns\n        if self.columns.is_unique and key in self.columns:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            return self._get_item_cache(key)\n\n    # Do we have a slicer (on rows)?\n    indexer = convert_to_index_sliceable(self, key)\n    if indexer is not None:\n        # either we have a slice or we have a string that can be converted\n        #  to a slice for partial-string date indexing\n        return self._slice(indexer, axis=0)\n\n    # Do we have a (boolean) DataFrame?\n    if isinstance(key, DataFrame):\n        return self.where(key)\n\n    # Do we have a (boolean) 1d indexer?\n    if com.is_bool_indexer(key):\n        return self._getitem_bool_array(key)\n\n    # We are left with two options: a single key, and a collection of keys,\n    # We interpret tuples as collections only for non-MultiIndex\n    is_single_key = isinstance(key, tuple) or not is_list_like(key)\n\n    if is_single_key:\n        if self.columns.nlevels > 1:\n            return self._getitem_multilevel(key)\n        indexer = self.columns.get_loc(key)\n        if is_integer(indexer):\n            indexer = [indexer]\n    else:\n        if is_iterator(key):\n            key = list(key)\n        indexer = self.loc._get_listlike_indexer(key, axis=1, raise_missing=True)[1]\n\n    # take() does not accept boolean indexers\n    if getattr(indexer, \"dtype\", None) == bool:\n        indexer = np.where(indexer)[0]\n\n    data = self.take(indexer, axis=1)\n\n    if is_single_key:\n        # What does looking for a single key in a non-unique index return?\n        # The behavior is inconsistent. It returns a Series, except when\n        # - the key itself is repeated (test on data.shape, #9519), or\n        # - we have a MultiIndex on columns (test on self.columns, #21309)\n        if data.shape[1] == 1 and not isinstance(self.columns, ABCMultiIndex):\n            data = data[key]\n\n    return data",
                "def _getitem_bool_array(self, key):\n    # also raises Exception if object array with NA values\n    # warning here just in case -- previously __setitem__ was\n    # reindexing but __getitem__ was not; it seems more reasonable to\n    # go with the __setitem__ behavior since that is more consistent\n    # with all other indexing behavior\n    if isinstance(key, Series) and not key.index.equals(self.index):\n        warnings.warn(\n            \"Boolean Series key will be reindexed to match DataFrame index.\",\n            UserWarning,\n            stacklevel=3,\n        )\n    elif len(key) != len(self.index):\n        raise ValueError(\n            f\"Item wrong length {len(key)} instead of {len(self.index)}.\"\n        )\n\n    # check_bool_indexer will throw exception if Series key cannot\n    # be reindexed to match DataFrame rows\n    key = check_bool_indexer(self.index, key)\n    indexer = key.nonzero()[0]\n    return self.take(indexer, axis=0)",
                "def _getitem_multilevel(self, key):\n    # self.columns is a MultiIndex\n    loc = self.columns.get_loc(key)\n    if isinstance(loc, (slice, Series, np.ndarray, Index)):\n        new_columns = self.columns[loc]\n        result_columns = maybe_droplevels(new_columns, key)\n        if self._is_mixed_type:\n            result = self.reindex(columns=new_columns)\n            result.columns = result_columns\n        else:\n            new_values = self.values[:, loc]\n            result = self._constructor(\n                new_values, index=self.index, columns=result_columns\n            )\n            result = result.__finalize__(self)\n\n        # If there is only one column being returned, and its name is\n        # either an empty string, or a tuple with an empty string as its\n        # first element, then treat the empty string as a placeholder\n        # and return the column as if the user had provided that empty\n        # string in the key. If the result is a Series, exclude the\n        # implied empty string from its name.\n        if len(result.columns) == 1:\n            top = result.columns[0]\n            if isinstance(top, tuple):\n                top = top[0]\n            if top == \"\":\n                result = result[\"\"]\n                if isinstance(result, Series):\n                    result = self._constructor_sliced(\n                        result, index=self.index, name=key\n                    )\n\n        result._set_is_copy(self)\n        return result\n    else:\n        return self._get_item_cache(key)",
                "def _get_value(self, index, col, takeable: bool = False):\n    \"\"\"\n    Quickly retrieve single value at passed column and index.\n\n    Parameters\n    ----------\n    index : row label\n    col : column label\n    takeable : interpret the index/col as indexers, default False\n\n    Returns\n    -------\n    scalar\n    \"\"\"\n    if takeable:\n        series = self._iget_item_cache(col)\n        return com.maybe_box_datetimelike(series._values[index])\n\n    series = self._get_item_cache(col)\n    engine = self.index._engine\n\n    try:\n        return engine.get_value(series._values, index)\n    except KeyError:\n        # GH 20629\n        if self.index.nlevels > 1:\n            # partial indexing forbidden\n            raise\n    except (TypeError, ValueError):\n        pass\n\n    # we cannot handle direct indexing\n    # use positional\n    col = self.columns.get_loc(col)\n    index = self.index.get_loc(index)\n    return self._get_value(index, col, takeable=True)",
                "def __setitem__(self, key, value):\n    key = com.apply_if_callable(key, self)\n\n    # see if we can slice the rows\n    indexer = convert_to_index_sliceable(self, key)\n    if indexer is not None:\n        # either we have a slice or we have a string that can be converted\n        #  to a slice for partial-string date indexing\n        return self._setitem_slice(indexer, value)\n\n    if isinstance(key, DataFrame) or getattr(key, \"ndim\", None) == 2:\n        self._setitem_frame(key, value)\n    elif isinstance(key, (Series, np.ndarray, list, Index)):\n        self._setitem_array(key, value)\n    else:\n        # set column\n        self._set_item(key, value)",
                "def _setitem_slice(self, key, value):\n    self._check_setitem_copy()\n    self.loc[key] = value",
                "def _setitem_array(self, key, value):\n    # also raises Exception if object array with NA values\n    if com.is_bool_indexer(key):\n        if len(key) != len(self.index):\n            raise ValueError(\n                f\"Item wrong length {len(key)} instead of {len(self.index)}!\"\n            )\n        key = check_bool_indexer(self.index, key)\n        indexer = key.nonzero()[0]\n        self._check_setitem_copy()\n        self.loc._setitem_with_indexer(indexer, value)\n    else:\n        if isinstance(value, DataFrame):\n            if len(value.columns) != len(key):\n                raise ValueError(\"Columns must be same length as key\")\n            for k1, k2 in zip(key, value.columns):\n                self[k1] = value[k2]\n        else:\n            indexer = self.loc._get_listlike_indexer(\n                key, axis=1, raise_missing=False\n            )[1]\n            self._check_setitem_copy()\n            self.loc._setitem_with_indexer((slice(None), indexer), value)",
                "def _setitem_frame(self, key, value):\n    # support boolean setting with DataFrame input, e.g.\n    # df[df > df2] = 0\n    if isinstance(key, np.ndarray):\n        if key.shape != self.shape:\n            raise ValueError(\"Array conditional must be same shape as self\")\n        key = self._constructor(key, **self._construct_axes_dict())\n\n    if key.values.size and not is_bool_dtype(key.values):\n        raise TypeError(\n            \"Must pass DataFrame or 2-d ndarray with boolean values only\"\n        )\n\n    self._check_inplace_setting(value)\n    self._check_setitem_copy()\n    self._where(-key, value, inplace=True)",
                "def _set_item(self, key, value):\n    \"\"\"\n    Add series to DataFrame in specified column.\n\n    If series is a numpy-array (not a Series/TimeSeries), it must be the\n    same length as the DataFrames index or an error will be thrown.\n\n    Series/TimeSeries will be conformed to the DataFrames index to\n    ensure homogeneity.\n    \"\"\"\n\n    self._ensure_valid_index(value)\n    value = self._sanitize_column(key, value)\n    NDFrame._set_item(self, key, value)\n\n    # check if we are modifying a copy\n    # try to set first as we want an invalid\n    # value exception to occur first\n    if len(self):\n        self._check_setitem_copy()",
                "def _set_value(self, index, col, value, takeable: bool = False):\n    \"\"\"\n    Put single value at passed column and index.\n\n    Parameters\n    ----------\n    index : row label\n    col : column label\n    value : scalar\n    takeable : interpret the index/col as indexers, default False\n\n    Returns\n    -------\n    DataFrame\n        If label pair is contained, will be reference to calling DataFrame,\n        otherwise a new object.\n    \"\"\"\n    try:\n        if takeable is True:\n            series = self._iget_item_cache(col)\n            return series._set_value(index, value, takeable=True)\n\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n        engine.set_value(series._values, index, value)\n        return self\n    except (KeyError, TypeError):\n\n        # set using a non-recursive method & reset the cache\n        if takeable:\n            self.iloc[index, col] = value\n        else:\n            self.loc[index, col] = value\n        self._item_cache.pop(col, None)\n\n        return self",
                "def _ensure_valid_index(self, value):\n    \"\"\"\n    Ensure that if we don't have an index, that we can create one from the\n    passed value.\n    \"\"\"\n    # GH5632, make sure that we are a Series convertible\n    if not len(self.index) and is_list_like(value) and len(value):\n        try:\n            value = Series(value)\n        except (ValueError, NotImplementedError, TypeError):\n            raise ValueError(\n                \"Cannot set a frame with no defined index \"\n                \"and a value that cannot be converted to a \"\n                \"Series\"\n            )\n\n        self._data = self._data.reindex_axis(\n            value.index.copy(), axis=1, fill_value=np.nan\n        )",
                "def _box_item_values(self, key, values):\n    items = self.columns[self.columns.get_loc(key)]\n    if values.ndim == 2:\n        return self._constructor(values.T, columns=items, index=self.index)\n    else:\n        return self._box_col_values(values, items)",
                "def _box_col_values(self, values, items):\n    \"\"\"\n    Provide boxed values for a column.\n    \"\"\"\n    klass = self._constructor_sliced\n    return klass(values, index=self.index, name=items, fastpath=True)",
                "def query(self, expr, inplace=False, **kwargs):\n    \"\"\"\n    Query the columns of a DataFrame with a boolean expression.\n\n    Parameters\n    ----------\n    expr : str\n        The query string to evaluate.  You can refer to variables\n        in the environment by prefixing them with an '@' character like\n        ``@a + b``.\n\n        .. versionadded:: 0.25.0\n\n        You can refer to column names that contain spaces by surrounding\n        them in backticks.\n\n        For example, if one of your columns is called ``a a`` and you want\n        to sum it with ``b``, your query should be ```a a` + b``.\n\n    inplace : bool\n        Whether the query should modify the data in place or return\n        a modified copy.\n    **kwargs\n        See the documentation for :func:`eval` for complete details\n        on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame resulting from the provided query expression.\n\n    See Also\n    --------\n    eval : Evaluate a string describing operations on\n        DataFrame columns.\n    DataFrame.eval : Evaluate a string describing operations on\n        DataFrame columns.\n\n    Notes\n    -----\n    The result of the evaluation of this expression is first passed to\n    :attr:`DataFrame.loc` and if that fails because of a\n    multidimensional key (e.g., a DataFrame) then the result will be passed\n    to :meth:`DataFrame.__getitem__`.\n\n    This method uses the top-level :func:`eval` function to\n    evaluate the passed query.\n\n    The :meth:`~pandas.DataFrame.query` method uses a slightly\n    modified Python syntax by default. For example, the ``&`` and ``|``\n    (bitwise) operators have the precedence of their boolean cousins,\n    :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n    however the semantics are different.\n\n    You can change the semantics of the expression by passing the keyword\n    argument ``parser='python'``. This enforces the same semantics as\n    evaluation in Python space. Likewise, you can pass ``engine='python'``\n    to evaluate an expression using Python itself as a backend. This is not\n    recommended as it is inefficient compared to using ``numexpr`` as the\n    engine.\n\n    The :attr:`DataFrame.index` and\n    :attr:`DataFrame.columns` attributes of the\n    :class:`~pandas.DataFrame` instance are placed in the query namespace\n    by default, which allows you to treat both the index and columns of the\n    frame as a column in the frame.\n    The identifier ``index`` is used for the frame index; you can also\n    use the name of the index to identify it in a query. Please note that\n    Python keywords may not be used as identifiers.\n\n    For further details and examples see the ``query`` documentation in\n    :ref:`indexing <indexing.query>`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': range(1, 6),\n    ...                    'B': range(10, 0, -2),\n    ...                    'C C': range(10, 5, -1)})\n    >>> df\n       A   B  C C\n    0  1  10   10\n    1  2   8    9\n    2  3   6    8\n    3  4   4    7\n    4  5   2    6\n    >>> df.query('A > B')\n       A  B  C C\n    4  5  2    6\n\n    The previous expression is equivalent to\n\n    >>> df[df.A > df.B]\n       A  B  C C\n    4  5  2    6\n\n    For columns with spaces in their name, you can use backtick quoting.\n\n    >>> df.query('B == `C C`')\n       A   B  C C\n    0  1  10   10\n\n    The previous expression is equivalent to\n\n    >>> df[df.B == df['C C']]\n       A   B  C C\n    0  1  10   10\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if not isinstance(expr, str):\n        msg = f\"expr must be a string to be evaluated, {type(expr)} given\"\n        raise ValueError(msg)\n    kwargs[\"level\"] = kwargs.pop(\"level\", 0) + 1\n    kwargs[\"target\"] = None\n    res = self.eval(expr, **kwargs)\n\n    try:\n        new_data = self.loc[res]\n    except ValueError:\n        # when res is multi-dimensional loc raises, but this is sometimes a\n        # valid query\n        new_data = self[res]\n\n    if inplace:\n        self._update_inplace(new_data)\n    else:\n        return new_data",
                "def eval(self, expr, inplace=False, **kwargs):\n    \"\"\"\n    Evaluate a string describing operations on DataFrame columns.\n\n    Operates on columns only, not specific rows or elements.  This allows\n    `eval` to run arbitrary code, which can make you vulnerable to code\n    injection if you pass user input to this function.\n\n    Parameters\n    ----------\n    expr : str\n        The expression string to evaluate.\n    inplace : bool, default False\n        If the expression contains an assignment, whether to perform the\n        operation inplace and mutate the existing DataFrame. Otherwise,\n        a new DataFrame is returned.\n    **kwargs\n        See the documentation for :func:`eval` for complete details\n        on the keyword arguments accepted by\n        :meth:`~pandas.DataFrame.query`.\n\n    Returns\n    -------\n    ndarray, scalar, or pandas object\n        The result of the evaluation.\n\n    See Also\n    --------\n    DataFrame.query : Evaluates a boolean expression to query the columns\n        of a frame.\n    DataFrame.assign : Can evaluate an expression or function to create new\n        values for a column.\n    eval : Evaluate a Python expression as a string using various\n        backends.\n\n    Notes\n    -----\n    For more details see the API documentation for :func:`~eval`.\n    For detailed examples see :ref:`enhancing performance with eval\n    <enhancingperf.eval>`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})\n    >>> df\n       A   B\n    0  1  10\n    1  2   8\n    2  3   6\n    3  4   4\n    4  5   2\n    >>> df.eval('A + B')\n    0    11\n    1    10\n    2     9\n    3     8\n    4     7\n    dtype: int64\n\n    Assignment is allowed though by default the original DataFrame is not\n    modified.\n\n    >>> df.eval('C = A + B')\n       A   B   C\n    0  1  10  11\n    1  2   8  10\n    2  3   6   9\n    3  4   4   8\n    4  5   2   7\n    >>> df\n       A   B\n    0  1  10\n    1  2   8\n    2  3   6\n    3  4   4\n    4  5   2\n\n    Use ``inplace=True`` to modify the original DataFrame.\n\n    >>> df.eval('C = A + B', inplace=True)\n    >>> df\n       A   B   C\n    0  1  10  11\n    1  2   8  10\n    2  3   6   9\n    3  4   4   8\n    4  5   2   7\n    \"\"\"\n    from pandas.core.computation.eval import eval as _eval\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    resolvers = kwargs.pop(\"resolvers\", None)\n    kwargs[\"level\"] = kwargs.pop(\"level\", 0) + 1\n    if resolvers is None:\n        index_resolvers = self._get_index_resolvers()\n        column_resolvers = self._get_space_character_free_column_resolvers()\n        resolvers = column_resolvers, index_resolvers\n    if \"target\" not in kwargs:\n        kwargs[\"target\"] = self\n    kwargs[\"resolvers\"] = kwargs.get(\"resolvers\", ()) + tuple(resolvers)\n    return _eval(expr, inplace=inplace, **kwargs)",
                "def select_dtypes(self, include=None, exclude=None):\n    \"\"\"\n    Return a subset of the DataFrame's columns based on the column dtypes.\n\n    Parameters\n    ----------\n    include, exclude : scalar or list-like\n        A selection of dtypes or strings to be included/excluded. At least\n        one of these parameters must be supplied.\n\n    Returns\n    -------\n    DataFrame\n        The subset of the frame including the dtypes in ``include`` and\n        excluding the dtypes in ``exclude``.\n\n    Raises\n    ------\n    ValueError\n        * If both of ``include`` and ``exclude`` are empty\n        * If ``include`` and ``exclude`` have overlapping elements\n        * If any kind of string dtype is passed in.\n\n    Notes\n    -----\n    * To select all *numeric* types, use ``np.number`` or ``'number'``\n    * To select strings you must use the ``object`` dtype, but note that\n      this will return *all* object dtype columns\n    * See the `numpy dtype hierarchy\n      <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__\n    * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n      ``'datetime64'``\n    * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n      ``'timedelta64'``\n    * To select Pandas categorical dtypes, use ``'category'``\n    * To select Pandas datetimetz dtypes, use ``'datetimetz'`` (new in\n      0.20.0) or ``'datetime64[ns, tz]'``\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'a': [1, 2] * 3,\n    ...                    'b': [True, False] * 3,\n    ...                    'c': [1.0, 2.0] * 3})\n    >>> df\n            a      b  c\n    0       1   True  1.0\n    1       2  False  2.0\n    2       1   True  1.0\n    3       2  False  2.0\n    4       1   True  1.0\n    5       2  False  2.0\n\n    >>> df.select_dtypes(include='bool')\n       b\n    0  True\n    1  False\n    2  True\n    3  False\n    4  True\n    5  False\n\n    >>> df.select_dtypes(include=['float64'])\n       c\n    0  1.0\n    1  2.0\n    2  1.0\n    3  2.0\n    4  1.0\n    5  2.0\n\n    >>> df.select_dtypes(exclude=['int'])\n           b    c\n    0   True  1.0\n    1  False  2.0\n    2   True  1.0\n    3  False  2.0\n    4   True  1.0\n    5  False  2.0\n    \"\"\"\n\n    if not is_list_like(include):\n        include = (include,) if include is not None else ()\n    if not is_list_like(exclude):\n        exclude = (exclude,) if exclude is not None else ()\n\n    selection = (frozenset(include), frozenset(exclude))\n\n    if not any(selection):\n        raise ValueError(\"at least one of include or exclude must be nonempty\")\n\n    # convert the myriad valid dtypes object to a single representation\n    include = frozenset(infer_dtype_from_object(x) for x in include)\n    exclude = frozenset(infer_dtype_from_object(x) for x in exclude)\n    for dtypes in (include, exclude):\n        invalidate_string_dtypes(dtypes)\n\n    # can't both include AND exclude!\n    if not include.isdisjoint(exclude):\n        raise ValueError(f\"include and exclude overlap on {(include & exclude)}\")\n\n    # We raise when both include and exclude are empty\n    # Hence, we can just shrink the columns we want to keep\n    keep_these = np.full(self.shape[1], True)\n\n    def extract_unique_dtypes_from_dtypes_set(\n        dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray\n    ) -> List[Dtype]:\n        extracted_dtypes = [\n            unique_dtype\n            for unique_dtype in unique_dtypes\n            if issubclass(unique_dtype.type, tuple(dtypes_set))  # type: ignore\n        ]\n        return extracted_dtypes\n\n    unique_dtypes = self.dtypes.unique()\n\n    if include:\n        included_dtypes = extract_unique_dtypes_from_dtypes_set(\n            include, unique_dtypes\n        )\n        keep_these &= self.dtypes.isin(included_dtypes)\n\n    if exclude:\n        excluded_dtypes = extract_unique_dtypes_from_dtypes_set(\n            exclude, unique_dtypes\n        )\n        keep_these &= ~self.dtypes.isin(excluded_dtypes)\n\n    return self.iloc[:, keep_these.values]",
                "def insert(self, loc, column, value, allow_duplicates=False):\n    \"\"\"\n    Insert column into DataFrame at specified location.\n\n    Raises a ValueError if `column` is already contained in the DataFrame,\n    unless `allow_duplicates` is set to True.\n\n    Parameters\n    ----------\n    loc : int\n        Insertion index. Must verify 0 <= loc <= len(columns).\n    column : str, number, or hashable object\n        Label of the inserted column.\n    value : int, Series, or array-like\n    allow_duplicates : bool, optional\n    \"\"\"\n    self._ensure_valid_index(value)\n    value = self._sanitize_column(column, value, broadcast=False)\n    self._data.insert(loc, column, value, allow_duplicates=allow_duplicates)",
                "def assign(self, **kwargs):\n    r\"\"\"\n    Assign new columns to a DataFrame.\n\n    Returns a new object with all original columns in addition to new ones.\n    Existing columns that are re-assigned will be overwritten.\n\n    Parameters\n    ----------\n    **kwargs : dict of {str: callable or Series}\n        The column names are keywords. If the values are\n        callable, they are computed on the DataFrame and\n        assigned to the new columns. The callable must not\n        change input DataFrame (though pandas doesn't check it).\n        If the values are not callable, (e.g. a Series, scalar, or array),\n        they are simply assigned.\n\n    Returns\n    -------\n    DataFrame\n        A new DataFrame with the new columns in addition to\n        all the existing columns.\n\n    Notes\n    -----\n    Assigning multiple columns within the same ``assign`` is possible.\n    Later items in '\\*\\*kwargs' may refer to newly created or modified\n    columns in 'df'; items are computed and assigned into 'df' in order.\n\n    .. versionchanged:: 0.23.0\n\n       Keyword argument order is maintained.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'temp_c': [17.0, 25.0]},\n    ...                   index=['Portland', 'Berkeley'])\n    >>> df\n              temp_c\n    Portland    17.0\n    Berkeley    25.0\n\n    Where the value is a callable, evaluated on `df`:\n\n    >>> df.assign(temp_f=lambda x: x.temp_c * 9 / 5 + 32)\n              temp_c  temp_f\n    Portland    17.0    62.6\n    Berkeley    25.0    77.0\n\n    Alternatively, the same behavior can be achieved by directly\n    referencing an existing Series or sequence:\n\n    >>> df.assign(temp_f=df['temp_c'] * 9 / 5 + 32)\n              temp_c  temp_f\n    Portland    17.0    62.6\n    Berkeley    25.0    77.0\n\n    You can create multiple columns within the same assign where one\n    of the columns depends on another one defined within the same assign:\n\n    >>> df.assign(temp_f=lambda x: x['temp_c'] * 9 / 5 + 32,\n    ...           temp_k=lambda x: (x['temp_f'] +  459.67) * 5 / 9)\n              temp_c  temp_f  temp_k\n    Portland    17.0    62.6  290.15\n    Berkeley    25.0    77.0  298.15\n    \"\"\"\n    data = self.copy()\n\n    for k, v in kwargs.items():\n        data[k] = com.apply_if_callable(v, data)\n    return data",
                "def _sanitize_column(self, key, value, broadcast=True):\n    \"\"\"\n    Ensures new columns (which go into the BlockManager as new blocks) are\n    always copied and converted into an array.\n\n    Parameters\n    ----------\n    key : object\n    value : scalar, Series, or array-like\n    broadcast : bool, default True\n        If ``key`` matches multiple duplicate column names in the\n        DataFrame, this parameter indicates whether ``value`` should be\n        tiled so that the returned array contains a (duplicated) column for\n        each occurrence of the key. If False, ``value`` will not be tiled.\n\n    Returns\n    -------\n    numpy.ndarray\n    \"\"\"\n\n    def reindexer(value):\n        # reindex if necessary\n\n        if value.index.equals(self.index) or not len(self.index):\n            value = value._values.copy()\n        else:\n\n            # GH 4107\n            try:\n                value = value.reindex(self.index)._values\n            except ValueError as err:\n                # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n                if not value.index.is_unique:\n                    # duplicate axis\n                    raise err\n\n                # other\n                raise TypeError(\n                    \"incompatible index of inserted column with frame index\"\n                )\n        return value\n\n    if isinstance(value, Series):\n        value = reindexer(value)\n\n    elif isinstance(value, DataFrame):\n        # align right-hand-side columns if self.columns\n        # is multi-index and self[key] is a sub-frame\n        if isinstance(self.columns, ABCMultiIndex) and key in self.columns:\n            loc = self.columns.get_loc(key)\n            if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                cols = maybe_droplevels(self.columns[loc], key)\n                if len(cols) and not cols.equals(value.columns):\n                    value = value.reindex(cols, axis=1)\n        # now align rows\n        value = reindexer(value).T\n\n    elif isinstance(value, ExtensionArray):\n        # Explicitly copy here, instead of in sanitize_index,\n        # as sanitize_index won't copy an EA, even with copy=True\n        value = value.copy()\n        value = sanitize_index(value, self.index, copy=False)\n\n    elif isinstance(value, Index) or is_sequence(value):\n\n        # turn me into an ndarray\n        value = sanitize_index(value, self.index, copy=False)\n        if not isinstance(value, (np.ndarray, Index)):\n            if isinstance(value, list) and len(value) > 0:\n                value = maybe_convert_platform(value)\n            else:\n                value = com.asarray_tuplesafe(value)\n        elif value.ndim == 2:\n            value = value.copy().T\n        elif isinstance(value, Index):\n            value = value.copy(deep=True)\n        else:\n            value = value.copy()\n\n        # possibly infer to datetimelike\n        if is_object_dtype(value.dtype):\n            value = maybe_infer_to_datetimelike(value)\n\n    else:\n        # cast ignores pandas dtypes. so save the dtype first\n        infer_dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n\n        # upcast\n        value = cast_scalar_to_array(len(self.index), value)\n        value = maybe_cast_to_datetime(value, infer_dtype)\n\n    # return internal types directly\n    if is_extension_array_dtype(value):\n        return value\n\n    # broadcast across multiple columns if necessary\n    if broadcast and key in self.columns and value.ndim == 1:\n        if not self.columns.is_unique or isinstance(self.columns, ABCMultiIndex):\n            existing_piece = self[key]\n            if isinstance(existing_piece, DataFrame):\n                value = np.tile(value, (len(existing_piece.columns), 1))\n\n    return np.atleast_2d(np.asarray(value))",
                "@property\ndef _series(self):\n    return {\n        item: Series(self._data.iget(idx), index=self.index, name=item)\n        for idx, item in enumerate(self.columns)\n    }",
                "def lookup(self, row_labels, col_labels):\n    \"\"\"\n    Label-based \"fancy indexing\" function for DataFrame.\n\n    Given equal-length arrays of row and column labels, return an\n    array of the values corresponding to each (row, col) pair.\n\n    Parameters\n    ----------\n    row_labels : sequence\n        The row labels to use for lookup.\n    col_labels : sequence\n        The column labels to use for lookup.\n\n    Returns\n    -------\n    numpy.ndarray\n\n    Examples\n    --------\n    values : ndarray\n        The found values\n    \"\"\"\n    n = len(row_labels)\n    if n != len(col_labels):\n        raise ValueError(\"Row labels must have same size as column labels\")\n\n    thresh = 1000\n    if not self._is_mixed_type or n > thresh:\n        values = self.values\n        ridx = self.index.get_indexer(row_labels)\n        cidx = self.columns.get_indexer(col_labels)\n        if (ridx == -1).any():\n            raise KeyError(\"One or more row labels was not found\")\n        if (cidx == -1).any():\n            raise KeyError(\"One or more column labels was not found\")\n        flat_index = ridx * len(self.columns) + cidx\n        result = values.flat[flat_index]\n    else:\n        result = np.empty(n, dtype=\"O\")\n        for i, (r, c) in enumerate(zip(row_labels, col_labels)):\n            result[i] = self._get_value(r, c)\n\n    if is_object_dtype(result):\n        result = lib.maybe_convert_objects(result)\n\n    return result",
                "def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy):\n    frame = self\n\n    columns = axes[\"columns\"]\n    if columns is not None:\n        frame = frame._reindex_columns(\n            columns, method, copy, level, fill_value, limit, tolerance\n        )\n\n    index = axes[\"index\"]\n    if index is not None:\n        frame = frame._reindex_index(\n            index, method, copy, level, fill_value, limit, tolerance\n        )\n\n    return frame",
                "def _reindex_index(\n    self,\n    new_index,\n    method,\n    copy,\n    level,\n    fill_value=np.nan,\n    limit=None,\n    tolerance=None,\n):\n    new_index, indexer = self.index.reindex(\n        new_index, method=method, level=level, limit=limit, tolerance=tolerance\n    )\n    return self._reindex_with_indexers(\n        {0: [new_index, indexer]},\n        copy=copy,\n        fill_value=fill_value,\n        allow_dups=False,\n    )",
                "def _reindex_columns(\n    self,\n    new_columns,\n    method,\n    copy,\n    level,\n    fill_value=None,\n    limit=None,\n    tolerance=None,\n):\n    new_columns, indexer = self.columns.reindex(\n        new_columns, method=method, level=level, limit=limit, tolerance=tolerance\n    )\n    return self._reindex_with_indexers(\n        {1: [new_columns, indexer]},\n        copy=copy,\n        fill_value=fill_value,\n        allow_dups=False,\n    )",
                "def _reindex_multi(self, axes, copy, fill_value):\n    \"\"\"\n    We are guaranteed non-Nones in the axes.\n    \"\"\"\n\n    new_index, row_indexer = self.index.reindex(axes[\"index\"])\n    new_columns, col_indexer = self.columns.reindex(axes[\"columns\"])\n\n    if row_indexer is not None and col_indexer is not None:\n        indexer = row_indexer, col_indexer\n        new_values = algorithms.take_2d_multi(\n            self.values, indexer, fill_value=fill_value\n        )\n        return self._constructor(new_values, index=new_index, columns=new_columns)\n    else:\n        return self._reindex_with_indexers(\n            {0: [new_index, row_indexer], 1: [new_columns, col_indexer]},\n            copy=copy,\n            fill_value=fill_value,\n        )",
                "@Appender(_shared_docs[\"align\"] % _shared_doc_kwargs)\ndef align(\n    self,\n    other,\n    join=\"outer\",\n    axis=None,\n    level=None,\n    copy=True,\n    fill_value=None,\n    method=None,\n    limit=None,\n    fill_axis=0,\n    broadcast_axis=None,\n):\n    return super().align(\n        other,\n        join=join,\n        axis=axis,\n        level=level,\n        copy=copy,\n        fill_value=fill_value,\n        method=method,\n        limit=limit,\n        fill_axis=fill_axis,\n        broadcast_axis=broadcast_axis,\n    )",
                "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.reindex.__doc__)\n@rewrite_axis_style_signature(\n    \"labels\",\n    [\n        (\"method\", None),\n        (\"copy\", True),\n        (\"level\", None),\n        (\"fill_value\", np.nan),\n        (\"limit\", None),\n        (\"tolerance\", None),\n    ],\n)\ndef reindex(self, *args, **kwargs):\n    axes = validate_axis_style_args(self, args, kwargs, \"labels\", \"reindex\")\n    kwargs.update(axes)\n    # Pop these, since the values are in `kwargs` under different names\n    kwargs.pop(\"axis\", None)\n    kwargs.pop(\"labels\", None)\n    return super().reindex(**kwargs)",
                "def drop(\n    self,\n    labels=None,\n    axis=0,\n    index=None,\n    columns=None,\n    level=None,\n    inplace=False,\n    errors=\"raise\",\n):\n    \"\"\"\n    Drop specified labels from rows or columns.\n\n    Remove rows or columns by specifying label names and corresponding\n    axis, or by specifying directly index or column names. When using a\n    multi-index, labels on different levels can be removed by specifying\n    the level.\n\n    Parameters\n    ----------\n    labels : single label or list-like\n        Index or column labels to drop.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Whether to drop labels from the index (0 or 'index') or\n        columns (1 or 'columns').\n    index : single label or list-like\n        Alternative to specifying axis (``labels, axis=0``\n        is equivalent to ``index=labels``).\n\n        .. versionadded:: 0.21.0\n    columns : single label or list-like\n        Alternative to specifying axis (``labels, axis=1``\n        is equivalent to ``columns=labels``).\n\n        .. versionadded:: 0.21.0\n    level : int or level name, optional\n        For MultiIndex, level from which the labels will be removed.\n    inplace : bool, default False\n        If True, do operation inplace and return None.\n    errors : {'ignore', 'raise'}, default 'raise'\n        If 'ignore', suppress error and only existing labels are\n        dropped.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame without the removed index or column labels.\n\n    Raises\n    ------\n    KeyError\n        If any of the labels is not found in the selected axis.\n\n    See Also\n    --------\n    DataFrame.loc : Label-location based indexer for selection by label.\n    DataFrame.dropna : Return DataFrame with labels on given axis omitted\n        where (all or any) data are missing.\n    DataFrame.drop_duplicates : Return DataFrame with duplicate rows\n        removed, optionally only considering certain columns.\n    Series.drop : Return Series with specified index labels removed.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.arange(12).reshape(3, 4),\n    ...                   columns=['A', 'B', 'C', 'D'])\n    >>> df\n       A  B   C   D\n    0  0  1   2   3\n    1  4  5   6   7\n    2  8  9  10  11\n\n    Drop columns\n\n    >>> df.drop(['B', 'C'], axis=1)\n       A   D\n    0  0   3\n    1  4   7\n    2  8  11\n\n    >>> df.drop(columns=['B', 'C'])\n       A   D\n    0  0   3\n    1  4   7\n    2  8  11\n\n    Drop a row by index\n\n    >>> df.drop([0, 1])\n       A  B   C   D\n    2  8  9  10  11\n\n    Drop columns and/or rows of MultiIndex DataFrame\n\n    >>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n    ...                              ['speed', 'weight', 'length']],\n    ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n    ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n    >>> df = pd.DataFrame(index=midx, columns=['big', 'small'],\n    ...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n    ...                         [250, 150], [1.5, 0.8], [320, 250],\n    ...                         [1, 0.8], [0.3, 0.2]])\n    >>> df\n                    big     small\n    lama    speed   45.0    30.0\n            weight  200.0   100.0\n            length  1.5     1.0\n    cow     speed   30.0    20.0\n            weight  250.0   150.0\n            length  1.5     0.8\n    falcon  speed   320.0   250.0\n            weight  1.0     0.8\n            length  0.3     0.2\n\n    >>> df.drop(index='cow', columns='small')\n                    big\n    lama    speed   45.0\n            weight  200.0\n            length  1.5\n    falcon  speed   320.0\n            weight  1.0\n            length  0.3\n\n    >>> df.drop(index='length', level=1)\n                    big     small\n    lama    speed   45.0    30.0\n            weight  200.0   100.0\n    cow     speed   30.0    20.0\n            weight  250.0   150.0\n    falcon  speed   320.0   250.0\n            weight  1.0     0.8\n    \"\"\"\n    return super().drop(\n        labels=labels,\n        axis=axis,\n        index=index,\n        columns=columns,\n        level=level,\n        inplace=inplace,\n        errors=errors,\n    )",
                "@rewrite_axis_style_signature(\n    \"mapper\",\n    [(\"copy\", True), (\"inplace\", False), (\"level\", None), (\"errors\", \"ignore\")],\n)\ndef rename(self, *args, **kwargs):\n    \"\"\"\n    Alter axes labels.\n\n    Function / dict values must be unique (1-to-1). Labels not contained in\n    a dict / Series will be left as-is. Extra labels listed don't throw an\n    error.\n\n    See the :ref:`user guide <basics.rename>` for more.\n\n    Parameters\n    ----------\n    mapper : dict-like or function\n        Dict-like or functions transformations to apply to\n        that axis' values. Use either ``mapper`` and ``axis`` to\n        specify the axis to target with ``mapper``, or ``index`` and\n        ``columns``.\n    index : dict-like or function\n        Alternative to specifying axis (``mapper, axis=0``\n        is equivalent to ``index=mapper``).\n    columns : dict-like or function\n        Alternative to specifying axis (``mapper, axis=1``\n        is equivalent to ``columns=mapper``).\n    axis : int or str\n        Axis to target with ``mapper``. Can be either the axis name\n        ('index', 'columns') or number (0, 1). The default is 'index'.\n    copy : bool, default True\n        Also copy underlying data.\n    inplace : bool, default False\n        Whether to return a new DataFrame. If True then value of copy is\n        ignored.\n    level : int or level name, default None\n        In case of a MultiIndex, only rename labels in the specified\n        level.\n    errors : {'ignore', 'raise'}, default 'ignore'\n        If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n        or `columns` contains labels that are not present in the Index\n        being transformed.\n        If 'ignore', existing keys will be renamed and extra keys will be\n        ignored.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with the renamed axis labels.\n\n    Raises\n    ------\n    KeyError\n        If any of the labels is not found in the selected axis and\n        \"errors='raise'\".\n\n    See Also\n    --------\n    DataFrame.rename_axis : Set the name of the axis.\n\n    Examples\n    --------\n\n    ``DataFrame.rename`` supports two calling conventions\n\n    * ``(index=index_mapper, columns=columns_mapper, ...)``\n    * ``(mapper, axis={'index', 'columns'}, ...)``\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    Rename columns using a mapping:\n\n    >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n    >>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})\n       a  c\n    0  1  4\n    1  2  5\n    2  3  6\n\n    Rename index using a mapping:\n\n    >>> df.rename(index={0: \"x\", 1: \"y\", 2: \"z\"})\n       A  B\n    x  1  4\n    y  2  5\n    z  3  6\n\n    Cast index labels to a different type:\n\n    >>> df.index\n    RangeIndex(start=0, stop=3, step=1)\n    >>> df.rename(index=str).index\n    Index(['0', '1', '2'], dtype='object')\n\n    >>> df.rename(columns={\"A\": \"a\", \"B\": \"b\", \"C\": \"c\"}, errors=\"raise\")\n    Traceback (most recent call last):\n    KeyError: ['C'] not found in axis\n\n    Using axis-style parameters\n\n    >>> df.rename(str.lower, axis='columns')\n       a  b\n    0  1  4\n    1  2  5\n    2  3  6\n\n    >>> df.rename({1: 2, 2: 4}, axis='index')\n       A  B\n    0  1  4\n    2  2  5\n    4  3  6\n    \"\"\"\n    axes = validate_axis_style_args(self, args, kwargs, \"mapper\", \"rename\")\n    kwargs.update(axes)\n    # Pop these, since the values are in `kwargs` under different names\n    kwargs.pop(\"axis\", None)\n    kwargs.pop(\"mapper\", None)\n    return super().rename(**kwargs)",
                "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.fillna.__doc__)\ndef fillna(\n    self,\n    value=None,\n    method=None,\n    axis=None,\n    inplace=False,\n    limit=None,\n    downcast=None,\n    **kwargs,\n):\n    return super().fillna(\n        value=value,\n        method=method,\n        axis=axis,\n        inplace=inplace,\n        limit=limit,\n        downcast=downcast,\n        **kwargs,\n    )",
                "@Appender(_shared_docs[\"replace\"] % _shared_doc_kwargs)\ndef replace(\n    self,\n    to_replace=None,\n    value=None,\n    inplace=False,\n    limit=None,\n    regex=False,\n    method=\"pad\",\n):\n    return super().replace(\n        to_replace=to_replace,\n        value=value,\n        inplace=inplace,\n        limit=limit,\n        regex=regex,\n        method=method,\n    )",
                "@Appender(_shared_docs[\"shift\"] % _shared_doc_kwargs)\ndef shift(self, periods=1, freq=None, axis=0, fill_value=None):\n    return super().shift(\n        periods=periods, freq=freq, axis=axis, fill_value=fill_value\n    )",
                "def set_index(\n    self, keys, drop=True, append=False, inplace=False, verify_integrity=False\n):\n    \"\"\"\n    Set the DataFrame index using existing columns.\n\n    Set the DataFrame index (row labels) using one or more existing\n    columns or arrays (of the correct length). The index can replace the\n    existing index or expand on it.\n\n    Parameters\n    ----------\n    keys : label or array-like or list of labels/arrays\n        This parameter can be either a single column key, a single array of\n        the same length as the calling DataFrame, or a list containing an\n        arbitrary combination of column keys and arrays. Here, \"array\"\n        encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and\n        instances of :class:`~collections.abc.Iterator`.\n    drop : bool, default True\n        Delete columns to be used as the new index.\n    append : bool, default False\n        Whether to append columns to existing index.\n    inplace : bool, default False\n        Modify the DataFrame in place (do not create a new object).\n    verify_integrity : bool, default False\n        Check the new index for duplicates. Otherwise defer the check until\n        necessary. Setting to False will improve the performance of this\n        method.\n\n    Returns\n    -------\n    DataFrame\n        Changed row labels.\n\n    See Also\n    --------\n    DataFrame.reset_index : Opposite of set_index.\n    DataFrame.reindex : Change to new indices or expand indices.\n    DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n    ...                    'year': [2012, 2014, 2013, 2014],\n    ...                    'sale': [55, 40, 84, 31]})\n    >>> df\n       month  year  sale\n    0      1  2012    55\n    1      4  2014    40\n    2      7  2013    84\n    3     10  2014    31\n\n    Set the index to become the 'month' column:\n\n    >>> df.set_index('month')\n           year  sale\n    month\n    1      2012    55\n    4      2014    40\n    7      2013    84\n    10     2014    31\n\n    Create a MultiIndex using columns 'year' and 'month':\n\n    >>> df.set_index(['year', 'month'])\n                sale\n    year  month\n    2012  1     55\n    2014  4     40\n    2013  7     84\n    2014  10    31\n\n    Create a MultiIndex using an Index and a column:\n\n    >>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])\n             month  sale\n       year\n    1  2012  1      55\n    2  2014  4      40\n    3  2013  7      84\n    4  2014  10     31\n\n    Create a MultiIndex using two Series:\n\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> df.set_index([s, s**2])\n          month  year  sale\n    1 1       1  2012    55\n    2 4       4  2014    40\n    3 9       7  2013    84\n    4 16     10  2014    31\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if not isinstance(keys, list):\n        keys = [keys]\n\n    err_msg = (\n        'The parameter \"keys\" may be a column key, one-dimensional '\n        \"array, or a list containing only valid column keys and \"\n        \"one-dimensional arrays.\"\n    )\n\n    missing = []\n    for col in keys:\n        if isinstance(\n            col, (ABCIndexClass, ABCSeries, np.ndarray, list, abc.Iterator)\n        ):\n            # arrays are fine as long as they are one-dimensional\n            # iterators get converted to list below\n            if getattr(col, \"ndim\", 1) != 1:\n                raise ValueError(err_msg)\n        else:\n            # everything else gets tried as a key; see GH 24969\n            try:\n                found = col in self.columns\n            except TypeError:\n                raise TypeError(f\"{err_msg}. Received column of type {type(col)}\")\n            else:\n                if not found:\n                    missing.append(col)\n\n    if missing:\n        raise KeyError(f\"None of {missing} are in the columns\")\n\n    if inplace:\n        frame = self\n    else:\n        frame = self.copy()\n\n    arrays = []\n    names = []\n    if append:\n        names = list(self.index.names)\n        if isinstance(self.index, ABCMultiIndex):\n            for i in range(self.index.nlevels):\n                arrays.append(self.index._get_level_values(i))\n        else:\n            arrays.append(self.index)\n\n    to_remove = []\n    for col in keys:\n        if isinstance(col, ABCMultiIndex):\n            for n in range(col.nlevels):\n                arrays.append(col._get_level_values(n))\n            names.extend(col.names)\n        elif isinstance(col, (ABCIndexClass, ABCSeries)):\n            # if Index then not MultiIndex (treated above)\n            arrays.append(col)\n            names.append(col.name)\n        elif isinstance(col, (list, np.ndarray)):\n            arrays.append(col)\n            names.append(None)\n        elif isinstance(col, abc.Iterator):\n            arrays.append(list(col))\n            names.append(None)\n        # from here, col can only be a column label\n        else:\n            arrays.append(frame[col]._values)\n            names.append(col)\n            if drop:\n                to_remove.append(col)\n\n        if len(arrays[-1]) != len(self):\n            # check newest element against length of calling frame, since\n            # ensure_index_from_sequences would not raise for append=False.\n            raise ValueError(\n                f\"Length mismatch: Expected {len(self)} rows, \"\n                f\"received array of length {len(arrays[-1])}\"\n            )\n\n    index = ensure_index_from_sequences(arrays, names)\n\n    if verify_integrity and not index.is_unique:\n        duplicates = index[index.duplicated()].unique()\n        raise ValueError(f\"Index has duplicate keys: {duplicates}\")\n\n    # use set to handle duplicate column names gracefully in case of drop\n    for c in set(to_remove):\n        del frame[c]\n\n    # clear up memory usage\n    index._cleanup()\n\n    frame.index = index\n\n    if not inplace:\n        return frame",
                "def reset_index(\n    self,\n    level: Optional[Union[Hashable, Sequence[Hashable]]] = None,\n    drop: bool = False,\n    inplace: bool = False,\n    col_level: Hashable = 0,\n    col_fill: Optional[Hashable] = \"\",\n) -> Optional[\"DataFrame\"]:\n    \"\"\"\n    Reset the index, or a level of it.\n\n    Reset the index of the DataFrame, and use the default one instead.\n    If the DataFrame has a MultiIndex, this method can remove one or more\n    levels.\n\n    Parameters\n    ----------\n    level : int, str, tuple, or list, default None\n        Only remove the given levels from the index. Removes all levels by\n        default.\n    drop : bool, default False\n        Do not try to insert index into dataframe columns. This resets\n        the index to the default integer index.\n    inplace : bool, default False\n        Modify the DataFrame in place (do not create a new object).\n    col_level : int or str, default 0\n        If the columns have multiple levels, determines which level the\n        labels are inserted into. By default it is inserted into the first\n        level.\n    col_fill : object, default ''\n        If the columns have multiple levels, determines how the other\n        levels are named. If None then the index name is repeated.\n\n    Returns\n    -------\n    DataFrame or None\n        DataFrame with the new index or None if ``inplace=True``.\n\n    See Also\n    --------\n    DataFrame.set_index : Opposite of reset_index.\n    DataFrame.reindex : Change to new indices or expand indices.\n    DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('bird', 389.0),\n    ...                    ('bird', 24.0),\n    ...                    ('mammal', 80.5),\n    ...                    ('mammal', np.nan)],\n    ...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n    ...                   columns=('class', 'max_speed'))\n    >>> df\n             class  max_speed\n    falcon    bird      389.0\n    parrot    bird       24.0\n    lion    mammal       80.5\n    monkey  mammal        NaN\n\n    When we reset the index, the old index is added as a column, and a\n    new sequential index is used:\n\n    >>> df.reset_index()\n        index   class  max_speed\n    0  falcon    bird      389.0\n    1  parrot    bird       24.0\n    2    lion  mammal       80.5\n    3  monkey  mammal        NaN\n\n    We can use the `drop` parameter to avoid the old index being added as\n    a column:\n\n    >>> df.reset_index(drop=True)\n        class  max_speed\n    0    bird      389.0\n    1    bird       24.0\n    2  mammal       80.5\n    3  mammal        NaN\n\n    You can also use `reset_index` with `MultiIndex`.\n\n    >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n    ...                                    ('bird', 'parrot'),\n    ...                                    ('mammal', 'lion'),\n    ...                                    ('mammal', 'monkey')],\n    ...                                   names=['class', 'name'])\n    >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n    ...                                      ('species', 'type')])\n    >>> df = pd.DataFrame([(389.0, 'fly'),\n    ...                    ( 24.0, 'fly'),\n    ...                    ( 80.5, 'run'),\n    ...                    (np.nan, 'jump')],\n    ...                   index=index,\n    ...                   columns=columns)\n    >>> df\n                   speed species\n                     max    type\n    class  name\n    bird   falcon  389.0     fly\n           parrot   24.0     fly\n    mammal lion     80.5     run\n           monkey    NaN    jump\n\n    If the index has multiple levels, we can reset a subset of them:\n\n    >>> df.reset_index(level='class')\n             class  speed species\n                      max    type\n    name\n    falcon    bird  389.0     fly\n    parrot    bird   24.0     fly\n    lion    mammal   80.5     run\n    monkey  mammal    NaN    jump\n\n    If we are not dropping the index, by default, it is placed in the top\n    level. We can place it in another level:\n\n    >>> df.reset_index(level='class', col_level=1)\n                    speed species\n             class    max    type\n    name\n    falcon    bird  389.0     fly\n    parrot    bird   24.0     fly\n    lion    mammal   80.5     run\n    monkey  mammal    NaN    jump\n\n    When the index is inserted under another level, we can specify under\n    which one with the parameter `col_fill`:\n\n    >>> df.reset_index(level='class', col_level=1, col_fill='species')\n                  species  speed species\n                    class    max    type\n    name\n    falcon           bird  389.0     fly\n    parrot           bird   24.0     fly\n    lion           mammal   80.5     run\n    monkey         mammal    NaN    jump\n\n    If we specify a nonexistent level for `col_fill`, it is created:\n\n    >>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                    genus  speed species\n                    class    max    type\n    name\n    falcon           bird  389.0     fly\n    parrot           bird   24.0     fly\n    lion           mammal   80.5     run\n    monkey         mammal    NaN    jump\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if inplace:\n        new_obj = self\n    else:\n        new_obj = self.copy()\n\n    def _maybe_casted_values(index, labels=None):\n        values = index._values\n        if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n            if values.dtype == np.object_:\n                values = lib.maybe_convert_objects(values)\n\n        # if we have the labels, extract the values with a mask\n        if labels is not None:\n            mask = labels == -1\n\n            # we can have situations where the whole mask is -1,\n            # meaning there is nothing found in labels, so make all nan's\n            if mask.all():\n                values = np.empty(len(mask))\n                values.fill(np.nan)\n            else:\n                values = values.take(labels)\n\n                # TODO(https://github.com/pandas-dev/pandas/issues/24206)\n                # Push this into maybe_upcast_putmask?\n                # We can't pass EAs there right now. Looks a bit\n                # complicated.\n                # So we unbox the ndarray_values, op, re-box.\n                values_type = type(values)\n                values_dtype = values.dtype\n\n                if issubclass(values_type, DatetimeLikeArray):\n                    values = values._data\n\n                if mask.any():\n                    values, _ = maybe_upcast_putmask(values, mask, np.nan)\n\n                if issubclass(values_type, DatetimeLikeArray):\n                    values = values_type(values, dtype=values_dtype)\n\n        return values\n\n    new_index = ibase.default_index(len(new_obj))\n    if level is not None:\n        if not isinstance(level, (tuple, list)):\n            level = [level]\n        level = [self.index._get_level_number(lev) for lev in level]\n        if len(level) < self.index.nlevels:\n            new_index = self.index.droplevel(level)\n\n    if not drop:\n        to_insert: Iterable[Tuple[Any, Optional[Any]]]\n        if isinstance(self.index, ABCMultiIndex):\n            names = [\n                (n if n is not None else f\"level_{i}\")\n                for i, n in enumerate(self.index.names)\n            ]\n            to_insert = zip(self.index.levels, self.index.codes)\n        else:\n            default = \"index\" if \"index\" not in self else \"level_0\"\n            names = [default] if self.index.name is None else [self.index.name]\n            to_insert = ((self.index, None),)\n\n        multi_col = isinstance(self.columns, ABCMultiIndex)\n        for i, (lev, lab) in reversed(list(enumerate(to_insert))):\n            if not (level is None or i in level):\n                continue\n            name = names[i]\n            if multi_col:\n                col_name = list(name) if isinstance(name, tuple) else [name]\n                if col_fill is None:\n                    if len(col_name) not in (1, self.columns.nlevels):\n                        raise ValueError(\n                            \"col_fill=None is incompatible \"\n                            f\"with incomplete column name {name}\"\n                        )\n                    col_fill = col_name[0]\n\n                lev_num = self.columns._get_level_number(col_level)\n                name_lst = [col_fill] * lev_num + col_name\n                missing = self.columns.nlevels - len(name_lst)\n                name_lst += [col_fill] * missing\n                name = tuple(name_lst)\n            # to ndarray and maybe infer different dtype\n            level_values = _maybe_casted_values(lev, lab)\n            new_obj.insert(0, name, level_values)\n\n    new_obj.index = new_index\n    if not inplace:\n        return new_obj\n\n    return None",
                "@Appender(_shared_docs[\"isna\"] % _shared_doc_kwargs)\ndef isna(self):\n    return super().isna()",
                "@Appender(_shared_docs[\"isna\"] % _shared_doc_kwargs)\ndef isnull(self):\n    return super().isnull()",
                "@Appender(_shared_docs[\"notna\"] % _shared_doc_kwargs)\ndef notna(self):\n    return super().notna()",
                "@Appender(_shared_docs[\"notna\"] % _shared_doc_kwargs)\ndef notnull(self):\n    return super().notnull()",
                "def dropna(self, axis=0, how=\"any\", thresh=None, subset=None, inplace=False):\n    \"\"\"\n    Remove missing values.\n\n    See the :ref:`User Guide <missing_data>` for more on which values are\n    considered missing, and how to work with missing data.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Determine if rows or columns which contain missing values are\n        removed.\n\n        * 0, or 'index' : Drop rows which contain missing values.\n        * 1, or 'columns' : Drop columns which contain missing value.\n\n        .. versionchanged:: 1.0.0\n\n           Pass tuple or list to drop on multiple axes.\n           Only a single axis is allowed.\n\n    how : {'any', 'all'}, default 'any'\n        Determine if row or column is removed from DataFrame, when we have\n        at least one NA or all NA.\n\n        * 'any' : If any NA values are present, drop that row or column.\n        * 'all' : If all values are NA, drop that row or column.\n\n    thresh : int, optional\n        Require that many non-NA values.\n    subset : array-like, optional\n        Labels along other axis to consider, e.g. if you are dropping rows\n        these would be a list of columns to include.\n    inplace : bool, default False\n        If True, do operation inplace and return None.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with NA entries dropped from it.\n\n    See Also\n    --------\n    DataFrame.isna: Indicate missing values.\n    DataFrame.notna : Indicate existing (non-missing) values.\n    DataFrame.fillna : Replace missing values.\n    Series.dropna : Drop missing values.\n    Index.dropna : Drop missing indices.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n    ...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n    ...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n    ...                             pd.NaT]})\n    >>> df\n           name        toy       born\n    0    Alfred        NaN        NaT\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Drop the rows where at least one element is missing.\n\n    >>> df.dropna()\n         name        toy       born\n    1  Batman  Batmobile 1940-04-25\n\n    Drop the columns where at least one element is missing.\n\n    >>> df.dropna(axis='columns')\n           name\n    0    Alfred\n    1    Batman\n    2  Catwoman\n\n    Drop the rows where all elements are missing.\n\n    >>> df.dropna(how='all')\n           name        toy       born\n    0    Alfred        NaN        NaT\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Keep only the rows with at least 2 non-NA values.\n\n    >>> df.dropna(thresh=2)\n           name        toy       born\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Define in which columns to look for missing values.\n\n    >>> df.dropna(subset=['name', 'born'])\n           name        toy       born\n    1    Batman  Batmobile 1940-04-25\n\n    Keep the DataFrame with valid entries in the same variable.\n\n    >>> df.dropna(inplace=True)\n    >>> df\n         name        toy       born\n    1  Batman  Batmobile 1940-04-25\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if isinstance(axis, (tuple, list)):\n        # GH20987\n        raise TypeError(\"supplying multiple axes to axis is no longer supported.\")\n\n    axis = self._get_axis_number(axis)\n    agg_axis = 1 - axis\n\n    agg_obj = self\n    if subset is not None:\n        ax = self._get_axis(agg_axis)\n        indices = ax.get_indexer_for(subset)\n        check = indices == -1\n        if check.any():\n            raise KeyError(list(np.compress(check, subset)))\n        agg_obj = self.take(indices, axis=agg_axis)\n\n    count = agg_obj.count(axis=agg_axis)\n\n    if thresh is not None:\n        mask = count >= thresh\n    elif how == \"any\":\n        mask = count == len(agg_obj._get_axis(agg_axis))\n    elif how == \"all\":\n        mask = count > 0\n    else:\n        if how is not None:\n            raise ValueError(f\"invalid how option: {how}\")\n        else:\n            raise TypeError(\"must specify how or thresh\")\n\n    result = self.loc(axis=axis)[mask]\n\n    if inplace:\n        self._update_inplace(result)\n    else:\n        return result",
                "def drop_duplicates(\n    self,\n    subset: Optional[Union[Hashable, Sequence[Hashable]]] = None,\n    keep: Union[str, bool] = \"first\",\n    inplace: bool = False,\n) -> Optional[\"DataFrame\"]:\n    \"\"\"\n    Return DataFrame with duplicate rows removed.\n\n    Considering certain columns is optional. Indexes, including time indexes\n    are ignored.\n\n    Parameters\n    ----------\n    subset : column label or sequence of labels, optional\n        Only consider certain columns for identifying duplicates, by\n        default use all of the columns.\n    keep : {'first', 'last', False}, default 'first'\n        Determines which duplicates (if any) to keep.\n        - ``first`` : Drop duplicates except for the first occurrence.\n        - ``last`` : Drop duplicates except for the last occurrence.\n        - False : Drop all duplicates.\n    inplace : bool, default False\n        Whether to drop duplicates in place or to return a copy.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with duplicates removed or None if ``inplace=True``.\n    \"\"\"\n    if self.empty:\n        return self.copy()\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    duplicated = self.duplicated(subset, keep=keep)\n\n    if inplace:\n        (inds,) = (-duplicated)._ndarray_values.nonzero()\n        new_data = self._data.take(inds)\n        self._update_inplace(new_data)\n    else:\n        return self[-duplicated]\n\n    return None",
                "def duplicated(\n    self,\n    subset: Optional[Union[Hashable, Sequence[Hashable]]] = None,\n    keep: Union[str, bool] = \"first\",\n) -> \"Series\":\n    \"\"\"\n    Return boolean Series denoting duplicate rows.\n\n    Considering certain columns is optional.\n\n    Parameters\n    ----------\n    subset : column label or sequence of labels, optional\n        Only consider certain columns for identifying duplicates, by\n        default use all of the columns.\n    keep : {'first', 'last', False}, default 'first'\n        Determines which duplicates (if any) to mark.\n\n        - ``first`` : Mark duplicates as ``True`` except for the first occurrence.\n        - ``last`` : Mark duplicates as ``True`` except for the last occurrence.\n        - False : Mark all duplicates as ``True``.\n\n    Returns\n    -------\n    Series\n    \"\"\"\n    from pandas.core.sorting import get_group_index\n    from pandas._libs.hashtable import duplicated_int64, _SIZE_HINT_LIMIT\n\n    if self.empty:\n        return Series(dtype=bool)\n\n    def f(vals):\n        labels, shape = algorithms.factorize(\n            vals, size_hint=min(len(self), _SIZE_HINT_LIMIT)\n        )\n        return labels.astype(\"i8\", copy=False), len(shape)\n\n    if subset is None:\n        subset = self.columns\n    elif (\n        not np.iterable(subset)\n        or isinstance(subset, str)\n        or isinstance(subset, tuple)\n        and subset in self.columns\n    ):\n        subset = (subset,)\n\n    #  needed for mypy since can't narrow types using np.iterable\n    subset = cast(Iterable, subset)\n\n    # Verify all columns in subset exist in the queried dataframe\n    # Otherwise, raise a KeyError, same as if you try to __getitem__ with a\n    # key that doesn't exist.\n    diff = Index(subset).difference(self.columns)\n    if not diff.empty:\n        raise KeyError(diff)\n\n    vals = (col.values for name, col in self.items() if name in subset)\n    labels, shape = map(list, zip(*map(f, vals)))\n\n    ids = get_group_index(labels, shape, sort=False, xnull=False)\n    return Series(duplicated_int64(ids, keep), index=self.index)",
                "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.sort_values.__doc__)\ndef sort_values(\n    self,\n    by,\n    axis=0,\n    ascending=True,\n    inplace=False,\n    kind=\"quicksort\",\n    na_position=\"last\",\n):\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    axis = self._get_axis_number(axis)\n\n    if not isinstance(by, list):\n        by = [by]\n    if is_sequence(ascending) and len(by) != len(ascending):\n        raise ValueError(\n            f\"Length of ascending ({len(ascending)}) != length of by ({len(by)})\"\n        )\n    if len(by) > 1:\n        from pandas.core.sorting import lexsort_indexer\n\n        keys = [self._get_label_or_level_values(x, axis=axis) for x in by]\n        indexer = lexsort_indexer(keys, orders=ascending, na_position=na_position)\n        indexer = ensure_platform_int(indexer)\n    else:\n        from pandas.core.sorting import nargsort\n\n        by = by[0]\n        k = self._get_label_or_level_values(by, axis=axis)\n\n        if isinstance(ascending, (tuple, list)):\n            ascending = ascending[0]\n\n        indexer = nargsort(\n            k, kind=kind, ascending=ascending, na_position=na_position\n        )\n\n    new_data = self._data.take(\n        indexer, axis=self._get_block_manager_axis(axis), verify=False\n    )\n\n    if inplace:\n        return self._update_inplace(new_data)\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.sort_index.__doc__)\ndef sort_index(\n    self,\n    axis=0,\n    level=None,\n    ascending=True,\n    inplace=False,\n    kind=\"quicksort\",\n    na_position=\"last\",\n    sort_remaining=True,\n):\n\n    # TODO: this can be combined with Series.sort_index impl as\n    # almost identical\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    axis = self._get_axis_number(axis)\n    labels = self._get_axis(axis)\n\n    # make sure that the axis is lexsorted to start\n    # if not we need to reconstruct to get the correct indexer\n    labels = labels._sort_levels_monotonic()\n    if level is not None:\n\n        new_axis, indexer = labels.sortlevel(\n            level, ascending=ascending, sort_remaining=sort_remaining\n        )\n\n    elif isinstance(labels, ABCMultiIndex):\n        from pandas.core.sorting import lexsort_indexer\n\n        indexer = lexsort_indexer(\n            labels._get_codes_for_sorting(),\n            orders=ascending,\n            na_position=na_position,\n        )\n    else:\n        from pandas.core.sorting import nargsort\n\n        # Check monotonic-ness before sort an index\n        # GH11080\n        if (ascending and labels.is_monotonic_increasing) or (\n            not ascending and labels.is_monotonic_decreasing\n        ):\n            if inplace:\n                return\n            else:\n                return self.copy()\n\n        indexer = nargsort(\n            labels, kind=kind, ascending=ascending, na_position=na_position\n        )\n\n    baxis = self._get_block_manager_axis(axis)\n    new_data = self._data.take(indexer, axis=baxis, verify=False)\n\n    # reconstruct axis if needed\n    new_data.axes[baxis] = new_data.axes[baxis]._sort_levels_monotonic()\n\n    if inplace:\n        return self._update_inplace(new_data)\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                "def nlargest(self, n, columns, keep=\"first\"):\n    \"\"\"\n    Return the first `n` rows ordered by `columns` in descending order.\n\n    Return the first `n` rows with the largest values in `columns`, in\n    descending order. The columns that are not specified are returned as\n    well, but not used for ordering.\n\n    This method is equivalent to\n    ``df.sort_values(columns, ascending=False).head(n)``, but more\n    performant.\n\n    Parameters\n    ----------\n    n : int\n        Number of rows to return.\n    columns : label or list of labels\n        Column label(s) to order by.\n    keep : {'first', 'last', 'all'}, default 'first'\n        Where there are duplicate values:\n\n        - `first` : prioritize the first occurrence(s)\n        - `last` : prioritize the last occurrence(s)\n        - ``all`` : do not drop any duplicates, even it means\n                    selecting more than `n` items.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n        The first `n` rows ordered by the given columns in descending\n        order.\n\n    See Also\n    --------\n    DataFrame.nsmallest : Return the first `n` rows ordered by `columns` in\n        ascending order.\n    DataFrame.sort_values : Sort DataFrame by the values.\n    DataFrame.head : Return the first `n` rows without re-ordering.\n\n    Notes\n    -----\n    This function cannot be used with all column types. For example, when\n    specifying columns with `object` or `category` dtypes, ``TypeError`` is\n    raised.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n    ...                                   434000, 434000, 337000, 11300,\n    ...                                   11300, 11300],\n    ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n    ...                            17036, 182, 38, 311],\n    ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n    ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n    ...                   index=[\"Italy\", \"France\", \"Malta\",\n    ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n    ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n    >>> df\n              population      GDP alpha-2\n    Italy       59000000  1937894      IT\n    France      65000000  2583560      FR\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n    Iceland       337000    17036      IS\n    Nauru          11300      182      NR\n    Tuvalu         11300       38      TV\n    Anguilla       11300      311      AI\n\n    In the following example, we will use ``nlargest`` to select the three\n    rows having the largest values in column \"population\".\n\n    >>> df.nlargest(3, 'population')\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Malta       434000    12011      MT\n\n    When using ``keep='last'``, ties are resolved in reverse order:\n\n    >>> df.nlargest(3, 'population', keep='last')\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Brunei      434000    12128      BN\n\n    When using ``keep='all'``, all duplicate items are maintained:\n\n    >>> df.nlargest(3, 'population', keep='all')\n              population      GDP alpha-2\n    France      65000000  2583560      FR\n    Italy       59000000  1937894      IT\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n\n    To order by the largest values in column \"population\" and then \"GDP\",\n    we can specify multiple columns like in the next example.\n\n    >>> df.nlargest(3, ['population', 'GDP'])\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Brunei      434000    12128      BN\n    \"\"\"\n    return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns).nlargest()",
                "def nsmallest(self, n, columns, keep=\"first\"):\n    \"\"\"\n    Return the first `n` rows ordered by `columns` in ascending order.\n\n    Return the first `n` rows with the smallest values in `columns`, in\n    ascending order. The columns that are not specified are returned as\n    well, but not used for ordering.\n\n    This method is equivalent to\n    ``df.sort_values(columns, ascending=True).head(n)``, but more\n    performant.\n\n    Parameters\n    ----------\n    n : int\n        Number of items to retrieve.\n    columns : list or str\n        Column name or names to order by.\n    keep : {'first', 'last', 'all'}, default 'first'\n        Where there are duplicate values:\n\n        - ``first`` : take the first occurrence.\n        - ``last`` : take the last occurrence.\n        - ``all`` : do not drop any duplicates, even it means\n          selecting more than `n` items.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.nlargest : Return the first `n` rows ordered by `columns` in\n        descending order.\n    DataFrame.sort_values : Sort DataFrame by the values.\n    DataFrame.head : Return the first `n` rows without re-ordering.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n    ...                                   434000, 434000, 337000, 11300,\n    ...                                   11300, 11300],\n    ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n    ...                            17036, 182, 38, 311],\n    ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n    ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n    ...                   index=[\"Italy\", \"France\", \"Malta\",\n    ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n    ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n    >>> df\n              population      GDP alpha-2\n    Italy       59000000  1937894      IT\n    France      65000000  2583560      FR\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n    Iceland       337000    17036      IS\n    Nauru          11300      182      NR\n    Tuvalu         11300       38      TV\n    Anguilla       11300      311      AI\n\n    In the following example, we will use ``nsmallest`` to select the\n    three rows having the smallest values in column \"a\".\n\n    >>> df.nsmallest(3, 'population')\n              population  GDP alpha-2\n    Nauru          11300  182      NR\n    Tuvalu         11300   38      TV\n    Anguilla       11300  311      AI\n\n    When using ``keep='last'``, ties are resolved in reverse order:\n\n    >>> df.nsmallest(3, 'population', keep='last')\n              population  GDP alpha-2\n    Anguilla       11300  311      AI\n    Tuvalu         11300   38      TV\n    Nauru          11300  182      NR\n\n    When using ``keep='all'``, all duplicate items are maintained:\n\n    >>> df.nsmallest(3, 'population', keep='all')\n              population  GDP alpha-2\n    Nauru          11300  182      NR\n    Tuvalu         11300   38      TV\n    Anguilla       11300  311      AI\n\n    To order by the largest values in column \"a\" and then \"c\", we can\n    specify multiple columns like in the next example.\n\n    >>> df.nsmallest(3, ['population', 'GDP'])\n              population  GDP alpha-2\n    Tuvalu         11300   38      TV\n    Nauru          11300  182      NR\n    Anguilla       11300  311      AI\n    \"\"\"\n    return algorithms.SelectNFrame(\n        self, n=n, keep=keep, columns=columns\n    ).nsmallest()",
                "def swaplevel(self, i=-2, j=-1, axis=0):\n    \"\"\"\n    Swap levels i and j in a MultiIndex on a particular axis.\n\n    Parameters\n    ----------\n    i, j : int or str\n        Levels of the indices to be swapped. Can pass level name as string.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    result = self.copy()\n\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        result.index = result.index.swaplevel(i, j)\n    else:\n        result.columns = result.columns.swaplevel(i, j)\n    return result",
                "def reorder_levels(self, order, axis=0):\n    \"\"\"\n    Rearrange index levels using input order. May not drop or duplicate levels.\n\n    Parameters\n    ----------\n    order : list of int or list of str\n        List representing new level order. Reference level by number\n        (position) or by key (label).\n    axis : int\n        Where to reorder levels.\n\n    Returns\n    -------\n    type of caller (new object)\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    if not isinstance(self._get_axis(axis), ABCMultiIndex):  # pragma: no cover\n        raise TypeError(\"Can only reorder levels on a hierarchical axis.\")\n\n    result = self.copy()\n\n    if axis == 0:\n        result.index = result.index.reorder_levels(order)\n    else:\n        result.columns = result.columns.reorder_levels(order)\n    return result",
                "def _combine_frame(self, other, func, fill_value=None, level=None):\n    this, other = self.align(other, join=\"outer\", level=level, copy=False)\n\n    if fill_value is None:\n        # since _arith_op may be called in a loop, avoid function call\n        #  overhead if possible by doing this check once\n        _arith_op = func\n\n    else:\n\n        def _arith_op(left, right):\n            # for the mixed_type case where we iterate over columns,\n            # _arith_op(left, right) is equivalent to\n            # left._binop(right, func, fill_value=fill_value)\n            left, right = ops.fill_binop(left, right, fill_value)\n            return func(left, right)\n\n    if ops.should_series_dispatch(this, other, func):\n        # iterate over columns\n        new_data = ops.dispatch_to_series(this, other, _arith_op)\n    else:\n        with np.errstate(all=\"ignore\"):\n            res_values = _arith_op(this.values, other.values)\n        new_data = dispatch_fill_zeros(func, this.values, other.values, res_values)\n    return this._construct_result(new_data)",
                "def _combine_match_index(self, other, func):\n    # at this point we have `self.index.equals(other.index)`\n\n    if ops.should_series_dispatch(self, other, func):\n        # operate column-wise; avoid costly object-casting in `.values`\n        new_data = ops.dispatch_to_series(self, other, func)\n    else:\n        # fastpath --> operate directly on values\n        with np.errstate(all=\"ignore\"):\n            new_data = func(self.values.T, other.values).T\n    return new_data",
                "def _construct_result(self, result) -> \"DataFrame\":\n    \"\"\"\n    Wrap the result of an arithmetic, comparison, or logical operation.\n\n    Parameters\n    ----------\n    result : DataFrame\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    out = self._constructor(result, index=self.index, copy=False)\n    # Pin columns instead of passing to constructor for compat with\n    #  non-unique columns case\n    out.columns = self.columns\n    return out",
                "def combine(self, other, func, fill_value=None, overwrite=True):\n    \"\"\"\n    Perform column-wise combine with another DataFrame.\n\n    Combines a DataFrame with `other` DataFrame using `func`\n    to element-wise combine columns. The row and column indexes of the\n    resulting DataFrame will be the union of the two.\n\n    Parameters\n    ----------\n    other : DataFrame\n        The DataFrame to merge column-wise.\n    func : function\n        Function that takes two series as inputs and return a Series or a\n        scalar. Used to merge the two dataframes column by columns.\n    fill_value : scalar value, default None\n        The value to fill NaNs with prior to passing any column to the\n        merge func.\n    overwrite : bool, default True\n        If True, columns in `self` that do not exist in `other` will be\n        overwritten with NaNs.\n\n    Returns\n    -------\n    DataFrame\n        Combination of the provided DataFrames.\n\n    See Also\n    --------\n    DataFrame.combine_first : Combine two DataFrame objects and default to\n        non-null values in frame calling the method.\n\n    Examples\n    --------\n    Combine using a simple function that chooses the smaller column.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> take_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2\n    >>> df1.combine(df2, take_smaller)\n       A  B\n    0  0  3\n    1  0  3\n\n    Example using a true element-wise combine function.\n\n    >>> df1 = pd.DataFrame({'A': [5, 0], 'B': [2, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine(df2, np.minimum)\n       A  B\n    0  1  2\n    1  0  3\n\n    Using `fill_value` fills Nones prior to passing the column to the\n    merge function.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine(df2, take_smaller, fill_value=-5)\n       A    B\n    0  0 -5.0\n    1  0  4.0\n\n    However, if the same element in both dataframes is None, that None\n    is preserved\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [None, 3]})\n    >>> df1.combine(df2, take_smaller, fill_value=-5)\n        A    B\n    0  0 -5.0\n    1  0  3.0\n\n    Example that demonstrates the use of `overwrite` and behavior when\n    the axis differ between the dataframes.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [-10, 1], }, index=[1, 2])\n    >>> df1.combine(df2, take_smaller)\n         A    B     C\n    0  NaN  NaN   NaN\n    1  NaN  3.0 -10.0\n    2  NaN  3.0   1.0\n\n    >>> df1.combine(df2, take_smaller, overwrite=False)\n         A    B     C\n    0  0.0  NaN   NaN\n    1  0.0  3.0 -10.0\n    2  NaN  3.0   1.0\n\n    Demonstrating the preference of the passed in dataframe.\n\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1], }, index=[1, 2])\n    >>> df2.combine(df1, take_smaller)\n       A    B   C\n    0  0.0  NaN NaN\n    1  0.0  3.0 NaN\n    2  NaN  3.0 NaN\n\n    >>> df2.combine(df1, take_smaller, overwrite=False)\n         A    B   C\n    0  0.0  NaN NaN\n    1  0.0  3.0 1.0\n    2  NaN  3.0 1.0\n    \"\"\"\n    other_idxlen = len(other.index)  # save for compare\n\n    this, other = self.align(other, copy=False)\n    new_index = this.index\n\n    if other.empty and len(new_index) == len(self.index):\n        return self.copy()\n\n    if self.empty and len(other) == other_idxlen:\n        return other.copy()\n\n    # sorts if possible\n    new_columns = this.columns.union(other.columns)\n    do_fill = fill_value is not None\n    result = {}\n    for col in new_columns:\n        series = this[col]\n        otherSeries = other[col]\n\n        this_dtype = series.dtype\n        other_dtype = otherSeries.dtype\n\n        this_mask = isna(series)\n        other_mask = isna(otherSeries)\n\n        # don't overwrite columns unnecessarily\n        # DO propagate if this column is not in the intersection\n        if not overwrite and other_mask.all():\n            result[col] = this[col].copy()\n            continue\n\n        if do_fill:\n            series = series.copy()\n            otherSeries = otherSeries.copy()\n            series[this_mask] = fill_value\n            otherSeries[other_mask] = fill_value\n\n        if col not in self.columns:\n            # If self DataFrame does not have col in other DataFrame,\n            # try to promote series, which is all NaN, as other_dtype.\n            new_dtype = other_dtype\n            try:\n                series = series.astype(new_dtype, copy=False)\n            except ValueError:\n                # e.g. new_dtype is integer types\n                pass\n        else:\n            # if we have different dtypes, possibly promote\n            new_dtype = find_common_type([this_dtype, other_dtype])\n            if not is_dtype_equal(this_dtype, new_dtype):\n                series = series.astype(new_dtype)\n            if not is_dtype_equal(other_dtype, new_dtype):\n                otherSeries = otherSeries.astype(new_dtype)\n\n        arr = func(series, otherSeries)\n        arr = maybe_downcast_to_dtype(arr, this_dtype)\n\n        result[col] = arr\n\n    # convert_objects just in case\n    return self._constructor(result, index=new_index, columns=new_columns)",
                "def combine_first(self, other):\n    \"\"\"\n    Update null elements with value in the same location in `other`.\n\n    Combine two DataFrame objects by filling null values in one DataFrame\n    with non-null values from other DataFrame. The row and column indexes\n    of the resulting DataFrame will be the union of the two.\n\n    Parameters\n    ----------\n    other : DataFrame\n        Provided DataFrame to use to fill null values.\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.combine : Perform series-wise operation on two DataFrames\n        using a given function.\n\n    Examples\n    --------\n\n    >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine_first(df2)\n         A    B\n    0  1.0  3.0\n    1  0.0  4.0\n\n    Null values still persist if the location of that null value\n    does not exist in `other`\n\n    >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [4, None]})\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1]}, index=[1, 2])\n    >>> df1.combine_first(df2)\n         A    B    C\n    0  NaN  4.0  NaN\n    1  0.0  3.0  1.0\n    2  NaN  3.0  1.0\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    def extract_values(arr):\n        # Does two things:\n        # 1. maybe gets the values from the Series / Index\n        # 2. convert datelike to i8\n        if isinstance(arr, (ABCIndexClass, ABCSeries)):\n            arr = arr._values\n\n        if needs_i8_conversion(arr):\n            if is_extension_array_dtype(arr.dtype):\n                arr = arr.asi8\n            else:\n                arr = arr.view(\"i8\")\n        return arr\n\n    def combiner(x, y):\n        mask = isna(x)\n        if isinstance(mask, (ABCIndexClass, ABCSeries)):\n            mask = mask._values\n\n        x_values = extract_values(x)\n        y_values = extract_values(y)\n\n        # If the column y in other DataFrame is not in first DataFrame,\n        # just return y_values.\n        if y.name not in self.columns:\n            return y_values\n\n        return expressions.where(mask, y_values, x_values)\n\n    return self.combine(other, combiner, overwrite=False)",
                "def update(\n    self, other, join=\"left\", overwrite=True, filter_func=None, errors=\"ignore\"\n):\n    \"\"\"\n    Modify in place using non-NA values from another DataFrame.\n\n    Aligns on indices. There is no return value.\n\n    Parameters\n    ----------\n    other : DataFrame, or object coercible into a DataFrame\n        Should have at least one matching index/column label\n        with the original DataFrame. If a Series is passed,\n        its name attribute must be set, and that will be\n        used as the column name to align with the original DataFrame.\n    join : {'left'}, default 'left'\n        Only left join is implemented, keeping the index and columns of the\n        original object.\n    overwrite : bool, default True\n        How to handle non-NA values for overlapping keys:\n\n        * True: overwrite original DataFrame's values\n          with values from `other`.\n        * False: only update values that are NA in\n          the original DataFrame.\n\n    filter_func : callable(1d-array) -> bool 1d-array, optional\n        Can choose to replace values other than NA. Return True for values\n        that should be updated.\n    errors : {'raise', 'ignore'}, default 'ignore'\n        If 'raise', will raise a ValueError if the DataFrame and `other`\n        both contain non-NA data in the same place.\n\n        .. versionchanged:: 0.24.0\n           Changed from `raise_conflict=False|True`\n           to `errors='ignore'|'raise'`.\n\n    Returns\n    -------\n    None : method directly changes calling object\n\n    Raises\n    ------\n    ValueError\n        * When `errors='raise'` and there's overlapping non-NA data.\n        * When `errors` is not either `'ignore'` or `'raise'`\n    NotImplementedError\n        * If `join != 'left'`\n\n    See Also\n    --------\n    dict.update : Similar method for dictionaries.\n    DataFrame.merge : For column(s)-on-columns(s) operations.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2, 3],\n    ...                    'B': [400, 500, 600]})\n    >>> new_df = pd.DataFrame({'B': [4, 5, 6],\n    ...                        'C': [7, 8, 9]})\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  1  4\n    1  2  5\n    2  3  6\n\n    The DataFrame's length does not increase as a result of the update,\n    only values at matching index/column labels are updated.\n\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  a  d\n    1  b  e\n    2  c  f\n\n    For Series, it's name attribute must be set.\n\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_column = pd.Series(['d', 'e'], name='B', index=[0, 2])\n    >>> df.update(new_column)\n    >>> df\n       A  B\n    0  a  d\n    1  b  y\n    2  c  e\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_df = pd.DataFrame({'B': ['d', 'e']}, index=[1, 2])\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  a  x\n    1  b  d\n    2  c  e\n\n    If `other` contains NaNs the corresponding values are not updated\n    in the original dataframe.\n\n    >>> df = pd.DataFrame({'A': [1, 2, 3],\n    ...                    'B': [400, 500, 600]})\n    >>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})\n    >>> df.update(new_df)\n    >>> df\n       A      B\n    0  1    4.0\n    1  2  500.0\n    2  3    6.0\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    # TODO: Support other joins\n    if join != \"left\":  # pragma: no cover\n        raise NotImplementedError(\"Only left join is supported\")\n    if errors not in [\"ignore\", \"raise\"]:\n        raise ValueError(\"The parameter errors must be either 'ignore' or 'raise'\")\n\n    if not isinstance(other, DataFrame):\n        other = DataFrame(other)\n\n    other = other.reindex_like(self)\n\n    for col in self.columns:\n        this = self[col]._values\n        that = other[col]._values\n        if filter_func is not None:\n            with np.errstate(all=\"ignore\"):\n                mask = ~filter_func(this) | isna(that)\n        else:\n            if errors == \"raise\":\n                mask_this = notna(that)\n                mask_that = notna(this)\n                if any(mask_this & mask_that):\n                    raise ValueError(\"Data overlaps.\")\n\n            if overwrite:\n                mask = isna(that)\n            else:\n                mask = notna(this)\n\n        # don't overwrite columns unnecessarily\n        if mask.all():\n            continue\n\n        self[col] = expressions.where(mask, this, that)",
                "@Substitution(\"\")\n@Appender(_shared_docs[\"pivot\"])\ndef pivot(self, index=None, columns=None, values=None):\n    from pandas.core.reshape.pivot import pivot\n\n    return pivot(self, index=index, columns=columns, values=values)",
                "@Substitution(\"\")\n@Appender(_shared_docs[\"pivot_table\"])\ndef pivot_table(\n    self,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n):\n    from pandas.core.reshape.pivot import pivot_table\n\n    return pivot_table(\n        self,\n        values=values,\n        index=index,\n        columns=columns,\n        aggfunc=aggfunc,\n        fill_value=fill_value,\n        margins=margins,\n        dropna=dropna,\n        margins_name=margins_name,\n        observed=observed,\n    )",
                "def stack(self, level=-1, dropna=True):\n    \"\"\"\n    Stack the prescribed level(s) from columns to index.\n\n    Return a reshaped DataFrame or Series having a multi-level\n    index with one or more new inner-most levels compared to the current\n    DataFrame. The new inner-most levels are created by pivoting the\n    columns of the current dataframe:\n\n      - if the columns have a single level, the output is a Series;\n      - if the columns have multiple levels, the new index\n        level(s) is (are) taken from the prescribed level(s) and\n        the output is a DataFrame.\n\n    The new index levels are sorted.\n\n    Parameters\n    ----------\n    level : int, str, list, default -1\n        Level(s) to stack from the column axis onto the index\n        axis, defined as one index or label, or a list of indices\n        or labels.\n    dropna : bool, default True\n        Whether to drop rows in the resulting Frame/Series with\n        missing values. Stacking a column level onto the index\n        axis can create combinations of index and column values\n        that are missing from the original dataframe. See Examples\n        section.\n\n    Returns\n    -------\n    DataFrame or Series\n        Stacked dataframe or series.\n\n    See Also\n    --------\n    DataFrame.unstack : Unstack prescribed level(s) from index axis\n         onto column axis.\n    DataFrame.pivot : Reshape dataframe from long format to wide\n         format.\n    DataFrame.pivot_table : Create a spreadsheet-style pivot table\n         as a DataFrame.\n\n    Notes\n    -----\n    The function is named by analogy with a collection of books\n    being reorganized from being side by side on a horizontal\n    position (the columns of the dataframe) to being stacked\n    vertically on top of each other (in the index of the\n    dataframe).\n\n    Examples\n    --------\n    **Single level columns**\n\n    >>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=['weight', 'height'])\n\n    Stacking a dataframe with a single level column axis returns a Series:\n\n    >>> df_single_level_cols\n         weight height\n    cat       0      1\n    dog       2      3\n    >>> df_single_level_cols.stack()\n    cat  weight    0\n         height    1\n    dog  weight    2\n         height    3\n    dtype: int64\n\n    **Multi level columns: simple case**\n\n    >>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n    ...                                        ('weight', 'pounds')])\n    >>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol1)\n\n    Stacking a dataframe with a multi-level column axis:\n\n    >>> df_multi_level_cols1\n         weight\n             kg    pounds\n    cat       1        2\n    dog       2        4\n    >>> df_multi_level_cols1.stack()\n                weight\n    cat kg           1\n        pounds       2\n    dog kg           2\n        pounds       4\n\n    **Missing values**\n\n    >>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n    ...                                        ('height', 'm')])\n    >>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol2)\n\n    It is common to have missing values when stacking a dataframe\n    with multi-level columns, as the stacked dataframe typically\n    has more values than the original dataframe. Missing values\n    are filled with NaNs:\n\n    >>> df_multi_level_cols2\n        weight height\n            kg      m\n    cat    1.0    2.0\n    dog    3.0    4.0\n    >>> df_multi_level_cols2.stack()\n            height  weight\n    cat kg     NaN     1.0\n        m      2.0     NaN\n    dog kg     NaN     3.0\n        m      4.0     NaN\n\n    **Prescribing the level(s) to be stacked**\n\n    The first parameter controls which level or levels are stacked:\n\n    >>> df_multi_level_cols2.stack(0)\n                 kg    m\n    cat height  NaN  2.0\n        weight  1.0  NaN\n    dog height  NaN  4.0\n        weight  3.0  NaN\n    >>> df_multi_level_cols2.stack([0, 1])\n    cat  height  m     2.0\n         weight  kg    1.0\n    dog  height  m     4.0\n         weight  kg    3.0\n    dtype: float64\n\n    **Dropping missing values**\n\n    >>> df_multi_level_cols3 = pd.DataFrame([[None, 1.0], [2.0, 3.0]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol2)\n\n    Note that rows where all values are missing are dropped by\n    default but this behaviour can be controlled via the dropna\n    keyword parameter:\n\n    >>> df_multi_level_cols3\n        weight height\n            kg      m\n    cat    NaN    1.0\n    dog    2.0    3.0\n    >>> df_multi_level_cols3.stack(dropna=False)\n            height  weight\n    cat kg     NaN     NaN\n        m      1.0     NaN\n    dog kg     NaN     2.0\n        m      3.0     NaN\n    >>> df_multi_level_cols3.stack(dropna=True)\n            height  weight\n    cat m      1.0     NaN\n    dog kg     NaN     2.0\n        m      3.0     NaN\n    \"\"\"\n    from pandas.core.reshape.reshape import stack, stack_multiple\n\n    if isinstance(level, (tuple, list)):\n        return stack_multiple(self, level, dropna=dropna)\n    else:\n        return stack(self, level, dropna=dropna)",
                "def explode(self, column: Union[str, Tuple]) -> \"DataFrame\":\n    \"\"\"\n    Transform each element of a list-like to a row, replicating index values.\n\n    .. versionadded:: 0.25.0\n\n    Parameters\n    ----------\n    column : str or tuple\n        Column to explode.\n\n    Returns\n    -------\n    DataFrame\n        Exploded lists to rows of the subset columns;\n        index will be duplicated for these rows.\n\n    Raises\n    ------\n    ValueError :\n        if columns of the frame are not unique.\n\n    See Also\n    --------\n    DataFrame.unstack : Pivot a level of the (necessarily hierarchical)\n        index labels.\n    DataFrame.melt : Unpivot a DataFrame from wide format to long format.\n    Series.explode : Explode a DataFrame from list-like columns to long format.\n\n    Notes\n    -----\n    This routine will explode list-likes including lists, tuples,\n    Series, and np.ndarray. The result dtype of the subset rows will\n    be object. Scalars will be returned unchanged. Empty list-likes will\n    result in a np.nan for that row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [[1, 2, 3], 'foo', [], [3, 4]], 'B': 1})\n    >>> df\n               A  B\n    0  [1, 2, 3]  1\n    1        foo  1\n    2         []  1\n    3     [3, 4]  1\n\n    >>> df.explode('A')\n         A  B\n    0    1  1\n    0    2  1\n    0    3  1\n    1  foo  1\n    2  NaN  1\n    3    3  1\n    3    4  1\n    \"\"\"\n\n    if not (is_scalar(column) or isinstance(column, tuple)):\n        raise ValueError(\"column must be a scalar\")\n    if not self.columns.is_unique:\n        raise ValueError(\"columns must be unique\")\n\n    df = self.reset_index(drop=True)\n    # TODO: use overload to refine return type of reset_index\n    assert df is not None  # needed for mypy\n    result = df[column].explode()\n    result = df.drop([column], axis=1).join(result)\n    result.index = self.index.take(result.index)\n    result = result.reindex(columns=self.columns, copy=False)\n\n    return result",
                "def unstack(self, level=-1, fill_value=None):\n    \"\"\"\n    Pivot a level of the (necessarily hierarchical) index labels.\n\n    Returns a DataFrame having a new level of column labels whose inner-most level\n    consists of the pivoted index labels.\n\n    If the index is not a MultiIndex, the output will be a Series\n    (the analogue of stack when the columns are not a MultiIndex).\n\n    The level involved will automatically get sorted.\n\n    Parameters\n    ----------\n    level : int, str, or list of these, default -1 (last level)\n        Level(s) of index to unstack, can pass level name.\n    fill_value : int, str or dict\n        Replace NaN with this value if the unstack produces missing values.\n\n    Returns\n    -------\n    Series or DataFrame\n\n    See Also\n    --------\n    DataFrame.pivot : Pivot a table based on column values.\n    DataFrame.stack : Pivot a level of the column labels (inverse operation\n        from `unstack`).\n\n    Examples\n    --------\n    >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n    ...                                    ('two', 'a'), ('two', 'b')])\n    >>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n    >>> s\n    one  a   1.0\n         b   2.0\n    two  a   3.0\n         b   4.0\n    dtype: float64\n\n    >>> s.unstack(level=-1)\n         a   b\n    one  1.0  2.0\n    two  3.0  4.0\n\n    >>> s.unstack(level=0)\n       one  two\n    a  1.0   3.0\n    b  2.0   4.0\n\n    >>> df = s.unstack(level=0)\n    >>> df.unstack()\n    one  a  1.0\n         b  2.0\n    two  a  3.0\n         b  4.0\n    dtype: float64\n    \"\"\"\n    from pandas.core.reshape.reshape import unstack\n\n    return unstack(self, level, fill_value)",
                "@Appender(\n    _shared_docs[\"melt\"]\n    % dict(\n        caller=\"df.melt(\", versionadded=\".. versionadded:: 0.20.0\\n\", other=\"melt\"\n    )\n)\ndef melt(\n    self,\n    id_vars=None,\n    value_vars=None,\n    var_name=None,\n    value_name=\"value\",\n    col_level=None,\n):\n    from pandas.core.reshape.melt import melt\n\n    return melt(\n        self,\n        id_vars=id_vars,\n        value_vars=value_vars,\n        var_name=var_name,\n        value_name=value_name,\n        col_level=col_level,\n    )",
                "def diff(self, periods=1, axis=0):\n    \"\"\"\n    First discrete difference of element.\n\n    Calculates the difference of a DataFrame element compared with another\n    element in the DataFrame (default is the element in the same column\n    of the previous row).\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Periods to shift for calculating difference, accepts negative\n        values.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Take difference over rows (0) or columns (1).\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    Series.diff: First discrete difference for a Series.\n    DataFrame.pct_change: Percent change over given number of periods.\n    DataFrame.shift: Shift index by desired number of periods with an\n        optional time freq.\n\n    Examples\n    --------\n    Difference with previous row\n\n    >>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n    ...                    'b': [1, 1, 2, 3, 5, 8],\n    ...                    'c': [1, 4, 9, 16, 25, 36]})\n    >>> df\n       a  b   c\n    0  1  1   1\n    1  2  1   4\n    2  3  2   9\n    3  4  3  16\n    4  5  5  25\n    5  6  8  36\n\n    >>> df.diff()\n         a    b     c\n    0  NaN  NaN   NaN\n    1  1.0  0.0   3.0\n    2  1.0  1.0   5.0\n    3  1.0  1.0   7.0\n    4  1.0  2.0   9.0\n    5  1.0  3.0  11.0\n\n    Difference with previous column\n\n    >>> df.diff(axis=1)\n        a    b     c\n    0 NaN  0.0   0.0\n    1 NaN -1.0   3.0\n    2 NaN -1.0   7.0\n    3 NaN -1.0  13.0\n    4 NaN  0.0  20.0\n    5 NaN  2.0  28.0\n\n    Difference with 3rd previous row\n\n    >>> df.diff(periods=3)\n         a    b     c\n    0  NaN  NaN   NaN\n    1  NaN  NaN   NaN\n    2  NaN  NaN   NaN\n    3  3.0  2.0  15.0\n    4  3.0  4.0  21.0\n    5  3.0  6.0  27.0\n\n    Difference with following row\n\n    >>> df.diff(periods=-1)\n         a    b     c\n    0 -1.0  0.0  -3.0\n    1 -1.0 -1.0  -5.0\n    2 -1.0 -1.0  -7.0\n    3 -1.0 -2.0  -9.0\n    4 -1.0 -3.0 -11.0\n    5  NaN  NaN   NaN\n    \"\"\"\n    bm_axis = self._get_block_manager_axis(axis)\n    new_data = self._data.diff(n=periods, axis=bm_axis)\n    return self._constructor(new_data)",
                "def _gotitem(\n    self,\n    key: Union[str, List[str]],\n    ndim: int,\n    subset: Optional[Union[Series, ABCDataFrame]] = None,\n) -> Union[Series, ABCDataFrame]:\n    \"\"\"\n    Sub-classes to define. Return a sliced object.\n\n    Parameters\n    ----------\n    key : string / list of selections\n    ndim : 1,2\n        requested ndim of result\n    subset : object, default None\n        subset to act on\n    \"\"\"\n    if subset is None:\n        subset = self\n    elif subset.ndim == 1:  # is Series\n        return subset\n\n    # TODO: _shallow_copy(subset)?\n    return subset[key]",
                "@Substitution(\n    see_also=_agg_summary_and_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\\n.. versionadded:: 0.20.0\\n\",\n    **_shared_doc_kwargs,\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, func, axis=0, *args, **kwargs):\n    axis = self._get_axis_number(axis)\n\n    result = None\n    try:\n        result, how = self._aggregate(func, axis=axis, *args, **kwargs)\n    except TypeError:\n        pass\n    if result is None:\n        return self.apply(func, axis=axis, args=args, **kwargs)\n    return result",
                "def _aggregate(self, arg, axis=0, *args, **kwargs):\n    if axis == 1:\n        # NDFrame.aggregate returns a tuple, and we need to transpose\n        # only result\n        result, how = self.T._aggregate(arg, *args, **kwargs)\n        result = result.T if result is not None else result\n        return result, how\n    return super()._aggregate(arg, *args, **kwargs)",
                "@Appender(_shared_docs[\"transform\"] % _shared_doc_kwargs)\ndef transform(self, func, axis=0, *args, **kwargs):\n    axis = self._get_axis_number(axis)\n    if axis == 1:\n        return self.T.transform(func, *args, **kwargs).T\n    return super().transform(func, *args, **kwargs)",
                "def apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds):\n    \"\"\"\n    Apply a function along an axis of the DataFrame.\n\n    Objects passed to the function are Series objects whose index is\n    either the DataFrame's index (``axis=0``) or the DataFrame's columns\n    (``axis=1``). By default (``result_type=None``), the final return type\n    is inferred from the return type of the applied function. Otherwise,\n    it depends on the `result_type` argument.\n\n    Parameters\n    ----------\n    func : function\n        Function to apply to each column or row.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Axis along which the function is applied:\n\n        * 0 or 'index': apply function to each column.\n        * 1 or 'columns': apply function to each row.\n\n    raw : bool, default False\n        Determines if row or column is passed as a Series or ndarray object:\n\n        * ``False`` : passes each row or column as a Series to the\n          function.\n        * ``True`` : the passed function will receive ndarray objects\n          instead.\n          If you are just applying a NumPy reduction function this will\n          achieve much better performance.\n\n    result_type : {'expand', 'reduce', 'broadcast', None}, default None\n        These only act when ``axis=1`` (columns):\n\n        * 'expand' : list-like results will be turned into columns.\n        * 'reduce' : returns a Series if possible rather than expanding\n          list-like results. This is the opposite of 'expand'.\n        * 'broadcast' : results will be broadcast to the original shape\n          of the DataFrame, the original index and columns will be\n          retained.\n\n        The default behaviour (None) depends on the return value of the\n        applied function: list-like results will be returned as a Series\n        of those. However if the apply function returns a Series these\n        are expanded to columns.\n\n        .. versionadded:: 0.23.0\n\n    args : tuple\n        Positional arguments to pass to `func` in addition to the\n        array/series.\n    **kwds\n        Additional keyword arguments to pass as keywords arguments to\n        `func`.\n\n    Returns\n    -------\n    Series or DataFrame\n        Result of applying ``func`` along the given axis of the\n        DataFrame.\n\n    See Also\n    --------\n    DataFrame.applymap: For elementwise operations.\n    DataFrame.aggregate: Only perform aggregating type operations.\n    DataFrame.transform: Only perform transforming type operations.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])\n    >>> df\n       A  B\n    0  4  9\n    1  4  9\n    2  4  9\n\n    Using a numpy universal function (in this case the same as\n    ``np.sqrt(df)``):\n\n    >>> df.apply(np.sqrt)\n         A    B\n    0  2.0  3.0\n    1  2.0  3.0\n    2  2.0  3.0\n\n    Using a reducing function on either axis\n\n    >>> df.apply(np.sum, axis=0)\n    A    12\n    B    27\n    dtype: int64\n\n    >>> df.apply(np.sum, axis=1)\n    0    13\n    1    13\n    2    13\n    dtype: int64\n\n    Returning a list-like will result in a Series\n\n    >>> df.apply(lambda x: [1, 2], axis=1)\n    0    [1, 2]\n    1    [1, 2]\n    2    [1, 2]\n    dtype: object\n\n    Passing result_type='expand' will expand list-like results\n    to columns of a Dataframe\n\n    >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n       0  1\n    0  1  2\n    1  1  2\n    2  1  2\n\n    Returning a Series inside the function is similar to passing\n    ``result_type='expand'``. The resulting column names\n    will be the Series index.\n\n    >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n       foo  bar\n    0    1    2\n    1    1    2\n    2    1    2\n\n    Passing ``result_type='broadcast'`` will ensure the same shape\n    result, whether list-like or scalar is returned by the function,\n    and broadcast it along the axis. The resulting column names will\n    be the originals.\n\n    >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n       A  B\n    0  1  2\n    1  1  2\n    2  1  2\n    \"\"\"\n    from pandas.core.apply import frame_apply\n\n    op = frame_apply(\n        self,\n        func=func,\n        axis=axis,\n        raw=raw,\n        result_type=result_type,\n        args=args,\n        kwds=kwds,\n    )\n    return op.get_result()",
                "def applymap(self, func):\n    \"\"\"\n    Apply a function to a Dataframe elementwise.\n\n    This method applies a function that accepts and returns a scalar\n    to every element of a DataFrame.\n\n    Parameters\n    ----------\n    func : callable\n        Python function, returns a single value from a single value.\n\n    Returns\n    -------\n    DataFrame\n        Transformed DataFrame.\n\n    See Also\n    --------\n    DataFrame.apply : Apply a function along input axis of DataFrame.\n\n    Notes\n    -----\n    In the current implementation applymap calls `func` twice on the\n    first column/row to decide whether it can take a fast or slow\n    code path. This can lead to unexpected behavior if `func` has\n    side-effects, as they will take effect twice for the first\n    column/row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n    >>> df\n           0      1\n    0  1.000  2.120\n    1  3.356  4.567\n\n    >>> df.applymap(lambda x: len(str(x)))\n       0  1\n    0  3  4\n    1  5  5\n\n    Note that a vectorized version of `func` often exists, which will\n    be much faster. You could square each number elementwise.\n\n    >>> df.applymap(lambda x: x**2)\n               0          1\n    0   1.000000   4.494400\n    1  11.262736  20.857489\n\n    But it's better to avoid applymap in that case.\n\n    >>> df ** 2\n               0          1\n    0   1.000000   4.494400\n    1  11.262736  20.857489\n    \"\"\"\n\n    # if we have a dtype == 'M8[ns]', provide boxed values\n    def infer(x):\n        if x.empty:\n            return lib.map_infer(x, func)\n        return lib.map_infer(x.astype(object).values, func)\n\n    return self.apply(infer)",
                "def append(self, other, ignore_index=False, verify_integrity=False, sort=False):\n    \"\"\"\n    Append rows of `other` to the end of caller, returning a new object.\n\n    Columns in `other` that are not in the caller are added as new columns.\n\n    Parameters\n    ----------\n    other : DataFrame or Series/dict-like object, or list of these\n        The data to append.\n    ignore_index : bool, default False\n        If True, do not use the index labels.\n    verify_integrity : bool, default False\n        If True, raise ValueError on creating index with duplicates.\n    sort : bool, default False\n        Sort columns if the columns of `self` and `other` are not aligned.\n\n        .. versionadded:: 0.23.0\n        .. versionchanged:: 1.0.0\n\n            Changed to not sort by default.\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    concat : General function to concatenate DataFrame or Series objects.\n\n    Notes\n    -----\n    If a list of dict/series is passed and the keys are all contained in\n    the DataFrame's index, the order of the columns in the resulting\n    DataFrame will be unchanged.\n\n    Iteratively appending rows to a DataFrame can be more computationally\n    intensive than a single concatenate. A better solution is to append\n    those rows to a list and then concatenate the list with the original\n    DataFrame all at once.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n    >>> df\n       A  B\n    0  1  2\n    1  3  4\n    >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n    >>> df.append(df2)\n       A  B\n    0  1  2\n    1  3  4\n    0  5  6\n    1  7  8\n\n    With `ignore_index` set to True:\n\n    >>> df.append(df2, ignore_index=True)\n       A  B\n    0  1  2\n    1  3  4\n    2  5  6\n    3  7  8\n\n    The following, while not recommended methods for generating DataFrames,\n    show two ways to generate a DataFrame from multiple data sources.\n\n    Less efficient:\n\n    >>> df = pd.DataFrame(columns=['A'])\n    >>> for i in range(5):\n    ...     df = df.append({'A': i}, ignore_index=True)\n    >>> df\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n\n    More efficient:\n\n    >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n    ...           ignore_index=True)\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n    \"\"\"\n    if isinstance(other, (Series, dict)):\n        if isinstance(other, dict):\n            other = Series(other)\n        if other.name is None and not ignore_index:\n            raise TypeError(\n                \"Can only append a Series if ignore_index=True\"\n                \" or if the Series has a name\"\n            )\n\n        if other.name is None:\n            index = None\n        else:\n            # other must have the same index name as self, otherwise\n            # index name will be reset\n            index = Index([other.name], name=self.index.name)\n\n        idx_diff = other.index.difference(self.columns)\n        try:\n            combined_columns = self.columns.append(idx_diff)\n        except TypeError:\n            combined_columns = self.columns.astype(object).append(idx_diff)\n        other = other.reindex(combined_columns, copy=False)\n        other = DataFrame(\n            other.values.reshape((1, len(other))),\n            index=index,\n            columns=combined_columns,\n        )\n        other = other._convert(datetime=True, timedelta=True)\n        if not self.columns.equals(combined_columns):\n            self = self.reindex(columns=combined_columns)\n    elif isinstance(other, list):\n        if not other:\n            pass\n        elif not isinstance(other[0], DataFrame):\n            other = DataFrame(other)\n            if (self.columns.get_indexer(other.columns) >= 0).all():\n                other = other.reindex(columns=self.columns)\n\n    from pandas.core.reshape.concat import concat\n\n    if isinstance(other, (list, tuple)):\n        to_concat = [self] + other\n    else:\n        to_concat = [self, other]\n    return concat(\n        to_concat,\n        ignore_index=ignore_index,\n        verify_integrity=verify_integrity,\n        sort=sort,\n    )",
                "def join(self, other, on=None, how=\"left\", lsuffix=\"\", rsuffix=\"\", sort=False):\n    \"\"\"\n    Join columns of another DataFrame.\n\n    Join columns with `other` DataFrame either on index or on a key\n    column. Efficiently join multiple DataFrame objects by index at once by\n    passing a list.\n\n    Parameters\n    ----------\n    other : DataFrame, Series, or list of DataFrame\n        Index should be similar to one of the columns in this one. If a\n        Series is passed, its name attribute must be set, and that will be\n        used as the column name in the resulting joined DataFrame.\n    on : str, list of str, or array-like, optional\n        Column or index level name(s) in the caller to join on the index\n        in `other`, otherwise joins index-on-index. If multiple\n        values given, the `other` DataFrame must have a MultiIndex. Can\n        pass an array as the join key if it is not already contained in\n        the calling DataFrame. Like an Excel VLOOKUP operation.\n    how : {'left', 'right', 'outer', 'inner'}, default 'left'\n        How to handle the operation of the two objects.\n\n        * left: use calling frame's index (or column if on is specified)\n        * right: use `other`'s index.\n        * outer: form union of calling frame's index (or column if on is\n          specified) with `other`'s index, and sort it.\n          lexicographically.\n        * inner: form intersection of calling frame's index (or column if\n          on is specified) with `other`'s index, preserving the order\n          of the calling's one.\n    lsuffix : str, default ''\n        Suffix to use from left frame's overlapping columns.\n    rsuffix : str, default ''\n        Suffix to use from right frame's overlapping columns.\n    sort : bool, default False\n        Order result DataFrame lexicographically by the join key. If False,\n        the order of the join key depends on the join type (how keyword).\n\n    Returns\n    -------\n    DataFrame\n        A dataframe containing columns from both the caller and `other`.\n\n    See Also\n    --------\n    DataFrame.merge : For column(s)-on-columns(s) operations.\n\n    Notes\n    -----\n    Parameters `on`, `lsuffix`, and `rsuffix` are not supported when\n    passing a list of `DataFrame` objects.\n\n    Support for specifying index levels as the `on` parameter was added\n    in version 0.23.0.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n    ...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n    >>> df\n      key   A\n    0  K0  A0\n    1  K1  A1\n    2  K2  A2\n    3  K3  A3\n    4  K4  A4\n    5  K5  A5\n\n    >>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n    ...                       'B': ['B0', 'B1', 'B2']})\n\n    >>> other\n      key   B\n    0  K0  B0\n    1  K1  B1\n    2  K2  B2\n\n    Join DataFrames using their indexes.\n\n    >>> df.join(other, lsuffix='_caller', rsuffix='_other')\n      key_caller   A key_other    B\n    0         K0  A0        K0   B0\n    1         K1  A1        K1   B1\n    2         K2  A2        K2   B2\n    3         K3  A3       NaN  NaN\n    4         K4  A4       NaN  NaN\n    5         K5  A5       NaN  NaN\n\n    If we want to join using the key columns, we need to set key to be\n    the index in both `df` and `other`. The joined DataFrame will have\n    key as its index.\n\n    >>> df.set_index('key').join(other.set_index('key'))\n          A    B\n    key\n    K0   A0   B0\n    K1   A1   B1\n    K2   A2   B2\n    K3   A3  NaN\n    K4   A4  NaN\n    K5   A5  NaN\n\n    Another option to join using the key columns is to use the `on`\n    parameter. DataFrame.join always uses `other`'s index but we can use\n    any column in `df`. This method preserves the original DataFrame's\n    index in the result.\n\n    >>> df.join(other.set_index('key'), on='key')\n      key   A    B\n    0  K0  A0   B0\n    1  K1  A1   B1\n    2  K2  A2   B2\n    3  K3  A3  NaN\n    4  K4  A4  NaN\n    5  K5  A5  NaN\n    \"\"\"\n    return self._join_compat(\n        other, on=on, how=how, lsuffix=lsuffix, rsuffix=rsuffix, sort=sort\n    )",
                "def _join_compat(\n    self, other, on=None, how=\"left\", lsuffix=\"\", rsuffix=\"\", sort=False\n):\n    from pandas.core.reshape.merge import merge\n    from pandas.core.reshape.concat import concat\n\n    if isinstance(other, Series):\n        if other.name is None:\n            raise ValueError(\"Other Series must have a name\")\n        other = DataFrame({other.name: other})\n\n    if isinstance(other, DataFrame):\n        return merge(\n            self,\n            other,\n            left_on=on,\n            how=how,\n            left_index=on is None,\n            right_index=True,\n            suffixes=(lsuffix, rsuffix),\n            sort=sort,\n        )\n    else:\n        if on is not None:\n            raise ValueError(\n                \"Joining multiple DataFrames only supported for joining on index\"\n            )\n\n        frames = [self] + list(other)\n\n        can_concat = all(df.index.is_unique for df in frames)\n\n        # join indexes only using concat\n        if can_concat:\n            if how == \"left\":\n                res = concat(\n                    frames, axis=1, join=\"outer\", verify_integrity=True, sort=sort\n                )\n                return res.reindex(self.index, copy=False)\n            else:\n                return concat(\n                    frames, axis=1, join=how, verify_integrity=True, sort=sort\n                )\n\n        joined = frames[0]\n\n        for frame in frames[1:]:\n            joined = merge(\n                joined, frame, how=how, left_index=True, right_index=True\n            )\n\n        return joined",
                "@Substitution(\"\")\n@Appender(_merge_doc, indents=2)\ndef merge(\n    self,\n    right,\n    how=\"inner\",\n    on=None,\n    left_on=None,\n    right_on=None,\n    left_index=False,\n    right_index=False,\n    sort=False,\n    suffixes=(\"_x\", \"_y\"),\n    copy=True,\n    indicator=False,\n    validate=None,\n):\n    from pandas.core.reshape.merge import merge\n\n    return merge(\n        self,\n        right,\n        how=how,\n        on=on,\n        left_on=left_on,\n        right_on=right_on,\n        left_index=left_index,\n        right_index=right_index,\n        sort=sort,\n        suffixes=suffixes,\n        copy=copy,\n        indicator=indicator,\n        validate=validate,\n    )",
                "def round(self, decimals=0, *args, **kwargs):\n    \"\"\"\n    Round a DataFrame to a variable number of decimal places.\n\n    Parameters\n    ----------\n    decimals : int, dict, Series\n        Number of decimal places to round each column to. If an int is\n        given, round each column to the same number of places.\n        Otherwise dict and Series round to variable numbers of places.\n        Column names should be in the keys if `decimals` is a\n        dict-like, or in the index if `decimals` is a Series. Any\n        columns not included in `decimals` will be left as is. Elements\n        of `decimals` which are not columns of the input will be\n        ignored.\n    *args\n        Additional keywords have no effect but might be accepted for\n        compatibility with numpy.\n    **kwargs\n        Additional keywords have no effect but might be accepted for\n        compatibility with numpy.\n\n    Returns\n    -------\n    DataFrame\n        A DataFrame with the affected columns rounded to the specified\n        number of decimal places.\n\n    See Also\n    --------\n    numpy.around : Round a numpy array to the given number of decimals.\n    Series.round : Round a Series to the given number of decimals.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df\n        dogs  cats\n    0  0.21  0.32\n    1  0.01  0.67\n    2  0.66  0.03\n    3  0.21  0.18\n\n    By providing an integer each column is rounded to the same number\n    of decimal places\n\n    >>> df.round(1)\n        dogs  cats\n    0   0.2   0.3\n    1   0.0   0.7\n    2   0.7   0.0\n    3   0.2   0.2\n\n    With a dict, the number of places for specific columns can be\n    specified with the column names as key and the number of decimal\n    places as value\n\n    >>> df.round({'dogs': 1, 'cats': 0})\n        dogs  cats\n    0   0.2   0.0\n    1   0.0   1.0\n    2   0.7   0.0\n    3   0.2   0.0\n\n    Using a Series, the number of places for specific columns can be\n    specified with the column names as index and the number of\n    decimal places as value\n\n    >>> decimals = pd.Series([0, 1], index=['cats', 'dogs'])\n    >>> df.round(decimals)\n        dogs  cats\n    0   0.2   0.0\n    1   0.0   1.0\n    2   0.7   0.0\n    3   0.2   0.0\n    \"\"\"\n    from pandas.core.reshape.concat import concat\n\n    def _dict_round(df, decimals):\n        for col, vals in df.items():\n            try:\n                yield _series_round(vals, decimals[col])\n            except KeyError:\n                yield vals\n\n    def _series_round(s, decimals):\n        if is_integer_dtype(s) or is_float_dtype(s):\n            return s.round(decimals)\n        return s\n\n    nv.validate_round(args, kwargs)\n\n    if isinstance(decimals, (dict, Series)):\n        if isinstance(decimals, Series):\n            if not decimals.index.is_unique:\n                raise ValueError(\"Index of decimals must be unique\")\n        new_cols = list(_dict_round(self, decimals))\n    elif is_integer(decimals):\n        # Dispatch to Series.round\n        new_cols = [_series_round(v, decimals) for _, v in self.items()]\n    else:\n        raise TypeError(\"decimals must be an integer, a dict-like or a Series\")\n\n    if len(new_cols) > 0:\n        return self._constructor(\n            concat(new_cols, axis=1), index=self.index, columns=self.columns\n        )\n    else:\n        return self",
                "def corr(self, method=\"pearson\", min_periods=1):\n    \"\"\"\n    Compute pairwise correlation of columns, excluding NA/null values.\n\n    Parameters\n    ----------\n    method : {'pearson', 'kendall', 'spearman'} or callable\n        Method of correlation:\n\n        * pearson : standard correlation coefficient\n        * kendall : Kendall Tau correlation coefficient\n        * spearman : Spearman rank correlation\n        * callable: callable with input two 1d ndarrays\n            and returning a float. Note that the returned matrix from corr\n            will have 1 along the diagonals and will be symmetric\n            regardless of the callable's behavior.\n\n            .. versionadded:: 0.24.0\n\n    min_periods : int, optional\n        Minimum number of observations required per pair of columns\n        to have a valid result. Currently only available for Pearson\n        and Spearman correlation.\n\n    Returns\n    -------\n    DataFrame\n        Correlation matrix.\n\n    See Also\n    --------\n    DataFrame.corrwith\n    Series.corr\n\n    Examples\n    --------\n    >>> def histogram_intersection(a, b):\n    ...     v = np.minimum(a, b).sum().round(decimals=1)\n    ...     return v\n    >>> df = pd.DataFrame([(.2, .3), (.0, .6), (.6, .0), (.2, .1)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df.corr(method=histogram_intersection)\n          dogs  cats\n    dogs   1.0   0.3\n    cats   0.3   1.0\n    \"\"\"\n    numeric_df = self._get_numeric_data()\n    cols = numeric_df.columns\n    idx = cols.copy()\n    mat = numeric_df.values\n\n    if method == \"pearson\":\n        correl = libalgos.nancorr(ensure_float64(mat), minp=min_periods)\n    elif method == \"spearman\":\n        correl = libalgos.nancorr_spearman(ensure_float64(mat), minp=min_periods)\n    elif method == \"kendall\" or callable(method):\n        if min_periods is None:\n            min_periods = 1\n        mat = ensure_float64(mat).T\n        corrf = nanops.get_corr_func(method)\n        K = len(cols)\n        correl = np.empty((K, K), dtype=float)\n        mask = np.isfinite(mat)\n        for i, ac in enumerate(mat):\n            for j, bc in enumerate(mat):\n                if i > j:\n                    continue\n\n                valid = mask[i] & mask[j]\n                if valid.sum() < min_periods:\n                    c = np.nan\n                elif i == j:\n                    c = 1.0\n                elif not valid.all():\n                    c = corrf(ac[valid], bc[valid])\n                else:\n                    c = corrf(ac, bc)\n                correl[i, j] = c\n                correl[j, i] = c\n    else:\n        raise ValueError(\n            \"method must be either 'pearson', \"\n            \"'spearman', 'kendall', or a callable, \"\n            f\"'{method}' was supplied\"\n        )\n\n    return self._constructor(correl, index=idx, columns=cols)",
                "def cov(self, min_periods=None):\n    \"\"\"\n    Compute pairwise covariance of columns, excluding NA/null values.\n\n    Compute the pairwise covariance among the series of a DataFrame.\n    The returned data frame is the `covariance matrix\n    <https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns\n    of the DataFrame.\n\n    Both NA and null values are automatically excluded from the\n    calculation. (See the note below about bias from missing values.)\n    A threshold can be set for the minimum number of\n    observations for each value created. Comparisons with observations\n    below this threshold will be returned as ``NaN``.\n\n    This method is generally used for the analysis of time series data to\n    understand the relationship between different measures\n    across time.\n\n    Parameters\n    ----------\n    min_periods : int, optional\n        Minimum number of observations required per pair of columns\n        to have a valid result.\n\n    Returns\n    -------\n    DataFrame\n        The covariance matrix of the series of the DataFrame.\n\n    See Also\n    --------\n    Series.cov : Compute covariance with another Series.\n    core.window.EWM.cov: Exponential weighted sample covariance.\n    core.window.Expanding.cov : Expanding sample covariance.\n    core.window.Rolling.cov : Rolling sample covariance.\n\n    Notes\n    -----\n    Returns the covariance matrix of the DataFrame's time series.\n    The covariance is normalized by N-1.\n\n    For DataFrames that have Series that are missing data (assuming that\n    data is `missing at random\n    <https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)\n    the returned covariance matrix will be an unbiased estimate\n    of the variance and covariance between the member Series.\n\n    However, for many applications this estimate may not be acceptable\n    because the estimate covariance matrix is not guaranteed to be positive\n    semi-definite. This could lead to estimate correlations having\n    absolute values which are greater than one, and/or a non-invertible\n    covariance matrix. See `Estimation of covariance matrices\n    <http://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\n    matrices>`__ for more details.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df.cov()\n              dogs      cats\n    dogs  0.666667 -1.000000\n    cats -1.000000  1.666667\n\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame(np.random.randn(1000, 5),\n    ...                   columns=['a', 'b', 'c', 'd', 'e'])\n    >>> df.cov()\n              a         b         c         d         e\n    a  0.998438 -0.020161  0.059277 -0.008943  0.014144\n    b -0.020161  1.059352 -0.008543 -0.024738  0.009826\n    c  0.059277 -0.008543  1.010670 -0.001486 -0.000271\n    d -0.008943 -0.024738 -0.001486  0.921297 -0.013692\n    e  0.014144  0.009826 -0.000271 -0.013692  0.977795\n\n    **Minimum number of periods**\n\n    This method also supports an optional ``min_periods`` keyword\n    that specifies the required minimum number of non-NA observations for\n    each column pair in order to have a valid result:\n\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame(np.random.randn(20, 3),\n    ...                   columns=['a', 'b', 'c'])\n    >>> df.loc[df.index[:5], 'a'] = np.nan\n    >>> df.loc[df.index[5:10], 'b'] = np.nan\n    >>> df.cov(min_periods=12)\n              a         b         c\n    a  0.316741       NaN -0.150812\n    b       NaN  1.248003  0.191417\n    c -0.150812  0.191417  0.895202\n    \"\"\"\n    numeric_df = self._get_numeric_data()\n    cols = numeric_df.columns\n    idx = cols.copy()\n    mat = numeric_df.values\n\n    if notna(mat).all():\n        if min_periods is not None and min_periods > len(mat):\n            baseCov = np.empty((mat.shape[1], mat.shape[1]))\n            baseCov.fill(np.nan)\n        else:\n            baseCov = np.cov(mat.T)\n        baseCov = baseCov.reshape((len(cols), len(cols)))\n    else:\n        baseCov = libalgos.nancorr(ensure_float64(mat), cov=True, minp=min_periods)\n\n    return self._constructor(baseCov, index=idx, columns=cols)",
                "def corrwith(self, other, axis=0, drop=False, method=\"pearson\"):\n    \"\"\"\n    Compute pairwise correlation.\n\n    Pairwise correlation is computed between rows or columns of\n    DataFrame with rows or columns of Series or DataFrame. DataFrames\n    are first aligned along both axes before computing the\n    correlations.\n\n    Parameters\n    ----------\n    other : DataFrame, Series\n        Object with which to compute correlations.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' to compute column-wise, 1 or 'columns' for\n        row-wise.\n    drop : bool, default False\n        Drop missing indices from result.\n    method : {'pearson', 'kendall', 'spearman'} or callable\n        Method of correlation:\n\n        * pearson : standard correlation coefficient\n        * kendall : Kendall Tau correlation coefficient\n        * spearman : Spearman rank correlation\n        * callable: callable with input two 1d ndarrays\n            and returning a float.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series\n        Pairwise correlations.\n\n    See Also\n    --------\n    DataFrame.corr\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    this = self._get_numeric_data()\n\n    if isinstance(other, Series):\n        return this.apply(lambda x: other.corr(x, method=method), axis=axis)\n\n    other = other._get_numeric_data()\n    left, right = this.align(other, join=\"inner\", copy=False)\n\n    if axis == 1:\n        left = left.T\n        right = right.T\n\n    if method == \"pearson\":\n        # mask missing values\n        left = left + right * 0\n        right = right + left * 0\n\n        # demeaned data\n        ldem = left - left.mean()\n        rdem = right - right.mean()\n\n        num = (ldem * rdem).sum()\n        dom = (left.count() - 1) * left.std() * right.std()\n\n        correl = num / dom\n\n    elif method in [\"kendall\", \"spearman\"] or callable(method):\n\n        def c(x):\n            return nanops.nancorr(x[0], x[1], method=method)\n\n        correl = Series(\n            map(c, zip(left.values.T, right.values.T)), index=left.columns\n        )\n\n    else:\n        raise ValueError(\n            f\"Invalid method {method} was passed, \"\n            \"valid methods are: 'pearson', 'kendall', \"\n            \"'spearman', or callable\"\n        )\n\n    if not drop:\n        # Find non-matching labels along the given axis\n        # and append missing correlations (GH 22375)\n        raxis = 1 if axis == 0 else 0\n        result_index = this._get_axis(raxis).union(other._get_axis(raxis))\n        idx_diff = result_index.difference(correl.index)\n\n        if len(idx_diff) > 0:\n            correl = correl.append(Series([np.nan] * len(idx_diff), index=idx_diff))\n\n    return correl",
                "def count(self, axis=0, level=None, numeric_only=False):\n    \"\"\"\n    Count non-NA cells for each column or row.\n\n    The values `None`, `NaN`, `NaT`, and optionally `numpy.inf` (depending\n    on `pandas.options.mode.use_inf_as_na`) are considered NA.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        If 0 or 'index' counts are generated for each column.\n        If 1 or 'columns' counts are generated for each **row**.\n    level : int or str, optional\n        If the axis is a `MultiIndex` (hierarchical), count along a\n        particular `level`, collapsing into a `DataFrame`.\n        A `str` specifies the level name.\n    numeric_only : bool, default False\n        Include only `float`, `int` or `boolean` data.\n\n    Returns\n    -------\n    Series or DataFrame\n        For each column/row the number of non-NA/null entries.\n        If `level` is specified returns a `DataFrame`.\n\n    See Also\n    --------\n    Series.count: Number of non-NA elements in a Series.\n    DataFrame.shape: Number of DataFrame rows and columns (including NA\n        elements).\n    DataFrame.isna: Boolean same-sized DataFrame showing places of NA\n        elements.\n\n    Examples\n    --------\n    Constructing DataFrame from a dictionary:\n\n    >>> df = pd.DataFrame({\"Person\":\n    ...                    [\"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\"],\n    ...                    \"Age\": [24., np.nan, 21., 33, 26],\n    ...                    \"Single\": [False, True, True, True, False]})\n    >>> df\n       Person   Age  Single\n    0    John  24.0   False\n    1    Myla   NaN    True\n    2   Lewis  21.0    True\n    3    John  33.0    True\n    4    Myla  26.0   False\n\n    Notice the uncounted NA values:\n\n    >>> df.count()\n    Person    5\n    Age       4\n    Single    5\n    dtype: int64\n\n    Counts for each **row**:\n\n    >>> df.count(axis='columns')\n    0    3\n    1    2\n    2    3\n    3    3\n    4    3\n    dtype: int64\n\n    Counts for one level of a `MultiIndex`:\n\n    >>> df.set_index([\"Person\", \"Single\"]).count(level=\"Person\")\n            Age\n    Person\n    John      2\n    Lewis     1\n    Myla      1\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    if level is not None:\n        return self._count_level(level, axis=axis, numeric_only=numeric_only)\n\n    if numeric_only:\n        frame = self._get_numeric_data()\n    else:\n        frame = self\n\n    # GH #423\n    if len(frame._get_axis(axis)) == 0:\n        result = Series(0, index=frame._get_agg_axis(axis))\n    else:\n        if frame._is_mixed_type or frame._data.any_extension_types:\n            # the or any_extension_types is really only hit for single-\n            # column frames with an extension array\n            result = notna(frame).sum(axis=axis)\n        else:\n            # GH13407\n            series_counts = notna(frame).sum(axis=axis)\n            counts = series_counts.values\n            result = Series(counts, index=frame._get_agg_axis(axis))\n\n    return result.astype(\"int64\")",
                "def _count_level(self, level, axis=0, numeric_only=False):\n    if numeric_only:\n        frame = self._get_numeric_data()\n    else:\n        frame = self\n\n    count_axis = frame._get_axis(axis)\n    agg_axis = frame._get_agg_axis(axis)\n\n    if not isinstance(count_axis, ABCMultiIndex):\n        raise TypeError(\n            f\"Can only count levels on hierarchical {self._get_axis_name(axis)}.\"\n        )\n\n    if frame._is_mixed_type:\n        # Since we have mixed types, calling notna(frame.values) might\n        # upcast everything to object\n        mask = notna(frame).values\n    else:\n        # But use the speedup when we have homogeneous dtypes\n        mask = notna(frame.values)\n\n    if axis == 1:\n        # We're transposing the mask rather than frame to avoid potential\n        # upcasts to object, which induces a ~20x slowdown\n        mask = mask.T\n\n    if isinstance(level, str):\n        level = count_axis._get_level_number(level)\n\n    level_name = count_axis._names[level]\n    level_index = count_axis.levels[level]._shallow_copy(name=level_name)\n    level_codes = ensure_int64(count_axis.codes[level])\n    counts = lib.count_level_2d(mask, level_codes, len(level_index), axis=0)\n\n    result = DataFrame(counts, index=level_index, columns=agg_axis)\n\n    if axis == 1:\n        # Undo our earlier transpose\n        return result.T\n    else:\n        return result",
                "def _reduce(\n    self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n):\n    if axis is None and filter_type == \"bool\":\n        labels = None\n        constructor = None\n    else:\n        # TODO: Make other agg func handle axis=None properly\n        axis = self._get_axis_number(axis)\n        labels = self._get_agg_axis(axis)\n        constructor = self._constructor\n\n    def f(x):\n        return op(x, axis=axis, skipna=skipna, **kwds)\n\n    def _get_data(axis_matters):\n        if filter_type is None or filter_type == \"numeric\":\n            data = self._get_numeric_data()\n        elif filter_type == \"bool\":\n            if axis_matters:\n                # GH#25101, GH#24434\n                data = self._get_bool_data() if axis == 0 else self\n            else:\n                data = self._get_bool_data()\n        else:  # pragma: no cover\n            msg = (\n                f\"Generating numeric_only data with filter_type {filter_type} \"\n                \"not supported.\"\n            )\n            raise NotImplementedError(msg)\n        return data\n\n    if numeric_only is None:\n        values = self.values\n        try:\n            result = f(values)\n\n            if filter_type == \"bool\" and is_object_dtype(values) and axis is None:\n                # work around https://github.com/numpy/numpy/issues/10489\n                # TODO: combine with hasattr(result, 'dtype') further down\n                # hard since we don't have `values` down there.\n                result = np.bool_(result)\n        except TypeError:\n            # e.g. in nanops trying to convert strs to float\n\n            # try by-column first\n            if filter_type is None and axis == 0:\n                # this can end up with a non-reduction\n                # but not always. if the types are mixed\n                # with datelike then need to make sure a series\n\n                # we only end up here if we have not specified\n                # numeric_only and yet we have tried a\n                # column-by-column reduction, where we have mixed type.\n                # So let's just do what we can\n                from pandas.core.apply import frame_apply\n\n                opa = frame_apply(\n                    self, func=f, result_type=\"expand\", ignore_failures=True\n                )\n                result = opa.get_result()\n                if result.ndim == self.ndim:\n                    result = result.iloc[0]\n                return result\n\n            # TODO: why doesnt axis matter here?\n            data = _get_data(axis_matters=False)\n            with np.errstate(all=\"ignore\"):\n                result = f(data.values)\n            labels = data._get_agg_axis(axis)\n    else:\n        if numeric_only:\n            data = _get_data(axis_matters=True)\n\n            values = data.values\n            labels = data._get_agg_axis(axis)\n        else:\n            values = self.values\n        result = f(values)\n\n    if hasattr(result, \"dtype\") and is_object_dtype(result.dtype):\n        try:\n            if filter_type is None or filter_type == \"numeric\":\n                result = result.astype(np.float64)\n            elif filter_type == \"bool\" and notna(result).all():\n                result = result.astype(np.bool_)\n        except (ValueError, TypeError):\n\n            # try to coerce to the original dtypes item by item if we can\n            if axis == 0:\n                result = coerce_to_dtypes(result, self.dtypes)\n\n    if constructor is not None:\n        result = Series(result, index=labels)\n    return result",
                "def nunique(self, axis=0, dropna=True):\n    \"\"\"\n    Count distinct observations over requested axis.\n\n    Return Series with number of distinct observations. Can ignore NaN\n    values.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for\n        column-wise.\n    dropna : bool, default True\n        Don't include NaN in the counts.\n\n    Returns\n    -------\n    Series\n\n    See Also\n    --------\n    Series.nunique: Method nunique for Series.\n    DataFrame.count: Count non-NA cells for each column or row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 1, 1]})\n    >>> df.nunique()\n    A    3\n    B    1\n    dtype: int64\n\n    >>> df.nunique(axis=1)\n    0    1\n    1    2\n    2    2\n    dtype: int64\n    \"\"\"\n    return self.apply(Series.nunique, axis=axis, dropna=dropna)",
                "def idxmin(self, axis=0, skipna=True):\n    \"\"\"\n    Return index of first occurrence of minimum over requested axis.\n\n    NA/null values are excluded.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise\n    skipna : bool, default True\n        Exclude NA/null values. If an entire row/column is NA, the result\n        will be NA.\n\n    Returns\n    -------\n    Series\n        Indexes of minima along the specified axis.\n\n    Raises\n    ------\n    ValueError\n        * If the row/column is empty\n\n    See Also\n    --------\n    Series.idxmin\n\n    Notes\n    -----\n    This method is the DataFrame version of ``ndarray.argmin``.\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    indices = nanops.nanargmin(self.values, axis=axis, skipna=skipna)\n    index = self._get_axis(axis)\n    result = [index[i] if i >= 0 else np.nan for i in indices]\n    return Series(result, index=self._get_agg_axis(axis))",
                "def idxmax(self, axis=0, skipna=True):\n    \"\"\"\n    Return index of first occurrence of maximum over requested axis.\n\n    NA/null values are excluded.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise\n    skipna : bool, default True\n        Exclude NA/null values. If an entire row/column is NA, the result\n        will be NA.\n\n    Returns\n    -------\n    Series\n        Indexes of maxima along the specified axis.\n\n    Raises\n    ------\n    ValueError\n        * If the row/column is empty\n\n    See Also\n    --------\n    Series.idxmax\n\n    Notes\n    -----\n    This method is the DataFrame version of ``ndarray.argmax``.\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    indices = nanops.nanargmax(self.values, axis=axis, skipna=skipna)\n    index = self._get_axis(axis)\n    result = [index[i] if i >= 0 else np.nan for i in indices]\n    return Series(result, index=self._get_agg_axis(axis))",
                "def _get_agg_axis(self, axis_num):\n    \"\"\"\n    Let's be explicit about this.\n    \"\"\"\n    if axis_num == 0:\n        return self.columns\n    elif axis_num == 1:\n        return self.index\n    else:\n        raise ValueError(f\"Axis must be 0 or 1 (got {repr(axis_num)})\")",
                "def mode(self, axis=0, numeric_only=False, dropna=True):\n    \"\"\"\n    Get the mode(s) of each element along the selected axis.\n\n    The mode of a set of values is the value that appears most often.\n    It can be multiple values.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to iterate over while searching for the mode:\n\n        * 0 or 'index' : get mode of each column\n        * 1 or 'columns' : get mode of each row.\n\n    numeric_only : bool, default False\n        If True, only apply to numeric columns.\n    dropna : bool, default True\n        Don't consider counts of NaN/NaT.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n        The modes of each column or row.\n\n    See Also\n    --------\n    Series.mode : Return the highest frequency value in a Series.\n    Series.value_counts : Return the counts of values in a Series.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('bird', 2, 2),\n    ...                    ('mammal', 4, np.nan),\n    ...                    ('arthropod', 8, 0),\n    ...                    ('bird', 2, np.nan)],\n    ...                   index=('falcon', 'horse', 'spider', 'ostrich'),\n    ...                   columns=('species', 'legs', 'wings'))\n    >>> df\n               species  legs  wings\n    falcon        bird     2    2.0\n    horse       mammal     4    NaN\n    spider   arthropod     8    0.0\n    ostrich       bird     2    NaN\n\n    By default, missing values are not considered, and the mode of wings\n    are both 0 and 2. The second row of species and legs contains ``NaN``,\n    because they have only one mode, but the DataFrame has two rows.\n\n    >>> df.mode()\n      species  legs  wings\n    0    bird   2.0    0.0\n    1     NaN   NaN    2.0\n\n    Setting ``dropna=False`` ``NaN`` values are considered and they can be\n    the mode (like for wings).\n\n    >>> df.mode(dropna=False)\n      species  legs  wings\n    0    bird     2    NaN\n\n    Setting ``numeric_only=True``, only the mode of numeric columns is\n    computed, and columns of other types are ignored.\n\n    >>> df.mode(numeric_only=True)\n       legs  wings\n    0   2.0    0.0\n    1   NaN    2.0\n\n    To compute the mode over columns and not rows, use the axis parameter:\n\n    >>> df.mode(axis='columns', numeric_only=True)\n               0    1\n    falcon   2.0  NaN\n    horse    4.0  NaN\n    spider   0.0  8.0\n    ostrich  2.0  NaN\n    \"\"\"\n    data = self if not numeric_only else self._get_numeric_data()\n\n    def f(s):\n        return s.mode(dropna=dropna)\n\n    return data.apply(f, axis=axis)",
                "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n    \"\"\"\n    Return values at the given quantile over requested axis.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value between 0 <= q <= 1, the quantile(s) to compute.\n    axis : {0, 1, 'index', 'columns'} (default 0)\n        Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n    numeric_only : bool, default True\n        If False, the quantile of datetime and timedelta data will be\n        computed as well.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        This optional parameter specifies the interpolation method to use,\n        when the desired quantile lies between two data points `i` and `j`:\n\n        * linear: `i + (j - i) * fraction`, where `fraction` is the\n          fractional part of the index surrounded by `i` and `j`.\n        * lower: `i`.\n        * higher: `j`.\n        * nearest: `i` or `j` whichever is nearest.\n        * midpoint: (`i` + `j`) / 2.\n\n    Returns\n    -------\n    Series or DataFrame\n\n        If ``q`` is an array, a DataFrame will be returned where the\n          index is ``q``, the columns are the columns of self, and the\n          values are the quantiles.\n        If ``q`` is a float, a Series will be returned where the\n          index is the columns of self and the values are the quantiles.\n\n    See Also\n    --------\n    core.window.Rolling.quantile: Rolling quantile.\n    numpy.percentile: Numpy function to compute the percentile.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n    ...                   columns=['a', 'b'])\n    >>> df.quantile(.1)\n    a    1.3\n    b    3.7\n    Name: 0.1, dtype: float64\n    >>> df.quantile([.1, .5])\n           a     b\n    0.1  1.3   3.7\n    0.5  2.5  55.0\n\n    Specifying `numeric_only=False` will also compute the quantile of\n    datetime and timedelta data.\n\n    >>> df = pd.DataFrame({'A': [1, 2],\n    ...                    'B': [pd.Timestamp('2010'),\n    ...                          pd.Timestamp('2011')],\n    ...                    'C': [pd.Timedelta('1 days'),\n    ...                          pd.Timedelta('2 days')]})\n    >>> df.quantile(0.5, numeric_only=False)\n    A                    1.5\n    B    2010-07-02 12:00:00\n    C        1 days 12:00:00\n    Name: 0.5, dtype: object\n    \"\"\"\n    validate_percentile(q)\n\n    data = self._get_numeric_data() if numeric_only else self\n    axis = self._get_axis_number(axis)\n    is_transposed = axis == 1\n\n    if is_transposed:\n        data = data.T\n\n    if len(data.columns) == 0:\n        # GH#23925 _get_numeric_data may have dropped all columns\n        cols = Index([], name=self.columns.name)\n        if is_list_like(q):\n            return self._constructor([], index=q, columns=cols)\n        return self._constructor_sliced([], index=cols, name=q, dtype=np.float64)\n\n    result = data._data.quantile(\n        qs=q, axis=1, interpolation=interpolation, transposed=is_transposed\n    )\n\n    if result.ndim == 2:\n        result = self._constructor(result)\n    else:\n        result = self._constructor_sliced(result, name=q)\n\n    if is_transposed:\n        result = result.T\n\n    return result",
                "def to_timestamp(self, freq=None, how=\"start\", axis=0, copy=True):\n    \"\"\"\n    Cast to DatetimeIndex of timestamps, at *beginning* of period.\n\n    Parameters\n    ----------\n    freq : str, default frequency of PeriodIndex\n        Desired frequency.\n    how : {'s', 'e', 'start', 'end'}\n        Convention for converting period to timestamp; start of period\n        vs. end.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to convert (the index by default).\n    copy : bool, default True\n        If False then underlying input data is not copied.\n\n    Returns\n    -------\n    DataFrame with DatetimeIndex\n    \"\"\"\n    new_data = self._data\n    if copy:\n        new_data = new_data.copy()\n\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        new_data.set_axis(1, self.index.to_timestamp(freq=freq, how=how))\n    elif axis == 1:\n        new_data.set_axis(0, self.columns.to_timestamp(freq=freq, how=how))\n    else:  # pragma: no cover\n        raise AssertionError(f\"Axis must be 0 or 1. Got {axis}\")\n\n    return self._constructor(new_data)",
                "def to_period(self, freq=None, axis=0, copy=True):\n    \"\"\"\n    Convert DataFrame from DatetimeIndex to PeriodIndex.\n\n    Convert DataFrame from DatetimeIndex to PeriodIndex with desired\n    frequency (inferred from index if not passed).\n\n    Parameters\n    ----------\n    freq : str, default\n        Frequency of the PeriodIndex.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to convert (the index by default).\n    copy : bool, default True\n        If False then underlying input data is not copied.\n\n    Returns\n    -------\n    TimeSeries with PeriodIndex\n    \"\"\"\n    new_data = self._data\n    if copy:\n        new_data = new_data.copy()\n\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        new_data.set_axis(1, self.index.to_period(freq=freq))\n    elif axis == 1:\n        new_data.set_axis(0, self.columns.to_period(freq=freq))\n    else:  # pragma: no cover\n        raise AssertionError(f\"Axis must be 0 or 1. Got {axis}\")\n\n    return self._constructor(new_data)",
                "def isin(self, values):\n    \"\"\"\n    Whether each element in the DataFrame is contained in values.\n\n    Parameters\n    ----------\n    values : iterable, Series, DataFrame or dict\n        The result will only be true at a location if all the\n        labels match. If `values` is a Series, that's the index. If\n        `values` is a dict, the keys must be the column names,\n        which must match. If `values` is a DataFrame,\n        then both the index and column labels must match.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame of booleans showing whether each element in the DataFrame\n        is contained in values.\n\n    See Also\n    --------\n    DataFrame.eq: Equality test for DataFrame.\n    Series.isin: Equivalent method on Series.\n    Series.str.contains: Test if pattern or regex is contained within a\n        string of a Series or Index.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame({'num_legs': [2, 4], 'num_wings': [2, 0]},\n    ...                   index=['falcon', 'dog'])\n    >>> df\n            num_legs  num_wings\n    falcon         2          2\n    dog            4          0\n\n    When ``values`` is a list check whether every value in the DataFrame\n    is present in the list (which animals have 0 or 2 legs or wings)\n\n    >>> df.isin([0, 2])\n            num_legs  num_wings\n    falcon      True       True\n    dog        False       True\n\n    When ``values`` is a dict, we can pass values to check for each\n    column separately:\n\n    >>> df.isin({'num_wings': [0, 3]})\n            num_legs  num_wings\n    falcon     False      False\n    dog        False       True\n\n    When ``values`` is a Series or DataFrame the index and column must\n    match. Note that 'falcon' does not match based on the number of legs\n    in df2.\n\n    >>> other = pd.DataFrame({'num_legs': [8, 2], 'num_wings': [0, 2]},\n    ...                      index=['spider', 'falcon'])\n    >>> df.isin(other)\n            num_legs  num_wings\n    falcon      True       True\n    dog        False      False\n    \"\"\"\n    if isinstance(values, dict):\n        from pandas.core.reshape.concat import concat\n\n        values = collections.defaultdict(list, values)\n        return concat(\n            (\n                self.iloc[:, [i]].isin(values[col])\n                for i, col in enumerate(self.columns)\n            ),\n            axis=1,\n        )\n    elif isinstance(values, Series):\n        if not values.index.is_unique:\n            raise ValueError(\"cannot compute isin with a duplicate axis.\")\n        return self.eq(values.reindex_like(self), axis=\"index\")\n    elif isinstance(values, DataFrame):\n        if not (values.columns.is_unique and values.index.is_unique):\n            raise ValueError(\"cannot compute isin with a duplicate axis.\")\n        return self.eq(values.reindex_like(self))\n    else:\n        if not is_list_like(values):\n            raise TypeError(\n                \"only list-like or dict-like objects are allowed \"\n                \"to be passed to DataFrame.isin(), \"\n                f\"you passed a {repr(type(values).__name__)}\"\n            )\n        return DataFrame(\n            algorithms.isin(self.values.ravel(), values).reshape(self.shape),\n            self.index,\n            self.columns,\n        )",
                "def _verbose_repr():\n    lines.append(f\"Data columns (total {len(self.columns)} columns):\")\n    space = max(len(pprint_thing(k)) for k in self.columns) + 4\n    counts = None\n\n    tmpl = \"{count}{dtype}\"\n    if show_counts:\n        counts = self.count()\n        if len(cols) != len(counts):  # pragma: no cover\n            raise AssertionError(\n                f\"Columns must equal counts ({len(cols)} != {len(counts)})\"\n            )\n        tmpl = \"{count} non-null {dtype}\"\n\n    dtypes = self.dtypes\n    for i, col in enumerate(self.columns):\n        dtype = dtypes.iloc[i]\n        col = pprint_thing(col)\n\n        count = \"\"\n        if show_counts:\n            count = counts.iloc[i]\n\n        lines.append(\n            _put_str(col, space) + tmpl.format(count=count, dtype=dtype)\n        )",
                "def _non_verbose_repr():\n    lines.append(self.columns._summary(name=\"Columns\"))",
                "def _sizeof_fmt(num, size_qualifier):\n    # returns size in human readable format\n    for x in [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\"]:\n        if num < 1024.0:\n            return f\"{num:3.1f}{size_qualifier} {x}\"\n        num /= 1024.0\n    return f\"{num:3.1f}{size_qualifier} PB\"",
                "def extract_unique_dtypes_from_dtypes_set(\n    dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray\n) -> List[Dtype]:\n    extracted_dtypes = [\n        unique_dtype\n        for unique_dtype in unique_dtypes\n        if issubclass(unique_dtype.type, tuple(dtypes_set))  # type: ignore\n    ]\n    return extracted_dtypes",
                "def reindexer(value):\n    # reindex if necessary\n\n    if value.index.equals(self.index) or not len(self.index):\n        value = value._values.copy()\n    else:\n\n        # GH 4107\n        try:\n            value = value.reindex(self.index)._values\n        except ValueError as err:\n            # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n            if not value.index.is_unique:\n                # duplicate axis\n                raise err\n\n            # other\n            raise TypeError(\n                \"incompatible index of inserted column with frame index\"\n            )\n    return value",
                "def _maybe_casted_values(index, labels=None):\n    values = index._values\n    if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n        if values.dtype == np.object_:\n            values = lib.maybe_convert_objects(values)\n\n    # if we have the labels, extract the values with a mask\n    if labels is not None:\n        mask = labels == -1\n\n        # we can have situations where the whole mask is -1,\n        # meaning there is nothing found in labels, so make all nan's\n        if mask.all():\n            values = np.empty(len(mask))\n            values.fill(np.nan)\n        else:\n            values = values.take(labels)\n\n            # TODO(https://github.com/pandas-dev/pandas/issues/24206)\n            # Push this into maybe_upcast_putmask?\n            # We can't pass EAs there right now. Looks a bit\n            # complicated.\n            # So we unbox the ndarray_values, op, re-box.\n            values_type = type(values)\n            values_dtype = values.dtype\n\n            if issubclass(values_type, DatetimeLikeArray):\n                values = values._data\n\n            if mask.any():\n                values, _ = maybe_upcast_putmask(values, mask, np.nan)\n\n            if issubclass(values_type, DatetimeLikeArray):\n                values = values_type(values, dtype=values_dtype)\n\n    return values",
                "def f(vals):\n    labels, shape = algorithms.factorize(\n        vals, size_hint=min(len(self), _SIZE_HINT_LIMIT)\n    )\n    return labels.astype(\"i8\", copy=False), len(shape)",
                "def extract_values(arr):\n    # Does two things:\n    # 1. maybe gets the values from the Series / Index\n    # 2. convert datelike to i8\n    if isinstance(arr, (ABCIndexClass, ABCSeries)):\n        arr = arr._values\n\n    if needs_i8_conversion(arr):\n        if is_extension_array_dtype(arr.dtype):\n            arr = arr.asi8\n        else:\n            arr = arr.view(\"i8\")\n    return arr",
                "def combiner(x, y):\n    mask = isna(x)\n    if isinstance(mask, (ABCIndexClass, ABCSeries)):\n        mask = mask._values\n\n    x_values = extract_values(x)\n    y_values = extract_values(y)\n\n    # If the column y in other DataFrame is not in first DataFrame,\n    # just return y_values.\n    if y.name not in self.columns:\n        return y_values\n\n    return expressions.where(mask, y_values, x_values)",
                "def infer(x):\n    if x.empty:\n        return lib.map_infer(x, func)\n    return lib.map_infer(x.astype(object).values, func)",
                "def _dict_round(df, decimals):\n    for col, vals in df.items():\n        try:\n            yield _series_round(vals, decimals[col])\n        except KeyError:\n            yield vals",
                "def _series_round(s, decimals):\n    if is_integer_dtype(s) or is_float_dtype(s):\n        return s.round(decimals)\n    return s",
                "def f(x):\n    return op(x, axis=axis, skipna=skipna, **kwds)",
                "def _get_data(axis_matters):\n    if filter_type is None or filter_type == \"numeric\":\n        data = self._get_numeric_data()\n    elif filter_type == \"bool\":\n        if axis_matters:\n            # GH#25101, GH#24434\n            data = self._get_bool_data() if axis == 0 else self\n        else:\n            data = self._get_bool_data()\n    else:  # pragma: no cover\n        msg = (\n            f\"Generating numeric_only data with filter_type {filter_type} \"\n            \"not supported.\"\n        )\n        raise NotImplementedError(msg)\n    return data",
                "def f(s):\n    return s.mode(dropna=dropna)",
                "def _arith_op(left, right):\n    # for the mixed_type case where we iterate over columns,\n    # _arith_op(left, right) is equivalent to\n    # left._binop(right, func, fill_value=fill_value)\n    left, right = ops.fill_binop(left, right, fill_value)\n    return func(left, right)",
                "def c(x):\n    return nanops.nancorr(x[0], x[1], method=method)"
            ],
            "inscope_function_signatures": [
                "_from_nested_dict(data)",
                "_put_str(s, space)",
                "_constructor(self) -> Type['DataFrame']",
                "_constructor_expanddim(self)",
                "__init__(self, data=None, index: Optional[Axes]=None, columns: Optional[Axes]=None, dtype: Optional[Dtype]=None, copy: bool=False)",
                "axes(self) -> List[Index]",
                "shape(self) -> Tuple[int, int]",
                "_is_homogeneous_type(self) -> bool",
                "_repr_fits_vertical_(self) -> bool",
                "_repr_fits_horizontal_(self, ignore_width: bool=False) -> bool",
                "_info_repr(self) -> bool",
                "__repr__(self) -> str",
                "_repr_html_(self) -> Optional[str]",
                "to_string(self, buf: Optional[FilePathOrBuffer[str]]=None, columns: Optional[Sequence[str]]=None, col_space: Optional[int]=None, header: Union[bool, Sequence[str]]=True, index: bool=True, na_rep: str='NaN', formatters: Optional[fmt.formatters_type]=None, float_format: Optional[fmt.float_format_type]=None, sparsify: Optional[bool]=None, index_names: bool=True, justify: Optional[str]=None, max_rows: Optional[int]=None, min_rows: Optional[int]=None, max_cols: Optional[int]=None, show_dimensions: bool=False, decimal: str='.', line_width: Optional[int]=None, max_colwidth: Optional[int]=None, encoding: Optional[str]=None) -> Optional[str]",
                "style(self)",
                "items(self) -> Iterable[Tuple[Optional[Hashable], Series]]",
                "iteritems(self)",
                "iterrows(self)",
                "itertuples(self, index=True, name='Pandas')",
                "__len__(self) -> int",
                "dot(self, other)",
                "__matmul__(self, other)",
                "__rmatmul__(self, other)",
                "from_dict(cls, data, orient='columns', dtype=None, columns=None)",
                "to_numpy(self, dtype=None, copy=False)",
                "to_dict(self, orient='dict', into=dict)",
                "to_gbq(self, destination_table, project_id=None, chunksize=None, reauth=False, if_exists='fail', auth_local_webserver=False, table_schema=None, location=None, progress_bar=True, credentials=None)",
                "from_records(cls, data, index=None, exclude=None, columns=None, coerce_float=False, nrows=None)",
                "to_records(self, index=True, column_dtypes=None, index_dtypes=None)",
                "_from_arrays(cls, arrays, columns, index, dtype=None)",
                "to_stata(self, path, convert_dates=None, write_index=True, byteorder=None, time_stamp=None, data_label=None, variable_labels=None, version=114, convert_strl=None)",
                "to_feather(self, path)",
                "to_parquet(self, path, engine='auto', compression='snappy', index=None, partition_cols=None, **kwargs)",
                "to_html(self, buf=None, columns=None, col_space=None, header=True, index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=None, index_names=True, justify=None, max_rows=None, max_cols=None, show_dimensions=False, decimal='.', bold_rows=True, classes=None, escape=True, notebook=False, border=None, table_id=None, render_links=False, encoding=None)",
                "info(self, verbose=None, buf=None, max_cols=None, memory_usage=None, null_counts=None)",
                "memory_usage(self, index=True, deep=False)",
                "transpose(self, *args, **kwargs)",
                "_ixs(self, i: int, axis: int=0)",
                "__getitem__(self, key)",
                "_getitem_bool_array(self, key)",
                "_getitem_multilevel(self, key)",
                "_get_value(self, index, col, takeable: bool=False)",
                "__setitem__(self, key, value)",
                "_setitem_slice(self, key, value)",
                "_setitem_array(self, key, value)",
                "_setitem_frame(self, key, value)",
                "_set_item(self, key, value)",
                "_set_value(self, index, col, value, takeable: bool=False)",
                "_ensure_valid_index(self, value)",
                "_box_item_values(self, key, values)",
                "_box_col_values(self, values, items)",
                "query(self, expr, inplace=False, **kwargs)",
                "eval(self, expr, inplace=False, **kwargs)",
                "select_dtypes(self, include=None, exclude=None)",
                "insert(self, loc, column, value, allow_duplicates=False)",
                "assign(self, **kwargs)",
                "_sanitize_column(self, key, value, broadcast=True)",
                "_series(self)",
                "lookup(self, row_labels, col_labels)",
                "_reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy)",
                "_reindex_index(self, new_index, method, copy, level, fill_value=np.nan, limit=None, tolerance=None)",
                "_reindex_columns(self, new_columns, method, copy, level, fill_value=None, limit=None, tolerance=None)",
                "_reindex_multi(self, axes, copy, fill_value)",
                "align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)",
                "reindex(self, *args, **kwargs)",
                "drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise')",
                "rename(self, *args, **kwargs)",
                "fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None, **kwargs)",
                "replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')",
                "shift(self, periods=1, freq=None, axis=0, fill_value=None)",
                "set_index(self, keys, drop=True, append=False, inplace=False, verify_integrity=False)",
                "reset_index(self, level: Optional[Union[Hashable, Sequence[Hashable]]]=None, drop: bool=False, inplace: bool=False, col_level: Hashable=0, col_fill: Optional[Hashable]='') -> Optional['DataFrame']",
                "isna(self)",
                "isnull(self)",
                "notna(self)",
                "notnull(self)",
                "dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False)",
                "drop_duplicates(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first', inplace: bool=False) -> Optional['DataFrame']",
                "duplicated(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first') -> 'Series'",
                "sort_values(self, by, axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')",
                "sort_index(self, axis=0, level=None, ascending=True, inplace=False, kind='quicksort', na_position='last', sort_remaining=True)",
                "nlargest(self, n, columns, keep='first')",
                "nsmallest(self, n, columns, keep='first')",
                "swaplevel(self, i=-2, j=-1, axis=0)",
                "reorder_levels(self, order, axis=0)",
                "_combine_frame(self, other, func, fill_value=None, level=None)",
                "_combine_match_index(self, other, func)",
                "_construct_result(self, result) -> 'DataFrame'",
                "combine(self, other, func, fill_value=None, overwrite=True)",
                "combine_first(self, other)",
                "update(self, other, join='left', overwrite=True, filter_func=None, errors='ignore')",
                "pivot(self, index=None, columns=None, values=None)",
                "pivot_table(self, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False)",
                "stack(self, level=-1, dropna=True)",
                "explode(self, column: Union[str, Tuple]) -> 'DataFrame'",
                "unstack(self, level=-1, fill_value=None)",
                "melt(self, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None)",
                "diff(self, periods=1, axis=0)",
                "_gotitem(self, key: Union[str, List[str]], ndim: int, subset: Optional[Union[Series, ABCDataFrame]]=None) -> Union[Series, ABCDataFrame]",
                "aggregate(self, func, axis=0, *args, **kwargs)",
                "_aggregate(self, arg, axis=0, *args, **kwargs)",
                "transform(self, func, axis=0, *args, **kwargs)",
                "apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds)",
                "applymap(self, func)",
                "append(self, other, ignore_index=False, verify_integrity=False, sort=False)",
                "join(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False)",
                "_join_compat(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False)",
                "merge(self, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'), copy=True, indicator=False, validate=None)",
                "round(self, decimals=0, *args, **kwargs)",
                "corr(self, method='pearson', min_periods=1)",
                "cov(self, min_periods=None)",
                "corrwith(self, other, axis=0, drop=False, method='pearson')",
                "count(self, axis=0, level=None, numeric_only=False)",
                "_count_level(self, level, axis=0, numeric_only=False)",
                "_reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
                "nunique(self, axis=0, dropna=True)",
                "idxmin(self, axis=0, skipna=True)",
                "idxmax(self, axis=0, skipna=True)",
                "_get_agg_axis(self, axis_num)",
                "mode(self, axis=0, numeric_only=False, dropna=True)",
                "quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear')",
                "to_timestamp(self, freq=None, how='start', axis=0, copy=True)",
                "to_period(self, freq=None, axis=0, copy=True)",
                "isin(self, values)",
                "_verbose_repr()",
                "_non_verbose_repr()",
                "_sizeof_fmt(num, size_qualifier)",
                "extract_unique_dtypes_from_dtypes_set(dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray) -> List[Dtype]",
                "reindexer(value)",
                "_maybe_casted_values(index, labels=None)",
                "f(vals)",
                "extract_values(arr)",
                "combiner(x, y)",
                "infer(x)",
                "_dict_round(df, decimals)",
                "_series_round(s, decimals)",
                "f(x)",
                "_get_data(axis_matters)",
                "f(s)",
                "_arith_op(left, right)",
                "c(x)"
            ],
            "variables_in_file": {
                "_shared_doc_kwargs": [
                    128,
                    3969,
                    6433,
                    6407,
                    4745,
                    3947,
                    4428,
                    3664,
                    4432,
                    3988,
                    3637,
                    4436,
                    4440,
                    4697
                ],
                "dict": [
                    128,
                    6752,
                    7105,
                    1412,
                    1604,
                    422,
                    8101,
                    424,
                    1225,
                    1292,
                    1423,
                    2580,
                    6200,
                    6751
                ],
                "_numeric_only_doc": [
                    154
                ],
                "_merge_doc": [
                    6978,
                    159
                ],
                "NDFrame": [
                    394,
                    4746,
                    3948,
                    2864,
                    3665,
                    501,
                    309,
                    4698
                ],
                "_typ": [
                    387
                ],
                "DataFrame": [
                    6784,
                    6785,
                    7556,
                    2822,
                    391,
                    6933,
                    6935,
                    417,
                    3496,
                    8116,
                    8127,
                    8141,
                    1618,
                    1108,
                    8148,
                    8149,
                    8151,
                    8152,
                    2652,
                    1126,
                    2798,
                    3442,
                    6773,
                    5495,
                    5496
                ],
                "property": [
                    544,
                    389,
                    522,
                    397,
                    814,
                    3501,
                    2583,
                    505
                ],
                "Type": [
                    393,
                    390
                ],
                "_constructor_sliced": [
                    393
                ],
                "Series": [
                    2696,
                    393,
                    6930,
                    7698,
                    2716,
                    2478,
                    3504,
                    8112,
                    6322,
                    2483,
                    4660,
                    2741,
                    6323,
                    7736,
                    444,
                    7105,
                    7106,
                    7365,
                    1225,
                    7507,
                    1108,
                    469,
                    4692,
                    7517,
                    7774,
                    6751,
                    6753,
                    7394,
                    2917,
                    7657,
                    1130,
                    1131,
                    3439,
                    2800,
                    881,
                    1137,
                    7413,
                    3447
                ],
                "_deprecations": [
                    394
                ],
                "FrozenSet": [
                    3280,
                    394
                ],
                "str": [
                    394,
                    395,
                    652,
                    4633,
                    1823,
                    682,
                    6320,
                    4672,
                    457,
                    5967,
                    739,
                    740,
                    742,
                    1639,
                    744,
                    8166,
                    4588,
                    749,
                    1774,
                    3054,
                    1777,
                    754,
                    757,
                    758,
                    7548,
                    2302
                ],
                "NDFrame._deprecations": [
                    394
                ],
                "frozenset": [
                    3266,
                    394,
                    3267,
                    3260
                ],
                "_accessors": [
                    395
                ],
                "Set": [
                    395
                ],
                "set": [
                    1633,
                    4171,
                    395,
                    1635
                ],
                "NotImplementedError": [
                    7593,
                    5491,
                    2918,
                    399
                ],
                "Optional": [
                    407,
                    408,
                    409,
                    4632,
                    4383,
                    682,
                    6322,
                    4184,
                    4188,
                    4189,
                    739,
                    740,
                    741,
                    745,
                    746,
                    747,
                    4587,
                    749,
                    750,
                    751,
                    752,
                    881,
                    4590,
                    755,
                    756,
                    757,
                    758
                ],
                "Axes": [
                    408,
                    407
                ],
                "Dtype": [
                    3280,
                    409,
                    3281
                ],
                "bool": [
                    643,
                    4633,
                    410,
                    545,
                    4660,
                    2872,
                    2751,
                    583,
                    590,
                    4185,
                    4186,
                    742,
                    743,
                    747,
                    748,
                    4588,
                    4589,
                    753,
                    2675
                ],
                "data": [
                    1579,
                    1584,
                    1595,
                    1597,
                    1600,
                    1602,
                    1604,
                    1606,
                    1607,
                    1611,
                    1618,
                    1619,
                    1624,
                    2678,
                    2685,
                    2686,
                    2688,
                    7867,
                    7872,
                    1223,
                    1225,
                    1226,
                    1228,
                    1235,
                    7942,
                    7947,
                    7949,
                    7956,
                    3391,
                    3394,
                    3395,
                    412,
                    413,
                    7581,
                    417,
                    418,
                    7587,
                    7585,
                    420,
                    422,
                    424,
                    425,
                    426,
                    7594,
                    430,
                    431,
                    435,
                    437,
                    438,
                    439,
                    441,
                    442,
                    444,
                    445,
                    446,
                    447,
                    450,
                    451,
                    452,
                    454,
                    457,
                    458,
                    459,
                    460,
                    461,
                    462,
                    463,
                    464,
                    7633,
                    7630,
                    7632,
                    7636,
                    469,
                    470,
                    471,
                    472,
                    7638,
                    474,
                    7639,
                    478,
                    8158,
                    483,
                    493
                ],
                "dtype": [
                    1289,
                    414,
                    415,
                    2340,
                    422,
                    425,
                    1834,
                    2348,
                    431,
                    1588,
                    1590,
                    442,
                    1599,
                    1600,
                    450,
                    452,
                    454,
                    464,
                    1235,
                    476,
                    478,
                    480,
                    483,
                    493
                ],
                "self._validate_dtype": [
                    415
                ],
                "self": [
                    2051,
                    4108,
                    4119,
                    4121,
                    4126,
                    4127,
                    4128,
                    4129,
                    4131,
                    4156,
                    4160,
                    6215,
                    2133,
                    6311,
                    6312,
                    6313,
                    6336,
                    4333,
                    4335,
                    2302,
                    2303,
                    2305,
                    2306,
                    2310,
                    2314,
                    6411,
                    2316,
                    2319,
                    6415,
                    2322,
                    6419,
                    2325,
                    2326,
                    4378,
                    2331,
                    4379,
                    4380,
                    6426,
                    4384,
                    2338,
                    2339,
                    4387,
                    4389,
                    6435,
                    4391,
                    4392,
                    4393,
                    6437,
                    4395,
                    2352,
                    4403,
                    4410,
                    4412,
                    2372,
                    2388,
                    2390,
                    415,
                    421,
                    2479,
                    2480,
                    2483,
                    6579,
                    4552,
                    4555,
                    4557,
                    4562,
                    4578,
                    4581,
                    501,
                    6653,
                    4615,
                    520,
                    4616,
                    4619,
                    4623,
                    4624,
                    4626,
                    542,
                    2601,
                    2605,
                    2607,
                    2608,
                    2611,
                    4659,
                    2616,
                    4664,
                    4669,
                    2622,
                    575,
                    576,
                    2624,
                    578,
                    2625,
                    2626,
                    2629,
                    4674,
                    2635,
                    588,
                    4684,
                    2639,
                    2640,
                    2641,
                    2642,
                    4688,
                    4692,
                    2645,
                    2649,
                    603,
                    2653,
                    2657,
                    4709,
                    2664,
                    2665,
                    2666,
                    6765,
                    6767,
                    2672,
                    4720,
                    6769,
                    6771,
                    629,
                    2678,
                    4727,
                    6779,
                    6780,
                    2685,
                    4736,
                    4737,
                    6786,
                    6787,
                    4741,
                    4743,
                    2696,
                    649,
                    6792,
                    6794,
                    2702,
                    2704,
                    657,
                    658,
                    2709,
                    2711,
                    2715,
                    4763,
                    2717,
                    670,
                    2719,
                    2720,
                    4764,
                    2723,
                    2724,
                    2725,
                    2727,
                    688,
                    690,
                    2742,
                    2743,
                    2746,
                    4794,
                    2749,
                    703,
                    4800,
                    4801,
                    4807,
                    4809,
                    2766,
                    2769,
                    2770,
                    2776,
                    2784,
                    2785,
                    2786,
                    2789,
                    2792,
                    2796,
                    2799,
                    2801,
                    2804,
                    2807,
                    2808,
                    2813,
                    2815,
                    2817,
                    2819,
                    2820,
                    6920,
                    2826,
                    2828,
                    2831,
                    2832,
                    2838,
                    792,
                    2840,
                    6937,
                    2847,
                    2848,
                    2849,
                    6952,
                    2862,
                    2863,
                    2864,
                    6962,
                    2869,
                    2870,
                    4918,
                    828,
                    2891,
                    2894,
                    2895,
                    2897,
                    6997,
                    2902,
                    2904,
                    2905,
                    2907,
                    2915,
                    2925,
                    882,
                    883,
                    884,
                    2930,
                    886,
                    887,
                    2932,
                    2934,
                    891,
                    2940,
                    2941,
                    5018,
                    5034,
                    939,
                    940,
                    941,
                    5036,
                    5059,
                    5060,
                    7109,
                    5063,
                    7112,
                    7117,
                    7118,
                    7121,
                    5075,
                    5103,
                    1009,
                    5105,
                    1011,
                    3059,
                    5109,
                    3062,
                    1015,
                    3066,
                    1018,
                    3069,
                    5124,
                    1029,
                    7172,
                    5127,
                    7212,
                    1109,
                    1110,
                    1113,
                    1118,
                    1119,
                    3167,
                    3168,
                    3171,
                    1127,
                    1135,
                    5237,
                    5240,
                    1145,
                    5241,
                    5243,
                    1151,
                    7307,
                    5272,
                    7322,
                    5295,
                    7362,
                    7363,
                    3277,
                    3289,
                    3295,
                    3301,
                    3303,
                    5366,
                    3321,
                    3322,
                    3323,
                    5371,
                    1289,
                    3391,
                    7496,
                    7498,
                    7501,
                    7503,
                    3420,
                    3426,
                    7523,
                    1381,
                    7525,
                    7532,
                    1390,
                    1392,
                    1396,
                    1397,
                    3445,
                    3446,
                    3448,
                    1402,
                    5498,
                    5500,
                    5501,
                    1408,
                    1410,
                    3458,
                    1413,
                    3463,
                    1420,
                    1423,
                    1424,
                    5522,
                    7572,
                    7573,
                    7574,
                    3485,
                    7581,
                    7585,
                    7587,
                    3493,
                    3494,
                    3495,
                    7597,
                    3504,
                    3505,
                    7622,
                    7625,
                    3536,
                    3537,
                    3538,
                    3539,
                    3544,
                    7641,
                    3549,
                    7654,
                    3560,
                    1524,
                    3586,
                    3589,
                    5637,
                    7698,
                    3606,
                    3609,
                    3621,
                    3622,
                    3627,
                    3629,
                    3631,
                    7732,
                    7733,
                    7734,
                    7736,
                    7770,
                    7771,
                    7772,
                    3678,
                    7774,
                    7781,
                    7783,
                    5785,
                    7867,
                    1755,
                    1757,
                    1759,
                    1761,
                    1764,
                    1766,
                    1774,
                    1776,
                    1777,
                    7942,
                    7943,
                    1801,
                    7951,
                    7953,
                    7954,
                    7961,
                    7963,
                    7990,
                    7994,
                    7996,
                    7998,
                    8002,
                    5963,
                    5965,
                    8024,
                    8028,
                    8030,
                    8032,
                    3940,
                    8036,
                    6026,
                    6029,
                    6034,
                    6035,
                    1942,
                    8107,
                    8108,
                    1965,
                    8115,
                    8119,
                    8128,
                    8129,
                    8130,
                    6100
                ],
                "isinstance": [
                    4098,
                    4127,
                    4135,
                    4139,
                    2604,
                    4143,
                    4146,
                    4672,
                    4673,
                    1604,
                    1618,
                    1108,
                    2652,
                    6751,
                    6752,
                    2661,
                    1126,
                    1639,
                    4711,
                    1130,
                    1132,
                    4729,
                    6781,
                    2685,
                    6784,
                    6791,
                    2696,
                    2716,
                    4775,
                    2737,
                    2741,
                    7365,
                    1225,
                    1755,
                    5346,
                    1766,
                    2798,
                    5358,
                    2800,
                    4339,
                    2822,
                    6930,
                    2837,
                    6935,
                    4376,
                    1823,
                    4384,
                    4395,
                    4401,
                    5962,
                    7530,
                    3439,
                    3442,
                    3445,
                    3447,
                    5495,
                    7548,
                    3454,
                    3460,
                    3464,
                    3465,
                    6024,
                    3471,
                    417,
                    420,
                    8101,
                    3494,
                    424,
                    3496,
                    426,
                    430,
                    8112,
                    8116,
                    444,
                    7105,
                    7106,
                    4548,
                    5060,
                    457,
                    458,
                    469,
                    471,
                    3054,
                    4087
                ],
                "data._data": [
                    418,
                    7956
                ],
                "BlockManager": [
                    420
                ],
                "mgr": [
                    480,
                    1664,
                    450,
                    1666,
                    452,
                    421,
                    454,
                    425,
                    1834,
                    1835,
                    431,
                    495,
                    501,
                    442,
                    476,
                    478
                ],
                "self._init_mgr": [
                    421
                ],
                "index": [
                    1795,
                    1797,
                    5637,
                    1799,
                    2055,
                    1801,
                    1811,
                    1812,
                    5787,
                    802,
                    422,
                    6775,
                    425,
                    1834,
                    431,
                    1586,
                    2482,
                    7734,
                    7735,
                    442,
                    450,
                    452,
                    1220,
                    454,
                    4164,
                    4166,
                    4167,
                    1228,
                    2892,
                    2767,
                    2896,
                    4175,
                    4177,
                    1235,
                    468,
                    2773,
                    470,
                    2902,
                    472,
                    2904,
                    474,
                    1754,
                    476,
                    7772,
                    478,
                    2143,
                    480,
                    2785,
                    2786,
                    7773,
                    8158,
                    8161,
                    1638,
                    1639,
                    1640,
                    1641,
                    6761,
                    491,
                    1643,
                    493,
                    1645,
                    3820,
                    496,
                    1648,
                    1010,
                    1651,
                    3568,
                    1653,
                    1654,
                    3569,
                    1784,
                    3571,
                    1018,
                    4338,
                    4339,
                    6765
                ],
                "columns": [
                    1664,
                    1410,
                    1412,
                    5637,
                    793,
                    5018,
                    5788,
                    422,
                    1576,
                    425,
                    1577,
                    939,
                    1834,
                    942,
                    431,
                    1586,
                    4918,
                    442,
                    448,
                    449,
                    450,
                    452,
                    1605,
                    454,
                    1606,
                    1607,
                    1612,
                    462,
                    463,
                    464,
                    465,
                    1230,
                    1235,
                    1616,
                    1619,
                    1620,
                    1621,
                    1622,
                    1624,
                    2134,
                    1627,
                    476,
                    1628,
                    478,
                    1630,
                    480,
                    1640,
                    3562,
                    491,
                    3563,
                    493,
                    3565,
                    3821,
                    496,
                    1662
                ],
                "copy": [
                    3591,
                    1289,
                    5263,
                    3611,
                    422,
                    2604,
                    431,
                    3633,
                    2611,
                    7991,
                    442,
                    454,
                    3656,
                    8025,
                    478,
                    7007,
                    483,
                    3565,
                    3571
                ],
                "init_dict": [
                    480,
                    425,
                    450,
                    452
                ],
                "ma.MaskedArray": [
                    426
                ],
                "ma": [
                    426,
                    435
                ],
                "mrecords.MaskedRecords": [
                    430
                ],
                "mrecords": [
                    430
                ],
                "masked_rec_array_to_mgr": [
                    431
                ],
                "mask": [
                    5505,
                    7554,
                    5514,
                    5516,
                    4366,
                    4367,
                    5519,
                    5522,
                    7188,
                    7194,
                    435,
                    436,
                    439,
                    4567,
                    4569,
                    4571,
                    4578,
                    4345,
                    5357,
                    5358,
                    5359,
                    7538,
                    7541,
                    5369,
                    7546,
                    4349,
                    4350
                ],
                "ma.getmaskarray": [
                    435
                ],
                "mask.any": [
                    436,
                    4366
                ],
                "fill_value": [
                    5088,
                    5248,
                    3592,
                    3657,
                    3627,
                    3565,
                    3991,
                    3634,
                    3571,
                    6100,
                    437,
                    5077,
                    439,
                    5269,
                    5270,
                    3612,
                    5790
                ],
                "maybe_upcast": [
                    437
                ],
                "data.soften_mask": [
                    438
                ],
                "data.copy": [
                    441
                ],
                "init_ndarray": [
                    442,
                    478,
                    454,
                    495
                ],
                "np.ndarray": [
                    4099,
                    3464,
                    1132,
                    2604,
                    4143,
                    2800,
                    3280,
                    1618,
                    2837,
                    3447,
                    444,
                    2716
                ],
                "np": [
                    5504,
                    4099,
                    4351,
                    3464,
                    1289,
                    4367,
                    7314,
                    7187,
                    7188,
                    2837,
                    7315,
                    7317,
                    7954,
                    2716,
                    7196,
                    1823,
                    1830,
                    3497,
                    3499,
                    2604,
                    4143,
                    7605,
                    7735,
                    444,
                    4671,
                    1600,
                    2625,
                    3277,
                    7631,
                    3280,
                    4561,
                    1618,
                    3672,
                    3547,
                    1757,
                    7773,
                    7647,
                    1120,
                    7649,
                    483,
                    5095,
                    1128,
                    1131,
                    1132,
                    1133,
                    2926,
                    2800,
                    2676,
                    4340,
                    5108,
                    3447,
                    7413,
                    4350,
                    3582,
                    1151
                ],
                "Index": [
                    2716,
                    3460,
                    3464,
                    1643,
                    1132,
                    1645,
                    4684,
                    3471,
                    2800,
                    6765,
                    7951,
                    3447,
                    506,
                    444
                ],
                "data.dtype.names": [
                    445,
                    446
                ],
                "data.dtype": [
                    445,
                    446
                ],
                "data_columns": [
                    449,
                    446,
                    447
                ],
                "list": [
                    4099,
                    6791,
                    3465,
                    4376,
                    4126,
                    6952,
                    8104,
                    4396,
                    4143,
                    4401,
                    4147,
                    446,
                    4548,
                    7109,
                    1225,
                    5962,
                    459,
                    1228,
                    4561,
                    4689,
                    1757,
                    1764,
                    4711,
                    2671,
                    2800,
                    1009,
                    4729,
                    4087,
                    1401,
                    6781
                ],
                "k": [
                    1408,
                    1416,
                    2326,
                    941,
                    942,
                    943,
                    447,
                    3393,
                    3394,
                    2373,
                    1607,
                    1611,
                    1612,
                    1613,
                    4727,
                    1390,
                    887,
                    1392,
                    883,
                    884,
                    886,
                    1015,
                    4733
                ],
                "getattr": [
                    451,
                    4103,
                    461,
                    2798,
                    2675
                ],
                "data.name": [
                    452
                ],
                "abc.Iterable": [
                    457
                ],
                "abc": [
                    457,
                    458,
                    4099,
                    4146
                ],
                "bytes": [
                    457
                ],
                "abc.Sequence": [
                    458
                ],
                "ExtensionArray": [
                    458,
                    3454
                ],
                "len": [
                    2305,
                    7554,
                    1029,
                    2823,
                    3465,
                    2314,
                    2316,
                    7949,
                    2702,
                    2319,
                    2704,
                    7313,
                    2322,
                    7186,
                    2325,
                    2326,
                    4374,
                    7318,
                    4379,
                    2332,
                    3485,
                    542,
                    2334,
                    3497,
                    2735,
                    4403,
                    2869,
                    4664,
                    4666,
                    4156,
                    4412,
                    576,
                    2624,
                    2625,
                    4160,
                    4161,
                    1223,
                    3449,
                    3531,
                    460,
                    588,
                    3532,
                    7116,
                    7506,
                    2815,
                    1110,
                    472,
                    3544,
                    474,
                    603,
                    3420,
                    4569,
                    2915,
                    4713,
                    1642,
                    4715,
                    493,
                    4717,
                    5235,
                    1780,
                    7412,
                    6774,
                    1015,
                    5240,
                    633,
                    1018,
                    5243,
                    7413,
                    2813,
                    4350,
                    639
                ],
                "is_list_like": [
                    2915,
                    2661,
                    461,
                    7952,
                    3255,
                    3257,
                    8121
                ],
                "is_named_tuple": [
                    462
                ],
                "_fields": [
                    463
                ],
                "arrays": [
                    1664,
                    1783,
                    4123,
                    4129,
                    4131,
                    1830,
                    4137,
                    1834,
                    4141,
                    4144,
                    4147,
                    4151,
                    4156,
                    4161,
                    4164,
                    1607,
                    1609,
                    1614,
                    464,
                    1616,
                    1619,
                    1624,
                    476,
                    1761,
                    1642,
                    1643,
                    1008,
                    1648,
                    1776,
                    1011,
                    1015,
                    1659,
                    1020,
                    1023
                ],
                "to_arrays": [
                    464,
                    1624,
                    1619
                ],
                "ensure_index": [
                    1606,
                    1577,
                    465,
                    1621,
                    1626,
                    1628
                ],
                "get_names_from_index": [
                    470
                ],
                "Categorical": [
                    471
                ],
                "ibase.default_index": [
                    472,
                    474,
                    4374
                ],
                "ibase": [
                    472,
                    474,
                    4374
                ],
                "arrays_to_mgr": [
                    1664,
                    1834,
                    476
                ],
                "arr": [
                    5346,
                    483,
                    5347,
                    5349,
                    5350,
                    5351,
                    5289,
                    5290,
                    491,
                    5292,
                    5353,
                    5354
                ],
                "np.array": [
                    1600,
                    2625,
                    483,
                    1289,
                    1757
                ],
                "ValueError": [
                    5511,
                    2824,
                    4104,
                    1930,
                    6025,
                    6027,
                    1421,
                    1933,
                    2703,
                    1427,
                    6932,
                    2839,
                    5278,
                    1828,
                    6948,
                    7206,
                    8114,
                    4404,
                    8118,
                    3263,
                    4159,
                    7108,
                    4168,
                    3273,
                    3533,
                    1231,
                    1233,
                    2130,
                    1111,
                    2779,
                    4574,
                    1122,
                    3427,
                    484,
                    7650,
                    2918,
                    2919,
                    7399,
                    7785,
                    4714,
                    3056,
                    499,
                    5493,
                    3063,
                    2814
                ],
                "TypeError": [
                    4109,
                    4110,
                    6416,
                    2843,
                    7606,
                    8122,
                    5061,
                    4550,
                    7114,
                    2898,
                    2779,
                    4576,
                    7650,
                    6755,
                    484,
                    485,
                    2918,
                    3434,
                    7531,
                    1649,
                    6770,
                    1139
                ],
                "exc": [
                    489,
                    485
                ],
                "e": [
                    489,
                    487
                ],
                "arr.ndim": [
                    491
                ],
                "values": [
                    4353,
                    5637,
                    4360,
                    4361,
                    4364,
                    4367,
                    4370,
                    4372,
                    5786,
                    8101,
                    8104,
                    8107,
                    7597,
                    7599,
                    8112,
                    7601,
                    8113,
                    8115,
                    8116,
                    8117,
                    8119,
                    1592,
                    8121,
                    1595,
                    1597,
                    2622,
                    8125,
                    1600,
                    2624,
                    1602,
                    2625,
                    2626,
                    8128,
                    3537,
                    7638,
                    3545,
                    7641,
                    7642,
                    492,
                    496,
                    4338,
                    2931,
                    2932,
                    4340,
                    2934,
                    4341,
                    7538,
                    6651,
                    2941,
                    4350,
                    4351
                ],
                "cast_scalar_to_array": [
                    492,
                    3485
                ],
                "values.dtype": [
                    496,
                    4361,
                    4340
                ],
                "NDFrame.__init__": [
                    501
                ],
                "self.index": [
                    2817,
                    3458,
                    3586,
                    5124,
                    1029,
                    3463,
                    520,
                    2696,
                    1420,
                    2702,
                    2704,
                    6034,
                    2709,
                    4378,
                    4379,
                    4380,
                    3485,
                    542,
                    4126,
                    4127,
                    4128,
                    4129,
                    4131,
                    4384,
                    2725,
                    3621,
                    4387,
                    4389,
                    4392,
                    4393,
                    941,
                    2608,
                    3504,
                    6962,
                    2483,
                    2743,
                    7996,
                    2624,
                    2625,
                    8129,
                    2941,
                    7118,
                    2895,
                    2770,
                    2815,
                    2388,
                    3538,
                    4692,
                    2776,
                    1755,
                    3420,
                    1757,
                    8030,
                    1759,
                    2785,
                    3426,
                    2915,
                    1764,
                    1766,
                    7783,
                    6765,
                    1011,
                    1396,
                    2932,
                    5240,
                    2813,
                    2303
                ],
                "self.columns": [
                    5127,
                    520,
                    4108,
                    3606,
                    542,
                    3622,
                    2607,
                    2616,
                    4669,
                    4674,
                    4684,
                    2639,
                    2640,
                    1109,
                    1110,
                    603,
                    7781,
                    2664,
                    2666,
                    6767,
                    6769,
                    6771,
                    6779,
                    2685,
                    6786,
                    6787,
                    5272,
                    2715,
                    2717,
                    2784,
                    1761,
                    1774,
                    1776,
                    1777,
                    5366,
                    2305,
                    2310,
                    1801,
                    2314,
                    2319,
                    7951,
                    2322,
                    2325,
                    2326,
                    2339,
                    4395,
                    2352,
                    4403,
                    4410,
                    4412,
                    7998,
                    8032,
                    1381,
                    882,
                    883,
                    2930,
                    1397,
                    886,
                    3445,
                    3448,
                    3446,
                    5500,
                    1410,
                    6026,
                    1423,
                    6035,
                    3493,
                    3494,
                    939,
                    8108,
                    2480,
                    3505,
                    8130,
                    7118,
                    3539,
                    3544,
                    1009,
                    1015,
                    1018
                ],
                "List": [
                    6320,
                    3281,
                    506
                ],
                "Tuple": [
                    881,
                    523,
                    5967,
                    4383
                ],
                "int": [
                    1025,
                    741,
                    523,
                    750,
                    751,
                    752,
                    6321,
                    755,
                    756,
                    2588
                ],
                "self._data.any_extension_types": [
                    575
                ],
                "self._data": [
                    576,
                    4736,
                    578,
                    4801,
                    2372,
                    6312,
                    2601,
                    2925,
                    4623,
                    3504,
                    7990,
                    8024,
                    3323,
                    2622,
                    575
                ],
                "block.dtype": [
                    576
                ],
                "block": [
                    576
                ],
                "self._data.blocks": [
                    576
                ],
                "self._data.is_mixed_type": [
                    578
                ],
                "max_rows": [
                    672,
                    2146,
                    804,
                    618,
                    587,
                    620,
                    588,
                    716,
                    2316,
                    2319,
                    697,
                    661,
                    631,
                    633
                ],
                "get_option": [
                    647,
                    2314,
                    2316,
                    661,
                    662,
                    663,
                    664,
                    665,
                    666,
                    696,
                    697,
                    698,
                    699,
                    700,
                    2377,
                    587,
                    602,
                    616,
                    620
                ],
                "width": [
                    641,
                    675,
                    601,
                    667,
                    669,
                    607
                ],
                "height": [
                    601
                ],
                "console.get_console_size": [
                    601,
                    667
                ],
                "console": [
                    616,
                    601,
                    667,
                    613
                ],
                "max_columns": [
                    602,
                    606
                ],
                "nb_columns": [
                    603,
                    606,
                    607
                ],
                "ignore_width": [
                    613,
                    607
                ],
                "console.in_interactive_session": [
                    613
                ],
                "console.in_ipython_frontend": [
                    616
                ],
                "buf": [
                    2307,
                    680,
                    810,
                    2155,
                    656,
                    625,
                    658,
                    659,
                    689,
                    690,
                    692,
                    2392,
                    2297,
                    2298,
                    637,
                    638,
                    671
                ],
                "StringIO": [
                    656,
                    625,
                    689
                ],
                "d": [
                    633,
                    637,
                    629
                ],
                "d.iloc": [
                    633
                ],
                "min": [
                    4664,
                    633
                ],
                "d.to_string": [
                    637
                ],
                "value": [
                    3457,
                    3458,
                    2820,
                    3460,
                    2822,
                    2823,
                    3463,
                    2825,
                    2826,
                    3464,
                    3465,
                    3466,
                    3468,
                    3469,
                    2832,
                    3470,
                    3471,
                    3472,
                    3474,
                    3477,
                    3478,
                    3482,
                    3485,
                    3486,
                    2847,
                    2849,
                    3489,
                    3490,
                    3493,
                    3497,
                    3499,
                    2862,
                    2863,
                    2864,
                    3981,
                    3449,
                    2892,
                    3450,
                    2896,
                    3960,
                    2902,
                    2904,
                    3420,
                    3421,
                    3426,
                    2915,
                    3454,
                    2917,
                    3429,
                    2796,
                    3437,
                    2926,
                    2799,
                    3439,
                    2801,
                    3440,
                    3442,
                    2804,
                    2808,
                    3321,
                    3322,
                    3323,
                    3452,
                    638,
                    639
                ],
                "buf.getvalue": [
                    680,
                    659,
                    692,
                    638
                ],
                "repr_width": [
                    641,
                    639
                ],
                "max": [
                    2326,
                    639
                ],
                "l": [
                    639
                ],
                "value.split": [
                    639
                ],
                "info_repr_option": [
                    648,
                    647
                ],
                "self._repr_fits_horizontal_": [
                    649
                ],
                "self._repr_fits_vertical_": [
                    649
                ],
                "self._info_repr": [
                    688,
                    657
                ],
                "self.info": [
                    690,
                    658
                ],
                "min_rows": [
                    673,
                    803,
                    717,
                    662,
                    698
                ],
                "max_cols": [
                    674,
                    2147,
                    805,
                    2313,
                    2314,
                    718,
                    2319,
                    2322,
                    663,
                    699
                ],
                "max_colwidth": [
                    664,
                    676,
                    790
                ],
                "show_dimensions": [
                    2148,
                    677,
                    806,
                    719,
                    665,
                    700
                ],
                "_": [
                    7112,
                    3482,
                    667,
                    4367
                ],
                "self.to_string": [
                    670
                ],
                "val": [
                    692,
                    693,
                    694
                ],
                "replace": [
                    3979,
                    692
                ],
                "val.replace": [
                    693
                ],
                "formatter": [
                    810,
                    2154,
                    724,
                    2132,
                    791,
                    702
                ],
                "fmt.DataFrameFormatter": [
                    2132,
                    702,
                    791
                ],
                "fmt": [
                    736,
                    2307,
                    745,
                    746,
                    2129,
                    2132,
                    2069,
                    791,
                    2392,
                    702
                ],
                "formatter.to_html": [
                    2154,
                    724
                ],
                "FilePathOrBuffer": [
                    739
                ],
                "Sequence": [
                    740,
                    742,
                    4632,
                    4587,
                    4184
                ],
                "Union": [
                    742,
                    4632,
                    4587,
                    4588,
                    5967,
                    6320,
                    6322,
                    6323,
                    4184,
                    4633
                ],
                "fmt.formatters_type": [
                    745
                ],
                "fmt.float_format_type": [
                    746
                ],
                "option_context": [
                    790
                ],
                "col_space": [
                    794,
                    2135
                ],
                "na_rep": [
                    2136,
                    795
                ],
                "formatters": [
                    2137,
                    796
                ],
                "float_format": [
                    2138,
                    797
                ],
                "sparsify": [
                    2139,
                    798
                ],
                "justify": [
                    2129,
                    2140,
                    799
                ],
                "index_names": [
                    800,
                    1764,
                    1797,
                    1767,
                    1769,
                    1771,
                    1772,
                    1774,
                    1778,
                    1780,
                    2141
                ],
                "header": [
                    801,
                    2142
                ],
                "decimal": [
                    2149,
                    807
                ],
                "line_width": [
                    808
                ],
                "formatter.to_string": [
                    810
                ],
                "encoding": [
                    810,
                    2159
                ],
                "Substitution": [
                    736,
                    5632,
                    6977,
                    6403,
                    5768,
                    4745,
                    3947,
                    2060,
                    3664,
                    2069,
                    728,
                    4697
                ],
                "fmt.common_docstring": [
                    736,
                    2069
                ],
                "fmt.return_docstring": [
                    736,
                    2069
                ],
                "Styler": [
                    828
                ],
                "_shared_docs": [
                    3969,
                    5633,
                    6433,
                    5639,
                    5769,
                    6409,
                    4428,
                    880,
                    4432,
                    3988,
                    3637,
                    4436,
                    5527,
                    4440,
                    889,
                    6102,
                    6199,
                    830
                ],
                "self.columns.is_unique": [
                    1381,
                    3494,
                    6026,
                    2639,
                    882
                ],
                "hasattr": [
                    882,
                    7644,
                    1589,
                    1639
                ],
                "self._get_item_cache": [
                    2894,
                    2769,
                    2642,
                    884,
                    2749
                ],
                "i": [
                    7189,
                    7191,
                    7194,
                    7197,
                    4128,
                    4129,
                    1826,
                    2339,
                    2340,
                    4386,
                    4387,
                    7203,
                    7204,
                    2345,
                    2601,
                    8107,
                    4396,
                    4397,
                    5038,
                    4399,
                    2608,
                    5040,
                    8108,
                    7735,
                    2616,
                    2622,
                    3548,
                    3549,
                    7773,
                    1767,
                    1640,
                    1769,
                    1643,
                    887,
                    886,
                    1783,
                    1784,
                    1659
                ],
                "enumerate": [
                    2339,
                    4387,
                    1767,
                    4396,
                    8108,
                    3505,
                    7189,
                    886,
                    1783,
                    7190,
                    1659,
                    3548
                ],
                "self._ixs": [
                    887
                ],
                "Appender": [
                    3969,
                    5633,
                    5769,
                    4746,
                    6409,
                    3988,
                    6433,
                    3637,
                    6198,
                    6978,
                    4428,
                    4432,
                    3665,
                    4436,
                    4440,
                    4698,
                    3948,
                    880,
                    889
                ],
                "Iterable": [
                    881,
                    4679,
                    4383
                ],
                "Hashable": [
                    4632,
                    4587,
                    881,
                    4184,
                    4187,
                    4188
                ],
                "self.items": [
                    1408,
                    7112,
                    1390,
                    2479,
                    1392,
                    4688,
                    891
                ],
                "klass": [
                    2940,
                    940,
                    2941,
                    942
                ],
                "self._constructor_sliced": [
                    940,
                    2605,
                    7954,
                    2742,
                    7963,
                    2940
                ],
                "v": [
                    1408,
                    3393,
                    3394,
                    8161,
                    1416,
                    7112,
                    1611,
                    941,
                    1390,
                    942,
                    1392,
                    1614,
                    1783,
                    1659,
                    1822,
                    8159
                ],
                "zip": [
                    7395,
                    1412,
                    4389,
                    2825,
                    941,
                    1423,
                    4689,
                    3548,
                    1020,
                    1757,
                    1023
                ],
                "self.values": [
                    8128,
                    2723,
                    1289,
                    3627,
                    941,
                    7597,
                    3537,
                    5109,
                    7733,
                    7641,
                    7771,
                    1119
                ],
                "s": [
                    8166,
                    942,
                    943,
                    8158,
                    7099,
                    7100,
                    7101,
                    7870,
                    8159
                ],
                "fields": [
                    1009,
                    1019,
                    1012
                ],
                "arrays.append": [
                    4129,
                    4131,
                    4137,
                    4141,
                    1614,
                    4144,
                    1011,
                    4147,
                    4151
                ],
                "fields.insert": [
                    1012
                ],
                "arrays.extend": [
                    1015
                ],
                "self.iloc": [
                    3303,
                    8107,
                    2902,
                    1015
                ],
                "range": [
                    4128,
                    4136,
                    1015
                ],
                "name": [
                    4417,
                    1827,
                    1797,
                    1801,
                    1774,
                    4399,
                    4688,
                    1809,
                    1810,
                    4401,
                    4406,
                    1018,
                    1019,
                    4414
                ],
                "itertuple": [
                    1019,
                    1020
                ],
                "collections.namedtuple": [
                    1019
                ],
                "collections": [
                    8104,
                    1019
                ],
                "map": [
                    7395,
                    4689,
                    1401,
                    1020,
                    1757
                ],
                "itertuple._make": [
                    1020
                ],
                "other": [
                    6784,
                    6785,
                    6786,
                    6787,
                    5252,
                    5496,
                    6791,
                    6792,
                    6921,
                    6794,
                    5371,
                    6930,
                    6931,
                    6933,
                    6935,
                    6938,
                    6773,
                    5247,
                    6774,
                    6952,
                    6778,
                    3652,
                    6781,
                    7365,
                    7366,
                    7368,
                    7369,
                    6782,
                    5075,
                    1108,
                    1109,
                    1110,
                    1114,
                    6751,
                    1120,
                    6752,
                    6753,
                    5091,
                    6754,
                    5093,
                    1126,
                    1128,
                    5096,
                    1130,
                    5097,
                    6760,
                    6765,
                    5103,
                    6767,
                    5105,
                    7409,
                    1139,
                    5235,
                    5109,
                    5237,
                    5495,
                    5240,
                    1145,
                    5498,
                    5243,
                    5244,
                    6772,
                    5502,
                    1151
                ],
                "common": [
                    1113,
                    1114,
                    1109,
                    1110
                ],
                "self.columns.union": [
                    1109
                ],
                "other.index": [
                    5235,
                    1109,
                    1110,
                    6767
                ],
                "left": [
                    5088,
                    5089,
                    7395,
                    7385,
                    1128,
                    7369,
                    1131,
                    7372,
                    1135,
                    1137,
                    7377,
                    7378,
                    7381,
                    1113,
                    1115,
                    1118
                ],
                "self.reindex": [
                    2720,
                    1113,
                    6780
                ],
                "right": [
                    5088,
                    5089,
                    7395,
                    7369,
                    7373,
                    7377,
                    7378,
                    6998,
                    7382,
                    7385,
                    1114,
                    1116
                ],
                "other.reindex": [
                    1114,
                    6787,
                    6772
                ],
                "lvals": [
                    1121,
                    1123,
                    1128,
                    1131,
                    1133,
                    1115,
                    1119
                ],
                "left.values": [
                    1115,
                    7395
                ],
                "rvals": [
                    1120,
                    1121,
                    1123,
                    1128,
                    1131,
                    1132,
                    1133,
                    1116
                ],
                "right.values": [
                    7395,
                    1116
                ],
                "np.asarray": [
                    1120,
                    3499
                ],
                "lvals.shape": [
                    1121,
                    1123
                ],
                "rvals.shape": [
                    1121,
                    1123
                ],
                "self._constructor": [
                    5124,
                    4743,
                    7953,
                    7574,
                    2840,
                    7961,
                    7322,
                    2724,
                    6313,
                    7212,
                    3629,
                    5295,
                    8002,
                    4809,
                    7117,
                    8036,
                    1127,
                    1135,
                    2932
                ],
                "np.dot": [
                    1128,
                    1131,
                    1133
                ],
                "left.index": [
                    1128,
                    1137,
                    1131,
                    1135
                ],
                "other.columns": [
                    1128,
                    6786,
                    5247
                ],
                "result": [
                    5124,
                    2605,
                    2611,
                    2612,
                    7735,
                    7736,
                    2626,
                    2629,
                    2631,
                    7773,
                    7774,
                    1133,
                    1134,
                    1135,
                    1137,
                    5249,
                    5263,
                    2720,
                    2721,
                    2724,
                    2727,
                    5292,
                    5295,
                    2735,
                    2736,
                    2740,
                    2741,
                    2742,
                    2743,
                    2746,
                    2747,
                    1289,
                    1290,
                    6413,
                    6415,
                    6418,
                    6420,
                    7956,
                    7960,
                    7961,
                    6426,
                    6427,
                    6428,
                    7963,
                    7966,
                    7968,
                    7507,
                    7512,
                    7517,
                    7519,
                    7556,
                    7560,
                    7562,
                    6032,
                    6033,
                    6034,
                    6035,
                    6037,
                    5034,
                    2478,
                    5038,
                    5040,
                    5041,
                    7599,
                    2483,
                    2484,
                    7605,
                    2486,
                    5063,
                    7624,
                    7625,
                    5066,
                    7626,
                    5068,
                    5069,
                    7627,
                    7632,
                    3545,
                    7642,
                    3547,
                    7644,
                    3549,
                    3551,
                    3552,
                    7647,
                    3554,
                    4578,
                    7648,
                    4581,
                    7649,
                    4583,
                    7654,
                    7657,
                    7658
                ],
                "result.ndim": [
                    7960,
                    7625,
                    1134
                ],
                "type": [
                    2306,
                    4360,
                    4110,
                    3055,
                    1139,
                    8125,
                    2302,
                    1823
                ],
                "self.dot": [
                    1145
                ],
                "T": [
                    6437,
                    3470,
                    7184,
                    5109,
                    2583,
                    3452,
                    1151
                ],
                "self.T.dot": [
                    1151
                ],
                "self.T": [
                    6426,
                    6437,
                    1151
                ],
                "np.transpose": [
                    1151
                ],
                "orient": [
                    1409,
                    1221,
                    1222,
                    1419,
                    1229,
                    1389,
                    1391,
                    1393,
                    1427,
                    1407
                ],
                "orient.lower": [
                    1409,
                    1221,
                    1419,
                    1389,
                    1391,
                    1393,
                    1407
                ],
                "data.values": [
                    7632,
                    1225,
                    1228,
                    7638
                ],
                "_from_nested_dict": [
                    1226
                ],
                "data.keys": [
                    1228
                ],
                "cls": [
                    1666,
                    1835,
                    1581,
                    1586,
                    1235
                ],
                "classmethod": [
                    1832,
                    1537,
                    1156
                ],
                "warnings.warn": [
                    2697,
                    1382
                ],
                "warnings": [
                    2697,
                    1382
                ],
                "UserWarning": [
                    1384,
                    2699
                ],
                "into_c": [
                    1408,
                    1416,
                    1388,
                    1390,
                    1422,
                    1392,
                    1394
                ],
                "com.standardize_mapping": [
                    1388
                ],
                "com": [
                    1408,
                    2656,
                    3394,
                    2789,
                    1416,
                    2635,
                    1388,
                    3468,
                    2767,
                    1401,
                    2812
                ],
                "into": [
                    1388,
                    1390
                ],
                "startswith": [
                    1409,
                    1419,
                    1389,
                    1391,
                    1393,
                    1407
                ],
                "v.to_dict": [
                    1390
                ],
                "v.tolist": [
                    1392
                ],
                "self.index.tolist": [
                    1396
                ],
                "self.columns.tolist": [
                    1410,
                    1397
                ],
                "com.maybe_box_datetimelike": [
                    1408,
                    1401,
                    1416,
                    2767
                ],
                "t": [
                    1424,
                    1401,
                    1402,
                    1423
                ],
                "self.itertuples": [
                    1424,
                    1402,
                    1413
                ],
                "rows": [
                    1417,
                    1411
                ],
                "row": [
                    1416,
                    1417,
                    1412,
                    1413
                ],
                "row.items": [
                    1416
                ],
                "self.index.is_unique": [
                    1420
                ],
                "gbq.to_gbq": [
                    1523
                ],
                "gbq": [
                    1523
                ],
                "destination_table": [
                    1525
                ],
                "project_id": [
                    1526
                ],
                "chunksize": [
                    1527
                ],
                "reauth": [
                    1528
                ],
                "if_exists": [
                    1529
                ],
                "auth_local_webserver": [
                    1530
                ],
                "table_schema": [
                    1531
                ],
                "location": [
                    1532
                ],
                "progress_bar": [
                    1533
                ],
                "credentials": [
                    1534
                ],
                "is_iterator": [
                    1579,
                    2670
                ],
                "nrows": [
                    1594,
                    1580,
                    1597
                ],
                "first_row": [
                    1584,
                    1592,
                    1589,
                    1590
                ],
                "next": [
                    1584
                ],
                "StopIteration": [
                    1585
                ],
                "first_row.dtype.names": [
                    1589
                ],
                "first_row.dtype": [
                    1589,
                    1590
                ],
                "values.extend": [
                    1597
                ],
                "itertools.islice": [
                    1597
                ],
                "itertools": [
                    1597,
                    1774
                ],
                "arr_columns": [
                    1664,
                    1606,
                    1610,
                    1613,
                    1616,
                    1648,
                    1622,
                    1658,
                    1624,
                    1657,
                    1626,
                    1661,
                    1630
                ],
                "sorted": [
                    2373,
                    1606
                ],
                "data.items": [
                    1611,
                    8158
                ],
                "arr_columns.append": [
                    1613
                ],
                "reorder_arrays": [
                    1616
                ],
                "coerce_float": [
                    1624
                ],
                "exclude": [
                    1632,
                    1633,
                    3297,
                    1635,
                    3257,
                    3267,
                    3268,
                    3299,
                    3272,
                    1641,
                    3273,
                    1654,
                    1656,
                    1657,
                    3258,
                    3260,
                    1662
                ],
                "result_index": [
                    1664,
                    1637,
                    1643,
                    1645,
                    7409,
                    7410,
                    1651,
                    1653
                ],
                "columns.get_loc": [
                    1640
                ],
                "exclude.add": [
                    1641
                ],
                "index_data": [
                    1648,
                    1653
                ],
                "arr_columns.get_loc": [
                    1648,
                    1658
                ],
                "field": [
                    1648
                ],
                "KeyError": [
                    4686,
                    1649,
                    2898,
                    4561,
                    4116,
                    3541,
                    2774,
                    3543,
                    7095
                ],
                "ensure_index_from_sequences": [
                    4164,
                    1653
                ],
                "exclude.update": [
                    1654
                ],
                "any": [
                    5510,
                    3540,
                    3542,
                    1656,
                    3262
                ],
                "arr_exclude": [
                    1657,
                    1658,
                    1661
                ],
                "x": [
                    7392,
                    3266,
                    3267,
                    7366,
                    7577,
                    5357,
                    6649,
                    4720,
                    5361,
                    2356,
                    2358,
                    1657,
                    6650,
                    6651
                ],
                "to_remove": [
                    4154,
                    4133,
                    4171,
                    1658,
                    1659
                ],
                "col": [
                    4097,
                    5250,
                    4099,
                    5251,
                    5252,
                    4103,
                    4108,
                    4110,
                    5263,
                    4113,
                    5522,
                    5272,
                    2339,
                    2341,
                    4134,
                    4135,
                    4136,
                    4137,
                    4138,
                    4139,
                    2348,
                    4141,
                    4142,
                    2479,
                    4143,
                    4144,
                    4146,
                    4147,
                    5292,
                    7092,
                    7094,
                    4151,
                    4152,
                    4154,
                    2891,
                    2766,
                    2894,
                    4688,
                    2769,
                    8107,
                    2902,
                    2904,
                    2905,
                    8108,
                    8159,
                    2784,
                    8160,
                    2786,
                    8161,
                    1658,
                    5500,
                    5501,
                    5502
                ],
                "arr_columns.drop": [
                    1661
                ],
                "columns.drop": [
                    1662
                ],
                "ABCMultiIndex": [
                    4384,
                    5060,
                    3494,
                    1766,
                    4135,
                    4775,
                    7530,
                    4395,
                    3445,
                    1755,
                    2685,
                    4127
                ],
                "ix_vals": [
                    1761,
                    1757,
                    1759
                ],
                "self.index.values": [
                    1757,
                    1759
                ],
                "_internal_get_values": [
                    1776,
                    1761
                ],
                "c": [
                    7200,
                    1761,
                    7202,
                    7203,
                    7204,
                    7395,
                    4171,
                    4172,
                    7196,
                    2479,
                    1776,
                    1777,
                    3548,
                    3549,
                    7198
                ],
                "count": [
                    1763,
                    2343,
                    1769,
                    1770,
                    2345,
                    2348,
                    4564,
                    4567,
                    4569,
                    4571
                ],
                "self.index.names": [
                    4387,
                    1764,
                    4126
                ],
                "n": [
                    4386,
                    4387,
                    1767,
                    1768,
                    4136,
                    4137,
                    3531,
                    3532,
                    3536,
                    4918,
                    5018,
                    3547
                ],
                "names": [
                    4385,
                    4164,
                    1830,
                    4392,
                    4138,
                    1774,
                    4142,
                    4399,
                    1777,
                    4145,
                    4148,
                    4152,
                    4124,
                    4126
                ],
                "itertools.chain": [
                    1774
                ],
                "index_len": [
                    1826,
                    1795,
                    1780,
                    1799
                ],
                "formats": [
                    1824,
                    1830,
                    1781,
                    1822
                ],
                "dtype_mapping": [
                    1824,
                    1827,
                    1796,
                    1800,
                    1808,
                    1809,
                    1810,
                    1811,
                    1812,
                    1814,
                    1821,
                    1823
                ],
                "index_dtypes": [
                    1796
                ],
                "column_dtypes": [
                    1800
                ],
                "is_dict_like": [
                    1808
                ],
                "formats.append": [
                    1824,
                    1822
                ],
                "v.dtype": [
                    1822
                ],
                "np.dtype": [
                    1823
                ],
                "element": [
                    1826,
                    1827
                ],
                "msg": [
                    1827,
                    1828,
                    7589,
                    7593,
                    3055,
                    3056
                ],
                "np.rec.fromarrays": [
                    1830
                ],
                "np.rec": [
                    1830
                ],
                "kwargs": [
                    1928,
                    2057,
                    6415,
                    1938,
                    6419,
                    2581,
                    6426,
                    1949,
                    6429,
                    6437,
                    6438,
                    7103,
                    3393,
                    3164,
                    3165,
                    3678,
                    3679,
                    3681,
                    3170,
                    3171,
                    3172,
                    3173,
                    3682,
                    3683,
                    3940,
                    3941,
                    3943,
                    3944,
                    3945,
                    3057,
                    3058,
                    3059,
                    3966
                ],
                "version": [
                    1929,
                    1931
                ],
                "convert_strl": [
                    1938,
                    1932
                ],
                "writer": [
                    1940,
                    1951
                ],
                "statawriter": [
                    1940
                ],
                "path": [
                    2052,
                    1941,
                    1965
                ],
                "convert_dates": [
                    1943
                ],
                "byteorder": [
                    1944
                ],
                "time_stamp": [
                    1945
                ],
                "data_label": [
                    1946
                ],
                "write_index": [
                    1947
                ],
                "variable_labels": [
                    1948
                ],
                "writer.write_file": [
                    1951
                ],
                "deprecate_kwarg": [
                    1953,
                    1837,
                    1967
                ],
                "to_feather": [
                    1965
                ],
                "to_parquet": [
                    2050
                ],
                "engine": [
                    2053,
                    2895,
                    2896,
                    2770,
                    2773
                ],
                "compression": [
                    2054
                ],
                "partition_cols": [
                    2056
                ],
                "fmt._VALID_JUSTIFY_PARAMETERS": [
                    2129
                ],
                "bold_rows": [
                    2144
                ],
                "escape": [
                    2145
                ],
                "table_id": [
                    2150
                ],
                "render_links": [
                    2151
                ],
                "classes": [
                    2156
                ],
                "notebook": [
                    2157
                ],
                "border": [
                    2158
                ],
                "sys.stdout": [
                    2298
                ],
                "sys": [
                    2298
                ],
                "lines": [
                    2306,
                    2307,
                    2374,
                    2347,
                    2352,
                    2325,
                    2391,
                    2392,
                    2300,
                    2302,
                    2303
                ],
                "lines.append": [
                    2306,
                    2374,
                    2347,
                    2352,
                    2325,
                    2391,
                    2302,
                    2303
                ],
                "self.index._summary": [
                    2303
                ],
                "__name__": [
                    2306,
                    8125
                ],
                "fmt.buffer_put_lines": [
                    2392,
                    2307
                ],
                "cols": [
                    7173,
                    2310,
                    7174,
                    7322,
                    7212,
                    7308,
                    7309,
                    7951,
                    7953,
                    7186,
                    7954,
                    7318,
                    3448,
                    3449,
                    3450,
                    2332,
                    2334
                ],
                "null_counts": [
                    2321,
                    2318
                ],
                "show_counts": [
                    2344,
                    2321,
                    2330,
                    2319
                ],
                "exceeds_info_cols": [
                    2322,
                    2367
                ],
                "space": [
                    2348,
                    2326,
                    8166
                ],
                "pprint_thing": [
                    2341,
                    2326
                ],
                "counts": [
                    7554,
                    2372,
                    2373,
                    7556,
                    7516,
                    2345,
                    2388,
                    2327,
                    2331,
                    2332,
                    7517,
                    2334
                ],
                "tmpl": [
                    2336,
                    2329,
                    2348
                ],
                "self.count": [
                    2331
                ],
                "AssertionError": [
                    8000,
                    8034,
                    2333
                ],
                "dtypes": [
                    2338,
                    3268,
                    2340,
                    2373,
                    2374,
                    3269
                ],
                "self.dtypes": [
                    2338,
                    3301,
                    7654,
                    3289,
                    3295
                ],
                "dtypes.iloc": [
                    2340
                ],
                "counts.iloc": [
                    2345
                ],
                "_put_str": [
                    2348
                ],
                "tmpl.format": [
                    2348
                ],
                "self.columns._summary": [
                    2352
                ],
                "num": [
                    2357,
                    2358,
                    2359,
                    2360,
                    7387,
                    7384
                ],
                "size_qualifier": [
                    2380,
                    2389,
                    2358,
                    2391,
                    2360
                ],
                "verbose": [
                    2362,
                    2364
                ],
                "_verbose_repr": [
                    2370,
                    2363
                ],
                "_non_verbose_repr": [
                    2368,
                    2365
                ],
                "self._data.get_dtype_counts": [
                    2372
                ],
                "counts.items": [
                    2373
                ],
                "join": [
                    6033,
                    5490,
                    3653,
                    2374
                ],
                "memory_usage": [
                    2376,
                    2377,
                    2378,
                    2381
                ],
                "deep": [
                    2382,
                    2479,
                    2387,
                    2483,
                    2390
                ],
                "self.index._is_memory_usage_qualified": [
                    2388
                ],
                "mem_usage": [
                    2390,
                    2391
                ],
                "sum": [
                    7384,
                    7515,
                    7512,
                    2390
                ],
                "self.memory_usage": [
                    2390
                ],
                "_sizeof_fmt": [
                    2391
                ],
                "c.memory_usage": [
                    2479
                ],
                "append": [
                    2483,
                    4125,
                    6771
                ],
                "self.index.memory_usage": [
                    2483
                ],
                "nv.validate_transpose": [
                    2580
                ],
                "nv": [
                    2580,
                    7103
                ],
                "args": [
                    3940,
                    6437,
                    6438,
                    6415,
                    6419,
                    2580,
                    6584,
                    6426,
                    6429,
                    3678,
                    7103
                ],
                "transpose": [
                    2581,
                    2583
                ],
                "super": [
                    3683,
                    3651,
                    6438,
                    3817,
                    3945,
                    3979,
                    4430,
                    4434,
                    2581,
                    3990,
                    3959,
                    4438,
                    4442,
                    6429
                ],
                "axis": [
                    4737,
                    7558,
                    7943,
                    7944,
                    6411,
                    6415,
                    7567,
                    7698,
                    6419,
                    7572,
                    7573,
                    3991,
                    6423,
                    7577,
                    4763,
                    4764,
                    7585,
                    6435,
                    6436,
                    6311,
                    2600,
                    5036,
                    5037,
                    7601,
                    7732,
                    6581,
                    7733,
                    7734,
                    7736,
                    7610,
                    7994,
                    7995,
                    7997,
                    8000,
                    7543,
                    4800,
                    7872,
                    7362,
                    5059,
                    4548,
                    5060,
                    3654,
                    7366,
                    4552,
                    4553,
                    5065,
                    7371,
                    7496,
                    7498,
                    7633,
                    7506,
                    7507,
                    7639,
                    7512,
                    7770,
                    7515,
                    7771,
                    7517,
                    7772,
                    7774,
                    8028,
                    8029,
                    4578,
                    8031,
                    8034,
                    4709,
                    7653,
                    7527,
                    7528,
                    3819,
                    7532,
                    4720,
                    7408,
                    4727,
                    3962
                ],
                "new_values": [
                    2723,
                    2725,
                    2601,
                    3626,
                    2604,
                    3629,
                    2606,
                    2609
                ],
                "self._data.fast_xs": [
                    2601
                ],
                "new_values.base": [
                    2604
                ],
                "new_values.dtype": [
                    2609
                ],
                "result._set_is_copy": [
                    2746,
                    2611
                ],
                "label": [
                    2616,
                    2626,
                    2629
                ],
                "self._data.iget": [
                    3504,
                    2622
                ],
                "np.nan": [
                    2625,
                    2926,
                    4367,
                    7315,
                    7413,
                    7735,
                    3672,
                    7196,
                    7773,
                    3582,
                    4351
                ],
                "object": [
                    2625,
                    6651,
                    6771
                ],
                "self._box_col_values": [
                    2626,
                    2934
                ],
                "result._set_as_cached": [
                    2629
                ],
                "key": [
                    2817,
                    2818,
                    2823,
                    2696,
                    2825,
                    2829,
                    2702,
                    2704,
                    2709,
                    2710,
                    2837,
                    2838,
                    2840,
                    2842,
                    2715,
                    2718,
                    2849,
                    3493,
                    3495,
                    2863,
                    2864,
                    2743,
                    2749,
                    3448,
                    6341,
                    2634,
                    2635,
                    2637,
                    2639,
                    2641,
                    2642,
                    2645,
                    2652,
                    2653,
                    2656,
                    2657,
                    2661,
                    2789,
                    2792,
                    2665,
                    2666,
                    2670,
                    2671,
                    2672,
                    2798,
                    2799,
                    2800,
                    2801,
                    2804,
                    2930,
                    3445,
                    2808,
                    3446,
                    2812,
                    2813,
                    2686,
                    2815
                ],
                "lib.item_from_zerodim": [
                    2634
                ],
                "lib": [
                    3552,
                    7554,
                    2634,
                    4341,
                    6650,
                    6651
                ],
                "com.apply_if_callable": [
                    3394,
                    2635,
                    2789
                ],
                "is_hashable": [
                    2637
                ],
                "self.columns.nlevels": [
                    2640,
                    4403,
                    2664,
                    4412
                ],
                "self._getitem_multilevel": [
                    2665,
                    2641
                ],
                "indexer": [
                    4737,
                    2818,
                    3586,
                    2820,
                    3590,
                    2828,
                    2832,
                    2710,
                    2711,
                    3606,
                    3610,
                    4771,
                    3625,
                    4778,
                    3627,
                    4796,
                    4801,
                    2645,
                    2646,
                    2649,
                    2792,
                    2793,
                    2666,
                    2667,
                    2668,
                    2796,
                    2672,
                    4721,
                    4722,
                    2675,
                    2676,
                    2678,
                    4732
                ],
                "convert_to_index_sliceable": [
                    2792,
                    2645
                ],
                "self._slice": [
                    2649
                ],
                "self.where": [
                    2653
                ],
                "com.is_bool_indexer": [
                    2656,
                    2812
                ],
                "self._getitem_bool_array": [
                    2657
                ],
                "is_single_key": [
                    2680,
                    2661,
                    2663
                ],
                "tuple": [
                    4673,
                    3172,
                    2661,
                    4548,
                    6791,
                    6024,
                    5962,
                    2737,
                    4401,
                    3285,
                    4376,
                    4729,
                    4414
                ],
                "self.columns.get_loc": [
                    2784,
                    2666,
                    2930,
                    3446,
                    2715
                ],
                "is_integer": [
                    2667,
                    7110
                ],
                "self.loc._get_listlike_indexer": [
                    2672,
                    2828
                ],
                "self.loc": [
                    4578,
                    2820,
                    2828,
                    2672,
                    2832,
                    2904,
                    3062,
                    2808
                ],
                "np.where": [
                    2676
                ],
                "self.take": [
                    4562,
                    2678,
                    2711
                ],
                "data.shape": [
                    2685
                ],
                "key.index.equals": [
                    2696
                ],
                "key.index": [
                    2696
                ],
                "check_bool_indexer": [
                    2817,
                    2709
                ],
                "key.nonzero": [
                    2818,
                    2710
                ],
                "loc": [
                    2723,
                    3323,
                    3446,
                    3447,
                    3448,
                    2715,
                    2716,
                    2717
                ],
                "slice": [
                    2832,
                    2716,
                    3447
                ],
                "new_columns": [
                    2720,
                    5250,
                    3622,
                    3629,
                    5295,
                    3632,
                    3606,
                    3607,
                    3610,
                    2717,
                    2718,
                    5247
                ],
                "result_columns": [
                    2721,
                    2725,
                    2718
                ],
                "maybe_droplevels": [
                    3448,
                    2718
                ],
                "self._is_mixed_type": [
                    3536,
                    2719
                ],
                "result.columns": [
                    2721,
                    5068,
                    2735,
                    2736,
                    5040
                ],
                "result.__finalize__": [
                    2727
                ],
                "top": [
                    2736,
                    2737,
                    2738,
                    2739
                ],
                "takeable": [
                    2890,
                    2901,
                    2765
                ],
                "series": [
                    5251,
                    5285,
                    5254,
                    5257,
                    5289,
                    2891,
                    2892,
                    2766,
                    2767,
                    2894,
                    2769,
                    2896,
                    5267,
                    2773,
                    5269,
                    5277
                ],
                "self._iget_item_cache": [
                    2891,
                    2766
                ],
                "series._values": [
                    2896,
                    2773,
                    2767
                ],
                "self.index._engine": [
                    2770,
                    2895
                ],
                "engine.get_value": [
                    2773
                ],
                "self.index.nlevels": [
                    2776,
                    4128,
                    4379
                ],
                "self.index.get_loc": [
                    2785
                ],
                "self._get_value": [
                    2786,
                    3549
                ],
                "self._setitem_slice": [
                    2796
                ],
                "self._setitem_frame": [
                    2799
                ],
                "self._setitem_array": [
                    2801
                ],
                "self._set_item": [
                    2804
                ],
                "self._check_setitem_copy": [
                    2848,
                    2819,
                    2831,
                    2870,
                    2807
                ],
                "self.loc._setitem_with_indexer": [
                    2832,
                    2820
                ],
                "value.columns": [
                    2825,
                    3449,
                    2823
                ],
                "k1": [
                    2825,
                    2826
                ],
                "k2": [
                    2825,
                    2826
                ],
                "key.shape": [
                    2838
                ],
                "self.shape": [
                    8128,
                    3277,
                    2838
                ],
                "self._construct_axes_dict": [
                    2840
                ],
                "key.values.size": [
                    2842
                ],
                "key.values": [
                    2842
                ],
                "is_bool_dtype": [
                    2842
                ],
                "self._check_inplace_setting": [
                    2847
                ],
                "self._where": [
                    2849
                ],
                "self._ensure_valid_index": [
                    3321,
                    2862
                ],
                "self._sanitize_column": [
                    3322,
                    2863
                ],
                "NDFrame._set_item": [
                    2864
                ],
                "series._set_value": [
                    2892
                ],
                "engine.set_value": [
                    2896
                ],
                "self._item_cache.pop": [
                    2905
                ],
                "self._item_cache": [
                    2905
                ],
                "self._data.reindex_axis": [
                    2925
                ],
                "value.index.copy": [
                    2926
                ],
                "value.index": [
                    3420,
                    3429,
                    2926
                ],
                "items": [
                    2930,
                    2932,
                    2941,
                    2934
                ],
                "values.ndim": [
                    2931
                ],
                "values.T": [
                    2932
                ],
                "inplace": [
                    4740,
                    4618,
                    4621,
                    3982,
                    4118,
                    4761,
                    4791,
                    4547,
                    4420,
                    4806,
                    4179,
                    3163,
                    4580,
                    3173,
                    4708,
                    4331,
                    4332,
                    3053,
                    3823,
                    4086,
                    3963,
                    3068
                ],
                "validate_bool_kwarg": [
                    4547,
                    4708,
                    4618,
                    4331,
                    3053,
                    4086,
                    4761,
                    3163
                ],
                "expr": [
                    3059,
                    3173,
                    3054,
                    3055
                ],
                "kwargs.pop": [
                    3681,
                    3682,
                    3943,
                    3944,
                    3057,
                    3164,
                    3165
                ],
                "res": [
                    6959,
                    6962,
                    3059,
                    3062,
                    3066
                ],
                "self.eval": [
                    3059
                ],
                "new_data": [
                    4736,
                    4741,
                    4743,
                    4623,
                    4624,
                    6312,
                    6313,
                    7990,
                    7992,
                    7996,
                    7998,
                    4801,
                    8002,
                    4804,
                    4807,
                    4809,
                    8024,
                    8026,
                    8157,
                    8030,
                    8032,
                    8160,
                    8161,
                    8162,
                    8036,
                    5093,
                    5097,
                    5098,
                    5105,
                    5109,
                    3062,
                    5110,
                    3066,
                    3069,
                    3071
                ],
                "self._update_inplace": [
                    4581,
                    4741,
                    4807,
                    4624,
                    3069
                ],
                "resolvers": [
                    3172,
                    3169,
                    3164,
                    3166
                ],
                "index_resolvers": [
                    3169,
                    3167
                ],
                "self._get_index_resolvers": [
                    3167
                ],
                "column_resolvers": [
                    3168,
                    3169
                ],
                "self._get_space_character_free_column_resolvers": [
                    3168
                ],
                "kwargs.get": [
                    3172
                ],
                "_eval": [
                    3173
                ],
                "include": [
                    3266,
                    3268,
                    3272,
                    3273,
                    3255,
                    3256,
                    3291,
                    3260,
                    3293
                ],
                "selection": [
                    3260,
                    3262
                ],
                "infer_dtype_from_object": [
                    3266,
                    3267
                ],
                "invalidate_string_dtypes": [
                    3269
                ],
                "include.isdisjoint": [
                    3272
                ],
                "keep_these": [
                    3301,
                    3303,
                    3277,
                    3295
                ],
                "np.full": [
                    3277
                ],
                "extracted_dtypes": [
                    3282,
                    3287
                ],
                "unique_dtype": [
                    3283,
                    3284,
                    3285
                ],
                "unique_dtypes": [
                    3289,
                    3299,
                    3284,
                    3293
                ],
                "issubclass": [
                    4369,
                    4363,
                    3285
                ],
                "unique_dtype.type": [
                    3285
                ],
                "dtypes_set": [
                    3285
                ],
                "self.dtypes.unique": [
                    3289
                ],
                "included_dtypes": [
                    3292,
                    3295
                ],
                "extract_unique_dtypes_from_dtypes_set": [
                    3298,
                    3292
                ],
                "self.dtypes.isin": [
                    3301,
                    3295
                ],
                "excluded_dtypes": [
                    3298,
                    3301
                ],
                "keep_these.values": [
                    3303
                ],
                "column": [
                    6024,
                    6032,
                    6033,
                    3322,
                    3323
                ],
                "self._data.insert": [
                    3323
                ],
                "allow_duplicates": [
                    3323
                ],
                "self.copy": [
                    5241,
                    5063,
                    4616,
                    5034,
                    4335,
                    4121,
                    4794,
                    3391
                ],
                "kwargs.items": [
                    3393
                ],
                "value.index.equals": [
                    3420
                ],
                "value._values.copy": [
                    3421
                ],
                "value._values": [
                    3421
                ],
                "_values": [
                    3426,
                    5501,
                    5502,
                    4151
                ],
                "value.reindex": [
                    3426,
                    3450
                ],
                "value.index.is_unique": [
                    3429
                ],
                "err": [
                    3431
                ],
                "reindexer": [
                    3440,
                    3452
                ],
                "cols.equals": [
                    3449
                ],
                "value.copy": [
                    3472,
                    3457,
                    3474,
                    3470
                ],
                "sanitize_index": [
                    3458,
                    3463
                ],
                "is_sequence": [
                    4713,
                    3460
                ],
                "maybe_convert_platform": [
                    3466
                ],
                "com.asarray_tuplesafe": [
                    3468
                ],
                "value.ndim": [
                    3469,
                    3493
                ],
                "is_object_dtype": [
                    7601,
                    7644,
                    3477,
                    3551
                ],
                "value.dtype": [
                    3477
                ],
                "maybe_infer_to_datetimelike": [
                    3478
                ],
                "infer_dtype": [
                    3482,
                    3486
                ],
                "infer_dtype_from_scalar": [
                    3482
                ],
                "maybe_cast_to_datetime": [
                    3486
                ],
                "is_extension_array_dtype": [
                    3489,
                    5350
                ],
                "broadcast": [
                    3493
                ],
                "existing_piece": [
                    3496,
                    3497,
                    3495
                ],
                "np.tile": [
                    3497
                ],
                "existing_piece.columns": [
                    3497
                ],
                "np.atleast_2d": [
                    3499
                ],
                "item": [
                    3504,
                    3505
                ],
                "idx": [
                    7174,
                    7212,
                    7309,
                    3504,
                    3505,
                    7322
                ],
                "row_labels": [
                    3538,
                    3531,
                    3548
                ],
                "col_labels": [
                    3548,
                    3539,
                    3532
                ],
                "thresh": [
                    3536,
                    4567,
                    4566,
                    3535
                ],
                "ridx": [
                    3544,
                    3538,
                    3540
                ],
                "self.index.get_indexer": [
                    3538
                ],
                "cidx": [
                    3544,
                    3539,
                    3542
                ],
                "self.columns.get_indexer": [
                    6786,
                    3539
                ],
                "flat_index": [
                    3544,
                    3545
                ],
                "values.flat": [
                    3545
                ],
                "np.empty": [
                    7187,
                    7314,
                    3547,
                    4350
                ],
                "r": [
                    3548,
                    3549
                ],
                "lib.maybe_convert_objects": [
                    3552,
                    4341
                ],
                "frame": [
                    4119,
                    4121,
                    4151,
                    6970,
                    6972,
                    4172,
                    7501,
                    7503,
                    4177,
                    7506,
                    7507,
                    4180,
                    7509,
                    7512,
                    7515,
                    7517,
                    7523,
                    7525,
                    7527,
                    3560,
                    7528,
                    3564,
                    7535,
                    3570,
                    7538,
                    7541,
                    3574
                ],
                "axes": [
                    3940,
                    3621,
                    3622,
                    3941,
                    3562,
                    3568,
                    3678,
                    3679
                ],
                "frame._reindex_columns": [
                    3564
                ],
                "method": [
                    7392,
                    3587,
                    7366,
                    7400,
                    7177,
                    3658,
                    7179,
                    7209,
                    3565,
                    7181,
                    7375,
                    3985,
                    7185,
                    3571,
                    3607,
                    3961,
                    7389
                ],
                "level": [
                    7552,
                    7553,
                    3587,
                    3607,
                    4376,
                    4377,
                    4378,
                    4379,
                    4380,
                    4375,
                    4769,
                    4772,
                    4397,
                    3655,
                    7497,
                    5962,
                    5963,
                    7498,
                    5965,
                    5075,
                    6100,
                    3565,
                    3822,
                    3571,
                    7548,
                    7549,
                    7551
                ],
                "limit": [
                    3587,
                    3659,
                    3565,
                    3983,
                    3571,
                    3607,
                    3964
                ],
                "tolerance": [
                    3587,
                    3571,
                    3565,
                    3607
                ],
                "frame._reindex_index": [
                    3570
                ],
                "new_index": [
                    3586,
                    3587,
                    4419,
                    3621,
                    3590,
                    3629,
                    5295,
                    3632,
                    4374,
                    5238,
                    5240,
                    4380
                ],
                "self.index.reindex": [
                    3586,
                    3621
                ],
                "self._reindex_with_indexers": [
                    3609,
                    3589,
                    3631
                ],
                "self.columns.reindex": [
                    3622,
                    3606
                ],
                "row_indexer": [
                    3624,
                    3625,
                    3632,
                    3621
                ],
                "col_indexer": [
                    3624,
                    3625,
                    3632,
                    3622
                ],
                "algorithms.take_2d_multi": [
                    3626
                ],
                "algorithms": [
                    8128,
                    3626,
                    4918,
                    4663,
                    5017
                ],
                "align": [
                    3651
                ],
                "fill_axis": [
                    3660
                ],
                "broadcast_axis": [
                    3661
                ],
                "validate_axis_style_args": [
                    3940,
                    3678
                ],
                "kwargs.update": [
                    3941,
                    3679
                ],
                "reindex": [
                    3683
                ],
                "NDFrame.reindex.__doc__": [
                    3665
                ],
                "NDFrame.reindex": [
                    3665
                ],
                "rewrite_axis_style_signature": [
                    3666,
                    3827
                ],
                "drop": [
                    3817,
                    7405,
                    4382,
                    4153
                ],
                "labels": [
                    4353,
                    7568,
                    7573,
                    4764,
                    4768,
                    4771,
                    4775,
                    4779,
                    4788,
                    4789,
                    4663,
                    4666,
                    4797,
                    4689,
                    7633,
                    4691,
                    7639,
                    7657,
                    3818,
                    4344,
                    4345
                ],
                "errors": [
                    3824,
                    5507,
                    5492
                ],
                "rename": [
                    3945
                ],
                "fillna": [
                    3959
                ],
                "downcast": [
                    3965
                ],
                "NDFrame.fillna.__doc__": [
                    3948
                ],
                "NDFrame.fillna": [
                    3948
                ],
                "to_replace": [
                    3980
                ],
                "regex": [
                    3984
                ],
                "shift": [
                    3990
                ],
                "periods": [
                    6312,
                    3991
                ],
                "freq": [
                    8032,
                    7998,
                    3991,
                    7996,
                    8030
                ],
                "keys": [
                    4097,
                    4134,
                    4720,
                    4721,
                    4087,
                    4088
                ],
                "err_msg": [
                    4104,
                    4090,
                    4110
                ],
                "missing": [
                    4096,
                    4113,
                    4115,
                    4116,
                    4412,
                    4413
                ],
                "ABCIndexClass": [
                    4139,
                    5346,
                    4099,
                    5358
                ],
                "ABCSeries": [
                    4139,
                    5346,
                    4099,
                    5358
                ],
                "abc.Iterator": [
                    4146,
                    4099
                ],
                "found": [
                    4112,
                    4108
                ],
                "missing.append": [
                    4113
                ],
                "self.index._get_level_values": [
                    4129
                ],
                "col.nlevels": [
                    4136
                ],
                "col._get_level_values": [
                    4137
                ],
                "names.extend": [
                    4138
                ],
                "col.names": [
                    4138
                ],
                "names.append": [
                    4152,
                    4145,
                    4148,
                    4142
                ],
                "col.name": [
                    4142
                ],
                "to_remove.append": [
                    4154
                ],
                "verify_integrity": [
                    6798,
                    4166
                ],
                "index.is_unique": [
                    4166
                ],
                "duplicates": [
                    4168,
                    4167
                ],
                "unique": [
                    4167
                ],
                "index.duplicated": [
                    4167
                ],
                "index._cleanup": [
                    4175
                ],
                "frame.index": [
                    4177
                ],
                "new_obj": [
                    4417,
                    4419,
                    4421,
                    4333,
                    4335,
                    4374
                ],
                "index._values": [
                    4338
                ],
                "PeriodIndex": [
                    4339
                ],
                "DatetimeIndex": [
                    4339
                ],
                "np.object_": [
                    4340
                ],
                "mask.all": [
                    4349,
                    5519
                ],
                "values.fill": [
                    4351
                ],
                "values.take": [
                    4353
                ],
                "values_type": [
                    4360,
                    4369,
                    4370,
                    4363
                ],
                "values_dtype": [
                    4361,
                    4370
                ],
                "DatetimeLikeArray": [
                    4369,
                    4363
                ],
                "values._data": [
                    4364
                ],
                "maybe_upcast_putmask": [
                    4367
                ],
                "self.index._get_level_number": [
                    4378
                ],
                "lev": [
                    4416,
                    4378,
                    4396
                ],
                "self.index.droplevel": [
                    4380
                ],
                "to_insert": [
                    4393,
                    4396,
                    4389,
                    4383
                ],
                "Any": [
                    4383
                ],
                "self.index.levels": [
                    4389
                ],
                "self.index.codes": [
                    4389
                ],
                "default": [
                    4392,
                    4391
                ],
                "self.index.name": [
                    4392,
                    6765
                ],
                "multi_col": [
                    4400,
                    4395
                ],
                "lab": [
                    4416,
                    4396
                ],
                "reversed": [
                    4396
                ],
                "col_name": [
                    4408,
                    4401,
                    4411,
                    4403
                ],
                "col_fill": [
                    4408,
                    4402,
                    4411,
                    4413
                ],
                "lev_num": [
                    4410,
                    4411
                ],
                "self.columns._get_level_number": [
                    4410
                ],
                "col_level": [
                    4410,
                    6220
                ],
                "name_lst": [
                    4411,
                    4412,
                    4413,
                    4414
                ],
                "level_values": [
                    4416,
                    4417
                ],
                "_maybe_casted_values": [
                    4416
                ],
                "new_obj.insert": [
                    4417
                ],
                "new_obj.index": [
                    4419
                ],
                "isna": [
                    5505,
                    5257,
                    5258,
                    5514,
                    5357,
                    4430
                ],
                "isnull": [
                    4434
                ],
                "notna": [
                    7648,
                    5508,
                    5509,
                    5516,
                    7312,
                    7538,
                    7541,
                    4438,
                    7512,
                    7515
                ],
                "notnull": [
                    4442
                ],
                "self._get_axis_number": [
                    7362,
                    5059,
                    6435,
                    4709,
                    7943,
                    4552,
                    7496,
                    8028,
                    6411,
                    5036,
                    7572,
                    7732,
                    7770,
                    4763,
                    7994
                ],
                "agg_axis": [
                    7556,
                    7528,
                    4553,
                    4557,
                    4562,
                    4564,
                    4569
                ],
                "agg_obj": [
                    4569,
                    4562,
                    4555,
                    4564
                ],
                "subset": [
                    4619,
                    4668,
                    4669,
                    6335,
                    4672,
                    4673,
                    4674,
                    6336,
                    4676,
                    6337,
                    6338,
                    4679,
                    6341,
                    4556,
                    4684,
                    4558,
                    4671,
                    4688,
                    4561
                ],
                "ax": [
                    4557,
                    4558
                ],
                "self._get_axis": [
                    5060,
                    4557,
                    7734,
                    4764,
                    7772
                ],
                "indices": [
                    4558,
                    4559,
                    4562,
                    7733,
                    7735,
                    7771,
                    7773
                ],
                "ax.get_indexer_for": [
                    4558
                ],
                "check": [
                    4560,
                    4561,
                    4559
                ],
                "check.any": [
                    4560
                ],
                "np.compress": [
                    4561
                ],
                "agg_obj.count": [
                    4564
                ],
                "how": [
                    6940,
                    6972,
                    7996,
                    6921,
                    6426,
                    6958,
                    6415,
                    7998,
                    6965,
                    6999,
                    4568,
                    4570,
                    6428,
                    4573,
                    4574
                ],
                "agg_obj._get_axis": [
                    4569
                ],
                "self.empty": [
                    4659,
                    5243,
                    4615
                ],
                "duplicated": [
                    4626,
                    4619,
                    4622
                ],
                "self.duplicated": [
                    4619
                ],
                "keep": [
                    5018,
                    4619,
                    4692,
                    4918
                ],
                "inds": [
                    4622,
                    4623
                ],
                "_ndarray_values.nonzero": [
                    4622
                ],
                "_ndarray_values": [
                    4622
                ],
                "self._data.take": [
                    4736,
                    4801,
                    4623
                ],
                "shape": [
                    4689,
                    4666,
                    4691,
                    4663
                ],
                "algorithms.factorize": [
                    4663
                ],
                "vals": [
                    4688,
                    4689,
                    7092,
                    7094,
                    7096,
                    4664
                ],
                "_SIZE_HINT_LIMIT": [
                    4664
                ],
                "labels.astype": [
                    4666
                ],
                "np.iterable": [
                    4671
                ],
                "cast": [
                    4679
                ],
                "diff": [
                    4684,
                    4685,
                    4686
                ],
                "difference": [
                    4684
                ],
                "diff.empty": [
                    4685
                ],
                "col.values": [
                    4688
                ],
                "f": [
                    7872,
                    7622,
                    7599,
                    7632,
                    4689,
                    7642
                ],
                "ids": [
                    4691,
                    4692
                ],
                "get_group_index": [
                    4691
                ],
                "duplicated_int64": [
                    4692
                ],
                "by": [
                    4711,
                    4712,
                    4713,
                    4715,
                    4717,
                    4720,
                    4726,
                    4727
                ],
                "ascending": [
                    4772,
                    4797,
                    4713,
                    4715,
                    4780,
                    4721,
                    4788,
                    4789,
                    4729,
                    4730,
                    4733
                ],
                "self._get_label_or_level_values": [
                    4720,
                    4727
                ],
                "lexsort_indexer": [
                    4721,
                    4778
                ],
                "na_position": [
                    4797,
                    4721,
                    4733,
                    4781
                ],
                "ensure_platform_int": [
                    4722
                ],
                "nargsort": [
                    4796,
                    4732
                ],
                "kind": [
                    4733,
                    4797
                ],
                "self._get_block_manager_axis": [
                    4800,
                    4737,
                    6311
                ],
                "__finalize__": [
                    4809,
                    4743
                ],
                "NDFrame.sort_values.__doc__": [
                    4698
                ],
                "NDFrame.sort_values": [
                    4698
                ],
                "labels._sort_levels_monotonic": [
                    4768
                ],
                "new_axis": [
                    4771
                ],
                "labels.sortlevel": [
                    4771
                ],
                "sort_remaining": [
                    4772
                ],
                "labels._get_codes_for_sorting": [
                    4779
                ],
                "labels.is_monotonic_increasing": [
                    4788
                ],
                "labels.is_monotonic_decreasing": [
                    4789
                ],
                "baxis": [
                    4800,
                    4801,
                    4804
                ],
                "new_data.axes": [
                    4804
                ],
                "_sort_levels_monotonic": [
                    4804
                ],
                "NDFrame.sort_index.__doc__": [
                    4746
                ],
                "NDFrame.sort_index": [
                    4746
                ],
                "nlargest": [
                    4918
                ],
                "algorithms.SelectNFrame": [
                    5017,
                    4918
                ],
                "nsmallest": [
                    5017
                ],
                "result.index": [
                    5066,
                    5038,
                    6034
                ],
                "result.index.swaplevel": [
                    5038
                ],
                "j": [
                    7203,
                    7204,
                    5038,
                    5040,
                    7190,
                    7191,
                    7194,
                    7197
                ],
                "result.columns.swaplevel": [
                    5040
                ],
                "result.index.reorder_levels": [
                    5066
                ],
                "order": [
                    5066,
                    5068
                ],
                "result.columns.reorder_levels": [
                    5068
                ],
                "this": [
                    5505,
                    5251,
                    5509,
                    5516,
                    5263,
                    5522,
                    7363,
                    7366,
                    7369,
                    5075,
                    5091,
                    5093,
                    5096,
                    5097,
                    5098,
                    7409,
                    5237,
                    5238,
                    5501,
                    5247
                ],
                "self.align": [
                    5075,
                    5237
                ],
                "_arith_op": [
                    5080,
                    5096,
                    5093
                ],
                "func": [
                    5089,
                    5091,
                    6437,
                    6438,
                    5097,
                    5289,
                    5103,
                    6415,
                    5105,
                    6419,
                    6580,
                    5109,
                    5080,
                    6650,
                    6651
                ],
                "ops.fill_binop": [
                    5088
                ],
                "ops": [
                    5088,
                    5091,
                    5093,
                    5103,
                    5105,
                    8151,
                    8152
                ],
                "ops.should_series_dispatch": [
                    5091,
                    5103
                ],
                "ops.dispatch_to_series": [
                    5105,
                    5093
                ],
                "np.errstate": [
                    5504,
                    7631,
                    5108,
                    5095
                ],
                "res_values": [
                    5096,
                    5097
                ],
                "this.values": [
                    5096,
                    5097
                ],
                "other.values": [
                    5096,
                    5097,
                    5109,
                    6774
                ],
                "dispatch_fill_zeros": [
                    5097
                ],
                "this._construct_result": [
                    5098
                ],
                "self.values.T": [
                    5109
                ],
                "out": [
                    5128,
                    5124,
                    5127
                ],
                "out.columns": [
                    5127
                ],
                "other_idxlen": [
                    5235,
                    5243
                ],
                "this.index": [
                    5238
                ],
                "other.empty": [
                    5240
                ],
                "other.copy": [
                    5244
                ],
                "this.columns.union": [
                    5247
                ],
                "this.columns": [
                    5247
                ],
                "do_fill": [
                    5248,
                    5266
                ],
                "otherSeries": [
                    5252,
                    5255,
                    5287,
                    5289,
                    5258,
                    5268,
                    5270
                ],
                "this_dtype": [
                    5290,
                    5283,
                    5284,
                    5254
                ],
                "series.dtype": [
                    5254
                ],
                "other_dtype": [
                    5275,
                    5283,
                    5286,
                    5255
                ],
                "otherSeries.dtype": [
                    5255
                ],
                "this_mask": [
                    5257,
                    5269
                ],
                "other_mask": [
                    5258,
                    5270,
                    5262
                ],
                "overwrite": [
                    5513,
                    5262
                ],
                "other_mask.all": [
                    5262
                ],
                "series.copy": [
                    5267
                ],
                "otherSeries.copy": [
                    5268
                ],
                "new_dtype": [
                    5283,
                    5284,
                    5285,
                    5286,
                    5287,
                    5275,
                    5277
                ],
                "series.astype": [
                    5277,
                    5285
                ],
                "find_common_type": [
                    5283
                ],
                "is_dtype_equal": [
                    5284,
                    5286
                ],
                "otherSeries.astype": [
                    5287
                ],
                "maybe_downcast_to_dtype": [
                    5290
                ],
                "arr._values": [
                    5347
                ],
                "needs_i8_conversion": [
                    5349
                ],
                "arr.dtype": [
                    5350
                ],
                "arr.asi8": [
                    5351
                ],
                "arr.view": [
                    5353
                ],
                "mask._values": [
                    5359
                ],
                "x_values": [
                    5361,
                    5369
                ],
                "extract_values": [
                    5361,
                    5362
                ],
                "y_values": [
                    5369,
                    5362,
                    5367
                ],
                "y": [
                    5362,
                    5366
                ],
                "y.name": [
                    5366
                ],
                "expressions.where": [
                    5369,
                    5522
                ],
                "expressions": [
                    5369,
                    5522
                ],
                "self.combine": [
                    5371
                ],
                "combiner": [
                    5371
                ],
                "other.reindex_like": [
                    5498
                ],
                "that": [
                    5505,
                    5508,
                    5514,
                    5522,
                    5502
                ],
                "filter_func": [
                    5505,
                    5503
                ],
                "mask_this": [
                    5508,
                    5510
                ],
                "mask_that": [
                    5509,
                    5510
                ],
                "pivot": [
                    5637
                ],
                "pivot_table": [
                    5784
                ],
                "aggfunc": [
                    5789
                ],
                "margins": [
                    5791
                ],
                "dropna": [
                    5792,
                    5963,
                    5965,
                    7698,
                    7870
                ],
                "margins_name": [
                    5793
                ],
                "observed": [
                    5794
                ],
                "stack_multiple": [
                    5963
                ],
                "stack": [
                    5965
                ],
                "is_scalar": [
                    6024
                ],
                "df": [
                    6954,
                    6029,
                    6031,
                    6032,
                    6033,
                    7092
                ],
                "self.reset_index": [
                    6029
                ],
                "explode": [
                    6032
                ],
                "df.drop": [
                    6033
                ],
                "self.index.take": [
                    6034
                ],
                "result.reindex": [
                    6035
                ],
                "unstack": [
                    6100
                ],
                "melt": [
                    6214
                ],
                "id_vars": [
                    6216
                ],
                "value_vars": [
                    6217
                ],
                "var_name": [
                    6218
                ],
                "value_name": [
                    6219
                ],
                "bm_axis": [
                    6312,
                    6311
                ],
                "self._data.diff": [
                    6312
                ],
                "ABCDataFrame": [
                    6322,
                    6323
                ],
                "subset.ndim": [
                    6337
                ],
                "_agg_summary_and_see_also_doc": [
                    6404,
                    6343
                ],
                "dedent": [
                    6367,
                    6343
                ],
                "_agg_examples_doc": [
                    6405,
                    6367
                ],
                "self._aggregate": [
                    6415
                ],
                "self.apply": [
                    7698,
                    6419,
                    6653
                ],
                "self.T._aggregate": [
                    6426
                ],
                "arg": [
                    6426,
                    6429
                ],
                "result.T": [
                    7560,
                    6427,
                    7966
                ],
                "_aggregate": [
                    6429
                ],
                "agg": [
                    6431
                ],
                "aggregate": [
                    6431
                ],
                "self.T.transform": [
                    6437
                ],
                "transform": [
                    6438
                ],
                "op": [
                    7577,
                    6578,
                    6587
                ],
                "frame_apply": [
                    6578,
                    7621
                ],
                "raw": [
                    6582
                ],
                "result_type": [
                    6583
                ],
                "kwds": [
                    6585,
                    7577
                ],
                "op.get_result": [
                    6587
                ],
                "x.empty": [
                    6649
                ],
                "lib.map_infer": [
                    6650,
                    6651
                ],
                "x.astype": [
                    6651
                ],
                "infer": [
                    6653
                ],
                "other.name": [
                    6754,
                    6760,
                    6765,
                    6931,
                    6933
                ],
                "ignore_index": [
                    6754,
                    6797
                ],
                "idx_diff": [
                    6767,
                    6769,
                    7410,
                    6771,
                    7412,
                    7413
                ],
                "other.index.difference": [
                    6767
                ],
                "combined_columns": [
                    6769,
                    6771,
                    6772,
                    6776,
                    6779,
                    6780
                ],
                "self.columns.append": [
                    6769
                ],
                "self.columns.astype": [
                    6771
                ],
                "other.values.reshape": [
                    6774
                ],
                "other._convert": [
                    6778
                ],
                "self.columns.equals": [
                    6779
                ],
                "all": [
                    7312,
                    7648,
                    6786,
                    6954
                ],
                "to_concat": [
                    6792,
                    6794,
                    6796
                ],
                "concat": [
                    8105,
                    6795,
                    7118,
                    6959,
                    6964
                ],
                "sort": [
                    6944,
                    6921,
                    6799,
                    6960,
                    6965,
                    7005
                ],
                "self._join_compat": [
                    6920
                ],
                "on": [
                    6947,
                    6921,
                    7000,
                    6939,
                    6941
                ],
                "lsuffix": [
                    6921,
                    6943
                ],
                "rsuffix": [
                    6921,
                    6943
                ],
                "merge": [
                    6936,
                    6971,
                    6996
                ],
                "frames": [
                    6952,
                    6954,
                    6960,
                    6965,
                    6968,
                    6970
                ],
                "can_concat": [
                    6954,
                    6957
                ],
                "df.index.is_unique": [
                    6954
                ],
                "df.index": [
                    6954
                ],
                "res.reindex": [
                    6962
                ],
                "joined": [
                    6968,
                    6971,
                    6972,
                    6975
                ],
                "left_on": [
                    7001
                ],
                "right_on": [
                    7002
                ],
                "left_index": [
                    7003
                ],
                "right_index": [
                    7004
                ],
                "suffixes": [
                    7006
                ],
                "indicator": [
                    7008
                ],
                "validate": [
                    7009
                ],
                "df.items": [
                    7092
                ],
                "_series_round": [
                    7112,
                    7094
                ],
                "decimals": [
                    7105,
                    7106,
                    7107,
                    7109,
                    7110,
                    7112,
                    7094,
                    7100
                ],
                "is_integer_dtype": [
                    7099
                ],
                "is_float_dtype": [
                    7099
                ],
                "s.round": [
                    7100
                ],
                "nv.validate_round": [
                    7103
                ],
                "decimals.index.is_unique": [
                    7107
                ],
                "decimals.index": [
                    7107
                ],
                "new_cols": [
                    7112,
                    7116,
                    7109,
                    7118
                ],
                "_dict_round": [
                    7109
                ],
                "numeric_df": [
                    7172,
                    7173,
                    7175,
                    7307,
                    7308,
                    7310
                ],
                "self._get_numeric_data": [
                    7363,
                    7172,
                    7523,
                    7942,
                    7307,
                    7501,
                    7867,
                    7581
                ],
                "numeric_df.columns": [
                    7308,
                    7173
                ],
                "cols.copy": [
                    7309,
                    7174
                ],
                "mat": [
                    7175,
                    7178,
                    7180,
                    7310,
                    7184,
                    7312,
                    7313,
                    7314,
                    7188,
                    7189,
                    7190,
                    7317,
                    7320
                ],
                "numeric_df.values": [
                    7310,
                    7175
                ],
                "correl": [
                    7394,
                    7203,
                    7204,
                    7178,
                    7180,
                    7212,
                    7410,
                    7187,
                    7413,
                    7415,
                    7387
                ],
                "libalgos.nancorr": [
                    7320,
                    7178
                ],
                "libalgos": [
                    7320,
                    7178,
                    7180
                ],
                "ensure_float64": [
                    7184,
                    7178,
                    7180,
                    7320
                ],
                "min_periods": [
                    7178,
                    7180,
                    7182,
                    7183,
                    7313,
                    7320,
                    7195
                ],
                "libalgos.nancorr_spearman": [
                    7180
                ],
                "callable": [
                    7389,
                    7181
                ],
                "corrf": [
                    7200,
                    7185,
                    7202
                ],
                "nanops.get_corr_func": [
                    7185
                ],
                "nanops": [
                    7392,
                    7185,
                    7771,
                    7733
                ],
                "K": [
                    7186,
                    7187
                ],
                "float": [
                    7187
                ],
                "np.isfinite": [
                    7188
                ],
                "ac": [
                    7200,
                    7202,
                    7189
                ],
                "bc": [
                    7200,
                    7202,
                    7190
                ],
                "valid": [
                    7200,
                    7194,
                    7195,
                    7199
                ],
                "valid.sum": [
                    7195
                ],
                "valid.all": [
                    7199
                ],
                "baseCov": [
                    7314,
                    7315,
                    7317,
                    7318,
                    7320,
                    7322
                ],
                "mat.shape": [
                    7314
                ],
                "baseCov.fill": [
                    7315
                ],
                "np.cov": [
                    7317
                ],
                "mat.T": [
                    7317
                ],
                "baseCov.reshape": [
                    7318
                ],
                "this.apply": [
                    7366
                ],
                "other.corr": [
                    7366
                ],
                "other._get_numeric_data": [
                    7368
                ],
                "this.align": [
                    7369
                ],
                "left.T": [
                    7372
                ],
                "right.T": [
                    7373
                ],
                "ldem": [
                    7384,
                    7381
                ],
                "left.mean": [
                    7381
                ],
                "rdem": [
                    7384,
                    7382
                ],
                "right.mean": [
                    7382
                ],
                "dom": [
                    7385,
                    7387
                ],
                "left.count": [
                    7385
                ],
                "left.std": [
                    7385
                ],
                "right.std": [
                    7385
                ],
                "nanops.nancorr": [
                    7392
                ],
                "left.values.T": [
                    7395
                ],
                "right.values.T": [
                    7395
                ],
                "left.columns": [
                    7395
                ],
                "raxis": [
                    7408,
                    7409
                ],
                "union": [
                    7409
                ],
                "this._get_axis": [
                    7409
                ],
                "other._get_axis": [
                    7409
                ],
                "result_index.difference": [
                    7410
                ],
                "correl.index": [
                    7410
                ],
                "correl.append": [
                    7413
                ],
                "self._count_level": [
                    7498
                ],
                "numeric_only": [
                    7522,
                    7942,
                    7498,
                    7596,
                    7500,
                    7635,
                    7867
                ],
                "frame._get_axis": [
                    7506,
                    7527
                ],
                "frame._get_agg_axis": [
                    7528,
                    7507,
                    7517
                ],
                "frame._is_mixed_type": [
                    7509,
                    7535
                ],
                "frame._data.any_extension_types": [
                    7509
                ],
                "frame._data": [
                    7509
                ],
                "series_counts": [
                    7515,
                    7516
                ],
                "series_counts.values": [
                    7516
                ],
                "result.astype": [
                    7649,
                    7647,
                    7519
                ],
                "count_axis": [
                    7552,
                    7553,
                    7527,
                    7530,
                    7549,
                    7551
                ],
                "self._get_axis_name": [
                    7532
                ],
                "frame.values": [
                    7541
                ],
                "mask.T": [
                    7546
                ],
                "count_axis._get_level_number": [
                    7549
                ],
                "level_name": [
                    7552,
                    7551
                ],
                "count_axis._names": [
                    7551
                ],
                "level_index": [
                    7552,
                    7554,
                    7556
                ],
                "_shallow_copy": [
                    7552
                ],
                "count_axis.levels": [
                    7552
                ],
                "level_codes": [
                    7553,
                    7554
                ],
                "ensure_int64": [
                    7553
                ],
                "count_axis.codes": [
                    7553
                ],
                "lib.count_level_2d": [
                    7554
                ],
                "filter_type": [
                    7648,
                    7646,
                    7590,
                    7567,
                    7601,
                    7610,
                    7580,
                    7582
                ],
                "constructor": [
                    7656,
                    7569,
                    7574
                ],
                "self._get_agg_axis": [
                    7736,
                    7573,
                    7774
                ],
                "skipna": [
                    7577,
                    7771,
                    7733
                ],
                "axis_matters": [
                    7583
                ],
                "self._get_bool_data": [
                    7585,
                    7587
                ],
                "np.bool_": [
                    7649,
                    7605
                ],
                "opa": [
                    7624,
                    7621
                ],
                "opa.get_result": [
                    7624
                ],
                "self.ndim": [
                    7625
                ],
                "result.iloc": [
                    7626
                ],
                "_get_data": [
                    7636,
                    7630
                ],
                "data._get_agg_axis": [
                    7633,
                    7639
                ],
                "result.dtype": [
                    7644
                ],
                "np.float64": [
                    7954,
                    7647
                ],
                "coerce_to_dtypes": [
                    7654
                ],
                "Series.nunique": [
                    7698
                ],
                "nanops.nanargmin": [
                    7733
                ],
                "nanops.nanargmax": [
                    7771
                ],
                "axis_num": [
                    7785,
                    7780,
                    7782
                ],
                "repr": [
                    7785,
                    8125
                ],
                "s.mode": [
                    7870
                ],
                "data.apply": [
                    7872
                ],
                "validate_percentile": [
                    7940
                ],
                "q": [
                    7940,
                    7952,
                    7953,
                    7954,
                    7957,
                    7963
                ],
                "is_transposed": [
                    7944,
                    7946,
                    7965,
                    7957
                ],
                "data.T": [
                    7947
                ],
                "data.columns": [
                    7949
                ],
                "self.columns.name": [
                    7951
                ],
                "data._data.quantile": [
                    7956
                ],
                "interpolation": [
                    7957
                ],
                "new_data.copy": [
                    7992,
                    8026
                ],
                "new_data.set_axis": [
                    8032,
                    8030,
                    7996,
                    7998
                ],
                "self.index.to_timestamp": [
                    7996
                ],
                "self.columns.to_timestamp": [
                    7998
                ],
                "self.index.to_period": [
                    8030
                ],
                "self.columns.to_period": [
                    8032
                ],
                "collections.defaultdict": [
                    8104
                ],
                "isin": [
                    8107
                ],
                "values.index.is_unique": [
                    8113,
                    8117
                ],
                "values.index": [
                    8113,
                    8117
                ],
                "self.eq": [
                    8115,
                    8119
                ],
                "values.reindex_like": [
                    8115,
                    8119
                ],
                "values.columns.is_unique": [
                    8117
                ],
                "values.columns": [
                    8117
                ],
                "reshape": [
                    8128
                ],
                "algorithms.isin": [
                    8128
                ],
                "self.values.ravel": [
                    8128
                ],
                "plot": [
                    8135
                ],
                "CachedAccessor": [
                    8138,
                    8135
                ],
                "pandas.plotting.PlotAccessor": [
                    8135
                ],
                "pandas.plotting": [
                    8136,
                    8137,
                    8135
                ],
                "pandas": [
                    8136,
                    8137,
                    8135
                ],
                "hist": [
                    8136
                ],
                "pandas.plotting.hist_frame": [
                    8136
                ],
                "boxplot": [
                    8137
                ],
                "pandas.plotting.boxplot_frame": [
                    8137
                ],
                "sparse": [
                    8138
                ],
                "SparseFrameAccessor": [
                    8138
                ],
                "DataFrame._setup_axes": [
                    8141
                ],
                "DataFrame._add_numeric_operations": [
                    8148
                ],
                "DataFrame._add_series_or_dataframe_operations": [
                    8149
                ],
                "ops.add_flex_arithmetic_methods": [
                    8151
                ],
                "ops.add_special_arithmetic_methods": [
                    8152
                ],
                "s.items": [
                    8159
                ],
                "new_data.get": [
                    8160
                ],
                "ljust": [
                    8166
                ]
            },
            "filtered_variables_in_file": {
                "_shared_doc_kwargs": [
                    128,
                    3969,
                    6433,
                    6407,
                    4745,
                    3947,
                    4428,
                    3664,
                    4432,
                    3988,
                    3637,
                    4436,
                    4440,
                    4697
                ],
                "_numeric_only_doc": [
                    154
                ],
                "_merge_doc": [
                    6978,
                    159
                ],
                "NDFrame": [
                    394,
                    4746,
                    3948,
                    2864,
                    3665,
                    501,
                    309,
                    4698
                ],
                "_typ": [
                    387
                ],
                "DataFrame": [
                    6784,
                    6785,
                    7556,
                    2822,
                    391,
                    6933,
                    6935,
                    417,
                    3496,
                    8116,
                    8127,
                    8141,
                    1618,
                    1108,
                    8148,
                    8149,
                    8151,
                    8152,
                    2652,
                    1126,
                    2798,
                    3442,
                    6773,
                    5495,
                    5496
                ],
                "Type": [
                    393,
                    390
                ],
                "_constructor_sliced": [
                    393
                ],
                "Series": [
                    2696,
                    393,
                    6930,
                    7698,
                    2716,
                    2478,
                    3504,
                    8112,
                    6322,
                    2483,
                    4660,
                    2741,
                    6323,
                    7736,
                    444,
                    7105,
                    7106,
                    7365,
                    1225,
                    7507,
                    1108,
                    469,
                    4692,
                    7517,
                    7774,
                    6751,
                    6753,
                    7394,
                    2917,
                    7657,
                    1130,
                    1131,
                    3439,
                    2800,
                    881,
                    1137,
                    7413,
                    3447
                ],
                "_deprecations": [
                    394
                ],
                "FrozenSet": [
                    3280,
                    394
                ],
                "NDFrame._deprecations": [
                    394
                ],
                "_accessors": [
                    395
                ],
                "Set": [
                    395
                ],
                "Optional": [
                    407,
                    408,
                    409,
                    4632,
                    4383,
                    682,
                    6322,
                    4184,
                    4188,
                    4189,
                    739,
                    740,
                    741,
                    745,
                    746,
                    747,
                    4587,
                    749,
                    750,
                    751,
                    752,
                    881,
                    4590,
                    755,
                    756,
                    757,
                    758
                ],
                "Axes": [
                    408,
                    407
                ],
                "Dtype": [
                    3280,
                    409,
                    3281
                ],
                "data": [
                    1579,
                    1584,
                    1595,
                    1597,
                    1600,
                    1602,
                    1604,
                    1606,
                    1607,
                    1611,
                    1618,
                    1619,
                    1624,
                    2678,
                    2685,
                    2686,
                    2688,
                    7867,
                    7872,
                    1223,
                    1225,
                    1226,
                    1228,
                    1235,
                    7942,
                    7947,
                    7949,
                    7956,
                    3391,
                    3394,
                    3395,
                    412,
                    413,
                    7581,
                    417,
                    418,
                    7587,
                    7585,
                    420,
                    422,
                    424,
                    425,
                    426,
                    7594,
                    430,
                    431,
                    435,
                    437,
                    438,
                    439,
                    441,
                    442,
                    444,
                    445,
                    446,
                    447,
                    450,
                    451,
                    452,
                    454,
                    457,
                    458,
                    459,
                    460,
                    461,
                    462,
                    463,
                    464,
                    7633,
                    7630,
                    7632,
                    7636,
                    469,
                    470,
                    471,
                    472,
                    7638,
                    474,
                    7639,
                    478,
                    8158,
                    483,
                    493
                ],
                "dtype": [
                    1289,
                    414,
                    415,
                    2340,
                    422,
                    425,
                    1834,
                    2348,
                    431,
                    1588,
                    1590,
                    442,
                    1599,
                    1600,
                    450,
                    452,
                    454,
                    464,
                    1235,
                    476,
                    478,
                    480,
                    483,
                    493
                ],
                "self._validate_dtype": [
                    415
                ],
                "self": [
                    2051,
                    4108,
                    4119,
                    4121,
                    4126,
                    4127,
                    4128,
                    4129,
                    4131,
                    4156,
                    4160,
                    6215,
                    2133,
                    6311,
                    6312,
                    6313,
                    6336,
                    4333,
                    4335,
                    2302,
                    2303,
                    2305,
                    2306,
                    2310,
                    2314,
                    6411,
                    2316,
                    2319,
                    6415,
                    2322,
                    6419,
                    2325,
                    2326,
                    4378,
                    2331,
                    4379,
                    4380,
                    6426,
                    4384,
                    2338,
                    2339,
                    4387,
                    4389,
                    6435,
                    4391,
                    4392,
                    4393,
                    6437,
                    4395,
                    2352,
                    4403,
                    4410,
                    4412,
                    2372,
                    2388,
                    2390,
                    415,
                    421,
                    2479,
                    2480,
                    2483,
                    6579,
                    4552,
                    4555,
                    4557,
                    4562,
                    4578,
                    4581,
                    501,
                    6653,
                    4615,
                    520,
                    4616,
                    4619,
                    4623,
                    4624,
                    4626,
                    542,
                    2601,
                    2605,
                    2607,
                    2608,
                    2611,
                    4659,
                    2616,
                    4664,
                    4669,
                    2622,
                    575,
                    576,
                    2624,
                    578,
                    2625,
                    2626,
                    2629,
                    4674,
                    2635,
                    588,
                    4684,
                    2639,
                    2640,
                    2641,
                    2642,
                    4688,
                    4692,
                    2645,
                    2649,
                    603,
                    2653,
                    2657,
                    4709,
                    2664,
                    2665,
                    2666,
                    6765,
                    6767,
                    2672,
                    4720,
                    6769,
                    6771,
                    629,
                    2678,
                    4727,
                    6779,
                    6780,
                    2685,
                    4736,
                    4737,
                    6786,
                    6787,
                    4741,
                    4743,
                    2696,
                    649,
                    6792,
                    6794,
                    2702,
                    2704,
                    657,
                    658,
                    2709,
                    2711,
                    2715,
                    4763,
                    2717,
                    670,
                    2719,
                    2720,
                    4764,
                    2723,
                    2724,
                    2725,
                    2727,
                    688,
                    690,
                    2742,
                    2743,
                    2746,
                    4794,
                    2749,
                    703,
                    4800,
                    4801,
                    4807,
                    4809,
                    2766,
                    2769,
                    2770,
                    2776,
                    2784,
                    2785,
                    2786,
                    2789,
                    2792,
                    2796,
                    2799,
                    2801,
                    2804,
                    2807,
                    2808,
                    2813,
                    2815,
                    2817,
                    2819,
                    2820,
                    6920,
                    2826,
                    2828,
                    2831,
                    2832,
                    2838,
                    792,
                    2840,
                    6937,
                    2847,
                    2848,
                    2849,
                    6952,
                    2862,
                    2863,
                    2864,
                    6962,
                    2869,
                    2870,
                    4918,
                    828,
                    2891,
                    2894,
                    2895,
                    2897,
                    6997,
                    2902,
                    2904,
                    2905,
                    2907,
                    2915,
                    2925,
                    882,
                    883,
                    884,
                    2930,
                    886,
                    887,
                    2932,
                    2934,
                    891,
                    2940,
                    2941,
                    5018,
                    5034,
                    939,
                    940,
                    941,
                    5036,
                    5059,
                    5060,
                    7109,
                    5063,
                    7112,
                    7117,
                    7118,
                    7121,
                    5075,
                    5103,
                    1009,
                    5105,
                    1011,
                    3059,
                    5109,
                    3062,
                    1015,
                    3066,
                    1018,
                    3069,
                    5124,
                    1029,
                    7172,
                    5127,
                    7212,
                    1109,
                    1110,
                    1113,
                    1118,
                    1119,
                    3167,
                    3168,
                    3171,
                    1127,
                    1135,
                    5237,
                    5240,
                    1145,
                    5241,
                    5243,
                    1151,
                    7307,
                    5272,
                    7322,
                    5295,
                    7362,
                    7363,
                    3277,
                    3289,
                    3295,
                    3301,
                    3303,
                    5366,
                    3321,
                    3322,
                    3323,
                    5371,
                    1289,
                    3391,
                    7496,
                    7498,
                    7501,
                    7503,
                    3420,
                    3426,
                    7523,
                    1381,
                    7525,
                    7532,
                    1390,
                    1392,
                    1396,
                    1397,
                    3445,
                    3446,
                    3448,
                    1402,
                    5498,
                    5500,
                    5501,
                    1408,
                    1410,
                    3458,
                    1413,
                    3463,
                    1420,
                    1423,
                    1424,
                    5522,
                    7572,
                    7573,
                    7574,
                    3485,
                    7581,
                    7585,
                    7587,
                    3493,
                    3494,
                    3495,
                    7597,
                    3504,
                    3505,
                    7622,
                    7625,
                    3536,
                    3537,
                    3538,
                    3539,
                    3544,
                    7641,
                    3549,
                    7654,
                    3560,
                    1524,
                    3586,
                    3589,
                    5637,
                    7698,
                    3606,
                    3609,
                    3621,
                    3622,
                    3627,
                    3629,
                    3631,
                    7732,
                    7733,
                    7734,
                    7736,
                    7770,
                    7771,
                    7772,
                    3678,
                    7774,
                    7781,
                    7783,
                    5785,
                    7867,
                    1755,
                    1757,
                    1759,
                    1761,
                    1764,
                    1766,
                    1774,
                    1776,
                    1777,
                    7942,
                    7943,
                    1801,
                    7951,
                    7953,
                    7954,
                    7961,
                    7963,
                    7990,
                    7994,
                    7996,
                    7998,
                    8002,
                    5963,
                    5965,
                    8024,
                    8028,
                    8030,
                    8032,
                    3940,
                    8036,
                    6026,
                    6029,
                    6034,
                    6035,
                    1942,
                    8107,
                    8108,
                    1965,
                    8115,
                    8119,
                    8128,
                    8129,
                    8130,
                    6100
                ],
                "data._data": [
                    418,
                    7956
                ],
                "BlockManager": [
                    420
                ],
                "mgr": [
                    480,
                    1664,
                    450,
                    1666,
                    452,
                    421,
                    454,
                    425,
                    1834,
                    1835,
                    431,
                    495,
                    501,
                    442,
                    476,
                    478
                ],
                "self._init_mgr": [
                    421
                ],
                "index": [
                    1795,
                    1797,
                    5637,
                    1799,
                    2055,
                    1801,
                    1811,
                    1812,
                    5787,
                    802,
                    422,
                    6775,
                    425,
                    1834,
                    431,
                    1586,
                    2482,
                    7734,
                    7735,
                    442,
                    450,
                    452,
                    1220,
                    454,
                    4164,
                    4166,
                    4167,
                    1228,
                    2892,
                    2767,
                    2896,
                    4175,
                    4177,
                    1235,
                    468,
                    2773,
                    470,
                    2902,
                    472,
                    2904,
                    474,
                    1754,
                    476,
                    7772,
                    478,
                    2143,
                    480,
                    2785,
                    2786,
                    7773,
                    8158,
                    8161,
                    1638,
                    1639,
                    1640,
                    1641,
                    6761,
                    491,
                    1643,
                    493,
                    1645,
                    3820,
                    496,
                    1648,
                    1010,
                    1651,
                    3568,
                    1653,
                    1654,
                    3569,
                    1784,
                    3571,
                    1018,
                    4338,
                    4339,
                    6765
                ],
                "columns": [
                    1664,
                    1410,
                    1412,
                    5637,
                    793,
                    5018,
                    5788,
                    422,
                    1576,
                    425,
                    1577,
                    939,
                    1834,
                    942,
                    431,
                    1586,
                    4918,
                    442,
                    448,
                    449,
                    450,
                    452,
                    1605,
                    454,
                    1606,
                    1607,
                    1612,
                    462,
                    463,
                    464,
                    465,
                    1230,
                    1235,
                    1616,
                    1619,
                    1620,
                    1621,
                    1622,
                    1624,
                    2134,
                    1627,
                    476,
                    1628,
                    478,
                    1630,
                    480,
                    1640,
                    3562,
                    491,
                    3563,
                    493,
                    3565,
                    3821,
                    496,
                    1662
                ],
                "copy": [
                    3591,
                    1289,
                    5263,
                    3611,
                    422,
                    2604,
                    431,
                    3633,
                    2611,
                    7991,
                    442,
                    454,
                    3656,
                    8025,
                    478,
                    7007,
                    483,
                    3565,
                    3571
                ],
                "init_dict": [
                    480,
                    425,
                    450,
                    452
                ],
                "ma.MaskedArray": [
                    426
                ],
                "ma": [
                    426,
                    435
                ],
                "mrecords.MaskedRecords": [
                    430
                ],
                "mrecords": [
                    430
                ],
                "masked_rec_array_to_mgr": [
                    431
                ],
                "mask": [
                    5505,
                    7554,
                    5514,
                    5516,
                    4366,
                    4367,
                    5519,
                    5522,
                    7188,
                    7194,
                    435,
                    436,
                    439,
                    4567,
                    4569,
                    4571,
                    4578,
                    4345,
                    5357,
                    5358,
                    5359,
                    7538,
                    7541,
                    5369,
                    7546,
                    4349,
                    4350
                ],
                "ma.getmaskarray": [
                    435
                ],
                "mask.any": [
                    436,
                    4366
                ],
                "fill_value": [
                    5088,
                    5248,
                    3592,
                    3657,
                    3627,
                    3565,
                    3991,
                    3634,
                    3571,
                    6100,
                    437,
                    5077,
                    439,
                    5269,
                    5270,
                    3612,
                    5790
                ],
                "maybe_upcast": [
                    437
                ],
                "data.soften_mask": [
                    438
                ],
                "data.copy": [
                    441
                ],
                "init_ndarray": [
                    442,
                    478,
                    454,
                    495
                ],
                "np.ndarray": [
                    4099,
                    3464,
                    1132,
                    2604,
                    4143,
                    2800,
                    3280,
                    1618,
                    2837,
                    3447,
                    444,
                    2716
                ],
                "np": [
                    5504,
                    4099,
                    4351,
                    3464,
                    1289,
                    4367,
                    7314,
                    7187,
                    7188,
                    2837,
                    7315,
                    7317,
                    7954,
                    2716,
                    7196,
                    1823,
                    1830,
                    3497,
                    3499,
                    2604,
                    4143,
                    7605,
                    7735,
                    444,
                    4671,
                    1600,
                    2625,
                    3277,
                    7631,
                    3280,
                    4561,
                    1618,
                    3672,
                    3547,
                    1757,
                    7773,
                    7647,
                    1120,
                    7649,
                    483,
                    5095,
                    1128,
                    1131,
                    1132,
                    1133,
                    2926,
                    2800,
                    2676,
                    4340,
                    5108,
                    3447,
                    7413,
                    4350,
                    3582,
                    1151
                ],
                "Index": [
                    2716,
                    3460,
                    3464,
                    1643,
                    1132,
                    1645,
                    4684,
                    3471,
                    2800,
                    6765,
                    7951,
                    3447,
                    506,
                    444
                ],
                "data.dtype.names": [
                    445,
                    446
                ],
                "data.dtype": [
                    445,
                    446
                ],
                "data_columns": [
                    449,
                    446,
                    447
                ],
                "k": [
                    1408,
                    1416,
                    2326,
                    941,
                    942,
                    943,
                    447,
                    3393,
                    3394,
                    2373,
                    1607,
                    1611,
                    1612,
                    1613,
                    4727,
                    1390,
                    887,
                    1392,
                    883,
                    884,
                    886,
                    1015,
                    4733
                ],
                "data.name": [
                    452
                ],
                "abc.Iterable": [
                    457
                ],
                "abc": [
                    457,
                    458,
                    4099,
                    4146
                ],
                "abc.Sequence": [
                    458
                ],
                "ExtensionArray": [
                    458,
                    3454
                ],
                "is_list_like": [
                    2915,
                    2661,
                    461,
                    7952,
                    3255,
                    3257,
                    8121
                ],
                "is_named_tuple": [
                    462
                ],
                "_fields": [
                    463
                ],
                "arrays": [
                    1664,
                    1783,
                    4123,
                    4129,
                    4131,
                    1830,
                    4137,
                    1834,
                    4141,
                    4144,
                    4147,
                    4151,
                    4156,
                    4161,
                    4164,
                    1607,
                    1609,
                    1614,
                    464,
                    1616,
                    1619,
                    1624,
                    476,
                    1761,
                    1642,
                    1643,
                    1008,
                    1648,
                    1776,
                    1011,
                    1015,
                    1659,
                    1020,
                    1023
                ],
                "to_arrays": [
                    464,
                    1624,
                    1619
                ],
                "ensure_index": [
                    1606,
                    1577,
                    465,
                    1621,
                    1626,
                    1628
                ],
                "get_names_from_index": [
                    470
                ],
                "Categorical": [
                    471
                ],
                "ibase.default_index": [
                    472,
                    474,
                    4374
                ],
                "ibase": [
                    472,
                    474,
                    4374
                ],
                "arrays_to_mgr": [
                    1664,
                    1834,
                    476
                ],
                "arr": [
                    5346,
                    483,
                    5347,
                    5349,
                    5350,
                    5351,
                    5289,
                    5290,
                    491,
                    5292,
                    5353,
                    5354
                ],
                "np.array": [
                    1600,
                    2625,
                    483,
                    1289,
                    1757
                ],
                "exc": [
                    489,
                    485
                ],
                "e": [
                    489,
                    487
                ],
                "arr.ndim": [
                    491
                ],
                "values": [
                    4353,
                    5637,
                    4360,
                    4361,
                    4364,
                    4367,
                    4370,
                    4372,
                    5786,
                    8101,
                    8104,
                    8107,
                    7597,
                    7599,
                    8112,
                    7601,
                    8113,
                    8115,
                    8116,
                    8117,
                    8119,
                    1592,
                    8121,
                    1595,
                    1597,
                    2622,
                    8125,
                    1600,
                    2624,
                    1602,
                    2625,
                    2626,
                    8128,
                    3537,
                    7638,
                    3545,
                    7641,
                    7642,
                    492,
                    496,
                    4338,
                    2931,
                    2932,
                    4340,
                    2934,
                    4341,
                    7538,
                    6651,
                    2941,
                    4350,
                    4351
                ],
                "cast_scalar_to_array": [
                    492,
                    3485
                ],
                "values.dtype": [
                    496,
                    4361,
                    4340
                ],
                "NDFrame.__init__": [
                    501
                ],
                "self.index": [
                    2817,
                    3458,
                    3586,
                    5124,
                    1029,
                    3463,
                    520,
                    2696,
                    1420,
                    2702,
                    2704,
                    6034,
                    2709,
                    4378,
                    4379,
                    4380,
                    3485,
                    542,
                    4126,
                    4127,
                    4128,
                    4129,
                    4131,
                    4384,
                    2725,
                    3621,
                    4387,
                    4389,
                    4392,
                    4393,
                    941,
                    2608,
                    3504,
                    6962,
                    2483,
                    2743,
                    7996,
                    2624,
                    2625,
                    8129,
                    2941,
                    7118,
                    2895,
                    2770,
                    2815,
                    2388,
                    3538,
                    4692,
                    2776,
                    1755,
                    3420,
                    1757,
                    8030,
                    1759,
                    2785,
                    3426,
                    2915,
                    1764,
                    1766,
                    7783,
                    6765,
                    1011,
                    1396,
                    2932,
                    5240,
                    2813,
                    2303
                ],
                "self.columns": [
                    5127,
                    520,
                    4108,
                    3606,
                    542,
                    3622,
                    2607,
                    2616,
                    4669,
                    4674,
                    4684,
                    2639,
                    2640,
                    1109,
                    1110,
                    603,
                    7781,
                    2664,
                    2666,
                    6767,
                    6769,
                    6771,
                    6779,
                    2685,
                    6786,
                    6787,
                    5272,
                    2715,
                    2717,
                    2784,
                    1761,
                    1774,
                    1776,
                    1777,
                    5366,
                    2305,
                    2310,
                    1801,
                    2314,
                    2319,
                    7951,
                    2322,
                    2325,
                    2326,
                    2339,
                    4395,
                    2352,
                    4403,
                    4410,
                    4412,
                    7998,
                    8032,
                    1381,
                    882,
                    883,
                    2930,
                    1397,
                    886,
                    3445,
                    3448,
                    3446,
                    5500,
                    1410,
                    6026,
                    1423,
                    6035,
                    3493,
                    3494,
                    939,
                    8108,
                    2480,
                    3505,
                    8130,
                    7118,
                    3539,
                    3544,
                    1009,
                    1015,
                    1018
                ],
                "List": [
                    6320,
                    3281,
                    506
                ],
                "Tuple": [
                    881,
                    523,
                    5967,
                    4383
                ],
                "self._data.any_extension_types": [
                    575
                ],
                "self._data": [
                    576,
                    4736,
                    578,
                    4801,
                    2372,
                    6312,
                    2601,
                    2925,
                    4623,
                    3504,
                    7990,
                    8024,
                    3323,
                    2622,
                    575
                ],
                "block.dtype": [
                    576
                ],
                "block": [
                    576
                ],
                "self._data.blocks": [
                    576
                ],
                "self._data.is_mixed_type": [
                    578
                ],
                "max_rows": [
                    672,
                    2146,
                    804,
                    618,
                    587,
                    620,
                    588,
                    716,
                    2316,
                    2319,
                    697,
                    661,
                    631,
                    633
                ],
                "get_option": [
                    647,
                    2314,
                    2316,
                    661,
                    662,
                    663,
                    664,
                    665,
                    666,
                    696,
                    697,
                    698,
                    699,
                    700,
                    2377,
                    587,
                    602,
                    616,
                    620
                ],
                "width": [
                    641,
                    675,
                    601,
                    667,
                    669,
                    607
                ],
                "height": [
                    601
                ],
                "console.get_console_size": [
                    601,
                    667
                ],
                "console": [
                    616,
                    601,
                    667,
                    613
                ],
                "max_columns": [
                    602,
                    606
                ],
                "nb_columns": [
                    603,
                    606,
                    607
                ],
                "ignore_width": [
                    613,
                    607
                ],
                "console.in_interactive_session": [
                    613
                ],
                "console.in_ipython_frontend": [
                    616
                ],
                "buf": [
                    2307,
                    680,
                    810,
                    2155,
                    656,
                    625,
                    658,
                    659,
                    689,
                    690,
                    692,
                    2392,
                    2297,
                    2298,
                    637,
                    638,
                    671
                ],
                "StringIO": [
                    656,
                    625,
                    689
                ],
                "d": [
                    633,
                    637,
                    629
                ],
                "d.iloc": [
                    633
                ],
                "d.to_string": [
                    637
                ],
                "value": [
                    3457,
                    3458,
                    2820,
                    3460,
                    2822,
                    2823,
                    3463,
                    2825,
                    2826,
                    3464,
                    3465,
                    3466,
                    3468,
                    3469,
                    2832,
                    3470,
                    3471,
                    3472,
                    3474,
                    3477,
                    3478,
                    3482,
                    3485,
                    3486,
                    2847,
                    2849,
                    3489,
                    3490,
                    3493,
                    3497,
                    3499,
                    2862,
                    2863,
                    2864,
                    3981,
                    3449,
                    2892,
                    3450,
                    2896,
                    3960,
                    2902,
                    2904,
                    3420,
                    3421,
                    3426,
                    2915,
                    3454,
                    2917,
                    3429,
                    2796,
                    3437,
                    2926,
                    2799,
                    3439,
                    2801,
                    3440,
                    3442,
                    2804,
                    2808,
                    3321,
                    3322,
                    3323,
                    3452,
                    638,
                    639
                ],
                "buf.getvalue": [
                    680,
                    659,
                    692,
                    638
                ],
                "repr_width": [
                    641,
                    639
                ],
                "l": [
                    639
                ],
                "value.split": [
                    639
                ],
                "info_repr_option": [
                    648,
                    647
                ],
                "self._repr_fits_horizontal_": [
                    649
                ],
                "self._repr_fits_vertical_": [
                    649
                ],
                "self._info_repr": [
                    688,
                    657
                ],
                "self.info": [
                    690,
                    658
                ],
                "min_rows": [
                    673,
                    803,
                    717,
                    662,
                    698
                ],
                "max_cols": [
                    674,
                    2147,
                    805,
                    2313,
                    2314,
                    718,
                    2319,
                    2322,
                    663,
                    699
                ],
                "max_colwidth": [
                    664,
                    676,
                    790
                ],
                "show_dimensions": [
                    2148,
                    677,
                    806,
                    719,
                    665,
                    700
                ],
                "_": [
                    7112,
                    3482,
                    667,
                    4367
                ],
                "self.to_string": [
                    670
                ],
                "val": [
                    692,
                    693,
                    694
                ],
                "replace": [
                    3979,
                    692
                ],
                "val.replace": [
                    693
                ],
                "formatter": [
                    810,
                    2154,
                    724,
                    2132,
                    791,
                    702
                ],
                "fmt.DataFrameFormatter": [
                    2132,
                    702,
                    791
                ],
                "fmt": [
                    736,
                    2307,
                    745,
                    746,
                    2129,
                    2132,
                    2069,
                    791,
                    2392,
                    702
                ],
                "formatter.to_html": [
                    2154,
                    724
                ],
                "FilePathOrBuffer": [
                    739
                ],
                "Sequence": [
                    740,
                    742,
                    4632,
                    4587,
                    4184
                ],
                "Union": [
                    742,
                    4632,
                    4587,
                    4588,
                    5967,
                    6320,
                    6322,
                    6323,
                    4184,
                    4633
                ],
                "fmt.formatters_type": [
                    745
                ],
                "fmt.float_format_type": [
                    746
                ],
                "option_context": [
                    790
                ],
                "col_space": [
                    794,
                    2135
                ],
                "na_rep": [
                    2136,
                    795
                ],
                "formatters": [
                    2137,
                    796
                ],
                "float_format": [
                    2138,
                    797
                ],
                "sparsify": [
                    2139,
                    798
                ],
                "justify": [
                    2129,
                    2140,
                    799
                ],
                "index_names": [
                    800,
                    1764,
                    1797,
                    1767,
                    1769,
                    1771,
                    1772,
                    1774,
                    1778,
                    1780,
                    2141
                ],
                "header": [
                    801,
                    2142
                ],
                "decimal": [
                    2149,
                    807
                ],
                "line_width": [
                    808
                ],
                "formatter.to_string": [
                    810
                ],
                "encoding": [
                    810,
                    2159
                ],
                "Substitution": [
                    736,
                    5632,
                    6977,
                    6403,
                    5768,
                    4745,
                    3947,
                    2060,
                    3664,
                    2069,
                    728,
                    4697
                ],
                "fmt.common_docstring": [
                    736,
                    2069
                ],
                "fmt.return_docstring": [
                    736,
                    2069
                ],
                "Styler": [
                    828
                ],
                "_shared_docs": [
                    3969,
                    5633,
                    6433,
                    5639,
                    5769,
                    6409,
                    4428,
                    880,
                    4432,
                    3988,
                    3637,
                    4436,
                    5527,
                    4440,
                    889,
                    6102,
                    6199,
                    830
                ],
                "self.columns.is_unique": [
                    1381,
                    3494,
                    6026,
                    2639,
                    882
                ],
                "self._get_item_cache": [
                    2894,
                    2769,
                    2642,
                    884,
                    2749
                ],
                "i": [
                    7189,
                    7191,
                    7194,
                    7197,
                    4128,
                    4129,
                    1826,
                    2339,
                    2340,
                    4386,
                    4387,
                    7203,
                    7204,
                    2345,
                    2601,
                    8107,
                    4396,
                    4397,
                    5038,
                    4399,
                    2608,
                    5040,
                    8108,
                    7735,
                    2616,
                    2622,
                    3548,
                    3549,
                    7773,
                    1767,
                    1640,
                    1769,
                    1643,
                    887,
                    886,
                    1783,
                    1784,
                    1659
                ],
                "self._ixs": [
                    887
                ],
                "Appender": [
                    3969,
                    5633,
                    5769,
                    4746,
                    6409,
                    3988,
                    6433,
                    3637,
                    6198,
                    6978,
                    4428,
                    4432,
                    3665,
                    4436,
                    4440,
                    4698,
                    3948,
                    880,
                    889
                ],
                "Iterable": [
                    881,
                    4679,
                    4383
                ],
                "Hashable": [
                    4632,
                    4587,
                    881,
                    4184,
                    4187,
                    4188
                ],
                "self.items": [
                    1408,
                    7112,
                    1390,
                    2479,
                    1392,
                    4688,
                    891
                ],
                "klass": [
                    2940,
                    940,
                    2941,
                    942
                ],
                "self._constructor_sliced": [
                    940,
                    2605,
                    7954,
                    2742,
                    7963,
                    2940
                ],
                "v": [
                    1408,
                    3393,
                    3394,
                    8161,
                    1416,
                    7112,
                    1611,
                    941,
                    1390,
                    942,
                    1392,
                    1614,
                    1783,
                    1659,
                    1822,
                    8159
                ],
                "self.values": [
                    8128,
                    2723,
                    1289,
                    3627,
                    941,
                    7597,
                    3537,
                    5109,
                    7733,
                    7641,
                    7771,
                    1119
                ],
                "s": [
                    8166,
                    942,
                    943,
                    8158,
                    7099,
                    7100,
                    7101,
                    7870,
                    8159
                ],
                "fields": [
                    1009,
                    1019,
                    1012
                ],
                "arrays.append": [
                    4129,
                    4131,
                    4137,
                    4141,
                    1614,
                    4144,
                    1011,
                    4147,
                    4151
                ],
                "fields.insert": [
                    1012
                ],
                "arrays.extend": [
                    1015
                ],
                "self.iloc": [
                    3303,
                    8107,
                    2902,
                    1015
                ],
                "name": [
                    4417,
                    1827,
                    1797,
                    1801,
                    1774,
                    4399,
                    4688,
                    1809,
                    1810,
                    4401,
                    4406,
                    1018,
                    1019,
                    4414
                ],
                "itertuple": [
                    1019,
                    1020
                ],
                "collections.namedtuple": [
                    1019
                ],
                "collections": [
                    8104,
                    1019
                ],
                "itertuple._make": [
                    1020
                ],
                "other": [
                    6784,
                    6785,
                    6786,
                    6787,
                    5252,
                    5496,
                    6791,
                    6792,
                    6921,
                    6794,
                    5371,
                    6930,
                    6931,
                    6933,
                    6935,
                    6938,
                    6773,
                    5247,
                    6774,
                    6952,
                    6778,
                    3652,
                    6781,
                    7365,
                    7366,
                    7368,
                    7369,
                    6782,
                    5075,
                    1108,
                    1109,
                    1110,
                    1114,
                    6751,
                    1120,
                    6752,
                    6753,
                    5091,
                    6754,
                    5093,
                    1126,
                    1128,
                    5096,
                    1130,
                    5097,
                    6760,
                    6765,
                    5103,
                    6767,
                    5105,
                    7409,
                    1139,
                    5235,
                    5109,
                    5237,
                    5495,
                    5240,
                    1145,
                    5498,
                    5243,
                    5244,
                    6772,
                    5502,
                    1151
                ],
                "common": [
                    1113,
                    1114,
                    1109,
                    1110
                ],
                "self.columns.union": [
                    1109
                ],
                "other.index": [
                    5235,
                    1109,
                    1110,
                    6767
                ],
                "left": [
                    5088,
                    5089,
                    7395,
                    7385,
                    1128,
                    7369,
                    1131,
                    7372,
                    1135,
                    1137,
                    7377,
                    7378,
                    7381,
                    1113,
                    1115,
                    1118
                ],
                "self.reindex": [
                    2720,
                    1113,
                    6780
                ],
                "right": [
                    5088,
                    5089,
                    7395,
                    7369,
                    7373,
                    7377,
                    7378,
                    6998,
                    7382,
                    7385,
                    1114,
                    1116
                ],
                "other.reindex": [
                    1114,
                    6787,
                    6772
                ],
                "lvals": [
                    1121,
                    1123,
                    1128,
                    1131,
                    1133,
                    1115,
                    1119
                ],
                "left.values": [
                    1115,
                    7395
                ],
                "rvals": [
                    1120,
                    1121,
                    1123,
                    1128,
                    1131,
                    1132,
                    1133,
                    1116
                ],
                "right.values": [
                    7395,
                    1116
                ],
                "np.asarray": [
                    1120,
                    3499
                ],
                "lvals.shape": [
                    1121,
                    1123
                ],
                "rvals.shape": [
                    1121,
                    1123
                ],
                "self._constructor": [
                    5124,
                    4743,
                    7953,
                    7574,
                    2840,
                    7961,
                    7322,
                    2724,
                    6313,
                    7212,
                    3629,
                    5295,
                    8002,
                    4809,
                    7117,
                    8036,
                    1127,
                    1135,
                    2932
                ],
                "np.dot": [
                    1128,
                    1131,
                    1133
                ],
                "left.index": [
                    1128,
                    1137,
                    1131,
                    1135
                ],
                "other.columns": [
                    1128,
                    6786,
                    5247
                ],
                "result": [
                    5124,
                    2605,
                    2611,
                    2612,
                    7735,
                    7736,
                    2626,
                    2629,
                    2631,
                    7773,
                    7774,
                    1133,
                    1134,
                    1135,
                    1137,
                    5249,
                    5263,
                    2720,
                    2721,
                    2724,
                    2727,
                    5292,
                    5295,
                    2735,
                    2736,
                    2740,
                    2741,
                    2742,
                    2743,
                    2746,
                    2747,
                    1289,
                    1290,
                    6413,
                    6415,
                    6418,
                    6420,
                    7956,
                    7960,
                    7961,
                    6426,
                    6427,
                    6428,
                    7963,
                    7966,
                    7968,
                    7507,
                    7512,
                    7517,
                    7519,
                    7556,
                    7560,
                    7562,
                    6032,
                    6033,
                    6034,
                    6035,
                    6037,
                    5034,
                    2478,
                    5038,
                    5040,
                    5041,
                    7599,
                    2483,
                    2484,
                    7605,
                    2486,
                    5063,
                    7624,
                    7625,
                    5066,
                    7626,
                    5068,
                    5069,
                    7627,
                    7632,
                    3545,
                    7642,
                    3547,
                    7644,
                    3549,
                    3551,
                    3552,
                    7647,
                    3554,
                    4578,
                    7648,
                    4581,
                    7649,
                    4583,
                    7654,
                    7657,
                    7658
                ],
                "result.ndim": [
                    7960,
                    7625,
                    1134
                ],
                "self.dot": [
                    1145
                ],
                "T": [
                    6437,
                    3470,
                    7184,
                    5109,
                    2583,
                    3452,
                    1151
                ],
                "self.T.dot": [
                    1151
                ],
                "self.T": [
                    6426,
                    6437,
                    1151
                ],
                "np.transpose": [
                    1151
                ],
                "orient": [
                    1409,
                    1221,
                    1222,
                    1419,
                    1229,
                    1389,
                    1391,
                    1393,
                    1427,
                    1407
                ],
                "orient.lower": [
                    1409,
                    1221,
                    1419,
                    1389,
                    1391,
                    1393,
                    1407
                ],
                "data.values": [
                    7632,
                    1225,
                    1228,
                    7638
                ],
                "_from_nested_dict": [
                    1226
                ],
                "data.keys": [
                    1228
                ],
                "cls": [
                    1666,
                    1835,
                    1581,
                    1586,
                    1235
                ],
                "warnings.warn": [
                    2697,
                    1382
                ],
                "warnings": [
                    2697,
                    1382
                ],
                "into_c": [
                    1408,
                    1416,
                    1388,
                    1390,
                    1422,
                    1392,
                    1394
                ],
                "com.standardize_mapping": [
                    1388
                ],
                "com": [
                    1408,
                    2656,
                    3394,
                    2789,
                    1416,
                    2635,
                    1388,
                    3468,
                    2767,
                    1401,
                    2812
                ],
                "into": [
                    1388,
                    1390
                ],
                "startswith": [
                    1409,
                    1419,
                    1389,
                    1391,
                    1393,
                    1407
                ],
                "v.to_dict": [
                    1390
                ],
                "v.tolist": [
                    1392
                ],
                "self.index.tolist": [
                    1396
                ],
                "self.columns.tolist": [
                    1410,
                    1397
                ],
                "com.maybe_box_datetimelike": [
                    1408,
                    1401,
                    1416,
                    2767
                ],
                "t": [
                    1424,
                    1401,
                    1402,
                    1423
                ],
                "self.itertuples": [
                    1424,
                    1402,
                    1413
                ],
                "rows": [
                    1417,
                    1411
                ],
                "row": [
                    1416,
                    1417,
                    1412,
                    1413
                ],
                "row.items": [
                    1416
                ],
                "self.index.is_unique": [
                    1420
                ],
                "gbq.to_gbq": [
                    1523
                ],
                "gbq": [
                    1523
                ],
                "destination_table": [
                    1525
                ],
                "project_id": [
                    1526
                ],
                "chunksize": [
                    1527
                ],
                "reauth": [
                    1528
                ],
                "if_exists": [
                    1529
                ],
                "auth_local_webserver": [
                    1530
                ],
                "table_schema": [
                    1531
                ],
                "location": [
                    1532
                ],
                "progress_bar": [
                    1533
                ],
                "credentials": [
                    1534
                ],
                "is_iterator": [
                    1579,
                    2670
                ],
                "nrows": [
                    1594,
                    1580,
                    1597
                ],
                "first_row": [
                    1584,
                    1592,
                    1589,
                    1590
                ],
                "first_row.dtype.names": [
                    1589
                ],
                "first_row.dtype": [
                    1589,
                    1590
                ],
                "values.extend": [
                    1597
                ],
                "itertools.islice": [
                    1597
                ],
                "itertools": [
                    1597,
                    1774
                ],
                "arr_columns": [
                    1664,
                    1606,
                    1610,
                    1613,
                    1616,
                    1648,
                    1622,
                    1658,
                    1624,
                    1657,
                    1626,
                    1661,
                    1630
                ],
                "data.items": [
                    1611,
                    8158
                ],
                "arr_columns.append": [
                    1613
                ],
                "reorder_arrays": [
                    1616
                ],
                "coerce_float": [
                    1624
                ],
                "exclude": [
                    1632,
                    1633,
                    3297,
                    1635,
                    3257,
                    3267,
                    3268,
                    3299,
                    3272,
                    1641,
                    3273,
                    1654,
                    1656,
                    1657,
                    3258,
                    3260,
                    1662
                ],
                "result_index": [
                    1664,
                    1637,
                    1643,
                    1645,
                    7409,
                    7410,
                    1651,
                    1653
                ],
                "columns.get_loc": [
                    1640
                ],
                "exclude.add": [
                    1641
                ],
                "index_data": [
                    1648,
                    1653
                ],
                "arr_columns.get_loc": [
                    1648,
                    1658
                ],
                "field": [
                    1648
                ],
                "ensure_index_from_sequences": [
                    4164,
                    1653
                ],
                "exclude.update": [
                    1654
                ],
                "arr_exclude": [
                    1657,
                    1658,
                    1661
                ],
                "x": [
                    7392,
                    3266,
                    3267,
                    7366,
                    7577,
                    5357,
                    6649,
                    4720,
                    5361,
                    2356,
                    2358,
                    1657,
                    6650,
                    6651
                ],
                "to_remove": [
                    4154,
                    4133,
                    4171,
                    1658,
                    1659
                ],
                "col": [
                    4097,
                    5250,
                    4099,
                    5251,
                    5252,
                    4103,
                    4108,
                    4110,
                    5263,
                    4113,
                    5522,
                    5272,
                    2339,
                    2341,
                    4134,
                    4135,
                    4136,
                    4137,
                    4138,
                    4139,
                    2348,
                    4141,
                    4142,
                    2479,
                    4143,
                    4144,
                    4146,
                    4147,
                    5292,
                    7092,
                    7094,
                    4151,
                    4152,
                    4154,
                    2891,
                    2766,
                    2894,
                    4688,
                    2769,
                    8107,
                    2902,
                    2904,
                    2905,
                    8108,
                    8159,
                    2784,
                    8160,
                    2786,
                    8161,
                    1658,
                    5500,
                    5501,
                    5502
                ],
                "arr_columns.drop": [
                    1661
                ],
                "columns.drop": [
                    1662
                ],
                "ABCMultiIndex": [
                    4384,
                    5060,
                    3494,
                    1766,
                    4135,
                    4775,
                    7530,
                    4395,
                    3445,
                    1755,
                    2685,
                    4127
                ],
                "ix_vals": [
                    1761,
                    1757,
                    1759
                ],
                "self.index.values": [
                    1757,
                    1759
                ],
                "_internal_get_values": [
                    1776,
                    1761
                ],
                "c": [
                    7200,
                    1761,
                    7202,
                    7203,
                    7204,
                    7395,
                    4171,
                    4172,
                    7196,
                    2479,
                    1776,
                    1777,
                    3548,
                    3549,
                    7198
                ],
                "count": [
                    1763,
                    2343,
                    1769,
                    1770,
                    2345,
                    2348,
                    4564,
                    4567,
                    4569,
                    4571
                ],
                "self.index.names": [
                    4387,
                    1764,
                    4126
                ],
                "n": [
                    4386,
                    4387,
                    1767,
                    1768,
                    4136,
                    4137,
                    3531,
                    3532,
                    3536,
                    4918,
                    5018,
                    3547
                ],
                "names": [
                    4385,
                    4164,
                    1830,
                    4392,
                    4138,
                    1774,
                    4142,
                    4399,
                    1777,
                    4145,
                    4148,
                    4152,
                    4124,
                    4126
                ],
                "itertools.chain": [
                    1774
                ],
                "index_len": [
                    1826,
                    1795,
                    1780,
                    1799
                ],
                "formats": [
                    1824,
                    1830,
                    1781,
                    1822
                ],
                "dtype_mapping": [
                    1824,
                    1827,
                    1796,
                    1800,
                    1808,
                    1809,
                    1810,
                    1811,
                    1812,
                    1814,
                    1821,
                    1823
                ],
                "index_dtypes": [
                    1796
                ],
                "column_dtypes": [
                    1800
                ],
                "is_dict_like": [
                    1808
                ],
                "formats.append": [
                    1824,
                    1822
                ],
                "v.dtype": [
                    1822
                ],
                "np.dtype": [
                    1823
                ],
                "element": [
                    1826,
                    1827
                ],
                "msg": [
                    1827,
                    1828,
                    7589,
                    7593,
                    3055,
                    3056
                ],
                "np.rec.fromarrays": [
                    1830
                ],
                "np.rec": [
                    1830
                ],
                "kwargs": [
                    1928,
                    2057,
                    6415,
                    1938,
                    6419,
                    2581,
                    6426,
                    1949,
                    6429,
                    6437,
                    6438,
                    7103,
                    3393,
                    3164,
                    3165,
                    3678,
                    3679,
                    3681,
                    3170,
                    3171,
                    3172,
                    3173,
                    3682,
                    3683,
                    3940,
                    3941,
                    3943,
                    3944,
                    3945,
                    3057,
                    3058,
                    3059,
                    3966
                ],
                "version": [
                    1929,
                    1931
                ],
                "convert_strl": [
                    1938,
                    1932
                ],
                "writer": [
                    1940,
                    1951
                ],
                "statawriter": [
                    1940
                ],
                "path": [
                    2052,
                    1941,
                    1965
                ],
                "convert_dates": [
                    1943
                ],
                "byteorder": [
                    1944
                ],
                "time_stamp": [
                    1945
                ],
                "data_label": [
                    1946
                ],
                "write_index": [
                    1947
                ],
                "variable_labels": [
                    1948
                ],
                "writer.write_file": [
                    1951
                ],
                "deprecate_kwarg": [
                    1953,
                    1837,
                    1967
                ],
                "to_feather": [
                    1965
                ],
                "to_parquet": [
                    2050
                ],
                "engine": [
                    2053,
                    2895,
                    2896,
                    2770,
                    2773
                ],
                "compression": [
                    2054
                ],
                "partition_cols": [
                    2056
                ],
                "fmt._VALID_JUSTIFY_PARAMETERS": [
                    2129
                ],
                "bold_rows": [
                    2144
                ],
                "escape": [
                    2145
                ],
                "table_id": [
                    2150
                ],
                "render_links": [
                    2151
                ],
                "classes": [
                    2156
                ],
                "notebook": [
                    2157
                ],
                "border": [
                    2158
                ],
                "sys.stdout": [
                    2298
                ],
                "sys": [
                    2298
                ],
                "lines": [
                    2306,
                    2307,
                    2374,
                    2347,
                    2352,
                    2325,
                    2391,
                    2392,
                    2300,
                    2302,
                    2303
                ],
                "lines.append": [
                    2306,
                    2374,
                    2347,
                    2352,
                    2325,
                    2391,
                    2302,
                    2303
                ],
                "self.index._summary": [
                    2303
                ],
                "fmt.buffer_put_lines": [
                    2392,
                    2307
                ],
                "cols": [
                    7173,
                    2310,
                    7174,
                    7322,
                    7212,
                    7308,
                    7309,
                    7951,
                    7953,
                    7186,
                    7954,
                    7318,
                    3448,
                    3449,
                    3450,
                    2332,
                    2334
                ],
                "null_counts": [
                    2321,
                    2318
                ],
                "show_counts": [
                    2344,
                    2321,
                    2330,
                    2319
                ],
                "exceeds_info_cols": [
                    2322,
                    2367
                ],
                "space": [
                    2348,
                    2326,
                    8166
                ],
                "pprint_thing": [
                    2341,
                    2326
                ],
                "counts": [
                    7554,
                    2372,
                    2373,
                    7556,
                    7516,
                    2345,
                    2388,
                    2327,
                    2331,
                    2332,
                    7517,
                    2334
                ],
                "tmpl": [
                    2336,
                    2329,
                    2348
                ],
                "self.count": [
                    2331
                ],
                "dtypes": [
                    2338,
                    3268,
                    2340,
                    2373,
                    2374,
                    3269
                ],
                "self.dtypes": [
                    2338,
                    3301,
                    7654,
                    3289,
                    3295
                ],
                "dtypes.iloc": [
                    2340
                ],
                "counts.iloc": [
                    2345
                ],
                "_put_str": [
                    2348
                ],
                "tmpl.format": [
                    2348
                ],
                "self.columns._summary": [
                    2352
                ],
                "num": [
                    2357,
                    2358,
                    2359,
                    2360,
                    7387,
                    7384
                ],
                "size_qualifier": [
                    2380,
                    2389,
                    2358,
                    2391,
                    2360
                ],
                "verbose": [
                    2362,
                    2364
                ],
                "_verbose_repr": [
                    2370,
                    2363
                ],
                "_non_verbose_repr": [
                    2368,
                    2365
                ],
                "self._data.get_dtype_counts": [
                    2372
                ],
                "counts.items": [
                    2373
                ],
                "join": [
                    6033,
                    5490,
                    3653,
                    2374
                ],
                "memory_usage": [
                    2376,
                    2377,
                    2378,
                    2381
                ],
                "deep": [
                    2382,
                    2479,
                    2387,
                    2483,
                    2390
                ],
                "self.index._is_memory_usage_qualified": [
                    2388
                ],
                "mem_usage": [
                    2390,
                    2391
                ],
                "self.memory_usage": [
                    2390
                ],
                "_sizeof_fmt": [
                    2391
                ],
                "c.memory_usage": [
                    2479
                ],
                "append": [
                    2483,
                    4125,
                    6771
                ],
                "self.index.memory_usage": [
                    2483
                ],
                "nv.validate_transpose": [
                    2580
                ],
                "nv": [
                    2580,
                    7103
                ],
                "args": [
                    3940,
                    6437,
                    6438,
                    6415,
                    6419,
                    2580,
                    6584,
                    6426,
                    6429,
                    3678,
                    7103
                ],
                "transpose": [
                    2581,
                    2583
                ],
                "axis": [
                    4737,
                    7558,
                    7943,
                    7944,
                    6411,
                    6415,
                    7567,
                    7698,
                    6419,
                    7572,
                    7573,
                    3991,
                    6423,
                    7577,
                    4763,
                    4764,
                    7585,
                    6435,
                    6436,
                    6311,
                    2600,
                    5036,
                    5037,
                    7601,
                    7732,
                    6581,
                    7733,
                    7734,
                    7736,
                    7610,
                    7994,
                    7995,
                    7997,
                    8000,
                    7543,
                    4800,
                    7872,
                    7362,
                    5059,
                    4548,
                    5060,
                    3654,
                    7366,
                    4552,
                    4553,
                    5065,
                    7371,
                    7496,
                    7498,
                    7633,
                    7506,
                    7507,
                    7639,
                    7512,
                    7770,
                    7515,
                    7771,
                    7517,
                    7772,
                    7774,
                    8028,
                    8029,
                    4578,
                    8031,
                    8034,
                    4709,
                    7653,
                    7527,
                    7528,
                    3819,
                    7532,
                    4720,
                    7408,
                    4727,
                    3962
                ],
                "new_values": [
                    2723,
                    2725,
                    2601,
                    3626,
                    2604,
                    3629,
                    2606,
                    2609
                ],
                "self._data.fast_xs": [
                    2601
                ],
                "new_values.base": [
                    2604
                ],
                "new_values.dtype": [
                    2609
                ],
                "result._set_is_copy": [
                    2746,
                    2611
                ],
                "label": [
                    2616,
                    2626,
                    2629
                ],
                "self._data.iget": [
                    3504,
                    2622
                ],
                "np.nan": [
                    2625,
                    2926,
                    4367,
                    7315,
                    7413,
                    7735,
                    3672,
                    7196,
                    7773,
                    3582,
                    4351
                ],
                "self._box_col_values": [
                    2626,
                    2934
                ],
                "result._set_as_cached": [
                    2629
                ],
                "key": [
                    2817,
                    2818,
                    2823,
                    2696,
                    2825,
                    2829,
                    2702,
                    2704,
                    2709,
                    2710,
                    2837,
                    2838,
                    2840,
                    2842,
                    2715,
                    2718,
                    2849,
                    3493,
                    3495,
                    2863,
                    2864,
                    2743,
                    2749,
                    3448,
                    6341,
                    2634,
                    2635,
                    2637,
                    2639,
                    2641,
                    2642,
                    2645,
                    2652,
                    2653,
                    2656,
                    2657,
                    2661,
                    2789,
                    2792,
                    2665,
                    2666,
                    2670,
                    2671,
                    2672,
                    2798,
                    2799,
                    2800,
                    2801,
                    2804,
                    2930,
                    3445,
                    2808,
                    3446,
                    2812,
                    2813,
                    2686,
                    2815
                ],
                "lib.item_from_zerodim": [
                    2634
                ],
                "lib": [
                    3552,
                    7554,
                    2634,
                    4341,
                    6650,
                    6651
                ],
                "com.apply_if_callable": [
                    3394,
                    2635,
                    2789
                ],
                "is_hashable": [
                    2637
                ],
                "self.columns.nlevels": [
                    2640,
                    4403,
                    2664,
                    4412
                ],
                "self._getitem_multilevel": [
                    2665,
                    2641
                ],
                "indexer": [
                    4737,
                    2818,
                    3586,
                    2820,
                    3590,
                    2828,
                    2832,
                    2710,
                    2711,
                    3606,
                    3610,
                    4771,
                    3625,
                    4778,
                    3627,
                    4796,
                    4801,
                    2645,
                    2646,
                    2649,
                    2792,
                    2793,
                    2666,
                    2667,
                    2668,
                    2796,
                    2672,
                    4721,
                    4722,
                    2675,
                    2676,
                    2678,
                    4732
                ],
                "convert_to_index_sliceable": [
                    2792,
                    2645
                ],
                "self._slice": [
                    2649
                ],
                "self.where": [
                    2653
                ],
                "com.is_bool_indexer": [
                    2656,
                    2812
                ],
                "self._getitem_bool_array": [
                    2657
                ],
                "is_single_key": [
                    2680,
                    2661,
                    2663
                ],
                "self.columns.get_loc": [
                    2784,
                    2666,
                    2930,
                    3446,
                    2715
                ],
                "is_integer": [
                    2667,
                    7110
                ],
                "self.loc._get_listlike_indexer": [
                    2672,
                    2828
                ],
                "self.loc": [
                    4578,
                    2820,
                    2828,
                    2672,
                    2832,
                    2904,
                    3062,
                    2808
                ],
                "np.where": [
                    2676
                ],
                "self.take": [
                    4562,
                    2678,
                    2711
                ],
                "data.shape": [
                    2685
                ],
                "key.index.equals": [
                    2696
                ],
                "key.index": [
                    2696
                ],
                "check_bool_indexer": [
                    2817,
                    2709
                ],
                "key.nonzero": [
                    2818,
                    2710
                ],
                "loc": [
                    2723,
                    3323,
                    3446,
                    3447,
                    3448,
                    2715,
                    2716,
                    2717
                ],
                "new_columns": [
                    2720,
                    5250,
                    3622,
                    3629,
                    5295,
                    3632,
                    3606,
                    3607,
                    3610,
                    2717,
                    2718,
                    5247
                ],
                "result_columns": [
                    2721,
                    2725,
                    2718
                ],
                "maybe_droplevels": [
                    3448,
                    2718
                ],
                "self._is_mixed_type": [
                    3536,
                    2719
                ],
                "result.columns": [
                    2721,
                    5068,
                    2735,
                    2736,
                    5040
                ],
                "result.__finalize__": [
                    2727
                ],
                "top": [
                    2736,
                    2737,
                    2738,
                    2739
                ],
                "takeable": [
                    2890,
                    2901,
                    2765
                ],
                "series": [
                    5251,
                    5285,
                    5254,
                    5257,
                    5289,
                    2891,
                    2892,
                    2766,
                    2767,
                    2894,
                    2769,
                    2896,
                    5267,
                    2773,
                    5269,
                    5277
                ],
                "self._iget_item_cache": [
                    2891,
                    2766
                ],
                "series._values": [
                    2896,
                    2773,
                    2767
                ],
                "self.index._engine": [
                    2770,
                    2895
                ],
                "engine.get_value": [
                    2773
                ],
                "self.index.nlevels": [
                    2776,
                    4128,
                    4379
                ],
                "self.index.get_loc": [
                    2785
                ],
                "self._get_value": [
                    2786,
                    3549
                ],
                "self._setitem_slice": [
                    2796
                ],
                "self._setitem_frame": [
                    2799
                ],
                "self._setitem_array": [
                    2801
                ],
                "self._set_item": [
                    2804
                ],
                "self._check_setitem_copy": [
                    2848,
                    2819,
                    2831,
                    2870,
                    2807
                ],
                "self.loc._setitem_with_indexer": [
                    2832,
                    2820
                ],
                "value.columns": [
                    2825,
                    3449,
                    2823
                ],
                "k1": [
                    2825,
                    2826
                ],
                "k2": [
                    2825,
                    2826
                ],
                "key.shape": [
                    2838
                ],
                "self.shape": [
                    8128,
                    3277,
                    2838
                ],
                "self._construct_axes_dict": [
                    2840
                ],
                "key.values.size": [
                    2842
                ],
                "key.values": [
                    2842
                ],
                "is_bool_dtype": [
                    2842
                ],
                "self._check_inplace_setting": [
                    2847
                ],
                "self._where": [
                    2849
                ],
                "self._ensure_valid_index": [
                    3321,
                    2862
                ],
                "self._sanitize_column": [
                    3322,
                    2863
                ],
                "NDFrame._set_item": [
                    2864
                ],
                "series._set_value": [
                    2892
                ],
                "engine.set_value": [
                    2896
                ],
                "self._item_cache.pop": [
                    2905
                ],
                "self._item_cache": [
                    2905
                ],
                "self._data.reindex_axis": [
                    2925
                ],
                "value.index.copy": [
                    2926
                ],
                "value.index": [
                    3420,
                    3429,
                    2926
                ],
                "items": [
                    2930,
                    2932,
                    2941,
                    2934
                ],
                "values.ndim": [
                    2931
                ],
                "values.T": [
                    2932
                ],
                "inplace": [
                    4740,
                    4618,
                    4621,
                    3982,
                    4118,
                    4761,
                    4791,
                    4547,
                    4420,
                    4806,
                    4179,
                    3163,
                    4580,
                    3173,
                    4708,
                    4331,
                    4332,
                    3053,
                    3823,
                    4086,
                    3963,
                    3068
                ],
                "validate_bool_kwarg": [
                    4547,
                    4708,
                    4618,
                    4331,
                    3053,
                    4086,
                    4761,
                    3163
                ],
                "expr": [
                    3059,
                    3173,
                    3054,
                    3055
                ],
                "kwargs.pop": [
                    3681,
                    3682,
                    3943,
                    3944,
                    3057,
                    3164,
                    3165
                ],
                "res": [
                    6959,
                    6962,
                    3059,
                    3062,
                    3066
                ],
                "self.eval": [
                    3059
                ],
                "new_data": [
                    4736,
                    4741,
                    4743,
                    4623,
                    4624,
                    6312,
                    6313,
                    7990,
                    7992,
                    7996,
                    7998,
                    4801,
                    8002,
                    4804,
                    4807,
                    4809,
                    8024,
                    8026,
                    8157,
                    8030,
                    8032,
                    8160,
                    8161,
                    8162,
                    8036,
                    5093,
                    5097,
                    5098,
                    5105,
                    5109,
                    3062,
                    5110,
                    3066,
                    3069,
                    3071
                ],
                "self._update_inplace": [
                    4581,
                    4741,
                    4807,
                    4624,
                    3069
                ],
                "resolvers": [
                    3172,
                    3169,
                    3164,
                    3166
                ],
                "index_resolvers": [
                    3169,
                    3167
                ],
                "self._get_index_resolvers": [
                    3167
                ],
                "column_resolvers": [
                    3168,
                    3169
                ],
                "self._get_space_character_free_column_resolvers": [
                    3168
                ],
                "kwargs.get": [
                    3172
                ],
                "_eval": [
                    3173
                ],
                "include": [
                    3266,
                    3268,
                    3272,
                    3273,
                    3255,
                    3256,
                    3291,
                    3260,
                    3293
                ],
                "selection": [
                    3260,
                    3262
                ],
                "infer_dtype_from_object": [
                    3266,
                    3267
                ],
                "invalidate_string_dtypes": [
                    3269
                ],
                "include.isdisjoint": [
                    3272
                ],
                "keep_these": [
                    3301,
                    3303,
                    3277,
                    3295
                ],
                "np.full": [
                    3277
                ],
                "extracted_dtypes": [
                    3282,
                    3287
                ],
                "unique_dtype": [
                    3283,
                    3284,
                    3285
                ],
                "unique_dtypes": [
                    3289,
                    3299,
                    3284,
                    3293
                ],
                "unique_dtype.type": [
                    3285
                ],
                "dtypes_set": [
                    3285
                ],
                "self.dtypes.unique": [
                    3289
                ],
                "included_dtypes": [
                    3292,
                    3295
                ],
                "extract_unique_dtypes_from_dtypes_set": [
                    3298,
                    3292
                ],
                "self.dtypes.isin": [
                    3301,
                    3295
                ],
                "excluded_dtypes": [
                    3298,
                    3301
                ],
                "keep_these.values": [
                    3303
                ],
                "column": [
                    6024,
                    6032,
                    6033,
                    3322,
                    3323
                ],
                "self._data.insert": [
                    3323
                ],
                "allow_duplicates": [
                    3323
                ],
                "self.copy": [
                    5241,
                    5063,
                    4616,
                    5034,
                    4335,
                    4121,
                    4794,
                    3391
                ],
                "kwargs.items": [
                    3393
                ],
                "value.index.equals": [
                    3420
                ],
                "value._values.copy": [
                    3421
                ],
                "value._values": [
                    3421
                ],
                "_values": [
                    3426,
                    5501,
                    5502,
                    4151
                ],
                "value.reindex": [
                    3426,
                    3450
                ],
                "value.index.is_unique": [
                    3429
                ],
                "err": [
                    3431
                ],
                "reindexer": [
                    3440,
                    3452
                ],
                "cols.equals": [
                    3449
                ],
                "value.copy": [
                    3472,
                    3457,
                    3474,
                    3470
                ],
                "sanitize_index": [
                    3458,
                    3463
                ],
                "is_sequence": [
                    4713,
                    3460
                ],
                "maybe_convert_platform": [
                    3466
                ],
                "com.asarray_tuplesafe": [
                    3468
                ],
                "value.ndim": [
                    3469,
                    3493
                ],
                "is_object_dtype": [
                    7601,
                    7644,
                    3477,
                    3551
                ],
                "value.dtype": [
                    3477
                ],
                "maybe_infer_to_datetimelike": [
                    3478
                ],
                "infer_dtype": [
                    3482,
                    3486
                ],
                "infer_dtype_from_scalar": [
                    3482
                ],
                "maybe_cast_to_datetime": [
                    3486
                ],
                "is_extension_array_dtype": [
                    3489,
                    5350
                ],
                "broadcast": [
                    3493
                ],
                "existing_piece": [
                    3496,
                    3497,
                    3495
                ],
                "np.tile": [
                    3497
                ],
                "existing_piece.columns": [
                    3497
                ],
                "np.atleast_2d": [
                    3499
                ],
                "item": [
                    3504,
                    3505
                ],
                "idx": [
                    7174,
                    7212,
                    7309,
                    3504,
                    3505,
                    7322
                ],
                "row_labels": [
                    3538,
                    3531,
                    3548
                ],
                "col_labels": [
                    3548,
                    3539,
                    3532
                ],
                "thresh": [
                    3536,
                    4567,
                    4566,
                    3535
                ],
                "ridx": [
                    3544,
                    3538,
                    3540
                ],
                "self.index.get_indexer": [
                    3538
                ],
                "cidx": [
                    3544,
                    3539,
                    3542
                ],
                "self.columns.get_indexer": [
                    6786,
                    3539
                ],
                "flat_index": [
                    3544,
                    3545
                ],
                "values.flat": [
                    3545
                ],
                "np.empty": [
                    7187,
                    7314,
                    3547,
                    4350
                ],
                "r": [
                    3548,
                    3549
                ],
                "lib.maybe_convert_objects": [
                    3552,
                    4341
                ],
                "frame": [
                    4119,
                    4121,
                    4151,
                    6970,
                    6972,
                    4172,
                    7501,
                    7503,
                    4177,
                    7506,
                    7507,
                    4180,
                    7509,
                    7512,
                    7515,
                    7517,
                    7523,
                    7525,
                    7527,
                    3560,
                    7528,
                    3564,
                    7535,
                    3570,
                    7538,
                    7541,
                    3574
                ],
                "axes": [
                    3940,
                    3621,
                    3622,
                    3941,
                    3562,
                    3568,
                    3678,
                    3679
                ],
                "frame._reindex_columns": [
                    3564
                ],
                "method": [
                    7392,
                    3587,
                    7366,
                    7400,
                    7177,
                    3658,
                    7179,
                    7209,
                    3565,
                    7181,
                    7375,
                    3985,
                    7185,
                    3571,
                    3607,
                    3961,
                    7389
                ],
                "level": [
                    7552,
                    7553,
                    3587,
                    3607,
                    4376,
                    4377,
                    4378,
                    4379,
                    4380,
                    4375,
                    4769,
                    4772,
                    4397,
                    3655,
                    7497,
                    5962,
                    5963,
                    7498,
                    5965,
                    5075,
                    6100,
                    3565,
                    3822,
                    3571,
                    7548,
                    7549,
                    7551
                ],
                "limit": [
                    3587,
                    3659,
                    3565,
                    3983,
                    3571,
                    3607,
                    3964
                ],
                "tolerance": [
                    3587,
                    3571,
                    3565,
                    3607
                ],
                "frame._reindex_index": [
                    3570
                ],
                "new_index": [
                    3586,
                    3587,
                    4419,
                    3621,
                    3590,
                    3629,
                    5295,
                    3632,
                    4374,
                    5238,
                    5240,
                    4380
                ],
                "self.index.reindex": [
                    3586,
                    3621
                ],
                "self._reindex_with_indexers": [
                    3609,
                    3589,
                    3631
                ],
                "self.columns.reindex": [
                    3622,
                    3606
                ],
                "row_indexer": [
                    3624,
                    3625,
                    3632,
                    3621
                ],
                "col_indexer": [
                    3624,
                    3625,
                    3632,
                    3622
                ],
                "algorithms.take_2d_multi": [
                    3626
                ],
                "algorithms": [
                    8128,
                    3626,
                    4918,
                    4663,
                    5017
                ],
                "align": [
                    3651
                ],
                "fill_axis": [
                    3660
                ],
                "broadcast_axis": [
                    3661
                ],
                "validate_axis_style_args": [
                    3940,
                    3678
                ],
                "kwargs.update": [
                    3941,
                    3679
                ],
                "reindex": [
                    3683
                ],
                "NDFrame.reindex.__doc__": [
                    3665
                ],
                "NDFrame.reindex": [
                    3665
                ],
                "rewrite_axis_style_signature": [
                    3666,
                    3827
                ],
                "drop": [
                    3817,
                    7405,
                    4382,
                    4153
                ],
                "labels": [
                    4353,
                    7568,
                    7573,
                    4764,
                    4768,
                    4771,
                    4775,
                    4779,
                    4788,
                    4789,
                    4663,
                    4666,
                    4797,
                    4689,
                    7633,
                    4691,
                    7639,
                    7657,
                    3818,
                    4344,
                    4345
                ],
                "errors": [
                    3824,
                    5507,
                    5492
                ],
                "rename": [
                    3945
                ],
                "fillna": [
                    3959
                ],
                "downcast": [
                    3965
                ],
                "NDFrame.fillna.__doc__": [
                    3948
                ],
                "NDFrame.fillna": [
                    3948
                ],
                "to_replace": [
                    3980
                ],
                "regex": [
                    3984
                ],
                "shift": [
                    3990
                ],
                "periods": [
                    6312,
                    3991
                ],
                "freq": [
                    8032,
                    7998,
                    3991,
                    7996,
                    8030
                ],
                "keys": [
                    4097,
                    4134,
                    4720,
                    4721,
                    4087,
                    4088
                ],
                "err_msg": [
                    4104,
                    4090,
                    4110
                ],
                "missing": [
                    4096,
                    4113,
                    4115,
                    4116,
                    4412,
                    4413
                ],
                "ABCIndexClass": [
                    4139,
                    5346,
                    4099,
                    5358
                ],
                "ABCSeries": [
                    4139,
                    5346,
                    4099,
                    5358
                ],
                "abc.Iterator": [
                    4146,
                    4099
                ],
                "found": [
                    4112,
                    4108
                ],
                "missing.append": [
                    4113
                ],
                "self.index._get_level_values": [
                    4129
                ],
                "col.nlevels": [
                    4136
                ],
                "col._get_level_values": [
                    4137
                ],
                "names.extend": [
                    4138
                ],
                "col.names": [
                    4138
                ],
                "names.append": [
                    4152,
                    4145,
                    4148,
                    4142
                ],
                "col.name": [
                    4142
                ],
                "to_remove.append": [
                    4154
                ],
                "verify_integrity": [
                    6798,
                    4166
                ],
                "index.is_unique": [
                    4166
                ],
                "duplicates": [
                    4168,
                    4167
                ],
                "unique": [
                    4167
                ],
                "index.duplicated": [
                    4167
                ],
                "index._cleanup": [
                    4175
                ],
                "frame.index": [
                    4177
                ],
                "new_obj": [
                    4417,
                    4419,
                    4421,
                    4333,
                    4335,
                    4374
                ],
                "index._values": [
                    4338
                ],
                "PeriodIndex": [
                    4339
                ],
                "DatetimeIndex": [
                    4339
                ],
                "np.object_": [
                    4340
                ],
                "mask.all": [
                    4349,
                    5519
                ],
                "values.fill": [
                    4351
                ],
                "values.take": [
                    4353
                ],
                "values_type": [
                    4360,
                    4369,
                    4370,
                    4363
                ],
                "values_dtype": [
                    4361,
                    4370
                ],
                "DatetimeLikeArray": [
                    4369,
                    4363
                ],
                "values._data": [
                    4364
                ],
                "maybe_upcast_putmask": [
                    4367
                ],
                "self.index._get_level_number": [
                    4378
                ],
                "lev": [
                    4416,
                    4378,
                    4396
                ],
                "self.index.droplevel": [
                    4380
                ],
                "to_insert": [
                    4393,
                    4396,
                    4389,
                    4383
                ],
                "Any": [
                    4383
                ],
                "self.index.levels": [
                    4389
                ],
                "self.index.codes": [
                    4389
                ],
                "default": [
                    4392,
                    4391
                ],
                "self.index.name": [
                    4392,
                    6765
                ],
                "multi_col": [
                    4400,
                    4395
                ],
                "lab": [
                    4416,
                    4396
                ],
                "col_name": [
                    4408,
                    4401,
                    4411,
                    4403
                ],
                "col_fill": [
                    4408,
                    4402,
                    4411,
                    4413
                ],
                "lev_num": [
                    4410,
                    4411
                ],
                "self.columns._get_level_number": [
                    4410
                ],
                "col_level": [
                    4410,
                    6220
                ],
                "name_lst": [
                    4411,
                    4412,
                    4413,
                    4414
                ],
                "level_values": [
                    4416,
                    4417
                ],
                "_maybe_casted_values": [
                    4416
                ],
                "new_obj.insert": [
                    4417
                ],
                "new_obj.index": [
                    4419
                ],
                "isna": [
                    5505,
                    5257,
                    5258,
                    5514,
                    5357,
                    4430
                ],
                "isnull": [
                    4434
                ],
                "notna": [
                    7648,
                    5508,
                    5509,
                    5516,
                    7312,
                    7538,
                    7541,
                    4438,
                    7512,
                    7515
                ],
                "notnull": [
                    4442
                ],
                "self._get_axis_number": [
                    7362,
                    5059,
                    6435,
                    4709,
                    7943,
                    4552,
                    7496,
                    8028,
                    6411,
                    5036,
                    7572,
                    7732,
                    7770,
                    4763,
                    7994
                ],
                "agg_axis": [
                    7556,
                    7528,
                    4553,
                    4557,
                    4562,
                    4564,
                    4569
                ],
                "agg_obj": [
                    4569,
                    4562,
                    4555,
                    4564
                ],
                "subset": [
                    4619,
                    4668,
                    4669,
                    6335,
                    4672,
                    4673,
                    4674,
                    6336,
                    4676,
                    6337,
                    6338,
                    4679,
                    6341,
                    4556,
                    4684,
                    4558,
                    4671,
                    4688,
                    4561
                ],
                "ax": [
                    4557,
                    4558
                ],
                "self._get_axis": [
                    5060,
                    4557,
                    7734,
                    4764,
                    7772
                ],
                "indices": [
                    4558,
                    4559,
                    4562,
                    7733,
                    7735,
                    7771,
                    7773
                ],
                "ax.get_indexer_for": [
                    4558
                ],
                "check": [
                    4560,
                    4561,
                    4559
                ],
                "check.any": [
                    4560
                ],
                "np.compress": [
                    4561
                ],
                "agg_obj.count": [
                    4564
                ],
                "how": [
                    6940,
                    6972,
                    7996,
                    6921,
                    6426,
                    6958,
                    6415,
                    7998,
                    6965,
                    6999,
                    4568,
                    4570,
                    6428,
                    4573,
                    4574
                ],
                "agg_obj._get_axis": [
                    4569
                ],
                "self.empty": [
                    4659,
                    5243,
                    4615
                ],
                "duplicated": [
                    4626,
                    4619,
                    4622
                ],
                "self.duplicated": [
                    4619
                ],
                "keep": [
                    5018,
                    4619,
                    4692,
                    4918
                ],
                "inds": [
                    4622,
                    4623
                ],
                "_ndarray_values.nonzero": [
                    4622
                ],
                "_ndarray_values": [
                    4622
                ],
                "self._data.take": [
                    4736,
                    4801,
                    4623
                ],
                "shape": [
                    4689,
                    4666,
                    4691,
                    4663
                ],
                "algorithms.factorize": [
                    4663
                ],
                "vals": [
                    4688,
                    4689,
                    7092,
                    7094,
                    7096,
                    4664
                ],
                "_SIZE_HINT_LIMIT": [
                    4664
                ],
                "labels.astype": [
                    4666
                ],
                "np.iterable": [
                    4671
                ],
                "cast": [
                    4679
                ],
                "diff": [
                    4684,
                    4685,
                    4686
                ],
                "difference": [
                    4684
                ],
                "diff.empty": [
                    4685
                ],
                "col.values": [
                    4688
                ],
                "f": [
                    7872,
                    7622,
                    7599,
                    7632,
                    4689,
                    7642
                ],
                "ids": [
                    4691,
                    4692
                ],
                "get_group_index": [
                    4691
                ],
                "duplicated_int64": [
                    4692
                ],
                "by": [
                    4711,
                    4712,
                    4713,
                    4715,
                    4717,
                    4720,
                    4726,
                    4727
                ],
                "ascending": [
                    4772,
                    4797,
                    4713,
                    4715,
                    4780,
                    4721,
                    4788,
                    4789,
                    4729,
                    4730,
                    4733
                ],
                "self._get_label_or_level_values": [
                    4720,
                    4727
                ],
                "lexsort_indexer": [
                    4721,
                    4778
                ],
                "na_position": [
                    4797,
                    4721,
                    4733,
                    4781
                ],
                "ensure_platform_int": [
                    4722
                ],
                "nargsort": [
                    4796,
                    4732
                ],
                "kind": [
                    4733,
                    4797
                ],
                "self._get_block_manager_axis": [
                    4800,
                    4737,
                    6311
                ],
                "__finalize__": [
                    4809,
                    4743
                ],
                "NDFrame.sort_values.__doc__": [
                    4698
                ],
                "NDFrame.sort_values": [
                    4698
                ],
                "labels._sort_levels_monotonic": [
                    4768
                ],
                "new_axis": [
                    4771
                ],
                "labels.sortlevel": [
                    4771
                ],
                "sort_remaining": [
                    4772
                ],
                "labels._get_codes_for_sorting": [
                    4779
                ],
                "labels.is_monotonic_increasing": [
                    4788
                ],
                "labels.is_monotonic_decreasing": [
                    4789
                ],
                "baxis": [
                    4800,
                    4801,
                    4804
                ],
                "new_data.axes": [
                    4804
                ],
                "_sort_levels_monotonic": [
                    4804
                ],
                "NDFrame.sort_index.__doc__": [
                    4746
                ],
                "NDFrame.sort_index": [
                    4746
                ],
                "nlargest": [
                    4918
                ],
                "algorithms.SelectNFrame": [
                    5017,
                    4918
                ],
                "nsmallest": [
                    5017
                ],
                "result.index": [
                    5066,
                    5038,
                    6034
                ],
                "result.index.swaplevel": [
                    5038
                ],
                "j": [
                    7203,
                    7204,
                    5038,
                    5040,
                    7190,
                    7191,
                    7194,
                    7197
                ],
                "result.columns.swaplevel": [
                    5040
                ],
                "result.index.reorder_levels": [
                    5066
                ],
                "order": [
                    5066,
                    5068
                ],
                "result.columns.reorder_levels": [
                    5068
                ],
                "this": [
                    5505,
                    5251,
                    5509,
                    5516,
                    5263,
                    5522,
                    7363,
                    7366,
                    7369,
                    5075,
                    5091,
                    5093,
                    5096,
                    5097,
                    5098,
                    7409,
                    5237,
                    5238,
                    5501,
                    5247
                ],
                "self.align": [
                    5075,
                    5237
                ],
                "_arith_op": [
                    5080,
                    5096,
                    5093
                ],
                "func": [
                    5089,
                    5091,
                    6437,
                    6438,
                    5097,
                    5289,
                    5103,
                    6415,
                    5105,
                    6419,
                    6580,
                    5109,
                    5080,
                    6650,
                    6651
                ],
                "ops.fill_binop": [
                    5088
                ],
                "ops": [
                    5088,
                    5091,
                    5093,
                    5103,
                    5105,
                    8151,
                    8152
                ],
                "ops.should_series_dispatch": [
                    5091,
                    5103
                ],
                "ops.dispatch_to_series": [
                    5105,
                    5093
                ],
                "np.errstate": [
                    5504,
                    7631,
                    5108,
                    5095
                ],
                "res_values": [
                    5096,
                    5097
                ],
                "this.values": [
                    5096,
                    5097
                ],
                "other.values": [
                    5096,
                    5097,
                    5109,
                    6774
                ],
                "dispatch_fill_zeros": [
                    5097
                ],
                "this._construct_result": [
                    5098
                ],
                "self.values.T": [
                    5109
                ],
                "out": [
                    5128,
                    5124,
                    5127
                ],
                "out.columns": [
                    5127
                ],
                "other_idxlen": [
                    5235,
                    5243
                ],
                "this.index": [
                    5238
                ],
                "other.empty": [
                    5240
                ],
                "other.copy": [
                    5244
                ],
                "this.columns.union": [
                    5247
                ],
                "this.columns": [
                    5247
                ],
                "do_fill": [
                    5248,
                    5266
                ],
                "otherSeries": [
                    5252,
                    5255,
                    5287,
                    5289,
                    5258,
                    5268,
                    5270
                ],
                "this_dtype": [
                    5290,
                    5283,
                    5284,
                    5254
                ],
                "series.dtype": [
                    5254
                ],
                "other_dtype": [
                    5275,
                    5283,
                    5286,
                    5255
                ],
                "otherSeries.dtype": [
                    5255
                ],
                "this_mask": [
                    5257,
                    5269
                ],
                "other_mask": [
                    5258,
                    5270,
                    5262
                ],
                "overwrite": [
                    5513,
                    5262
                ],
                "other_mask.all": [
                    5262
                ],
                "series.copy": [
                    5267
                ],
                "otherSeries.copy": [
                    5268
                ],
                "new_dtype": [
                    5283,
                    5284,
                    5285,
                    5286,
                    5287,
                    5275,
                    5277
                ],
                "series.astype": [
                    5277,
                    5285
                ],
                "find_common_type": [
                    5283
                ],
                "is_dtype_equal": [
                    5284,
                    5286
                ],
                "otherSeries.astype": [
                    5287
                ],
                "maybe_downcast_to_dtype": [
                    5290
                ],
                "arr._values": [
                    5347
                ],
                "needs_i8_conversion": [
                    5349
                ],
                "arr.dtype": [
                    5350
                ],
                "arr.asi8": [
                    5351
                ],
                "arr.view": [
                    5353
                ],
                "mask._values": [
                    5359
                ],
                "x_values": [
                    5361,
                    5369
                ],
                "extract_values": [
                    5361,
                    5362
                ],
                "y_values": [
                    5369,
                    5362,
                    5367
                ],
                "y": [
                    5362,
                    5366
                ],
                "y.name": [
                    5366
                ],
                "expressions.where": [
                    5369,
                    5522
                ],
                "expressions": [
                    5369,
                    5522
                ],
                "self.combine": [
                    5371
                ],
                "combiner": [
                    5371
                ],
                "other.reindex_like": [
                    5498
                ],
                "that": [
                    5505,
                    5508,
                    5514,
                    5522,
                    5502
                ],
                "filter_func": [
                    5505,
                    5503
                ],
                "mask_this": [
                    5508,
                    5510
                ],
                "mask_that": [
                    5509,
                    5510
                ],
                "pivot": [
                    5637
                ],
                "pivot_table": [
                    5784
                ],
                "aggfunc": [
                    5789
                ],
                "margins": [
                    5791
                ],
                "dropna": [
                    5792,
                    5963,
                    5965,
                    7698,
                    7870
                ],
                "margins_name": [
                    5793
                ],
                "observed": [
                    5794
                ],
                "stack_multiple": [
                    5963
                ],
                "stack": [
                    5965
                ],
                "is_scalar": [
                    6024
                ],
                "df": [
                    6954,
                    6029,
                    6031,
                    6032,
                    6033,
                    7092
                ],
                "self.reset_index": [
                    6029
                ],
                "explode": [
                    6032
                ],
                "df.drop": [
                    6033
                ],
                "self.index.take": [
                    6034
                ],
                "result.reindex": [
                    6035
                ],
                "unstack": [
                    6100
                ],
                "melt": [
                    6214
                ],
                "id_vars": [
                    6216
                ],
                "value_vars": [
                    6217
                ],
                "var_name": [
                    6218
                ],
                "value_name": [
                    6219
                ],
                "bm_axis": [
                    6312,
                    6311
                ],
                "self._data.diff": [
                    6312
                ],
                "ABCDataFrame": [
                    6322,
                    6323
                ],
                "subset.ndim": [
                    6337
                ],
                "_agg_summary_and_see_also_doc": [
                    6404,
                    6343
                ],
                "dedent": [
                    6367,
                    6343
                ],
                "_agg_examples_doc": [
                    6405,
                    6367
                ],
                "self._aggregate": [
                    6415
                ],
                "self.apply": [
                    7698,
                    6419,
                    6653
                ],
                "self.T._aggregate": [
                    6426
                ],
                "arg": [
                    6426,
                    6429
                ],
                "result.T": [
                    7560,
                    6427,
                    7966
                ],
                "_aggregate": [
                    6429
                ],
                "agg": [
                    6431
                ],
                "aggregate": [
                    6431
                ],
                "self.T.transform": [
                    6437
                ],
                "transform": [
                    6438
                ],
                "op": [
                    7577,
                    6578,
                    6587
                ],
                "frame_apply": [
                    6578,
                    7621
                ],
                "raw": [
                    6582
                ],
                "result_type": [
                    6583
                ],
                "kwds": [
                    6585,
                    7577
                ],
                "op.get_result": [
                    6587
                ],
                "x.empty": [
                    6649
                ],
                "lib.map_infer": [
                    6650,
                    6651
                ],
                "x.astype": [
                    6651
                ],
                "infer": [
                    6653
                ],
                "other.name": [
                    6754,
                    6760,
                    6765,
                    6931,
                    6933
                ],
                "ignore_index": [
                    6754,
                    6797
                ],
                "idx_diff": [
                    6767,
                    6769,
                    7410,
                    6771,
                    7412,
                    7413
                ],
                "other.index.difference": [
                    6767
                ],
                "combined_columns": [
                    6769,
                    6771,
                    6772,
                    6776,
                    6779,
                    6780
                ],
                "self.columns.append": [
                    6769
                ],
                "self.columns.astype": [
                    6771
                ],
                "other.values.reshape": [
                    6774
                ],
                "other._convert": [
                    6778
                ],
                "self.columns.equals": [
                    6779
                ],
                "to_concat": [
                    6792,
                    6794,
                    6796
                ],
                "concat": [
                    8105,
                    6795,
                    7118,
                    6959,
                    6964
                ],
                "sort": [
                    6944,
                    6921,
                    6799,
                    6960,
                    6965,
                    7005
                ],
                "self._join_compat": [
                    6920
                ],
                "on": [
                    6947,
                    6921,
                    7000,
                    6939,
                    6941
                ],
                "lsuffix": [
                    6921,
                    6943
                ],
                "rsuffix": [
                    6921,
                    6943
                ],
                "merge": [
                    6936,
                    6971,
                    6996
                ],
                "frames": [
                    6952,
                    6954,
                    6960,
                    6965,
                    6968,
                    6970
                ],
                "can_concat": [
                    6954,
                    6957
                ],
                "df.index.is_unique": [
                    6954
                ],
                "df.index": [
                    6954
                ],
                "res.reindex": [
                    6962
                ],
                "joined": [
                    6968,
                    6971,
                    6972,
                    6975
                ],
                "left_on": [
                    7001
                ],
                "right_on": [
                    7002
                ],
                "left_index": [
                    7003
                ],
                "right_index": [
                    7004
                ],
                "suffixes": [
                    7006
                ],
                "indicator": [
                    7008
                ],
                "validate": [
                    7009
                ],
                "df.items": [
                    7092
                ],
                "_series_round": [
                    7112,
                    7094
                ],
                "decimals": [
                    7105,
                    7106,
                    7107,
                    7109,
                    7110,
                    7112,
                    7094,
                    7100
                ],
                "is_integer_dtype": [
                    7099
                ],
                "is_float_dtype": [
                    7099
                ],
                "s.round": [
                    7100
                ],
                "nv.validate_round": [
                    7103
                ],
                "decimals.index.is_unique": [
                    7107
                ],
                "decimals.index": [
                    7107
                ],
                "new_cols": [
                    7112,
                    7116,
                    7109,
                    7118
                ],
                "_dict_round": [
                    7109
                ],
                "numeric_df": [
                    7172,
                    7173,
                    7175,
                    7307,
                    7308,
                    7310
                ],
                "self._get_numeric_data": [
                    7363,
                    7172,
                    7523,
                    7942,
                    7307,
                    7501,
                    7867,
                    7581
                ],
                "numeric_df.columns": [
                    7308,
                    7173
                ],
                "cols.copy": [
                    7309,
                    7174
                ],
                "mat": [
                    7175,
                    7178,
                    7180,
                    7310,
                    7184,
                    7312,
                    7313,
                    7314,
                    7188,
                    7189,
                    7190,
                    7317,
                    7320
                ],
                "numeric_df.values": [
                    7310,
                    7175
                ],
                "correl": [
                    7394,
                    7203,
                    7204,
                    7178,
                    7180,
                    7212,
                    7410,
                    7187,
                    7413,
                    7415,
                    7387
                ],
                "libalgos.nancorr": [
                    7320,
                    7178
                ],
                "libalgos": [
                    7320,
                    7178,
                    7180
                ],
                "ensure_float64": [
                    7184,
                    7178,
                    7180,
                    7320
                ],
                "min_periods": [
                    7178,
                    7180,
                    7182,
                    7183,
                    7313,
                    7320,
                    7195
                ],
                "libalgos.nancorr_spearman": [
                    7180
                ],
                "corrf": [
                    7200,
                    7185,
                    7202
                ],
                "nanops.get_corr_func": [
                    7185
                ],
                "nanops": [
                    7392,
                    7185,
                    7771,
                    7733
                ],
                "K": [
                    7186,
                    7187
                ],
                "np.isfinite": [
                    7188
                ],
                "ac": [
                    7200,
                    7202,
                    7189
                ],
                "bc": [
                    7200,
                    7202,
                    7190
                ],
                "valid": [
                    7200,
                    7194,
                    7195,
                    7199
                ],
                "valid.sum": [
                    7195
                ],
                "valid.all": [
                    7199
                ],
                "baseCov": [
                    7314,
                    7315,
                    7317,
                    7318,
                    7320,
                    7322
                ],
                "mat.shape": [
                    7314
                ],
                "baseCov.fill": [
                    7315
                ],
                "np.cov": [
                    7317
                ],
                "mat.T": [
                    7317
                ],
                "baseCov.reshape": [
                    7318
                ],
                "this.apply": [
                    7366
                ],
                "other.corr": [
                    7366
                ],
                "other._get_numeric_data": [
                    7368
                ],
                "this.align": [
                    7369
                ],
                "left.T": [
                    7372
                ],
                "right.T": [
                    7373
                ],
                "ldem": [
                    7384,
                    7381
                ],
                "left.mean": [
                    7381
                ],
                "rdem": [
                    7384,
                    7382
                ],
                "right.mean": [
                    7382
                ],
                "dom": [
                    7385,
                    7387
                ],
                "left.count": [
                    7385
                ],
                "left.std": [
                    7385
                ],
                "right.std": [
                    7385
                ],
                "nanops.nancorr": [
                    7392
                ],
                "left.values.T": [
                    7395
                ],
                "right.values.T": [
                    7395
                ],
                "left.columns": [
                    7395
                ],
                "raxis": [
                    7408,
                    7409
                ],
                "union": [
                    7409
                ],
                "this._get_axis": [
                    7409
                ],
                "other._get_axis": [
                    7409
                ],
                "result_index.difference": [
                    7410
                ],
                "correl.index": [
                    7410
                ],
                "correl.append": [
                    7413
                ],
                "self._count_level": [
                    7498
                ],
                "numeric_only": [
                    7522,
                    7942,
                    7498,
                    7596,
                    7500,
                    7635,
                    7867
                ],
                "frame._get_axis": [
                    7506,
                    7527
                ],
                "frame._get_agg_axis": [
                    7528,
                    7507,
                    7517
                ],
                "frame._is_mixed_type": [
                    7509,
                    7535
                ],
                "frame._data.any_extension_types": [
                    7509
                ],
                "frame._data": [
                    7509
                ],
                "series_counts": [
                    7515,
                    7516
                ],
                "series_counts.values": [
                    7516
                ],
                "result.astype": [
                    7649,
                    7647,
                    7519
                ],
                "count_axis": [
                    7552,
                    7553,
                    7527,
                    7530,
                    7549,
                    7551
                ],
                "self._get_axis_name": [
                    7532
                ],
                "frame.values": [
                    7541
                ],
                "mask.T": [
                    7546
                ],
                "count_axis._get_level_number": [
                    7549
                ],
                "level_name": [
                    7552,
                    7551
                ],
                "count_axis._names": [
                    7551
                ],
                "level_index": [
                    7552,
                    7554,
                    7556
                ],
                "_shallow_copy": [
                    7552
                ],
                "count_axis.levels": [
                    7552
                ],
                "level_codes": [
                    7553,
                    7554
                ],
                "ensure_int64": [
                    7553
                ],
                "count_axis.codes": [
                    7553
                ],
                "lib.count_level_2d": [
                    7554
                ],
                "filter_type": [
                    7648,
                    7646,
                    7590,
                    7567,
                    7601,
                    7610,
                    7580,
                    7582
                ],
                "constructor": [
                    7656,
                    7569,
                    7574
                ],
                "self._get_agg_axis": [
                    7736,
                    7573,
                    7774
                ],
                "skipna": [
                    7577,
                    7771,
                    7733
                ],
                "axis_matters": [
                    7583
                ],
                "self._get_bool_data": [
                    7585,
                    7587
                ],
                "np.bool_": [
                    7649,
                    7605
                ],
                "opa": [
                    7624,
                    7621
                ],
                "opa.get_result": [
                    7624
                ],
                "self.ndim": [
                    7625
                ],
                "result.iloc": [
                    7626
                ],
                "_get_data": [
                    7636,
                    7630
                ],
                "data._get_agg_axis": [
                    7633,
                    7639
                ],
                "result.dtype": [
                    7644
                ],
                "np.float64": [
                    7954,
                    7647
                ],
                "coerce_to_dtypes": [
                    7654
                ],
                "Series.nunique": [
                    7698
                ],
                "nanops.nanargmin": [
                    7733
                ],
                "nanops.nanargmax": [
                    7771
                ],
                "axis_num": [
                    7785,
                    7780,
                    7782
                ],
                "s.mode": [
                    7870
                ],
                "data.apply": [
                    7872
                ],
                "validate_percentile": [
                    7940
                ],
                "q": [
                    7940,
                    7952,
                    7953,
                    7954,
                    7957,
                    7963
                ],
                "is_transposed": [
                    7944,
                    7946,
                    7965,
                    7957
                ],
                "data.T": [
                    7947
                ],
                "data.columns": [
                    7949
                ],
                "self.columns.name": [
                    7951
                ],
                "data._data.quantile": [
                    7956
                ],
                "interpolation": [
                    7957
                ],
                "new_data.copy": [
                    7992,
                    8026
                ],
                "new_data.set_axis": [
                    8032,
                    8030,
                    7996,
                    7998
                ],
                "self.index.to_timestamp": [
                    7996
                ],
                "self.columns.to_timestamp": [
                    7998
                ],
                "self.index.to_period": [
                    8030
                ],
                "self.columns.to_period": [
                    8032
                ],
                "collections.defaultdict": [
                    8104
                ],
                "isin": [
                    8107
                ],
                "values.index.is_unique": [
                    8113,
                    8117
                ],
                "values.index": [
                    8113,
                    8117
                ],
                "self.eq": [
                    8115,
                    8119
                ],
                "values.reindex_like": [
                    8115,
                    8119
                ],
                "values.columns.is_unique": [
                    8117
                ],
                "values.columns": [
                    8117
                ],
                "reshape": [
                    8128
                ],
                "algorithms.isin": [
                    8128
                ],
                "self.values.ravel": [
                    8128
                ],
                "plot": [
                    8135
                ],
                "CachedAccessor": [
                    8138,
                    8135
                ],
                "pandas.plotting.PlotAccessor": [
                    8135
                ],
                "pandas.plotting": [
                    8136,
                    8137,
                    8135
                ],
                "pandas": [
                    8136,
                    8137,
                    8135
                ],
                "hist": [
                    8136
                ],
                "pandas.plotting.hist_frame": [
                    8136
                ],
                "boxplot": [
                    8137
                ],
                "pandas.plotting.boxplot_frame": [
                    8137
                ],
                "sparse": [
                    8138
                ],
                "SparseFrameAccessor": [
                    8138
                ],
                "DataFrame._setup_axes": [
                    8141
                ],
                "DataFrame._add_numeric_operations": [
                    8148
                ],
                "DataFrame._add_series_or_dataframe_operations": [
                    8149
                ],
                "ops.add_flex_arithmetic_methods": [
                    8151
                ],
                "ops.add_special_arithmetic_methods": [
                    8152
                ],
                "s.items": [
                    8159
                ],
                "new_data.get": [
                    8160
                ],
                "ljust": [
                    8166
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, pytz.FixedOffset(60)]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dbd0f70>\ntz_naive_fixture = None, timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, pytz.FixedOffset(60)]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, UTC]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dce99d0>\ntz_naive_fixture = 'UTC', timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, UTC]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, UTC]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11de49760>\ntz_naive_fixture = 'UTC', timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, UTC]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, US/Eastern]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dd82070>\ntz_naive_fixture = 'US/Eastern', timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, US/Eastern]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, US/Eastern]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11df27130>\ntz_naive_fixture = 'US/Eastern', timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, US/Eastern]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, Asia/Tokyo]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dcfbc40>\ntz_naive_fixture = 'Asia/Tokyo', timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, Asia/Tokyo]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, Asia/Tokyo]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11df27760>\ntz_naive_fixture = 'Asia/Tokyo', timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, Asia/Tokyo]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dc59220>\ntz_naive_fixture = 'dateutil/US/Pacific', timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11df27d90>\ntz_naive_fixture = 'dateutil/US/Pacific', timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dd75c70>\ntz_naive_fixture = 'dateutil/Asia/Singapore'\ntimestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11ddd2bb0>\ntz_naive_fixture = 'dateutil/Asia/Singapore', timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, tzutc()]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11de349d0>\ntz_naive_fixture = tzutc(), timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, tzutc()]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, tzutc()]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dbd0cd0>\ntz_naive_fixture = tzutc(), timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, tzutc()]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, tzlocal()]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dcfbd00>\ntz_naive_fixture = tzlocal(), timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, tzlocal()]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, tzlocal()]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11de345b0>\ntz_naive_fixture = tzlocal(), timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, tzlocal()]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, pytz.FixedOffset(300)]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11de494f0>\ntz_naive_fixture = pytz.FixedOffset(300), timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, pytz.FixedOffset(300)]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, pytz.FixedOffset(300)]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dc93040>\ntz_naive_fixture = pytz.FixedOffset(300), timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, pytz.FixedOffset(300)]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, UTC]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11df27820>\ntz_naive_fixture = <UTC>, timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, UTC]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, UTC]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dec41c0>\ntz_naive_fixture = <UTC>, timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, UTC]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, pytz.FixedOffset(-300)]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dd67a90>\ntz_naive_fixture = pytz.FixedOffset(-300)\ntimestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, pytz.FixedOffset(-300)]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, pytz.FixedOffset(-300)]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dc401c0>\ntz_naive_fixture = pytz.FixedOffset(-300), timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, pytz.FixedOffset(-300)]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, UTC]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dd82c40>\ntz_naive_fixture = datetime.timezone.utc, timestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, UTC]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, UTC]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dc599d0>\ntz_naive_fixture = datetime.timezone.utc, timestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, UTC]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, UTC+01:00]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dc40dc0>\ntz_naive_fixture = datetime.timezone(datetime.timedelta(seconds=3600))\ntimestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, UTC+01:00]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, UTC+01:00]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dc651c0>\ntz_naive_fixture = datetime.timezone(datetime.timedelta(seconds=3600))\ntimestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, UTC+01:00]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, foo]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dc35310>\ntz_naive_fixture = datetime.timezone(datetime.timedelta(days=-1, seconds=82800), 'foo')\ntimestamp = '2019-07-19 07:04:57+0100'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, foo]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_107/pandas/tests/frame/test_combine_concat.py",
                "test_function": "test_append_timestamps_aware_or_naive",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns, foo]",
                "full_test_error": "self = <pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon object at 0x11dc9a520>\ntz_naive_fixture = datetime.timezone(datetime.timedelta(days=-1, seconds=82800), 'foo')\ntimestamp = '2019-07-19 07:04:57'\n\n    @pytest.mark.parametrize(\n        \"timestamp\", [\"2019-07-19 07:04:57+0100\", \"2019-07-19 07:04:57\"]\n    )\n    def test_append_timestamps_aware_or_naive(self, tz_naive_fixture, timestamp):\n        # GH 30238\n        tz = tz_naive_fixture\n        df = pd.DataFrame([pd.Timestamp(timestamp, tz=tz)])\n        result = df.append(df.iloc[0]).iloc[-1]\n        expected = pd.Series(pd.Timestamp(timestamp, tz=tz), name=0)\n>       tm.assert_series_equal(result, expected)\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns, foo]\n\npandas/tests/frame/test_combine_concat.py:300: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('timestamp', ['2019-07-19 07:04:57+0100', '2019-07-19 07:04:57'])"
                ]
            }
        ]
    }
}