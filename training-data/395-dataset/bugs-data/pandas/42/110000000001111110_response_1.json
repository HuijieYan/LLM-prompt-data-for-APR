{
    "pandas": [
        {
            "bugID": 42,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1048,
            "file_name": "_testing.py",
            "replace_code": "def assert_series_equal(\n    left,\n    right,\n    check_dtype=True,\n    check_index_type=\"equiv\",\n    check_series_type=True,\n    check_less_precise=False,\n    check_names=True,\n    check_exact=False,\n    check_datetimelike_compat=False,\n    check_categorical=True,\n    check_category_order=True,\n    obj=\"Series\",\n):\n\n    \"\"\"\n    Check that left and right Series are equal.\n    \n    Parameters\n    ----------\n    left : Series\n    right : Series\n    check_dtype : bool, default True\n        Whether to check the Series dtype is identical.\n    check_index_type : {None, 'same', 'equivalent', 'equal', 'similar', 'compatible', 'equiv', 'equals'}, default 'equiv'\n        This parameter will be removed in a future version. This parameter is deprecated and will show a Deprecation Warning in future versions. The same behaviour can be achieved using: the equals and categoricals_warn parameters in DataFrame.equals\n    check_series_type : bool, default True\n         Whether to check the Series class is identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n    \n        When comparing two numbers, if the first number has magnitude less\n        than 1e-5, we compare the two numbers directly and check whether\n        they are equivalent within the specified precision. Otherwise, we\n        compare the **ratio** of the second number to the first number and\n        check whether it is equivalent to 1 within the specified precision.\n    check_names : bool, default True\n        Whether to check the Series and Index names attribute.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n    check_datetimelike_compat : bool, default False\n        Compare datetime-like which is comparable ignoring dtype.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    check_category_order : bool, default True\n        Whether to compare category order of internal Categoricals.\n    \n        .. versionadded:: 1.0.2\n    obj : str, default 'Series'\n        Specify object name being compared, internally used to show appropriate\n        assertion message.\n    \"\"\"\n    warnings.warn(\n        \"assert_series_equal is deprecated and will be removed in a future version.\"\n    )\n    \n    # instance validation\n    if check_series_type:\n        assert_class_equal(left, right, obj=obj)\n    \n    # length comparison\n    if len(left) != len(right):\n        raise AssertionError(f\"Series length are different: {len(left)} != {len(right)}\")\n    \n    # index comparison\n    assert_index_equal(\n        left.index,\n        right.index,\n        check_exact=check_index_type,\n        check_like=check_names,\n    )\n    \n    if check_dtype:\n        if left.dtype != right.dtype:\n            raise AssertionError(f\"Series dtype are different: {left.dtype} != {right.dtype}\")\n    \n    if check_exact:\n        if not is_numeric_dtype(left.dtype):\n            raise AssertionError(\"check_exact may only be used with numeric Series\")\n    \n        assert_numpy_array_equal(\n            left.array,\n            right.array,\n            check_dtype=check_dtype,\n            obj=str(obj),\n        )\n    elif check_less_precise and is_datetime64_or_timedelta64_dtype(left.dtype):\n        if not needs_i8_conversion(left.dtype):\n            diff = left.array - right.array\n            raise AssertionError(\n                f\"Left and right Series are different: {diff}\"\n            )\n    elif is_interval_dtype(left) or is_interval_dtype(right):\n        assert_interval_array_equal(left.array, right.array)\n    elif check_categorical and (is_categorical_dtype(left) or is_categorical_dtype(right)):\n        assert_categorical_equal(\n            left.array,\n            right.array,\n            obj=obj,\n            check_category_order=check_category_order,\n        )\n    elif is_extension_array_dtype(left) or is_extension_array_dtype(right):\n        assert_extension_array_equal(left.array, right.array)\n    else:\n        assert_numpy_array_equal(\n            left.array,\n            right.array,\n            check_dtype=check_dtype,\n            obj=str(obj),\n        )\n    \n    # metadata comparison\n    if check_names:\n        assert_attr_equal(\"name\", left, right, obj=obj)\n    \n    if check_categorical:\n        if is_categorical_dtype(left) or is_categorical_dtype(right):\n            assert_categorical_equal(\n                left._values,\n                right._values,\n                obj=f\"{obj} category\",\n                check_category_order=check_category_order,\n            )"
        }
    ]
}