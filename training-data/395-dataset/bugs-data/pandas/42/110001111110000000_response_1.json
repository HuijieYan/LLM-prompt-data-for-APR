{
    "pandas": [
        {
            "bugID": 42,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1048,
            "file_name": "pandas/_testing.py",
            "replace_code": "def assert_series_equal(\n        left,\n        right,\n        check_dtype=True,\n        check_index_type=\"equiv\",\n        check_series_type=True,\n        check_less_precise=False,\n        check_names=True,\n        check_exact=False,\n        check_datetimelike_compat=False,\n        check_categorical=True,\n        check_category_order=True,\n        obj=\"Series\",\n    ):\n    import pandas._testing as _testing\n    from pandas.core.arrays.categorical import is_categorical_dtype\n    from pandas.core.arrays.datetimes import needs_i8_conversion\n    from pandas.core.arrays.interval import is_interval_dtype\n    from pandas.core.dtypes.dtypes import (is_extension_array_dtype,\n                                       is_numeric_dtype,\n                                       is_categorical_dtype)\n    from pandas.util._validators import validate_bool_kwarg\n    import pytest\n    \"\"\"\n    Check that left and right Series are equal.\n    \n    Parameters\n    ----------\n    left : Series\n    right : Series\n    check_dtype : bool, default True\n        Whether to check the Series dtype is identical.\n    check_index_type : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical.\n    check_series_type : bool, default True\n         Whether to check the Series class is identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n    \n        When comparing two numbers, if the first number has magnitude less\n        than 1e-5, we compare the two numbers directly and check whether\n        they are equivalent within the specified precision. Otherwise, we\n        compare the **ratio** of the second number to the first number and\n        check whether it is equivalent to 1 within the specified precision.\n    check_names : bool, default True\n        Whether to check the Series and Index names attribute.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n    check_datetimelike_compat : bool, default False\n        Compare datetime-like which is comparable ignoring dtype.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    check_category_order : bool, default True\n        Whether to compare category order of internal Categoricals.\n    \n        .. versionadded:: 1.0.2\n    obj : str, default 'Series'\n        Specify object name being compared, internally used to show appropriate\n        assertion message.\n    \"\"\"\n    _testing.assert_series_comparable(\n        left, right, obj=obj, check_exact=check_exact\n    )\n    \n    if check_dtype:\n        validate_bool_kwarg(check_categorical, \"check_categorical\")\n        validate_bool_kwarg(check_category_order, \"check_category_order\")\n    \n        _testing.assert_series_almost_equal(\n            left,\n            right,\n            check_dtype=check_dtype,\n            check_index_type=check_index_type,\n            check_series_type=check_series_type,\n            check_less_precise=check_less_precise,\n            check_names=check_names,\n            check_exact=check_exact,\n            check_datetimelike_compat=check_datetimelike_compat,\n            check_categorical=check_categorical,\n            check_category_order=check_category_order,\n            obj=obj,\n        )\n    \n        if check_category_order and (is_categorical_dtype(left) or is_categorical_dtype(right)):\n            _testing.assert_categorical_equal(\n                left._values, right._values, obj=f\"for {obj} values\"\n            )"
        }
    ]
}