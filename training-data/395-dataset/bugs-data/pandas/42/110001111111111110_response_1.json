{
    "pandas": [
        {
            "bugID": 42,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1048,
            "file_name": "/pandas/_testing.py",
            "replace_code": "def assert_series_equal(\n    left,\n    right,\n    check_dtype=True,\n    check_index_type=\"equiv\",\n    check_series_type=True,\n    check_less_precise=False,\n    check_names=True,\n    check_exact=False,\n    check_datetimelike_compat=False,\n    check_categorical=True,\n    check_category_order=True,\n    obj=\"Series\",\n):\n\n    __tracebackhide__ = True\n    \n    # Updated instance validation\n    assert isinstance(left, pd.Series)\n    assert isinstance(right, pd.Series)\n    \n    if check_series_type:\n        assert_class_equal(left, right, exact=check_exact, obj=obj)\n    \n    # Length comparison\n    if len(left) != len(right):\n        msg1 = f\"{len(left)}, {left.index}\"\n        msg2 = f\"{len(right)}, {right.index}\"\n        raise_assert_detail(obj, \"Series length are different\", msg1, msg2)\n    \n    # Index comparison\n    assert_index_equal(\n        left.index,\n        right.index,\n        exact=check_index_type,\n        check_names=check_names,\n        check_less_precise=check_less_precise,\n        check_exact=check_exact,\n        check_categorical=check_categorical,\n        obj=f\"{obj}.index\",\n    )\n    \n    if check_dtype:\n        # If both Series are of Categorical dtype\n        if pd.api.types.is_categorical_dtype(left) and pd.api.types.is_categorical_dtype(right):\n            if check_categorical:\n                assert_categorical_equal(\n                    left._values,\n                    right._values,\n                    check_category_order=check_category_order,\n                )\n        elif (\n            pd.api.types.is_extension_array_dtype(left.dtype)\n            and pd.api.types.is_extension_array_dtype(right.dtype)\n        ):\n            assert_extension_array_equal(left, right, check_dtype, check_less_precise, check_exact)\n        else:\n            # If the dtypes are not categorical or extension arrays\n            assert_attr_equal(\"dtype\", left, right, obj=\"Attributes of Series\")\n    \n    if check_exact and pd.api.types.is_numeric_dtype(left.dtype):\n        assert_numpy_array_equal(\n            left._values, right._values, strict_nan=False, check_dtype=check_dtype, obj=str(obj)\n        )\n    elif check_datetimelike_compat and (\n        pd.api.types.needs_i8_conversion(left.dtype) or pd.api.types.needs_i8_conversion(right.dtype)\n    ):\n        if pd.Index(left._values).equals(pd.Index(right._values)):\n            msg = (\n                f\"[datetimelike_compat=True] {left._values} \"\n                f\"is not equal to {right._values}.\"\n            )\n            raise AssertionError(msg)\n    elif pd.api.types.is_interval_dtype(left.dtype) or pd.api.types.is_interval_dtype(right.dtype):\n        assert_interval_array_equal(left.array, right.array)\n    else:\n        raise_assert_detail(obj, \"Unsupported dtypes for comparison\", str(left.dtype), str(right.dtype))"
        }
    ]
}