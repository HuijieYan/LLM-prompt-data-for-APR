{
    "pandas": [
        {
            "bugID": 42,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1048,
            "file_name": "_testing.py",
            "replace_code": "def assert_series_equal(\n    left,\n    right,\n    check_dtype=True,\n    check_index_type=\"equiv\",\n    check_series_type=True,\n    check_less_precise=False,\n    check_names=True,\n    check_exact=False,\n    check_datetimelike_compat=False,\n    check_categorical=True,\n    check_category_order=True,\n    obj=\"Series\",\n):\n\n    # instance validation\n\n    if not isinstance(left, pd.Series) or not isinstance(right, pd.Series):\n        raise TypeError(\n            \"left and right must be of type pd.Series\"\n        )\n    \n    if check_series_type:\n        if type(left) != type(right):\n            raise AssertionError(\n                f\"{obj} class is not identical\"\n            )\n    \n    # length comparison\n    if len(left) != len(right):\n        msg1 = f\"{len(left)}, {left.index}\"\n        msg2 = f\"{len(right)}, {right.index}\"\n        raise AssertionError(\n            f\"{obj} length are different: {msg1} vs {msg2}\"\n        )\n    \n    # index comparison\n    if not left.index.equals(right.index, check_exact):\n        raise AssertionError(\n            f\"{obj} index are different: {left.index} vs {right.index}\"\n        )\n    \n    if check_dtype:\n        # We want to skip exact dtype checking when `check_categorical`\n        # is False. We'll still raise if only one is a `Categorical`,\n        # regardless of `check_categorical`\n        if (\n            isinstance(left.dtype, pd.CategoricalDtype)\n            and isinstance(right.dtype, pd.CategoricalDtype)\n            and not check_categorical\n        ):\n            pass\n        else:\n            if left.dtype != right.dtype:\n                raise AssertionError(\n                    f\"Attributes of {obj} are different: dtype {left.dtype} vs {right.dtype}\"\n                )\n    \n    if check_exact:\n        if not pd.api.types.is_numeric_dtype(left.dtype):\n            raise AssertionError(\"check_exact may only be used with numeric Series\")\n    \n        if not np.array_equal(left.values, right.values):\n            raise AssertionError(\n                f\"Values of {obj} are different: {left.values} vs {right.values}\"\n            )\n    elif check_datetimelike_compat and (\n        pd.api.types.needs_i8_conversion(left.dtype) or pd.api.types.needs_i8_conversion(right.dtype)\n    ):\n        if not pd.Index(left.values).equals(pd.Index(right.values)):\n            raise AssertionError(\n                f\"[datetimelike_compat=True] {left.values} is not equal to {right.values}.\"\n            )\n    elif pd.api.types.is_interval_dtype(left.dtype) or pd.api.types.is_interval_dtype(right.dtype):\n        if not pd.api.extensions.api.assert_interval_array_equal(left.array, right.array):\n            raise AssertionError(\"Interval arrays are not equal\")\n    elif pd.api.types.is_categorical_dtype(left.dtype) or pd.api.types.is_categorical_dtype(right.dtype):\n        if not pd.api.extensions.api.almost_equal(left.array, right.array):\n            raise AssertionError(\n                f\"Internal Categorical values of {obj} are different: \"\n                f\"{left.array} vs {right.array}\"\n            )\n    elif pd.api.types.is_extension_array_dtype(left.dtype) or pd.api.types.is_extension_array_dtype(right.dtype):\n        if not pd.api.extensions.api.assert_extension_array_equal(left.array, right.array):\n            raise AssertionError(f\"Internal Extension arrays of {obj} are different\")\n    elif pd.api.types.needs_i8_conversion(left.dtype) or pd.api.types.needs_i8_conversion(right.dtype):\n        if not pd.api.extensions.api.assert_extension_array_equal(left.array, right.array):\n            raise AssertionError(f\"Internal Extension arrays of {obj} are different\")\n    else:\n        if not pd.api.extensions.api.almost_equal(left.values, right.values):\n            raise AssertionError(\n                f\"Values of {obj} are different: {left.values} vs {right.values}\"\n            )\n    \n    # metadata comparison\n    if check_names:\n        if left.name != right.name:\n            raise AssertionError(f\"Name attribute of {obj} is different\")\n    \n    if check_categorical:\n        if pd.api.types.is_categorical_dtype(left) or pd.api.types.is_categorical_dtype(right):\n            if not pd.api.extensions.api.assert_categorical_equal(left.array, right.array):\n                raise AssertionError(f\"Category attribute of {obj} is different\")"
        }
    ]
}