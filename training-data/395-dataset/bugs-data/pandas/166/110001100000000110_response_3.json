{
    "pandas": [
        {
            "bugID": 166,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 7178,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def _join_compat(\n    self, other, on=None, how=\"left\", lsuffix=\"\", rsuffix=\"\", sort=False\n):\n    from pandas.core.reshape.merge import merge\n    from pandas.core.reshape.concat import concat\n    from pandas.core.reshape.merge import merge\n    from pandas.core.reshape.concat import concat\n    \n    if isinstance(other, Series):\n        if other.name is None:\n            raise ValueError(\"Other Series must have a name\")\n        other = DataFrame({other.name: other})\n    \n    if isinstance(other, DataFrame):\n        return merge(\n            self,\n            other,\n            left_on=on,\n            how=how,\n            left_index=on is None,\n            right_index=True,\n            suffixes=(lsuffix, rsuffix),\n            sort=sort,\n            )\n    else:\n        if on is not None:\n            raise ValueError(\n                \"Joining multiple DataFrames only supported for joining on index\"\n                )\n    \n        frames = [self] + list(other)\n    \n        can_concat = all(df.index.is_unique for df in frames)\n    \n        # join indexes only using concat\n        if can_concat:\n            if how == \"left\":\n                res = concat(frames, axis=1, join=\"outer\", verify_integrity=True)\n                return res.reindex(self.index, copy=False)\n            else:\n                return concat(frames, axis=1, join=how, verify_integrity=True, sort=sort)\n    \n        joined = frames[0]\n    \n        for frame in frames[1:]:\n            joined = merge(\n                joined, frame, how=how, left_index=True, right_index=True,\n                sort=sort\n                )\n    \n        return joined"
        }
    ]
}