{
    "pandas": [
        {
            "bugID": 162,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 585,
            "file_name": "core/reshape/pivot.py",
            "replace_code": "def _normalize(table, normalize, margins, margins_name=\"All\"):\n\n\n    if isinstance(normalize, (bool)):\n        if normalize == True:\n            normalize = \"all\"\n        elif normalize == False:\n            normalize = \"all\"\n    elif isinstance(normalize, str):\n        if normalize not in [\"index\", \"columns\", \"all\"]:\n            raise ValueError(\"Not a valid normalize argument\")\n    else:\n        raise ValueError(\"Not a valid normalize argument\")\n    \n    if isinstance(margins, bool):\n        if margins == False:\n    \n            # Actual Normalizations\n            normalizers = {\n                \"all\": lambda x: x / x.sum(axis=1).sum(axis=0),\n                \"columns\": lambda x: x / x.sum(),\n                \"index\": lambda x: x.div(x.sum(axis=1), axis=0),\n            }\n    \n            try:\n                f = normalizers[normalize]\n            except KeyError:\n                raise ValueError(\"Not a valid normalize argument\")\n    \n            table = f(table)\n            table = table.fillna(0)\n    \n        elif margins is True:\n    \n            column_margin = table.sum(axis=0)\n            index_margin = table.sum(axis=1)\n    \n            # Normalize core\n            table = _normalize(table, normalize=normalize, margins=False)\n    \n            # Fix Margins\n            if normalize == \"columns\":\n                column_margin = column_margin / column_margin.sum()\n                table.loc[\"Total\", :] = column_margin\n                table = table.fillna(0)\n    \n            elif normalize == \"index\":\n                index_margin = index_margin / index_margin.sum()\n                table.loc[:, \"Total\"] = index_margin\n                table = table.fillna(0)\n    \n            elif normalize == \"all\" or normalize is True:\n                column_margin = column_margin / column_margin.sum()\n                index_margin = index_margin / index_margin.sum()\n                table.loc[\"Total\", :] = column_margin\n                table.loc[:, \"Total\"] = index_margin\n                table.iloc[-1, -1] = 1\n                table = table.fillna(0)\n    \n            else:\n                raise ValueError(\"Not a valid normalize argument\")\n    \n    else:\n        raise ValueError(\"Not a valid margins argument\")\n    \n    return table"
        }
    ]
}