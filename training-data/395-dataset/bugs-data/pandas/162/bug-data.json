{
    "pandas:162": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_162/pandas/core/reshape/pivot.py": {
            "buggy_functions": [
                {
                    "function_name": "_normalize",
                    "function_code": "def _normalize(table, normalize, margins, margins_name=\"All\"):\n\n    if not isinstance(normalize, (bool, str)):\n        axis_subs = {0: \"index\", 1: \"columns\"}\n        try:\n            normalize = axis_subs[normalize]\n        except KeyError:\n            raise ValueError(\"Not a valid normalize argument\")\n\n    if margins is False:\n\n        # Actual Normalizations\n        normalizers = {\n            \"all\": lambda x: x / x.sum(axis=1).sum(axis=0),\n            \"columns\": lambda x: x / x.sum(),\n            \"index\": lambda x: x.div(x.sum(axis=1), axis=0),\n        }\n\n        normalizers[True] = normalizers[\"all\"]\n\n        try:\n            f = normalizers[normalize]\n        except KeyError:\n            raise ValueError(\"Not a valid normalize argument\")\n\n        table = f(table)\n        table = table.fillna(0)\n\n    elif margins is True:\n\n        column_margin = table.loc[:, margins_name].drop(margins_name)\n        index_margin = table.loc[margins_name, :].drop(margins_name)\n        table = table.drop(margins_name, axis=1).drop(margins_name)\n        # to keep index and columns names\n        table_index_names = table.index.names\n        table_columns_names = table.columns.names\n\n        # Normalize core\n        table = _normalize(table, normalize=normalize, margins=False)\n\n        # Fix Margins\n        if normalize == \"columns\":\n            column_margin = column_margin / column_margin.sum()\n            table = concat([table, column_margin], axis=1)\n            table = table.fillna(0)\n\n        elif normalize == \"index\":\n            index_margin = index_margin / index_margin.sum()\n            table = table.append(index_margin)\n            table = table.fillna(0)\n\n        elif normalize == \"all\" or normalize is True:\n            column_margin = column_margin / column_margin.sum()\n            index_margin = index_margin / index_margin.sum()\n            index_margin.loc[margins_name] = 1\n            table = concat([table, column_margin], axis=1)\n            table = table.append(index_margin)\n\n            table = table.fillna(0)\n\n        else:\n            raise ValueError(\"Not a valid normalize argument\")\n\n        table.index.names = table_index_names\n        table.columns.names = table_columns_names\n\n    else:\n        raise ValueError(\"Not a valid margins argument\")\n\n    return table\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 585,
                    "variables": {
                        "isinstance": [
                            587
                        ],
                        "normalize": [
                            587,
                            590,
                            623,
                            626,
                            631,
                            636,
                            606
                        ],
                        "bool": [
                            587
                        ],
                        "str": [
                            587
                        ],
                        "axis_subs": [
                            588,
                            590
                        ],
                        "KeyError": [
                            607,
                            591
                        ],
                        "ValueError": [
                            592,
                            652,
                            608,
                            646
                        ],
                        "margins": [
                            594,
                            613
                        ],
                        "normalizers": [
                            603,
                            597,
                            606
                        ],
                        "x": [
                            600,
                            598,
                            599
                        ],
                        "sum": [
                            598
                        ],
                        "x.sum": [
                            600,
                            598,
                            599
                        ],
                        "x.div": [
                            600
                        ],
                        "f": [
                            610,
                            606
                        ],
                        "table": [
                            640,
                            641,
                            610,
                            611,
                            643,
                            615,
                            616,
                            617,
                            648,
                            619,
                            620,
                            649,
                            654,
                            623,
                            628,
                            629,
                            633,
                            634
                        ],
                        "table.fillna": [
                            634,
                            611,
                            643,
                            629
                        ],
                        "column_margin": [
                            640,
                            615,
                            627,
                            628,
                            637
                        ],
                        "drop": [
                            616,
                            617,
                            615
                        ],
                        "table.loc": [
                            616,
                            615
                        ],
                        "margins_name": [
                            616,
                            617,
                            639,
                            615
                        ],
                        "index_margin": [
                            641,
                            616,
                            632,
                            633,
                            638,
                            639
                        ],
                        "table.drop": [
                            617
                        ],
                        "table_index_names": [
                            648,
                            619
                        ],
                        "table.index.names": [
                            648,
                            619
                        ],
                        "table.index": [
                            648,
                            619
                        ],
                        "table_columns_names": [
                            649,
                            620
                        ],
                        "table.columns.names": [
                            649,
                            620
                        ],
                        "table.columns": [
                            649,
                            620
                        ],
                        "_normalize": [
                            623
                        ],
                        "column_margin.sum": [
                            627,
                            637
                        ],
                        "concat": [
                            640,
                            628
                        ],
                        "index_margin.sum": [
                            632,
                            638
                        ],
                        "table.append": [
                            633,
                            641
                        ],
                        "index_margin.loc": [
                            639
                        ]
                    },
                    "filtered_variables": {
                        "normalize": [
                            587,
                            590,
                            623,
                            626,
                            631,
                            636,
                            606
                        ],
                        "axis_subs": [
                            588,
                            590
                        ],
                        "margins": [
                            594,
                            613
                        ],
                        "normalizers": [
                            603,
                            597,
                            606
                        ],
                        "x": [
                            600,
                            598,
                            599
                        ],
                        "x.sum": [
                            600,
                            598,
                            599
                        ],
                        "x.div": [
                            600
                        ],
                        "f": [
                            610,
                            606
                        ],
                        "table": [
                            640,
                            641,
                            610,
                            611,
                            643,
                            615,
                            616,
                            617,
                            648,
                            619,
                            620,
                            649,
                            654,
                            623,
                            628,
                            629,
                            633,
                            634
                        ],
                        "table.fillna": [
                            634,
                            611,
                            643,
                            629
                        ],
                        "column_margin": [
                            640,
                            615,
                            627,
                            628,
                            637
                        ],
                        "drop": [
                            616,
                            617,
                            615
                        ],
                        "table.loc": [
                            616,
                            615
                        ],
                        "margins_name": [
                            616,
                            617,
                            639,
                            615
                        ],
                        "index_margin": [
                            641,
                            616,
                            632,
                            633,
                            638,
                            639
                        ],
                        "table.drop": [
                            617
                        ],
                        "table_index_names": [
                            648,
                            619
                        ],
                        "table.index.names": [
                            648,
                            619
                        ],
                        "table.index": [
                            648,
                            619
                        ],
                        "table_columns_names": [
                            649,
                            620
                        ],
                        "table.columns.names": [
                            649,
                            620
                        ],
                        "table.columns": [
                            649,
                            620
                        ],
                        "_normalize": [
                            623
                        ],
                        "column_margin.sum": [
                            627,
                            637
                        ],
                        "concat": [
                            640,
                            628
                        ],
                        "index_margin.sum": [
                            632,
                            638
                        ],
                        "table.append": [
                            633,
                            641
                        ],
                        "index_margin.loc": [
                            639
                        ]
                    },
                    "diff_line_number": 614,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "normalize": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "axis_subs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "normalizers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.div": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table": {
                                    "variable_value": "C              large  small  Sub-Total\nA         B                           \nbar       one      1      1          2\n          two      1      1          2\nfoo       one      2      1          3\n          two      0      2          2\nSub-Total          4      5          9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "5"
                                },
                                "table.fillna": {
                                    "variable_value": "<bound method DataFrame.fillna of C              large  small  Sub-Total\nA         B                           \nbar       one      1      1          2\n          two      1      1          2\nfoo       one      2      1          3\n          two      0      2          2\nSub-Total          4      5          9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "column_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "drop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.loc": {
                                    "variable_value": "<pandas.core.indexing._LocIndexer object at 0x114289310>",
                                    "variable_type": "_LocIndexer",
                                    "variable_shape": null
                                },
                                "margins_name": {
                                    "variable_value": "'Sub-Total'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "index_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.drop": {
                                    "variable_value": "<bound method DataFrame.drop of C              large  small  Sub-Total\nA         B                           \nbar       one      1      1          2\n          two      1      1          2\nfoo       one      2      1          3\n          two      0      2          2\nSub-Total          4      5          9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "table_index_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "MultiIndex([(      'bar', 'one'),\n            (      'bar', 'two'),\n            (      'foo', 'one'),\n            (      'foo', 'two'),\n            ('Sub-Total',    '')],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "5"
                                },
                                "table_columns_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.columns.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['large', 'small', 'Sub-Total'], dtype='object', name='C')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "_normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of C              large  small  Sub-Total\nA         B                           \nbar       one      1      1          2\n          two      1      1          2\nfoo       one      2      1          3\n          two      0      2          2\nSub-Total          4      5          9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index_margin.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "normalize": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "axis_subs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "normalizers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.div": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table": {
                                    "variable_value": "C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "4"
                                },
                                "table.fillna": {
                                    "variable_value": "<bound method DataFrame.fillna of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "table_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "MultiIndex([('bar', 'one'),\n            ('bar', 'two'),\n            ('foo', 'one'),\n            ('foo', 'two')],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "4"
                                },
                                "table_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['large', 'small'], dtype='object', name='C')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.iloc": {
                                    "variable_value": "<pandas.core.indexing._iLocIndexer object at 0x1190b6c70>",
                                    "variable_type": "_iLocIndexer",
                                    "variable_shape": null
                                },
                                "column_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index_margin.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "normalize": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "axis_subs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "normalizers": {
                                    "variable_value": "{'all': <function _normalize.<locals>.<lambda> at 0x11912e700>, 'columns': <function _normalize.<locals>.<lambda> at 0x11912e5e0>, 'index': <function _normalize.<locals>.<lambda> at 0x11912e040>, True: <function _normalize.<locals>.<lambda> at 0x11912e700>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.div": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "<function _normalize.<locals>.<lambda> at 0x11912e040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "table": {
                                    "variable_value": "C           large     small\nA   B                      \nbar one  0.500000  0.500000\n    two  0.500000  0.500000\nfoo one  0.666667  0.333333\n    two  0.000000  1.000000",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "4"
                                },
                                "table.fillna": {
                                    "variable_value": "<bound method DataFrame.fillna of C           large     small\nA   B                      \nbar one  0.500000  0.500000\n    two  0.500000  0.500000\nfoo one  0.666667  0.333333\n    two  0.000000  1.000000>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "table_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "MultiIndex([('bar', 'one'),\n            ('bar', 'two'),\n            ('foo', 'one'),\n            ('foo', 'two')],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "4"
                                },
                                "table_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['large', 'small'], dtype='object', name='C')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.iloc": {
                                    "variable_value": "<pandas.core.indexing._iLocIndexer object at 0x119114ea0>",
                                    "variable_type": "_iLocIndexer",
                                    "variable_shape": null
                                },
                                "column_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of C           large     small\nA   B                      \nbar one  0.500000  0.500000\n    two  0.500000  0.500000\nfoo one  0.666667  0.333333\n    two  0.000000  1.000000>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index_margin.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "normalize": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "axis_subs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "normalizers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.div": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table": {
                                    "variable_value": "C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "4"
                                },
                                "table.fillna": {
                                    "variable_value": "<bound method DataFrame.fillna of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "table_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "MultiIndex([('bar', 'one'),\n            ('bar', 'two'),\n            ('foo', 'one'),\n            ('foo', 'two')],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "4"
                                },
                                "table_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['large', 'small'], dtype='object', name='C')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.iloc": {
                                    "variable_value": "<pandas.core.indexing._iLocIndexer object at 0x1190b6c70>",
                                    "variable_type": "_iLocIndexer",
                                    "variable_shape": null
                                },
                                "column_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index_margin.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "normalize": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "axis_subs": {
                                    "variable_value": "{0: 'index', 1: 'columns'}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "margins": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "normalizers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.div": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table": {
                                    "variable_value": "C                 large     small\nA         B                      \nbar       one  0.500000  0.500000\n          two  0.500000  0.500000\nfoo       one  0.666667  0.333333\n          two  0.000000  1.000000\nSub-Total      0.444444  0.555556",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "5"
                                },
                                "table.fillna": {
                                    "variable_value": "<bound method DataFrame.fillna of C                 large     small\nA         B                      \nbar       one  0.500000  0.500000\n          two  0.500000  0.500000\nfoo       one  0.666667  0.333333\n          two  0.000000  1.000000\nSub-Total      0.444444  0.555556>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "table_index": {
                                    "variable_value": "MultiIndex([(      'bar', 'one'),\n            (      'bar', 'two'),\n            (      'foo', 'one'),\n            (      'foo', 'two'),\n            ('Sub-Total',    '')],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "5"
                                },
                                "table.index": {
                                    "variable_value": "MultiIndex([(      'bar', 'one'),\n            (      'bar', 'two'),\n            (      'foo', 'one'),\n            (      'foo', 'two'),\n            ('Sub-Total',    '')],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "5"
                                },
                                "table_columns": {
                                    "variable_value": "Index(['large', 'small', 'Sub-Total'], dtype='object', name='C')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "table.columns": {
                                    "variable_value": "Index(['large', 'small'], dtype='object', name='C')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "margins_name": {
                                    "variable_value": "'Sub-Total'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.iloc": {
                                    "variable_value": "<pandas.core.indexing._iLocIndexer object at 0x119144e00>",
                                    "variable_type": "_iLocIndexer",
                                    "variable_shape": null
                                },
                                "column_margin": {
                                    "variable_value": "A    B  \nbar  one    2\n     two    2\nfoo  one    3\n     two    2\nName: Sub-Total, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "4"
                                },
                                "index_margin": {
                                    "variable_value": "C\nlarge    0.444444\nsmall    0.555556\nName: (Sub-Total, ), dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "2"
                                },
                                "_normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column_margin.sum": {
                                    "variable_value": "<bound method Series.sum of A    B  \nbar  one    2\n     two    2\nfoo  one    3\n     two    2\nName: Sub-Total, dtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin.sum": {
                                    "variable_value": "<bound method Series.sum of C\nlarge    0.444444\nsmall    0.555556\nName: (Sub-Total, ), dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of C                 large     small\nA         B                      \nbar       one  0.500000  0.500000\n          two  0.500000  0.500000\nfoo       one  0.666667  0.333333\n          two  0.000000  1.000000\nSub-Total      0.444444  0.555556>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index_margin.loc": {
                                    "variable_value": "<pandas.core.indexing._LocIndexer object at 0x1190dfb80>",
                                    "variable_type": "_LocIndexer",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "normalize": {
                                    "variable_value": "'columns'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "axis_subs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "normalizers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.div": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table": {
                                    "variable_value": "C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "4"
                                },
                                "table.fillna": {
                                    "variable_value": "<bound method DataFrame.fillna of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "table_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "MultiIndex([('bar', 'one'),\n            ('bar', 'two'),\n            ('foo', 'one'),\n            ('foo', 'two')],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "4"
                                },
                                "table_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['large', 'small'], dtype='object', name='C')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.iloc": {
                                    "variable_value": "<pandas.core.indexing._iLocIndexer object at 0x1190fa360>",
                                    "variable_type": "_iLocIndexer",
                                    "variable_shape": null
                                },
                                "column_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index_margin.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "normalize": {
                                    "variable_value": "'columns'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "axis_subs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "normalizers": {
                                    "variable_value": "{'all': <function _normalize.<locals>.<lambda> at 0x1190eb040>, 'columns': <function _normalize.<locals>.<lambda> at 0x1190eb0d0>, 'index': <function _normalize.<locals>.<lambda> at 0x1190eb160>, True: <function _normalize.<locals>.<lambda> at 0x1190eb040>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.div": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "<function _normalize.<locals>.<lambda> at 0x1190eb0d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "table": {
                                    "variable_value": "C        large  small\nA   B                \nbar one   0.25    0.2\n    two   0.25    0.2\nfoo one   0.50    0.2\n    two   0.00    0.4",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "4"
                                },
                                "table.fillna": {
                                    "variable_value": "<bound method DataFrame.fillna of C        large  small\nA   B                \nbar one   0.25    0.2\n    two   0.25    0.2\nfoo one   0.50    0.2\n    two   0.00    0.4>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "table_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "MultiIndex([('bar', 'one'),\n            ('bar', 'two'),\n            ('foo', 'one'),\n            ('foo', 'two')],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "4"
                                },
                                "table_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['large', 'small'], dtype='object', name='C')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.iloc": {
                                    "variable_value": "<pandas.core.indexing._iLocIndexer object at 0x119142310>",
                                    "variable_type": "_iLocIndexer",
                                    "variable_shape": null
                                },
                                "column_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of C        large  small\nA   B                \nbar one   0.25    0.2\n    two   0.25    0.2\nfoo one   0.50    0.2\n    two   0.00    0.4>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index_margin.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "normalize": {
                                    "variable_value": "'columns'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "axis_subs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "normalizers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.div": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table": {
                                    "variable_value": "C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "4"
                                },
                                "table.fillna": {
                                    "variable_value": "<bound method DataFrame.fillna of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "table_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "MultiIndex([('bar', 'one'),\n            ('bar', 'two'),\n            ('foo', 'one'),\n            ('foo', 'two')],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "4"
                                },
                                "table_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['large', 'small'], dtype='object', name='C')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.iloc": {
                                    "variable_value": "<pandas.core.indexing._iLocIndexer object at 0x1190fa360>",
                                    "variable_type": "_iLocIndexer",
                                    "variable_shape": null
                                },
                                "column_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index_margin.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "normalize": {
                                    "variable_value": "'columns'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "axis_subs": {
                                    "variable_value": "{0: 'index', 1: 'columns'}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "margins": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "normalizers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.div": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table": {
                                    "variable_value": "C        large  small  Sub-Total\nA   B                           \nbar one   0.25    0.2   0.222222\n    two   0.25    0.2   0.222222\nfoo one   0.50    0.2   0.333333\n    two   0.00    0.4   0.222222",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "4"
                                },
                                "table.fillna": {
                                    "variable_value": "<bound method DataFrame.fillna of C        large  small  Sub-Total\nA   B                           \nbar one   0.25    0.2   0.222222\n    two   0.25    0.2   0.222222\nfoo one   0.50    0.2   0.333333\n    two   0.00    0.4   0.222222>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "table_index": {
                                    "variable_value": "MultiIndex([(      'bar', 'one'),\n            (      'bar', 'two'),\n            (      'foo', 'one'),\n            (      'foo', 'two'),\n            ('Sub-Total',    '')],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "5"
                                },
                                "table.index": {
                                    "variable_value": "MultiIndex([('bar', 'one'),\n            ('bar', 'two'),\n            ('foo', 'one'),\n            ('foo', 'two')],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "4"
                                },
                                "table_columns": {
                                    "variable_value": "Index(['large', 'small', 'Sub-Total'], dtype='object', name='C')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "table.columns": {
                                    "variable_value": "Index(['large', 'small', 'Sub-Total'], dtype='object', name='C')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "margins_name": {
                                    "variable_value": "'Sub-Total'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.iloc": {
                                    "variable_value": "<pandas.core.indexing._iLocIndexer object at 0x119139ef0>",
                                    "variable_type": "_iLocIndexer",
                                    "variable_shape": null
                                },
                                "column_margin": {
                                    "variable_value": "A    B  \nbar  one    0.222222\n     two    0.222222\nfoo  one    0.333333\n     two    0.222222\nName: Sub-Total, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "4"
                                },
                                "index_margin": {
                                    "variable_value": "C\nlarge    4\nsmall    5\nName: (Sub-Total, ), dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "2"
                                },
                                "_normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column_margin.sum": {
                                    "variable_value": "<bound method Series.sum of A    B  \nbar  one    0.222222\n     two    0.222222\nfoo  one    0.333333\n     two    0.222222\nName: Sub-Total, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin.sum": {
                                    "variable_value": "<bound method Series.sum of C\nlarge    4\nsmall    5\nName: (Sub-Total, ), dtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of C        large  small  Sub-Total\nA   B                           \nbar one   0.25    0.2   0.222222\n    two   0.25    0.2   0.222222\nfoo one   0.50    0.2   0.333333\n    two   0.00    0.4   0.222222>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index_margin.loc": {
                                    "variable_value": "<pandas.core.indexing._LocIndexer object at 0x119139950>",
                                    "variable_type": "_LocIndexer",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "normalize": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "axis_subs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "normalizers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.div": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table": {
                                    "variable_value": "C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "4"
                                },
                                "table.fillna": {
                                    "variable_value": "<bound method DataFrame.fillna of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "table_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "MultiIndex([('bar', 'one'),\n            ('bar', 'two'),\n            ('foo', 'one'),\n            ('foo', 'two')],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "4"
                                },
                                "table_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['large', 'small'], dtype='object', name='C')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.iloc": {
                                    "variable_value": "<pandas.core.indexing._iLocIndexer object at 0x1190aa8b0>",
                                    "variable_type": "_iLocIndexer",
                                    "variable_shape": null
                                },
                                "column_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index_margin.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "normalize": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "axis_subs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "normalizers": {
                                    "variable_value": "{'all': <function _normalize.<locals>.<lambda> at 0x1191041f0>, 'columns': <function _normalize.<locals>.<lambda> at 0x119104550>, 'index': <function _normalize.<locals>.<lambda> at 0x119104790>, True: <function _normalize.<locals>.<lambda> at 0x1191041f0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.div": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "<function _normalize.<locals>.<lambda> at 0x1191041f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "table": {
                                    "variable_value": "C           large     small\nA   B                      \nbar one  0.111111  0.111111\n    two  0.111111  0.111111\nfoo one  0.222222  0.111111\n    two  0.000000  0.222222",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "4"
                                },
                                "table.fillna": {
                                    "variable_value": "<bound method DataFrame.fillna of C           large     small\nA   B                      \nbar one  0.111111  0.111111\n    two  0.111111  0.111111\nfoo one  0.222222  0.111111\n    two  0.000000  0.222222>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "table_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "MultiIndex([('bar', 'one'),\n            ('bar', 'two'),\n            ('foo', 'one'),\n            ('foo', 'two')],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "4"
                                },
                                "table_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['large', 'small'], dtype='object', name='C')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.iloc": {
                                    "variable_value": "<pandas.core.indexing._iLocIndexer object at 0x1190f76d0>",
                                    "variable_type": "_iLocIndexer",
                                    "variable_shape": null
                                },
                                "column_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of C           large     small\nA   B                      \nbar one  0.111111  0.111111\n    two  0.111111  0.111111\nfoo one  0.222222  0.111111\n    two  0.000000  0.222222>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index_margin.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "normalize": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "axis_subs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "normalizers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.div": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table": {
                                    "variable_value": "C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "4"
                                },
                                "table.fillna": {
                                    "variable_value": "<bound method DataFrame.fillna of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "table_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "MultiIndex([('bar', 'one'),\n            ('bar', 'two'),\n            ('foo', 'one'),\n            ('foo', 'two')],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "4"
                                },
                                "table_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['large', 'small'], dtype='object', name='C')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.iloc": {
                                    "variable_value": "<pandas.core.indexing._iLocIndexer object at 0x1190aa8b0>",
                                    "variable_type": "_iLocIndexer",
                                    "variable_shape": null
                                },
                                "column_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index_margin.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "normalize": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "axis_subs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "normalizers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.sum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.div": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table": {
                                    "variable_value": "C                 large     small  Sub-Total\nA         B                                 \nbar       one  0.111111  0.111111   0.222222\n          two  0.111111  0.111111   0.222222\nfoo       one  0.222222  0.111111   0.333333\n          two  0.000000  0.222222   0.222222\nSub-Total      0.444444  0.555556   1.000000",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "5"
                                },
                                "table.fillna": {
                                    "variable_value": "<bound method DataFrame.fillna of C                 large     small  Sub-Total\nA         B                                 \nbar       one  0.111111  0.111111   0.222222\n          two  0.111111  0.111111   0.222222\nfoo       one  0.222222  0.111111   0.333333\n          two  0.000000  0.222222   0.222222\nSub-Total      0.444444  0.555556   1.000000>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "table_index": {
                                    "variable_value": "MultiIndex([(      'bar', 'one'),\n            (      'bar', 'two'),\n            (      'foo', 'one'),\n            (      'foo', 'two'),\n            ('Sub-Total',    '')],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "5"
                                },
                                "table.index": {
                                    "variable_value": "MultiIndex([(      'bar', 'one'),\n            (      'bar', 'two'),\n            (      'foo', 'one'),\n            (      'foo', 'two'),\n            ('Sub-Total',    '')],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "5"
                                },
                                "table_columns": {
                                    "variable_value": "Index(['large', 'small', 'Sub-Total'], dtype='object', name='C')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "table.columns": {
                                    "variable_value": "Index(['large', 'small', 'Sub-Total'], dtype='object', name='C')",
                                    "variable_type": "Index",
                                    "variable_shape": "3"
                                },
                                "margins_name": {
                                    "variable_value": "'Sub-Total'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.iloc": {
                                    "variable_value": "<pandas.core.indexing._iLocIndexer object at 0x1190f5360>",
                                    "variable_type": "_iLocIndexer",
                                    "variable_shape": null
                                },
                                "column_margin": {
                                    "variable_value": "A    B  \nbar  one    0.222222\n     two    0.222222\nfoo  one    0.333333\n     two    0.222222\nName: Sub-Total, dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "4"
                                },
                                "index_margin": {
                                    "variable_value": "C\nlarge        0.444444\nsmall        0.555556\nSub-Total    1.000000\nName: (Sub-Total, ), dtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "_normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column_margin.sum": {
                                    "variable_value": "<bound method Series.sum of A    B  \nbar  one    0.222222\n     two    0.222222\nfoo  one    0.333333\n     two    0.222222\nName: Sub-Total, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "concat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_margin.sum": {
                                    "variable_value": "<bound method Series.sum of C\nlarge        0.444444\nsmall        0.555556\nSub-Total    1.000000\nName: (Sub-Total, ), dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of C                 large     small  Sub-Total\nA         B                                 \nbar       one  0.111111  0.111111   0.222222\n          two  0.111111  0.111111   0.222222\nfoo       one  0.222222  0.111111   0.333333\n          two  0.000000  0.222222   0.222222\nSub-Total      0.444444  0.555556   1.000000>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "index_margin.loc": {
                                    "variable_value": "<pandas.core.indexing._LocIndexer object at 0x1190f7630>",
                                    "variable_type": "_LocIndexer",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "@Substitution(\"\\ndata : DataFrame\")\n@Appender(_shared_docs[\"pivot_table\"], indents=1)\ndef pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n):\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        if is_list_like(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n\n        # GH14938 Make sure value labels are in data\n        for i in values:\n            if i not in data:\n                raise KeyError(i)\n\n        to_filter = []\n        for x in keys + values:\n            if isinstance(x, Grouper):\n                x = x.key\n            try:\n                if x in data:\n                    to_filter.append(x)\n            except TypeError:\n                pass\n        if len(to_filter) < len(data.columns):\n            data = data[to_filter]\n\n    else:\n        values = data.columns\n        for key in keys:\n            try:\n                values = values.drop(key)\n            except (TypeError, ValueError, KeyError):\n                pass\n        values = list(values)\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n\n        # gh-21133\n        # we want to down cast if\n        # the original values are ints\n        # as we grouped with a NaN value\n        # and then dropped, coercing to floats\n        for v in values:\n            if (\n                v in data\n                and is_integer_dtype(data[v])\n                and v in agged\n                and not is_integer_dtype(agged[v])\n            ):\n                agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n    table = agged\n    if table.index.nlevels > 1:\n        # Related GH #17123\n        # If index_names are integers, determine whether the integers refer\n        # to the level position or name.\n        index_names = agged.index.names[: len(index)]\n        to_unstack = []\n        for i in range(len(index), len(keys)):\n            name = agged.index.names[i]\n            if name is None or name in index_names:\n                to_unstack.append(i)\n            else:\n                to_unstack.append(name)\n        table = agged.unstack(to_unstack)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            m = MultiIndex.from_arrays(\n                cartesian_product(table.index.levels), names=table.index.names\n            )\n            table = table.reindex(m, axis=0)\n\n        if table.columns.nlevels > 1:\n            m = MultiIndex.from_arrays(\n                cartesian_product(table.columns.levels), names=table.columns.names\n            )\n            table = table.reindex(m, axis=1)\n\n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table.fillna(value=fill_value, downcast=\"infer\")\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    # discard the top level\n    if (\n        values_passed\n        and not values_multi\n        and not table.empty\n        and (table.columns.nlevels > 1)\n    ):\n        table = table[values[0]]\n\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    # GH 15193 Make sure empty columns are removed if dropna=True\n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
                "def _add_margins(\n    table,\n    data,\n    values,\n    rows,\n    cols,\n    aggfunc,\n    observed=None,\n    margins_name=\"All\",\n    fill_value=None,\n):\n    if not isinstance(margins_name, str):\n        raise ValueError(\"margins_name argument must be a string\")\n\n    msg = 'Conflicting name \"{name}\" in margins'.format(name=margins_name)\n    for level in table.index.names:\n        if margins_name in table.index.get_level_values(level):\n            raise ValueError(msg)\n\n    grand_margin = _compute_grand_margin(data, values, aggfunc, margins_name)\n\n    # could be passed a Series object with no 'columns'\n    if hasattr(table, \"columns\"):\n        for level in table.columns.names[1:]:\n            if margins_name in table.columns.get_level_values(level):\n                raise ValueError(msg)\n\n    if len(rows) > 1:\n        key = (margins_name,) + (\"\",) * (len(rows) - 1)\n    else:\n        key = margins_name\n\n    if not values and isinstance(table, ABCSeries):\n        # If there are no values and the table is a series, then there is only\n        # one column in the data. Compute grand margin and return it.\n        return table.append(Series({key: grand_margin[margins_name]}))\n\n    if values:\n        marginal_result_set = _generate_marginal_results(\n            table,\n            data,\n            values,\n            rows,\n            cols,\n            aggfunc,\n            observed,\n            grand_margin,\n            margins_name,\n        )\n        if not isinstance(marginal_result_set, tuple):\n            return marginal_result_set\n        result, margin_keys, row_margin = marginal_result_set\n    else:\n        marginal_result_set = _generate_marginal_results_without_values(\n            table, data, rows, cols, aggfunc, observed, margins_name\n        )\n        if not isinstance(marginal_result_set, tuple):\n            return marginal_result_set\n        result, margin_keys, row_margin = marginal_result_set\n    row_margin = row_margin.reindex(result.columns, fill_value=fill_value)\n    # populate grand margin\n    for k in margin_keys:\n        if isinstance(k, str):\n            row_margin[k] = grand_margin[k]\n        else:\n            row_margin[k] = grand_margin[k[0]]\n\n    from pandas import DataFrame\n\n    margin_dummy = DataFrame(row_margin, columns=[key]).T\n\n    row_names = result.index.names\n    try:\n        for dtype in set(result.dtypes):\n            cols = result.select_dtypes([dtype]).columns\n            margin_dummy[cols] = margin_dummy[cols].astype(dtype)\n        result = result.append(margin_dummy)\n    except TypeError:\n\n        # we cannot reshape, so coerce the axis\n        result.index = result.index._to_safe_for_reshape()\n        result = result.append(margin_dummy)\n    result.index.names = row_names\n\n    return result",
                "def _compute_grand_margin(data, values, aggfunc, margins_name=\"All\"):\n\n    if values:\n        grand_margin = {}\n        for k, v in data[values].items():\n            try:\n                if isinstance(aggfunc, str):\n                    grand_margin[k] = getattr(v, aggfunc)()\n                elif isinstance(aggfunc, dict):\n                    if isinstance(aggfunc[k], str):\n                        grand_margin[k] = getattr(v, aggfunc[k])()\n                    else:\n                        grand_margin[k] = aggfunc[k](v)\n                else:\n                    grand_margin[k] = aggfunc(v)\n            except TypeError:\n                pass\n        return grand_margin\n    else:\n        return {margins_name: aggfunc(data.index)}",
                "def _generate_marginal_results(\n    table, data, values, rows, cols, aggfunc, observed, grand_margin, margins_name=\"All\"\n):\n    if len(cols) > 0:\n        # need to \"interleave\" the margins\n        table_pieces = []\n        margin_keys = []\n\n        def _all_key(key):\n            return (key, margins_name) + (\"\",) * (len(cols) - 1)\n\n        if len(rows) > 0:\n            margin = data[rows + values].groupby(rows, observed=observed).agg(aggfunc)\n            cat_axis = 1\n\n            for key, piece in table.groupby(level=0, axis=cat_axis, observed=observed):\n                all_key = _all_key(key)\n\n                # we are going to mutate this, so need to copy!\n                piece = piece.copy()\n                try:\n                    piece[all_key] = margin[key]\n                except TypeError:\n\n                    # we cannot reshape, so coerce the axis\n                    piece.set_axis(\n                        piece._get_axis(cat_axis)._to_safe_for_reshape(),\n                        axis=cat_axis,\n                        inplace=True,\n                    )\n                    piece[all_key] = margin[key]\n\n                table_pieces.append(piece)\n                margin_keys.append(all_key)\n        else:\n            margin = grand_margin\n            cat_axis = 0\n            for key, piece in table.groupby(level=0, axis=cat_axis, observed=observed):\n                all_key = _all_key(key)\n                table_pieces.append(piece)\n                table_pieces.append(Series(margin[key], index=[all_key]))\n                margin_keys.append(all_key)\n\n        result = concat(table_pieces, axis=cat_axis)\n\n        if len(rows) == 0:\n            return result\n    else:\n        result = table\n        margin_keys = table.columns\n\n    if len(cols) > 0:\n        row_margin = data[cols + values].groupby(cols, observed=observed).agg(aggfunc)\n        row_margin = row_margin.stack()\n\n        # slight hack\n        new_order = [len(cols)] + list(range(len(cols)))\n        row_margin.index = row_margin.index.reorder_levels(new_order)\n    else:\n        row_margin = Series(np.nan, index=result.columns)\n\n    return result, margin_keys, row_margin",
                "def _generate_marginal_results_without_values(\n    table, data, rows, cols, aggfunc, observed, margins_name=\"All\"\n):\n    if len(cols) > 0:\n        # need to \"interleave\" the margins\n        margin_keys = []\n\n        def _all_key():\n            if len(cols) == 1:\n                return margins_name\n            return (margins_name,) + (\"\",) * (len(cols) - 1)\n\n        if len(rows) > 0:\n            margin = data[rows].groupby(rows, observed=observed).apply(aggfunc)\n            all_key = _all_key()\n            table[all_key] = margin\n            result = table\n            margin_keys.append(all_key)\n\n        else:\n            margin = data.groupby(level=0, axis=0, observed=observed).apply(aggfunc)\n            all_key = _all_key()\n            table[all_key] = margin\n            result = table\n            margin_keys.append(all_key)\n            return result\n    else:\n        result = table\n        margin_keys = table.columns\n\n    if len(cols):\n        row_margin = data[cols].groupby(cols, observed=observed).apply(aggfunc)\n    else:\n        row_margin = Series(np.nan, index=result.columns)\n\n    return result, margin_keys, row_margin",
                "def _convert_by(by):\n    if by is None:\n        by = []\n    elif (\n        is_scalar(by)\n        or isinstance(by, (np.ndarray, Index, ABCSeries, Grouper))\n        or hasattr(by, \"__call__\")\n    ):\n        by = [by]\n    else:\n        by = list(by)\n    return by",
                "@Substitution(\"\\ndata : DataFrame\")\n@Appender(_shared_docs[\"pivot\"], indents=1)\ndef pivot(data, index=None, columns=None, values=None):\n    if values is None:\n        cols = [columns] if index is None else [index, columns]\n        append = index is None\n        indexed = data.set_index(cols, append=append)\n    else:\n        if index is None:\n            index = data.index\n        else:\n            index = data[index]\n        index = MultiIndex.from_arrays([index, data[columns]])\n\n        if is_list_like(values) and not isinstance(values, tuple):\n            # Exclude tuple because it is seen as a single column name\n            indexed = data._constructor(\n                data[values].values, index=index, columns=values\n            )\n        else:\n            indexed = data._constructor_sliced(data[values].values, index=index)\n    return indexed.unstack(columns)",
                "def crosstab(\n    index,\n    columns,\n    values=None,\n    rownames=None,\n    colnames=None,\n    aggfunc=None,\n    margins=False,\n    margins_name=\"All\",\n    dropna=True,\n    normalize=False,\n):\n    \"\"\"\n    Compute a simple cross tabulation of two (or more) factors. By default\n    computes a frequency table of the factors unless an array of values and an\n    aggregation function are passed.\n\n    Parameters\n    ----------\n    index : array-like, Series, or list of arrays/Series\n        Values to group by in the rows.\n    columns : array-like, Series, or list of arrays/Series\n        Values to group by in the columns.\n    values : array-like, optional\n        Array of values to aggregate according to the factors.\n        Requires `aggfunc` be specified.\n    rownames : sequence, default None\n        If passed, must match number of row arrays passed.\n    colnames : sequence, default None\n        If passed, must match number of column arrays passed.\n    aggfunc : function, optional\n        If specified, requires `values` be specified as well.\n    margins : bool, default False\n        Add row/column margins (subtotals).\n    margins_name : str, default 'All'\n        Name of the row/column that will contain the totals\n        when margins is True.\n\n        .. versionadded:: 0.21.0\n\n    dropna : bool, default True\n        Do not include columns whose entries are all NaN.\n    normalize : bool, {'all', 'index', 'columns'}, or {0,1}, default False\n        Normalize by dividing all values by the sum of values.\n\n        - If passed 'all' or `True`, will normalize over all values.\n        - If passed 'index' will normalize over each row.\n        - If passed 'columns' will normalize over each column.\n        - If margins is `True`, will also normalize margin values.\n\n    Returns\n    -------\n    DataFrame\n        Cross tabulation of the data.\n\n    See Also\n    --------\n    DataFrame.pivot : Reshape data based on column values.\n    pivot_table : Create a pivot table as a DataFrame.\n\n    Notes\n    -----\n    Any Series passed will have their name attributes used unless row or column\n    names for the cross-tabulation are specified.\n\n    Any input passed containing Categorical data will have **all** of its\n    categories included in the cross-tabulation, even if the actual data does\n    not contain any instances of a particular category.\n\n    In the event that there aren't overlapping indexes an empty DataFrame will\n    be returned.\n\n    Examples\n    --------\n    >>> a = np.array([\"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\",\n    ...               \"bar\", \"bar\", \"foo\", \"foo\", \"foo\"], dtype=object)\n    >>> b = np.array([\"one\", \"one\", \"one\", \"two\", \"one\", \"one\",\n    ...               \"one\", \"two\", \"two\", \"two\", \"one\"], dtype=object)\n    >>> c = np.array([\"dull\", \"dull\", \"shiny\", \"dull\", \"dull\", \"shiny\",\n    ...               \"shiny\", \"dull\", \"shiny\", \"shiny\", \"shiny\"],\n    ...              dtype=object)\n    >>> pd.crosstab(a, [b, c], rownames=['a'], colnames=['b', 'c'])\n    b   one        two\n    c   dull shiny dull shiny\n    a\n    bar    1     2    1     0\n    foo    2     2    1     2\n\n    Here 'c' and 'f' are not represented in the data and will not be\n    shown in the output because dropna is True by default. Set\n    dropna=False to preserve categories with no data.\n\n    >>> foo = pd.Categorical(['a', 'b'], categories=['a', 'b', 'c'])\n    >>> bar = pd.Categorical(['d', 'e'], categories=['d', 'e', 'f'])\n    >>> pd.crosstab(foo, bar)\n    col_0  d  e\n    row_0\n    a      1  0\n    b      0  1\n    >>> pd.crosstab(foo, bar, dropna=False)\n    col_0  d  e  f\n    row_0\n    a      1  0  0\n    b      0  1  0\n    c      0  0  0\n    \"\"\"\n\n    index = com.maybe_make_list(index)\n    columns = com.maybe_make_list(columns)\n\n    rownames = _get_names(index, rownames, prefix=\"row\")\n    colnames = _get_names(columns, colnames, prefix=\"col\")\n\n    common_idx = _get_objs_combined_axis(index + columns, intersect=True, sort=False)\n\n    data = {}\n    data.update(zip(rownames, index))\n    data.update(zip(colnames, columns))\n\n    if values is None and aggfunc is not None:\n        raise ValueError(\"aggfunc cannot be used without values.\")\n\n    if values is not None and aggfunc is None:\n        raise ValueError(\"values cannot be used without an aggfunc.\")\n\n    from pandas import DataFrame\n\n    df = DataFrame(data, index=common_idx)\n    if values is None:\n        df[\"__dummy__\"] = 0\n        kwargs = {\"aggfunc\": len, \"fill_value\": 0}\n    else:\n        df[\"__dummy__\"] = values\n        kwargs = {\"aggfunc\": aggfunc}\n\n    table = df.pivot_table(\n        \"__dummy__\",\n        index=rownames,\n        columns=colnames,\n        margins=margins,\n        margins_name=margins_name,\n        dropna=dropna,\n        **kwargs\n    )\n\n    # Post-process\n    if normalize is not False:\n        table = _normalize(\n            table, normalize=normalize, margins=margins, margins_name=margins_name\n        )\n\n    return table",
                "def _normalize(table, normalize, margins, margins_name=\"All\"):\n\n    if not isinstance(normalize, (bool, str)):\n        axis_subs = {0: \"index\", 1: \"columns\"}\n        try:\n            normalize = axis_subs[normalize]\n        except KeyError:\n            raise ValueError(\"Not a valid normalize argument\")\n\n    if margins is False:\n\n        # Actual Normalizations\n        normalizers = {\n            \"all\": lambda x: x / x.sum(axis=1).sum(axis=0),\n            \"columns\": lambda x: x / x.sum(),\n            \"index\": lambda x: x.div(x.sum(axis=1), axis=0),\n        }\n\n        normalizers[True] = normalizers[\"all\"]\n\n        try:\n            f = normalizers[normalize]\n        except KeyError:\n            raise ValueError(\"Not a valid normalize argument\")\n\n        table = f(table)\n        table = table.fillna(0)\n\n    elif margins is True:\n\n        column_margin = table.loc[:, margins_name].drop(margins_name)\n        index_margin = table.loc[margins_name, :].drop(margins_name)\n        table = table.drop(margins_name, axis=1).drop(margins_name)\n        # to keep index and columns names\n        table_index_names = table.index.names\n        table_columns_names = table.columns.names\n\n        # Normalize core\n        table = _normalize(table, normalize=normalize, margins=False)\n\n        # Fix Margins\n        if normalize == \"columns\":\n            column_margin = column_margin / column_margin.sum()\n            table = concat([table, column_margin], axis=1)\n            table = table.fillna(0)\n\n        elif normalize == \"index\":\n            index_margin = index_margin / index_margin.sum()\n            table = table.append(index_margin)\n            table = table.fillna(0)\n\n        elif normalize == \"all\" or normalize is True:\n            column_margin = column_margin / column_margin.sum()\n            index_margin = index_margin / index_margin.sum()\n            index_margin.loc[margins_name] = 1\n            table = concat([table, column_margin], axis=1)\n            table = table.append(index_margin)\n\n            table = table.fillna(0)\n\n        else:\n            raise ValueError(\"Not a valid normalize argument\")\n\n        table.index.names = table_index_names\n        table.columns.names = table_columns_names\n\n    else:\n        raise ValueError(\"Not a valid margins argument\")\n\n    return table",
                "def _get_names(arrs, names, prefix=\"row\"):\n    if names is None:\n        names = []\n        for i, arr in enumerate(arrs):\n            if isinstance(arr, ABCSeries) and arr.name is not None:\n                names.append(arr.name)\n            else:\n                names.append(\"{prefix}_{i}\".format(prefix=prefix, i=i))\n    else:\n        if len(names) != len(arrs):\n            raise AssertionError(\"arrays and names must have the same length\")\n        if not isinstance(names, list):\n            names = list(names)\n\n    return names",
                "def _all_key(key):\n    return (key, margins_name) + (\"\",) * (len(cols) - 1)",
                "def _all_key():\n    if len(cols) == 1:\n        return margins_name\n    return (margins_name,) + (\"\",) * (len(cols) - 1)"
            ],
            "inscope_function_signatures": [
                "pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False)",
                "_add_margins(table, data, values, rows, cols, aggfunc, observed=None, margins_name='All', fill_value=None)",
                "_compute_grand_margin(data, values, aggfunc, margins_name='All')",
                "_generate_marginal_results(table, data, values, rows, cols, aggfunc, observed, grand_margin, margins_name='All')",
                "_generate_marginal_results_without_values(table, data, rows, cols, aggfunc, observed, margins_name='All')",
                "_convert_by(by)",
                "pivot(data, index=None, columns=None, values=None)",
                "crosstab(index, columns, values=None, rownames=None, colnames=None, aggfunc=None, margins=False, margins_name='All', dropna=True, normalize=False)",
                "_normalize(table, normalize, margins, margins_name='All')",
                "_get_names(arrs, names, prefix='row')",
                "_all_key(key)",
                "_all_key()"
            ],
            "variables_in_file": {
                "index": [
                    538,
                    411,
                    155,
                    412,
                    541,
                    415,
                    416,
                    544,
                    34,
                    418,
                    419,
                    547,
                    424,
                    427,
                    44,
                    172,
                    58,
                    119,
                    121
                ],
                "_convert_by": [
                    34,
                    35
                ],
                "columns": [
                    256,
                    544,
                    35,
                    419,
                    548,
                    172,
                    45,
                    428,
                    539,
                    58,
                    411,
                    156,
                    542
                ],
                "isinstance": [
                    97,
                    193,
                    37,
                    421,
                    231,
                    587,
                    76,
                    142,
                    238,
                    176,
                    398,
                    275,
                    244,
                    277,
                    214,
                    278,
                    661,
                    668
                ],
                "aggfunc": [
                    386,
                    275,
                    276,
                    277,
                    278,
                    279,
                    281,
                    283,
                    157,
                    288,
                    37,
                    550,
                    40,
                    553,
                    303,
                    564,
                    201,
                    343,
                    96,
                    226,
                    236,
                    368,
                    375
                ],
                "list": [
                    64,
                    37,
                    669,
                    403,
                    347,
                    668,
                    93
                ],
                "pieces": [
                    56,
                    53,
                    38
                ],
                "keys": [
                    39,
                    75,
                    54,
                    56,
                    121,
                    58,
                    88,
                    95
                ],
                "func": [
                    40,
                    54,
                    47
                ],
                "table": [
                    640,
                    641,
                    130,
                    643,
                    132,
                    134,
                    383,
                    136,
                    648,
                    138,
                    649,
                    140,
                    142,
                    143,
                    654,
                    146,
                    151,
                    152,
                    167,
                    168,
                    41,
                    170,
                    173,
                    176,
                    177,
                    306,
                    179,
                    53,
                    566,
                    578,
                    579,
                    197,
                    198,
                    582,
                    328,
                    204,
                    205,
                    206,
                    339,
                    340,
                    214,
                    217,
                    221,
                    610,
                    611,
                    615,
                    616,
                    617,
                    619,
                    236,
                    620,
                    623,
                    633,
                    114,
                    115,
                    370,
                    371,
                    628,
                    629,
                    634,
                    377,
                    378,
                    382,
                    127
                ],
                "pivot_table": [
                    41
                ],
                "data": [
                    386,
                    273,
                    150,
                    153,
                    413,
                    288,
                    416,
                    418,
                    419,
                    546,
                    547,
                    548,
                    423,
                    424,
                    42,
                    427,
                    558,
                    303,
                    71,
                    201,
                    79,
                    83,
                    84,
                    343,
                    87,
                    222,
                    95,
                    107,
                    108,
                    236,
                    112,
                    368,
                    375
                ],
                "values": [
                    271,
                    273,
                    154,
                    410,
                    421,
                    550,
                    424,
                    553,
                    170,
                    43,
                    427,
                    303,
                    559,
                    563,
                    60,
                    62,
                    64,
                    67,
                    70,
                    201,
                    75,
                    214,
                    87,
                    343,
                    90,
                    219,
                    93,
                    223,
                    105
                ],
                "fill_value": [
                    160,
                    46,
                    145,
                    146,
                    241
                ],
                "margins": [
                    579,
                    613,
                    48,
                    594,
                    148,
                    570
                ],
                "dropna": [
                    129,
                    97,
                    176,
                    49,
                    149,
                    572,
                    158
                ],
                "margins_name": [
                    159,
                    288,
                    300,
                    50,
                    571,
                    193,
                    579,
                    196,
                    198,
                    201,
                    206,
                    210,
                    212,
                    217,
                    229,
                    615,
                    616,
                    617,
                    236,
                    364,
                    365,
                    639
                ],
                "observed": [
                    386,
                    227,
                    328,
                    236,
                    303,
                    368,
                    306,
                    51,
                    343,
                    375,
                    95
                ],
                "pieces.append": [
                    53
                ],
                "keys.append": [
                    54
                ],
                "getattr": [
                    276,
                    54,
                    279
                ],
                "concat": [
                    56,
                    628,
                    640,
                    334
                ],
                "values_passed": [
                    60,
                    61,
                    165
                ],
                "is_list_like": [
                    421,
                    62
                ],
                "values_multi": [
                    66,
                    166,
                    63
                ],
                "i": [
                    70,
                    71,
                    72,
                    660,
                    664,
                    121,
                    122,
                    124
                ],
                "KeyError": [
                    72,
                    91,
                    607,
                    591
                ],
                "to_filter": [
                    80,
                    74,
                    83,
                    84
                ],
                "x": [
                    75,
                    76,
                    77,
                    79,
                    80,
                    598,
                    599,
                    600
                ],
                "Grouper": [
                    76,
                    398
                ],
                "x.key": [
                    77
                ],
                "to_filter.append": [
                    80
                ],
                "TypeError": [
                    259,
                    81,
                    313,
                    91,
                    284
                ],
                "len": [
                    385,
                    666,
                    294,
                    172,
                    300,
                    302,
                    561,
                    336,
                    209,
                    210,
                    83,
                    342,
                    347,
                    97,
                    358,
                    363,
                    365,
                    367,
                    119,
                    121
                ],
                "data.columns": [
                    83,
                    87
                ],
                "key": [
                    321,
                    312,
                    328,
                    329,
                    331,
                    300,
                    210,
                    306,
                    212,
                    307,
                    88,
                    217,
                    90,
                    251
                ],
                "values.drop": [
                    90
                ],
                "ValueError": [
                    608,
                    194,
                    646,
                    551,
                    199,
                    554,
                    652,
                    207,
                    592,
                    91
                ],
                "grouped": [
                    96,
                    95
                ],
                "data.groupby": [
                    375,
                    95
                ],
                "agged": [
                    96,
                    97,
                    98,
                    109,
                    110,
                    112,
                    114,
                    119,
                    122,
                    127
                ],
                "grouped.agg": [
                    96
                ],
                "ABCDataFrame": [
                    176,
                    97,
                    142
                ],
                "agged.columns": [
                    97
                ],
                "agged.dropna": [
                    98
                ],
                "v": [
                    105,
                    107,
                    108,
                    109,
                    110,
                    112,
                    273,
                    276,
                    279,
                    281,
                    283
                ],
                "is_integer_dtype": [
                    108,
                    110
                ],
                "maybe_downcast_to_dtype": [
                    112
                ],
                "dtype": [
                    112,
                    256,
                    257,
                    255
                ],
                "table.index.nlevels": [
                    130,
                    115
                ],
                "table.index": [
                    130,
                    132,
                    197,
                    198,
                    648,
                    619,
                    115
                ],
                "index_names": [
                    123,
                    119
                ],
                "agged.index.names": [
                    122,
                    119
                ],
                "agged.index": [
                    122,
                    119
                ],
                "to_unstack": [
                    120,
                    124,
                    126,
                    127
                ],
                "range": [
                    121,
                    347
                ],
                "name": [
                    122,
                    123,
                    126
                ],
                "to_unstack.append": [
                    124,
                    126
                ],
                "agged.unstack": [
                    127
                ],
                "m": [
                    137,
                    131,
                    140,
                    134
                ],
                "MultiIndex.from_arrays": [
                    137,
                    131,
                    419
                ],
                "MultiIndex": [
                    137,
                    131,
                    419
                ],
                "cartesian_product": [
                    138,
                    132
                ],
                "table.index.levels": [
                    132
                ],
                "table.index.names": [
                    648,
                    619,
                    132,
                    197
                ],
                "table.reindex": [
                    140,
                    134
                ],
                "table.columns.nlevels": [
                    136,
                    168
                ],
                "table.columns": [
                    136,
                    168,
                    138,
                    649,
                    620,
                    205,
                    206,
                    340,
                    383
                ],
                "table.columns.levels": [
                    138
                ],
                "table.columns.names": [
                    649,
                    138,
                    620,
                    205
                ],
                "table.sort_index": [
                    143
                ],
                "table.fillna": [
                    611,
                    643,
                    146,
                    629,
                    634
                ],
                "all": [
                    150
                ],
                "data.notna": [
                    150
                ],
                "_add_margins": [
                    151
                ],
                "table.empty": [
                    167
                ],
                "table.T": [
                    173
                ],
                "table.dropna": [
                    177
                ],
                "Substitution": [
                    20,
                    407
                ],
                "Appender": [
                    408,
                    21
                ],
                "_shared_docs": [
                    408,
                    21
                ],
                "str": [
                    193,
                    587,
                    275,
                    244,
                    278
                ],
                "msg": [
                    207,
                    196,
                    199
                ],
                "format": [
                    664,
                    196
                ],
                "level": [
                    205,
                    206,
                    197,
                    198
                ],
                "table.index.get_level_values": [
                    198
                ],
                "grand_margin": [
                    228,
                    281,
                    326,
                    201,
                    272,
                    276,
                    245,
                    247,
                    217,
                    283,
                    279,
                    286
                ],
                "_compute_grand_margin": [
                    201
                ],
                "hasattr": [
                    204,
                    399
                ],
                "table.columns.get_level_values": [
                    206
                ],
                "rows": [
                    224,
                    236,
                    302,
                    303,
                    336,
                    209,
                    210,
                    367,
                    368
                ],
                "ABCSeries": [
                    398,
                    661,
                    214
                ],
                "table.append": [
                    217,
                    641,
                    633
                ],
                "Series": [
                    217,
                    331,
                    388,
                    350
                ],
                "marginal_result_set": [
                    231,
                    232,
                    233,
                    235,
                    238,
                    239,
                    240,
                    220
                ],
                "_generate_marginal_results": [
                    220
                ],
                "cols": [
                    256,
                    225,
                    257,
                    385,
                    386,
                    294,
                    358,
                    363,
                    236,
                    300,
                    365,
                    411,
                    342,
                    343,
                    347,
                    413
                ],
                "tuple": [
                    421,
                    238,
                    231
                ],
                "result": [
                    256,
                    258,
                    388,
                    262,
                    263,
                    264,
                    390,
                    266,
                    334,
                    337,
                    339,
                    350,
                    352,
                    233,
                    240,
                    241,
                    371,
                    378,
                    380,
                    253,
                    382,
                    255
                ],
                "margin_keys": [
                    352,
                    324,
                    390,
                    360,
                    233,
                    297,
                    332,
                    240,
                    243,
                    340,
                    372,
                    379,
                    383
                ],
                "row_margin": [
                    352,
                    350,
                    386,
                    388,
                    390,
                    233,
                    240,
                    241,
                    245,
                    247,
                    344,
                    251,
                    348,
                    343
                ],
                "_generate_marginal_results_without_values": [
                    235
                ],
                "row_margin.reindex": [
                    241
                ],
                "result.columns": [
                    241,
                    388,
                    350
                ],
                "k": [
                    273,
                    243,
                    244,
                    245,
                    276,
                    247,
                    278,
                    281,
                    283,
                    279
                ],
                "margin_dummy": [
                    257,
                    258,
                    251,
                    263
                ],
                "T": [
                    251
                ],
                "DataFrame": [
                    251,
                    558
                ],
                "row_names": [
                    264,
                    253
                ],
                "result.index.names": [
                    264,
                    253
                ],
                "result.index": [
                    264,
                    253,
                    262
                ],
                "set": [
                    255
                ],
                "result.dtypes": [
                    255
                ],
                "result.select_dtypes": [
                    256
                ],
                "astype": [
                    257
                ],
                "result.append": [
                    258,
                    263
                ],
                "result.index._to_safe_for_reshape": [
                    262
                ],
                "items": [
                    273
                ],
                "dict": [
                    277
                ],
                "data.index": [
                    288,
                    416
                ],
                "table_pieces": [
                    323,
                    296,
                    330,
                    331,
                    334
                ],
                "margin": [
                    321,
                    326,
                    331,
                    303,
                    368,
                    370,
                    375,
                    312,
                    377
                ],
                "agg": [
                    343,
                    303
                ],
                "groupby": [
                    368,
                    386,
                    343,
                    303
                ],
                "cat_axis": [
                    327,
                    328,
                    334,
                    304,
                    306,
                    317,
                    318
                ],
                "piece": [
                    321,
                    323,
                    328,
                    330,
                    306,
                    310,
                    312,
                    316,
                    317
                ],
                "table.groupby": [
                    328,
                    306
                ],
                "all_key": [
                    321,
                    324,
                    376,
                    329,
                    331,
                    332,
                    369,
                    370,
                    307,
                    372,
                    312,
                    377,
                    379
                ],
                "_all_key": [
                    376,
                    329,
                    307,
                    369
                ],
                "piece.copy": [
                    310
                ],
                "piece.set_axis": [
                    316
                ],
                "_to_safe_for_reshape": [
                    317
                ],
                "piece._get_axis": [
                    317
                ],
                "table_pieces.append": [
                    331,
                    330,
                    323
                ],
                "margin_keys.append": [
                    372,
                    379,
                    324,
                    332
                ],
                "row_margin.stack": [
                    344
                ],
                "new_order": [
                    347,
                    348
                ],
                "row_margin.index": [
                    348
                ],
                "row_margin.index.reorder_levels": [
                    348
                ],
                "np.nan": [
                    388,
                    350
                ],
                "np": [
                    398,
                    388,
                    350
                ],
                "apply": [
                    368,
                    386,
                    375
                ],
                "by": [
                    394,
                    395,
                    397,
                    398,
                    399,
                    401,
                    403,
                    404
                ],
                "is_scalar": [
                    397
                ],
                "np.ndarray": [
                    398
                ],
                "Index": [
                    398
                ],
                "append": [
                    412,
                    413
                ],
                "indexed": [
                    427,
                    428,
                    413,
                    423
                ],
                "data.set_index": [
                    413
                ],
                "data._constructor": [
                    423
                ],
                "data._constructor_sliced": [
                    427
                ],
                "indexed.unstack": [
                    428
                ],
                "com.maybe_make_list": [
                    538,
                    539
                ],
                "com": [
                    538,
                    539
                ],
                "rownames": [
                    568,
                    547,
                    541
                ],
                "_get_names": [
                    541,
                    542
                ],
                "colnames": [
                    569,
                    548,
                    542
                ],
                "common_idx": [
                    544,
                    558
                ],
                "_get_objs_combined_axis": [
                    544
                ],
                "data.update": [
                    547,
                    548
                ],
                "zip": [
                    547,
                    548
                ],
                "df": [
                    560,
                    566,
                    563,
                    558
                ],
                "kwargs": [
                    561,
                    564,
                    573
                ],
                "df.pivot_table": [
                    566
                ],
                "normalize": [
                    577,
                    579,
                    587,
                    590,
                    623,
                    626,
                    631,
                    636,
                    606
                ],
                "_normalize": [
                    578,
                    623
                ],
                "bool": [
                    587
                ],
                "axis_subs": [
                    588,
                    590
                ],
                "normalizers": [
                    603,
                    597,
                    606
                ],
                "sum": [
                    598
                ],
                "x.sum": [
                    600,
                    598,
                    599
                ],
                "x.div": [
                    600
                ],
                "f": [
                    610,
                    606
                ],
                "column_margin": [
                    640,
                    615,
                    627,
                    628,
                    637
                ],
                "drop": [
                    616,
                    617,
                    615
                ],
                "table.loc": [
                    616,
                    615
                ],
                "index_margin": [
                    641,
                    616,
                    632,
                    633,
                    638,
                    639
                ],
                "table.drop": [
                    617
                ],
                "table_index_names": [
                    648,
                    619
                ],
                "table_columns_names": [
                    649,
                    620
                ],
                "column_margin.sum": [
                    627,
                    637
                ],
                "index_margin.sum": [
                    632,
                    638
                ],
                "index_margin.loc": [
                    639
                ],
                "names": [
                    658,
                    659,
                    662,
                    664,
                    666,
                    668,
                    669,
                    671
                ],
                "arr": [
                    660,
                    661,
                    662
                ],
                "enumerate": [
                    660
                ],
                "arrs": [
                    666,
                    660
                ],
                "arr.name": [
                    661,
                    662
                ],
                "names.append": [
                    664,
                    662
                ],
                "prefix": [
                    664
                ],
                "AssertionError": [
                    667
                ]
            },
            "filtered_variables_in_file": {
                "index": [
                    538,
                    411,
                    155,
                    412,
                    541,
                    415,
                    416,
                    544,
                    34,
                    418,
                    419,
                    547,
                    424,
                    427,
                    44,
                    172,
                    58,
                    119,
                    121
                ],
                "_convert_by": [
                    34,
                    35
                ],
                "columns": [
                    256,
                    544,
                    35,
                    419,
                    548,
                    172,
                    45,
                    428,
                    539,
                    58,
                    411,
                    156,
                    542
                ],
                "aggfunc": [
                    386,
                    275,
                    276,
                    277,
                    278,
                    279,
                    281,
                    283,
                    157,
                    288,
                    37,
                    550,
                    40,
                    553,
                    303,
                    564,
                    201,
                    343,
                    96,
                    226,
                    236,
                    368,
                    375
                ],
                "pieces": [
                    56,
                    53,
                    38
                ],
                "keys": [
                    39,
                    75,
                    54,
                    56,
                    121,
                    58,
                    88,
                    95
                ],
                "func": [
                    40,
                    54,
                    47
                ],
                "table": [
                    640,
                    641,
                    130,
                    643,
                    132,
                    134,
                    383,
                    136,
                    648,
                    138,
                    649,
                    140,
                    142,
                    143,
                    654,
                    146,
                    151,
                    152,
                    167,
                    168,
                    41,
                    170,
                    173,
                    176,
                    177,
                    306,
                    179,
                    53,
                    566,
                    578,
                    579,
                    197,
                    198,
                    582,
                    328,
                    204,
                    205,
                    206,
                    339,
                    340,
                    214,
                    217,
                    221,
                    610,
                    611,
                    615,
                    616,
                    617,
                    619,
                    236,
                    620,
                    623,
                    633,
                    114,
                    115,
                    370,
                    371,
                    628,
                    629,
                    634,
                    377,
                    378,
                    382,
                    127
                ],
                "pivot_table": [
                    41
                ],
                "data": [
                    386,
                    273,
                    150,
                    153,
                    413,
                    288,
                    416,
                    418,
                    419,
                    546,
                    547,
                    548,
                    423,
                    424,
                    42,
                    427,
                    558,
                    303,
                    71,
                    201,
                    79,
                    83,
                    84,
                    343,
                    87,
                    222,
                    95,
                    107,
                    108,
                    236,
                    112,
                    368,
                    375
                ],
                "values": [
                    271,
                    273,
                    154,
                    410,
                    421,
                    550,
                    424,
                    553,
                    170,
                    43,
                    427,
                    303,
                    559,
                    563,
                    60,
                    62,
                    64,
                    67,
                    70,
                    201,
                    75,
                    214,
                    87,
                    343,
                    90,
                    219,
                    93,
                    223,
                    105
                ],
                "fill_value": [
                    160,
                    46,
                    145,
                    146,
                    241
                ],
                "margins": [
                    579,
                    613,
                    48,
                    594,
                    148,
                    570
                ],
                "dropna": [
                    129,
                    97,
                    176,
                    49,
                    149,
                    572,
                    158
                ],
                "margins_name": [
                    159,
                    288,
                    300,
                    50,
                    571,
                    193,
                    579,
                    196,
                    198,
                    201,
                    206,
                    210,
                    212,
                    217,
                    229,
                    615,
                    616,
                    617,
                    236,
                    364,
                    365,
                    639
                ],
                "observed": [
                    386,
                    227,
                    328,
                    236,
                    303,
                    368,
                    306,
                    51,
                    343,
                    375,
                    95
                ],
                "pieces.append": [
                    53
                ],
                "keys.append": [
                    54
                ],
                "concat": [
                    56,
                    628,
                    640,
                    334
                ],
                "values_passed": [
                    60,
                    61,
                    165
                ],
                "is_list_like": [
                    421,
                    62
                ],
                "values_multi": [
                    66,
                    166,
                    63
                ],
                "i": [
                    70,
                    71,
                    72,
                    660,
                    664,
                    121,
                    122,
                    124
                ],
                "to_filter": [
                    80,
                    74,
                    83,
                    84
                ],
                "x": [
                    75,
                    76,
                    77,
                    79,
                    80,
                    598,
                    599,
                    600
                ],
                "Grouper": [
                    76,
                    398
                ],
                "x.key": [
                    77
                ],
                "to_filter.append": [
                    80
                ],
                "data.columns": [
                    83,
                    87
                ],
                "key": [
                    321,
                    312,
                    328,
                    329,
                    331,
                    300,
                    210,
                    306,
                    212,
                    307,
                    88,
                    217,
                    90,
                    251
                ],
                "values.drop": [
                    90
                ],
                "grouped": [
                    96,
                    95
                ],
                "data.groupby": [
                    375,
                    95
                ],
                "agged": [
                    96,
                    97,
                    98,
                    109,
                    110,
                    112,
                    114,
                    119,
                    122,
                    127
                ],
                "grouped.agg": [
                    96
                ],
                "ABCDataFrame": [
                    176,
                    97,
                    142
                ],
                "agged.columns": [
                    97
                ],
                "agged.dropna": [
                    98
                ],
                "v": [
                    105,
                    107,
                    108,
                    109,
                    110,
                    112,
                    273,
                    276,
                    279,
                    281,
                    283
                ],
                "is_integer_dtype": [
                    108,
                    110
                ],
                "maybe_downcast_to_dtype": [
                    112
                ],
                "dtype": [
                    112,
                    256,
                    257,
                    255
                ],
                "table.index.nlevels": [
                    130,
                    115
                ],
                "table.index": [
                    130,
                    132,
                    197,
                    198,
                    648,
                    619,
                    115
                ],
                "index_names": [
                    123,
                    119
                ],
                "agged.index.names": [
                    122,
                    119
                ],
                "agged.index": [
                    122,
                    119
                ],
                "to_unstack": [
                    120,
                    124,
                    126,
                    127
                ],
                "name": [
                    122,
                    123,
                    126
                ],
                "to_unstack.append": [
                    124,
                    126
                ],
                "agged.unstack": [
                    127
                ],
                "m": [
                    137,
                    131,
                    140,
                    134
                ],
                "MultiIndex.from_arrays": [
                    137,
                    131,
                    419
                ],
                "MultiIndex": [
                    137,
                    131,
                    419
                ],
                "cartesian_product": [
                    138,
                    132
                ],
                "table.index.levels": [
                    132
                ],
                "table.index.names": [
                    648,
                    619,
                    132,
                    197
                ],
                "table.reindex": [
                    140,
                    134
                ],
                "table.columns.nlevels": [
                    136,
                    168
                ],
                "table.columns": [
                    136,
                    168,
                    138,
                    649,
                    620,
                    205,
                    206,
                    340,
                    383
                ],
                "table.columns.levels": [
                    138
                ],
                "table.columns.names": [
                    649,
                    138,
                    620,
                    205
                ],
                "table.sort_index": [
                    143
                ],
                "table.fillna": [
                    611,
                    643,
                    146,
                    629,
                    634
                ],
                "data.notna": [
                    150
                ],
                "_add_margins": [
                    151
                ],
                "table.empty": [
                    167
                ],
                "table.T": [
                    173
                ],
                "table.dropna": [
                    177
                ],
                "Substitution": [
                    20,
                    407
                ],
                "Appender": [
                    408,
                    21
                ],
                "_shared_docs": [
                    408,
                    21
                ],
                "msg": [
                    207,
                    196,
                    199
                ],
                "level": [
                    205,
                    206,
                    197,
                    198
                ],
                "table.index.get_level_values": [
                    198
                ],
                "grand_margin": [
                    228,
                    281,
                    326,
                    201,
                    272,
                    276,
                    245,
                    247,
                    217,
                    283,
                    279,
                    286
                ],
                "_compute_grand_margin": [
                    201
                ],
                "table.columns.get_level_values": [
                    206
                ],
                "rows": [
                    224,
                    236,
                    302,
                    303,
                    336,
                    209,
                    210,
                    367,
                    368
                ],
                "ABCSeries": [
                    398,
                    661,
                    214
                ],
                "table.append": [
                    217,
                    641,
                    633
                ],
                "Series": [
                    217,
                    331,
                    388,
                    350
                ],
                "marginal_result_set": [
                    231,
                    232,
                    233,
                    235,
                    238,
                    239,
                    240,
                    220
                ],
                "_generate_marginal_results": [
                    220
                ],
                "cols": [
                    256,
                    225,
                    257,
                    385,
                    386,
                    294,
                    358,
                    363,
                    236,
                    300,
                    365,
                    411,
                    342,
                    343,
                    347,
                    413
                ],
                "result": [
                    256,
                    258,
                    388,
                    262,
                    263,
                    264,
                    390,
                    266,
                    334,
                    337,
                    339,
                    350,
                    352,
                    233,
                    240,
                    241,
                    371,
                    378,
                    380,
                    253,
                    382,
                    255
                ],
                "margin_keys": [
                    352,
                    324,
                    390,
                    360,
                    233,
                    297,
                    332,
                    240,
                    243,
                    340,
                    372,
                    379,
                    383
                ],
                "row_margin": [
                    352,
                    350,
                    386,
                    388,
                    390,
                    233,
                    240,
                    241,
                    245,
                    247,
                    344,
                    251,
                    348,
                    343
                ],
                "_generate_marginal_results_without_values": [
                    235
                ],
                "row_margin.reindex": [
                    241
                ],
                "result.columns": [
                    241,
                    388,
                    350
                ],
                "k": [
                    273,
                    243,
                    244,
                    245,
                    276,
                    247,
                    278,
                    281,
                    283,
                    279
                ],
                "margin_dummy": [
                    257,
                    258,
                    251,
                    263
                ],
                "T": [
                    251
                ],
                "DataFrame": [
                    251,
                    558
                ],
                "row_names": [
                    264,
                    253
                ],
                "result.index.names": [
                    264,
                    253
                ],
                "result.index": [
                    264,
                    253,
                    262
                ],
                "result.dtypes": [
                    255
                ],
                "result.select_dtypes": [
                    256
                ],
                "astype": [
                    257
                ],
                "result.append": [
                    258,
                    263
                ],
                "result.index._to_safe_for_reshape": [
                    262
                ],
                "items": [
                    273
                ],
                "data.index": [
                    288,
                    416
                ],
                "table_pieces": [
                    323,
                    296,
                    330,
                    331,
                    334
                ],
                "margin": [
                    321,
                    326,
                    331,
                    303,
                    368,
                    370,
                    375,
                    312,
                    377
                ],
                "agg": [
                    343,
                    303
                ],
                "groupby": [
                    368,
                    386,
                    343,
                    303
                ],
                "cat_axis": [
                    327,
                    328,
                    334,
                    304,
                    306,
                    317,
                    318
                ],
                "piece": [
                    321,
                    323,
                    328,
                    330,
                    306,
                    310,
                    312,
                    316,
                    317
                ],
                "table.groupby": [
                    328,
                    306
                ],
                "all_key": [
                    321,
                    324,
                    376,
                    329,
                    331,
                    332,
                    369,
                    370,
                    307,
                    372,
                    312,
                    377,
                    379
                ],
                "_all_key": [
                    376,
                    329,
                    307,
                    369
                ],
                "piece.copy": [
                    310
                ],
                "piece.set_axis": [
                    316
                ],
                "_to_safe_for_reshape": [
                    317
                ],
                "piece._get_axis": [
                    317
                ],
                "table_pieces.append": [
                    331,
                    330,
                    323
                ],
                "margin_keys.append": [
                    372,
                    379,
                    324,
                    332
                ],
                "row_margin.stack": [
                    344
                ],
                "new_order": [
                    347,
                    348
                ],
                "row_margin.index": [
                    348
                ],
                "row_margin.index.reorder_levels": [
                    348
                ],
                "np.nan": [
                    388,
                    350
                ],
                "np": [
                    398,
                    388,
                    350
                ],
                "apply": [
                    368,
                    386,
                    375
                ],
                "by": [
                    394,
                    395,
                    397,
                    398,
                    399,
                    401,
                    403,
                    404
                ],
                "is_scalar": [
                    397
                ],
                "np.ndarray": [
                    398
                ],
                "Index": [
                    398
                ],
                "append": [
                    412,
                    413
                ],
                "indexed": [
                    427,
                    428,
                    413,
                    423
                ],
                "data.set_index": [
                    413
                ],
                "data._constructor": [
                    423
                ],
                "data._constructor_sliced": [
                    427
                ],
                "indexed.unstack": [
                    428
                ],
                "com.maybe_make_list": [
                    538,
                    539
                ],
                "com": [
                    538,
                    539
                ],
                "rownames": [
                    568,
                    547,
                    541
                ],
                "_get_names": [
                    541,
                    542
                ],
                "colnames": [
                    569,
                    548,
                    542
                ],
                "common_idx": [
                    544,
                    558
                ],
                "_get_objs_combined_axis": [
                    544
                ],
                "data.update": [
                    547,
                    548
                ],
                "df": [
                    560,
                    566,
                    563,
                    558
                ],
                "kwargs": [
                    561,
                    564,
                    573
                ],
                "df.pivot_table": [
                    566
                ],
                "normalize": [
                    577,
                    579,
                    587,
                    590,
                    623,
                    626,
                    631,
                    636,
                    606
                ],
                "_normalize": [
                    578,
                    623
                ],
                "axis_subs": [
                    588,
                    590
                ],
                "normalizers": [
                    603,
                    597,
                    606
                ],
                "x.sum": [
                    600,
                    598,
                    599
                ],
                "x.div": [
                    600
                ],
                "f": [
                    610,
                    606
                ],
                "column_margin": [
                    640,
                    615,
                    627,
                    628,
                    637
                ],
                "drop": [
                    616,
                    617,
                    615
                ],
                "table.loc": [
                    616,
                    615
                ],
                "index_margin": [
                    641,
                    616,
                    632,
                    633,
                    638,
                    639
                ],
                "table.drop": [
                    617
                ],
                "table_index_names": [
                    648,
                    619
                ],
                "table_columns_names": [
                    649,
                    620
                ],
                "column_margin.sum": [
                    627,
                    637
                ],
                "index_margin.sum": [
                    632,
                    638
                ],
                "index_margin.loc": [
                    639
                ],
                "names": [
                    658,
                    659,
                    662,
                    664,
                    666,
                    668,
                    669,
                    671
                ],
                "arr": [
                    660,
                    661,
                    662
                ],
                "arrs": [
                    666,
                    660
                ],
                "arr.name": [
                    661,
                    662
                ],
                "names.append": [
                    664,
                    662
                ],
                "prefix": [
                    664
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_162/pandas/tests/reshape/test_pivot.py",
                "test_function": "test_margin_normalize",
                "test_function_code": "    def test_margin_normalize(self):\n        # GH 27500\n        df = pd.DataFrame(\n            {\n                \"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\", \"bar\"],\n                \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\", \"one\", \"one\", \"two\", \"two\"],\n                \"C\": [\n                    \"small\",\n                    \"large\",\n                    \"large\",\n                    \"small\",\n                    \"small\",\n                    \"large\",\n                    \"small\",\n                    \"small\",\n                    \"large\",\n                ],\n                \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7],\n                \"E\": [2, 4, 5, 5, 6, 6, 8, 9, 9],\n            }\n        )\n        # normalize on index\n        result = pd.crosstab(\n            [df.A, df.B], df.C, margins=True, margins_name=\"Sub-Total\", normalize=0\n        )\n        expected = pd.DataFrame(\n            [[0.5, 0.5], [0.5, 0.5], [0.666667, 0.333333], [0, 1], [0.444444, 0.555556]]\n        )\n        expected.index = MultiIndex(\n            levels=[[\"Sub-Total\", \"bar\", \"foo\"], [\"\", \"one\", \"two\"]],\n            codes=[[1, 1, 2, 2, 0], [1, 2, 1, 2, 0]],\n            names=[\"A\", \"B\"],\n        )\n        expected.columns = Index([\"large\", \"small\"], dtype=\"object\", name=\"C\")\n        tm.assert_frame_equal(result, expected)\n\n        # normalize on columns\n        result = pd.crosstab(\n            [df.A, df.B], df.C, margins=True, margins_name=\"Sub-Total\", normalize=1\n        )\n        expected = pd.DataFrame(\n            [\n                [0.25, 0.2, 0.222222],\n                [0.25, 0.2, 0.222222],\n                [0.5, 0.2, 0.333333],\n                [0, 0.4, 0.222222],\n            ]\n        )\n        expected.columns = Index(\n            [\"large\", \"small\", \"Sub-Total\"], dtype=\"object\", name=\"C\"\n        )\n        expected.index = MultiIndex(\n            levels=[[\"bar\", \"foo\"], [\"one\", \"two\"]],\n            codes=[[0, 0, 1, 1], [0, 1, 0, 1]],\n            names=[\"A\", \"B\"],\n        )\n        tm.assert_frame_equal(result, expected)\n\n        # normalize on both index and column\n        result = pd.crosstab(\n            [df.A, df.B], df.C, margins=True, margins_name=\"Sub-Total\", normalize=True\n        )\n        expected = pd.DataFrame(\n            [\n                [0.111111, 0.111111, 0.222222],\n                [0.111111, 0.111111, 0.222222],\n                [0.222222, 0.111111, 0.333333],\n                [0.000000, 0.222222, 0.222222],\n                [0.444444, 0.555555, 1],\n            ]\n        )\n        expected.columns = Index(\n            [\"large\", \"small\", \"Sub-Total\"], dtype=\"object\", name=\"C\"\n        )\n        expected.index = MultiIndex(\n            levels=[[\"Sub-Total\", \"bar\", \"foo\"], [\"\", \"one\", \"two\"]],\n            codes=[[1, 1, 2, 2, 0], [1, 2, 1, 2, 0]],\n            names=[\"A\", \"B\"],\n        )\n        tm.assert_frame_equal(result, expected)",
                "test_error": "KeyError: \"['Sub-Total'] not found in axis\"",
                "full_test_error": "self = <pandas.tests.reshape.test_pivot.TestCrosstab object at 0x11ee5fc70>\n\n    def test_margin_normalize(self):\n        # GH 27500\n        df = pd.DataFrame(\n            {\n                \"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\", \"bar\"],\n                \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\", \"one\", \"one\", \"two\", \"two\"],\n                \"C\": [\n                    \"small\",\n                    \"large\",\n                    \"large\",\n                    \"small\",\n                    \"small\",\n                    \"large\",\n                    \"small\",\n                    \"small\",\n                    \"large\",\n                ],\n                \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7],\n                \"E\": [2, 4, 5, 5, 6, 6, 8, 9, 9],\n            }\n        )\n        # normalize on index\n>       result = pd.crosstab(\n            [df.A, df.B], df.C, margins=True, margins_name=\"Sub-Total\", normalize=0\n        )\n\npandas/tests/reshape/test_pivot.py:2473: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/reshape/pivot.py:578: in crosstab\n    table = _normalize(\npandas/core/reshape/pivot.py:616: in _normalize\n    index_margin = table.loc[margins_name, :].drop(margins_name)\npandas/core/frame.py:4035: in drop\n    return super().drop(\npandas/core/generic.py:3880: in drop\n    obj = obj._drop_axis(labels, axis, level=level, errors=errors)\npandas/core/generic.py:3912: in _drop_axis\n    new_axis = axis.drop(labels, errors=errors)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Index([''], dtype='object', name='B')\nlabels = array(['Sub-Total'], dtype=object), errors = 'raise'\n\n    def drop(self, labels, errors=\"raise\"):\n        \"\"\"\n        Make new Index with passed list of labels deleted.\n    \n        Parameters\n        ----------\n        labels : array-like\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and existing labels are dropped.\n    \n        Returns\n        -------\n        dropped : Index\n    \n        Raises\n        ------\n        KeyError\n            If not all of the labels are found in the selected axis\n        \"\"\"\n        arr_dtype = \"object\" if self.dtype == \"object\" else None\n        labels = com.index_labels_to_array(labels, dtype=arr_dtype)\n        indexer = self.get_indexer(labels)\n        mask = indexer == -1\n        if mask.any():\n            if errors != \"ignore\":\n>               raise KeyError(\"{} not found in axis\".format(labels[mask]))\nE               KeyError: \"['Sub-Total'] not found in axis\"\n\npandas/core/indexes/base.py:5316: KeyError",
                "traceback": "pandas/core/reshape/pivot.py:578: in crosstab\n    table = _normalize(\npandas/core/reshape/pivot.py:616: in _normalize\n    index_margin = table.loc[margins_name, :].drop(margins_name)\npandas/core/frame.py:4035: in drop\n    return super().drop(\npandas/core/generic.py:3880: in drop\n    obj = obj._drop_axis(labels, axis, level=level, errors=errors)\npandas/core/generic.py:3912: in _drop_axis\n    new_axis = axis.drop(labels, errors=errors)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Index([''], dtype='object', name='B')\nlabels = array(['Sub-Total'], dtype=object), errors = 'raise'\n\n    def drop(self, labels, errors=\"raise\"):\n        \"\"\"\n        Make new Index with passed list of labels deleted.\n    \n        Parameters\n        ----------\n        labels : array-like\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and existing labels are dropped.\n    \n        Returns\n        -------\n        dropped : Index\n    \n        Raises\n        ------\n        KeyError\n            If not all of the labels are found in the selected axis\n        \"\"\"\n        arr_dtype = \"object\" if self.dtype == \"object\" else None\n        labels = com.index_labels_to_array(labels, dtype=arr_dtype)\n        indexer = self.get_indexer(labels)\n        mask = indexer == -1\n        if mask.any():\n            if errors != \"ignore\":\n>               raise KeyError(\"{} not found in axis\".format(labels[mask]))\nE               KeyError: \"['Sub-Total'] not found in axis\"\n\npandas/core/indexes/base.py:5316: KeyError",
                "test_function_decorators": []
            }
        ]
    }
}