{
    "pandas": [
        {
            "bugID": 162,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 585,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def _normalize(table, normalize, margins, margins_name=\"All\"):\n    \n\n    if isinstance(normalize, str):\n        if normalize not in [\"index\", \"columns\"]:\n            raise ValueError(\"Not a valid normalize argument\")\n    \n    elif isinstance(normalize, bool):\n        if margins is False:\n            if normalize is False:\n                normalize = \"all\"\n    \n    if margins is False:\n    \n        # Actual Normalizations\n        normalizers = {\n            \"all\": lambda x: x / x.values.sum(),\n            \"columns\": lambda x: x / x.sum(),\n            \"index\": lambda x: x.div(x.sum(axis=1), axis=0),\n        }\n    \n        try:\n            f = normalizers[normalize]\n        except KeyError:\n            raise ValueError(\"Not a valid normalize argument\")\n    \n        table = f(table)\n        table = table.fillna(0)\n    \n    elif margins is True:\n        column_margin = table.loc[:, margins_name].sum()\n        row_margin = table.loc[margins_name, :].drop(margins_name).sum()\n    \n        if normalize == \"columns\":\n            table = table.divide(column_margin, axis=1)\n            row_margin = row_margin / row_margin.sum()\n            table.loc[margins_name] = row_margin\n    \n        elif normalize == \"index\":\n            table = table.divide(row_margin, axis=0)\n            column_margin = column_margin / column_margin.sum()\n            table[margins_name] = column_margin\n    \n        elif normalize == \"all\" or normalize is True:\n            table = table / table.values.sum()\n            row_margin = row_margin / row_margin.sum()\n            table.loc[margins_name] = row_margin\n            column_margin = column_margin / column_margin.sum()\n            table[margins_name] = column_margin\n    \n        else:\n            raise ValueError(\"Not a valid normalize argument\")\n    \n    else:\n        raise ValueError(\"Not a valid margins argument\")\n    \n    return table"
        }
    ]
}