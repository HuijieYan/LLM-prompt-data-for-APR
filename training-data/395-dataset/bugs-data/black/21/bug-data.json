{
    "black:21": {
        "/Volumes/SSD2T/bgp_envs/repos/black_21/black.py": {
            "buggy_functions": [
                {
                    "function_name": "dump_to_file",
                    "function_code": "def dump_to_file(*output: str) -> str:\n    \"\"\"Dump `output` to a temporary file. Return path to the file.\"\"\"\n    import tempfile\n\n    with tempfile.NamedTemporaryFile(\n        mode=\"w\", prefix=\"blk_\", suffix=\".log\", delete=False\n    ) as f:\n        for lines in output:\n            f.write(lines)\n            if lines and lines[-1] != \"\\n\":\n                f.write(\"\\n\")\n    return f.name\n",
                    "decorators": [],
                    "docstring": "Dump `output` to a temporary file. Return path to the file.",
                    "start_line": 2323,
                    "end_line": 2334,
                    "variables": {
                        "str": [
                            2323
                        ],
                        "tempfile.NamedTemporaryFile": [
                            2327
                        ],
                        "tempfile": [
                            2327
                        ],
                        "f": [
                            2329,
                            2331,
                            2333,
                            2334
                        ],
                        "lines": [
                            2330,
                            2331,
                            2332
                        ],
                        "output": [
                            2330
                        ],
                        "f.write": [
                            2331,
                            2333
                        ],
                        "f.name": [
                            2334
                        ]
                    },
                    "filtered_variables": {
                        "tempfile.NamedTemporaryFile": [
                            2327
                        ],
                        "tempfile": [
                            2327
                        ],
                        "f": [
                            2329,
                            2331,
                            2333,
                            2334
                        ],
                        "lines": [
                            2330,
                            2331,
                            2332
                        ],
                        "output": [
                            2330
                        ],
                        "f.write": [
                            2331,
                            2333
                        ],
                        "f.name": [
                            2334
                        ]
                    },
                    "diff_line_number": 2328,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "tempfile.NamedTemporaryFile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tempfile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "('...\\n\\'some_string\\'\\nb\\'\\\\\\\\xa3\\'\\nName\\nNone\\nTrue\\nFalse\\n1\\n1.0\\n1j\\nTrue or False\\nTrue or False or None\\nTrue and False\\nTrue and False and None\\n(Name1 and Name2) or Name3\\nName1 and Name2 or Name3\\nName1 or (Name2 and Name3)\\nName1 or Name2 and Name3\\n(Name1 and Name2) or (Name3 and Name4)\\nName1 and Name2 or Name3 and Name4\\nName1 or (Name2 and Name3) or Name4\\nName1 or Name2 and Name3 or Name4\\nv1 << 2\\n1 >> v2\\n1 % finished\\n1 + v2 - v3 * 4 ^ 5 ** v6 / 7 // 8\\n((1 + v2) - (v3 * 4)) ^ (((5 ** v6) / 7) // 8)\\nnot great\\n~great\\n+value\\n-1\\n~int and not v1 ^ 123 + v2 ",
                                    "variable_type": "tuple",
                                    "variable_shape": " True\\n(~int) and (not ((v1 ^ (123 + v2)) "
                                },
                                "f.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "tempfile.NamedTemporaryFile": {
                                    "variable_value": "<function NamedTemporaryFile at 0x10803b1f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tempfile": {
                                    "variable_value": "<module 'tempfile' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/tempfile.py'>",
                                    "variable_type": "module",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "<tempfile._TemporaryFileWrapper object at 0x1090dce50>",
                                    "variable_type": "_TemporaryFileWrapper",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": "'...\\n\\'some_string\\'\\nb\\'\\\\\\\\xa3\\'\\nName\\nNone\\nTrue\\nFalse\\n1\\n1.0\\n1j\\nTrue or False\\nTrue or False or None\\nTrue and False\\nTrue and False and None\\n(Name1 and Name2) or Name3\\nName1 and Name2 or Name3\\nName1 or (Name2 and Name3)\\nName1 or Name2 and Name3\\n(Name1 and Name2) or (Name3 and Name4)\\nName1 and Name2 or Name3 and Name4\\nName1 or (Name2 and Name3) or Name4\\nName1 or Name2 and Name3 or Name4\\nv1 << 2\\n1 >> v2\\n1 % finished\\n1 + v2 - v3 * 4 ^ 5 ** v6 / 7 // 8\\n((1 + v2) - (v3 * 4)) ^ (((5 ** v6) / 7) // 8)\\nnot great\\n~great\\n+value\\n-1\\n~int and not v1 ^ 123 + v2 ",
                                    "variable_type": "str",
                                    "variable_shape": " True\\n(~int) and (not ((v1 ^ (123 + v2)) "
                                },
                                "output": {
                                    "variable_value": "('...\\n\\'some_string\\'\\nb\\'\\\\\\\\xa3\\'\\nName\\nNone\\nTrue\\nFalse\\n1\\n1.0\\n1j\\nTrue or False\\nTrue or False or None\\nTrue and False\\nTrue and False and None\\n(Name1 and Name2) or Name3\\nName1 and Name2 or Name3\\nName1 or (Name2 and Name3)\\nName1 or Name2 and Name3\\n(Name1 and Name2) or (Name3 and Name4)\\nName1 and Name2 or Name3 and Name4\\nName1 or (Name2 and Name3) or Name4\\nName1 or Name2 and Name3 or Name4\\nv1 << 2\\n1 >> v2\\n1 % finished\\n1 + v2 - v3 * 4 ^ 5 ** v6 / 7 // 8\\n((1 + v2) - (v3 * 4)) ^ (((5 ** v6) / 7) // 8)\\nnot great\\n~great\\n+value\\n-1\\n~int and not v1 ^ 123 + v2 ",
                                    "variable_type": "tuple",
                                    "variable_shape": " True\\n(~int) and (not ((v1 ^ (123 + v2)) "
                                },
                                "f.write": {
                                    "variable_value": "<function TextIOWrapper.write at 0x1090c89d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "f.name": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/blk_9_iovz8n.log'",
                                    "variable_type": "str",
                                    "variable_shape": "65"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "tempfile.NamedTemporaryFile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tempfile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "('...\\n\\'some_string\\'\\nb\\'\\\\\\\\xa3\\'\\nName\\nNone\\nTrue\\nFalse\\n1\\n1.0\\n1j\\nTrue or False\\nTrue or False or None\\nTrue and False\\nTrue and False and None\\n(Name1 and Name2) or Name3\\nName1 and Name2 or Name3\\nName1 or (Name2 and Name3)\\nName1 or Name2 and Name3\\n(Name1 and Name2) or (Name3 and Name4)\\nName1 and Name2 or Name3 and Name4\\nName1 or (Name2 and Name3) or Name4\\nName1 or Name2 and Name3 or Name4\\nv1 << 2\\n1 >> v2\\n1 % finished\\n1 + v2 - v3 * 4 ^ 5 ** v6 / 7 // 8\\n((1 + v2) - (v3 * 4)) ^ (((5 ** v6) / 7) // 8)\\nnot great\\n~great\\n+value\\n-1\\n~int and not v1 ^ 123 + v2 ",
                                    "variable_type": "tuple",
                                    "variable_shape": " True\\n(~int) and (not ((v1 ^ (123 + v2)) "
                                },
                                "f.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "tempfile.NamedTemporaryFile": {
                                    "variable_value": "<function NamedTemporaryFile at 0x10a4e71f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tempfile": {
                                    "variable_value": "<module 'tempfile' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/tempfile.py'>",
                                    "variable_type": "module",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "<tempfile._TemporaryFileWrapper object at 0x10b54be50>",
                                    "variable_type": "_TemporaryFileWrapper",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": "'...\\n\\'some_string\\'\\nb\\'\\\\\\\\xa3\\'\\nName\\nNone\\nTrue\\nFalse\\n1\\n1.0\\n1j\\nTrue or False\\nTrue or False or None\\nTrue and False\\nTrue and False and None\\n(Name1 and Name2) or Name3\\nName1 and Name2 or Name3\\nName1 or (Name2 and Name3)\\nName1 or Name2 and Name3\\n(Name1 and Name2) or (Name3 and Name4)\\nName1 and Name2 or Name3 and Name4\\nName1 or (Name2 and Name3) or Name4\\nName1 or Name2 and Name3 or Name4\\nv1 << 2\\n1 >> v2\\n1 % finished\\n1 + v2 - v3 * 4 ^ 5 ** v6 / 7 // 8\\n((1 + v2) - (v3 * 4)) ^ (((5 ** v6) / 7) // 8)\\nnot great\\n~great\\n+value\\n-1\\n~int and not v1 ^ 123 + v2 ",
                                    "variable_type": "str",
                                    "variable_shape": " True\\n(~int) and (not ((v1 ^ (123 + v2)) "
                                },
                                "output": {
                                    "variable_value": "('...\\n\\'some_string\\'\\nb\\'\\\\\\\\xa3\\'\\nName\\nNone\\nTrue\\nFalse\\n1\\n1.0\\n1j\\nTrue or False\\nTrue or False or None\\nTrue and False\\nTrue and False and None\\n(Name1 and Name2) or Name3\\nName1 and Name2 or Name3\\nName1 or (Name2 and Name3)\\nName1 or Name2 and Name3\\n(Name1 and Name2) or (Name3 and Name4)\\nName1 and Name2 or Name3 and Name4\\nName1 or (Name2 and Name3) or Name4\\nName1 or Name2 and Name3 or Name4\\nv1 << 2\\n1 >> v2\\n1 % finished\\n1 + v2 - v3 * 4 ^ 5 ** v6 / 7 // 8\\n((1 + v2) - (v3 * 4)) ^ (((5 ** v6) / 7) // 8)\\nnot great\\n~great\\n+value\\n-1\\n~int and not v1 ^ 123 + v2 ",
                                    "variable_type": "tuple",
                                    "variable_shape": " True\\n(~int) and (not ((v1 ^ (123 + v2)) "
                                },
                                "f.write": {
                                    "variable_value": "<function TextIOWrapper.write at 0x10b5349d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "f.name": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/blk_ytt9h2z9.log'",
                                    "variable_type": "str",
                                    "variable_shape": "65"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "@click.command()\n@click.option(\n    \"-l\",\n    \"--line-length\",\n    type=int,\n    default=DEFAULT_LINE_LENGTH,\n    help=\"How many character per line to allow.\",\n    show_default=True,\n)\n@click.option(\n    \"--check\",\n    is_flag=True,\n    help=(\n        \"Don't write the files back, just return the status.  Return code 0 \"\n        \"means nothing would change.  Return code 1 means some files would be \"\n        \"reformatted.  Return code 123 means there was an internal error.\"\n    ),\n)\n@click.option(\n    \"--diff\",\n    is_flag=True,\n    help=\"Don't write the files back, just output a diff for each file on stdout.\",\n)\n@click.option(\n    \"--fast/--safe\",\n    is_flag=True,\n    help=\"If --fast given, skip temporary sanity checks. [default: --safe]\",\n)\n@click.option(\n    \"-q\",\n    \"--quiet\",\n    is_flag=True,\n    help=(\n        \"Don't emit non-error messages to stderr. Errors are still emitted, \"\n        \"silence those with 2>/dev/null.\"\n    ),\n)\n@click.version_option(version=__version__)\n@click.argument(\n    \"src\",\n    nargs=-1,\n    type=click.Path(\n        exists=True, file_okay=True, dir_okay=True, readable=True, allow_dash=True\n    ),\n)\n@click.pass_context\ndef main(\n    ctx: click.Context,\n    line_length: int,\n    check: bool,\n    diff: bool,\n    fast: bool,\n    quiet: bool,\n    src: List[str],\n) -> None:\n    \"\"\"The uncompromising code formatter.\"\"\"\n    sources: List[Path] = []\n    for s in src:\n        p = Path(s)\n        if p.is_dir():\n            sources.extend(gen_python_files_in_dir(p))\n        elif p.is_file():\n            # if a file was explicitly given, we don't care about its extension\n            sources.append(p)\n        elif s == \"-\":\n            sources.append(Path(\"-\"))\n        else:\n            err(f\"invalid path: {s}\")\n    if check and diff:\n        exc = click.ClickException(\"Options --check and --diff are mutually exclusive\")\n        exc.exit_code = 2\n        raise exc\n\n    if check:\n        write_back = WriteBack.NO\n    elif diff:\n        write_back = WriteBack.DIFF\n    else:\n        write_back = WriteBack.YES\n    if len(sources) == 0:\n        ctx.exit(0)\n    elif len(sources) == 1:\n        p = sources[0]\n        report = Report(check=check, quiet=quiet)\n        try:\n            if not p.is_file() and str(p) == \"-\":\n                changed = format_stdin_to_stdout(\n                    line_length=line_length, fast=fast, write_back=write_back\n                )\n            else:\n                changed = format_file_in_place(\n                    p, line_length=line_length, fast=fast, write_back=write_back\n                )\n            report.done(p, changed)\n        except Exception as exc:\n            report.failed(p, str(exc))\n        ctx.exit(report.return_code)\n    else:\n        loop = asyncio.get_event_loop()\n        executor = ProcessPoolExecutor(max_workers=os.cpu_count())\n        return_code = 1\n        try:\n            return_code = loop.run_until_complete(\n                schedule_formatting(\n                    sources, line_length, write_back, fast, quiet, loop, executor\n                )\n            )\n        finally:\n            shutdown(loop)\n            ctx.exit(return_code)",
                "async def schedule_formatting(\n    sources: List[Path],\n    line_length: int,\n    write_back: WriteBack,\n    fast: bool,\n    quiet: bool,\n    loop: BaseEventLoop,\n    executor: Executor,\n) -> int:\n    \"\"\"Run formatting of `sources` in parallel using the provided `executor`.\n\n    (Use ProcessPoolExecutors for actual parallelism.)\n\n    `line_length`, `write_back`, and `fast` options are passed to\n    :func:`format_file_in_place`.\n    \"\"\"\n    lock = None\n    if write_back == WriteBack.DIFF:\n        # For diff output, we need locks to ensure we don't interleave output\n        # from different processes.\n        manager = Manager()\n        lock = manager.Lock()\n    tasks = {\n        src: loop.run_in_executor(\n            executor, format_file_in_place, src, line_length, fast, write_back, lock\n        )\n        for src in sources\n    }\n    _task_values = list(tasks.values())\n    loop.add_signal_handler(signal.SIGINT, cancel, _task_values)\n    loop.add_signal_handler(signal.SIGTERM, cancel, _task_values)\n    await asyncio.wait(tasks.values())\n    cancelled = []\n    report = Report(check=write_back is WriteBack.NO, quiet=quiet)\n    for src, task in tasks.items():\n        if not task.done():\n            report.failed(src, \"timed out, cancelling\")\n            task.cancel()\n            cancelled.append(task)\n        elif task.cancelled():\n            cancelled.append(task)\n        elif task.exception():\n            report.failed(src, str(task.exception()))\n        else:\n            report.done(src, task.result())\n    if cancelled:\n        await asyncio.gather(*cancelled, loop=loop, return_exceptions=True)\n    elif not quiet:\n        out(\"All done! \u2728 \ud83c\udf70 \u2728\")\n    if not quiet:\n        click.echo(str(report))\n    return report.return_code",
                "def format_file_in_place(\n    src: Path,\n    line_length: int,\n    fast: bool,\n    write_back: WriteBack = WriteBack.NO,\n    lock: Any = None,  # multiprocessing.Manager().Lock() is some crazy proxy\n) -> bool:\n    \"\"\"Format file under `src` path. Return True if changed.\n\n    If `write_back` is True, write reformatted code back to stdout.\n    `line_length` and `fast` options are passed to :func:`format_file_contents`.\n    \"\"\"\n    with tokenize.open(src) as src_buffer:\n        src_contents = src_buffer.read()\n    try:\n        dst_contents = format_file_contents(\n            src_contents, line_length=line_length, fast=fast\n        )\n    except NothingChanged:\n        return False\n\n    if write_back == write_back.YES:\n        with open(src, \"w\", encoding=src_buffer.encoding) as f:\n            f.write(dst_contents)\n    elif write_back == write_back.DIFF:\n        src_name = f\"{src.name}  (original)\"\n        dst_name = f\"{src.name}  (formatted)\"\n        diff_contents = diff(src_contents, dst_contents, src_name, dst_name)\n        if lock:\n            lock.acquire()\n        try:\n            sys.stdout.write(diff_contents)\n        finally:\n            if lock:\n                lock.release()\n    return True",
                "def format_stdin_to_stdout(\n    line_length: int, fast: bool, write_back: WriteBack = WriteBack.NO\n) -> bool:\n    \"\"\"Format file on stdin. Return True if changed.\n\n    If `write_back` is True, write reformatted code back to stdout.\n    `line_length` and `fast` arguments are passed to :func:`format_file_contents`.\n    \"\"\"\n    src = sys.stdin.read()\n    dst = src\n    try:\n        dst = format_file_contents(src, line_length=line_length, fast=fast)\n        return True\n\n    except NothingChanged:\n        return False\n\n    finally:\n        if write_back == WriteBack.YES:\n            sys.stdout.write(dst)\n        elif write_back == WriteBack.DIFF:\n            src_name = \"<stdin>  (original)\"\n            dst_name = \"<stdin>  (formatted)\"\n            sys.stdout.write(diff(src, dst, src_name, dst_name))",
                "def format_file_contents(\n    src_contents: str, line_length: int, fast: bool\n) -> FileContent:\n    \"\"\"Reformat contents a file and return new contents.\n\n    If `fast` is False, additionally confirm that the reformatted code is\n    valid by calling :func:`assert_equivalent` and :func:`assert_stable` on it.\n    `line_length` is passed to :func:`format_str`.\n    \"\"\"\n    if src_contents.strip() == \"\":\n        raise NothingChanged\n\n    dst_contents = format_str(src_contents, line_length=line_length)\n    if src_contents == dst_contents:\n        raise NothingChanged\n\n    if not fast:\n        assert_equivalent(src_contents, dst_contents)\n        assert_stable(src_contents, dst_contents, line_length=line_length)\n    return dst_contents",
                "def format_str(src_contents: str, line_length: int) -> FileContent:\n    \"\"\"Reformat a string and return new contents.\n\n    `line_length` determines how many characters per line are allowed.\n    \"\"\"\n    src_node = lib2to3_parse(src_contents)\n    dst_contents = \"\"\n    lines = LineGenerator()\n    elt = EmptyLineTracker()\n    py36 = is_python36(src_node)\n    empty_line = Line()\n    after = 0\n    for current_line in lines.visit(src_node):\n        for _ in range(after):\n            dst_contents += str(empty_line)\n        before, after = elt.maybe_empty_lines(current_line)\n        for _ in range(before):\n            dst_contents += str(empty_line)\n        for line in split_line(current_line, line_length=line_length, py36=py36):\n            dst_contents += str(line)\n    return dst_contents",
                "def lib2to3_parse(src_txt: str) -> Node:\n    \"\"\"Given a string with source, return the lib2to3 Node.\"\"\"\n    grammar = pygram.python_grammar_no_print_statement\n    if src_txt[-1] != \"\\n\":\n        nl = \"\\r\\n\" if \"\\r\\n\" in src_txt[:1024] else \"\\n\"\n        src_txt += nl\n    for grammar in GRAMMARS:\n        drv = driver.Driver(grammar, pytree.convert)\n        try:\n            result = drv.parse_string(src_txt, True)\n            break\n\n        except ParseError as pe:\n            lineno, column = pe.context[1]\n            lines = src_txt.splitlines()\n            try:\n                faulty_line = lines[lineno - 1]\n            except IndexError:\n                faulty_line = \"<line number missing in source>\"\n            exc = ValueError(f\"Cannot parse: {lineno}:{column}: {faulty_line}\")\n    else:\n        raise exc from None\n\n    if isinstance(result, Leaf):\n        result = Node(syms.file_input, [result])\n    return result",
                "def lib2to3_unparse(node: Node) -> str:\n    \"\"\"Given a lib2to3 node, return its string representation.\"\"\"\n    code = str(node)\n    return code",
                "def whitespace(leaf: Leaf) -> str:  # noqa C901\n    \"\"\"Return whitespace prefix if needed for the given `leaf`.\"\"\"\n    NO = \"\"\n    SPACE = \" \"\n    DOUBLESPACE = \"  \"\n    t = leaf.type\n    p = leaf.parent\n    v = leaf.value\n    if t in ALWAYS_NO_SPACE:\n        return NO\n\n    if t == token.COMMENT:\n        return DOUBLESPACE\n\n    assert p is not None, f\"INTERNAL ERROR: hand-made leaf without parent: {leaf!r}\"\n    if t == token.COLON and p.type not in {syms.subscript, syms.subscriptlist}:\n        return NO\n\n    prev = leaf.prev_sibling\n    if not prev:\n        prevp = preceding_leaf(p)\n        if not prevp or prevp.type in OPENING_BRACKETS:\n            return NO\n\n        if t == token.COLON:\n            return SPACE if prevp.type == token.COMMA else NO\n\n        if prevp.type == token.EQUAL:\n            if prevp.parent:\n                if prevp.parent.type in {\n                    syms.arglist, syms.argument, syms.parameters, syms.varargslist\n                }:\n                    return NO\n\n                elif prevp.parent.type == syms.typedargslist:\n                    # A bit hacky: if the equal sign has whitespace, it means we\n                    # previously found it's a typed argument.  So, we're using\n                    # that, too.\n                    return prevp.prefix\n\n        elif prevp.type == token.DOUBLESTAR:\n            if (\n                prevp.parent\n                and prevp.parent.type in {\n                    syms.arglist,\n                    syms.argument,\n                    syms.dictsetmaker,\n                    syms.parameters,\n                    syms.typedargslist,\n                    syms.varargslist,\n                }\n            ):\n                return NO\n\n        elif prevp.type == token.COLON:\n            if prevp.parent and prevp.parent.type in {syms.subscript, syms.sliceop}:\n                return NO\n\n        elif (\n            prevp.parent\n            and prevp.parent.type in {syms.factor, syms.star_expr}\n            and prevp.type in MATH_OPERATORS\n        ):\n            return NO\n\n        elif (\n            prevp.type == token.RIGHTSHIFT\n            and prevp.parent\n            and prevp.parent.type == syms.shift_expr\n            and prevp.prev_sibling\n            and prevp.prev_sibling.type == token.NAME\n            and prevp.prev_sibling.value == \"print\"  # type: ignore\n        ):\n            # Python 2 print chevron\n            return NO\n\n    elif prev.type in OPENING_BRACKETS:\n        return NO\n\n    if p.type in {syms.parameters, syms.arglist}:\n        # untyped function signatures or calls\n        if t == token.RPAR:\n            return NO\n\n        if not prev or prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.varargslist:\n        # lambdas\n        if t == token.RPAR:\n            return NO\n\n        if prev and prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.typedargslist:\n        # typed function signatures\n        if not prev:\n            return NO\n\n        if t == token.EQUAL:\n            if prev.type != syms.tname:\n                return NO\n\n        elif prev.type == token.EQUAL:\n            # A bit hacky: if the equal sign has whitespace, it means we\n            # previously found it's a typed argument.  So, we're using that, too.\n            return prev.prefix\n\n        elif prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.tname:\n        # type names\n        if not prev:\n            prevp = preceding_leaf(p)\n            if not prevp or prevp.type != token.COMMA:\n                return NO\n\n    elif p.type == syms.trailer:\n        # attributes and calls\n        if t == token.LPAR or t == token.RPAR:\n            return NO\n\n        if not prev:\n            if t == token.DOT:\n                prevp = preceding_leaf(p)\n                if not prevp or prevp.type != token.NUMBER:\n                    return NO\n\n            elif t == token.LSQB:\n                return NO\n\n        elif prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.argument:\n        # single argument\n        if t == token.EQUAL:\n            return NO\n\n        if not prev:\n            prevp = preceding_leaf(p)\n            if not prevp or prevp.type == token.LPAR:\n                return NO\n\n        elif prev.type == token.EQUAL or prev.type == token.DOUBLESTAR:\n            return NO\n\n    elif p.type == syms.decorator:\n        # decorators\n        return NO\n\n    elif p.type == syms.dotted_name:\n        if prev:\n            return NO\n\n        prevp = preceding_leaf(p)\n        if not prevp or prevp.type == token.AT or prevp.type == token.DOT:\n            return NO\n\n    elif p.type == syms.classdef:\n        if t == token.LPAR:\n            return NO\n\n        if prev and prev.type == token.LPAR:\n            return NO\n\n    elif p.type == syms.subscript:\n        # indexing\n        if not prev:\n            assert p.parent is not None, \"subscripts are always parented\"\n            if p.parent.type == syms.subscriptlist:\n                return SPACE\n\n            return NO\n\n        else:\n            return NO\n\n    elif p.type == syms.atom:\n        if prev and t == token.DOT:\n            # dots, but not the first one.\n            return NO\n\n    elif (\n        p.type == syms.listmaker\n        or p.type == syms.testlist_gexp\n        or p.type == syms.subscriptlist\n    ):\n        # list interior, including unpacking\n        if not prev:\n            return NO\n\n    elif p.type == syms.dictsetmaker:\n        # dict and set interior, including unpacking\n        if not prev:\n            return NO\n\n        if prev.type == token.DOUBLESTAR:\n            return NO\n\n    elif p.type in {syms.factor, syms.star_expr}:\n        # unary ops\n        if not prev:\n            prevp = preceding_leaf(p)\n            if not prevp or prevp.type in OPENING_BRACKETS:\n                return NO\n\n            prevp_parent = prevp.parent\n            assert prevp_parent is not None\n            if (\n                prevp.type == token.COLON\n                and prevp_parent.type in {syms.subscript, syms.sliceop}\n            ):\n                return NO\n\n            elif prevp.type == token.EQUAL and prevp_parent.type == syms.argument:\n                return NO\n\n        elif t == token.NAME or t == token.NUMBER:\n            return NO\n\n    elif p.type == syms.import_from:\n        if t == token.DOT:\n            if prev and prev.type == token.DOT:\n                return NO\n\n        elif t == token.NAME:\n            if v == \"import\":\n                return SPACE\n\n            if prev and prev.type == token.DOT:\n                return NO\n\n    elif p.type == syms.sliceop:\n        return NO\n\n    return SPACE",
                "def preceding_leaf(node: Optional[LN]) -> Optional[Leaf]:\n    \"\"\"Return the first leaf that precedes `node`, if any.\"\"\"\n    while node:\n        res = node.prev_sibling\n        if res:\n            if isinstance(res, Leaf):\n                return res\n\n            try:\n                return list(res.leaves())[-1]\n\n            except IndexError:\n                return None\n\n        node = node.parent\n    return None",
                "def is_split_after_delimiter(leaf: Leaf, previous: Leaf = None) -> int:\n    \"\"\"Return the priority of the `leaf` delimiter, given a line break after it.\n\n    The delimiter priorities returned here are from those delimiters that would\n    cause a line break after themselves.\n\n    Higher numbers are higher priority.\n    \"\"\"\n    if leaf.type == token.COMMA:\n        return COMMA_PRIORITY\n\n    return 0",
                "def is_split_before_delimiter(leaf: Leaf, previous: Leaf = None) -> int:\n    \"\"\"Return the priority of the `leaf` delimiter, given a line before after it.\n\n    The delimiter priorities returned here are from those delimiters that would\n    cause a line break before themselves.\n\n    Higher numbers are higher priority.\n    \"\"\"\n    if (\n        leaf.type in VARARGS\n        and leaf.parent\n        and leaf.parent.type in {syms.argument, syms.typedargslist, syms.dictsetmaker}\n    ):\n        # * and ** might also be MATH_OPERATORS but in this case they are not.\n        # Don't treat them as a delimiter.\n        return 0\n\n    if (\n        leaf.type in MATH_OPERATORS\n        and leaf.parent\n        and leaf.parent.type not in {syms.factor, syms.star_expr}\n    ):\n        return MATH_PRIORITY\n\n    if leaf.type in COMPARATORS:\n        return COMPARATOR_PRIORITY\n\n    if (\n        leaf.type == token.STRING\n        and previous is not None\n        and previous.type == token.STRING\n    ):\n        return STRING_PRIORITY\n\n    if (\n        leaf.type == token.NAME\n        and leaf.value == \"for\"\n        and leaf.parent\n        and leaf.parent.type in {syms.comp_for, syms.old_comp_for}\n    ):\n        return COMPREHENSION_PRIORITY\n\n    if (\n        leaf.type == token.NAME\n        and leaf.value == \"if\"\n        and leaf.parent\n        and leaf.parent.type in {syms.comp_if, syms.old_comp_if}\n    ):\n        return COMPREHENSION_PRIORITY\n\n    if leaf.type == token.NAME and leaf.value in LOGIC_OPERATORS and leaf.parent:\n        return LOGIC_PRIORITY\n\n    return 0",
                "def is_delimiter(leaf: Leaf, previous: Leaf = None) -> int:\n    \"\"\"Return the priority of the `leaf` delimiter. Return 0 if not delimiter.\n\n    Higher numbers are higher priority.\n    \"\"\"\n    return max(\n        is_split_before_delimiter(leaf, previous),\n        is_split_after_delimiter(leaf, previous),\n    )",
                "def generate_comments(leaf: Leaf) -> Iterator[Leaf]:\n    \"\"\"Clean the prefix of the `leaf` and generate comments from it, if any.\n\n    Comments in lib2to3 are shoved into the whitespace prefix.  This happens\n    in `pgen2/driver.py:Driver.parse_tokens()`.  This was a brilliant implementation\n    move because it does away with modifying the grammar to include all the\n    possible places in which comments can be placed.\n\n    The sad consequence for us though is that comments don't \"belong\" anywhere.\n    This is why this function generates simple parentless Leaf objects for\n    comments.  We simply don't know what the correct parent should be.\n\n    No matter though, we can live without this.  We really only need to\n    differentiate between inline and standalone comments.  The latter don't\n    share the line with any code.\n\n    Inline comments are emitted as regular token.COMMENT leaves.  Standalone\n    are emitted with a fake STANDALONE_COMMENT token identifier.\n    \"\"\"\n    p = leaf.prefix\n    if not p:\n        return\n\n    if \"#\" not in p:\n        return\n\n    consumed = 0\n    nlines = 0\n    for index, line in enumerate(p.split(\"\\n\")):\n        consumed += len(line) + 1  # adding the length of the split '\\n'\n        line = line.lstrip()\n        if not line:\n            nlines += 1\n        if not line.startswith(\"#\"):\n            continue\n\n        if index == 0 and leaf.type != token.ENDMARKER:\n            comment_type = token.COMMENT  # simple trailing comment\n        else:\n            comment_type = STANDALONE_COMMENT\n        comment = make_comment(line)\n        yield Leaf(comment_type, comment, prefix=\"\\n\" * nlines)\n\n        if comment in {\"# fmt: on\", \"# yapf: enable\"}:\n            raise FormatOn(consumed)\n\n        if comment in {\"# fmt: off\", \"# yapf: disable\"}:\n            if comment_type == STANDALONE_COMMENT:\n                raise FormatOff(consumed)\n\n            prev = preceding_leaf(leaf)\n            if not prev or prev.type in WHITESPACE:  # standalone comment in disguise\n                raise FormatOff(consumed)\n\n        nlines = 0",
                "def make_comment(content: str) -> str:\n    \"\"\"Return a consistently formatted comment from the given `content` string.\n\n    All comments (except for \"##\", \"#!\", \"#:\") should have a single space between\n    the hash sign and the content.\n\n    If `content` didn't start with a hash sign, one is provided.\n    \"\"\"\n    content = content.rstrip()\n    if not content:\n        return \"#\"\n\n    if content[0] == \"#\":\n        content = content[1:]\n    if content and content[0] not in \" !:#\":\n        content = \" \" + content\n    return \"#\" + content",
                "def split_line(\n    line: Line, line_length: int, inner: bool = False, py36: bool = False\n) -> Iterator[Line]:\n    \"\"\"Split a `line` into potentially many lines.\n\n    They should fit in the allotted `line_length` but might not be able to.\n    `inner` signifies that there were a pair of brackets somewhere around the\n    current `line`, possibly transitively. This means we can fallback to splitting\n    by delimiters if the LHS/RHS don't yield any results.\n\n    If `py36` is True, splitting may generate syntax that is only compatible\n    with Python 3.6 and later.\n    \"\"\"\n    if isinstance(line, UnformattedLines) or line.is_comment:\n        yield line\n        return\n\n    line_str = str(line).strip(\"\\n\")\n    if (\n        len(line_str) <= line_length\n        and \"\\n\" not in line_str  # multiline strings\n        and not line.contains_standalone_comments()\n    ):\n        yield line\n        return\n\n    split_funcs: List[SplitFunc]\n    if line.is_def:\n        split_funcs = [left_hand_split]\n    elif line.inside_brackets:\n        split_funcs = [delimiter_split, standalone_comment_split, right_hand_split]\n    else:\n        split_funcs = [right_hand_split]\n    for split_func in split_funcs:\n        # We are accumulating lines in `result` because we might want to abort\n        # mission and return the original line in the end, or attempt a different\n        # split altogether.\n        result: List[Line] = []\n        try:\n            for l in split_func(line, py36):\n                if str(l).strip(\"\\n\") == line_str:\n                    raise CannotSplit(\"Split function returned an unchanged result\")\n\n                result.extend(\n                    split_line(l, line_length=line_length, inner=True, py36=py36)\n                )\n        except CannotSplit as cs:\n            continue\n\n        else:\n            yield from result\n            break\n\n    else:\n        yield line",
                "def left_hand_split(line: Line, py36: bool = False) -> Iterator[Line]:\n    \"\"\"Split line into many lines, starting with the first matching bracket pair.\n\n    Note: this usually looks weird, only use this for function definitions.\n    Prefer RHS otherwise.\n    \"\"\"\n    head = Line(depth=line.depth)\n    body = Line(depth=line.depth + 1, inside_brackets=True)\n    tail = Line(depth=line.depth)\n    tail_leaves: List[Leaf] = []\n    body_leaves: List[Leaf] = []\n    head_leaves: List[Leaf] = []\n    current_leaves = head_leaves\n    matching_bracket = None\n    for leaf in line.leaves:\n        if (\n            current_leaves is body_leaves\n            and leaf.type in CLOSING_BRACKETS\n            and leaf.opening_bracket is matching_bracket\n        ):\n            current_leaves = tail_leaves if body_leaves else head_leaves\n        current_leaves.append(leaf)\n        if current_leaves is head_leaves:\n            if leaf.type in OPENING_BRACKETS:\n                matching_bracket = leaf\n                current_leaves = body_leaves\n    # Since body is a new indent level, remove spurious leading whitespace.\n    if body_leaves:\n        normalize_prefix(body_leaves[0], inside_brackets=True)\n    # Build the new lines.\n    for result, leaves in (head, head_leaves), (body, body_leaves), (tail, tail_leaves):\n        for leaf in leaves:\n            result.append(leaf, preformatted=True)\n            for comment_after in line.comments_after(leaf):\n                result.append(comment_after, preformatted=True)\n    bracket_split_succeeded_or_raise(head, body, tail)\n    for result in (head, body, tail):\n        if result:\n            yield result",
                "def right_hand_split(\n    line: Line, py36: bool = False, omit: Collection[LeafID] = ()\n) -> Iterator[Line]:\n    \"\"\"Split line into many lines, starting with the last matching bracket pair.\"\"\"\n    head = Line(depth=line.depth)\n    body = Line(depth=line.depth + 1, inside_brackets=True)\n    tail = Line(depth=line.depth)\n    tail_leaves: List[Leaf] = []\n    body_leaves: List[Leaf] = []\n    head_leaves: List[Leaf] = []\n    current_leaves = tail_leaves\n    opening_bracket = None\n    closing_bracket = None\n    for leaf in reversed(line.leaves):\n        if current_leaves is body_leaves:\n            if leaf is opening_bracket:\n                current_leaves = head_leaves if body_leaves else tail_leaves\n        current_leaves.append(leaf)\n        if current_leaves is tail_leaves:\n            if leaf.type in CLOSING_BRACKETS and id(leaf) not in omit:\n                opening_bracket = leaf.opening_bracket\n                closing_bracket = leaf\n                current_leaves = body_leaves\n    tail_leaves.reverse()\n    body_leaves.reverse()\n    head_leaves.reverse()\n    # Since body is a new indent level, remove spurious leading whitespace.\n    if body_leaves:\n        normalize_prefix(body_leaves[0], inside_brackets=True)\n    elif not head_leaves:\n        # No `head` and no `body` means the split failed. `tail` has all content.\n        raise CannotSplit(\"No brackets found\")\n\n    # Build the new lines.\n    for result, leaves in (head, head_leaves), (body, body_leaves), (tail, tail_leaves):\n        for leaf in leaves:\n            result.append(leaf, preformatted=True)\n            for comment_after in line.comments_after(leaf):\n                result.append(comment_after, preformatted=True)\n    bracket_split_succeeded_or_raise(head, body, tail)\n    assert opening_bracket and closing_bracket\n    if (\n        opening_bracket.type == token.LPAR\n        and not opening_bracket.value\n        and closing_bracket.type == token.RPAR\n        and not closing_bracket.value\n    ):\n        # These parens were optional. If there aren't any delimiters or standalone\n        # comments in the body, they were unnecessary and another split without\n        # them should be attempted.\n        if not (\n            body.bracket_tracker.delimiters or line.contains_standalone_comments(0)\n        ):\n            omit = {id(closing_bracket), *omit}\n            yield from right_hand_split(line, py36=py36, omit=omit)\n            return\n\n    ensure_visible(opening_bracket)\n    ensure_visible(closing_bracket)\n    for result in (head, body, tail):\n        if result:\n            yield result",
                "def bracket_split_succeeded_or_raise(head: Line, body: Line, tail: Line) -> None:\n    \"\"\"Raise :exc:`CannotSplit` if the last left- or right-hand split failed.\n\n    Do nothing otherwise.\n\n    A left- or right-hand split is based on a pair of brackets. Content before\n    (and including) the opening bracket is left on one line, content inside the\n    brackets is put on a separate line, and finally content starting with and\n    following the closing bracket is put on a separate line.\n\n    Those are called `head`, `body`, and `tail`, respectively. If the split\n    produced the same line (all content in `head`) or ended up with an empty `body`\n    and the `tail` is just the closing bracket, then it's considered failed.\n    \"\"\"\n    tail_len = len(str(tail).strip())\n    if not body:\n        if tail_len == 0:\n            raise CannotSplit(\"Splitting brackets produced the same line\")\n\n        elif tail_len < 3:\n            raise CannotSplit(\n                f\"Splitting brackets on an empty body to save \"\n                f\"{tail_len} characters is not worth it\"\n            )",
                "def dont_increase_indentation(split_func: SplitFunc) -> SplitFunc:\n    \"\"\"Normalize prefix of the first leaf in every line returned by `split_func`.\n\n    This is a decorator over relevant split functions.\n    \"\"\"\n\n    @wraps(split_func)\n    def split_wrapper(line: Line, py36: bool = False) -> Iterator[Line]:\n        for l in split_func(line, py36):\n            normalize_prefix(l.leaves[0], inside_brackets=True)\n            yield l\n\n    return split_wrapper",
                "@dont_increase_indentation\ndef delimiter_split(line: Line, py36: bool = False) -> Iterator[Line]:\n    \"\"\"Split according to delimiters of the highest priority.\n\n    If `py36` is True, the split will add trailing commas also in function\n    signatures that contain `*` and `**`.\n    \"\"\"\n    try:\n        last_leaf = line.leaves[-1]\n    except IndexError:\n        raise CannotSplit(\"Line empty\")\n\n    delimiters = line.bracket_tracker.delimiters\n    try:\n        delimiter_priority = line.bracket_tracker.max_delimiter_priority(\n            exclude={id(last_leaf)}\n        )\n    except ValueError:\n        raise CannotSplit(\"No delimiters found\")\n\n    current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n    lowest_depth = sys.maxsize\n    trailing_comma_safe = True\n\n    def append_to_line(leaf: Leaf) -> Iterator[Line]:\n        \"\"\"Append `leaf` to current line or to new line if appending impossible.\"\"\"\n        nonlocal current_line\n        try:\n            current_line.append_safe(leaf, preformatted=True)\n        except ValueError as ve:\n            yield current_line\n\n            current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n            current_line.append(leaf)\n\n    for leaf in line.leaves:\n        yield from append_to_line(leaf)\n\n        for comment_after in line.comments_after(leaf):\n            yield from append_to_line(comment_after)\n\n        lowest_depth = min(lowest_depth, leaf.bracket_depth)\n        if (\n            leaf.bracket_depth == lowest_depth\n            and leaf.type == token.STAR\n            or leaf.type == token.DOUBLESTAR\n        ):\n            trailing_comma_safe = trailing_comma_safe and py36\n        leaf_priority = delimiters.get(id(leaf))\n        if leaf_priority == delimiter_priority:\n            yield current_line\n\n            current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n    if current_line:\n        if (\n            trailing_comma_safe\n            and delimiter_priority == COMMA_PRIORITY\n            and current_line.leaves[-1].type != token.COMMA\n            and current_line.leaves[-1].type != STANDALONE_COMMENT\n        ):\n            current_line.append(Leaf(token.COMMA, \",\"))\n        yield current_line",
                "@dont_increase_indentation\ndef standalone_comment_split(line: Line, py36: bool = False) -> Iterator[Line]:\n    \"\"\"Split standalone comments from the rest of the line.\"\"\"\n    if not line.contains_standalone_comments(0):\n        raise CannotSplit(\"Line does not have any standalone comments\")\n\n    current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n\n    def append_to_line(leaf: Leaf) -> Iterator[Line]:\n        \"\"\"Append `leaf` to current line or to new line if appending impossible.\"\"\"\n        nonlocal current_line\n        try:\n            current_line.append_safe(leaf, preformatted=True)\n        except ValueError as ve:\n            yield current_line\n\n            current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n            current_line.append(leaf)\n\n    for leaf in line.leaves:\n        yield from append_to_line(leaf)\n\n        for comment_after in line.comments_after(leaf):\n            yield from append_to_line(comment_after)\n\n    if current_line:\n        yield current_line",
                "def is_import(leaf: Leaf) -> bool:\n    \"\"\"Return True if the given leaf starts an import statement.\"\"\"\n    p = leaf.parent\n    t = leaf.type\n    v = leaf.value\n    return bool(\n        t == token.NAME\n        and (\n            (v == \"import\" and p and p.type == syms.import_name)\n            or (v == \"from\" and p and p.type == syms.import_from)\n        )\n    )",
                "def normalize_prefix(leaf: Leaf, *, inside_brackets: bool) -> None:\n    \"\"\"Leave existing extra newlines if not `inside_brackets`. Remove everything\n    else.\n\n    Note: don't use backslashes for formatting or you'll lose your voting rights.\n    \"\"\"\n    if not inside_brackets:\n        spl = leaf.prefix.split(\"#\")\n        if \"\\\\\" not in spl[0]:\n            nl_count = spl[-1].count(\"\\n\")\n            if len(spl) > 1:\n                nl_count -= 1\n            leaf.prefix = \"\\n\" * nl_count\n            return\n\n    leaf.prefix = \"\"",
                "def normalize_string_quotes(leaf: Leaf) -> None:\n    \"\"\"Prefer double quotes but only if it doesn't cause more escaping.\n\n    Adds or removes backslashes as appropriate. Doesn't parse and fix\n    strings nested in f-strings (yet).\n\n    Note: Mutates its argument.\n    \"\"\"\n    value = leaf.value.lstrip(\"furbFURB\")\n    if value[:3] == '\"\"\"':\n        return\n\n    elif value[:3] == \"'''\":\n        orig_quote = \"'''\"\n        new_quote = '\"\"\"'\n    elif value[0] == '\"':\n        orig_quote = '\"'\n        new_quote = \"'\"\n    else:\n        orig_quote = \"'\"\n        new_quote = '\"'\n    first_quote_pos = leaf.value.find(orig_quote)\n    if first_quote_pos == -1:\n        return  # There's an internal error\n\n    prefix = leaf.value[:first_quote_pos]\n    body = leaf.value[first_quote_pos + len(orig_quote):-len(orig_quote)]\n    unescaped_new_quote = re.compile(rf\"(([^\\\\]|^)(\\\\\\\\)*){new_quote}\")\n    escaped_orig_quote = re.compile(rf\"\\\\(\\\\\\\\)*{orig_quote}\")\n    if \"r\" in prefix.casefold():\n        if unescaped_new_quote.search(body):\n            # There's at least one unescaped new_quote in this raw string\n            # so converting is impossible\n            return\n\n        # Do not introduce or remove backslashes in raw strings\n        new_body = body\n    else:\n        new_body = escaped_orig_quote.sub(rf\"\\1{orig_quote}\", body)\n        new_body = unescaped_new_quote.sub(rf\"\\1\\\\{new_quote}\", new_body)\n        # Add escapes again for consecutive occurences of new_quote (sub\n        # doesn't match overlapping substrings).\n        new_body = unescaped_new_quote.sub(rf\"\\1\\\\{new_quote}\", new_body)\n    if new_quote == '\"\"\"' and new_body[-1] == '\"':\n        # edge case:\n        new_body = new_body[:-1] + '\\\\\"'\n    orig_escape_count = body.count(\"\\\\\")\n    new_escape_count = new_body.count(\"\\\\\")\n    if new_escape_count > orig_escape_count:\n        return  # Do not introduce more escaping\n\n    if new_escape_count == orig_escape_count and orig_quote == '\"':\n        return  # Prefer double quotes\n\n    leaf.value = f\"{prefix}{new_quote}{new_body}{new_quote}\"",
                "def normalize_invisible_parens(node: Node, parens_after: Set[str]) -> None:\n    \"\"\"Make existing optional parentheses invisible or create new ones.\n\n    Standardizes on visible parentheses for single-element tuples, and keeps\n    existing visible parentheses for other tuples and generator expressions.\n    \"\"\"\n    check_lpar = False\n    for child in list(node.children):\n        if check_lpar:\n            if child.type == syms.atom:\n                if not (\n                    is_empty_tuple(child)\n                    or is_one_tuple(child)\n                    or max_delimiter_priority_in_atom(child) >= COMMA_PRIORITY\n                ):\n                    first = child.children[0]\n                    last = child.children[-1]\n                    if first.type == token.LPAR and last.type == token.RPAR:\n                        # make parentheses invisible\n                        first.value = \"\"  # type: ignore\n                        last.value = \"\"  # type: ignore\n            elif is_one_tuple(child):\n                # wrap child in visible parentheses\n                lpar = Leaf(token.LPAR, \"(\")\n                rpar = Leaf(token.RPAR, \")\")\n                index = child.remove() or 0\n                node.insert_child(index, Node(syms.atom, [lpar, child, rpar]))\n            else:\n                # wrap child in invisible parentheses\n                lpar = Leaf(token.LPAR, \"\")\n                rpar = Leaf(token.RPAR, \"\")\n                index = child.remove() or 0\n                node.insert_child(index, Node(syms.atom, [lpar, child, rpar]))\n\n        check_lpar = isinstance(child, Leaf) and child.value in parens_after",
                "def is_empty_tuple(node: LN) -> bool:\n    \"\"\"Return True if `node` holds an empty tuple.\"\"\"\n    return (\n        node.type == syms.atom\n        and len(node.children) == 2\n        and node.children[0].type == token.LPAR\n        and node.children[1].type == token.RPAR\n    )",
                "def is_one_tuple(node: LN) -> bool:\n    \"\"\"Return True if `node` holds a tuple with one element, with or without parens.\"\"\"\n    if node.type == syms.atom:\n        if len(node.children) != 3:\n            return False\n\n        lpar, gexp, rpar = node.children\n        if not (\n            lpar.type == token.LPAR\n            and gexp.type == syms.testlist_gexp\n            and rpar.type == token.RPAR\n        ):\n            return False\n\n        return len(gexp.children) == 2 and gexp.children[1].type == token.COMMA\n\n    return (\n        node.type in IMPLICIT_TUPLE\n        and len(node.children) == 2\n        and node.children[1].type == token.COMMA\n    )",
                "def max_delimiter_priority_in_atom(node: LN) -> int:\n    if node.type != syms.atom:\n        return 0\n\n    first = node.children[0]\n    last = node.children[-1]\n    if not (first.type == token.LPAR and last.type == token.RPAR):\n        return 0\n\n    bt = BracketTracker()\n    for c in node.children[1:-1]:\n        if isinstance(c, Leaf):\n            bt.mark(c)\n        else:\n            for leaf in c.leaves():\n                bt.mark(leaf)\n    try:\n        return bt.max_delimiter_priority()\n\n    except ValueError:\n        return 0",
                "def ensure_visible(leaf: Leaf) -> None:\n    \"\"\"Make sure parentheses are visible.\n\n    They could be invisible as part of some statements (see\n    :func:`normalize_invible_parens` and :func:`visit_import_from`).\n    \"\"\"\n    if leaf.type == token.LPAR:\n        leaf.value = \"(\"\n    elif leaf.type == token.RPAR:\n        leaf.value = \")\"",
                "def is_python36(node: Node) -> bool:\n    \"\"\"Return True if the current file is using Python 3.6+ features.\n\n    Currently looking for:\n    - f-strings; and\n    - trailing commas after * or ** in function signatures.\n    \"\"\"\n    for n in node.pre_order():\n        if n.type == token.STRING:\n            value_head = n.value[:2]  # type: ignore\n            if value_head in {'f\"', 'F\"', \"f'\", \"F'\", \"rf\", \"fr\", \"RF\", \"FR\"}:\n                return True\n\n        elif (\n            n.type == syms.typedargslist\n            and n.children\n            and n.children[-1].type == token.COMMA\n        ):\n            for ch in n.children:\n                if ch.type == token.STAR or ch.type == token.DOUBLESTAR:\n                    return True\n\n    return False",
                "def gen_python_files_in_dir(path: Path) -> Iterator[Path]:\n    \"\"\"Generate all files under `path` which aren't under BLACKLISTED_DIRECTORIES\n    and have one of the PYTHON_EXTENSIONS.\n    \"\"\"\n    for child in path.iterdir():\n        if child.is_dir():\n            if child.name in BLACKLISTED_DIRECTORIES:\n                continue\n\n            yield from gen_python_files_in_dir(child)\n\n        elif child.suffix in PYTHON_EXTENSIONS:\n            yield child",
                "def assert_equivalent(src: str, dst: str) -> None:\n    \"\"\"Raise AssertionError if `src` and `dst` aren't equivalent.\"\"\"\n\n    import ast\n    import traceback\n\n    def _v(node: ast.AST, depth: int = 0) -> Iterator[str]:\n        \"\"\"Simple visitor generating strings to compare ASTs by content.\"\"\"\n        yield f\"{'  ' * depth}{node.__class__.__name__}(\"\n\n        for field in sorted(node._fields):\n            try:\n                value = getattr(node, field)\n            except AttributeError:\n                continue\n\n            yield f\"{'  ' * (depth+1)}{field}=\"\n\n            if isinstance(value, list):\n                for item in value:\n                    if isinstance(item, ast.AST):\n                        yield from _v(item, depth + 2)\n\n            elif isinstance(value, ast.AST):\n                yield from _v(value, depth + 2)\n\n            else:\n                yield f\"{'  ' * (depth+2)}{value!r},  # {value.__class__.__name__}\"\n\n        yield f\"{'  ' * depth})  # /{node.__class__.__name__}\"\n\n    try:\n        src_ast = ast.parse(src)\n    except Exception as exc:\n        major, minor = sys.version_info[:2]\n        raise AssertionError(\n            f\"cannot use --safe with this file; failed to parse source file \"\n            f\"with Python {major}.{minor}'s builtin AST. Re-run with --fast \"\n            f\"or stop using deprecated Python 2 syntax. AST error message: {exc}\"\n        )\n\n    try:\n        dst_ast = ast.parse(dst)\n    except Exception as exc:\n        log = dump_to_file(\"\".join(traceback.format_tb(exc.__traceback__)), dst)\n        raise AssertionError(\n            f\"INTERNAL ERROR: Black produced invalid code: {exc}. \"\n            f\"Please report a bug on https://github.com/ambv/black/issues.  \"\n            f\"This invalid output might be helpful: {log}\"\n        ) from None\n\n    src_ast_str = \"\\n\".join(_v(src_ast))\n    dst_ast_str = \"\\n\".join(_v(dst_ast))\n    if src_ast_str != dst_ast_str:\n        log = dump_to_file(diff(src_ast_str, dst_ast_str, \"src\", \"dst\"))\n        raise AssertionError(\n            f\"INTERNAL ERROR: Black produced code that is not equivalent to \"\n            f\"the source.  \"\n            f\"Please report a bug on https://github.com/ambv/black/issues.  \"\n            f\"This diff might be helpful: {log}\"\n        ) from None",
                "def assert_stable(src: str, dst: str, line_length: int) -> None:\n    \"\"\"Raise AssertionError if `dst` reformats differently the second time.\"\"\"\n    newdst = format_str(dst, line_length=line_length)\n    if dst != newdst:\n        log = dump_to_file(\n            diff(src, dst, \"source\", \"first pass\"),\n            diff(dst, newdst, \"first pass\", \"second pass\"),\n        )\n        raise AssertionError(\n            f\"INTERNAL ERROR: Black produced different code on the second pass \"\n            f\"of the formatter.  \"\n            f\"Please report a bug on https://github.com/ambv/black/issues.  \"\n            f\"This diff might be helpful: {log}\"\n        ) from None",
                "def dump_to_file(*output: str) -> str:\n    \"\"\"Dump `output` to a temporary file. Return path to the file.\"\"\"\n    import tempfile\n\n    with tempfile.NamedTemporaryFile(\n        mode=\"w\", prefix=\"blk_\", suffix=\".log\", delete=False\n    ) as f:\n        for lines in output:\n            f.write(lines)\n            if lines and lines[-1] != \"\\n\":\n                f.write(\"\\n\")\n    return f.name",
                "def diff(a: str, b: str, a_name: str, b_name: str) -> str:\n    \"\"\"Return a unified diff string between strings `a` and `b`.\"\"\"\n    import difflib\n\n    a_lines = [line + \"\\n\" for line in a.split(\"\\n\")]\n    b_lines = [line + \"\\n\" for line in b.split(\"\\n\")]\n    return \"\".join(\n        difflib.unified_diff(a_lines, b_lines, fromfile=a_name, tofile=b_name, n=5)\n    )",
                "def cancel(tasks: List[asyncio.Task]) -> None:\n    \"\"\"asyncio signal handler that cancels all `tasks` and reports to stderr.\"\"\"\n    err(\"Aborted!\")\n    for task in tasks:\n        task.cancel()",
                "def shutdown(loop: BaseEventLoop) -> None:\n    \"\"\"Cancel all pending tasks on `loop`, wait for them, and close the loop.\"\"\"\n    try:\n        # This part is borrowed from asyncio/runners.py in Python 3.7b2.\n        to_cancel = [task for task in asyncio.Task.all_tasks(loop) if not task.done()]\n        if not to_cancel:\n            return\n\n        for task in to_cancel:\n            task.cancel()\n        loop.run_until_complete(\n            asyncio.gather(*to_cancel, loop=loop, return_exceptions=True)\n        )\n    finally:\n        # `concurrent.futures.Future` objects cannot be cancelled once they\n        # are already running. There might be some when the `shutdown()` happened.\n        # Silence their logger's spew about the event loop being closed.\n        cf_logger = logging.getLogger(\"concurrent.futures\")\n        cf_logger.setLevel(logging.CRITICAL)\n        loop.close()",
                "def __init__(self, consumed: int) -> None:\n    super().__init__(consumed)\n    self.consumed = consumed",
                "def trim_prefix(self, leaf: Leaf) -> None:\n    leaf.prefix = leaf.prefix[self.consumed:]",
                "def leaf_from_consumed(self, leaf: Leaf) -> Leaf:\n    \"\"\"Returns a new Leaf from the consumed part of the prefix.\"\"\"\n    unformatted_prefix = leaf.prefix[:self.consumed]\n    return Leaf(token.NEWLINE, unformatted_prefix)",
                "def visit(self, node: LN) -> Iterator[T]:\n    \"\"\"Main method to visit `node` and its children.\n\n    It tries to find a `visit_*()` method for the given `node.type`, like\n    `visit_simple_stmt` for Node objects or `visit_INDENT` for Leaf objects.\n    If no dedicated `visit_*()` method is found, chooses `visit_default()`\n    instead.\n\n    Then yields objects of type `T` from the selected visitor.\n    \"\"\"\n    if node.type < 256:\n        name = token.tok_name[node.type]\n    else:\n        name = type_repr(node.type)\n    yield from getattr(self, f\"visit_{name}\", self.visit_default)(node)",
                "def visit_default(self, node: LN) -> Iterator[T]:\n    \"\"\"Default `visit_*()` implementation. Recurses to children of `node`.\"\"\"\n    if isinstance(node, Node):\n        for child in node.children:\n            yield from self.visit(child)",
                "def visit_default(self, node: LN) -> Iterator[T]:\n    indent = \" \" * (2 * self.tree_depth)\n    if isinstance(node, Node):\n        _type = type_repr(node.type)\n        out(f\"{indent}{_type}\", fg=\"yellow\")\n        self.tree_depth += 1\n        for child in node.children:\n            yield from self.visit(child)\n\n        self.tree_depth -= 1\n        out(f\"{indent}/{_type}\", fg=\"yellow\", bold=False)\n    else:\n        _type = token.tok_name.get(node.type, str(node.type))\n        out(f\"{indent}{_type}\", fg=\"blue\", nl=False)\n        if node.prefix:\n            # We don't have to handle prefixes for `Node` objects since\n            # that delegates to the first child anyway.\n            out(f\" {node.prefix!r}\", fg=\"green\", bold=False, nl=False)\n        out(f\" {node.value!r}\", fg=\"blue\", bold=False)",
                "@classmethod\ndef show(cls, code: str) -> None:\n    \"\"\"Pretty-print the lib2to3 AST of a given string of `code`.\n\n    Convenience method for debugging.\n    \"\"\"\n    v: DebugVisitor[None] = DebugVisitor()\n    list(v.visit(lib2to3_parse(code)))",
                "def mark(self, leaf: Leaf) -> None:\n    \"\"\"Mark `leaf` with bracket-related metadata. Keep track of delimiters.\n\n    All leaves receive an int `bracket_depth` field that stores how deep\n    within brackets a given leaf is. 0 means there are no enclosing brackets\n    that started on this line.\n\n    If a leaf is itself a closing bracket, it receives an `opening_bracket`\n    field that it forms a pair with. This is a one-directional link to\n    avoid reference cycles.\n\n    If a leaf is a delimiter (a token on which Black can split the line if\n    needed) and it's on depth 0, its `id()` is stored in the tracker's\n    `delimiters` field.\n    \"\"\"\n    if leaf.type == token.COMMENT:\n        return\n\n    if leaf.type in CLOSING_BRACKETS:\n        self.depth -= 1\n        opening_bracket = self.bracket_match.pop((self.depth, leaf.type))\n        leaf.opening_bracket = opening_bracket\n    leaf.bracket_depth = self.depth\n    if self.depth == 0:\n        delim = is_split_before_delimiter(leaf, self.previous)\n        if delim and self.previous is not None:\n            self.delimiters[id(self.previous)] = delim\n        else:\n            delim = is_split_after_delimiter(leaf, self.previous)\n            if delim:\n                self.delimiters[id(leaf)] = delim\n    if leaf.type in OPENING_BRACKETS:\n        self.bracket_match[self.depth, BRACKET[leaf.type]] = leaf\n        self.depth += 1\n    self.previous = leaf",
                "def any_open_brackets(self) -> bool:\n    \"\"\"Return True if there is an yet unmatched open bracket on the line.\"\"\"\n    return bool(self.bracket_match)",
                "def max_delimiter_priority(self, exclude: Iterable[LeafID] = ()) -> int:\n    \"\"\"Return the highest priority of a delimiter found on the line.\n\n    Values are consistent with what `is_delimiter()` returns.\n    Raises ValueError on no delimiters.\n    \"\"\"\n    return max(v for k, v in self.delimiters.items() if k not in exclude)",
                "def append(self, leaf: Leaf, preformatted: bool = False) -> None:\n    \"\"\"Add a new `leaf` to the end of the line.\n\n    Unless `preformatted` is True, the `leaf` will receive a new consistent\n    whitespace prefix and metadata applied by :class:`BracketTracker`.\n    Trailing commas are maybe removed, unpacked for loop variables are\n    demoted from being delimiters.\n\n    Inline comments are put aside.\n    \"\"\"\n    has_value = leaf.type in BRACKETS or bool(leaf.value.strip())\n    if not has_value:\n        return\n\n    if self.leaves and not preformatted:\n        # Note: at this point leaf.prefix should be empty except for\n        # imports, for which we only preserve newlines.\n        leaf.prefix += whitespace(leaf)\n    if self.inside_brackets or not preformatted:\n        self.maybe_decrement_after_for_loop_variable(leaf)\n        self.bracket_tracker.mark(leaf)\n        self.maybe_remove_trailing_comma(leaf)\n        self.maybe_increment_for_loop_variable(leaf)\n\n    if not self.append_comment(leaf):\n        self.leaves.append(leaf)",
                "def append_safe(self, leaf: Leaf, preformatted: bool = False) -> None:\n    \"\"\"Like :func:`append()` but disallow invalid standalone comment structure.\n\n    Raises ValueError when any `leaf` is appended after a standalone comment\n    or when a standalone comment is not the first leaf on the line.\n    \"\"\"\n    if self.bracket_tracker.depth == 0:\n        if self.is_comment:\n            raise ValueError(\"cannot append to standalone comments\")\n\n        if self.leaves and leaf.type == STANDALONE_COMMENT:\n            raise ValueError(\n                \"cannot append standalone comments to a populated line\"\n            )\n\n    self.append(leaf, preformatted=preformatted)",
                "@property\ndef is_comment(self) -> bool:\n    \"\"\"Is this line a standalone comment?\"\"\"\n    return len(self.leaves) == 1 and self.leaves[0].type == STANDALONE_COMMENT",
                "@property\ndef is_decorator(self) -> bool:\n    \"\"\"Is this line a decorator?\"\"\"\n    return bool(self) and self.leaves[0].type == token.AT",
                "@property\ndef is_import(self) -> bool:\n    \"\"\"Is this an import line?\"\"\"\n    return bool(self) and is_import(self.leaves[0])",
                "@property\ndef is_class(self) -> bool:\n    \"\"\"Is this line a class definition?\"\"\"\n    return (\n        bool(self)\n        and self.leaves[0].type == token.NAME\n        and self.leaves[0].value == \"class\"\n    )",
                "@property\ndef is_def(self) -> bool:\n    \"\"\"Is this a function definition? (Also returns True for async defs.)\"\"\"\n    try:\n        first_leaf = self.leaves[0]\n    except IndexError:\n        return False\n\n    try:\n        second_leaf: Optional[Leaf] = self.leaves[1]\n    except IndexError:\n        second_leaf = None\n    return (\n        (first_leaf.type == token.NAME and first_leaf.value == \"def\")\n        or (\n            first_leaf.type == token.ASYNC\n            and second_leaf is not None\n            and second_leaf.type == token.NAME\n            and second_leaf.value == \"def\"\n        )\n    )",
                "@property\ndef is_flow_control(self) -> bool:\n    \"\"\"Is this line a flow control statement?\n\n    Those are `return`, `raise`, `break`, and `continue`.\n    \"\"\"\n    return (\n        bool(self)\n        and self.leaves[0].type == token.NAME\n        and self.leaves[0].value in FLOW_CONTROL\n    )",
                "@property\ndef is_yield(self) -> bool:\n    \"\"\"Is this line a yield statement?\"\"\"\n    return (\n        bool(self)\n        and self.leaves[0].type == token.NAME\n        and self.leaves[0].value == \"yield\"\n    )",
                "def contains_standalone_comments(self, depth_limit: int = sys.maxsize) -> bool:\n    \"\"\"If so, needs to be split before emitting.\"\"\"\n    for leaf in self.leaves:\n        if leaf.type == STANDALONE_COMMENT:\n            if leaf.bracket_depth <= depth_limit:\n                return True\n\n    return False",
                "def maybe_remove_trailing_comma(self, closing: Leaf) -> bool:\n    \"\"\"Remove trailing comma if there is one and it's safe.\"\"\"\n    if not (\n        self.leaves\n        and self.leaves[-1].type == token.COMMA\n        and closing.type in CLOSING_BRACKETS\n    ):\n        return False\n\n    if closing.type == token.RBRACE:\n        self.remove_trailing_comma()\n        return True\n\n    if closing.type == token.RSQB:\n        comma = self.leaves[-1]\n        if comma.parent and comma.parent.type == syms.listmaker:\n            self.remove_trailing_comma()\n            return True\n\n    # For parens let's check if it's safe to remove the comma.  If the\n    # trailing one is the only one, we might mistakenly change a tuple\n    # into a different type by removing the comma.\n    depth = closing.bracket_depth + 1\n    commas = 0\n    opening = closing.opening_bracket\n    for _opening_index, leaf in enumerate(self.leaves):\n        if leaf is opening:\n            break\n\n    else:\n        return False\n\n    for leaf in self.leaves[_opening_index + 1:]:\n        if leaf is closing:\n            break\n\n        bracket_depth = leaf.bracket_depth\n        if bracket_depth == depth and leaf.type == token.COMMA:\n            commas += 1\n            if leaf.parent and leaf.parent.type == syms.arglist:\n                commas += 1\n                break\n\n    if commas > 1:\n        self.remove_trailing_comma()\n        return True\n\n    return False",
                "def maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool:\n    \"\"\"In a for loop, or comprehension, the variables are often unpacks.\n\n    To avoid splitting on the comma in this situation, increase the depth of\n    tokens between `for` and `in`.\n    \"\"\"\n    if leaf.type == token.NAME and leaf.value == \"for\":\n        self.has_for = True\n        self.bracket_tracker.depth += 1\n        self._for_loop_variable = True\n        return True\n\n    return False",
                "def maybe_decrement_after_for_loop_variable(self, leaf: Leaf) -> bool:\n    \"\"\"See `maybe_increment_for_loop_variable` above for explanation.\"\"\"\n    if self._for_loop_variable and leaf.type == token.NAME and leaf.value == \"in\":\n        self.bracket_tracker.depth -= 1\n        self._for_loop_variable = False\n        return True\n\n    return False",
                "def append_comment(self, comment: Leaf) -> bool:\n    \"\"\"Add an inline or standalone comment to the line.\"\"\"\n    if (\n        comment.type == STANDALONE_COMMENT\n        and self.bracket_tracker.any_open_brackets()\n    ):\n        comment.prefix = \"\"\n        return False\n\n    if comment.type != token.COMMENT:\n        return False\n\n    after = len(self.leaves) - 1\n    if after == -1:\n        comment.type = STANDALONE_COMMENT\n        comment.prefix = \"\"\n        return False\n\n    else:\n        self.comments.append((after, comment))\n        return True",
                "def comments_after(self, leaf: Leaf) -> Iterator[Leaf]:\n    \"\"\"Generate comments that should appear directly after `leaf`.\"\"\"\n    for _leaf_index, _leaf in enumerate(self.leaves):\n        if leaf is _leaf:\n            break\n\n    else:\n        return\n\n    for index, comment_after in self.comments:\n        if _leaf_index == index:\n            yield comment_after",
                "def remove_trailing_comma(self) -> None:\n    \"\"\"Remove the trailing comma and moves the comments attached to it.\"\"\"\n    comma_index = len(self.leaves) - 1\n    for i in range(len(self.comments)):\n        comment_index, comment = self.comments[i]\n        if comment_index == comma_index:\n            self.comments[i] = (comma_index - 1, comment)\n    self.leaves.pop()",
                "def __str__(self) -> str:\n    \"\"\"Render the line.\"\"\"\n    if not self:\n        return \"\\n\"\n\n    indent = \"    \" * self.depth\n    leaves = iter(self.leaves)\n    first = next(leaves)\n    res = f\"{first.prefix}{indent}{first.value}\"\n    for leaf in leaves:\n        res += str(leaf)\n    for _, comment in self.comments:\n        res += str(comment)\n    return res + \"\\n\"",
                "def __bool__(self) -> bool:\n    \"\"\"Return True if the line has leaves or comments.\"\"\"\n    return bool(self.leaves or self.comments)",
                "def append(self, leaf: Leaf, preformatted: bool = True) -> None:\n    \"\"\"Just add a new `leaf` to the end of the lines.\n\n    The `preformatted` argument is ignored.\n\n    Keeps track of indentation `depth`, which is useful when the user\n    says `# fmt: on`. Otherwise, doesn't do anything with the `leaf`.\n    \"\"\"\n    try:\n        list(generate_comments(leaf))\n    except FormatOn as f_on:\n        self.leaves.append(f_on.leaf_from_consumed(leaf))\n        raise\n\n    self.leaves.append(leaf)\n    if leaf.type == token.INDENT:\n        self.depth += 1\n    elif leaf.type == token.DEDENT:\n        self.depth -= 1",
                "def __str__(self) -> str:\n    \"\"\"Render unformatted lines from leaves which were added with `append()`.\n\n    `depth` is not used for indentation in this case.\n    \"\"\"\n    if not self:\n        return \"\\n\"\n\n    res = \"\"\n    for leaf in self.leaves:\n        res += str(leaf)\n    return res",
                "def append_comment(self, comment: Leaf) -> bool:\n    \"\"\"Not implemented in this class. Raises `NotImplementedError`.\"\"\"\n    raise NotImplementedError(\"Unformatted lines don't store comments separately.\")",
                "def maybe_remove_trailing_comma(self, closing: Leaf) -> bool:\n    \"\"\"Does nothing and returns False.\"\"\"\n    return False",
                "def maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool:\n    \"\"\"Does nothing and returns False.\"\"\"\n    return False",
                "def maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    \"\"\"Return the number of extra empty lines before and after the `current_line`.\n\n    This is for separating `def`, `async def` and `class` with extra empty\n    lines (two on module-level), as well as providing an extra empty line\n    after flow control keywords to make them more prominent.\n    \"\"\"\n    if isinstance(current_line, UnformattedLines):\n        return 0, 0\n\n    before, after = self._maybe_empty_lines(current_line)\n    before -= self.previous_after\n    self.previous_after = after\n    self.previous_line = current_line\n    return before, after",
                "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    max_allowed = 1\n    if current_line.depth == 0:\n        max_allowed = 2\n    if current_line.leaves:\n        # Consume the first leaf's extra newlines.\n        first_leaf = current_line.leaves[0]\n        before = first_leaf.prefix.count(\"\\n\")\n        before = min(before, max_allowed)\n        first_leaf.prefix = \"\"\n    else:\n        before = 0\n    depth = current_line.depth\n    while self.previous_defs and self.previous_defs[-1] >= depth:\n        self.previous_defs.pop()\n        before = 1 if depth else 2\n    is_decorator = current_line.is_decorator\n    if is_decorator or current_line.is_def or current_line.is_class:\n        if not is_decorator:\n            self.previous_defs.append(depth)\n        if self.previous_line is None:\n            # Don't insert empty lines before the first line in the file.\n            return 0, 0\n\n        if self.previous_line and self.previous_line.is_decorator:\n            # Don't insert empty lines between decorators.\n            return 0, 0\n\n        newlines = 2\n        if current_line.depth:\n            newlines -= 1\n        return newlines, 0\n\n    if current_line.is_flow_control:\n        return before, 1\n\n    if (\n        self.previous_line\n        and self.previous_line.is_import\n        and not current_line.is_import\n        and depth == self.previous_line.depth\n    ):\n        return (before or 1), 0\n\n    if (\n        self.previous_line\n        and self.previous_line.is_yield\n        and (not current_line.is_yield or depth != self.previous_line.depth)\n    ):\n        return (before or 1), 0\n\n    return before, 0",
                "def line(self, indent: int = 0, type: Type[Line] = Line) -> Iterator[Line]:\n    \"\"\"Generate a line.\n\n    If the line is empty, only emit if it makes sense.\n    If the line is too long, split it first and then generate.\n\n    If any lines were generated, set up a new current_line.\n    \"\"\"\n    if not self.current_line:\n        if self.current_line.__class__ == type:\n            self.current_line.depth += indent\n        else:\n            self.current_line = type(depth=self.current_line.depth + indent)\n        return  # Line is empty, don't emit. Creating a new one unnecessary.\n\n    complete_line = self.current_line\n    self.current_line = type(depth=complete_line.depth + indent)\n    yield complete_line",
                "def visit(self, node: LN) -> Iterator[Line]:\n    \"\"\"Main method to visit `node` and its children.\n\n    Yields :class:`Line` objects.\n    \"\"\"\n    if isinstance(self.current_line, UnformattedLines):\n        # File contained `# fmt: off`\n        yield from self.visit_unformatted(node)\n\n    else:\n        yield from super().visit(node)",
                "def visit_default(self, node: LN) -> Iterator[Line]:\n    \"\"\"Default `visit_*()` implementation. Recurses to children of `node`.\"\"\"\n    if isinstance(node, Leaf):\n        any_open_brackets = self.current_line.bracket_tracker.any_open_brackets()\n        try:\n            for comment in generate_comments(node):\n                if any_open_brackets:\n                    # any comment within brackets is subject to splitting\n                    self.current_line.append(comment)\n                elif comment.type == token.COMMENT:\n                    # regular trailing comment\n                    self.current_line.append(comment)\n                    yield from self.line()\n\n                else:\n                    # regular standalone comment\n                    yield from self.line()\n\n                    self.current_line.append(comment)\n                    yield from self.line()\n\n        except FormatOff as f_off:\n            f_off.trim_prefix(node)\n            yield from self.line(type=UnformattedLines)\n            yield from self.visit(node)\n\n        except FormatOn as f_on:\n            # This only happens here if somebody says \"fmt: on\" multiple\n            # times in a row.\n            f_on.trim_prefix(node)\n            yield from self.visit_default(node)\n\n        else:\n            normalize_prefix(node, inside_brackets=any_open_brackets)\n            if node.type == token.STRING:\n                normalize_string_quotes(node)\n            if node.type not in WHITESPACE:\n                self.current_line.append(node)\n    yield from super().visit_default(node)",
                "def visit_INDENT(self, node: Node) -> Iterator[Line]:\n    \"\"\"Increase indentation level, maybe yield a line.\"\"\"\n    # In blib2to3 INDENT never holds comments.\n    yield from self.line(+1)\n    yield from self.visit_default(node)",
                "def visit_DEDENT(self, node: Node) -> Iterator[Line]:\n    \"\"\"Decrease indentation level, maybe yield a line.\"\"\"\n    # DEDENT has no value. Additionally, in blib2to3 it never holds comments.\n    yield from self.line(-1)",
                "def visit_stmt(\n    self, node: Node, keywords: Set[str], parens: Set[str]\n) -> Iterator[Line]:\n    \"\"\"Visit a statement.\n\n    This implementation is shared for `if`, `while`, `for`, `try`, `except`,\n    `def`, `with`, `class`, and `assert`.\n\n    The relevant Python language `keywords` for a given statement will be\n    NAME leaves within it. This methods puts those on a separate line.\n\n    `parens` holds pairs of nodes where invisible parentheses should be put.\n    Keys hold nodes after which opening parentheses should be put, values\n    hold nodes before which closing parentheses should be put.\n    \"\"\"\n    normalize_invisible_parens(node, parens_after=parens)\n    for child in node.children:\n        if child.type == token.NAME and child.value in keywords:  # type: ignore\n            yield from self.line()\n\n        yield from self.visit(child)",
                "def visit_simple_stmt(self, node: Node) -> Iterator[Line]:\n    \"\"\"Visit a statement without nested statements.\"\"\"\n    is_suite_like = node.parent and node.parent.type in STATEMENT\n    if is_suite_like:\n        yield from self.line(+1)\n        yield from self.visit_default(node)\n        yield from self.line(-1)\n\n    else:\n        yield from self.line()\n        yield from self.visit_default(node)",
                "def visit_async_stmt(self, node: Node) -> Iterator[Line]:\n    \"\"\"Visit `async def`, `async for`, `async with`.\"\"\"\n    yield from self.line()\n\n    children = iter(node.children)\n    for child in children:\n        yield from self.visit(child)\n\n        if child.type == token.ASYNC:\n            break\n\n    internal_stmt = next(children)\n    for child in internal_stmt.children:\n        yield from self.visit(child)",
                "def visit_decorators(self, node: Node) -> Iterator[Line]:\n    \"\"\"Visit decorators.\"\"\"\n    for child in node.children:\n        yield from self.line()\n        yield from self.visit(child)",
                "def visit_import_from(self, node: Node) -> Iterator[Line]:\n    \"\"\"Visit import_from and maybe put invisible parentheses.\n\n    This is separate from `visit_stmt` because import statements don't\n    support arbitrary atoms and thus handling of parentheses is custom.\n    \"\"\"\n    check_lpar = False\n    for index, child in enumerate(node.children):\n        if check_lpar:\n            if child.type == token.LPAR:\n                # make parentheses invisible\n                child.value = \"\"  # type: ignore\n                node.children[-1].value = \"\"  # type: ignore\n            else:\n                # insert invisible parentheses\n                node.insert_child(index, Leaf(token.LPAR, \"\"))\n                node.append_child(Leaf(token.RPAR, \"\"))\n            break\n\n        check_lpar = (\n            child.type == token.NAME and child.value == \"import\"  # type: ignore\n        )\n\n    for child in node.children:\n        yield from self.visit(child)",
                "def visit_SEMI(self, leaf: Leaf) -> Iterator[Line]:\n    \"\"\"Remove a semicolon and put the other statement on a separate line.\"\"\"\n    yield from self.line()",
                "def visit_ENDMARKER(self, leaf: Leaf) -> Iterator[Line]:\n    \"\"\"End of file. Process outstanding comments and end with a newline.\"\"\"\n    yield from self.visit_default(leaf)\n    yield from self.line()",
                "def visit_unformatted(self, node: LN) -> Iterator[Line]:\n    \"\"\"Used when file contained a `# fmt: off`.\"\"\"\n    if isinstance(node, Node):\n        for child in node.children:\n            yield from self.visit(child)\n\n    else:\n        try:\n            self.current_line.append(node)\n        except FormatOn as f_on:\n            f_on.trim_prefix(node)\n            yield from self.line()\n            yield from self.visit(node)\n\n        if node.type == token.ENDMARKER:\n            # somebody decided not to put a final `# fmt: on`\n            yield from self.line()",
                "def __attrs_post_init__(self) -> None:\n    \"\"\"You are in a twisty little maze of passages.\"\"\"\n    v = self.visit_stmt\n    \u00d8: Set[str] = set()\n    self.visit_assert_stmt = partial(v, keywords={\"assert\"}, parens={\"assert\", \",\"})\n    self.visit_if_stmt = partial(v, keywords={\"if\", \"else\", \"elif\"}, parens={\"if\"})\n    self.visit_while_stmt = partial(v, keywords={\"while\", \"else\"}, parens={\"while\"})\n    self.visit_for_stmt = partial(v, keywords={\"for\", \"else\"}, parens={\"for\", \"in\"})\n    self.visit_try_stmt = partial(\n        v, keywords={\"try\", \"except\", \"else\", \"finally\"}, parens=\u00d8\n    )\n    self.visit_except_clause = partial(v, keywords={\"except\"}, parens=\u00d8)\n    self.visit_with_stmt = partial(v, keywords={\"with\"}, parens=\u00d8)\n    self.visit_funcdef = partial(v, keywords={\"def\"}, parens=\u00d8)\n    self.visit_classdef = partial(v, keywords={\"class\"}, parens=\u00d8)\n    self.visit_async_funcdef = self.visit_async_stmt\n    self.visit_decorated = self.visit_decorators",
                "@wraps(split_func)\ndef split_wrapper(line: Line, py36: bool = False) -> Iterator[Line]:\n    for l in split_func(line, py36):\n        normalize_prefix(l.leaves[0], inside_brackets=True)\n        yield l",
                "def append_to_line(leaf: Leaf) -> Iterator[Line]:\n    \"\"\"Append `leaf` to current line or to new line if appending impossible.\"\"\"\n    nonlocal current_line\n    try:\n        current_line.append_safe(leaf, preformatted=True)\n    except ValueError as ve:\n        yield current_line\n\n        current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n        current_line.append(leaf)",
                "def append_to_line(leaf: Leaf) -> Iterator[Line]:\n    \"\"\"Append `leaf` to current line or to new line if appending impossible.\"\"\"\n    nonlocal current_line\n    try:\n        current_line.append_safe(leaf, preformatted=True)\n    except ValueError as ve:\n        yield current_line\n\n        current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n        current_line.append(leaf)",
                "def done(self, src: Path, changed: bool) -> None:\n    \"\"\"Increment the counter for successful reformatting. Write out a message.\"\"\"\n    if changed:\n        reformatted = \"would reformat\" if self.check else \"reformatted\"\n        if not self.quiet:\n            out(f\"{reformatted} {src}\")\n        self.change_count += 1\n    else:\n        if not self.quiet:\n            out(f\"{src} already well formatted, good job.\", bold=False)\n        self.same_count += 1",
                "def failed(self, src: Path, message: str) -> None:\n    \"\"\"Increment the counter for failed reformatting. Write out a message.\"\"\"\n    err(f\"error: cannot format {src}: {message}\")\n    self.failure_count += 1",
                "@property\ndef return_code(self) -> int:\n    \"\"\"Return the exit code that the app should use.\n\n    This considers the current state of changed files and failures:\n    - if there were any failures, return 123;\n    - if any files were changed and --check is being used, return 1;\n    - otherwise return 0.\n    \"\"\"\n    # According to http://tldp.org/LDP/abs/html/exitcodes.html starting with\n    # 126 we have special returncodes reserved by the shell.\n    if self.failure_count:\n        return 123\n\n    elif self.change_count and self.check:\n        return 1\n\n    return 0",
                "def __str__(self) -> str:\n    \"\"\"Render a color report of the current state.\n\n    Use `click.unstyle` to remove colors.\n    \"\"\"\n    if self.check:\n        reformatted = \"would be reformatted\"\n        unchanged = \"would be left unchanged\"\n        failed = \"would fail to reformat\"\n    else:\n        reformatted = \"reformatted\"\n        unchanged = \"left unchanged\"\n        failed = \"failed to reformat\"\n    report = []\n    if self.change_count:\n        s = \"s\" if self.change_count > 1 else \"\"\n        report.append(\n            click.style(f\"{self.change_count} file{s} {reformatted}\", bold=True)\n        )\n    if self.same_count:\n        s = \"s\" if self.same_count > 1 else \"\"\n        report.append(f\"{self.same_count} file{s} {unchanged}\")\n    if self.failure_count:\n        s = \"s\" if self.failure_count > 1 else \"\"\n        report.append(\n            click.style(f\"{self.failure_count} file{s} {failed}\", fg=\"red\")\n        )\n    return \", \".join(report) + \".\"",
                "def _v(node: ast.AST, depth: int = 0) -> Iterator[str]:\n    \"\"\"Simple visitor generating strings to compare ASTs by content.\"\"\"\n    yield f\"{'  ' * depth}{node.__class__.__name__}(\"\n\n    for field in sorted(node._fields):\n        try:\n            value = getattr(node, field)\n        except AttributeError:\n            continue\n\n        yield f\"{'  ' * (depth+1)}{field}=\"\n\n        if isinstance(value, list):\n            for item in value:\n                if isinstance(item, ast.AST):\n                    yield from _v(item, depth + 2)\n\n        elif isinstance(value, ast.AST):\n            yield from _v(value, depth + 2)\n\n        else:\n            yield f\"{'  ' * (depth+2)}{value!r},  # {value.__class__.__name__}\"\n\n    yield f\"{'  ' * depth})  # /{node.__class__.__name__}\""
            ],
            "inscope_function_signatures": [
                "main(ctx: click.Context, line_length: int, check: bool, diff: bool, fast: bool, quiet: bool, src: List[str]) -> None",
                "schedule_formatting(sources: List[Path], line_length: int, write_back: WriteBack, fast: bool, quiet: bool, loop: BaseEventLoop, executor: Executor) -> int",
                "format_file_in_place(src: Path, line_length: int, fast: bool, write_back: WriteBack=WriteBack.NO, lock: Any=None) -> bool",
                "format_stdin_to_stdout(line_length: int, fast: bool, write_back: WriteBack=WriteBack.NO) -> bool",
                "format_file_contents(src_contents: str, line_length: int, fast: bool) -> FileContent",
                "format_str(src_contents: str, line_length: int) -> FileContent",
                "lib2to3_parse(src_txt: str) -> Node",
                "lib2to3_unparse(node: Node) -> str",
                "whitespace(leaf: Leaf) -> str",
                "preceding_leaf(node: Optional[LN]) -> Optional[Leaf]",
                "is_split_after_delimiter(leaf: Leaf, previous: Leaf=None) -> int",
                "is_split_before_delimiter(leaf: Leaf, previous: Leaf=None) -> int",
                "is_delimiter(leaf: Leaf, previous: Leaf=None) -> int",
                "generate_comments(leaf: Leaf) -> Iterator[Leaf]",
                "make_comment(content: str) -> str",
                "split_line(line: Line, line_length: int, inner: bool=False, py36: bool=False) -> Iterator[Line]",
                "left_hand_split(line: Line, py36: bool=False) -> Iterator[Line]",
                "right_hand_split(line: Line, py36: bool=False, omit: Collection[LeafID]=()) -> Iterator[Line]",
                "bracket_split_succeeded_or_raise(head: Line, body: Line, tail: Line) -> None",
                "dont_increase_indentation(split_func: SplitFunc) -> SplitFunc",
                "delimiter_split(line: Line, py36: bool=False) -> Iterator[Line]",
                "standalone_comment_split(line: Line, py36: bool=False) -> Iterator[Line]",
                "is_import(leaf: Leaf) -> bool",
                "normalize_prefix(leaf: Leaf) -> None",
                "normalize_string_quotes(leaf: Leaf) -> None",
                "normalize_invisible_parens(node: Node, parens_after: Set[str]) -> None",
                "is_empty_tuple(node: LN) -> bool",
                "is_one_tuple(node: LN) -> bool",
                "max_delimiter_priority_in_atom(node: LN) -> int",
                "ensure_visible(leaf: Leaf) -> None",
                "is_python36(node: Node) -> bool",
                "gen_python_files_in_dir(path: Path) -> Iterator[Path]",
                "assert_equivalent(src: str, dst: str) -> None",
                "assert_stable(src: str, dst: str, line_length: int) -> None",
                "dump_to_file(*output: str) -> str",
                "diff(a: str, b: str, a_name: str, b_name: str) -> str",
                "cancel(tasks: List[asyncio.Task]) -> None",
                "shutdown(loop: BaseEventLoop) -> None",
                "__init__(self, consumed: int) -> None",
                "trim_prefix(self, leaf: Leaf) -> None",
                "leaf_from_consumed(self, leaf: Leaf) -> Leaf",
                "visit(self, node: LN) -> Iterator[T]",
                "visit_default(self, node: LN) -> Iterator[T]",
                "visit_default(self, node: LN) -> Iterator[T]",
                "show(cls, code: str) -> None",
                "mark(self, leaf: Leaf) -> None",
                "any_open_brackets(self) -> bool",
                "max_delimiter_priority(self, exclude: Iterable[LeafID]=()) -> int",
                "append(self, leaf: Leaf, preformatted: bool=False) -> None",
                "append_safe(self, leaf: Leaf, preformatted: bool=False) -> None",
                "is_comment(self) -> bool",
                "is_decorator(self) -> bool",
                "is_import(self) -> bool",
                "is_class(self) -> bool",
                "is_def(self) -> bool",
                "is_flow_control(self) -> bool",
                "is_yield(self) -> bool",
                "contains_standalone_comments(self, depth_limit: int=sys.maxsize) -> bool",
                "maybe_remove_trailing_comma(self, closing: Leaf) -> bool",
                "maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool",
                "maybe_decrement_after_for_loop_variable(self, leaf: Leaf) -> bool",
                "append_comment(self, comment: Leaf) -> bool",
                "comments_after(self, leaf: Leaf) -> Iterator[Leaf]",
                "remove_trailing_comma(self) -> None",
                "__str__(self) -> str",
                "__bool__(self) -> bool",
                "append(self, leaf: Leaf, preformatted: bool=True) -> None",
                "__str__(self) -> str",
                "append_comment(self, comment: Leaf) -> bool",
                "maybe_remove_trailing_comma(self, closing: Leaf) -> bool",
                "maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool",
                "maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]",
                "_maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]",
                "line(self, indent: int=0, type: Type[Line]=Line) -> Iterator[Line]",
                "visit(self, node: LN) -> Iterator[Line]",
                "visit_default(self, node: LN) -> Iterator[Line]",
                "visit_INDENT(self, node: Node) -> Iterator[Line]",
                "visit_DEDENT(self, node: Node) -> Iterator[Line]",
                "visit_stmt(self, node: Node, keywords: Set[str], parens: Set[str]) -> Iterator[Line]",
                "visit_simple_stmt(self, node: Node) -> Iterator[Line]",
                "visit_async_stmt(self, node: Node) -> Iterator[Line]",
                "visit_decorators(self, node: Node) -> Iterator[Line]",
                "visit_import_from(self, node: Node) -> Iterator[Line]",
                "visit_SEMI(self, leaf: Leaf) -> Iterator[Line]",
                "visit_ENDMARKER(self, leaf: Leaf) -> Iterator[Line]",
                "visit_unformatted(self, node: LN) -> Iterator[Line]",
                "__attrs_post_init__(self) -> None",
                "split_wrapper(line: Line, py36: bool=False) -> Iterator[Line]",
                "append_to_line(leaf: Leaf) -> Iterator[Line]",
                "append_to_line(leaf: Leaf) -> Iterator[Line]",
                "done(self, src: Path, changed: bool) -> None",
                "failed(self, src: Path, message: str) -> None",
                "return_code(self) -> int",
                "__str__(self) -> str",
                "_v(node: ast.AST, depth: int=0) -> Iterator[str]"
            ],
            "variables_in_file": {
                "__version__": [
                    43,
                    143
                ],
                "DEFAULT_LINE_LENGTH": [
                    44,
                    111
                ],
                "syms": [
                    1536,
                    2050,
                    1411,
                    1285,
                    1528,
                    2058,
                    1419,
                    1296,
                    1937,
                    1938,
                    2067,
                    1430,
                    1304,
                    1434,
                    2074,
                    413,
                    1405,
                    1312,
                    1440,
                    1318,
                    2089,
                    1452,
                    2044,
                    46,
                    1329,
                    1336,
                    1209,
                    1353,
                    1389,
                    1232,
                    1366,
                    2027,
                    2137,
                    1370,
                    1501,
                    1247,
                    738,
                    1251,
                    1378,
                    1510,
                    1385,
                    490,
                    491,
                    492,
                    493,
                    494,
                    495,
                    496,
                    497,
                    1261,
                    1262,
                    1263,
                    1264,
                    1265,
                    1266,
                    1272,
                    1397,
                    762,
                    1403,
                    1404,
                    1277
                ],
                "pygram.python_symbols": [
                    46
                ],
                "pygram": [
                    384,
                    385,
                    391,
                    46,
                    382,
                    383
                ],
                "FileContent": [
                    338,
                    358,
                    47
                ],
                "str": [
                    2307,
                    260,
                    389,
                    1673,
                    268,
                    2190,
                    1809,
                    2323,
                    159,
                    417,
                    2337,
                    419,
                    2214,
                    1193,
                    47,
                    48,
                    1083,
                    191,
                    1217,
                    2244,
                    839,
                    201,
                    2250,
                    1614,
                    337,
                    849,
                    851,
                    468,
                    477,
                    2018,
                    358,
                    882,
                    1650,
                    372,
                    375,
                    377,
                    892
                ],
                "Encoding": [
                    48
                ],
                "Depth": [
                    49,
                    538
                ],
                "int": [
                    2176,
                    2307,
                    1546,
                    274,
                    2196,
                    918,
                    919,
                    537,
                    154,
                    921,
                    2088,
                    937,
                    49,
                    50,
                    51,
                    52,
                    53,
                    311,
                    1476,
                    454,
                    582,
                    714,
                    2250,
                    79,
                    337,
                    1490,
                    595,
                    220,
                    226,
                    1634,
                    358,
                    1000,
                    110,
                    2174,
                    2175
                ],
                "NodeType": [
                    50,
                    538
                ],
                "LeafID": [
                    539,
                    51,
                    1732,
                    582
                ],
                "Priority": [
                    539,
                    52
                ],
                "Index": [
                    597,
                    53
                ],
                "LN": [
                    1031,
                    456,
                    2055,
                    2088,
                    429,
                    2065,
                    1458,
                    1172,
                    54,
                    1019,
                    445
                ],
                "Union": [
                    54
                ],
                "Leaf": [
                    1152,
                    1153,
                    2048,
                    899,
                    772,
                    2052,
                    903,
                    1033,
                    1546,
                    1163,
                    1929,
                    1167,
                    786,
                    1557,
                    1943,
                    538,
                    795,
                    412,
                    540,
                    542,
                    1699,
                    1700,
                    1701,
                    680,
                    1961,
                    817,
                    1458,
                    2099,
                    54,
                    1463,
                    2047,
                    1598,
                    2111,
                    1217,
                    1476,
                    1860,
                    1738,
                    1739,
                    1740,
                    1490,
                    83,
                    596,
                    597,
                    86,
                    723,
                    89,
                    603,
                    862,
                    1896,
                    1908,
                    630,
                    2041,
                    2042,
                    895
                ],
                "Node": [
                    417,
                    2018,
                    2050,
                    389,
                    458,
                    1131,
                    2044,
                    2123,
                    1071,
                    1104,
                    1137,
                    1077,
                    54,
                    1174,
                    1083,
                    1116,
                    413,
                    447
                ],
                "SplitFunc": [
                    1659,
                    1821,
                    55
                ],
                "Callable": [
                    55
                ],
                "bool": [
                    2178,
                    899,
                    772,
                    903,
                    648,
                    1929,
                    2055,
                    653,
                    1934,
                    655,
                    2065,
                    658,
                    275,
                    660,
                    786,
                    278,
                    663,
                    1943,
                    666,
                    155,
                    156,
                    157,
                    158,
                    795,
                    672,
                    1690,
                    1828,
                    1837,
                    694,
                    311,
                    55,
                    312,
                    700,
                    578,
                    706,
                    580,
                    709,
                    1732,
                    714,
                    2123,
                    337,
                    723,
                    854,
                    599,
                    600,
                    601,
                    856,
                    603,
                    222,
                    223,
                    862,
                    1634,
                    613,
                    1901,
                    630,
                    2172,
                    2173,
                    895
                ],
                "Iterator": [
                    1031,
                    1163,
                    1167,
                    1172,
                    1557,
                    1690,
                    1828,
                    429,
                    1837,
                    1071,
                    817,
                    1077,
                    55,
                    1084,
                    445,
                    1860,
                    1733,
                    456,
                    2250,
                    1104,
                    1116,
                    1635,
                    1000,
                    2154,
                    1131,
                    1901,
                    1137,
                    1908,
                    1019
                ],
                "out": [
                    2183,
                    266,
                    2187,
                    460,
                    466,
                    469,
                    56,
                    473,
                    474
                ],
                "partial": [
                    1194,
                    1195,
                    1196,
                    1197,
                    1198,
                    1201,
                    1202,
                    1203,
                    1204,
                    56,
                    57
                ],
                "click.secho": [
                    56,
                    57
                ],
                "click": [
                    2231,
                    129,
                    153,
                    134,
                    106,
                    107,
                    268,
                    175,
                    143,
                    144,
                    115,
                    147,
                    151,
                    56,
                    57,
                    124,
                    2239
                ],
                "err": [
                    2192,
                    57,
                    173,
                    2350
                ],
                "UserWarning": [
                    60
                ],
                "Exception": [
                    64,
                    2277,
                    72,
                    200,
                    2287
                ],
                "__init__": [
                    80
                ],
                "super": [
                    80,
                    1069,
                    1029
                ],
                "consumed": [
                    1601,
                    1605,
                    1609,
                    1583,
                    80,
                    81,
                    1586
                ],
                "self.consumed": [
                    88,
                    81,
                    84
                ],
                "self": [
                    1024,
                    1026,
                    1034,
                    1039,
                    1042,
                    1043,
                    1047,
                    1049,
                    1050,
                    1054,
                    1055,
                    1061,
                    1068,
                    561,
                    562,
                    1074,
                    564,
                    565,
                    566,
                    567,
                    568,
                    1075,
                    570,
                    1080,
                    572,
                    574,
                    575,
                    576,
                    580,
                    588,
                    1100,
                    1102,
                    81,
                    84,
                    1108,
                    1109,
                    1110,
                    88,
                    1113,
                    1114,
                    1118,
                    1122,
                    617,
                    1129,
                    621,
                    622,
                    623,
                    624,
                    625,
                    1134,
                    627,
                    628,
                    1135,
                    636,
                    637,
                    640,
                    645,
                    2181,
                    2182,
                    2184,
                    1161,
                    650,
                    2186,
                    2188,
                    1165,
                    655,
                    1169,
                    1170,
                    2193,
                    660,
                    1176,
                    666,
                    667,
                    668,
                    1180,
                    2206,
                    1183,
                    1184,
                    2209,
                    675,
                    1188,
                    680,
                    1192,
                    1194,
                    1195,
                    1196,
                    1197,
                    1198,
                    2219,
                    1201,
                    1202,
                    1203,
                    1204,
                    1205,
                    1206,
                    2228,
                    2229,
                    2231,
                    2233,
                    2234,
                    700,
                    701,
                    702,
                    2235,
                    2236,
                    2237,
                    2239,
                    709,
                    710,
                    711,
                    716,
                    726,
                    727,
                    733,
                    737,
                    739,
                    748,
                    755,
                    767,
                    779,
                    780,
                    781,
                    788,
                    789,
                    790,
                    799,
                    807,
                    814,
                    819,
                    826,
                    832,
                    833,
                    834,
                    836,
                    837,
                    841,
                    844,
                    845,
                    850,
                    856,
                    873,
                    876,
                    878,
                    880,
                    887,
                    891,
                    931,
                    932,
                    933,
                    934,
                    950,
                    951,
                    443,
                    956,
                    957,
                    449,
                    961,
                    457,
                    461,
                    974,
                    463,
                    975,
                    465,
                    977,
                    982,
                    983,
                    984,
                    1008,
                    1009,
                    1010,
                    1012,
                    1015,
                    1016
                ],
                "leaf.prefix": [
                    1955,
                    1958,
                    1576,
                    620,
                    84,
                    88,
                    1950
                ],
                "leaf": [
                    1536,
                    1540,
                    1552,
                    1553,
                    1576,
                    557,
                    560,
                    562,
                    563,
                    564,
                    566,
                    2102,
                    2103,
                    1593,
                    570,
                    572,
                    573,
                    574,
                    576,
                    2117,
                    2118,
                    1607,
                    2119,
                    2120,
                    84,
                    88,
                    613,
                    620,
                    622,
                    623,
                    624,
                    625,
                    627,
                    628,
                    640,
                    645,
                    1169,
                    1704,
                    1707,
                    1708,
                    1711,
                    1713,
                    1714,
                    1721,
                    1722,
                    1723,
                    1222,
                    1223,
                    1224,
                    716,
                    717,
                    718,
                    1231,
                    1744,
                    1746,
                    1235,
                    1748,
                    1750,
                    1751,
                    1752,
                    1766,
                    1767,
                    1768,
                    748,
                    749,
                    755,
                    756,
                    759,
                    760,
                    762,
                    778,
                    788,
                    820,
                    1864,
                    1869,
                    1871,
                    848,
                    849,
                    1872,
                    1874,
                    1877,
                    1879,
                    1880,
                    1881,
                    1884,
                    871,
                    873,
                    876,
                    877,
                    879,
                    1912,
                    891,
                    892,
                    1917,
                    1919,
                    1920,
                    1922,
                    1931,
                    1932,
                    1933,
                    1950,
                    1955,
                    1958,
                    1969,
                    1982,
                    1986,
                    1987,
                    1484,
                    1499,
                    1500,
                    1501,
                    2015,
                    1508,
                    1509,
                    1510,
                    1514,
                    1518,
                    1525,
                    1526,
                    1527,
                    1528,
                    1533,
                    1534,
                    1535
                ],
                "unformatted_prefix": [
                    88,
                    89
                ],
                "token.NEWLINE": [
                    89,
                    487
                ],
                "token": [
                    512,
                    513,
                    514,
                    515,
                    516,
                    517,
                    518,
                    519,
                    520,
                    521,
                    522,
                    1540,
                    524,
                    2060,
                    2061,
                    1040,
                    2073,
                    2075,
                    2041,
                    2079,
                    2042,
                    2084,
                    1065,
                    557,
                    2094,
                    1593,
                    1594,
                    2047,
                    2048,
                    2117,
                    2119,
                    1099,
                    2131,
                    89,
                    2139,
                    2142,
                    1124,
                    1146,
                    1152,
                    1153,
                    1157,
                    655,
                    667,
                    1186,
                    684,
                    686,
                    688,
                    1210,
                    701,
                    1214,
                    710,
                    1228,
                    1232,
                    727,
                    1241,
                    1242,
                    732,
                    1244,
                    736,
                    1257,
                    1773,
                    1775,
                    1271,
                    760,
                    1283,
                    1287,
                    778,
                    1298,
                    788,
                    1301,
                    1306,
                    1309,
                    804,
                    1317,
                    1321,
                    1326,
                    1333,
                    1338,
                    1342,
                    1344,
                    1347,
                    1350,
                    1355,
                    1360,
                    1363,
                    1880,
                    1881,
                    1375,
                    1379,
                    1893,
                    1382,
                    1896,
                    877,
                    879,
                    1398,
                    1416,
                    1935,
                    1429,
                    1434,
                    1437,
                    1441,
                    1442,
                    1445,
                    1449,
                    440,
                    1484,
                    468,
                    487,
                    1518,
                    1520,
                    2035,
                    1525,
                    502,
                    503,
                    504,
                    505,
                    506,
                    507,
                    1533,
                    510,
                    511
                ],
                "FormatError": [
                    96,
                    92
                ],
                "Enum": [
                    100
                ],
                "NO": [
                    1280,
                    1409,
                    1414,
                    1417,
                    1291,
                    1294,
                    1424,
                    1299,
                    1302,
                    1432,
                    1307,
                    1435,
                    1310,
                    1438,
                    1315,
                    1443,
                    1319,
                    1450,
                    1453,
                    1327,
                    1334,
                    1339,
                    1345,
                    1219,
                    1348,
                    1351,
                    1226,
                    1356,
                    1233,
                    1361,
                    1364,
                    1239,
                    1368,
                    1242,
                    1372,
                    1376,
                    1249,
                    1380,
                    101,
                    1383,
                    1392,
                    1395,
                    1269,
                    1400,
                    1273
                ],
                "YES": [
                    102
                ],
                "DIFF": [
                    103
                ],
                "click.Context": [
                    153
                ],
                "List": [
                    162,
                    1699,
                    1700,
                    1701,
                    1670,
                    1659,
                    1738,
                    1739,
                    1740,
                    2348,
                    596,
                    597,
                    919,
                    219,
                    159
                ],
                "sources": [
                    162,
                    166,
                    169,
                    171,
                    210,
                    244,
                    185,
                    187,
                    188
                ],
                "Path": [
                    162,
                    2178,
                    164,
                    2154,
                    171,
                    2190,
                    273,
                    219
                ],
                "s": [
                    163,
                    164,
                    170,
                    173,
                    2229,
                    2231,
                    2234,
                    2235,
                    2237,
                    2239
                ],
                "src": [
                    260,
                    262,
                    2183,
                    2312,
                    2187,
                    2192,
                    284,
                    163,
                    294,
                    297,
                    298,
                    318,
                    319,
                    321,
                    333,
                    2276,
                    241,
                    242,
                    244,
                    252,
                    254
                ],
                "p": [
                    1411,
                    1419,
                    1931,
                    1422,
                    1296,
                    1937,
                    1938,
                    1304,
                    1312,
                    1440,
                    164,
                    165,
                    166,
                    167,
                    1576,
                    169,
                    1577,
                    1452,
                    1580,
                    1329,
                    1585,
                    1332,
                    1336,
                    188,
                    191,
                    1343,
                    197,
                    199,
                    1223,
                    201,
                    1353,
                    1231,
                    1232,
                    1359,
                    1237,
                    1366,
                    1370,
                    1374,
                    1378,
                    1385,
                    1388,
                    1389,
                    1397,
                    1403,
                    1404,
                    1405
                ],
                "p.is_dir": [
                    165
                ],
                "sources.extend": [
                    166
                ],
                "gen_python_files_in_dir": [
                    2163,
                    166
                ],
                "p.is_file": [
                    191,
                    167
                ],
                "sources.append": [
                    169,
                    171
                ],
                "check": [
                    179,
                    2172,
                    189,
                    174
                ],
                "diff": [
                    2312,
                    2313,
                    299,
                    333,
                    174,
                    181,
                    2298
                ],
                "exc": [
                    201,
                    2282,
                    175,
                    176,
                    177,
                    2288,
                    2290,
                    408,
                    410
                ],
                "click.ClickException": [
                    175
                ],
                "exc.exit_code": [
                    176
                ],
                "write_back": [
                    193,
                    197,
                    293,
                    296,
                    328,
                    330,
                    235,
                    210,
                    242,
                    180,
                    182,
                    184,
                    251
                ],
                "WriteBack.NO": [
                    251,
                    180,
                    276,
                    311
                ],
                "WriteBack": [
                    328,
                    330,
                    235,
                    180,
                    276,
                    182,
                    311,
                    184,
                    251,
                    221
                ],
                "WriteBack.DIFF": [
                    330,
                    235,
                    182
                ],
                "WriteBack.YES": [
                    184,
                    328
                ],
                "len": [
                    832,
                    833,
                    1953,
                    1987,
                    2083,
                    807,
                    650,
                    2059,
                    1809,
                    1586,
                    1652,
                    2068,
                    185,
                    187,
                    2079
                ],
                "ctx.exit": [
                    202,
                    186,
                    215
                ],
                "ctx": [
                    202,
                    186,
                    215
                ],
                "report": [
                    2241,
                    260,
                    262,
                    199,
                    201,
                    202,
                    268,
                    269,
                    2235,
                    2227,
                    2230,
                    251,
                    2238,
                    189,
                    254
                ],
                "Report": [
                    251,
                    189
                ],
                "quiet": [
                    265,
                    267,
                    210,
                    2173,
                    251,
                    189
                ],
                "changed": [
                    192,
                    2180,
                    196,
                    199
                ],
                "format_stdin_to_stdout": [
                    192
                ],
                "line_length": [
                    288,
                    193,
                    321,
                    354,
                    197,
                    2309,
                    1677,
                    210,
                    242,
                    1652,
                    376,
                    348
                ],
                "fast": [
                    288,
                    193,
                    321,
                    352,
                    197,
                    210,
                    242
                ],
                "format_file_in_place": [
                    242,
                    196
                ],
                "report.done": [
                    262,
                    199
                ],
                "report.failed": [
                    201,
                    260,
                    254
                ],
                "report.return_code": [
                    202,
                    269
                ],
                "loop": [
                    2374,
                    264,
                    204,
                    208,
                    241,
                    210,
                    214,
                    247,
                    248,
                    2365,
                    2359,
                    2366
                ],
                "asyncio.get_event_loop": [
                    204
                ],
                "asyncio": [
                    264,
                    204,
                    2348,
                    2359,
                    249,
                    2366
                ],
                "executor": [
                    210,
                    242,
                    205
                ],
                "ProcessPoolExecutor": [
                    205
                ],
                "os.cpu_count": [
                    205
                ],
                "os": [
                    205
                ],
                "return_code": [
                    208,
                    206,
                    215
                ],
                "loop.run_until_complete": [
                    208,
                    2365
                ],
                "schedule_formatting": [
                    209
                ],
                "shutdown": [
                    214
                ],
                "click.command": [
                    106
                ],
                "click.option": [
                    129,
                    134,
                    107,
                    115,
                    124
                ],
                "click.version_option": [
                    143
                ],
                "click.argument": [
                    144
                ],
                "click.Path": [
                    147
                ],
                "click.pass_context": [
                    151
                ],
                "BaseEventLoop": [
                    224,
                    2355
                ],
                "Executor": [
                    225
                ],
                "lock": [
                    234,
                    300,
                    301,
                    239,
                    305,
                    242,
                    306
                ],
                "manager": [
                    238,
                    239
                ],
                "Manager": [
                    238
                ],
                "manager.Lock": [
                    239
                ],
                "tasks": [
                    2351,
                    240,
                    246,
                    249,
                    252
                ],
                "loop.run_in_executor": [
                    241
                ],
                "_task_values": [
                    248,
                    246,
                    247
                ],
                "list": [
                    483,
                    871,
                    2025,
                    596,
                    597,
                    246,
                    919,
                    2262,
                    1467
                ],
                "tasks.values": [
                    249,
                    246
                ],
                "loop.add_signal_handler": [
                    248,
                    247
                ],
                "signal.SIGINT": [
                    247
                ],
                "signal": [
                    248,
                    247
                ],
                "cancel": [
                    248,
                    247
                ],
                "signal.SIGTERM": [
                    248
                ],
                "asyncio.wait": [
                    249
                ],
                "cancelled": [
                    256,
                    258,
                    263,
                    264,
                    250
                ],
                "task": [
                    256,
                    257,
                    258,
                    259,
                    260,
                    262,
                    2351,
                    2352,
                    2364,
                    2359,
                    2363,
                    252,
                    253,
                    255
                ],
                "tasks.items": [
                    252
                ],
                "task.done": [
                    253,
                    2359
                ],
                "task.cancel": [
                    2352,
                    2364,
                    255
                ],
                "cancelled.append": [
                    256,
                    258
                ],
                "task.cancelled": [
                    257
                ],
                "task.exception": [
                    259,
                    260
                ],
                "task.result": [
                    262
                ],
                "asyncio.gather": [
                    264,
                    2366
                ],
                "click.echo": [
                    268
                ],
                "Any": [
                    277
                ],
                "tokenize.open": [
                    284
                ],
                "tokenize": [
                    284
                ],
                "src_buffer": [
                    284,
                    285,
                    294
                ],
                "src_contents": [
                    288,
                    353,
                    354,
                    299,
                    363,
                    349,
                    345,
                    348,
                    285
                ],
                "src_buffer.read": [
                    285
                ],
                "dst_contents": [
                    353,
                    354,
                    355,
                    295,
                    299,
                    364,
                    372,
                    375,
                    377,
                    378,
                    348,
                    349,
                    287
                ],
                "format_file_contents": [
                    321,
                    287
                ],
                "NothingChanged": [
                    290,
                    324,
                    346,
                    350
                ],
                "write_back.YES": [
                    293
                ],
                "open": [
                    294
                ],
                "src_buffer.encoding": [
                    294
                ],
                "f": [
                    294,
                    295,
                    2329,
                    2331,
                    2333,
                    2334
                ],
                "f.write": [
                    2331,
                    2333,
                    295
                ],
                "write_back.DIFF": [
                    296
                ],
                "src_name": [
                    297,
                    331,
                    299,
                    333
                ],
                "src.name": [
                    297,
                    298
                ],
                "dst_name": [
                    298,
                    299,
                    332,
                    333
                ],
                "diff_contents": [
                    299,
                    303
                ],
                "lock.acquire": [
                    301
                ],
                "sys.stdout.write": [
                    329,
                    333,
                    303
                ],
                "sys.stdout": [
                    329,
                    333,
                    303
                ],
                "sys": [
                    1857,
                    2278,
                    329,
                    714,
                    333,
                    303,
                    318
                ],
                "lock.release": [
                    306
                ],
                "sys.stdin.read": [
                    318
                ],
                "sys.stdin": [
                    318
                ],
                "dst": [
                    321,
                    2309,
                    2310,
                    2312,
                    329,
                    2313,
                    333,
                    2286,
                    2288,
                    319
                ],
                "src_contents.strip": [
                    345
                ],
                "format_str": [
                    348,
                    2309
                ],
                "assert_equivalent": [
                    353
                ],
                "assert_stable": [
                    354
                ],
                "src_node": [
                    370,
                    363,
                    367
                ],
                "lib2to3_parse": [
                    363,
                    483
                ],
                "lines": [
                    365,
                    370,
                    403,
                    405,
                    2330,
                    2331,
                    2332
                ],
                "LineGenerator": [
                    365
                ],
                "elt": [
                    373,
                    366
                ],
                "EmptyLineTracker": [
                    366
                ],
                "py36": [
                    1829,
                    1672,
                    1677,
                    367,
                    376,
                    1785,
                    1883
                ],
                "is_python36": [
                    367
                ],
                "empty_line": [
                    368,
                    372,
                    375
                ],
                "Line": [
                    1795,
                    1670,
                    1031,
                    1163,
                    1167,
                    1172,
                    917,
                    921,
                    1690,
                    1696,
                    1697,
                    1698,
                    1828,
                    937,
                    1837,
                    1071,
                    1077,
                    1084,
                    1856,
                    1732,
                    1733,
                    1860,
                    1735,
                    1736,
                    1737,
                    1868,
                    1104,
                    859,
                    1116,
                    992,
                    1888,
                    1634,
                    1635,
                    998,
                    1000,
                    1131,
                    1901,
                    368,
                    1137,
                    1906,
                    1908,
                    1019,
                    1916
                ],
                "after": [
                    931,
                    933,
                    807,
                    808,
                    935,
                    814,
                    369,
                    371,
                    373
                ],
                "current_line": [
                    1925,
                    1926,
                    1912,
                    928,
                    931,
                    934,
                    939,
                    941,
                    943,
                    949,
                    953,
                    954,
                    1856,
                    966,
                    1864,
                    970,
                    1866,
                    1868,
                    1869,
                    976,
                    984,
                    1886,
                    1888,
                    1889,
                    1893,
                    998,
                    1894,
                    1896,
                    1897,
                    370,
                    1906,
                    373,
                    376,
                    1914,
                    1916,
                    1917
                ],
                "lines.visit": [
                    370
                ],
                "_": [
                    850,
                    371,
                    374
                ],
                "range": [
                    833,
                    371,
                    374
                ],
                "before": [
                    931,
                    932,
                    935,
                    971,
                    944,
                    945,
                    979,
                    948,
                    373,
                    374,
                    952,
                    986,
                    988
                ],
                "elt.maybe_empty_lines": [
                    373
                ],
                "line": [
                    1922,
                    1672,
                    1785,
                    1687,
                    1696,
                    1697,
                    1698,
                    1829,
                    2341,
                    2342,
                    1704,
                    1916,
                    1585,
                    1586,
                    1587,
                    1588,
                    1844,
                    1590,
                    1848,
                    1850,
                    1723,
                    1597,
                    1856,
                    1735,
                    1736,
                    1737,
                    1868,
                    1871,
                    1744,
                    1874,
                    1888,
                    376,
                    1768,
                    1646,
                    1647,
                    1903,
                    1650,
                    1906,
                    1654,
                    1782,
                    1656,
                    377,
                    1660,
                    1662,
                    1919
                ],
                "split_line": [
                    376,
                    1677
                ],
                "GRAMMARS": [
                    395,
                    381
                ],
                "pygram.python_grammar_no_print_statement_no_exec_statement": [
                    382
                ],
                "pygram.python_grammar_no_print_statement": [
                    391,
                    383
                ],
                "pygram.python_grammar_no_exec_statement": [
                    384
                ],
                "pygram.python_grammar": [
                    385
                ],
                "grammar": [
                    395,
                    396,
                    391
                ],
                "src_txt": [
                    392,
                    393,
                    394,
                    398,
                    403
                ],
                "nl": [
                    393,
                    394
                ],
                "drv": [
                    396,
                    398
                ],
                "driver.Driver": [
                    396
                ],
                "driver": [
                    396
                ],
                "pytree.convert": [
                    396
                ],
                "pytree": [
                    396
                ],
                "result": [
                    1792,
                    1670,
                    1676,
                    398,
                    1683,
                    412,
                    413,
                    414,
                    1720,
                    1722,
                    1724,
                    1726,
                    1727,
                    1728,
                    1765,
                    1767,
                    1769,
                    1790,
                    1791
                ],
                "drv.parse_string": [
                    398
                ],
                "ParseError": [
                    401
                ],
                "lineno": [
                    408,
                    402,
                    405
                ],
                "column": [
                    408,
                    402
                ],
                "pe.context": [
                    402
                ],
                "pe": [
                    402
                ],
                "src_txt.splitlines": [
                    403
                ],
                "faulty_line": [
                    408,
                    405,
                    407
                ],
                "IndexError": [
                    676,
                    681,
                    1845,
                    406,
                    1469
                ],
                "ValueError": [
                    641,
                    1865,
                    408,
                    1913,
                    2107,
                    1853,
                    638
                ],
                "isinstance": [
                    928,
                    1024,
                    2052,
                    1033,
                    458,
                    1646,
                    2099,
                    1174,
                    1463,
                    2262,
                    2267,
                    412,
                    2264,
                    447
                ],
                "syms.file_input": [
                    413
                ],
                "code": [
                    419,
                    420,
                    483
                ],
                "node": [
                    1152,
                    1153,
                    1026,
                    2050,
                    1029,
                    1160,
                    1033,
                    2058,
                    2059,
                    1036,
                    2060,
                    2061,
                    2067,
                    2068,
                    1174,
                    1175,
                    2071,
                    1180,
                    1053,
                    1182,
                    1055,
                    1184,
                    1186,
                    419,
                    1060,
                    1061,
                    2082,
                    2083,
                    1064,
                    1065,
                    1066,
                    1067,
                    1068,
                    1069,
                    2089,
                    2092,
                    2093,
                    2098,
                    1075,
                    1460,
                    1461,
                    439,
                    440,
                    442,
                    443,
                    447,
                    448,
                    1472,
                    1097,
                    458,
                    459,
                    1098,
                    2252,
                    462,
                    2254,
                    2256,
                    1106,
                    2130,
                    468,
                    1109,
                    470,
                    473,
                    474,
                    1114,
                    1120,
                    2273,
                    2025,
                    1133,
                    2084,
                    1144,
                    2044,
                    1149
                ],
                "T": [
                    453,
                    423,
                    456,
                    426,
                    429,
                    445
                ],
                "TypeVar": [
                    423
                ],
                "Generic": [
                    426
                ],
                "node.type": [
                    1186,
                    2082,
                    1065,
                    2058,
                    459,
                    1067,
                    2089,
                    2067,
                    468,
                    439,
                    440,
                    442
                ],
                "name": [
                    440,
                    442,
                    443
                ],
                "token.tok_name": [
                    440,
                    468
                ],
                "type_repr": [
                    442,
                    459
                ],
                "getattr": [
                    2256,
                    443
                ],
                "self.visit_default": [
                    1061,
                    1169,
                    1075,
                    1109,
                    1114,
                    443
                ],
                "child": [
                    2049,
                    2050,
                    2052,
                    1157,
                    1160,
                    1161,
                    1175,
                    1176,
                    2044,
                    448,
                    449,
                    1098,
                    1099,
                    462,
                    463,
                    1102,
                    1121,
                    1122,
                    1124,
                    1128,
                    1129,
                    2025,
                    2027,
                    1133,
                    2029,
                    1135,
                    2030,
                    2031,
                    2033,
                    2034,
                    2158,
                    2159,
                    2160,
                    2039,
                    1144,
                    2163,
                    1146,
                    2043,
                    1148,
                    2165,
                    2166
                ],
                "node.children": [
                    1160,
                    2059,
                    2060,
                    2061,
                    2068,
                    2071,
                    1175,
                    2083,
                    2084,
                    2092,
                    2093,
                    2098,
                    448,
                    1098,
                    462,
                    1120,
                    2025,
                    1133,
                    1144,
                    1149
                ],
                "self.visit": [
                    1184,
                    449,
                    1122,
                    1129,
                    1161,
                    1102,
                    463,
                    1135,
                    1176,
                    1055
                ],
                "Visitor": [
                    992,
                    453
                ],
                "tree_depth": [
                    454
                ],
                "indent": [
                    457,
                    460,
                    844,
                    847,
                    466,
                    1010,
                    1012,
                    469,
                    1016
                ],
                "self.tree_depth": [
                    457,
                    465,
                    461
                ],
                "_type": [
                    459,
                    460,
                    466,
                    468,
                    469
                ],
                "token.tok_name.get": [
                    468
                ],
                "node.prefix": [
                    473,
                    470
                ],
                "node.value": [
                    474
                ],
                "v": [
                    482,
                    483,
                    1446,
                    1192,
                    1224,
                    1194,
                    1195,
                    588,
                    1196,
                    1197,
                    1199,
                    1933,
                    1201,
                    1202,
                    1203,
                    1204,
                    1937,
                    1938
                ],
                "DebugVisitor": [
                    482
                ],
                "v.visit": [
                    483
                ],
                "classmethod": [
                    476
                ],
                "dataclass": [
                    452,
                    908,
                    591,
                    533,
                    2169,
                    991
                ],
                "KEYWORDS": [
                    486
                ],
                "set": [
                    1193,
                    1211,
                    1212,
                    486
                ],
                "keyword.kwlist": [
                    486
                ],
                "keyword": [
                    486
                ],
                "WHITESPACE": [
                    1608,
                    1067,
                    487
                ],
                "token.DEDENT": [
                    879,
                    487
                ],
                "token.INDENT": [
                    877,
                    487
                ],
                "FLOW_CONTROL": [
                    488,
                    702
                ],
                "STATEMENT": [
                    489,
                    1106
                ],
                "syms.if_stmt": [
                    490
                ],
                "syms.while_stmt": [
                    491
                ],
                "syms.for_stmt": [
                    492
                ],
                "syms.try_stmt": [
                    493
                ],
                "syms.except_clause": [
                    494
                ],
                "syms.with_stmt": [
                    495
                ],
                "syms.funcdef": [
                    496
                ],
                "syms.classdef": [
                    497,
                    1378
                ],
                "STANDALONE_COMMENT": [
                    640,
                    1604,
                    1894,
                    809,
                    650,
                    717,
                    499,
                    1596,
                    1214,
                    798
                ],
                "LOGIC_OPERATORS": [
                    500,
                    1540
                ],
                "COMPARATORS": [
                    1514,
                    501
                ],
                "token.LESS": [
                    502
                ],
                "token.GREATER": [
                    503
                ],
                "token.EQEQUAL": [
                    504
                ],
                "token.NOTEQUAL": [
                    505
                ],
                "token.LESSEQUAL": [
                    506
                ],
                "token.GREATEREQUAL": [
                    507
                ],
                "MATH_OPERATORS": [
                    1508,
                    509,
                    1278
                ],
                "token.PLUS": [
                    510
                ],
                "token.MINUS": [
                    511
                ],
                "token.STAR": [
                    512,
                    1880,
                    524,
                    2142
                ],
                "token.SLASH": [
                    513
                ],
                "token.VBAR": [
                    514
                ],
                "token.AMPER": [
                    515
                ],
                "token.PERCENT": [
                    516
                ],
                "token.CIRCUMFLEX": [
                    517
                ],
                "token.TILDE": [
                    518
                ],
                "token.LEFTSHIFT": [
                    519
                ],
                "token.RIGHTSHIFT": [
                    520,
                    1283
                ],
                "token.DOUBLESTAR": [
                    1416,
                    521,
                    1257,
                    524,
                    1363,
                    1881,
                    2142
                ],
                "token.DOUBLESLASH": [
                    522
                ],
                "VARARGS": [
                    1499,
                    524
                ],
                "COMPREHENSION_PRIORITY": [
                    1530,
                    1538,
                    525
                ],
                "COMMA_PRIORITY": [
                    1892,
                    1485,
                    526,
                    2031
                ],
                "LOGIC_PRIORITY": [
                    1541,
                    527
                ],
                "STRING_PRIORITY": [
                    528,
                    1522
                ],
                "COMPARATOR_PRIORITY": [
                    529,
                    1515
                ],
                "MATH_PRIORITY": [
                    1512,
                    530
                ],
                "depth": [
                    2273,
                    2265,
                    745,
                    2252,
                    977,
                    595,
                    984,
                    949,
                    950,
                    952,
                    760,
                    537,
                    2260,
                    2268,
                    956,
                    2271
                ],
                "bracket_match": [
                    538
                ],
                "Dict": [
                    538,
                    539
                ],
                "Tuple": [
                    921,
                    538,
                    937,
                    597
                ],
                "Factory": [
                    998,
                    596,
                    597,
                    598,
                    919,
                    538,
                    539
                ],
                "dict": [
                    538,
                    539
                ],
                "delimiters": [
                    1848,
                    539,
                    1884
                ],
                "previous": [
                    1519,
                    1520,
                    1552,
                    1553,
                    540
                ],
                "Optional": [
                    680,
                    1458,
                    540,
                    917
                ],
                "leaf.type": [
                    640,
                    1540,
                    778,
                    1932,
                    788,
                    1707,
                    557,
                    560,
                    1713,
                    562,
                    1593,
                    573,
                    574,
                    2117,
                    1222,
                    2119,
                    1484,
                    717,
                    1750,
                    1880,
                    1881,
                    1499,
                    1508,
                    613,
                    1514,
                    877,
                    1518,
                    879,
                    1525,
                    760,
                    1533
                ],
                "token.COMMENT": [
                    804,
                    1228,
                    557,
                    1040,
                    1594
                ],
                "CLOSING_BRACKETS": [
                    1707,
                    560,
                    1750,
                    728,
                    1212,
                    1213,
                    1214
                ],
                "self.depth": [
                    844,
                    878,
                    880,
                    561,
                    562,
                    564,
                    565,
                    574,
                    575
                ],
                "opening_bracket": [
                    1771,
                    1773,
                    1742,
                    1774,
                    1746,
                    562,
                    563,
                    1751,
                    1788
                ],
                "self.bracket_match.pop": [
                    562
                ],
                "self.bracket_match": [
                    562,
                    580,
                    574
                ],
                "leaf.opening_bracket": [
                    563,
                    1708,
                    1751
                ],
                "leaf.bracket_depth": [
                    759,
                    718,
                    564,
                    1877,
                    1879
                ],
                "delim": [
                    566,
                    567,
                    568,
                    570,
                    571,
                    572
                ],
                "is_split_before_delimiter": [
                    1552,
                    566
                ],
                "self.previous": [
                    576,
                    566,
                    567,
                    568,
                    570
                ],
                "self.delimiters": [
                    568,
                    572,
                    588
                ],
                "id": [
                    1884,
                    1784,
                    1750,
                    568,
                    1851,
                    572
                ],
                "is_split_after_delimiter": [
                    1553,
                    570
                ],
                "OPENING_BRACKETS": [
                    1293,
                    1423,
                    1713,
                    1238,
                    1213,
                    1211,
                    573
                ],
                "BRACKET": [
                    1210,
                    1211,
                    1212,
                    574
                ],
                "Iterable": [
                    582
                ],
                "max": [
                    588,
                    1551
                ],
                "k": [
                    588
                ],
                "self.delimiters.items": [
                    588
                ],
                "exclude": [
                    588
                ],
                "leaves": [
                    1765,
                    1766,
                    845,
                    846,
                    848,
                    596,
                    1720,
                    1721
                ],
                "comments": [
                    597
                ],
                "bracket_tracker": [
                    598
                ],
                "BracketTracker": [
                    2097,
                    598
                ],
                "inside_brackets": [
                    1949,
                    599
                ],
                "has_for": [
                    600
                ],
                "_for_loop_variable": [
                    601
                ],
                "has_value": [
                    613,
                    614
                ],
                "BRACKETS": [
                    613,
                    1213
                ],
                "leaf.value.strip": [
                    613
                ],
                "leaf.value": [
                    1986,
                    1987,
                    1540,
                    613,
                    2118,
                    1224,
                    2120,
                    778,
                    1933,
                    1969,
                    788,
                    1982,
                    1526,
                    1534,
                    2015
                ],
                "self.leaves": [
                    640,
                    650,
                    655,
                    660,
                    667,
                    668,
                    675,
                    807,
                    680,
                    819,
                    701,
                    702,
                    832,
                    837,
                    710,
                    711,
                    716,
                    845,
                    726,
                    727,
                    856,
                    737,
                    617,
                    873,
                    748,
                    876,
                    755,
                    628,
                    891
                ],
                "preformatted": [
                    617,
                    621,
                    645
                ],
                "whitespace": [
                    620
                ],
                "self.inside_brackets": [
                    621
                ],
                "self.maybe_decrement_after_for_loop_variable": [
                    622
                ],
                "self.bracket_tracker.mark": [
                    623
                ],
                "self.bracket_tracker": [
                    780,
                    623,
                    789,
                    636,
                    799
                ],
                "self.maybe_remove_trailing_comma": [
                    624
                ],
                "self.maybe_increment_for_loop_variable": [
                    625
                ],
                "self.append_comment": [
                    627
                ],
                "self.leaves.append": [
                    876,
                    873,
                    628
                ],
                "self.bracket_tracker.depth": [
                    789,
                    636,
                    780
                ],
                "self.is_comment": [
                    637
                ],
                "self.append": [
                    645
                ],
                "type": [
                    2084,
                    1893,
                    710,
                    1894,
                    650,
                    2139,
                    2060,
                    2061,
                    655,
                    1009,
                    1012,
                    727,
                    1016,
                    667,
                    701,
                    2079
                ],
                "property": [
                    705,
                    647,
                    652,
                    657,
                    2195,
                    693,
                    662,
                    671
                ],
                "token.AT": [
                    1375,
                    655
                ],
                "is_import": [
                    660
                ],
                "token.NAME": [
                    1533,
                    1540,
                    1157,
                    710,
                    1287,
                    1445,
                    778,
                    1099,
                    684,
                    1935,
                    688,
                    788,
                    1525,
                    667,
                    701,
                    1437
                ],
                "value": [
                    711,
                    2256,
                    1969,
                    1970,
                    2268,
                    1973,
                    2262,
                    2263,
                    1976,
                    2267,
                    668,
                    1149,
                    702,
                    2271
                ],
                "first_leaf": [
                    675,
                    684,
                    686,
                    943,
                    944,
                    946
                ],
                "second_leaf": [
                    680,
                    682,
                    687,
                    688,
                    689
                ],
                "first_leaf.type": [
                    684,
                    686
                ],
                "first_leaf.value": [
                    684
                ],
                "token.ASYNC": [
                    1124,
                    686
                ],
                "second_leaf.type": [
                    688
                ],
                "second_leaf.value": [
                    689
                ],
                "sys.maxsize": [
                    1857,
                    714
                ],
                "depth_limit": [
                    718
                ],
                "token.COMMA": [
                    2084,
                    1893,
                    1350,
                    1896,
                    1484,
                    1326,
                    1301,
                    1333,
                    727,
                    760,
                    1242,
                    2139,
                    1309,
                    1214,
                    2079
                ],
                "closing.type": [
                    728,
                    736,
                    732
                ],
                "closing": [
                    736,
                    745,
                    747,
                    756,
                    728,
                    732
                ],
                "token.RBRACE": [
                    1210,
                    732
                ],
                "self.remove_trailing_comma": [
                    739,
                    733,
                    767
                ],
                "token.RSQB": [
                    736,
                    1210
                ],
                "comma": [
                    737,
                    738
                ],
                "comma.parent": [
                    738
                ],
                "comma.parent.type": [
                    738
                ],
                "syms.listmaker": [
                    738,
                    1403
                ],
                "closing.bracket_depth": [
                    745
                ],
                "commas": [
                    761,
                    746,
                    763,
                    766
                ],
                "opening": [
                    747,
                    749
                ],
                "closing.opening_bracket": [
                    747
                ],
                "_opening_index": [
                    755,
                    748
                ],
                "enumerate": [
                    1144,
                    1585,
                    819,
                    748
                ],
                "bracket_depth": [
                    760,
                    759
                ],
                "leaf.parent": [
                    1536,
                    1540,
                    1509,
                    1510,
                    1223,
                    1931,
                    1527,
                    1528,
                    762,
                    1500,
                    1501,
                    1535
                ],
                "leaf.parent.type": [
                    1536,
                    1510,
                    1528,
                    762,
                    1501
                ],
                "syms.arglist": [
                    1296,
                    762,
                    1261,
                    1247
                ],
                "self.has_for": [
                    779
                ],
                "self._for_loop_variable": [
                    788,
                    781,
                    790
                ],
                "comment.type": [
                    1040,
                    809,
                    804,
                    798
                ],
                "comment": [
                    1036,
                    1039,
                    1040,
                    1042,
                    1049,
                    798,
                    801,
                    804,
                    809,
                    810,
                    814,
                    1597,
                    1598,
                    1600,
                    834,
                    1603,
                    836,
                    850,
                    851
                ],
                "self.bracket_tracker.any_open_brackets": [
                    799
                ],
                "comment.prefix": [
                    801,
                    810
                ],
                "self.comments.append": [
                    814
                ],
                "self.comments": [
                    833,
                    834,
                    836,
                    814,
                    850,
                    856,
                    826
                ],
                "_leaf_index": [
                    827,
                    819
                ],
                "_leaf": [
                    819,
                    820
                ],
                "index": [
                    1152,
                    2049,
                    2050,
                    2043,
                    1585,
                    1144,
                    1593,
                    826,
                    827,
                    2044
                ],
                "comment_after": [
                    1724,
                    1922,
                    1923,
                    1768,
                    1769,
                    1874,
                    1875,
                    826,
                    1723,
                    828
                ],
                "comma_index": [
                    832,
                    835,
                    836
                ],
                "i": [
                    833,
                    834,
                    836
                ],
                "comment_index": [
                    834,
                    835
                ],
                "self.leaves.pop": [
                    837
                ],
                "iter": [
                    1120,
                    845
                ],
                "first": [
                    2092,
                    846,
                    847,
                    2094,
                    2033,
                    2035,
                    2037
                ],
                "next": [
                    846,
                    1127
                ],
                "res": [
                    847,
                    849,
                    851,
                    852,
                    1461,
                    1462,
                    1463,
                    1464,
                    890,
                    1467,
                    892,
                    893
                ],
                "first.prefix": [
                    847
                ],
                "first.value": [
                    2037,
                    847
                ],
                "generate_comments": [
                    1036,
                    871
                ],
                "FormatOn": [
                    872,
                    1057,
                    1601,
                    1181
                ],
                "f_on.leaf_from_consumed": [
                    873
                ],
                "f_on": [
                    873,
                    1060,
                    1182
                ],
                "NotImplementedError": [
                    897
                ],
                "previous_line": [
                    917
                ],
                "previous_after": [
                    918
                ],
                "previous_defs": [
                    919
                ],
                "UnformattedLines": [
                    928,
                    1024,
                    1646,
                    1054
                ],
                "self._maybe_empty_lines": [
                    931
                ],
                "self.previous_after": [
                    932,
                    933
                ],
                "self.previous_line": [
                    961,
                    934,
                    974,
                    975,
                    977,
                    982,
                    983,
                    984,
                    957
                ],
                "max_allowed": [
                    945,
                    938,
                    940
                ],
                "current_line.depth": [
                    939,
                    949,
                    966
                ],
                "current_line.leaves": [
                    1893,
                    941,
                    1894,
                    943
                ],
                "first_leaf.prefix.count": [
                    944
                ],
                "first_leaf.prefix": [
                    944,
                    946
                ],
                "min": [
                    945,
                    1877
                ],
                "self.previous_defs": [
                    956,
                    950,
                    951
                ],
                "self.previous_defs.pop": [
                    951
                ],
                "is_decorator": [
                    953,
                    954,
                    955
                ],
                "current_line.is_decorator": [
                    953
                ],
                "current_line.is_def": [
                    954
                ],
                "current_line.is_class": [
                    954
                ],
                "self.previous_defs.append": [
                    956
                ],
                "self.previous_line.is_decorator": [
                    961
                ],
                "newlines": [
                    968,
                    965,
                    967
                ],
                "current_line.is_flow_control": [
                    970
                ],
                "self.previous_line.is_import": [
                    975
                ],
                "current_line.is_import": [
                    976
                ],
                "self.previous_line.depth": [
                    984,
                    977
                ],
                "self.previous_line.is_yield": [
                    983
                ],
                "current_line.is_yield": [
                    984
                ],
                "Type": [
                    1000
                ],
                "self.current_line": [
                    1024,
                    1034,
                    1068,
                    1039,
                    1008,
                    1009,
                    1010,
                    1042,
                    1012,
                    1015,
                    1016,
                    1049,
                    1180
                ],
                "self.current_line.__class__": [
                    1009
                ],
                "self.current_line.depth": [
                    1010,
                    1012
                ],
                "complete_line": [
                    1016,
                    1017,
                    1015
                ],
                "complete_line.depth": [
                    1016
                ],
                "self.visit_unformatted": [
                    1026
                ],
                "visit": [
                    1029
                ],
                "any_open_brackets": [
                    1064,
                    1034,
                    1037
                ],
                "self.current_line.bracket_tracker.any_open_brackets": [
                    1034
                ],
                "self.current_line.bracket_tracker": [
                    1034
                ],
                "self.current_line.append": [
                    1068,
                    1039,
                    1042,
                    1049,
                    1180
                ],
                "self.line": [
                    1183,
                    1188,
                    1100,
                    1165,
                    1134,
                    1074,
                    1043,
                    1108,
                    1170,
                    1110,
                    1047,
                    1080,
                    1113,
                    1050,
                    1054,
                    1118
                ],
                "FormatOff": [
                    1609,
                    1052,
                    1605
                ],
                "f_off.trim_prefix": [
                    1053
                ],
                "f_off": [
                    1053
                ],
                "f_on.trim_prefix": [
                    1060,
                    1182
                ],
                "normalize_prefix": [
                    1064,
                    1830,
                    1718,
                    1759
                ],
                "token.STRING": [
                    1520,
                    1065,
                    2131,
                    1518
                ],
                "normalize_string_quotes": [
                    1066
                ],
                "visit_default": [
                    1069
                ],
                "Set": [
                    1193,
                    2018,
                    1083
                ],
                "normalize_invisible_parens": [
                    1097
                ],
                "parens": [
                    1097
                ],
                "child.type": [
                    1124,
                    1157,
                    1099,
                    2027,
                    1146
                ],
                "child.value": [
                    2052,
                    1099,
                    1148,
                    1157
                ],
                "keywords": [
                    1099
                ],
                "is_suite_like": [
                    1106,
                    1107
                ],
                "node.parent": [
                    1472,
                    1106
                ],
                "node.parent.type": [
                    1106
                ],
                "children": [
                    1120,
                    1121,
                    1127
                ],
                "internal_stmt": [
                    1128,
                    1127
                ],
                "internal_stmt.children": [
                    1128
                ],
                "check_lpar": [
                    1156,
                    2052,
                    2024,
                    2026,
                    1143,
                    1145
                ],
                "token.LPAR": [
                    1152,
                    1379,
                    2117,
                    1382,
                    1210,
                    1338,
                    1773,
                    2060,
                    2094,
                    1360,
                    2035,
                    2041,
                    1146,
                    2073,
                    2047
                ],
                "node.insert_child": [
                    1152,
                    2050,
                    2044
                ],
                "node.append_child": [
                    1153
                ],
                "token.RPAR": [
                    2048,
                    1153,
                    2042,
                    2119,
                    1306,
                    1338,
                    2061,
                    2094,
                    1775,
                    1298,
                    2035,
                    1210,
                    2075
                ],
                "token.ENDMARKER": [
                    1593,
                    1186
                ],
                "self.visit_stmt": [
                    1192
                ],
                "\u00d8": [
                    1193,
                    1199,
                    1201,
                    1202,
                    1203,
                    1204
                ],
                "self.visit_assert_stmt": [
                    1194
                ],
                "self.visit_if_stmt": [
                    1195
                ],
                "self.visit_while_stmt": [
                    1196
                ],
                "self.visit_for_stmt": [
                    1197
                ],
                "self.visit_try_stmt": [
                    1198
                ],
                "self.visit_except_clause": [
                    1201
                ],
                "self.visit_with_stmt": [
                    1202
                ],
                "self.visit_funcdef": [
                    1203
                ],
                "self.visit_classdef": [
                    1204
                ],
                "self.visit_async_funcdef": [
                    1205
                ],
                "self.visit_async_stmt": [
                    1205
                ],
                "self.visit_decorated": [
                    1206
                ],
                "self.visit_decorators": [
                    1206
                ],
                "IMPLICIT_TUPLE": [
                    1209,
                    2082
                ],
                "syms.testlist": [
                    1209
                ],
                "syms.testlist_star_expr": [
                    1209
                ],
                "syms.exprlist": [
                    1209
                ],
                "token.LSQB": [
                    1210,
                    1347
                ],
                "token.LBRACE": [
                    1210
                ],
                "BRACKET.keys": [
                    1211
                ],
                "BRACKET.values": [
                    1212
                ],
                "ALWAYS_NO_SPACE": [
                    1225,
                    1214
                ],
                "SPACE": [
                    1220,
                    1447,
                    1390,
                    1455,
                    1242
                ],
                "DOUBLESPACE": [
                    1229,
                    1221
                ],
                "t": [
                    1932,
                    1935,
                    1298,
                    1306,
                    1437,
                    1441,
                    1317,
                    1445,
                    1338,
                    1342,
                    1347,
                    1222,
                    1225,
                    1355,
                    1228,
                    1232,
                    1241,
                    1379,
                    1398
                ],
                "token.COLON": [
                    1232,
                    1241,
                    1429,
                    1271
                ],
                "p.type": [
                    1411,
                    1419,
                    1296,
                    1937,
                    1938,
                    1304,
                    1312,
                    1440,
                    1452,
                    1329,
                    1336,
                    1353,
                    1232,
                    1366,
                    1370,
                    1378,
                    1385,
                    1397,
                    1403,
                    1404,
                    1405
                ],
                "syms.subscript": [
                    1232,
                    1385,
                    1272,
                    1430
                ],
                "syms.subscriptlist": [
                    1232,
                    1405,
                    1389
                ],
                "prev": [
                    1408,
                    1413,
                    1416,
                    1293,
                    1421,
                    1301,
                    1309,
                    1314,
                    1442,
                    1318,
                    1321,
                    1449,
                    1324,
                    1326,
                    1331,
                    1341,
                    1350,
                    1607,
                    1608,
                    1358,
                    1235,
                    1236,
                    1363,
                    1371,
                    1382,
                    1387,
                    1398
                ],
                "leaf.prev_sibling": [
                    1235
                ],
                "prevp": [
                    1283,
                    1284,
                    1285,
                    1286,
                    1287,
                    1288,
                    1422,
                    1423,
                    1426,
                    1429,
                    1434,
                    1332,
                    1333,
                    1343,
                    1344,
                    1359,
                    1360,
                    1237,
                    1238,
                    1242,
                    1244,
                    1245,
                    1246,
                    1374,
                    1375,
                    1251,
                    1255,
                    1257,
                    1259,
                    1260,
                    1271,
                    1272,
                    1276,
                    1277,
                    1278
                ],
                "preceding_leaf": [
                    1607,
                    1422,
                    1359,
                    1332,
                    1237,
                    1374,
                    1343
                ],
                "prevp.type": [
                    1344,
                    1283,
                    1257,
                    1423,
                    1360,
                    1434,
                    1333,
                    1238,
                    1271,
                    1429,
                    1242,
                    1244,
                    1278,
                    1375
                ],
                "token.EQUAL": [
                    1317,
                    1321,
                    1355,
                    1363,
                    1434,
                    1244
                ],
                "prevp.parent": [
                    1251,
                    1284,
                    1285,
                    1259,
                    1260,
                    1426,
                    1272,
                    1277,
                    1276,
                    1245,
                    1246
                ],
                "prevp.parent.type": [
                    1251,
                    1285,
                    1260,
                    1272,
                    1277,
                    1246
                ],
                "syms.argument": [
                    1353,
                    1262,
                    1434,
                    1501,
                    1247
                ],
                "syms.parameters": [
                    1264,
                    1296,
                    1247
                ],
                "syms.varargslist": [
                    1304,
                    1266,
                    1247
                ],
                "syms.typedargslist": [
                    1312,
                    1251,
                    1265,
                    2137,
                    1501
                ],
                "prevp.prefix": [
                    1255
                ],
                "syms.dictsetmaker": [
                    1411,
                    1501,
                    1263
                ],
                "syms.sliceop": [
                    1272,
                    1452,
                    1430
                ],
                "syms.factor": [
                    1419,
                    1277,
                    1510
                ],
                "syms.star_expr": [
                    1419,
                    1277,
                    1510
                ],
                "syms.shift_expr": [
                    1285
                ],
                "prevp.prev_sibling": [
                    1288,
                    1286,
                    1287
                ],
                "prevp.prev_sibling.type": [
                    1287
                ],
                "prevp.prev_sibling.value": [
                    1288
                ],
                "prev.type": [
                    1442,
                    1318,
                    1350,
                    1382,
                    1321,
                    1416,
                    1449,
                    1608,
                    1293,
                    1326,
                    1363,
                    1301,
                    1309
                ],
                "syms.tname": [
                    1329,
                    1318
                ],
                "prev.prefix": [
                    1324
                ],
                "syms.trailer": [
                    1336
                ],
                "token.DOT": [
                    1441,
                    1442,
                    1449,
                    1398,
                    1342,
                    1375
                ],
                "token.NUMBER": [
                    1344,
                    1437
                ],
                "syms.decorator": [
                    1366
                ],
                "syms.dotted_name": [
                    1370
                ],
                "p.parent": [
                    1388,
                    1389
                ],
                "p.parent.type": [
                    1389
                ],
                "syms.atom": [
                    2050,
                    2089,
                    2058,
                    2027,
                    2067,
                    1397,
                    2044
                ],
                "syms.testlist_gexp": [
                    2074,
                    1404
                ],
                "prevp_parent": [
                    1426,
                    1427,
                    1430,
                    1434
                ],
                "prevp_parent.type": [
                    1434,
                    1430
                ],
                "syms.import_from": [
                    1440,
                    1938
                ],
                "node.prev_sibling": [
                    1461
                ],
                "res.leaves": [
                    1467
                ],
                "previous.type": [
                    1520
                ],
                "syms.comp_for": [
                    1528
                ],
                "syms.old_comp_for": [
                    1528
                ],
                "syms.comp_if": [
                    1536
                ],
                "syms.old_comp_if": [
                    1536
                ],
                "nlines": [
                    1584,
                    1611,
                    1589,
                    1598
                ],
                "p.split": [
                    1585
                ],
                "line.lstrip": [
                    1587
                ],
                "line.startswith": [
                    1590
                ],
                "comment_type": [
                    1594,
                    1596,
                    1598,
                    1604
                ],
                "make_comment": [
                    1597
                ],
                "content": [
                    1622,
                    1623,
                    1626,
                    1627,
                    1628,
                    1629,
                    1630
                ],
                "content.rstrip": [
                    1622
                ],
                "line.is_comment": [
                    1646
                ],
                "line_str": [
                    1673,
                    1650,
                    1652,
                    1653
                ],
                "strip": [
                    1673,
                    1650,
                    1809
                ],
                "line.contains_standalone_comments": [
                    1782,
                    1654,
                    1903
                ],
                "split_funcs": [
                    1665,
                    1666,
                    1659,
                    1661,
                    1663
                ],
                "line.is_def": [
                    1660
                ],
                "left_hand_split": [
                    1661
                ],
                "line.inside_brackets": [
                    1856,
                    1888,
                    1868,
                    1906,
                    1916,
                    1662
                ],
                "delimiter_split": [
                    1663
                ],
                "standalone_comment_split": [
                    1663
                ],
                "right_hand_split": [
                    1665,
                    1785,
                    1663
                ],
                "split_func": [
                    1672,
                    1666,
                    1827,
                    1829
                ],
                "l": [
                    1829,
                    1830,
                    1831,
                    1672,
                    1673,
                    1677
                ],
                "CannotSplit": [
                    1762,
                    1674,
                    1679,
                    1904,
                    1812,
                    1846,
                    1815,
                    1854
                ],
                "result.extend": [
                    1676
                ],
                "head": [
                    1696,
                    1765,
                    1735,
                    1770,
                    1790,
                    1720,
                    1725,
                    1726
                ],
                "line.depth": [
                    1696,
                    1697,
                    1698,
                    1856,
                    1888,
                    1735,
                    1736,
                    1737,
                    1868,
                    1906,
                    1916
                ],
                "body": [
                    1697,
                    1987,
                    1765,
                    1991,
                    1736,
                    1770,
                    1997,
                    1790,
                    1999,
                    1810,
                    1782,
                    2007,
                    1720,
                    1725,
                    1726
                ],
                "tail": [
                    1698,
                    1765,
                    1737,
                    1770,
                    1790,
                    1809,
                    1720,
                    1725,
                    1726
                ],
                "tail_leaves": [
                    1699,
                    1765,
                    1738,
                    1741,
                    1710,
                    1747,
                    1749,
                    1720,
                    1754
                ],
                "body_leaves": [
                    1700,
                    1765,
                    1706,
                    1739,
                    1710,
                    1745,
                    1715,
                    1747,
                    1717,
                    1718,
                    1720,
                    1753,
                    1755,
                    1758,
                    1759
                ],
                "head_leaves": [
                    1760,
                    1701,
                    1702,
                    1765,
                    1740,
                    1710,
                    1712,
                    1747,
                    1720,
                    1756
                ],
                "current_leaves": [
                    1702,
                    1706,
                    1741,
                    1710,
                    1711,
                    1712,
                    1745,
                    1715,
                    1747,
                    1748,
                    1749,
                    1753
                ],
                "matching_bracket": [
                    1714,
                    1708,
                    1703
                ],
                "line.leaves": [
                    1704,
                    1871,
                    1744,
                    1844,
                    1919
                ],
                "current_leaves.append": [
                    1748,
                    1711
                ],
                "result.append": [
                    1769,
                    1722,
                    1724,
                    1767
                ],
                "line.comments_after": [
                    1768,
                    1874,
                    1723,
                    1922
                ],
                "bracket_split_succeeded_or_raise": [
                    1770,
                    1725
                ],
                "Collection": [
                    1732
                ],
                "closing_bracket": [
                    1771,
                    1775,
                    1776,
                    1743,
                    1784,
                    1752,
                    1789
                ],
                "reversed": [
                    1744
                ],
                "omit": [
                    1784,
                    1785,
                    1750
                ],
                "tail_leaves.reverse": [
                    1754
                ],
                "body_leaves.reverse": [
                    1755
                ],
                "head_leaves.reverse": [
                    1756
                ],
                "opening_bracket.type": [
                    1773
                ],
                "opening_bracket.value": [
                    1774
                ],
                "closing_bracket.type": [
                    1775
                ],
                "closing_bracket.value": [
                    1776
                ],
                "body.bracket_tracker.delimiters": [
                    1782
                ],
                "body.bracket_tracker": [
                    1782
                ],
                "ensure_visible": [
                    1788,
                    1789
                ],
                "tail_len": [
                    1817,
                    1809,
                    1811,
                    1814
                ],
                "l.leaves": [
                    1830
                ],
                "wraps": [
                    1827
                ],
                "split_wrapper": [
                    1833
                ],
                "last_leaf": [
                    1851,
                    1844
                ],
                "line.bracket_tracker.delimiters": [
                    1848
                ],
                "line.bracket_tracker": [
                    1848,
                    1850
                ],
                "delimiter_priority": [
                    1850,
                    1892,
                    1885
                ],
                "line.bracket_tracker.max_delimiter_priority": [
                    1850
                ],
                "lowest_depth": [
                    1857,
                    1877,
                    1879
                ],
                "trailing_comma_safe": [
                    1891,
                    1858,
                    1883
                ],
                "current_line.append_safe": [
                    1864,
                    1912
                ],
                "current_line.append": [
                    1896,
                    1917,
                    1869
                ],
                "append_to_line": [
                    1872,
                    1875,
                    1923,
                    1920
                ],
                "leaf_priority": [
                    1884,
                    1885
                ],
                "delimiters.get": [
                    1884
                ],
                "dont_increase_indentation": [
                    1900,
                    1836
                ],
                "syms.import_name": [
                    1937
                ],
                "spl": [
                    1952,
                    1953,
                    1950,
                    1951
                ],
                "leaf.prefix.split": [
                    1950
                ],
                "nl_count": [
                    1952,
                    1954,
                    1955
                ],
                "count": [
                    1952
                ],
                "leaf.value.lstrip": [
                    1969
                ],
                "orig_quote": [
                    1987,
                    1989,
                    2012,
                    1999,
                    1974,
                    1977,
                    1980,
                    1982
                ],
                "new_quote": [
                    1988,
                    2000,
                    2003,
                    2004,
                    1975,
                    1978,
                    1981,
                    2015
                ],
                "first_quote_pos": [
                    1986,
                    1987,
                    1982,
                    1983
                ],
                "leaf.value.find": [
                    1982
                ],
                "prefix": [
                    1986,
                    1990,
                    2015
                ],
                "unescaped_new_quote": [
                    2000,
                    2003,
                    1988,
                    1991
                ],
                "re.compile": [
                    1988,
                    1989
                ],
                "re": [
                    1988,
                    1989
                ],
                "escaped_orig_quote": [
                    1989,
                    1999
                ],
                "prefix.casefold": [
                    1990
                ],
                "unescaped_new_quote.search": [
                    1991
                ],
                "new_body": [
                    1997,
                    1999,
                    2000,
                    2003,
                    2004,
                    2006,
                    2008,
                    2015
                ],
                "escaped_orig_quote.sub": [
                    1999
                ],
                "unescaped_new_quote.sub": [
                    2000,
                    2003
                ],
                "orig_escape_count": [
                    2009,
                    2012,
                    2007
                ],
                "body.count": [
                    2007
                ],
                "new_escape_count": [
                    2008,
                    2009,
                    2012
                ],
                "new_body.count": [
                    2008
                ],
                "is_empty_tuple": [
                    2029
                ],
                "is_one_tuple": [
                    2030,
                    2039
                ],
                "max_delimiter_priority_in_atom": [
                    2031
                ],
                "child.children": [
                    2033,
                    2034
                ],
                "last": [
                    2093,
                    2094,
                    2034,
                    2035,
                    2038
                ],
                "first.type": [
                    2035,
                    2094
                ],
                "last.type": [
                    2035,
                    2094
                ],
                "last.value": [
                    2038
                ],
                "lpar": [
                    2050,
                    2071,
                    2041,
                    2044,
                    2073,
                    2047
                ],
                "rpar": [
                    2048,
                    2050,
                    2071,
                    2042,
                    2075,
                    2044
                ],
                "child.remove": [
                    2049,
                    2043
                ],
                "parens_after": [
                    2052
                ],
                "gexp": [
                    2074,
                    2079,
                    2071
                ],
                "lpar.type": [
                    2073
                ],
                "gexp.type": [
                    2074
                ],
                "rpar.type": [
                    2075
                ],
                "gexp.children": [
                    2079
                ],
                "bt": [
                    2097,
                    2100,
                    2105,
                    2103
                ],
                "c": [
                    2098,
                    2099,
                    2100,
                    2102
                ],
                "bt.mark": [
                    2100,
                    2103
                ],
                "c.leaves": [
                    2102
                ],
                "bt.max_delimiter_priority": [
                    2105
                ],
                "n": [
                    2130,
                    2131,
                    2132,
                    2137,
                    2138,
                    2139,
                    2141
                ],
                "node.pre_order": [
                    2130
                ],
                "n.type": [
                    2137,
                    2131
                ],
                "value_head": [
                    2132,
                    2133
                ],
                "n.value": [
                    2132
                ],
                "n.children": [
                    2138,
                    2139,
                    2141
                ],
                "ch": [
                    2141,
                    2142
                ],
                "ch.type": [
                    2142
                ],
                "PYTHON_EXTENSIONS": [
                    2148,
                    2165
                ],
                "BLACKLISTED_DIRECTORIES": [
                    2160,
                    2149
                ],
                "path.iterdir": [
                    2158
                ],
                "path": [
                    2158
                ],
                "child.is_dir": [
                    2159
                ],
                "child.name": [
                    2160
                ],
                "child.suffix": [
                    2165
                ],
                "change_count": [
                    2174
                ],
                "same_count": [
                    2175
                ],
                "failure_count": [
                    2176
                ],
                "reformatted": [
                    2181,
                    2183,
                    2220,
                    2224,
                    2231
                ],
                "self.check": [
                    2209,
                    2219,
                    2181
                ],
                "self.quiet": [
                    2186,
                    2182
                ],
                "self.change_count": [
                    2209,
                    2184,
                    2228,
                    2229,
                    2231
                ],
                "self.same_count": [
                    2233,
                    2234,
                    2235,
                    2188
                ],
                "message": [
                    2192
                ],
                "self.failure_count": [
                    2193,
                    2236,
                    2237,
                    2206,
                    2239
                ],
                "unchanged": [
                    2225,
                    2235,
                    2221
                ],
                "failed": [
                    2226,
                    2222,
                    2239
                ],
                "report.append": [
                    2235,
                    2238,
                    2230
                ],
                "click.style": [
                    2239,
                    2231
                ],
                "join": [
                    2241,
                    2343,
                    2288,
                    2295,
                    2296
                ],
                "ast.AST": [
                    2264,
                    2250,
                    2267
                ],
                "ast": [
                    2276,
                    2250,
                    2286,
                    2264,
                    2267
                ],
                "node.__class__.__name__": [
                    2273,
                    2252
                ],
                "node.__class__": [
                    2273,
                    2252
                ],
                "field": [
                    2256,
                    2260,
                    2254
                ],
                "sorted": [
                    2254
                ],
                "node._fields": [
                    2254
                ],
                "AttributeError": [
                    2257
                ],
                "item": [
                    2264,
                    2265,
                    2263
                ],
                "_v": [
                    2296,
                    2265,
                    2268,
                    2295
                ],
                "value.__class__.__name__": [
                    2271
                ],
                "value.__class__": [
                    2271
                ],
                "src_ast": [
                    2276,
                    2295
                ],
                "ast.parse": [
                    2276,
                    2286
                ],
                "major": [
                    2281,
                    2278
                ],
                "minor": [
                    2281,
                    2278
                ],
                "sys.version_info": [
                    2278
                ],
                "AssertionError": [
                    2315,
                    2289,
                    2299,
                    2279
                ],
                "dst_ast": [
                    2296,
                    2286
                ],
                "log": [
                    2311,
                    2319,
                    2288,
                    2292,
                    2298,
                    2303
                ],
                "dump_to_file": [
                    2288,
                    2298,
                    2311
                ],
                "traceback.format_tb": [
                    2288
                ],
                "traceback": [
                    2288
                ],
                "exc.__traceback__": [
                    2288
                ],
                "src_ast_str": [
                    2297,
                    2298,
                    2295
                ],
                "dst_ast_str": [
                    2296,
                    2297,
                    2298
                ],
                "newdst": [
                    2313,
                    2309,
                    2310
                ],
                "tempfile.NamedTemporaryFile": [
                    2327
                ],
                "tempfile": [
                    2327
                ],
                "output": [
                    2330
                ],
                "f.name": [
                    2334
                ],
                "a_lines": [
                    2344,
                    2341
                ],
                "a.split": [
                    2341
                ],
                "a": [
                    2341
                ],
                "b_lines": [
                    2344,
                    2342
                ],
                "b.split": [
                    2342
                ],
                "b": [
                    2342
                ],
                "difflib.unified_diff": [
                    2344
                ],
                "difflib": [
                    2344
                ],
                "a_name": [
                    2344
                ],
                "b_name": [
                    2344
                ],
                "asyncio.Task": [
                    2348,
                    2359
                ],
                "to_cancel": [
                    2360,
                    2363,
                    2366,
                    2359
                ],
                "asyncio.Task.all_tasks": [
                    2359
                ],
                "cf_logger": [
                    2372,
                    2373
                ],
                "logging.getLogger": [
                    2372
                ],
                "logging": [
                    2372,
                    2373
                ],
                "cf_logger.setLevel": [
                    2373
                ],
                "logging.CRITICAL": [
                    2373
                ],
                "loop.close": [
                    2374
                ],
                "__name__": [
                    2377
                ],
                "main": [
                    2378
                ]
            },
            "filtered_variables_in_file": {
                "__version__": [
                    43,
                    143
                ],
                "DEFAULT_LINE_LENGTH": [
                    44,
                    111
                ],
                "syms": [
                    1536,
                    2050,
                    1411,
                    1285,
                    1528,
                    2058,
                    1419,
                    1296,
                    1937,
                    1938,
                    2067,
                    1430,
                    1304,
                    1434,
                    2074,
                    413,
                    1405,
                    1312,
                    1440,
                    1318,
                    2089,
                    1452,
                    2044,
                    46,
                    1329,
                    1336,
                    1209,
                    1353,
                    1389,
                    1232,
                    1366,
                    2027,
                    2137,
                    1370,
                    1501,
                    1247,
                    738,
                    1251,
                    1378,
                    1510,
                    1385,
                    490,
                    491,
                    492,
                    493,
                    494,
                    495,
                    496,
                    497,
                    1261,
                    1262,
                    1263,
                    1264,
                    1265,
                    1266,
                    1272,
                    1397,
                    762,
                    1403,
                    1404,
                    1277
                ],
                "pygram.python_symbols": [
                    46
                ],
                "pygram": [
                    384,
                    385,
                    391,
                    46,
                    382,
                    383
                ],
                "FileContent": [
                    338,
                    358,
                    47
                ],
                "Encoding": [
                    48
                ],
                "Depth": [
                    49,
                    538
                ],
                "NodeType": [
                    50,
                    538
                ],
                "LeafID": [
                    539,
                    51,
                    1732,
                    582
                ],
                "Priority": [
                    539,
                    52
                ],
                "Index": [
                    597,
                    53
                ],
                "LN": [
                    1031,
                    456,
                    2055,
                    2088,
                    429,
                    2065,
                    1458,
                    1172,
                    54,
                    1019,
                    445
                ],
                "Union": [
                    54
                ],
                "Leaf": [
                    1152,
                    1153,
                    2048,
                    899,
                    772,
                    2052,
                    903,
                    1033,
                    1546,
                    1163,
                    1929,
                    1167,
                    786,
                    1557,
                    1943,
                    538,
                    795,
                    412,
                    540,
                    542,
                    1699,
                    1700,
                    1701,
                    680,
                    1961,
                    817,
                    1458,
                    2099,
                    54,
                    1463,
                    2047,
                    1598,
                    2111,
                    1217,
                    1476,
                    1860,
                    1738,
                    1739,
                    1740,
                    1490,
                    83,
                    596,
                    597,
                    86,
                    723,
                    89,
                    603,
                    862,
                    1896,
                    1908,
                    630,
                    2041,
                    2042,
                    895
                ],
                "Node": [
                    417,
                    2018,
                    2050,
                    389,
                    458,
                    1131,
                    2044,
                    2123,
                    1071,
                    1104,
                    1137,
                    1077,
                    54,
                    1174,
                    1083,
                    1116,
                    413,
                    447
                ],
                "SplitFunc": [
                    1659,
                    1821,
                    55
                ],
                "Callable": [
                    55
                ],
                "Iterator": [
                    1031,
                    1163,
                    1167,
                    1172,
                    1557,
                    1690,
                    1828,
                    429,
                    1837,
                    1071,
                    817,
                    1077,
                    55,
                    1084,
                    445,
                    1860,
                    1733,
                    456,
                    2250,
                    1104,
                    1116,
                    1635,
                    1000,
                    2154,
                    1131,
                    1901,
                    1137,
                    1908,
                    1019
                ],
                "out": [
                    2183,
                    266,
                    2187,
                    460,
                    466,
                    469,
                    56,
                    473,
                    474
                ],
                "partial": [
                    1194,
                    1195,
                    1196,
                    1197,
                    1198,
                    1201,
                    1202,
                    1203,
                    1204,
                    56,
                    57
                ],
                "click.secho": [
                    56,
                    57
                ],
                "click": [
                    2231,
                    129,
                    153,
                    134,
                    106,
                    107,
                    268,
                    175,
                    143,
                    144,
                    115,
                    147,
                    151,
                    56,
                    57,
                    124,
                    2239
                ],
                "err": [
                    2192,
                    57,
                    173,
                    2350
                ],
                "__init__": [
                    80
                ],
                "consumed": [
                    1601,
                    1605,
                    1609,
                    1583,
                    80,
                    81,
                    1586
                ],
                "self.consumed": [
                    88,
                    81,
                    84
                ],
                "self": [
                    1024,
                    1026,
                    1034,
                    1039,
                    1042,
                    1043,
                    1047,
                    1049,
                    1050,
                    1054,
                    1055,
                    1061,
                    1068,
                    561,
                    562,
                    1074,
                    564,
                    565,
                    566,
                    567,
                    568,
                    1075,
                    570,
                    1080,
                    572,
                    574,
                    575,
                    576,
                    580,
                    588,
                    1100,
                    1102,
                    81,
                    84,
                    1108,
                    1109,
                    1110,
                    88,
                    1113,
                    1114,
                    1118,
                    1122,
                    617,
                    1129,
                    621,
                    622,
                    623,
                    624,
                    625,
                    1134,
                    627,
                    628,
                    1135,
                    636,
                    637,
                    640,
                    645,
                    2181,
                    2182,
                    2184,
                    1161,
                    650,
                    2186,
                    2188,
                    1165,
                    655,
                    1169,
                    1170,
                    2193,
                    660,
                    1176,
                    666,
                    667,
                    668,
                    1180,
                    2206,
                    1183,
                    1184,
                    2209,
                    675,
                    1188,
                    680,
                    1192,
                    1194,
                    1195,
                    1196,
                    1197,
                    1198,
                    2219,
                    1201,
                    1202,
                    1203,
                    1204,
                    1205,
                    1206,
                    2228,
                    2229,
                    2231,
                    2233,
                    2234,
                    700,
                    701,
                    702,
                    2235,
                    2236,
                    2237,
                    2239,
                    709,
                    710,
                    711,
                    716,
                    726,
                    727,
                    733,
                    737,
                    739,
                    748,
                    755,
                    767,
                    779,
                    780,
                    781,
                    788,
                    789,
                    790,
                    799,
                    807,
                    814,
                    819,
                    826,
                    832,
                    833,
                    834,
                    836,
                    837,
                    841,
                    844,
                    845,
                    850,
                    856,
                    873,
                    876,
                    878,
                    880,
                    887,
                    891,
                    931,
                    932,
                    933,
                    934,
                    950,
                    951,
                    443,
                    956,
                    957,
                    449,
                    961,
                    457,
                    461,
                    974,
                    463,
                    975,
                    465,
                    977,
                    982,
                    983,
                    984,
                    1008,
                    1009,
                    1010,
                    1012,
                    1015,
                    1016
                ],
                "leaf.prefix": [
                    1955,
                    1958,
                    1576,
                    620,
                    84,
                    88,
                    1950
                ],
                "leaf": [
                    1536,
                    1540,
                    1552,
                    1553,
                    1576,
                    557,
                    560,
                    562,
                    563,
                    564,
                    566,
                    2102,
                    2103,
                    1593,
                    570,
                    572,
                    573,
                    574,
                    576,
                    2117,
                    2118,
                    1607,
                    2119,
                    2120,
                    84,
                    88,
                    613,
                    620,
                    622,
                    623,
                    624,
                    625,
                    627,
                    628,
                    640,
                    645,
                    1169,
                    1704,
                    1707,
                    1708,
                    1711,
                    1713,
                    1714,
                    1721,
                    1722,
                    1723,
                    1222,
                    1223,
                    1224,
                    716,
                    717,
                    718,
                    1231,
                    1744,
                    1746,
                    1235,
                    1748,
                    1750,
                    1751,
                    1752,
                    1766,
                    1767,
                    1768,
                    748,
                    749,
                    755,
                    756,
                    759,
                    760,
                    762,
                    778,
                    788,
                    820,
                    1864,
                    1869,
                    1871,
                    848,
                    849,
                    1872,
                    1874,
                    1877,
                    1879,
                    1880,
                    1881,
                    1884,
                    871,
                    873,
                    876,
                    877,
                    879,
                    1912,
                    891,
                    892,
                    1917,
                    1919,
                    1920,
                    1922,
                    1931,
                    1932,
                    1933,
                    1950,
                    1955,
                    1958,
                    1969,
                    1982,
                    1986,
                    1987,
                    1484,
                    1499,
                    1500,
                    1501,
                    2015,
                    1508,
                    1509,
                    1510,
                    1514,
                    1518,
                    1525,
                    1526,
                    1527,
                    1528,
                    1533,
                    1534,
                    1535
                ],
                "unformatted_prefix": [
                    88,
                    89
                ],
                "token.NEWLINE": [
                    89,
                    487
                ],
                "token": [
                    512,
                    513,
                    514,
                    515,
                    516,
                    517,
                    518,
                    519,
                    520,
                    521,
                    522,
                    1540,
                    524,
                    2060,
                    2061,
                    1040,
                    2073,
                    2075,
                    2041,
                    2079,
                    2042,
                    2084,
                    1065,
                    557,
                    2094,
                    1593,
                    1594,
                    2047,
                    2048,
                    2117,
                    2119,
                    1099,
                    2131,
                    89,
                    2139,
                    2142,
                    1124,
                    1146,
                    1152,
                    1153,
                    1157,
                    655,
                    667,
                    1186,
                    684,
                    686,
                    688,
                    1210,
                    701,
                    1214,
                    710,
                    1228,
                    1232,
                    727,
                    1241,
                    1242,
                    732,
                    1244,
                    736,
                    1257,
                    1773,
                    1775,
                    1271,
                    760,
                    1283,
                    1287,
                    778,
                    1298,
                    788,
                    1301,
                    1306,
                    1309,
                    804,
                    1317,
                    1321,
                    1326,
                    1333,
                    1338,
                    1342,
                    1344,
                    1347,
                    1350,
                    1355,
                    1360,
                    1363,
                    1880,
                    1881,
                    1375,
                    1379,
                    1893,
                    1382,
                    1896,
                    877,
                    879,
                    1398,
                    1416,
                    1935,
                    1429,
                    1434,
                    1437,
                    1441,
                    1442,
                    1445,
                    1449,
                    440,
                    1484,
                    468,
                    487,
                    1518,
                    1520,
                    2035,
                    1525,
                    502,
                    503,
                    504,
                    505,
                    506,
                    507,
                    1533,
                    510,
                    511
                ],
                "FormatError": [
                    96,
                    92
                ],
                "Enum": [
                    100
                ],
                "NO": [
                    1280,
                    1409,
                    1414,
                    1417,
                    1291,
                    1294,
                    1424,
                    1299,
                    1302,
                    1432,
                    1307,
                    1435,
                    1310,
                    1438,
                    1315,
                    1443,
                    1319,
                    1450,
                    1453,
                    1327,
                    1334,
                    1339,
                    1345,
                    1219,
                    1348,
                    1351,
                    1226,
                    1356,
                    1233,
                    1361,
                    1364,
                    1239,
                    1368,
                    1242,
                    1372,
                    1376,
                    1249,
                    1380,
                    101,
                    1383,
                    1392,
                    1395,
                    1269,
                    1400,
                    1273
                ],
                "YES": [
                    102
                ],
                "DIFF": [
                    103
                ],
                "click.Context": [
                    153
                ],
                "List": [
                    162,
                    1699,
                    1700,
                    1701,
                    1670,
                    1659,
                    1738,
                    1739,
                    1740,
                    2348,
                    596,
                    597,
                    919,
                    219,
                    159
                ],
                "sources": [
                    162,
                    166,
                    169,
                    171,
                    210,
                    244,
                    185,
                    187,
                    188
                ],
                "Path": [
                    162,
                    2178,
                    164,
                    2154,
                    171,
                    2190,
                    273,
                    219
                ],
                "s": [
                    163,
                    164,
                    170,
                    173,
                    2229,
                    2231,
                    2234,
                    2235,
                    2237,
                    2239
                ],
                "src": [
                    260,
                    262,
                    2183,
                    2312,
                    2187,
                    2192,
                    284,
                    163,
                    294,
                    297,
                    298,
                    318,
                    319,
                    321,
                    333,
                    2276,
                    241,
                    242,
                    244,
                    252,
                    254
                ],
                "p": [
                    1411,
                    1419,
                    1931,
                    1422,
                    1296,
                    1937,
                    1938,
                    1304,
                    1312,
                    1440,
                    164,
                    165,
                    166,
                    167,
                    1576,
                    169,
                    1577,
                    1452,
                    1580,
                    1329,
                    1585,
                    1332,
                    1336,
                    188,
                    191,
                    1343,
                    197,
                    199,
                    1223,
                    201,
                    1353,
                    1231,
                    1232,
                    1359,
                    1237,
                    1366,
                    1370,
                    1374,
                    1378,
                    1385,
                    1388,
                    1389,
                    1397,
                    1403,
                    1404,
                    1405
                ],
                "p.is_dir": [
                    165
                ],
                "sources.extend": [
                    166
                ],
                "gen_python_files_in_dir": [
                    2163,
                    166
                ],
                "p.is_file": [
                    191,
                    167
                ],
                "sources.append": [
                    169,
                    171
                ],
                "check": [
                    179,
                    2172,
                    189,
                    174
                ],
                "diff": [
                    2312,
                    2313,
                    299,
                    333,
                    174,
                    181,
                    2298
                ],
                "exc": [
                    201,
                    2282,
                    175,
                    176,
                    177,
                    2288,
                    2290,
                    408,
                    410
                ],
                "click.ClickException": [
                    175
                ],
                "exc.exit_code": [
                    176
                ],
                "write_back": [
                    193,
                    197,
                    293,
                    296,
                    328,
                    330,
                    235,
                    210,
                    242,
                    180,
                    182,
                    184,
                    251
                ],
                "WriteBack.NO": [
                    251,
                    180,
                    276,
                    311
                ],
                "WriteBack": [
                    328,
                    330,
                    235,
                    180,
                    276,
                    182,
                    311,
                    184,
                    251,
                    221
                ],
                "WriteBack.DIFF": [
                    330,
                    235,
                    182
                ],
                "WriteBack.YES": [
                    184,
                    328
                ],
                "ctx.exit": [
                    202,
                    186,
                    215
                ],
                "ctx": [
                    202,
                    186,
                    215
                ],
                "report": [
                    2241,
                    260,
                    262,
                    199,
                    201,
                    202,
                    268,
                    269,
                    2235,
                    2227,
                    2230,
                    251,
                    2238,
                    189,
                    254
                ],
                "Report": [
                    251,
                    189
                ],
                "quiet": [
                    265,
                    267,
                    210,
                    2173,
                    251,
                    189
                ],
                "changed": [
                    192,
                    2180,
                    196,
                    199
                ],
                "format_stdin_to_stdout": [
                    192
                ],
                "line_length": [
                    288,
                    193,
                    321,
                    354,
                    197,
                    2309,
                    1677,
                    210,
                    242,
                    1652,
                    376,
                    348
                ],
                "fast": [
                    288,
                    193,
                    321,
                    352,
                    197,
                    210,
                    242
                ],
                "format_file_in_place": [
                    242,
                    196
                ],
                "report.done": [
                    262,
                    199
                ],
                "report.failed": [
                    201,
                    260,
                    254
                ],
                "report.return_code": [
                    202,
                    269
                ],
                "loop": [
                    2374,
                    264,
                    204,
                    208,
                    241,
                    210,
                    214,
                    247,
                    248,
                    2365,
                    2359,
                    2366
                ],
                "asyncio.get_event_loop": [
                    204
                ],
                "asyncio": [
                    264,
                    204,
                    2348,
                    2359,
                    249,
                    2366
                ],
                "executor": [
                    210,
                    242,
                    205
                ],
                "ProcessPoolExecutor": [
                    205
                ],
                "os.cpu_count": [
                    205
                ],
                "os": [
                    205
                ],
                "return_code": [
                    208,
                    206,
                    215
                ],
                "loop.run_until_complete": [
                    208,
                    2365
                ],
                "schedule_formatting": [
                    209
                ],
                "shutdown": [
                    214
                ],
                "click.command": [
                    106
                ],
                "click.option": [
                    129,
                    134,
                    107,
                    115,
                    124
                ],
                "click.version_option": [
                    143
                ],
                "click.argument": [
                    144
                ],
                "click.Path": [
                    147
                ],
                "click.pass_context": [
                    151
                ],
                "BaseEventLoop": [
                    224,
                    2355
                ],
                "Executor": [
                    225
                ],
                "lock": [
                    234,
                    300,
                    301,
                    239,
                    305,
                    242,
                    306
                ],
                "manager": [
                    238,
                    239
                ],
                "Manager": [
                    238
                ],
                "manager.Lock": [
                    239
                ],
                "tasks": [
                    2351,
                    240,
                    246,
                    249,
                    252
                ],
                "loop.run_in_executor": [
                    241
                ],
                "_task_values": [
                    248,
                    246,
                    247
                ],
                "tasks.values": [
                    249,
                    246
                ],
                "loop.add_signal_handler": [
                    248,
                    247
                ],
                "signal.SIGINT": [
                    247
                ],
                "signal": [
                    248,
                    247
                ],
                "cancel": [
                    248,
                    247
                ],
                "signal.SIGTERM": [
                    248
                ],
                "asyncio.wait": [
                    249
                ],
                "cancelled": [
                    256,
                    258,
                    263,
                    264,
                    250
                ],
                "task": [
                    256,
                    257,
                    258,
                    259,
                    260,
                    262,
                    2351,
                    2352,
                    2364,
                    2359,
                    2363,
                    252,
                    253,
                    255
                ],
                "tasks.items": [
                    252
                ],
                "task.done": [
                    253,
                    2359
                ],
                "task.cancel": [
                    2352,
                    2364,
                    255
                ],
                "cancelled.append": [
                    256,
                    258
                ],
                "task.cancelled": [
                    257
                ],
                "task.exception": [
                    259,
                    260
                ],
                "task.result": [
                    262
                ],
                "asyncio.gather": [
                    264,
                    2366
                ],
                "click.echo": [
                    268
                ],
                "Any": [
                    277
                ],
                "tokenize.open": [
                    284
                ],
                "tokenize": [
                    284
                ],
                "src_buffer": [
                    284,
                    285,
                    294
                ],
                "src_contents": [
                    288,
                    353,
                    354,
                    299,
                    363,
                    349,
                    345,
                    348,
                    285
                ],
                "src_buffer.read": [
                    285
                ],
                "dst_contents": [
                    353,
                    354,
                    355,
                    295,
                    299,
                    364,
                    372,
                    375,
                    377,
                    378,
                    348,
                    349,
                    287
                ],
                "format_file_contents": [
                    321,
                    287
                ],
                "NothingChanged": [
                    290,
                    324,
                    346,
                    350
                ],
                "write_back.YES": [
                    293
                ],
                "src_buffer.encoding": [
                    294
                ],
                "f": [
                    294,
                    295,
                    2329,
                    2331,
                    2333,
                    2334
                ],
                "f.write": [
                    2331,
                    2333,
                    295
                ],
                "write_back.DIFF": [
                    296
                ],
                "src_name": [
                    297,
                    331,
                    299,
                    333
                ],
                "src.name": [
                    297,
                    298
                ],
                "dst_name": [
                    298,
                    299,
                    332,
                    333
                ],
                "diff_contents": [
                    299,
                    303
                ],
                "lock.acquire": [
                    301
                ],
                "sys.stdout.write": [
                    329,
                    333,
                    303
                ],
                "sys.stdout": [
                    329,
                    333,
                    303
                ],
                "sys": [
                    1857,
                    2278,
                    329,
                    714,
                    333,
                    303,
                    318
                ],
                "lock.release": [
                    306
                ],
                "sys.stdin.read": [
                    318
                ],
                "sys.stdin": [
                    318
                ],
                "dst": [
                    321,
                    2309,
                    2310,
                    2312,
                    329,
                    2313,
                    333,
                    2286,
                    2288,
                    319
                ],
                "src_contents.strip": [
                    345
                ],
                "format_str": [
                    348,
                    2309
                ],
                "assert_equivalent": [
                    353
                ],
                "assert_stable": [
                    354
                ],
                "src_node": [
                    370,
                    363,
                    367
                ],
                "lib2to3_parse": [
                    363,
                    483
                ],
                "lines": [
                    365,
                    370,
                    403,
                    405,
                    2330,
                    2331,
                    2332
                ],
                "LineGenerator": [
                    365
                ],
                "elt": [
                    373,
                    366
                ],
                "EmptyLineTracker": [
                    366
                ],
                "py36": [
                    1829,
                    1672,
                    1677,
                    367,
                    376,
                    1785,
                    1883
                ],
                "is_python36": [
                    367
                ],
                "empty_line": [
                    368,
                    372,
                    375
                ],
                "Line": [
                    1795,
                    1670,
                    1031,
                    1163,
                    1167,
                    1172,
                    917,
                    921,
                    1690,
                    1696,
                    1697,
                    1698,
                    1828,
                    937,
                    1837,
                    1071,
                    1077,
                    1084,
                    1856,
                    1732,
                    1733,
                    1860,
                    1735,
                    1736,
                    1737,
                    1868,
                    1104,
                    859,
                    1116,
                    992,
                    1888,
                    1634,
                    1635,
                    998,
                    1000,
                    1131,
                    1901,
                    368,
                    1137,
                    1906,
                    1908,
                    1019,
                    1916
                ],
                "after": [
                    931,
                    933,
                    807,
                    808,
                    935,
                    814,
                    369,
                    371,
                    373
                ],
                "current_line": [
                    1925,
                    1926,
                    1912,
                    928,
                    931,
                    934,
                    939,
                    941,
                    943,
                    949,
                    953,
                    954,
                    1856,
                    966,
                    1864,
                    970,
                    1866,
                    1868,
                    1869,
                    976,
                    984,
                    1886,
                    1888,
                    1889,
                    1893,
                    998,
                    1894,
                    1896,
                    1897,
                    370,
                    1906,
                    373,
                    376,
                    1914,
                    1916,
                    1917
                ],
                "lines.visit": [
                    370
                ],
                "_": [
                    850,
                    371,
                    374
                ],
                "before": [
                    931,
                    932,
                    935,
                    971,
                    944,
                    945,
                    979,
                    948,
                    373,
                    374,
                    952,
                    986,
                    988
                ],
                "elt.maybe_empty_lines": [
                    373
                ],
                "line": [
                    1922,
                    1672,
                    1785,
                    1687,
                    1696,
                    1697,
                    1698,
                    1829,
                    2341,
                    2342,
                    1704,
                    1916,
                    1585,
                    1586,
                    1587,
                    1588,
                    1844,
                    1590,
                    1848,
                    1850,
                    1723,
                    1597,
                    1856,
                    1735,
                    1736,
                    1737,
                    1868,
                    1871,
                    1744,
                    1874,
                    1888,
                    376,
                    1768,
                    1646,
                    1647,
                    1903,
                    1650,
                    1906,
                    1654,
                    1782,
                    1656,
                    377,
                    1660,
                    1662,
                    1919
                ],
                "split_line": [
                    376,
                    1677
                ],
                "GRAMMARS": [
                    395,
                    381
                ],
                "pygram.python_grammar_no_print_statement_no_exec_statement": [
                    382
                ],
                "pygram.python_grammar_no_print_statement": [
                    391,
                    383
                ],
                "pygram.python_grammar_no_exec_statement": [
                    384
                ],
                "pygram.python_grammar": [
                    385
                ],
                "grammar": [
                    395,
                    396,
                    391
                ],
                "src_txt": [
                    392,
                    393,
                    394,
                    398,
                    403
                ],
                "nl": [
                    393,
                    394
                ],
                "drv": [
                    396,
                    398
                ],
                "driver.Driver": [
                    396
                ],
                "driver": [
                    396
                ],
                "pytree.convert": [
                    396
                ],
                "pytree": [
                    396
                ],
                "result": [
                    1792,
                    1670,
                    1676,
                    398,
                    1683,
                    412,
                    413,
                    414,
                    1720,
                    1722,
                    1724,
                    1726,
                    1727,
                    1728,
                    1765,
                    1767,
                    1769,
                    1790,
                    1791
                ],
                "drv.parse_string": [
                    398
                ],
                "ParseError": [
                    401
                ],
                "lineno": [
                    408,
                    402,
                    405
                ],
                "column": [
                    408,
                    402
                ],
                "pe.context": [
                    402
                ],
                "pe": [
                    402
                ],
                "src_txt.splitlines": [
                    403
                ],
                "faulty_line": [
                    408,
                    405,
                    407
                ],
                "syms.file_input": [
                    413
                ],
                "code": [
                    419,
                    420,
                    483
                ],
                "node": [
                    1152,
                    1153,
                    1026,
                    2050,
                    1029,
                    1160,
                    1033,
                    2058,
                    2059,
                    1036,
                    2060,
                    2061,
                    2067,
                    2068,
                    1174,
                    1175,
                    2071,
                    1180,
                    1053,
                    1182,
                    1055,
                    1184,
                    1186,
                    419,
                    1060,
                    1061,
                    2082,
                    2083,
                    1064,
                    1065,
                    1066,
                    1067,
                    1068,
                    1069,
                    2089,
                    2092,
                    2093,
                    2098,
                    1075,
                    1460,
                    1461,
                    439,
                    440,
                    442,
                    443,
                    447,
                    448,
                    1472,
                    1097,
                    458,
                    459,
                    1098,
                    2252,
                    462,
                    2254,
                    2256,
                    1106,
                    2130,
                    468,
                    1109,
                    470,
                    473,
                    474,
                    1114,
                    1120,
                    2273,
                    2025,
                    1133,
                    2084,
                    1144,
                    2044,
                    1149
                ],
                "T": [
                    453,
                    423,
                    456,
                    426,
                    429,
                    445
                ],
                "TypeVar": [
                    423
                ],
                "Generic": [
                    426
                ],
                "node.type": [
                    1186,
                    2082,
                    1065,
                    2058,
                    459,
                    1067,
                    2089,
                    2067,
                    468,
                    439,
                    440,
                    442
                ],
                "name": [
                    440,
                    442,
                    443
                ],
                "token.tok_name": [
                    440,
                    468
                ],
                "type_repr": [
                    442,
                    459
                ],
                "self.visit_default": [
                    1061,
                    1169,
                    1075,
                    1109,
                    1114,
                    443
                ],
                "child": [
                    2049,
                    2050,
                    2052,
                    1157,
                    1160,
                    1161,
                    1175,
                    1176,
                    2044,
                    448,
                    449,
                    1098,
                    1099,
                    462,
                    463,
                    1102,
                    1121,
                    1122,
                    1124,
                    1128,
                    1129,
                    2025,
                    2027,
                    1133,
                    2029,
                    1135,
                    2030,
                    2031,
                    2033,
                    2034,
                    2158,
                    2159,
                    2160,
                    2039,
                    1144,
                    2163,
                    1146,
                    2043,
                    1148,
                    2165,
                    2166
                ],
                "node.children": [
                    1160,
                    2059,
                    2060,
                    2061,
                    2068,
                    2071,
                    1175,
                    2083,
                    2084,
                    2092,
                    2093,
                    2098,
                    448,
                    1098,
                    462,
                    1120,
                    2025,
                    1133,
                    1144,
                    1149
                ],
                "self.visit": [
                    1184,
                    449,
                    1122,
                    1129,
                    1161,
                    1102,
                    463,
                    1135,
                    1176,
                    1055
                ],
                "Visitor": [
                    992,
                    453
                ],
                "tree_depth": [
                    454
                ],
                "indent": [
                    457,
                    460,
                    844,
                    847,
                    466,
                    1010,
                    1012,
                    469,
                    1016
                ],
                "self.tree_depth": [
                    457,
                    465,
                    461
                ],
                "_type": [
                    459,
                    460,
                    466,
                    468,
                    469
                ],
                "token.tok_name.get": [
                    468
                ],
                "node.prefix": [
                    473,
                    470
                ],
                "node.value": [
                    474
                ],
                "v": [
                    482,
                    483,
                    1446,
                    1192,
                    1224,
                    1194,
                    1195,
                    588,
                    1196,
                    1197,
                    1199,
                    1933,
                    1201,
                    1202,
                    1203,
                    1204,
                    1937,
                    1938
                ],
                "DebugVisitor": [
                    482
                ],
                "v.visit": [
                    483
                ],
                "dataclass": [
                    452,
                    908,
                    591,
                    533,
                    2169,
                    991
                ],
                "KEYWORDS": [
                    486
                ],
                "keyword.kwlist": [
                    486
                ],
                "keyword": [
                    486
                ],
                "WHITESPACE": [
                    1608,
                    1067,
                    487
                ],
                "token.DEDENT": [
                    879,
                    487
                ],
                "token.INDENT": [
                    877,
                    487
                ],
                "FLOW_CONTROL": [
                    488,
                    702
                ],
                "STATEMENT": [
                    489,
                    1106
                ],
                "syms.if_stmt": [
                    490
                ],
                "syms.while_stmt": [
                    491
                ],
                "syms.for_stmt": [
                    492
                ],
                "syms.try_stmt": [
                    493
                ],
                "syms.except_clause": [
                    494
                ],
                "syms.with_stmt": [
                    495
                ],
                "syms.funcdef": [
                    496
                ],
                "syms.classdef": [
                    497,
                    1378
                ],
                "STANDALONE_COMMENT": [
                    640,
                    1604,
                    1894,
                    809,
                    650,
                    717,
                    499,
                    1596,
                    1214,
                    798
                ],
                "LOGIC_OPERATORS": [
                    500,
                    1540
                ],
                "COMPARATORS": [
                    1514,
                    501
                ],
                "token.LESS": [
                    502
                ],
                "token.GREATER": [
                    503
                ],
                "token.EQEQUAL": [
                    504
                ],
                "token.NOTEQUAL": [
                    505
                ],
                "token.LESSEQUAL": [
                    506
                ],
                "token.GREATEREQUAL": [
                    507
                ],
                "MATH_OPERATORS": [
                    1508,
                    509,
                    1278
                ],
                "token.PLUS": [
                    510
                ],
                "token.MINUS": [
                    511
                ],
                "token.STAR": [
                    512,
                    1880,
                    524,
                    2142
                ],
                "token.SLASH": [
                    513
                ],
                "token.VBAR": [
                    514
                ],
                "token.AMPER": [
                    515
                ],
                "token.PERCENT": [
                    516
                ],
                "token.CIRCUMFLEX": [
                    517
                ],
                "token.TILDE": [
                    518
                ],
                "token.LEFTSHIFT": [
                    519
                ],
                "token.RIGHTSHIFT": [
                    520,
                    1283
                ],
                "token.DOUBLESTAR": [
                    1416,
                    521,
                    1257,
                    524,
                    1363,
                    1881,
                    2142
                ],
                "token.DOUBLESLASH": [
                    522
                ],
                "VARARGS": [
                    1499,
                    524
                ],
                "COMPREHENSION_PRIORITY": [
                    1530,
                    1538,
                    525
                ],
                "COMMA_PRIORITY": [
                    1892,
                    1485,
                    526,
                    2031
                ],
                "LOGIC_PRIORITY": [
                    1541,
                    527
                ],
                "STRING_PRIORITY": [
                    528,
                    1522
                ],
                "COMPARATOR_PRIORITY": [
                    529,
                    1515
                ],
                "MATH_PRIORITY": [
                    1512,
                    530
                ],
                "depth": [
                    2273,
                    2265,
                    745,
                    2252,
                    977,
                    595,
                    984,
                    949,
                    950,
                    952,
                    760,
                    537,
                    2260,
                    2268,
                    956,
                    2271
                ],
                "bracket_match": [
                    538
                ],
                "Dict": [
                    538,
                    539
                ],
                "Tuple": [
                    921,
                    538,
                    937,
                    597
                ],
                "Factory": [
                    998,
                    596,
                    597,
                    598,
                    919,
                    538,
                    539
                ],
                "delimiters": [
                    1848,
                    539,
                    1884
                ],
                "previous": [
                    1519,
                    1520,
                    1552,
                    1553,
                    540
                ],
                "Optional": [
                    680,
                    1458,
                    540,
                    917
                ],
                "leaf.type": [
                    640,
                    1540,
                    778,
                    1932,
                    788,
                    1707,
                    557,
                    560,
                    1713,
                    562,
                    1593,
                    573,
                    574,
                    2117,
                    1222,
                    2119,
                    1484,
                    717,
                    1750,
                    1880,
                    1881,
                    1499,
                    1508,
                    613,
                    1514,
                    877,
                    1518,
                    879,
                    1525,
                    760,
                    1533
                ],
                "token.COMMENT": [
                    804,
                    1228,
                    557,
                    1040,
                    1594
                ],
                "CLOSING_BRACKETS": [
                    1707,
                    560,
                    1750,
                    728,
                    1212,
                    1213,
                    1214
                ],
                "self.depth": [
                    844,
                    878,
                    880,
                    561,
                    562,
                    564,
                    565,
                    574,
                    575
                ],
                "opening_bracket": [
                    1771,
                    1773,
                    1742,
                    1774,
                    1746,
                    562,
                    563,
                    1751,
                    1788
                ],
                "self.bracket_match.pop": [
                    562
                ],
                "self.bracket_match": [
                    562,
                    580,
                    574
                ],
                "leaf.opening_bracket": [
                    563,
                    1708,
                    1751
                ],
                "leaf.bracket_depth": [
                    759,
                    718,
                    564,
                    1877,
                    1879
                ],
                "delim": [
                    566,
                    567,
                    568,
                    570,
                    571,
                    572
                ],
                "is_split_before_delimiter": [
                    1552,
                    566
                ],
                "self.previous": [
                    576,
                    566,
                    567,
                    568,
                    570
                ],
                "self.delimiters": [
                    568,
                    572,
                    588
                ],
                "is_split_after_delimiter": [
                    1553,
                    570
                ],
                "OPENING_BRACKETS": [
                    1293,
                    1423,
                    1713,
                    1238,
                    1213,
                    1211,
                    573
                ],
                "BRACKET": [
                    1210,
                    1211,
                    1212,
                    574
                ],
                "Iterable": [
                    582
                ],
                "k": [
                    588
                ],
                "self.delimiters.items": [
                    588
                ],
                "exclude": [
                    588
                ],
                "leaves": [
                    1765,
                    1766,
                    845,
                    846,
                    848,
                    596,
                    1720,
                    1721
                ],
                "comments": [
                    597
                ],
                "bracket_tracker": [
                    598
                ],
                "BracketTracker": [
                    2097,
                    598
                ],
                "inside_brackets": [
                    1949,
                    599
                ],
                "has_for": [
                    600
                ],
                "_for_loop_variable": [
                    601
                ],
                "has_value": [
                    613,
                    614
                ],
                "BRACKETS": [
                    613,
                    1213
                ],
                "leaf.value.strip": [
                    613
                ],
                "leaf.value": [
                    1986,
                    1987,
                    1540,
                    613,
                    2118,
                    1224,
                    2120,
                    778,
                    1933,
                    1969,
                    788,
                    1982,
                    1526,
                    1534,
                    2015
                ],
                "self.leaves": [
                    640,
                    650,
                    655,
                    660,
                    667,
                    668,
                    675,
                    807,
                    680,
                    819,
                    701,
                    702,
                    832,
                    837,
                    710,
                    711,
                    716,
                    845,
                    726,
                    727,
                    856,
                    737,
                    617,
                    873,
                    748,
                    876,
                    755,
                    628,
                    891
                ],
                "preformatted": [
                    617,
                    621,
                    645
                ],
                "whitespace": [
                    620
                ],
                "self.inside_brackets": [
                    621
                ],
                "self.maybe_decrement_after_for_loop_variable": [
                    622
                ],
                "self.bracket_tracker.mark": [
                    623
                ],
                "self.bracket_tracker": [
                    780,
                    623,
                    789,
                    636,
                    799
                ],
                "self.maybe_remove_trailing_comma": [
                    624
                ],
                "self.maybe_increment_for_loop_variable": [
                    625
                ],
                "self.append_comment": [
                    627
                ],
                "self.leaves.append": [
                    876,
                    873,
                    628
                ],
                "self.bracket_tracker.depth": [
                    789,
                    636,
                    780
                ],
                "self.is_comment": [
                    637
                ],
                "self.append": [
                    645
                ],
                "token.AT": [
                    1375,
                    655
                ],
                "is_import": [
                    660
                ],
                "token.NAME": [
                    1533,
                    1540,
                    1157,
                    710,
                    1287,
                    1445,
                    778,
                    1099,
                    684,
                    1935,
                    688,
                    788,
                    1525,
                    667,
                    701,
                    1437
                ],
                "value": [
                    711,
                    2256,
                    1969,
                    1970,
                    2268,
                    1973,
                    2262,
                    2263,
                    1976,
                    2267,
                    668,
                    1149,
                    702,
                    2271
                ],
                "first_leaf": [
                    675,
                    684,
                    686,
                    943,
                    944,
                    946
                ],
                "second_leaf": [
                    680,
                    682,
                    687,
                    688,
                    689
                ],
                "first_leaf.type": [
                    684,
                    686
                ],
                "first_leaf.value": [
                    684
                ],
                "token.ASYNC": [
                    1124,
                    686
                ],
                "second_leaf.type": [
                    688
                ],
                "second_leaf.value": [
                    689
                ],
                "sys.maxsize": [
                    1857,
                    714
                ],
                "depth_limit": [
                    718
                ],
                "token.COMMA": [
                    2084,
                    1893,
                    1350,
                    1896,
                    1484,
                    1326,
                    1301,
                    1333,
                    727,
                    760,
                    1242,
                    2139,
                    1309,
                    1214,
                    2079
                ],
                "closing.type": [
                    728,
                    736,
                    732
                ],
                "closing": [
                    736,
                    745,
                    747,
                    756,
                    728,
                    732
                ],
                "token.RBRACE": [
                    1210,
                    732
                ],
                "self.remove_trailing_comma": [
                    739,
                    733,
                    767
                ],
                "token.RSQB": [
                    736,
                    1210
                ],
                "comma": [
                    737,
                    738
                ],
                "comma.parent": [
                    738
                ],
                "comma.parent.type": [
                    738
                ],
                "syms.listmaker": [
                    738,
                    1403
                ],
                "closing.bracket_depth": [
                    745
                ],
                "commas": [
                    761,
                    746,
                    763,
                    766
                ],
                "opening": [
                    747,
                    749
                ],
                "closing.opening_bracket": [
                    747
                ],
                "_opening_index": [
                    755,
                    748
                ],
                "bracket_depth": [
                    760,
                    759
                ],
                "leaf.parent": [
                    1536,
                    1540,
                    1509,
                    1510,
                    1223,
                    1931,
                    1527,
                    1528,
                    762,
                    1500,
                    1501,
                    1535
                ],
                "leaf.parent.type": [
                    1536,
                    1510,
                    1528,
                    762,
                    1501
                ],
                "syms.arglist": [
                    1296,
                    762,
                    1261,
                    1247
                ],
                "self.has_for": [
                    779
                ],
                "self._for_loop_variable": [
                    788,
                    781,
                    790
                ],
                "comment.type": [
                    1040,
                    809,
                    804,
                    798
                ],
                "comment": [
                    1036,
                    1039,
                    1040,
                    1042,
                    1049,
                    798,
                    801,
                    804,
                    809,
                    810,
                    814,
                    1597,
                    1598,
                    1600,
                    834,
                    1603,
                    836,
                    850,
                    851
                ],
                "self.bracket_tracker.any_open_brackets": [
                    799
                ],
                "comment.prefix": [
                    801,
                    810
                ],
                "self.comments.append": [
                    814
                ],
                "self.comments": [
                    833,
                    834,
                    836,
                    814,
                    850,
                    856,
                    826
                ],
                "_leaf_index": [
                    827,
                    819
                ],
                "_leaf": [
                    819,
                    820
                ],
                "index": [
                    1152,
                    2049,
                    2050,
                    2043,
                    1585,
                    1144,
                    1593,
                    826,
                    827,
                    2044
                ],
                "comment_after": [
                    1724,
                    1922,
                    1923,
                    1768,
                    1769,
                    1874,
                    1875,
                    826,
                    1723,
                    828
                ],
                "comma_index": [
                    832,
                    835,
                    836
                ],
                "i": [
                    833,
                    834,
                    836
                ],
                "comment_index": [
                    834,
                    835
                ],
                "self.leaves.pop": [
                    837
                ],
                "first": [
                    2092,
                    846,
                    847,
                    2094,
                    2033,
                    2035,
                    2037
                ],
                "res": [
                    847,
                    849,
                    851,
                    852,
                    1461,
                    1462,
                    1463,
                    1464,
                    890,
                    1467,
                    892,
                    893
                ],
                "first.prefix": [
                    847
                ],
                "first.value": [
                    2037,
                    847
                ],
                "generate_comments": [
                    1036,
                    871
                ],
                "FormatOn": [
                    872,
                    1057,
                    1601,
                    1181
                ],
                "f_on.leaf_from_consumed": [
                    873
                ],
                "f_on": [
                    873,
                    1060,
                    1182
                ],
                "previous_line": [
                    917
                ],
                "previous_after": [
                    918
                ],
                "previous_defs": [
                    919
                ],
                "UnformattedLines": [
                    928,
                    1024,
                    1646,
                    1054
                ],
                "self._maybe_empty_lines": [
                    931
                ],
                "self.previous_after": [
                    932,
                    933
                ],
                "self.previous_line": [
                    961,
                    934,
                    974,
                    975,
                    977,
                    982,
                    983,
                    984,
                    957
                ],
                "max_allowed": [
                    945,
                    938,
                    940
                ],
                "current_line.depth": [
                    939,
                    949,
                    966
                ],
                "current_line.leaves": [
                    1893,
                    941,
                    1894,
                    943
                ],
                "first_leaf.prefix.count": [
                    944
                ],
                "first_leaf.prefix": [
                    944,
                    946
                ],
                "self.previous_defs": [
                    956,
                    950,
                    951
                ],
                "self.previous_defs.pop": [
                    951
                ],
                "is_decorator": [
                    953,
                    954,
                    955
                ],
                "current_line.is_decorator": [
                    953
                ],
                "current_line.is_def": [
                    954
                ],
                "current_line.is_class": [
                    954
                ],
                "self.previous_defs.append": [
                    956
                ],
                "self.previous_line.is_decorator": [
                    961
                ],
                "newlines": [
                    968,
                    965,
                    967
                ],
                "current_line.is_flow_control": [
                    970
                ],
                "self.previous_line.is_import": [
                    975
                ],
                "current_line.is_import": [
                    976
                ],
                "self.previous_line.depth": [
                    984,
                    977
                ],
                "self.previous_line.is_yield": [
                    983
                ],
                "current_line.is_yield": [
                    984
                ],
                "Type": [
                    1000
                ],
                "self.current_line": [
                    1024,
                    1034,
                    1068,
                    1039,
                    1008,
                    1009,
                    1010,
                    1042,
                    1012,
                    1015,
                    1016,
                    1049,
                    1180
                ],
                "self.current_line.__class__": [
                    1009
                ],
                "self.current_line.depth": [
                    1010,
                    1012
                ],
                "complete_line": [
                    1016,
                    1017,
                    1015
                ],
                "complete_line.depth": [
                    1016
                ],
                "self.visit_unformatted": [
                    1026
                ],
                "visit": [
                    1029
                ],
                "any_open_brackets": [
                    1064,
                    1034,
                    1037
                ],
                "self.current_line.bracket_tracker.any_open_brackets": [
                    1034
                ],
                "self.current_line.bracket_tracker": [
                    1034
                ],
                "self.current_line.append": [
                    1068,
                    1039,
                    1042,
                    1049,
                    1180
                ],
                "self.line": [
                    1183,
                    1188,
                    1100,
                    1165,
                    1134,
                    1074,
                    1043,
                    1108,
                    1170,
                    1110,
                    1047,
                    1080,
                    1113,
                    1050,
                    1054,
                    1118
                ],
                "FormatOff": [
                    1609,
                    1052,
                    1605
                ],
                "f_off.trim_prefix": [
                    1053
                ],
                "f_off": [
                    1053
                ],
                "f_on.trim_prefix": [
                    1060,
                    1182
                ],
                "normalize_prefix": [
                    1064,
                    1830,
                    1718,
                    1759
                ],
                "token.STRING": [
                    1520,
                    1065,
                    2131,
                    1518
                ],
                "normalize_string_quotes": [
                    1066
                ],
                "visit_default": [
                    1069
                ],
                "Set": [
                    1193,
                    2018,
                    1083
                ],
                "normalize_invisible_parens": [
                    1097
                ],
                "parens": [
                    1097
                ],
                "child.type": [
                    1124,
                    1157,
                    1099,
                    2027,
                    1146
                ],
                "child.value": [
                    2052,
                    1099,
                    1148,
                    1157
                ],
                "keywords": [
                    1099
                ],
                "is_suite_like": [
                    1106,
                    1107
                ],
                "node.parent": [
                    1472,
                    1106
                ],
                "node.parent.type": [
                    1106
                ],
                "children": [
                    1120,
                    1121,
                    1127
                ],
                "internal_stmt": [
                    1128,
                    1127
                ],
                "internal_stmt.children": [
                    1128
                ],
                "check_lpar": [
                    1156,
                    2052,
                    2024,
                    2026,
                    1143,
                    1145
                ],
                "token.LPAR": [
                    1152,
                    1379,
                    2117,
                    1382,
                    1210,
                    1338,
                    1773,
                    2060,
                    2094,
                    1360,
                    2035,
                    2041,
                    1146,
                    2073,
                    2047
                ],
                "node.insert_child": [
                    1152,
                    2050,
                    2044
                ],
                "node.append_child": [
                    1153
                ],
                "token.RPAR": [
                    2048,
                    1153,
                    2042,
                    2119,
                    1306,
                    1338,
                    2061,
                    2094,
                    1775,
                    1298,
                    2035,
                    1210,
                    2075
                ],
                "token.ENDMARKER": [
                    1593,
                    1186
                ],
                "self.visit_stmt": [
                    1192
                ],
                "\u00d8": [
                    1193,
                    1199,
                    1201,
                    1202,
                    1203,
                    1204
                ],
                "self.visit_assert_stmt": [
                    1194
                ],
                "self.visit_if_stmt": [
                    1195
                ],
                "self.visit_while_stmt": [
                    1196
                ],
                "self.visit_for_stmt": [
                    1197
                ],
                "self.visit_try_stmt": [
                    1198
                ],
                "self.visit_except_clause": [
                    1201
                ],
                "self.visit_with_stmt": [
                    1202
                ],
                "self.visit_funcdef": [
                    1203
                ],
                "self.visit_classdef": [
                    1204
                ],
                "self.visit_async_funcdef": [
                    1205
                ],
                "self.visit_async_stmt": [
                    1205
                ],
                "self.visit_decorated": [
                    1206
                ],
                "self.visit_decorators": [
                    1206
                ],
                "IMPLICIT_TUPLE": [
                    1209,
                    2082
                ],
                "syms.testlist": [
                    1209
                ],
                "syms.testlist_star_expr": [
                    1209
                ],
                "syms.exprlist": [
                    1209
                ],
                "token.LSQB": [
                    1210,
                    1347
                ],
                "token.LBRACE": [
                    1210
                ],
                "BRACKET.keys": [
                    1211
                ],
                "BRACKET.values": [
                    1212
                ],
                "ALWAYS_NO_SPACE": [
                    1225,
                    1214
                ],
                "SPACE": [
                    1220,
                    1447,
                    1390,
                    1455,
                    1242
                ],
                "DOUBLESPACE": [
                    1229,
                    1221
                ],
                "t": [
                    1932,
                    1935,
                    1298,
                    1306,
                    1437,
                    1441,
                    1317,
                    1445,
                    1338,
                    1342,
                    1347,
                    1222,
                    1225,
                    1355,
                    1228,
                    1232,
                    1241,
                    1379,
                    1398
                ],
                "token.COLON": [
                    1232,
                    1241,
                    1429,
                    1271
                ],
                "p.type": [
                    1411,
                    1419,
                    1296,
                    1937,
                    1938,
                    1304,
                    1312,
                    1440,
                    1452,
                    1329,
                    1336,
                    1353,
                    1232,
                    1366,
                    1370,
                    1378,
                    1385,
                    1397,
                    1403,
                    1404,
                    1405
                ],
                "syms.subscript": [
                    1232,
                    1385,
                    1272,
                    1430
                ],
                "syms.subscriptlist": [
                    1232,
                    1405,
                    1389
                ],
                "prev": [
                    1408,
                    1413,
                    1416,
                    1293,
                    1421,
                    1301,
                    1309,
                    1314,
                    1442,
                    1318,
                    1321,
                    1449,
                    1324,
                    1326,
                    1331,
                    1341,
                    1350,
                    1607,
                    1608,
                    1358,
                    1235,
                    1236,
                    1363,
                    1371,
                    1382,
                    1387,
                    1398
                ],
                "leaf.prev_sibling": [
                    1235
                ],
                "prevp": [
                    1283,
                    1284,
                    1285,
                    1286,
                    1287,
                    1288,
                    1422,
                    1423,
                    1426,
                    1429,
                    1434,
                    1332,
                    1333,
                    1343,
                    1344,
                    1359,
                    1360,
                    1237,
                    1238,
                    1242,
                    1244,
                    1245,
                    1246,
                    1374,
                    1375,
                    1251,
                    1255,
                    1257,
                    1259,
                    1260,
                    1271,
                    1272,
                    1276,
                    1277,
                    1278
                ],
                "preceding_leaf": [
                    1607,
                    1422,
                    1359,
                    1332,
                    1237,
                    1374,
                    1343
                ],
                "prevp.type": [
                    1344,
                    1283,
                    1257,
                    1423,
                    1360,
                    1434,
                    1333,
                    1238,
                    1271,
                    1429,
                    1242,
                    1244,
                    1278,
                    1375
                ],
                "token.EQUAL": [
                    1317,
                    1321,
                    1355,
                    1363,
                    1434,
                    1244
                ],
                "prevp.parent": [
                    1251,
                    1284,
                    1285,
                    1259,
                    1260,
                    1426,
                    1272,
                    1277,
                    1276,
                    1245,
                    1246
                ],
                "prevp.parent.type": [
                    1251,
                    1285,
                    1260,
                    1272,
                    1277,
                    1246
                ],
                "syms.argument": [
                    1353,
                    1262,
                    1434,
                    1501,
                    1247
                ],
                "syms.parameters": [
                    1264,
                    1296,
                    1247
                ],
                "syms.varargslist": [
                    1304,
                    1266,
                    1247
                ],
                "syms.typedargslist": [
                    1312,
                    1251,
                    1265,
                    2137,
                    1501
                ],
                "prevp.prefix": [
                    1255
                ],
                "syms.dictsetmaker": [
                    1411,
                    1501,
                    1263
                ],
                "syms.sliceop": [
                    1272,
                    1452,
                    1430
                ],
                "syms.factor": [
                    1419,
                    1277,
                    1510
                ],
                "syms.star_expr": [
                    1419,
                    1277,
                    1510
                ],
                "syms.shift_expr": [
                    1285
                ],
                "prevp.prev_sibling": [
                    1288,
                    1286,
                    1287
                ],
                "prevp.prev_sibling.type": [
                    1287
                ],
                "prevp.prev_sibling.value": [
                    1288
                ],
                "prev.type": [
                    1442,
                    1318,
                    1350,
                    1382,
                    1321,
                    1416,
                    1449,
                    1608,
                    1293,
                    1326,
                    1363,
                    1301,
                    1309
                ],
                "syms.tname": [
                    1329,
                    1318
                ],
                "prev.prefix": [
                    1324
                ],
                "syms.trailer": [
                    1336
                ],
                "token.DOT": [
                    1441,
                    1442,
                    1449,
                    1398,
                    1342,
                    1375
                ],
                "token.NUMBER": [
                    1344,
                    1437
                ],
                "syms.decorator": [
                    1366
                ],
                "syms.dotted_name": [
                    1370
                ],
                "p.parent": [
                    1388,
                    1389
                ],
                "p.parent.type": [
                    1389
                ],
                "syms.atom": [
                    2050,
                    2089,
                    2058,
                    2027,
                    2067,
                    1397,
                    2044
                ],
                "syms.testlist_gexp": [
                    2074,
                    1404
                ],
                "prevp_parent": [
                    1426,
                    1427,
                    1430,
                    1434
                ],
                "prevp_parent.type": [
                    1434,
                    1430
                ],
                "syms.import_from": [
                    1440,
                    1938
                ],
                "node.prev_sibling": [
                    1461
                ],
                "res.leaves": [
                    1467
                ],
                "previous.type": [
                    1520
                ],
                "syms.comp_for": [
                    1528
                ],
                "syms.old_comp_for": [
                    1528
                ],
                "syms.comp_if": [
                    1536
                ],
                "syms.old_comp_if": [
                    1536
                ],
                "nlines": [
                    1584,
                    1611,
                    1589,
                    1598
                ],
                "p.split": [
                    1585
                ],
                "line.lstrip": [
                    1587
                ],
                "line.startswith": [
                    1590
                ],
                "comment_type": [
                    1594,
                    1596,
                    1598,
                    1604
                ],
                "make_comment": [
                    1597
                ],
                "content": [
                    1622,
                    1623,
                    1626,
                    1627,
                    1628,
                    1629,
                    1630
                ],
                "content.rstrip": [
                    1622
                ],
                "line.is_comment": [
                    1646
                ],
                "line_str": [
                    1673,
                    1650,
                    1652,
                    1653
                ],
                "strip": [
                    1673,
                    1650,
                    1809
                ],
                "line.contains_standalone_comments": [
                    1782,
                    1654,
                    1903
                ],
                "split_funcs": [
                    1665,
                    1666,
                    1659,
                    1661,
                    1663
                ],
                "line.is_def": [
                    1660
                ],
                "left_hand_split": [
                    1661
                ],
                "line.inside_brackets": [
                    1856,
                    1888,
                    1868,
                    1906,
                    1916,
                    1662
                ],
                "delimiter_split": [
                    1663
                ],
                "standalone_comment_split": [
                    1663
                ],
                "right_hand_split": [
                    1665,
                    1785,
                    1663
                ],
                "split_func": [
                    1672,
                    1666,
                    1827,
                    1829
                ],
                "l": [
                    1829,
                    1830,
                    1831,
                    1672,
                    1673,
                    1677
                ],
                "CannotSplit": [
                    1762,
                    1674,
                    1679,
                    1904,
                    1812,
                    1846,
                    1815,
                    1854
                ],
                "result.extend": [
                    1676
                ],
                "head": [
                    1696,
                    1765,
                    1735,
                    1770,
                    1790,
                    1720,
                    1725,
                    1726
                ],
                "line.depth": [
                    1696,
                    1697,
                    1698,
                    1856,
                    1888,
                    1735,
                    1736,
                    1737,
                    1868,
                    1906,
                    1916
                ],
                "body": [
                    1697,
                    1987,
                    1765,
                    1991,
                    1736,
                    1770,
                    1997,
                    1790,
                    1999,
                    1810,
                    1782,
                    2007,
                    1720,
                    1725,
                    1726
                ],
                "tail": [
                    1698,
                    1765,
                    1737,
                    1770,
                    1790,
                    1809,
                    1720,
                    1725,
                    1726
                ],
                "tail_leaves": [
                    1699,
                    1765,
                    1738,
                    1741,
                    1710,
                    1747,
                    1749,
                    1720,
                    1754
                ],
                "body_leaves": [
                    1700,
                    1765,
                    1706,
                    1739,
                    1710,
                    1745,
                    1715,
                    1747,
                    1717,
                    1718,
                    1720,
                    1753,
                    1755,
                    1758,
                    1759
                ],
                "head_leaves": [
                    1760,
                    1701,
                    1702,
                    1765,
                    1740,
                    1710,
                    1712,
                    1747,
                    1720,
                    1756
                ],
                "current_leaves": [
                    1702,
                    1706,
                    1741,
                    1710,
                    1711,
                    1712,
                    1745,
                    1715,
                    1747,
                    1748,
                    1749,
                    1753
                ],
                "matching_bracket": [
                    1714,
                    1708,
                    1703
                ],
                "line.leaves": [
                    1704,
                    1871,
                    1744,
                    1844,
                    1919
                ],
                "current_leaves.append": [
                    1748,
                    1711
                ],
                "result.append": [
                    1769,
                    1722,
                    1724,
                    1767
                ],
                "line.comments_after": [
                    1768,
                    1874,
                    1723,
                    1922
                ],
                "bracket_split_succeeded_or_raise": [
                    1770,
                    1725
                ],
                "Collection": [
                    1732
                ],
                "closing_bracket": [
                    1771,
                    1775,
                    1776,
                    1743,
                    1784,
                    1752,
                    1789
                ],
                "omit": [
                    1784,
                    1785,
                    1750
                ],
                "tail_leaves.reverse": [
                    1754
                ],
                "body_leaves.reverse": [
                    1755
                ],
                "head_leaves.reverse": [
                    1756
                ],
                "opening_bracket.type": [
                    1773
                ],
                "opening_bracket.value": [
                    1774
                ],
                "closing_bracket.type": [
                    1775
                ],
                "closing_bracket.value": [
                    1776
                ],
                "body.bracket_tracker.delimiters": [
                    1782
                ],
                "body.bracket_tracker": [
                    1782
                ],
                "ensure_visible": [
                    1788,
                    1789
                ],
                "tail_len": [
                    1817,
                    1809,
                    1811,
                    1814
                ],
                "l.leaves": [
                    1830
                ],
                "wraps": [
                    1827
                ],
                "split_wrapper": [
                    1833
                ],
                "last_leaf": [
                    1851,
                    1844
                ],
                "line.bracket_tracker.delimiters": [
                    1848
                ],
                "line.bracket_tracker": [
                    1848,
                    1850
                ],
                "delimiter_priority": [
                    1850,
                    1892,
                    1885
                ],
                "line.bracket_tracker.max_delimiter_priority": [
                    1850
                ],
                "lowest_depth": [
                    1857,
                    1877,
                    1879
                ],
                "trailing_comma_safe": [
                    1891,
                    1858,
                    1883
                ],
                "current_line.append_safe": [
                    1864,
                    1912
                ],
                "current_line.append": [
                    1896,
                    1917,
                    1869
                ],
                "append_to_line": [
                    1872,
                    1875,
                    1923,
                    1920
                ],
                "leaf_priority": [
                    1884,
                    1885
                ],
                "delimiters.get": [
                    1884
                ],
                "dont_increase_indentation": [
                    1900,
                    1836
                ],
                "syms.import_name": [
                    1937
                ],
                "spl": [
                    1952,
                    1953,
                    1950,
                    1951
                ],
                "leaf.prefix.split": [
                    1950
                ],
                "nl_count": [
                    1952,
                    1954,
                    1955
                ],
                "count": [
                    1952
                ],
                "leaf.value.lstrip": [
                    1969
                ],
                "orig_quote": [
                    1987,
                    1989,
                    2012,
                    1999,
                    1974,
                    1977,
                    1980,
                    1982
                ],
                "new_quote": [
                    1988,
                    2000,
                    2003,
                    2004,
                    1975,
                    1978,
                    1981,
                    2015
                ],
                "first_quote_pos": [
                    1986,
                    1987,
                    1982,
                    1983
                ],
                "leaf.value.find": [
                    1982
                ],
                "prefix": [
                    1986,
                    1990,
                    2015
                ],
                "unescaped_new_quote": [
                    2000,
                    2003,
                    1988,
                    1991
                ],
                "re.compile": [
                    1988,
                    1989
                ],
                "re": [
                    1988,
                    1989
                ],
                "escaped_orig_quote": [
                    1989,
                    1999
                ],
                "prefix.casefold": [
                    1990
                ],
                "unescaped_new_quote.search": [
                    1991
                ],
                "new_body": [
                    1997,
                    1999,
                    2000,
                    2003,
                    2004,
                    2006,
                    2008,
                    2015
                ],
                "escaped_orig_quote.sub": [
                    1999
                ],
                "unescaped_new_quote.sub": [
                    2000,
                    2003
                ],
                "orig_escape_count": [
                    2009,
                    2012,
                    2007
                ],
                "body.count": [
                    2007
                ],
                "new_escape_count": [
                    2008,
                    2009,
                    2012
                ],
                "new_body.count": [
                    2008
                ],
                "is_empty_tuple": [
                    2029
                ],
                "is_one_tuple": [
                    2030,
                    2039
                ],
                "max_delimiter_priority_in_atom": [
                    2031
                ],
                "child.children": [
                    2033,
                    2034
                ],
                "last": [
                    2093,
                    2094,
                    2034,
                    2035,
                    2038
                ],
                "first.type": [
                    2035,
                    2094
                ],
                "last.type": [
                    2035,
                    2094
                ],
                "last.value": [
                    2038
                ],
                "lpar": [
                    2050,
                    2071,
                    2041,
                    2044,
                    2073,
                    2047
                ],
                "rpar": [
                    2048,
                    2050,
                    2071,
                    2042,
                    2075,
                    2044
                ],
                "child.remove": [
                    2049,
                    2043
                ],
                "parens_after": [
                    2052
                ],
                "gexp": [
                    2074,
                    2079,
                    2071
                ],
                "lpar.type": [
                    2073
                ],
                "gexp.type": [
                    2074
                ],
                "rpar.type": [
                    2075
                ],
                "gexp.children": [
                    2079
                ],
                "bt": [
                    2097,
                    2100,
                    2105,
                    2103
                ],
                "c": [
                    2098,
                    2099,
                    2100,
                    2102
                ],
                "bt.mark": [
                    2100,
                    2103
                ],
                "c.leaves": [
                    2102
                ],
                "bt.max_delimiter_priority": [
                    2105
                ],
                "n": [
                    2130,
                    2131,
                    2132,
                    2137,
                    2138,
                    2139,
                    2141
                ],
                "node.pre_order": [
                    2130
                ],
                "n.type": [
                    2137,
                    2131
                ],
                "value_head": [
                    2132,
                    2133
                ],
                "n.value": [
                    2132
                ],
                "n.children": [
                    2138,
                    2139,
                    2141
                ],
                "ch": [
                    2141,
                    2142
                ],
                "ch.type": [
                    2142
                ],
                "PYTHON_EXTENSIONS": [
                    2148,
                    2165
                ],
                "BLACKLISTED_DIRECTORIES": [
                    2160,
                    2149
                ],
                "path.iterdir": [
                    2158
                ],
                "path": [
                    2158
                ],
                "child.is_dir": [
                    2159
                ],
                "child.name": [
                    2160
                ],
                "child.suffix": [
                    2165
                ],
                "change_count": [
                    2174
                ],
                "same_count": [
                    2175
                ],
                "failure_count": [
                    2176
                ],
                "reformatted": [
                    2181,
                    2183,
                    2220,
                    2224,
                    2231
                ],
                "self.check": [
                    2209,
                    2219,
                    2181
                ],
                "self.quiet": [
                    2186,
                    2182
                ],
                "self.change_count": [
                    2209,
                    2184,
                    2228,
                    2229,
                    2231
                ],
                "self.same_count": [
                    2233,
                    2234,
                    2235,
                    2188
                ],
                "message": [
                    2192
                ],
                "self.failure_count": [
                    2193,
                    2236,
                    2237,
                    2206,
                    2239
                ],
                "unchanged": [
                    2225,
                    2235,
                    2221
                ],
                "failed": [
                    2226,
                    2222,
                    2239
                ],
                "report.append": [
                    2235,
                    2238,
                    2230
                ],
                "click.style": [
                    2239,
                    2231
                ],
                "join": [
                    2241,
                    2343,
                    2288,
                    2295,
                    2296
                ],
                "ast.AST": [
                    2264,
                    2250,
                    2267
                ],
                "ast": [
                    2276,
                    2250,
                    2286,
                    2264,
                    2267
                ],
                "node.__class__.__name__": [
                    2273,
                    2252
                ],
                "node.__class__": [
                    2273,
                    2252
                ],
                "field": [
                    2256,
                    2260,
                    2254
                ],
                "node._fields": [
                    2254
                ],
                "item": [
                    2264,
                    2265,
                    2263
                ],
                "_v": [
                    2296,
                    2265,
                    2268,
                    2295
                ],
                "value.__class__.__name__": [
                    2271
                ],
                "value.__class__": [
                    2271
                ],
                "src_ast": [
                    2276,
                    2295
                ],
                "ast.parse": [
                    2276,
                    2286
                ],
                "major": [
                    2281,
                    2278
                ],
                "minor": [
                    2281,
                    2278
                ],
                "sys.version_info": [
                    2278
                ],
                "dst_ast": [
                    2296,
                    2286
                ],
                "log": [
                    2311,
                    2319,
                    2288,
                    2292,
                    2298,
                    2303
                ],
                "dump_to_file": [
                    2288,
                    2298,
                    2311
                ],
                "traceback.format_tb": [
                    2288
                ],
                "traceback": [
                    2288
                ],
                "exc.__traceback__": [
                    2288
                ],
                "src_ast_str": [
                    2297,
                    2298,
                    2295
                ],
                "dst_ast_str": [
                    2296,
                    2297,
                    2298
                ],
                "newdst": [
                    2313,
                    2309,
                    2310
                ],
                "tempfile.NamedTemporaryFile": [
                    2327
                ],
                "tempfile": [
                    2327
                ],
                "output": [
                    2330
                ],
                "f.name": [
                    2334
                ],
                "a_lines": [
                    2344,
                    2341
                ],
                "a.split": [
                    2341
                ],
                "a": [
                    2341
                ],
                "b_lines": [
                    2344,
                    2342
                ],
                "b.split": [
                    2342
                ],
                "b": [
                    2342
                ],
                "difflib.unified_diff": [
                    2344
                ],
                "difflib": [
                    2344
                ],
                "a_name": [
                    2344
                ],
                "b_name": [
                    2344
                ],
                "asyncio.Task": [
                    2348,
                    2359
                ],
                "to_cancel": [
                    2360,
                    2363,
                    2366,
                    2359
                ],
                "asyncio.Task.all_tasks": [
                    2359
                ],
                "cf_logger": [
                    2372,
                    2373
                ],
                "logging.getLogger": [
                    2372
                ],
                "logging": [
                    2372,
                    2373
                ],
                "cf_logger.setLevel": [
                    2373
                ],
                "logging.CRITICAL": [
                    2373
                ],
                "loop.close": [
                    2374
                ],
                "main": [
                    2378
                ]
            }
        },
        "test_data": []
    }
}