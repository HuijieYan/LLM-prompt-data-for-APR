{
    "black": [
        {
            "bugID": 20,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 318,
            "file_name": "mes/SSD2T/bgp_envs/repos/black_20/black.py",
            "replace_code": "def format_file_in_place(\n    src: Path,\n    line_length: int,\n    fast: bool,\n    write_back: WriteBack = WriteBack.NO,\n    lock: Any = None  # multiprocessing.Manager().Lock() is some crazy proxy\n) -> bool:\n    from typing import Any, TextIO\n    from pathlib import Path\n    from black import NothingChanged, diff, WriteBack, format_file_contents\n    \"\"\"Format file under `src` path. Return True if changed.\n    \n    If `write_back` is True, write reformatted code back to stdout.\n    `line_length` and `fast` options are passed to :func:`format_file_contents`.\n    \"\"\"\n    \n    with src.open() as src_buffer:  # Replace tokenize.open with Path.open\n        src_contents = src_buffer.read()\n    try:\n        dst_contents = format_file_contents(\n            src_contents, line_length=line_length, fast=fast\n        )\n    except NothingChanged:\n        return False\n    \n    if write_back == WriteBack.YES:  # Change write_back to WriteBack.YES\n        with src.open(\"w\", encoding=src_buffer.encoding) as f:  # Use src.open to open the file\n            f.write(dst_contents)\n    elif write_back == WriteBack.DIFF:  # Change write_back to WriteBack.DIFF\n        src_name = f\"{src.name}  (original)\"  # Use src.name\n        dst_name = f\"{src.name}  (formatted)\"  # Use src.name\n        diff_contents = diff(src_contents, dst_contents, src_name, dst_name)\n        if lock:\n            lock.acquire()\n        try:\n            print(diff_contents)\n        finally:\n            if lock:\n                lock.release()\n    return True"
        }
    ]
}