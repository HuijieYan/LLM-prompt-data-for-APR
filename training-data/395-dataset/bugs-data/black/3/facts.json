{
    "1.1.1": null,
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/black_3/black.py",
    "1.3.2": null,
    "1.4.1": [
        "    def test_invalid_config_return_code(self) -> None:\n        tmp_file = Path(black.dump_to_file())\n        try:\n            tmp_config = Path(black.dump_to_file())\n            tmp_config.unlink()\n            args = [\"--config\", str(tmp_config), str(tmp_file)]\n            self.invokeBlack(args, exit_code=2, ignore_config=False)\n        finally:\n            tmp_file.unlink()"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/black_3/tests/test_black.py"
    ],
    "2.1.1": [
        [
            "E   AssertionError: 1 != 2 : Error: Could not open file /var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/blk_8h8ny3y4.log: Error reading configuration file: [Errno 2] No such file or directory: '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/blk_8h8ny3y4.log'"
        ]
    ],
    "2.1.2": [
        [
            "self = <test_black.BlackTestCase testMethod=test_invalid_config_return_code>\n\n    def test_invalid_config_return_code(self) -> None:\n        tmp_file = Path(black.dump_to_file())\n        try:\n            tmp_config = Path(black.dump_to_file())\n            tmp_config.unlink()\n            args = [\"--config\", str(tmp_config), str(tmp_file)]\n>           self.invokeBlack(args, exit_code=2, ignore_config=False)\n\ntests/test_black.py:1654: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_black.py:162: in invokeBlack\n    self.assertEqual(result.exit_code, exit_code, msg=runner.stderr_bytes.decode())"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "Black --check returns 1 when invalid config file is specified\n"
    ],
    "3.1.2": [
        "Describe the bug\n\n--check returns 1 when invalid --config is specified, not some higher error code as implied. This can make debugging issues tricky for CI integrations relying on return codes. I wouldn't go so far as to call it a bug, but it was a bit unexpected to me.\n\n(It also happens without --check.)\n\nTo Reproduce\n\n$ printf \"def a():\\n    pass\\n\" | black - --check; echo \"return: $?\"\ndef a():\n    pass\nAll done! \u2728 \ud83c\udf70 \u2728\n1 file left unchanged.\nreturn: 0\n$ printf \"def a():\\n    pass\\n\" | black - --check --config \"foo\"; echo \"return: $?\"\nError: Could not open file foo: Error reading configuration file: [Errno 2] No such file or directory: 'foo'\nreturn: 1\nExpected behavior\n\n--check says:\n\nDon't write the files back, just return the status. Return code 0 means nothing would change. Return code 1 means some files would be reformatted. Return code 123 means there was an internal error.\n\nSo I would expect this case to return an error code other than 1.\n\nEnvironment (please complete the following information):\n\nVersion: 19.10b0, master (both tested)\nOS and Python version: macOS 10.15.3 with Python 3.7.7; and Ubuntu 18.04.4 with Python 3.6.9\nDoes this bug also happen on master?\n\nYes (tested via cloning and pipenv shell)\n\nAdditional context\n\nThis can be very awkward to debug in a CI environment if you rely on return codes only.\n"
    ]
}