{
    "black": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 2713,
            "file_name": "black.py",
            "replace_code": "def normalize_invisible_parens(node: Node, parens_after: Set[str]) -> None:\n    from typing import Set\n    from libcst import Node, Leaf, syms, FMT_OFF, token\n    from libcst.helpers import list_comments, maybe_make_parens_invisible_in_atom, is_one_tuple, is_multiline_string\n    \"\"\"Make existing optional parentheses invisible or create new ones.\n    \n    `parens_after` is a set of string leaf values immediately after which parens\n    should be put.\n    \n    Standardizes on visible parentheses for single-element tuples, and keeps\n    existing visible parentheses for other tuples and generator expressions.\n    \"\"\"\n    for pc in list_comments(node.prefix, is_endmarker=False):\n        if pc.value in FMT_OFF:\n            # This `node` has a prefix with `# fmt: off`, don't mess with parens.\n            return\n    \n    check_slash = False\n    for index, child in enumerate(list(node.children)):\n        if check_slash:\n            # handle backslash continuation for tuple assignment\n            if isinstance(child, Leaf) and child.type == token.COMMA and child.prefix.lstrip().startswith(\"\\\\\"):\n                if index + 1 < len(node.children):\n                    node.children[index+1].prefix = \"\\\\\" + node.children[index+1].prefix.lstrip()\n            check_slash = False\n    \n        if isinstance(child, Leaf) and child.value == \"\\\\\":\n            # detected backslash continuation\n            check_slash = True\n        \n        if isinstance(child, Leaf) and child.value in parens_after:\n            if is_one_tuple(child):\n                lpar = Leaf(token.LPAR, \"(\")\n                rpar = Leaf(token.RPAR, \")\")\n                child.remove()\n                node.insert_child(index, Node(syms.atom, [lpar, child, rpar]))\n    \n            elif node.type == syms.import_from and child.type == token.LPAR:\n                # make parentheses invisible\n                child.value = \"\"\n                node.children[-1].value = \"\"\n            elif child.type != token.STAR:\n                # insert invisible parentheses\n                node.insert_child(index, Leaf(token.LPAR, \"\"))\n                node.append_child(Leaf(token.RPAR, \"\"))\n            break"
        }
    ]
}