{
    "black": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2713,
            "file_name": "black.py",
            "replace_code": "def normalize_invisible_parens(node: Node, parens_after: Set[str]) -> None:\n    from typing import List, Set\n    from black import FMT_OFF, Node, ProtoComment, LN, Leaf, token, syms\n    \"\"\"Make existing optional parentheses invisible or create new ones.\n    \n    `parens_after` is a set of string leaf values immediately after which parens\n    should be put.\n    \n    Standardizes on visible parentheses for single-element tuples, and keeps\n    existing visible parentheses for other tuples and generator expressions.\n    \"\"\"\n    for pc in list_comments(node.prefix):\n        if pc.value in FMT_OFF:\n            return\n    \n    check_lpar = False\n    for index, child in enumerate(list(node.children)):\n        if check_lpar and isinstance(child, Leaf) and child.value in parens_after:\n            if node.type == syms.import_from and child.type == token.LPAR:\n                child.value = \"\"  # make parentheses invisible\n                node.children[-1].value = \"\"\n            elif isinstance(child, Leaf) and child.type != token.STAR:\n                # insert invisible parentheses\n                node.insert_child(index, Leaf(token.LPAR, \"\"))\n                node.insert_child(index + 1, Leaf(token.RPAR, \"\"))\n            else:\n                if isinstance(child, Leaf) and child.value not in parens_after:\n                    # wrap child in invisible parentheses\n                    lpar = Leaf(token.LPAR, \"\")\n                    rpar = Leaf(token.RPAR, \"\")\n                    node.insert_child(index, lpar)\n                    node.insert_child(index + 2, rpar)\n                elif isinstance(child, LN):\n                    normalize_invisible_parens(child, parens_after)\n    \n        check_lpar = child.type == syms.atom or (is_one_tuple(child) and child.type != syms.list_display)"
        }
    ]
}