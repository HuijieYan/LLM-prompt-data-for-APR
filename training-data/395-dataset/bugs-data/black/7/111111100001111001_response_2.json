{
    "black": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2713,
            "file_name": "black.py",
            "replace_code": "def normalize_invisible_parens(node: Node, parens_after: Set[str]) -> None:\n\n    \"\"\"Make existing optional parentheses invisible or create new ones.\n    \n    `parens_after` is a set of string leaf values immediately after which parens should be put.\n    \n    Standardizes on visible parentheses for single-element tuples, and keeps existing visible parentheses for other tuples and generator expressions.\n    \"\"\"\n    if has_fmt_off(node.prefix):\n        return\n    \n    is_lpar_required = False\n    for index, child in enumerate(list(node.children)):\n        if is_lpar_required and should_make_parens_invisible(child):\n            make_parens_invisible(node, child)\n            break\n        elif is_lpar_required and is_one_tuple(child):\n            wrap_in_visible_parentheses(node, index, child)\n            break\n        elif is_lpar_shorthand(node, child):\n            handle_lpar_shorthand(node, child)\n            break\n        elif not is_multiline_string_parentheses(child):\n            wrap_in_invisible_parentheses(node, index, child)\n        \n        is_lpar_required = is_leading_value(child, parens_after)"
        }
    ]
}