{
    "1.1.1": "def generate_ignored_nodes(leaf: Leaf) -> Iterator[LN]:\n    \n    container: Optional[LN] = container_of(leaf)\n    while container is not None and container.type != token.ENDMARKER:\n        is_fmt_on = False\n        for comment in list_comments(container.prefix, is_endmarker=False):\n            if comment.value in FMT_ON:\n                is_fmt_on = True\n            elif comment.value in FMT_OFF:\n                is_fmt_on = False\n        if is_fmt_on:\n            return\n\n        yield container\n\n        container = container.next_sibling\n",
    "1.1.2": "Starting from the container of `leaf`, generate all leaves until `# fmt: on`.\n\nStops at the end of the block.",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/black_2/black.py",
    "1.3.2": [
        "container_of(leaf: Leaf) -> LN",
        "list_comments(prefix: str) -> List[ProtoComment]"
    ],
    "1.4.1": [
        "    @patch(\"black.dump_to_file\", dump_to_stderr)\n    def test_fmtonoff4(self) -> None:\n        source, expected = read_data(\"fmtonoff4\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, black.FileMode())"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/black_2/tests/test_black.py"
    ],
    "2.1.1": [
        [
            "E       FileNotFoundError: [Errno 2] No such file or directory: '/Volumes/SSD2T/bgp_envs_non_pandas/repos/black_2/tests/data/fmtonoff4.py'"
        ]
    ],
    "2.1.2": [
        [
            "self = <test_black.BlackTestCase testMethod=test_fmtonoff4>\n\n    @patch(\"black.dump_to_file\", dump_to_stderr)\n    def test_fmtonoff4(self) -> None:\n>       source, expected = read_data(\"fmtonoff4\")\n\ntests/test_black.py:637: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nname = 'fmtonoff4.py', data = True\n\n    def read_data(name: str, data: bool = True) -> Tuple[str, str]:\n        \"\"\"read_data('test_name') -> 'input', 'output'\"\"\"\n        if not name.endswith((\".py\", \".pyi\", \".out\", \".diff\")):\n            name += \".py\"\n        _input: List[str] = []\n        _output: List[str] = []\n        base_dir = THIS_DIR / \"data\" if data else THIS_DIR\n>       with open(base_dir / name, \"r\", encoding=\"utf8\") as test:",
            "\ntests/test_black.py:58: FileNotFoundError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}