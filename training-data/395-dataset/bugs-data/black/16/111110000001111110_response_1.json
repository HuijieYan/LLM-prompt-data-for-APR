{
    "black": [
        {
            "bugID": 16,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 2934,
            "file_name": "mes/SSD2T/bgp_envs/repos/black_16/black.py",
            "replace_code": "def gen_python_files_in_dir(\n    path: Path,\n    root: Path,\n    include: Pattern[str],\n    exclude: Pattern[str],\n    report: Report,\n) -> Iterator[Path]:\n    from typing import Pattern, Iterator\n    from pathlib import Path\n    \"\"\"Generate all files under `path` whose paths are not excluded by the\n    `exclude` regex, but are included by the `include` regex.\n    \n    `report` is where output about exclusions goes.\n    \"\"\"\n    def is_subpath(p1, p2):\n        try:\n            p1.relative_to(p2)\n            return True\n        except ValueError:\n            return False\n    \n    for child in path.iterdir():\n        if is_subpath(child, root):\n            normalized_path = \"/\" + child.as_posix()\n            exclude_match = exclude.search(normalized_path)\n            if exclude_match and exclude_match.group(0):\n                report.path_ignored(child, \"matches the --exclude regular expression\")\n                continue\n    \n            if child.is_dir():\n                yield from gen_python_files_in_dir(child, root, include, exclude, report)\n    \n            elif child.is_file():\n                include_match = include.search(normalized_path)\n                if include_match:\n                    yield child"
        }
    ]
}