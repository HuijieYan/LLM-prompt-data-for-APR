{
    "black": [
        {
            "bugID": 16,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 2934,
            "file_name": "mes/SSD2T/bgp_envs/repos/black_16/black.py",
            "replace_code": "def gen_python_files_in_dir(path: Path, root: Path, include: Pattern[str], exclude: Pattern[str], report: Report) -> Iterator[Path]:\n    from typing import Iterator, Pattern\n    from pathlib import Path\n    import re\n    import unittest\n    from unittest.mock import MagicMock\n    \"\"\"Generate all files under `path` whose paths are not excluded by the\n    `exclude` regex, but are included by the `include` regex.\n    \n    `report` is where output about exclusions goes.\n    \"\"\"\n    assert root.is_absolute(), f\"INTERNAL ERROR: `root` must be absolute but is {root}\"\n    for child in path.iterdir():\n        try:\n            normalized_path = child.resolve().relative_to(root).as_posix()\n        except ValueError:\n            if child.is_symlink():\n                report.path_ignored(child, \"Resolves outside the root directory\")\n                continue\n            raise\n        if child.is_dir():\n            yield from gen_python_files_in_dir(child, root, include, exclude, report)\n        elif child.is_file():\n            if include.search(normalized_path):\n                yield child"
        }
    ]
}