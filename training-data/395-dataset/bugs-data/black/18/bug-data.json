{
    "black:18": {
        "/Volumes/SSD2T/bgp_envs/repos/black_18/black.py": {
            "buggy_functions": [
                {
                    "function_name": "format_file_in_place",
                    "function_code": "def format_file_in_place(\n    src: Path,\n    line_length: int,\n    fast: bool,\n    write_back: WriteBack = WriteBack.NO,\n    mode: FileMode = FileMode.AUTO_DETECT,\n    lock: Any = None,  # multiprocessing.Manager().Lock() is some crazy proxy\n) -> bool:\n    \"\"\"Format file under `src` path. Return True if changed.\n\n    If `write_back` is True, write reformatted code back to stdout.\n    `line_length` and `fast` options are passed to :func:`format_file_contents`.\n    \"\"\"\n    if src.suffix == \".pyi\":\n        mode |= FileMode.PYI\n    with tokenize.open(src) as src_buffer:\n        src_contents = src_buffer.read()\n    try:\n        dst_contents = format_file_contents(\n            src_contents, line_length=line_length, fast=fast, mode=mode\n        )\n    except NothingChanged:\n        return False\n\n    if write_back == write_back.YES:\n        with open(src, \"w\", encoding=src_buffer.encoding) as f:\n            f.write(dst_contents)\n    elif write_back == write_back.DIFF:\n        src_name = f\"{src}  (original)\"\n        dst_name = f\"{src}  (formatted)\"\n        diff_contents = diff(src_contents, dst_contents, src_name, dst_name)\n        if lock:\n            lock.acquire()\n        try:\n            sys.stdout.write(diff_contents)\n        finally:\n            if lock:\n                lock.release()\n    return True\n",
                    "decorators": [],
                    "docstring": "Format file under `src` path. Return True if changed.\n\nIf `write_back` is True, write reformatted code back to stdout.\n`line_length` and `fast` options are passed to :func:`format_file_contents`.",
                    "start_line": 453,
                    "end_line": 491,
                    "variables": {
                        "Path": [
                            454
                        ],
                        "int": [
                            455
                        ],
                        "bool": [
                            456,
                            460
                        ],
                        "WriteBack": [
                            457
                        ],
                        "FileMode": [
                            458,
                            467
                        ],
                        "Any": [
                            459
                        ],
                        "WriteBack.NO": [
                            457
                        ],
                        "FileMode.AUTO_DETECT": [
                            458
                        ],
                        "src.suffix": [
                            466
                        ],
                        "src": [
                            481,
                            482,
                            466,
                            468,
                            478
                        ],
                        "mode": [
                            472,
                            467
                        ],
                        "FileMode.PYI": [
                            467
                        ],
                        "tokenize.open": [
                            468
                        ],
                        "tokenize": [
                            468
                        ],
                        "src_buffer": [
                            468,
                            469,
                            478
                        ],
                        "src_contents": [
                            472,
                            483,
                            469
                        ],
                        "src_buffer.read": [
                            469
                        ],
                        "dst_contents": [
                            479,
                            483,
                            471
                        ],
                        "format_file_contents": [
                            471
                        ],
                        "line_length": [
                            472
                        ],
                        "fast": [
                            472
                        ],
                        "NothingChanged": [
                            474
                        ],
                        "write_back": [
                            480,
                            477
                        ],
                        "write_back.YES": [
                            477
                        ],
                        "open": [
                            478
                        ],
                        "src_buffer.encoding": [
                            478
                        ],
                        "f": [
                            478,
                            479
                        ],
                        "f.write": [
                            479
                        ],
                        "write_back.DIFF": [
                            480
                        ],
                        "src_name": [
                            481,
                            483
                        ],
                        "dst_name": [
                            482,
                            483
                        ],
                        "diff_contents": [
                            483,
                            487
                        ],
                        "diff": [
                            483
                        ],
                        "lock": [
                            489,
                            490,
                            484,
                            485
                        ],
                        "lock.acquire": [
                            485
                        ],
                        "sys.stdout.write": [
                            487
                        ],
                        "sys.stdout": [
                            487
                        ],
                        "sys": [
                            487
                        ],
                        "lock.release": [
                            490
                        ]
                    },
                    "filtered_variables": {
                        "Path": [
                            454
                        ],
                        "WriteBack": [
                            457
                        ],
                        "FileMode": [
                            458,
                            467
                        ],
                        "Any": [
                            459
                        ],
                        "WriteBack.NO": [
                            457
                        ],
                        "FileMode.AUTO_DETECT": [
                            458
                        ],
                        "src.suffix": [
                            466
                        ],
                        "src": [
                            481,
                            482,
                            466,
                            468,
                            478
                        ],
                        "mode": [
                            472,
                            467
                        ],
                        "FileMode.PYI": [
                            467
                        ],
                        "tokenize.open": [
                            468
                        ],
                        "tokenize": [
                            468
                        ],
                        "src_buffer": [
                            468,
                            469,
                            478
                        ],
                        "src_contents": [
                            472,
                            483,
                            469
                        ],
                        "src_buffer.read": [
                            469
                        ],
                        "dst_contents": [
                            479,
                            483,
                            471
                        ],
                        "format_file_contents": [
                            471
                        ],
                        "line_length": [
                            472
                        ],
                        "fast": [
                            472
                        ],
                        "NothingChanged": [
                            474
                        ],
                        "write_back": [
                            480,
                            477
                        ],
                        "write_back.YES": [
                            477
                        ],
                        "src_buffer.encoding": [
                            478
                        ],
                        "f": [
                            478,
                            479
                        ],
                        "f.write": [
                            479
                        ],
                        "write_back.DIFF": [
                            480
                        ],
                        "src_name": [
                            481,
                            483
                        ],
                        "dst_name": [
                            482,
                            483
                        ],
                        "diff_contents": [
                            483,
                            487
                        ],
                        "diff": [
                            483
                        ],
                        "lock": [
                            489,
                            490,
                            484,
                            485
                        ],
                        "lock.acquire": [
                            485
                        ],
                        "sys.stdout.write": [
                            487
                        ],
                        "sys.stdout": [
                            487
                        ],
                        "sys": [
                            487
                        ],
                        "lock.release": [
                            490
                        ]
                    },
                    "diff_line_number": 468,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "Path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileMode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack.NO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileMode.AUTO_DETECT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src.suffix": {
                                    "variable_value": "'.py'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "src": {
                                    "variable_value": "PosixPath('/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmpkl4f49bf/test.py')",
                                    "variable_type": "PosixPath",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": "<FileMode.AUTO_DETECT: 0>",
                                    "variable_type": "FileMode",
                                    "variable_shape": null
                                },
                                "FileMode.PYI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.open": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_buffer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_buffer.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dst_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_file_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fast": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "NothingChanged": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "write_back": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "write_back.YES": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "src_buffer.encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "write_back.DIFF": {
                                    "variable_value": "<WriteBack.DIFF: 2>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "src_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dst_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "diff_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lock": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "lock.acquire": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sys.stdout.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys.stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lock.release": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileMode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack.NO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileMode.AUTO_DETECT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src.suffix": {
                                    "variable_value": "'.py'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "src": {
                                    "variable_value": "PosixPath('/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmpkl4f49bf/test.py')",
                                    "variable_type": "PosixPath",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": "<FileMode.AUTO_DETECT: 0>",
                                    "variable_type": "FileMode",
                                    "variable_shape": null
                                },
                                "FileMode.PYI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.open": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_buffer": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmpkl4f49bf/test.py' mode='r' encoding='utf-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "src_contents": {
                                    "variable_value": "'def f(  ):\\n    pass'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "src_buffer.read": {
                                    "variable_value": "<built-in method read of _io.TextIOWrapper object at 0x107c91110>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "dst_contents": {
                                    "variable_value": "'def f():\\n    pass\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "format_file_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fast": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "NothingChanged": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "write_back": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "write_back.YES": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "src_buffer.encoding": {
                                    "variable_value": "'utf-8'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "f": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmpkl4f49bf/test.py' mode='w' encoding='utf-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "f.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x107c911e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "write_back.DIFF": {
                                    "variable_value": "<WriteBack.DIFF: 2>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "src_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dst_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "diff_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lock": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "lock.acquire": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sys.stdout.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys.stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lock.release": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileMode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack.NO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileMode.AUTO_DETECT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src.suffix": {
                                    "variable_value": "'.py'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "src": {
                                    "variable_value": "PosixPath('/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmpkl4f49bf/test.py')",
                                    "variable_type": "PosixPath",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": "<FileMode.AUTO_DETECT: 0>",
                                    "variable_type": "FileMode",
                                    "variable_shape": null
                                },
                                "FileMode.PYI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.open": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_buffer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_buffer.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dst_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_file_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fast": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "NothingChanged": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "write_back": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "write_back.YES": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "src_buffer.encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "write_back.DIFF": {
                                    "variable_value": "<WriteBack.DIFF: 2>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "src_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dst_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "diff_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lock": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "lock.acquire": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sys.stdout.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys.stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lock.release": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileMode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack.NO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileMode.AUTO_DETECT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src.suffix": {
                                    "variable_value": "'.py'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "src": {
                                    "variable_value": "PosixPath('/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmpkl4f49bf/test.py')",
                                    "variable_type": "PosixPath",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": "<FileMode.AUTO_DETECT: 0>",
                                    "variable_type": "FileMode",
                                    "variable_shape": null
                                },
                                "FileMode.PYI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize.open": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tokenize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_buffer": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmpkl4f49bf/test.py' mode='r' encoding='utf-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "src_contents": {
                                    "variable_value": "'def f(  ):\\n    pass'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "src_buffer.read": {
                                    "variable_value": "<built-in method read of _io.TextIOWrapper object at 0x107c912b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "dst_contents": {
                                    "variable_value": "'def f():\\n    pass\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "format_file_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fast": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "NothingChanged": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "write_back": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "write_back.YES": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "src_buffer.encoding": {
                                    "variable_value": "'utf-8'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "f": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmpkl4f49bf/test.py' mode='w' encoding='utf-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "f.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x10825fee0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "write_back.DIFF": {
                                    "variable_value": "<WriteBack.DIFF: 2>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "src_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dst_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "diff_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lock": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "lock.acquire": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sys.stdout.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys.stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lock.release": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "Path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileMode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack.NO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileMode.AUTO_DETECT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src.suffix": {
                                    "variable_value": "'.py'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "src": {
                                    "variable_value": "PosixPath('/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmp0dzgv99h/test.py')",
                                    "variable_type": "PosixPath",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": "<FileMode.AUTO_DETECT: 0>",
                                    "variable_type": "FileMode",
                                    "variable_shape": null
                                },
                                "FileMode.PYI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "buf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "newline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prepare_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "buf.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dst_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_file_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fast": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "NothingChanged": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "write_back": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "write_back.YES": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "write_back.DIFF": {
                                    "variable_value": "<WriteBack.DIFF: 2>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "src_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dst_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "diff_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lock": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "lock.acquire": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "io.TextIOWrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys.stdout.buffer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys.stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.detach": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lock.release": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileMode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack.NO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileMode.AUTO_DETECT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src.suffix": {
                                    "variable_value": "'.py'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "src": {
                                    "variable_value": "PosixPath('/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmp0dzgv99h/test.py')",
                                    "variable_type": "PosixPath",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": "<FileMode.AUTO_DETECT: 0>",
                                    "variable_type": "FileMode",
                                    "variable_shape": null
                                },
                                "FileMode.PYI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "buf": {
                                    "variable_value": "<_io.BufferedReader name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmp0dzgv99h/test.py'>",
                                    "variable_type": "BufferedReader",
                                    "variable_shape": null
                                },
                                "newline": {
                                    "variable_value": "'\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "encoding": {
                                    "variable_value": "'utf-8'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "src_contents": {
                                    "variable_value": "'def f(  ):\\n    pass'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "prepare_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "buf.read": {
                                    "variable_value": "<built-in method read of _io.BufferedReader object at 0x107c0ea90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "dst_contents": {
                                    "variable_value": "'def f():\\n    pass\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "format_file_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fast": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "NothingChanged": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "write_back": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "write_back.YES": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmp0dzgv99h/test.py' mode='w' encoding='utf-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "f.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x107c12110>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "write_back.DIFF": {
                                    "variable_value": "<WriteBack.DIFF: 2>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "src_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dst_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "diff_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lock": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "lock.acquire": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "io.TextIOWrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys.stdout.buffer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys.stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.detach": {
                                    "variable_value": "<built-in method detach of _io.TextIOWrapper object at 0x107c12110>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "lock.release": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileMode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack.NO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileMode.AUTO_DETECT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src.suffix": {
                                    "variable_value": "'.py'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "src": {
                                    "variable_value": "PosixPath('/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmp0dzgv99h/test.py')",
                                    "variable_type": "PosixPath",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": "<FileMode.AUTO_DETECT: 0>",
                                    "variable_type": "FileMode",
                                    "variable_shape": null
                                },
                                "FileMode.PYI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "buf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "newline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prepare_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "buf.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dst_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_file_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fast": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "NothingChanged": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "write_back": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "write_back.YES": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "write_back.DIFF": {
                                    "variable_value": "<WriteBack.DIFF: 2>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "src_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dst_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "diff_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lock": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "lock.acquire": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "io.TextIOWrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys.stdout.buffer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys.stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.detach": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lock.release": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileMode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack.NO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileMode.AUTO_DETECT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src.suffix": {
                                    "variable_value": "'.py'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "src": {
                                    "variable_value": "PosixPath('/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmp0dzgv99h/test.py')",
                                    "variable_type": "PosixPath",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": "<FileMode.AUTO_DETECT: 0>",
                                    "variable_type": "FileMode",
                                    "variable_shape": null
                                },
                                "FileMode.PYI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "buf": {
                                    "variable_value": "<_io.BufferedReader name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmp0dzgv99h/test.py'>",
                                    "variable_type": "BufferedReader",
                                    "variable_shape": null
                                },
                                "newline": {
                                    "variable_value": "'\\r\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "encoding": {
                                    "variable_value": "'utf-8'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "src_contents": {
                                    "variable_value": "'def f(  ):\\n    pass'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "prepare_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "buf.read": {
                                    "variable_value": "<built-in method read of _io.BufferedReader object at 0x107c1da90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "dst_contents": {
                                    "variable_value": "'def f():\\n    pass\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "format_file_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fast": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "NothingChanged": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "write_back": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "write_back.YES": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmp0dzgv99h/test.py' mode='w' encoding='utf-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "f.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x1084cdee0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "write_back.DIFF": {
                                    "variable_value": "<WriteBack.DIFF: 2>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "src_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dst_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "diff_contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lock": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "lock.acquire": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "io.TextIOWrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys.stdout.buffer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys.stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.detach": {
                                    "variable_value": "<built-in method detach of _io.TextIOWrapper object at 0x1084cdee0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "lock.release": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "format_stdin_to_stdout",
                    "function_code": "def format_stdin_to_stdout(\n    line_length: int,\n    fast: bool,\n    write_back: WriteBack = WriteBack.NO,\n    mode: FileMode = FileMode.AUTO_DETECT,\n) -> bool:\n    \"\"\"Format file on stdin. Return True if changed.\n\n    If `write_back` is True, write reformatted code back to stdout.\n    `line_length`, `fast`, `is_pyi`, and `force_py36` arguments are passed to\n    :func:`format_file_contents`.\n    \"\"\"\n    src = sys.stdin.read()\n    dst = src\n    try:\n        dst = format_file_contents(src, line_length=line_length, fast=fast, mode=mode)\n        return True\n\n    except NothingChanged:\n        return False\n\n    finally:\n        if write_back == WriteBack.YES:\n            sys.stdout.write(dst)\n        elif write_back == WriteBack.DIFF:\n            src_name = \"<stdin>  (original)\"\n            dst_name = \"<stdin>  (formatted)\"\n            sys.stdout.write(diff(src, dst, src_name, dst_name))\n",
                    "decorators": [],
                    "docstring": "Format file on stdin. Return True if changed.\n\nIf `write_back` is True, write reformatted code back to stdout.\n`line_length`, `fast`, `is_pyi`, and `force_py36` arguments are passed to\n:func:`format_file_contents`.",
                    "start_line": 494,
                    "end_line": 521,
                    "variables": {
                        "int": [
                            495
                        ],
                        "bool": [
                            496,
                            499
                        ],
                        "WriteBack": [
                            497,
                            516,
                            518
                        ],
                        "FileMode": [
                            498
                        ],
                        "WriteBack.NO": [
                            497
                        ],
                        "FileMode.AUTO_DETECT": [
                            498
                        ],
                        "src": [
                            521,
                            506,
                            507,
                            509
                        ],
                        "sys.stdin.read": [
                            506
                        ],
                        "sys.stdin": [
                            506
                        ],
                        "sys": [
                            521,
                            506,
                            517
                        ],
                        "dst": [
                            521,
                            517,
                            507,
                            509
                        ],
                        "format_file_contents": [
                            509
                        ],
                        "line_length": [
                            509
                        ],
                        "fast": [
                            509
                        ],
                        "mode": [
                            509
                        ],
                        "NothingChanged": [
                            512
                        ],
                        "write_back": [
                            516,
                            518
                        ],
                        "WriteBack.YES": [
                            516
                        ],
                        "sys.stdout.write": [
                            521,
                            517
                        ],
                        "sys.stdout": [
                            521,
                            517
                        ],
                        "WriteBack.DIFF": [
                            518
                        ],
                        "src_name": [
                            521,
                            519
                        ],
                        "dst_name": [
                            520,
                            521
                        ],
                        "diff": [
                            521
                        ]
                    },
                    "filtered_variables": {
                        "WriteBack": [
                            497,
                            516,
                            518
                        ],
                        "FileMode": [
                            498
                        ],
                        "WriteBack.NO": [
                            497
                        ],
                        "FileMode.AUTO_DETECT": [
                            498
                        ],
                        "src": [
                            521,
                            506,
                            507,
                            509
                        ],
                        "sys.stdin.read": [
                            506
                        ],
                        "sys.stdin": [
                            506
                        ],
                        "sys": [
                            521,
                            506,
                            517
                        ],
                        "dst": [
                            521,
                            517,
                            507,
                            509
                        ],
                        "format_file_contents": [
                            509
                        ],
                        "line_length": [
                            509
                        ],
                        "fast": [
                            509
                        ],
                        "mode": [
                            509
                        ],
                        "NothingChanged": [
                            512
                        ],
                        "write_back": [
                            516,
                            518
                        ],
                        "WriteBack.YES": [
                            516
                        ],
                        "sys.stdout.write": [
                            521,
                            517
                        ],
                        "sys.stdout": [
                            521,
                            517
                        ],
                        "WriteBack.DIFF": [
                            518
                        ],
                        "src_name": [
                            521,
                            519
                        ],
                        "dst_name": [
                            520,
                            521
                        ],
                        "diff": [
                            521
                        ]
                    },
                    "diff_line_number": 506,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "lib2to3_parse",
                    "function_code": "def lib2to3_parse(src_txt: str) -> Node:\n    \"\"\"Given a string with source, return the lib2to3 Node.\"\"\"\n    grammar = pygram.python_grammar_no_print_statement\n    if src_txt[-1] != \"\\n\":\n        nl = \"\\r\\n\" if \"\\r\\n\" in src_txt[:1024] else \"\\n\"\n        src_txt += nl\n    for grammar in GRAMMARS:\n        drv = driver.Driver(grammar, pytree.convert)\n        try:\n            result = drv.parse_string(src_txt, True)\n            break\n\n        except ParseError as pe:\n            lineno, column = pe.context[1]\n            lines = src_txt.splitlines()\n            try:\n                faulty_line = lines[lineno - 1]\n            except IndexError:\n                faulty_line = \"<line number missing in source>\"\n            exc = ValueError(f\"Cannot parse: {lineno}:{column}: {faulty_line}\")\n    else:\n        raise exc from None\n\n    if isinstance(result, Leaf):\n        result = Node(syms.file_input, [result])\n    return result\n",
                    "decorators": [],
                    "docstring": "Given a string with source, return the lib2to3 Node.",
                    "start_line": 589,
                    "end_line": 614,
                    "variables": {
                        "str": [
                            589
                        ],
                        "grammar": [
                            595,
                            596,
                            591
                        ],
                        "pygram.python_grammar_no_print_statement": [
                            591
                        ],
                        "pygram": [
                            591
                        ],
                        "src_txt": [
                            592,
                            593,
                            594,
                            598,
                            603
                        ],
                        "nl": [
                            593,
                            594
                        ],
                        "GRAMMARS": [
                            595
                        ],
                        "drv": [
                            596,
                            598
                        ],
                        "driver.Driver": [
                            596
                        ],
                        "driver": [
                            596
                        ],
                        "pytree.convert": [
                            596
                        ],
                        "pytree": [
                            596
                        ],
                        "result": [
                            614,
                            612,
                            613,
                            598
                        ],
                        "drv.parse_string": [
                            598
                        ],
                        "ParseError": [
                            601
                        ],
                        "lineno": [
                            608,
                            602,
                            605
                        ],
                        "column": [
                            608,
                            602
                        ],
                        "pe.context": [
                            602
                        ],
                        "pe": [
                            602
                        ],
                        "lines": [
                            603,
                            605
                        ],
                        "src_txt.splitlines": [
                            603
                        ],
                        "faulty_line": [
                            608,
                            605,
                            607
                        ],
                        "IndexError": [
                            606
                        ],
                        "exc": [
                            608,
                            610
                        ],
                        "ValueError": [
                            608
                        ],
                        "isinstance": [
                            612
                        ],
                        "Leaf": [
                            612
                        ],
                        "Node": [
                            589,
                            613
                        ],
                        "syms.file_input": [
                            613
                        ],
                        "syms": [
                            613
                        ]
                    },
                    "filtered_variables": {
                        "grammar": [
                            595,
                            596,
                            591
                        ],
                        "pygram.python_grammar_no_print_statement": [
                            591
                        ],
                        "pygram": [
                            591
                        ],
                        "src_txt": [
                            592,
                            593,
                            594,
                            598,
                            603
                        ],
                        "nl": [
                            593,
                            594
                        ],
                        "GRAMMARS": [
                            595
                        ],
                        "drv": [
                            596,
                            598
                        ],
                        "driver.Driver": [
                            596
                        ],
                        "driver": [
                            596
                        ],
                        "pytree.convert": [
                            596
                        ],
                        "pytree": [
                            596
                        ],
                        "result": [
                            614,
                            612,
                            613,
                            598
                        ],
                        "drv.parse_string": [
                            598
                        ],
                        "ParseError": [
                            601
                        ],
                        "lineno": [
                            608,
                            602,
                            605
                        ],
                        "column": [
                            608,
                            602
                        ],
                        "pe.context": [
                            602
                        ],
                        "pe": [
                            602
                        ],
                        "lines": [
                            603,
                            605
                        ],
                        "src_txt.splitlines": [
                            603
                        ],
                        "faulty_line": [
                            608,
                            605,
                            607
                        ],
                        "exc": [
                            608,
                            610
                        ],
                        "Leaf": [
                            612
                        ],
                        "Node": [
                            589,
                            613
                        ],
                        "syms.file_input": [
                            613
                        ],
                        "syms": [
                            613
                        ]
                    },
                    "diff_line_number": 593,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "grammar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pygram.python_grammar_no_print_statement": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pygram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_txt": {
                                    "variable_value": "'def f(  ):\\n    pass'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GRAMMARS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "drv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "driver.Driver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "driver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytree.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytree": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "drv.parse_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ParseError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lineno": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pe.context": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pe": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_txt.splitlines": {
                                    "variable_value": "<built-in method splitlines of str object at 0x102932ee0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "faulty_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms.file_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "grammar": {
                                    "variable_value": "<blib2to3.pgen2.pgen.PgenGrammar object at 0x102c48910>",
                                    "variable_type": "PgenGrammar",
                                    "variable_shape": null
                                },
                                "pygram.python_grammar_no_print_statement": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pygram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_txt": {
                                    "variable_value": "'def f(  ):\\n    pass\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "20"
                                },
                                "nl": {
                                    "variable_value": "'\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "GRAMMARS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "drv": {
                                    "variable_value": "<blib2to3.pgen2.driver.Driver object at 0x102bd0eb0>",
                                    "variable_type": "Driver",
                                    "variable_shape": null
                                },
                                "driver.Driver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "driver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytree.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytree": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "Node(file_input, [Node(funcdef, [Leaf(NAME, 'def'), Leaf(NAME, 'f'), Node(parameters, [Leaf(LPAR, '('), Leaf(RPAR, ')')]), Leaf(COLON, ':'), Node(suite, [Leaf(NEWLINE, '\\n'), Leaf(INDENT, '    '), Node(simple_stmt, [Leaf(NAME, 'pass'), Leaf(NEWLINE, '\\n')]), Leaf(DEDENT, '')])]), Leaf(ENDMARKER, '')])",
                                    "variable_type": "Node",
                                    "variable_shape": null
                                },
                                "drv.parse_string": {
                                    "variable_value": "<bound method Driver.parse_string of <blib2to3.pgen2.driver.Driver object at 0x102bd0eb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ParseError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lineno": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pe.context": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pe": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_txt.splitlines": {
                                    "variable_value": "<built-in method splitlines of str object at 0x102ca28f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "faulty_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms.file_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "grammar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pygram.python_grammar_no_print_statement": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pygram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_txt": {
                                    "variable_value": "'def f(  ):\\n    pass'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GRAMMARS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "drv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "driver.Driver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "driver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytree.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytree": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "drv.parse_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ParseError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lineno": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pe.context": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pe": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_txt.splitlines": {
                                    "variable_value": "<built-in method splitlines of str object at 0x102ca2cb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "faulty_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms.file_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "grammar": {
                                    "variable_value": "<blib2to3.pgen2.pgen.PgenGrammar object at 0x102c48910>",
                                    "variable_type": "PgenGrammar",
                                    "variable_shape": null
                                },
                                "pygram.python_grammar_no_print_statement": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pygram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_txt": {
                                    "variable_value": "'def f(  ):\\n    pass\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "20"
                                },
                                "nl": {
                                    "variable_value": "'\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "GRAMMARS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "drv": {
                                    "variable_value": "<blib2to3.pgen2.driver.Driver object at 0x102bcae20>",
                                    "variable_type": "Driver",
                                    "variable_shape": null
                                },
                                "driver.Driver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "driver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytree.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytree": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "Node(file_input, [Node(funcdef, [Leaf(NAME, 'def'), Leaf(NAME, 'f'), Node(parameters, [Leaf(LPAR, '('), Leaf(RPAR, ')')]), Leaf(COLON, ':'), Node(suite, [Leaf(NEWLINE, '\\n'), Leaf(INDENT, '    '), Node(simple_stmt, [Leaf(NAME, 'pass'), Leaf(NEWLINE, '\\n')]), Leaf(DEDENT, '')])]), Leaf(ENDMARKER, '')])",
                                    "variable_type": "Node",
                                    "variable_shape": null
                                },
                                "drv.parse_string": {
                                    "variable_value": "<bound method Driver.parse_string of <blib2to3.pgen2.driver.Driver object at 0x102bcae20>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ParseError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lineno": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pe.context": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pe": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_txt.splitlines": {
                                    "variable_value": "<built-in method splitlines of str object at 0x102ca2850>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "faulty_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms.file_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from functools import partial, wraps\nimport keyword",
                    "start_line": 6,
                    "end_line": 7
                },
                {
                    "snippet_code": "GRAMMARS = [\n    pygram.python_grammar_no_print_statement_no_exec_statement,\n    pygram.python_grammar_no_print_statement,\n    pygram.python_grammar,\n]",
                    "start_line": 581,
                    "end_line": 586
                }
            ],
            "inscope_functions": [
                "@click.command()\n@click.option(\n    \"-l\",\n    \"--line-length\",\n    type=int,\n    default=DEFAULT_LINE_LENGTH,\n    help=\"How many character per line to allow.\",\n    show_default=True,\n)\n@click.option(\n    \"--py36\",\n    is_flag=True,\n    help=(\n        \"Allow using Python 3.6-only syntax on all input files.  This will put \"\n        \"trailing commas in function signatures and calls also after *args and \"\n        \"**kwargs.  [default: per-file auto-detection]\"\n    ),\n)\n@click.option(\n    \"--pyi\",\n    is_flag=True,\n    help=(\n        \"Format all input files like typing stubs regardless of file extension \"\n        \"(useful when piping source on standard input).\"\n    ),\n)\n@click.option(\n    \"-S\",\n    \"--skip-string-normalization\",\n    is_flag=True,\n    help=\"Don't normalize string quotes or prefixes.\",\n)\n@click.option(\n    \"--check\",\n    is_flag=True,\n    help=(\n        \"Don't write the files back, just return the status.  Return code 0 \"\n        \"means nothing would change.  Return code 1 means some files would be \"\n        \"reformatted.  Return code 123 means there was an internal error.\"\n    ),\n)\n@click.option(\n    \"--diff\",\n    is_flag=True,\n    help=\"Don't write the files back, just output a diff for each file on stdout.\",\n)\n@click.option(\n    \"--fast/--safe\",\n    is_flag=True,\n    help=\"If --fast given, skip temporary sanity checks. [default: --safe]\",\n)\n@click.option(\n    \"--include\",\n    type=str,\n    default=DEFAULT_INCLUDES,\n    help=(\n        \"A regular expression that matches files and directories that should be \"\n        \"included on recursive searches.  An empty value means all files are \"\n        \"included regardless of the name.  Use forward slashes for directories on \"\n        \"all platforms (Windows, too).  Exclusions are calculated first, inclusions \"\n        \"later.\"\n    ),\n    show_default=True,\n)\n@click.option(\n    \"--exclude\",\n    type=str,\n    default=DEFAULT_EXCLUDES,\n    help=(\n        \"A regular expression that matches files and directories that should be \"\n        \"excluded on recursive searches.  An empty value means no paths are excluded. \"\n        \"Use forward slashes for directories on all platforms (Windows, too).  \"\n        \"Exclusions are calculated first, inclusions later.\"\n    ),\n    show_default=True,\n)\n@click.option(\n    \"-q\",\n    \"--quiet\",\n    is_flag=True,\n    help=(\n        \"Don't emit non-error messages to stderr. Errors are still emitted, \"\n        \"silence those with 2>/dev/null.\"\n    ),\n)\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    is_flag=True,\n    help=(\n        \"Also emit messages to stderr about files that were not changed or were \"\n        \"ignored due to --exclude=.\"\n    ),\n)\n@click.version_option(version=__version__)\n@click.argument(\n    \"src\",\n    nargs=-1,\n    type=click.Path(\n        exists=True, file_okay=True, dir_okay=True, readable=True, allow_dash=True\n    ),\n)\n@click.pass_context\ndef main(\n    ctx: click.Context,\n    line_length: int,\n    check: bool,\n    diff: bool,\n    fast: bool,\n    pyi: bool,\n    py36: bool,\n    skip_string_normalization: bool,\n    quiet: bool,\n    verbose: bool,\n    include: str,\n    exclude: str,\n    src: List[str],\n) -> None:\n    \"\"\"The uncompromising code formatter.\"\"\"\n    write_back = WriteBack.from_configuration(check=check, diff=diff)\n    mode = FileMode.from_configuration(\n        py36=py36, pyi=pyi, skip_string_normalization=skip_string_normalization\n    )\n    report = Report(check=check, quiet=quiet, verbose=verbose)\n    sources: List[Path] = []\n    try:\n        include_regex = re.compile(include)\n    except re.error:\n        err(f\"Invalid regular expression for include given: {include!r}\")\n        ctx.exit(2)\n    try:\n        exclude_regex = re.compile(exclude)\n    except re.error:\n        err(f\"Invalid regular expression for exclude given: {exclude!r}\")\n        ctx.exit(2)\n    root = find_project_root(src)\n    for s in src:\n        p = Path(s)\n        if p.is_dir():\n            sources.extend(\n                gen_python_files_in_dir(p, root, include_regex, exclude_regex, report)\n            )\n        elif p.is_file() or s == \"-\":\n            # if a file was explicitly given, we don't care about its extension\n            sources.append(p)\n        else:\n            err(f\"invalid path: {s}\")\n    if len(sources) == 0:\n        out(\"No paths given. Nothing to do \ud83d\ude34\")\n        ctx.exit(0)\n        return\n\n    elif len(sources) == 1:\n        reformat_one(\n            src=sources[0],\n            line_length=line_length,\n            fast=fast,\n            write_back=write_back,\n            mode=mode,\n            report=report,\n        )\n    else:\n        loop = asyncio.get_event_loop()\n        executor = ProcessPoolExecutor(max_workers=os.cpu_count())\n        try:\n            loop.run_until_complete(\n                schedule_formatting(\n                    sources=sources,\n                    line_length=line_length,\n                    fast=fast,\n                    write_back=write_back,\n                    mode=mode,\n                    report=report,\n                    loop=loop,\n                    executor=executor,\n                )\n            )\n        finally:\n            shutdown(loop)\n        if not quiet:\n            out(\"All done! \u2728 \ud83c\udf70 \u2728\")\n            click.echo(str(report))\n    ctx.exit(report.return_code)",
                "def reformat_one(\n    src: Path,\n    line_length: int,\n    fast: bool,\n    write_back: WriteBack,\n    mode: FileMode,\n    report: \"Report\",\n) -> None:\n    \"\"\"Reformat a single file under `src` without spawning child processes.\n\n    If `quiet` is True, non-error messages are not output. `line_length`,\n    `write_back`, `fast` and `pyi` options are passed to\n    :func:`format_file_in_place` or :func:`format_stdin_to_stdout`.\n    \"\"\"\n    try:\n        changed = Changed.NO\n        if not src.is_file() and str(src) == \"-\":\n            if format_stdin_to_stdout(\n                line_length=line_length, fast=fast, write_back=write_back, mode=mode\n            ):\n                changed = Changed.YES\n        else:\n            cache: Cache = {}\n            if write_back != WriteBack.DIFF:\n                cache = read_cache(line_length, mode)\n                res_src = src.resolve()\n                if res_src in cache and cache[res_src] == get_cache_info(res_src):\n                    changed = Changed.CACHED\n            if changed is not Changed.CACHED and format_file_in_place(\n                src,\n                line_length=line_length,\n                fast=fast,\n                write_back=write_back,\n                mode=mode,\n            ):\n                changed = Changed.YES\n            if write_back == WriteBack.YES and changed is not Changed.NO:\n                write_cache(cache, [src], line_length, mode)\n        report.done(src, changed)\n    except Exception as exc:\n        report.failed(src, str(exc))",
                "async def schedule_formatting(\n    sources: List[Path],\n    line_length: int,\n    fast: bool,\n    write_back: WriteBack,\n    mode: FileMode,\n    report: \"Report\",\n    loop: BaseEventLoop,\n    executor: Executor,\n) -> None:\n    \"\"\"Run formatting of `sources` in parallel using the provided `executor`.\n\n    (Use ProcessPoolExecutors for actual parallelism.)\n\n    `line_length`, `write_back`, `fast`, and `pyi` options are passed to\n    :func:`format_file_in_place`.\n    \"\"\"\n    cache: Cache = {}\n    if write_back != WriteBack.DIFF:\n        cache = read_cache(line_length, mode)\n        sources, cached = filter_cached(cache, sources)\n        for src in cached:\n            report.done(src, Changed.CACHED)\n    cancelled = []\n    formatted = []\n    if sources:\n        lock = None\n        if write_back == WriteBack.DIFF:\n            # For diff output, we need locks to ensure we don't interleave output\n            # from different processes.\n            manager = Manager()\n            lock = manager.Lock()\n        tasks = {\n            loop.run_in_executor(\n                executor,\n                format_file_in_place,\n                src,\n                line_length,\n                fast,\n                write_back,\n                mode,\n                lock,\n            ): src\n            for src in sorted(sources)\n        }\n        pending: Iterable[asyncio.Task] = tasks.keys()\n        try:\n            loop.add_signal_handler(signal.SIGINT, cancel, pending)\n            loop.add_signal_handler(signal.SIGTERM, cancel, pending)\n        except NotImplementedError:\n            # There are no good alternatives for these on Windows\n            pass\n        while pending:\n            done, _ = await asyncio.wait(pending, return_when=asyncio.FIRST_COMPLETED)\n            for task in done:\n                src = tasks.pop(task)\n                if task.cancelled():\n                    cancelled.append(task)\n                elif task.exception():\n                    report.failed(src, str(task.exception()))\n                else:\n                    formatted.append(src)\n                    report.done(src, Changed.YES if task.result() else Changed.NO)\n    if cancelled:\n        await asyncio.gather(*cancelled, loop=loop, return_exceptions=True)\n    if write_back == WriteBack.YES and formatted:\n        write_cache(cache, formatted, line_length, mode)",
                "def format_file_in_place(\n    src: Path,\n    line_length: int,\n    fast: bool,\n    write_back: WriteBack = WriteBack.NO,\n    mode: FileMode = FileMode.AUTO_DETECT,\n    lock: Any = None,  # multiprocessing.Manager().Lock() is some crazy proxy\n) -> bool:\n    \"\"\"Format file under `src` path. Return True if changed.\n\n    If `write_back` is True, write reformatted code back to stdout.\n    `line_length` and `fast` options are passed to :func:`format_file_contents`.\n    \"\"\"\n    if src.suffix == \".pyi\":\n        mode |= FileMode.PYI\n    with tokenize.open(src) as src_buffer:\n        src_contents = src_buffer.read()\n    try:\n        dst_contents = format_file_contents(\n            src_contents, line_length=line_length, fast=fast, mode=mode\n        )\n    except NothingChanged:\n        return False\n\n    if write_back == write_back.YES:\n        with open(src, \"w\", encoding=src_buffer.encoding) as f:\n            f.write(dst_contents)\n    elif write_back == write_back.DIFF:\n        src_name = f\"{src}  (original)\"\n        dst_name = f\"{src}  (formatted)\"\n        diff_contents = diff(src_contents, dst_contents, src_name, dst_name)\n        if lock:\n            lock.acquire()\n        try:\n            sys.stdout.write(diff_contents)\n        finally:\n            if lock:\n                lock.release()\n    return True",
                "def format_stdin_to_stdout(\n    line_length: int,\n    fast: bool,\n    write_back: WriteBack = WriteBack.NO,\n    mode: FileMode = FileMode.AUTO_DETECT,\n) -> bool:\n    \"\"\"Format file on stdin. Return True if changed.\n\n    If `write_back` is True, write reformatted code back to stdout.\n    `line_length`, `fast`, `is_pyi`, and `force_py36` arguments are passed to\n    :func:`format_file_contents`.\n    \"\"\"\n    src = sys.stdin.read()\n    dst = src\n    try:\n        dst = format_file_contents(src, line_length=line_length, fast=fast, mode=mode)\n        return True\n\n    except NothingChanged:\n        return False\n\n    finally:\n        if write_back == WriteBack.YES:\n            sys.stdout.write(dst)\n        elif write_back == WriteBack.DIFF:\n            src_name = \"<stdin>  (original)\"\n            dst_name = \"<stdin>  (formatted)\"\n            sys.stdout.write(diff(src, dst, src_name, dst_name))",
                "def format_file_contents(\n    src_contents: str,\n    *,\n    line_length: int,\n    fast: bool,\n    mode: FileMode = FileMode.AUTO_DETECT,\n) -> FileContent:\n    \"\"\"Reformat contents a file and return new contents.\n\n    If `fast` is False, additionally confirm that the reformatted code is\n    valid by calling :func:`assert_equivalent` and :func:`assert_stable` on it.\n    `line_length` is passed to :func:`format_str`.\n    \"\"\"\n    if src_contents.strip() == \"\":\n        raise NothingChanged\n\n    dst_contents = format_str(src_contents, line_length=line_length, mode=mode)\n    if src_contents == dst_contents:\n        raise NothingChanged\n\n    if not fast:\n        assert_equivalent(src_contents, dst_contents)\n        assert_stable(src_contents, dst_contents, line_length=line_length, mode=mode)\n    return dst_contents",
                "def format_str(\n    src_contents: str, line_length: int, *, mode: FileMode = FileMode.AUTO_DETECT\n) -> FileContent:\n    \"\"\"Reformat a string and return new contents.\n\n    `line_length` determines how many characters per line are allowed.\n    \"\"\"\n    src_node = lib2to3_parse(src_contents)\n    dst_contents = \"\"\n    future_imports = get_future_imports(src_node)\n    is_pyi = bool(mode & FileMode.PYI)\n    py36 = bool(mode & FileMode.PYTHON36) or is_python36(src_node)\n    normalize_strings = not bool(mode & FileMode.NO_STRING_NORMALIZATION)\n    lines = LineGenerator(\n        remove_u_prefix=py36 or \"unicode_literals\" in future_imports,\n        is_pyi=is_pyi,\n        normalize_strings=normalize_strings,\n    )\n    elt = EmptyLineTracker(is_pyi=is_pyi)\n    empty_line = Line()\n    after = 0\n    for current_line in lines.visit(src_node):\n        for _ in range(after):\n            dst_contents += str(empty_line)\n        before, after = elt.maybe_empty_lines(current_line)\n        for _ in range(before):\n            dst_contents += str(empty_line)\n        for line in split_line(current_line, line_length=line_length, py36=py36):\n            dst_contents += str(line)\n    return dst_contents",
                "def lib2to3_parse(src_txt: str) -> Node:\n    \"\"\"Given a string with source, return the lib2to3 Node.\"\"\"\n    grammar = pygram.python_grammar_no_print_statement\n    if src_txt[-1] != \"\\n\":\n        nl = \"\\r\\n\" if \"\\r\\n\" in src_txt[:1024] else \"\\n\"\n        src_txt += nl\n    for grammar in GRAMMARS:\n        drv = driver.Driver(grammar, pytree.convert)\n        try:\n            result = drv.parse_string(src_txt, True)\n            break\n\n        except ParseError as pe:\n            lineno, column = pe.context[1]\n            lines = src_txt.splitlines()\n            try:\n                faulty_line = lines[lineno - 1]\n            except IndexError:\n                faulty_line = \"<line number missing in source>\"\n            exc = ValueError(f\"Cannot parse: {lineno}:{column}: {faulty_line}\")\n    else:\n        raise exc from None\n\n    if isinstance(result, Leaf):\n        result = Node(syms.file_input, [result])\n    return result",
                "def lib2to3_unparse(node: Node) -> str:\n    \"\"\"Given a lib2to3 node, return its string representation.\"\"\"\n    code = str(node)\n    return code",
                "def whitespace(leaf: Leaf, *, complex_subscript: bool) -> str:  # noqa C901\n    \"\"\"Return whitespace prefix if needed for the given `leaf`.\n\n    `complex_subscript` signals whether the given leaf is part of a subscription\n    which has non-trivial arguments, like arithmetic expressions or function calls.\n    \"\"\"\n    NO = \"\"\n    SPACE = \" \"\n    DOUBLESPACE = \"  \"\n    t = leaf.type\n    p = leaf.parent\n    v = leaf.value\n    if t in ALWAYS_NO_SPACE:\n        return NO\n\n    if t == token.COMMENT:\n        return DOUBLESPACE\n\n    assert p is not None, f\"INTERNAL ERROR: hand-made leaf without parent: {leaf!r}\"\n    if t == token.COLON and p.type not in {\n        syms.subscript,\n        syms.subscriptlist,\n        syms.sliceop,\n    }:\n        return NO\n\n    prev = leaf.prev_sibling\n    if not prev:\n        prevp = preceding_leaf(p)\n        if not prevp or prevp.type in OPENING_BRACKETS:\n            return NO\n\n        if t == token.COLON:\n            if prevp.type == token.COLON:\n                return NO\n\n            elif prevp.type != token.COMMA and not complex_subscript:\n                return NO\n\n            return SPACE\n\n        if prevp.type == token.EQUAL:\n            if prevp.parent:\n                if prevp.parent.type in {\n                    syms.arglist,\n                    syms.argument,\n                    syms.parameters,\n                    syms.varargslist,\n                }:\n                    return NO\n\n                elif prevp.parent.type == syms.typedargslist:\n                    # A bit hacky: if the equal sign has whitespace, it means we\n                    # previously found it's a typed argument.  So, we're using\n                    # that, too.\n                    return prevp.prefix\n\n        elif prevp.type in STARS:\n            if is_vararg(prevp, within=VARARGS_PARENTS | UNPACKING_PARENTS):\n                return NO\n\n        elif prevp.type == token.COLON:\n            if prevp.parent and prevp.parent.type in {syms.subscript, syms.sliceop}:\n                return SPACE if complex_subscript else NO\n\n        elif (\n            prevp.parent\n            and prevp.parent.type == syms.factor\n            and prevp.type in MATH_OPERATORS\n        ):\n            return NO\n\n        elif (\n            prevp.type == token.RIGHTSHIFT\n            and prevp.parent\n            and prevp.parent.type == syms.shift_expr\n            and prevp.prev_sibling\n            and prevp.prev_sibling.type == token.NAME\n            and prevp.prev_sibling.value == \"print\"  # type: ignore\n        ):\n            # Python 2 print chevron\n            return NO\n\n    elif prev.type in OPENING_BRACKETS:\n        return NO\n\n    if p.type in {syms.parameters, syms.arglist}:\n        # untyped function signatures or calls\n        if not prev or prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.varargslist:\n        # lambdas\n        if prev and prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.typedargslist:\n        # typed function signatures\n        if not prev:\n            return NO\n\n        if t == token.EQUAL:\n            if prev.type != syms.tname:\n                return NO\n\n        elif prev.type == token.EQUAL:\n            # A bit hacky: if the equal sign has whitespace, it means we\n            # previously found it's a typed argument.  So, we're using that, too.\n            return prev.prefix\n\n        elif prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.tname:\n        # type names\n        if not prev:\n            prevp = preceding_leaf(p)\n            if not prevp or prevp.type != token.COMMA:\n                return NO\n\n    elif p.type == syms.trailer:\n        # attributes and calls\n        if t == token.LPAR or t == token.RPAR:\n            return NO\n\n        if not prev:\n            if t == token.DOT:\n                prevp = preceding_leaf(p)\n                if not prevp or prevp.type != token.NUMBER:\n                    return NO\n\n            elif t == token.LSQB:\n                return NO\n\n        elif prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.argument:\n        # single argument\n        if t == token.EQUAL:\n            return NO\n\n        if not prev:\n            prevp = preceding_leaf(p)\n            if not prevp or prevp.type == token.LPAR:\n                return NO\n\n        elif prev.type in {token.EQUAL} | STARS:\n            return NO\n\n    elif p.type == syms.decorator:\n        # decorators\n        return NO\n\n    elif p.type == syms.dotted_name:\n        if prev:\n            return NO\n\n        prevp = preceding_leaf(p)\n        if not prevp or prevp.type == token.AT or prevp.type == token.DOT:\n            return NO\n\n    elif p.type == syms.classdef:\n        if t == token.LPAR:\n            return NO\n\n        if prev and prev.type == token.LPAR:\n            return NO\n\n    elif p.type in {syms.subscript, syms.sliceop}:\n        # indexing\n        if not prev:\n            assert p.parent is not None, \"subscripts are always parented\"\n            if p.parent.type == syms.subscriptlist:\n                return SPACE\n\n            return NO\n\n        elif not complex_subscript:\n            return NO\n\n    elif p.type == syms.atom:\n        if prev and t == token.DOT:\n            # dots, but not the first one.\n            return NO\n\n    elif p.type == syms.dictsetmaker:\n        # dict unpacking\n        if prev and prev.type == token.DOUBLESTAR:\n            return NO\n\n    elif p.type in {syms.factor, syms.star_expr}:\n        # unary ops\n        if not prev:\n            prevp = preceding_leaf(p)\n            if not prevp or prevp.type in OPENING_BRACKETS:\n                return NO\n\n            prevp_parent = prevp.parent\n            assert prevp_parent is not None\n            if prevp.type == token.COLON and prevp_parent.type in {\n                syms.subscript,\n                syms.sliceop,\n            }:\n                return NO\n\n            elif prevp.type == token.EQUAL and prevp_parent.type == syms.argument:\n                return NO\n\n        elif t == token.NAME or t == token.NUMBER:\n            return NO\n\n    elif p.type == syms.import_from:\n        if t == token.DOT:\n            if prev and prev.type == token.DOT:\n                return NO\n\n        elif t == token.NAME:\n            if v == \"import\":\n                return SPACE\n\n            if prev and prev.type == token.DOT:\n                return NO\n\n    elif p.type == syms.sliceop:\n        return NO\n\n    return SPACE",
                "def preceding_leaf(node: Optional[LN]) -> Optional[Leaf]:\n    \"\"\"Return the first leaf that precedes `node`, if any.\"\"\"\n    while node:\n        res = node.prev_sibling\n        if res:\n            if isinstance(res, Leaf):\n                return res\n\n            try:\n                return list(res.leaves())[-1]\n\n            except IndexError:\n                return None\n\n        node = node.parent\n    return None",
                "def child_towards(ancestor: Node, descendant: LN) -> Optional[LN]:\n    \"\"\"Return the child of `ancestor` that contains `descendant`.\"\"\"\n    node: Optional[LN] = descendant\n    while node and node.parent != ancestor:\n        node = node.parent\n    return node",
                "def is_split_after_delimiter(leaf: Leaf, previous: Leaf = None) -> int:\n    \"\"\"Return the priority of the `leaf` delimiter, given a line break after it.\n\n    The delimiter priorities returned here are from those delimiters that would\n    cause a line break after themselves.\n\n    Higher numbers are higher priority.\n    \"\"\"\n    if leaf.type == token.COMMA:\n        return COMMA_PRIORITY\n\n    return 0",
                "def is_split_before_delimiter(leaf: Leaf, previous: Leaf = None) -> int:\n    \"\"\"Return the priority of the `leaf` delimiter, given a line before after it.\n\n    The delimiter priorities returned here are from those delimiters that would\n    cause a line break before themselves.\n\n    Higher numbers are higher priority.\n    \"\"\"\n    if is_vararg(leaf, within=VARARGS_PARENTS | UNPACKING_PARENTS):\n        # * and ** might also be MATH_OPERATORS but in this case they are not.\n        # Don't treat them as a delimiter.\n        return 0\n\n    if (\n        leaf.type == token.DOT\n        and leaf.parent\n        and leaf.parent.type not in {syms.import_from, syms.dotted_name}\n        and (previous is None or previous.type in CLOSING_BRACKETS)\n    ):\n        return DOT_PRIORITY\n\n    if (\n        leaf.type in MATH_OPERATORS\n        and leaf.parent\n        and leaf.parent.type not in {syms.factor, syms.star_expr}\n    ):\n        return MATH_PRIORITIES[leaf.type]\n\n    if leaf.type in COMPARATORS:\n        return COMPARATOR_PRIORITY\n\n    if (\n        leaf.type == token.STRING\n        and previous is not None\n        and previous.type == token.STRING\n    ):\n        return STRING_PRIORITY\n\n    if leaf.type != token.NAME:\n        return 0\n\n    if (\n        leaf.value == \"for\"\n        and leaf.parent\n        and leaf.parent.type in {syms.comp_for, syms.old_comp_for}\n    ):\n        return COMPREHENSION_PRIORITY\n\n    if (\n        leaf.value == \"if\"\n        and leaf.parent\n        and leaf.parent.type in {syms.comp_if, syms.old_comp_if}\n    ):\n        return COMPREHENSION_PRIORITY\n\n    if leaf.value in {\"if\", \"else\"} and leaf.parent and leaf.parent.type == syms.test:\n        return TERNARY_PRIORITY\n\n    if leaf.value == \"is\":\n        return COMPARATOR_PRIORITY\n\n    if (\n        leaf.value == \"in\"\n        and leaf.parent\n        and leaf.parent.type in {syms.comp_op, syms.comparison}\n        and not (\n            previous is not None\n            and previous.type == token.NAME\n            and previous.value == \"not\"\n        )\n    ):\n        return COMPARATOR_PRIORITY\n\n    if (\n        leaf.value == \"not\"\n        and leaf.parent\n        and leaf.parent.type == syms.comp_op\n        and not (\n            previous is not None\n            and previous.type == token.NAME\n            and previous.value == \"is\"\n        )\n    ):\n        return COMPARATOR_PRIORITY\n\n    if leaf.value in LOGIC_OPERATORS and leaf.parent:\n        return LOGIC_PRIORITY\n\n    return 0",
                "def generate_comments(leaf: LN) -> Iterator[Leaf]:\n    \"\"\"Clean the prefix of the `leaf` and generate comments from it, if any.\n\n    Comments in lib2to3 are shoved into the whitespace prefix.  This happens\n    in `pgen2/driver.py:Driver.parse_tokens()`.  This was a brilliant implementation\n    move because it does away with modifying the grammar to include all the\n    possible places in which comments can be placed.\n\n    The sad consequence for us though is that comments don't \"belong\" anywhere.\n    This is why this function generates simple parentless Leaf objects for\n    comments.  We simply don't know what the correct parent should be.\n\n    No matter though, we can live without this.  We really only need to\n    differentiate between inline and standalone comments.  The latter don't\n    share the line with any code.\n\n    Inline comments are emitted as regular token.COMMENT leaves.  Standalone\n    are emitted with a fake STANDALONE_COMMENT token identifier.\n    \"\"\"\n    p = leaf.prefix\n    if not p:\n        return\n\n    if \"#\" not in p:\n        return\n\n    consumed = 0\n    nlines = 0\n    for index, line in enumerate(p.split(\"\\n\")):\n        consumed += len(line) + 1  # adding the length of the split '\\n'\n        line = line.lstrip()\n        if not line:\n            nlines += 1\n        if not line.startswith(\"#\"):\n            continue\n\n        if index == 0 and leaf.type != token.ENDMARKER:\n            comment_type = token.COMMENT  # simple trailing comment\n        else:\n            comment_type = STANDALONE_COMMENT\n        comment = make_comment(line)\n        yield Leaf(comment_type, comment, prefix=\"\\n\" * nlines)\n\n        if comment in {\"# fmt: on\", \"# yapf: enable\"}:\n            raise FormatOn(consumed)\n\n        if comment in {\"# fmt: off\", \"# yapf: disable\"}:\n            if comment_type == STANDALONE_COMMENT:\n                raise FormatOff(consumed)\n\n            prev = preceding_leaf(leaf)\n            if not prev or prev.type in WHITESPACE:  # standalone comment in disguise\n                raise FormatOff(consumed)\n\n        nlines = 0",
                "def make_comment(content: str) -> str:\n    \"\"\"Return a consistently formatted comment from the given `content` string.\n\n    All comments (except for \"##\", \"#!\", \"#:\") should have a single space between\n    the hash sign and the content.\n\n    If `content` didn't start with a hash sign, one is provided.\n    \"\"\"\n    content = content.rstrip()\n    if not content:\n        return \"#\"\n\n    if content[0] == \"#\":\n        content = content[1:]\n    if content and content[0] not in \" !:#\":\n        content = \" \" + content\n    return \"#\" + content",
                "def split_line(\n    line: Line, line_length: int, inner: bool = False, py36: bool = False\n) -> Iterator[Line]:\n    \"\"\"Split a `line` into potentially many lines.\n\n    They should fit in the allotted `line_length` but might not be able to.\n    `inner` signifies that there were a pair of brackets somewhere around the\n    current `line`, possibly transitively. This means we can fallback to splitting\n    by delimiters if the LHS/RHS don't yield any results.\n\n    If `py36` is True, splitting may generate syntax that is only compatible\n    with Python 3.6 and later.\n    \"\"\"\n    if isinstance(line, UnformattedLines) or line.is_comment:\n        yield line\n        return\n\n    line_str = str(line).strip(\"\\n\")\n    if not line.should_explode and is_line_short_enough(\n        line, line_length=line_length, line_str=line_str\n    ):\n        yield line\n        return\n\n    split_funcs: List[SplitFunc]\n    if line.is_def:\n        split_funcs = [left_hand_split]\n    else:\n\n        def rhs(line: Line, py36: bool = False) -> Iterator[Line]:\n            for omit in generate_trailers_to_omit(line, line_length):\n                lines = list(right_hand_split(line, line_length, py36, omit=omit))\n                if is_line_short_enough(lines[0], line_length=line_length):\n                    yield from lines\n                    return\n\n            # All splits failed, best effort split with no omits.\n            # This mostly happens to multiline strings that are by definition\n            # reported as not fitting a single line.\n            yield from right_hand_split(line, py36)\n\n        if line.inside_brackets:\n            split_funcs = [delimiter_split, standalone_comment_split, rhs]\n        else:\n            split_funcs = [rhs]\n    for split_func in split_funcs:\n        # We are accumulating lines in `result` because we might want to abort\n        # mission and return the original line in the end, or attempt a different\n        # split altogether.\n        result: List[Line] = []\n        try:\n            for l in split_func(line, py36):\n                if str(l).strip(\"\\n\") == line_str:\n                    raise CannotSplit(\"Split function returned an unchanged result\")\n\n                result.extend(\n                    split_line(l, line_length=line_length, inner=True, py36=py36)\n                )\n        except CannotSplit as cs:\n            continue\n\n        else:\n            yield from result\n            break\n\n    else:\n        yield line",
                "def left_hand_split(line: Line, py36: bool = False) -> Iterator[Line]:\n    \"\"\"Split line into many lines, starting with the first matching bracket pair.\n\n    Note: this usually looks weird, only use this for function definitions.\n    Prefer RHS otherwise.  This is why this function is not symmetrical with\n    :func:`right_hand_split` which also handles optional parentheses.\n    \"\"\"\n    head = Line(depth=line.depth)\n    body = Line(depth=line.depth + 1, inside_brackets=True)\n    tail = Line(depth=line.depth)\n    tail_leaves: List[Leaf] = []\n    body_leaves: List[Leaf] = []\n    head_leaves: List[Leaf] = []\n    current_leaves = head_leaves\n    matching_bracket = None\n    for leaf in line.leaves:\n        if (\n            current_leaves is body_leaves\n            and leaf.type in CLOSING_BRACKETS\n            and leaf.opening_bracket is matching_bracket\n        ):\n            current_leaves = tail_leaves if body_leaves else head_leaves\n        current_leaves.append(leaf)\n        if current_leaves is head_leaves:\n            if leaf.type in OPENING_BRACKETS:\n                matching_bracket = leaf\n                current_leaves = body_leaves\n    # Since body is a new indent level, remove spurious leading whitespace.\n    if body_leaves:\n        normalize_prefix(body_leaves[0], inside_brackets=True)\n    # Build the new lines.\n    for result, leaves in (head, head_leaves), (body, body_leaves), (tail, tail_leaves):\n        for leaf in leaves:\n            result.append(leaf, preformatted=True)\n            for comment_after in line.comments_after(leaf):\n                result.append(comment_after, preformatted=True)\n    bracket_split_succeeded_or_raise(head, body, tail)\n    for result in (head, body, tail):\n        if result:\n            yield result",
                "def right_hand_split(\n    line: Line, line_length: int, py36: bool = False, omit: Collection[LeafID] = ()\n) -> Iterator[Line]:\n    \"\"\"Split line into many lines, starting with the last matching bracket pair.\n\n    If the split was by optional parentheses, attempt splitting without them, too.\n    `omit` is a collection of closing bracket IDs that shouldn't be considered for\n    this split.\n\n    Note: running this function modifies `bracket_depth` on the leaves of `line`.\n    \"\"\"\n    head = Line(depth=line.depth)\n    body = Line(depth=line.depth + 1, inside_brackets=True)\n    tail = Line(depth=line.depth)\n    tail_leaves: List[Leaf] = []\n    body_leaves: List[Leaf] = []\n    head_leaves: List[Leaf] = []\n    current_leaves = tail_leaves\n    opening_bracket = None\n    closing_bracket = None\n    for leaf in reversed(line.leaves):\n        if current_leaves is body_leaves:\n            if leaf is opening_bracket:\n                current_leaves = head_leaves if body_leaves else tail_leaves\n        current_leaves.append(leaf)\n        if current_leaves is tail_leaves:\n            if leaf.type in CLOSING_BRACKETS and id(leaf) not in omit:\n                opening_bracket = leaf.opening_bracket\n                closing_bracket = leaf\n                current_leaves = body_leaves\n    tail_leaves.reverse()\n    body_leaves.reverse()\n    head_leaves.reverse()\n    # Since body is a new indent level, remove spurious leading whitespace.\n    if body_leaves:\n        normalize_prefix(body_leaves[0], inside_brackets=True)\n    if not head_leaves:\n        # No `head` means the split failed. Either `tail` has all content or\n        # the matching `opening_bracket` wasn't available on `line` anymore.\n        raise CannotSplit(\"No brackets found\")\n\n    # Build the new lines.\n    for result, leaves in (head, head_leaves), (body, body_leaves), (tail, tail_leaves):\n        for leaf in leaves:\n            result.append(leaf, preformatted=True)\n            for comment_after in line.comments_after(leaf):\n                result.append(comment_after, preformatted=True)\n    bracket_split_succeeded_or_raise(head, body, tail)\n    assert opening_bracket and closing_bracket\n    if (\n        # the opening bracket is an optional paren\n        opening_bracket.type == token.LPAR\n        and not opening_bracket.value\n        # the closing bracket is an optional paren\n        and closing_bracket.type == token.RPAR\n        and not closing_bracket.value\n        # there are no standalone comments in the body\n        and not line.contains_standalone_comments(0)\n        # and it's not an import (optional parens are the only thing we can split\n        # on in this case; attempting a split without them is a waste of time)\n        and not line.is_import\n    ):\n        omit = {id(closing_bracket), *omit}\n        if can_omit_invisible_parens(body, line_length):\n            try:\n                yield from right_hand_split(line, line_length, py36=py36, omit=omit)\n                return\n            except CannotSplit:\n                pass\n\n    ensure_visible(opening_bracket)\n    ensure_visible(closing_bracket)\n    body.should_explode = should_explode(body, opening_bracket)\n    for result in (head, body, tail):\n        if result:\n            yield result",
                "def bracket_split_succeeded_or_raise(head: Line, body: Line, tail: Line) -> None:\n    \"\"\"Raise :exc:`CannotSplit` if the last left- or right-hand split failed.\n\n    Do nothing otherwise.\n\n    A left- or right-hand split is based on a pair of brackets. Content before\n    (and including) the opening bracket is left on one line, content inside the\n    brackets is put on a separate line, and finally content starting with and\n    following the closing bracket is put on a separate line.\n\n    Those are called `head`, `body`, and `tail`, respectively. If the split\n    produced the same line (all content in `head`) or ended up with an empty `body`\n    and the `tail` is just the closing bracket, then it's considered failed.\n    \"\"\"\n    tail_len = len(str(tail).strip())\n    if not body:\n        if tail_len == 0:\n            raise CannotSplit(\"Splitting brackets produced the same line\")\n\n        elif tail_len < 3:\n            raise CannotSplit(\n                f\"Splitting brackets on an empty body to save \"\n                f\"{tail_len} characters is not worth it\"\n            )",
                "def dont_increase_indentation(split_func: SplitFunc) -> SplitFunc:\n    \"\"\"Normalize prefix of the first leaf in every line returned by `split_func`.\n\n    This is a decorator over relevant split functions.\n    \"\"\"\n\n    @wraps(split_func)\n    def split_wrapper(line: Line, py36: bool = False) -> Iterator[Line]:\n        for l in split_func(line, py36):\n            normalize_prefix(l.leaves[0], inside_brackets=True)\n            yield l\n\n    return split_wrapper",
                "@dont_increase_indentation\ndef delimiter_split(line: Line, py36: bool = False) -> Iterator[Line]:\n    \"\"\"Split according to delimiters of the highest priority.\n\n    If `py36` is True, the split will add trailing commas also in function\n    signatures that contain `*` and `**`.\n    \"\"\"\n    try:\n        last_leaf = line.leaves[-1]\n    except IndexError:\n        raise CannotSplit(\"Line empty\")\n\n    bt = line.bracket_tracker\n    try:\n        delimiter_priority = bt.max_delimiter_priority(exclude={id(last_leaf)})\n    except ValueError:\n        raise CannotSplit(\"No delimiters found\")\n\n    if delimiter_priority == DOT_PRIORITY:\n        if bt.delimiter_count_with_priority(delimiter_priority) == 1:\n            raise CannotSplit(\"Splitting a single attribute from its owner looks wrong\")\n\n    current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n    lowest_depth = sys.maxsize\n    trailing_comma_safe = True\n\n    def append_to_line(leaf: Leaf) -> Iterator[Line]:\n        \"\"\"Append `leaf` to current line or to new line if appending impossible.\"\"\"\n        nonlocal current_line\n        try:\n            current_line.append_safe(leaf, preformatted=True)\n        except ValueError as ve:\n            yield current_line\n\n            current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n            current_line.append(leaf)\n\n    for index, leaf in enumerate(line.leaves):\n        yield from append_to_line(leaf)\n\n        for comment_after in line.comments_after(leaf, index):\n            yield from append_to_line(comment_after)\n\n        lowest_depth = min(lowest_depth, leaf.bracket_depth)\n        if leaf.bracket_depth == lowest_depth and is_vararg(\n            leaf, within=VARARGS_PARENTS\n        ):\n            trailing_comma_safe = trailing_comma_safe and py36\n        leaf_priority = bt.delimiters.get(id(leaf))\n        if leaf_priority == delimiter_priority:\n            yield current_line\n\n            current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n    if current_line:\n        if (\n            trailing_comma_safe\n            and delimiter_priority == COMMA_PRIORITY\n            and current_line.leaves[-1].type != token.COMMA\n            and current_line.leaves[-1].type != STANDALONE_COMMENT\n        ):\n            current_line.append(Leaf(token.COMMA, \",\"))\n        yield current_line",
                "@dont_increase_indentation\ndef standalone_comment_split(line: Line, py36: bool = False) -> Iterator[Line]:\n    \"\"\"Split standalone comments from the rest of the line.\"\"\"\n    if not line.contains_standalone_comments(0):\n        raise CannotSplit(\"Line does not have any standalone comments\")\n\n    current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n\n    def append_to_line(leaf: Leaf) -> Iterator[Line]:\n        \"\"\"Append `leaf` to current line or to new line if appending impossible.\"\"\"\n        nonlocal current_line\n        try:\n            current_line.append_safe(leaf, preformatted=True)\n        except ValueError as ve:\n            yield current_line\n\n            current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n            current_line.append(leaf)\n\n    for index, leaf in enumerate(line.leaves):\n        yield from append_to_line(leaf)\n\n        for comment_after in line.comments_after(leaf, index):\n            yield from append_to_line(comment_after)\n\n    if current_line:\n        yield current_line",
                "def is_import(leaf: Leaf) -> bool:\n    \"\"\"Return True if the given leaf starts an import statement.\"\"\"\n    p = leaf.parent\n    t = leaf.type\n    v = leaf.value\n    return bool(\n        t == token.NAME\n        and (\n            (v == \"import\" and p and p.type == syms.import_name)\n            or (v == \"from\" and p and p.type == syms.import_from)\n        )\n    )",
                "def normalize_prefix(leaf: Leaf, *, inside_brackets: bool) -> None:\n    \"\"\"Leave existing extra newlines if not `inside_brackets`. Remove everything\n    else.\n\n    Note: don't use backslashes for formatting or you'll lose your voting rights.\n    \"\"\"\n    if not inside_brackets:\n        spl = leaf.prefix.split(\"#\")\n        if \"\\\\\" not in spl[0]:\n            nl_count = spl[-1].count(\"\\n\")\n            if len(spl) > 1:\n                nl_count -= 1\n            leaf.prefix = \"\\n\" * nl_count\n            return\n\n    leaf.prefix = \"\"",
                "def normalize_string_prefix(leaf: Leaf, remove_u_prefix: bool = False) -> None:\n    \"\"\"Make all string prefixes lowercase.\n\n    If remove_u_prefix is given, also removes any u prefix from the string.\n\n    Note: Mutates its argument.\n    \"\"\"\n    match = re.match(r\"^([furbFURB]*)(.*)$\", leaf.value, re.DOTALL)\n    assert match is not None, f\"failed to match string {leaf.value!r}\"\n    orig_prefix = match.group(1)\n    new_prefix = orig_prefix.lower()\n    if remove_u_prefix:\n        new_prefix = new_prefix.replace(\"u\", \"\")\n    leaf.value = f\"{new_prefix}{match.group(2)}\"",
                "def normalize_string_quotes(leaf: Leaf) -> None:\n    \"\"\"Prefer double quotes but only if it doesn't cause more escaping.\n\n    Adds or removes backslashes as appropriate. Doesn't parse and fix\n    strings nested in f-strings (yet).\n\n    Note: Mutates its argument.\n    \"\"\"\n    value = leaf.value.lstrip(\"furbFURB\")\n    if value[:3] == '\"\"\"':\n        return\n\n    elif value[:3] == \"'''\":\n        orig_quote = \"'''\"\n        new_quote = '\"\"\"'\n    elif value[0] == '\"':\n        orig_quote = '\"'\n        new_quote = \"'\"\n    else:\n        orig_quote = \"'\"\n        new_quote = '\"'\n    first_quote_pos = leaf.value.find(orig_quote)\n    if first_quote_pos == -1:\n        return  # There's an internal error\n\n    prefix = leaf.value[:first_quote_pos]\n    unescaped_new_quote = re.compile(rf\"(([^\\\\]|^)(\\\\\\\\)*){new_quote}\")\n    escaped_new_quote = re.compile(rf\"([^\\\\]|^)\\\\(\\\\\\\\)*{new_quote}\")\n    escaped_orig_quote = re.compile(rf\"([^\\\\]|^)\\\\(\\\\\\\\)*{orig_quote}\")\n    body = leaf.value[first_quote_pos + len(orig_quote) : -len(orig_quote)]\n    if \"r\" in prefix.casefold():\n        if unescaped_new_quote.search(body):\n            # There's at least one unescaped new_quote in this raw string\n            # so converting is impossible\n            return\n\n        # Do not introduce or remove backslashes in raw strings\n        new_body = body\n    else:\n        # remove unnecessary quotes\n        new_body = sub_twice(escaped_new_quote, rf\"\\1\\2{new_quote}\", body)\n        if body != new_body:\n            # Consider the string without unnecessary quotes as the original\n            body = new_body\n            leaf.value = f\"{prefix}{orig_quote}{body}{orig_quote}\"\n        new_body = sub_twice(escaped_orig_quote, rf\"\\1\\2{orig_quote}\", new_body)\n        new_body = sub_twice(unescaped_new_quote, rf\"\\1\\\\{new_quote}\", new_body)\n    if new_quote == '\"\"\"' and new_body[-1] == '\"':\n        # edge case:\n        new_body = new_body[:-1] + '\\\\\"'\n    orig_escape_count = body.count(\"\\\\\")\n    new_escape_count = new_body.count(\"\\\\\")\n    if new_escape_count > orig_escape_count:\n        return  # Do not introduce more escaping\n\n    if new_escape_count == orig_escape_count and orig_quote == '\"':\n        return  # Prefer double quotes\n\n    leaf.value = f\"{prefix}{new_quote}{new_body}{new_quote}\"",
                "def normalize_invisible_parens(node: Node, parens_after: Set[str]) -> None:\n    \"\"\"Make existing optional parentheses invisible or create new ones.\n\n    `parens_after` is a set of string leaf values immeditely after which parens\n    should be put.\n\n    Standardizes on visible parentheses for single-element tuples, and keeps\n    existing visible parentheses for other tuples and generator expressions.\n    \"\"\"\n    try:\n        list(generate_comments(node))\n    except FormatOff:\n        return  # This `node` has a prefix with `# fmt: off`, don't mess with parens.\n\n    check_lpar = False\n    for index, child in enumerate(list(node.children)):\n        if check_lpar:\n            if child.type == syms.atom:\n                maybe_make_parens_invisible_in_atom(child)\n            elif is_one_tuple(child):\n                # wrap child in visible parentheses\n                lpar = Leaf(token.LPAR, \"(\")\n                rpar = Leaf(token.RPAR, \")\")\n                child.remove()\n                node.insert_child(index, Node(syms.atom, [lpar, child, rpar]))\n            elif node.type == syms.import_from:\n                # \"import from\" nodes store parentheses directly as part of\n                # the statement\n                if child.type == token.LPAR:\n                    # make parentheses invisible\n                    child.value = \"\"  # type: ignore\n                    node.children[-1].value = \"\"  # type: ignore\n                elif child.type != token.STAR:\n                    # insert invisible parentheses\n                    node.insert_child(index, Leaf(token.LPAR, \"\"))\n                    node.append_child(Leaf(token.RPAR, \"\"))\n                break\n\n            elif not (isinstance(child, Leaf) and is_multiline_string(child)):\n                # wrap child in invisible parentheses\n                lpar = Leaf(token.LPAR, \"\")\n                rpar = Leaf(token.RPAR, \"\")\n                index = child.remove() or 0\n                node.insert_child(index, Node(syms.atom, [lpar, child, rpar]))\n\n        check_lpar = isinstance(child, Leaf) and child.value in parens_after",
                "def maybe_make_parens_invisible_in_atom(node: LN) -> bool:\n    \"\"\"If it's safe, make the parens in the atom `node` invisible, recusively.\"\"\"\n    if (\n        node.type != syms.atom\n        or is_empty_tuple(node)\n        or is_one_tuple(node)\n        or is_yield(node)\n        or max_delimiter_priority_in_atom(node) >= COMMA_PRIORITY\n    ):\n        return False\n\n    first = node.children[0]\n    last = node.children[-1]\n    if first.type == token.LPAR and last.type == token.RPAR:\n        # make parentheses invisible\n        first.value = \"\"  # type: ignore\n        last.value = \"\"  # type: ignore\n        if len(node.children) > 1:\n            maybe_make_parens_invisible_in_atom(node.children[1])\n        return True\n\n    return False",
                "def is_empty_tuple(node: LN) -> bool:\n    \"\"\"Return True if `node` holds an empty tuple.\"\"\"\n    return (\n        node.type == syms.atom\n        and len(node.children) == 2\n        and node.children[0].type == token.LPAR\n        and node.children[1].type == token.RPAR\n    )",
                "def is_one_tuple(node: LN) -> bool:\n    \"\"\"Return True if `node` holds a tuple with one element, with or without parens.\"\"\"\n    if node.type == syms.atom:\n        if len(node.children) != 3:\n            return False\n\n        lpar, gexp, rpar = node.children\n        if not (\n            lpar.type == token.LPAR\n            and gexp.type == syms.testlist_gexp\n            and rpar.type == token.RPAR\n        ):\n            return False\n\n        return len(gexp.children) == 2 and gexp.children[1].type == token.COMMA\n\n    return (\n        node.type in IMPLICIT_TUPLE\n        and len(node.children) == 2\n        and node.children[1].type == token.COMMA\n    )",
                "def is_yield(node: LN) -> bool:\n    \"\"\"Return True if `node` holds a `yield` or `yield from` expression.\"\"\"\n    if node.type == syms.yield_expr:\n        return True\n\n    if node.type == token.NAME and node.value == \"yield\":  # type: ignore\n        return True\n\n    if node.type != syms.atom:\n        return False\n\n    if len(node.children) != 3:\n        return False\n\n    lpar, expr, rpar = node.children\n    if lpar.type == token.LPAR and rpar.type == token.RPAR:\n        return is_yield(expr)\n\n    return False",
                "def is_vararg(leaf: Leaf, within: Set[NodeType]) -> bool:\n    \"\"\"Return True if `leaf` is a star or double star in a vararg or kwarg.\n\n    If `within` includes VARARGS_PARENTS, this applies to function signatures.\n    If `within` includes UNPACKING_PARENTS, it applies to right hand-side\n    extended iterable unpacking (PEP 3132) and additional unpacking\n    generalizations (PEP 448).\n    \"\"\"\n    if leaf.type not in STARS or not leaf.parent:\n        return False\n\n    p = leaf.parent\n    if p.type == syms.star_expr:\n        # Star expressions are also used as assignment targets in extended\n        # iterable unpacking (PEP 3132).  See what its parent is instead.\n        if not p.parent:\n            return False\n\n        p = p.parent\n\n    return p.type in within",
                "def is_multiline_string(leaf: Leaf) -> bool:\n    \"\"\"Return True if `leaf` is a multiline string that actually spans many lines.\"\"\"\n    value = leaf.value.lstrip(\"furbFURB\")\n    return value[:3] in {'\"\"\"', \"'''\"} and \"\\n\" in value",
                "def is_stub_suite(node: Node) -> bool:\n    \"\"\"Return True if `node` is a suite with a stub body.\"\"\"\n    if (\n        len(node.children) != 4\n        or node.children[0].type != token.NEWLINE\n        or node.children[1].type != token.INDENT\n        or node.children[3].type != token.DEDENT\n    ):\n        return False\n\n    return is_stub_body(node.children[2])",
                "def is_stub_body(node: LN) -> bool:\n    \"\"\"Return True if `node` is a simple statement containing an ellipsis.\"\"\"\n    if not isinstance(node, Node) or node.type != syms.simple_stmt:\n        return False\n\n    if len(node.children) != 2:\n        return False\n\n    child = node.children[0]\n    return (\n        child.type == syms.atom\n        and len(child.children) == 3\n        and all(leaf == Leaf(token.DOT, \".\") for leaf in child.children)\n    )",
                "def max_delimiter_priority_in_atom(node: LN) -> int:\n    \"\"\"Return maximum delimiter priority inside `node`.\n\n    This is specific to atoms with contents contained in a pair of parentheses.\n    If `node` isn't an atom or there are no enclosing parentheses, returns 0.\n    \"\"\"\n    if node.type != syms.atom:\n        return 0\n\n    first = node.children[0]\n    last = node.children[-1]\n    if not (first.type == token.LPAR and last.type == token.RPAR):\n        return 0\n\n    bt = BracketTracker()\n    for c in node.children[1:-1]:\n        if isinstance(c, Leaf):\n            bt.mark(c)\n        else:\n            for leaf in c.leaves():\n                bt.mark(leaf)\n    try:\n        return bt.max_delimiter_priority()\n\n    except ValueError:\n        return 0",
                "def ensure_visible(leaf: Leaf) -> None:\n    \"\"\"Make sure parentheses are visible.\n\n    They could be invisible as part of some statements (see\n    :func:`normalize_invible_parens` and :func:`visit_import_from`).\n    \"\"\"\n    if leaf.type == token.LPAR:\n        leaf.value = \"(\"\n    elif leaf.type == token.RPAR:\n        leaf.value = \")\"",
                "def should_explode(line: Line, opening_bracket: Leaf) -> bool:\n    \"\"\"Should `line` immediately be split with `delimiter_split()` after RHS?\"\"\"\n    if not (\n        opening_bracket.parent\n        and opening_bracket.parent.type in {syms.atom, syms.import_from}\n        and opening_bracket.value in \"[{(\"\n    ):\n        return False\n\n    try:\n        last_leaf = line.leaves[-1]\n        exclude = {id(last_leaf)} if last_leaf.type == token.COMMA else set()\n        max_priority = line.bracket_tracker.max_delimiter_priority(exclude=exclude)\n    except (IndexError, ValueError):\n        return False\n\n    return max_priority == COMMA_PRIORITY",
                "def is_python36(node: Node) -> bool:\n    \"\"\"Return True if the current file is using Python 3.6+ features.\n\n    Currently looking for:\n    - f-strings; and\n    - trailing commas after * or ** in function signatures and calls.\n    \"\"\"\n    for n in node.pre_order():\n        if n.type == token.STRING:\n            value_head = n.value[:2]  # type: ignore\n            if value_head in {'f\"', 'F\"', \"f'\", \"F'\", \"rf\", \"fr\", \"RF\", \"FR\"}:\n                return True\n\n        elif (\n            n.type in {syms.typedargslist, syms.arglist}\n            and n.children\n            and n.children[-1].type == token.COMMA\n        ):\n            for ch in n.children:\n                if ch.type in STARS:\n                    return True\n\n                if ch.type == syms.argument:\n                    for argch in ch.children:\n                        if argch.type in STARS:\n                            return True\n\n    return False",
                "def generate_trailers_to_omit(line: Line, line_length: int) -> Iterator[Set[LeafID]]:\n    \"\"\"Generate sets of closing bracket IDs that should be omitted in a RHS.\n\n    Brackets can be omitted if the entire trailer up to and including\n    a preceding closing bracket fits in one line.\n\n    Yielded sets are cumulative (contain results of previous yields, too).  First\n    set is empty.\n    \"\"\"\n\n    omit: Set[LeafID] = set()\n    yield omit\n\n    length = 4 * line.depth\n    opening_bracket = None\n    closing_bracket = None\n    optional_brackets: Set[LeafID] = set()\n    inner_brackets: Set[LeafID] = set()\n    for index, leaf, leaf_length in enumerate_with_length(line, reversed=True):\n        length += leaf_length\n        if length > line_length:\n            break\n\n        has_inline_comment = leaf_length > len(leaf.value) + len(leaf.prefix)\n        if leaf.type == STANDALONE_COMMENT or has_inline_comment:\n            break\n\n        optional_brackets.discard(id(leaf))\n        if opening_bracket:\n            if leaf is opening_bracket:\n                opening_bracket = None\n            elif leaf.type in CLOSING_BRACKETS:\n                inner_brackets.add(id(leaf))\n        elif leaf.type in CLOSING_BRACKETS:\n            if not leaf.value:\n                optional_brackets.add(id(opening_bracket))\n                continue\n\n            if index > 0 and line.leaves[index - 1].type in OPENING_BRACKETS:\n                # Empty brackets would fail a split so treat them as \"inner\"\n                # brackets (e.g. only add them to the `omit` set if another\n                # pair of brackets was good enough.\n                inner_brackets.add(id(leaf))\n                continue\n\n            opening_bracket = leaf.opening_bracket\n            if closing_bracket:\n                omit.add(id(closing_bracket))\n                omit.update(inner_brackets)\n                inner_brackets.clear()\n                yield omit\n            closing_bracket = leaf",
                "def get_future_imports(node: Node) -> Set[str]:\n    \"\"\"Return a set of __future__ imports in the file.\"\"\"\n    imports = set()\n    for child in node.children:\n        if child.type != syms.simple_stmt:\n            break\n        first_child = child.children[0]\n        if isinstance(first_child, Leaf):\n            # Continue looking if we see a docstring; otherwise stop.\n            if (\n                len(child.children) == 2\n                and first_child.type == token.STRING\n                and child.children[1].type == token.NEWLINE\n            ):\n                continue\n            else:\n                break\n        elif first_child.type == syms.import_from:\n            module_name = first_child.children[1]\n            if not isinstance(module_name, Leaf) or module_name.value != \"__future__\":\n                break\n            for import_from_child in first_child.children[3:]:\n                if isinstance(import_from_child, Leaf):\n                    if import_from_child.type == token.NAME:\n                        imports.add(import_from_child.value)\n                else:\n                    assert import_from_child.type == syms.import_as_names\n                    for leaf in import_from_child.children:\n                        if isinstance(leaf, Leaf) and leaf.type == token.NAME:\n                            imports.add(leaf.value)\n        else:\n            break\n    return imports",
                "def gen_python_files_in_dir(\n    path: Path,\n    root: Path,\n    include: Pattern[str],\n    exclude: Pattern[str],\n    report: \"Report\",\n) -> Iterator[Path]:\n    \"\"\"Generate all files under `path` whose paths are not excluded by the\n    `exclude` regex, but are included by the `include` regex.\n\n    `report` is where output about exclusions goes.\n    \"\"\"\n    assert root.is_absolute(), f\"INTERNAL ERROR: `root` must be absolute but is {root}\"\n    for child in path.iterdir():\n        normalized_path = \"/\" + child.resolve().relative_to(root).as_posix()\n        if child.is_dir():\n            normalized_path += \"/\"\n        exclude_match = exclude.search(normalized_path)\n        if exclude_match and exclude_match.group(0):\n            report.path_ignored(child, f\"matches --exclude={exclude.pattern}\")\n            continue\n\n        if child.is_dir():\n            yield from gen_python_files_in_dir(child, root, include, exclude, report)\n\n        elif child.is_file():\n            include_match = include.search(normalized_path)\n            if include_match:\n                yield child",
                "def find_project_root(srcs: List[str]) -> Path:\n    \"\"\"Return a directory containing .git, .hg, or pyproject.toml.\n\n    That directory can be one of the directories passed in `srcs` or their\n    common parent.\n\n    If no directory in the tree contains a marker that would specify it's the\n    project root, the root of the file system is returned.\n    \"\"\"\n    if not srcs:\n        return Path(\"/\").resolve()\n\n    common_base = min(Path(src).resolve() for src in srcs)\n    if common_base.is_dir():\n        # Append a fake file so `parents` below returns `common_base_dir`, too.\n        common_base /= \"fake-file\"\n    for directory in common_base.parents:\n        if (directory / \".git\").is_dir():\n            return directory\n\n        if (directory / \".hg\").is_dir():\n            return directory\n\n        if (directory / \"pyproject.toml\").is_file():\n            return directory\n\n    return directory",
                "def assert_equivalent(src: str, dst: str) -> None:\n    \"\"\"Raise AssertionError if `src` and `dst` aren't equivalent.\"\"\"\n\n    import ast\n    import traceback\n\n    def _v(node: ast.AST, depth: int = 0) -> Iterator[str]:\n        \"\"\"Simple visitor generating strings to compare ASTs by content.\"\"\"\n        yield f\"{'  ' * depth}{node.__class__.__name__}(\"\n\n        for field in sorted(node._fields):\n            try:\n                value = getattr(node, field)\n            except AttributeError:\n                continue\n\n            yield f\"{'  ' * (depth+1)}{field}=\"\n\n            if isinstance(value, list):\n                for item in value:\n                    if isinstance(item, ast.AST):\n                        yield from _v(item, depth + 2)\n\n            elif isinstance(value, ast.AST):\n                yield from _v(value, depth + 2)\n\n            else:\n                yield f\"{'  ' * (depth+2)}{value!r},  # {value.__class__.__name__}\"\n\n        yield f\"{'  ' * depth})  # /{node.__class__.__name__}\"\n\n    try:\n        src_ast = ast.parse(src)\n    except Exception as exc:\n        major, minor = sys.version_info[:2]\n        raise AssertionError(\n            f\"cannot use --safe with this file; failed to parse source file \"\n            f\"with Python {major}.{minor}'s builtin AST. Re-run with --fast \"\n            f\"or stop using deprecated Python 2 syntax. AST error message: {exc}\"\n        )\n\n    try:\n        dst_ast = ast.parse(dst)\n    except Exception as exc:\n        log = dump_to_file(\"\".join(traceback.format_tb(exc.__traceback__)), dst)\n        raise AssertionError(\n            f\"INTERNAL ERROR: Black produced invalid code: {exc}. \"\n            f\"Please report a bug on https://github.com/ambv/black/issues.  \"\n            f\"This invalid output might be helpful: {log}\"\n        ) from None\n\n    src_ast_str = \"\\n\".join(_v(src_ast))\n    dst_ast_str = \"\\n\".join(_v(dst_ast))\n    if src_ast_str != dst_ast_str:\n        log = dump_to_file(diff(src_ast_str, dst_ast_str, \"src\", \"dst\"))\n        raise AssertionError(\n            f\"INTERNAL ERROR: Black produced code that is not equivalent to \"\n            f\"the source.  \"\n            f\"Please report a bug on https://github.com/ambv/black/issues.  \"\n            f\"This diff might be helpful: {log}\"\n        ) from None",
                "def assert_stable(\n    src: str, dst: str, line_length: int, mode: FileMode = FileMode.AUTO_DETECT\n) -> None:\n    \"\"\"Raise AssertionError if `dst` reformats differently the second time.\"\"\"\n    newdst = format_str(dst, line_length=line_length, mode=mode)\n    if dst != newdst:\n        log = dump_to_file(\n            diff(src, dst, \"source\", \"first pass\"),\n            diff(dst, newdst, \"first pass\", \"second pass\"),\n        )\n        raise AssertionError(\n            f\"INTERNAL ERROR: Black produced different code on the second pass \"\n            f\"of the formatter.  \"\n            f\"Please report a bug on https://github.com/ambv/black/issues.  \"\n            f\"This diff might be helpful: {log}\"\n        ) from None",
                "def dump_to_file(*output: str) -> str:\n    \"\"\"Dump `output` to a temporary file. Return path to the file.\"\"\"\n    import tempfile\n\n    with tempfile.NamedTemporaryFile(\n        mode=\"w\", prefix=\"blk_\", suffix=\".log\", delete=False, encoding=\"utf8\"\n    ) as f:\n        for lines in output:\n            f.write(lines)\n            if lines and lines[-1] != \"\\n\":\n                f.write(\"\\n\")\n    return f.name",
                "def diff(a: str, b: str, a_name: str, b_name: str) -> str:\n    \"\"\"Return a unified diff string between strings `a` and `b`.\"\"\"\n    import difflib\n\n    a_lines = [line + \"\\n\" for line in a.split(\"\\n\")]\n    b_lines = [line + \"\\n\" for line in b.split(\"\\n\")]\n    return \"\".join(\n        difflib.unified_diff(a_lines, b_lines, fromfile=a_name, tofile=b_name, n=5)\n    )",
                "def cancel(tasks: Iterable[asyncio.Task]) -> None:\n    \"\"\"asyncio signal handler that cancels all `tasks` and reports to stderr.\"\"\"\n    err(\"Aborted!\")\n    for task in tasks:\n        task.cancel()",
                "def shutdown(loop: BaseEventLoop) -> None:\n    \"\"\"Cancel all pending tasks on `loop`, wait for them, and close the loop.\"\"\"\n    try:\n        # This part is borrowed from asyncio/runners.py in Python 3.7b2.\n        to_cancel = [task for task in asyncio.Task.all_tasks(loop) if not task.done()]\n        if not to_cancel:\n            return\n\n        for task in to_cancel:\n            task.cancel()\n        loop.run_until_complete(\n            asyncio.gather(*to_cancel, loop=loop, return_exceptions=True)\n        )\n    finally:\n        # `concurrent.futures.Future` objects cannot be cancelled once they\n        # are already running. There might be some when the `shutdown()` happened.\n        # Silence their logger's spew about the event loop being closed.\n        cf_logger = logging.getLogger(\"concurrent.futures\")\n        cf_logger.setLevel(logging.CRITICAL)\n        loop.close()",
                "def sub_twice(regex: Pattern[str], replacement: str, original: str) -> str:\n    \"\"\"Replace `regex` with `replacement` twice on `original`.\n\n    This is used by string normalization to perform replaces on\n    overlapping matches.\n    \"\"\"\n    return regex.sub(replacement, regex.sub(replacement, original))",
                "def enumerate_reversed(sequence: Sequence[T]) -> Iterator[Tuple[Index, T]]:\n    \"\"\"Like `reversed(enumerate(sequence))` if that were possible.\"\"\"\n    index = len(sequence) - 1\n    for element in reversed(sequence):\n        yield (index, element)\n        index -= 1",
                "def enumerate_with_length(\n    line: Line, reversed: bool = False\n) -> Iterator[Tuple[Index, Leaf, int]]:\n    \"\"\"Return an enumeration of leaves with their length.\n\n    Stops prematurely on multiline strings and standalone comments.\n    \"\"\"\n    op = cast(\n        Callable[[Sequence[Leaf]], Iterator[Tuple[Index, Leaf]]],\n        enumerate_reversed if reversed else enumerate,\n    )\n    for index, leaf in op(line.leaves):\n        length = len(leaf.prefix) + len(leaf.value)\n        if \"\\n\" in leaf.value:\n            return  # Multiline strings, we can't continue.\n\n        comment: Optional[Leaf]\n        for comment in line.comments_after(leaf, index):\n            length += len(comment.value)\n\n        yield index, leaf, length",
                "def is_line_short_enough(line: Line, *, line_length: int, line_str: str = \"\") -> bool:\n    \"\"\"Return True if `line` is no longer than `line_length`.\n\n    Uses the provided `line_str` rendering, if any, otherwise computes a new one.\n    \"\"\"\n    if not line_str:\n        line_str = str(line).strip(\"\\n\")\n    return (\n        len(line_str) <= line_length\n        and \"\\n\" not in line_str  # multiline strings\n        and not line.contains_standalone_comments()\n    )",
                "def can_omit_invisible_parens(line: Line, line_length: int) -> bool:\n    \"\"\"Does `line` have a shape safe to reformat without optional parens around it?\n\n    Returns True for only a subset of potentially nice looking formattings but\n    the point is to not return false positives that end up producing lines that\n    are too long.\n    \"\"\"\n    bt = line.bracket_tracker\n    if not bt.delimiters:\n        # Without delimiters the optional parentheses are useless.\n        return True\n\n    max_priority = bt.max_delimiter_priority()\n    if bt.delimiter_count_with_priority(max_priority) > 1:\n        # With more than one delimiter of a kind the optional parentheses read better.\n        return False\n\n    if max_priority == DOT_PRIORITY:\n        # A single stranded method call doesn't require optional parentheses.\n        return True\n\n    assert len(line.leaves) >= 2, \"Stranded delimiter\"\n\n    first = line.leaves[0]\n    second = line.leaves[1]\n    penultimate = line.leaves[-2]\n    last = line.leaves[-1]\n\n    # With a single delimiter, omit if the expression starts or ends with\n    # a bracket.\n    if first.type in OPENING_BRACKETS and second.type not in CLOSING_BRACKETS:\n        remainder = False\n        length = 4 * line.depth\n        for _index, leaf, leaf_length in enumerate_with_length(line):\n            if leaf.type in CLOSING_BRACKETS and leaf.opening_bracket is first:\n                remainder = True\n            if remainder:\n                length += leaf_length\n                if length > line_length:\n                    break\n\n                if leaf.type in OPENING_BRACKETS:\n                    # There are brackets we can further split on.\n                    remainder = False\n\n        else:\n            # checked the entire string and line length wasn't exceeded\n            if len(line.leaves) == _index + 1:\n                return True\n\n        # Note: we are not returning False here because a line might have *both*\n        # a leading opening bracket and a trailing closing bracket.  If the\n        # opening bracket doesn't match our rule, maybe the closing will.\n\n    if (\n        last.type == token.RPAR\n        or last.type == token.RBRACE\n        or (\n            # don't use indexing for omitting optional parentheses;\n            # it looks weird\n            last.type == token.RSQB\n            and last.parent\n            and last.parent.type != syms.trailer\n        )\n    ):\n        if penultimate.type in OPENING_BRACKETS:\n            # Empty brackets don't help.\n            return False\n\n        if is_multiline_string(first):\n            # Additional wrapping of a multiline string in this situation is\n            # unnecessary.\n            return True\n\n        length = 4 * line.depth\n        seen_other_brackets = False\n        for _index, leaf, leaf_length in enumerate_with_length(line):\n            length += leaf_length\n            if leaf is last.opening_bracket:\n                if seen_other_brackets or length <= line_length:\n                    return True\n\n            elif leaf.type in OPENING_BRACKETS:\n                # There are brackets we can further split on.\n                seen_other_brackets = True\n\n    return False",
                "def get_cache_file(line_length: int, mode: FileMode) -> Path:\n    pyi = bool(mode & FileMode.PYI)\n    py36 = bool(mode & FileMode.PYTHON36)\n    return (\n        CACHE_DIR\n        / f\"cache.{line_length}{'.pyi' if pyi else ''}{'.py36' if py36 else ''}.pickle\"\n    )",
                "def read_cache(line_length: int, mode: FileMode) -> Cache:\n    \"\"\"Read the cache if it exists and is well formed.\n\n    If it is not well formed, the call to write_cache later should resolve the issue.\n    \"\"\"\n    cache_file = get_cache_file(line_length, mode)\n    if not cache_file.exists():\n        return {}\n\n    with cache_file.open(\"rb\") as fobj:\n        try:\n            cache: Cache = pickle.load(fobj)\n        except pickle.UnpicklingError:\n            return {}\n\n    return cache",
                "def get_cache_info(path: Path) -> CacheInfo:\n    \"\"\"Return the information used to check if a file is already formatted or not.\"\"\"\n    stat = path.stat()\n    return stat.st_mtime, stat.st_size",
                "def filter_cached(\n    cache: Cache, sources: Iterable[Path]\n) -> Tuple[List[Path], List[Path]]:\n    \"\"\"Split a list of paths into two.\n\n    The first list contains paths of files that modified on disk or are not in the\n    cache. The other list contains paths to non-modified files.\n    \"\"\"\n    todo, done = [], []\n    for src in sources:\n        src = src.resolve()\n        if cache.get(src) != get_cache_info(src):\n            todo.append(src)\n        else:\n            done.append(src)\n    return todo, done",
                "def write_cache(\n    cache: Cache, sources: List[Path], line_length: int, mode: FileMode\n) -> None:\n    \"\"\"Update the cache file.\"\"\"\n    cache_file = get_cache_file(line_length, mode)\n    try:\n        if not CACHE_DIR.exists():\n            CACHE_DIR.mkdir(parents=True)\n        new_cache = {**cache, **{src.resolve(): get_cache_info(src) for src in sources}}\n        with cache_file.open(\"wb\") as fobj:\n            pickle.dump(new_cache, fobj, protocol=pickle.HIGHEST_PROTOCOL)\n    except OSError:\n        pass",
                "def __init__(self, consumed: int) -> None:\n    super().__init__(consumed)\n    self.consumed = consumed",
                "def trim_prefix(self, leaf: Leaf) -> None:\n    leaf.prefix = leaf.prefix[self.consumed :]",
                "def leaf_from_consumed(self, leaf: Leaf) -> Leaf:\n    \"\"\"Returns a new Leaf from the consumed part of the prefix.\"\"\"\n    unformatted_prefix = leaf.prefix[: self.consumed]\n    return Leaf(token.NEWLINE, unformatted_prefix)",
                "@classmethod\ndef from_configuration(cls, *, check: bool, diff: bool) -> \"WriteBack\":\n    if check and not diff:\n        return cls.NO\n\n    return cls.DIFF if diff else cls.YES",
                "@classmethod\ndef from_configuration(\n    cls, *, py36: bool, pyi: bool, skip_string_normalization: bool\n) -> \"FileMode\":\n    mode = cls.AUTO_DETECT\n    if py36:\n        mode |= cls.PYTHON36\n    if pyi:\n        mode |= cls.PYI\n    if skip_string_normalization:\n        mode |= cls.NO_STRING_NORMALIZATION\n    return mode",
                "def visit(self, node: LN) -> Iterator[T]:\n    \"\"\"Main method to visit `node` and its children.\n\n    It tries to find a `visit_*()` method for the given `node.type`, like\n    `visit_simple_stmt` for Node objects or `visit_INDENT` for Leaf objects.\n    If no dedicated `visit_*()` method is found, chooses `visit_default()`\n    instead.\n\n    Then yields objects of type `T` from the selected visitor.\n    \"\"\"\n    if node.type < 256:\n        name = token.tok_name[node.type]\n    else:\n        name = type_repr(node.type)\n    yield from getattr(self, f\"visit_{name}\", self.visit_default)(node)",
                "def visit_default(self, node: LN) -> Iterator[T]:\n    \"\"\"Default `visit_*()` implementation. Recurses to children of `node`.\"\"\"\n    if isinstance(node, Node):\n        for child in node.children:\n            yield from self.visit(child)",
                "def visit_default(self, node: LN) -> Iterator[T]:\n    indent = \" \" * (2 * self.tree_depth)\n    if isinstance(node, Node):\n        _type = type_repr(node.type)\n        out(f\"{indent}{_type}\", fg=\"yellow\")\n        self.tree_depth += 1\n        for child in node.children:\n            yield from self.visit(child)\n\n        self.tree_depth -= 1\n        out(f\"{indent}/{_type}\", fg=\"yellow\", bold=False)\n    else:\n        _type = token.tok_name.get(node.type, str(node.type))\n        out(f\"{indent}{_type}\", fg=\"blue\", nl=False)\n        if node.prefix:\n            # We don't have to handle prefixes for `Node` objects since\n            # that delegates to the first child anyway.\n            out(f\" {node.prefix!r}\", fg=\"green\", bold=False, nl=False)\n        out(f\" {node.value!r}\", fg=\"blue\", bold=False)",
                "@classmethod\ndef show(cls, code: str) -> None:\n    \"\"\"Pretty-print the lib2to3 AST of a given string of `code`.\n\n    Convenience method for debugging.\n    \"\"\"\n    v: DebugVisitor[None] = DebugVisitor()\n    list(v.visit(lib2to3_parse(code)))",
                "def mark(self, leaf: Leaf) -> None:\n    \"\"\"Mark `leaf` with bracket-related metadata. Keep track of delimiters.\n\n    All leaves receive an int `bracket_depth` field that stores how deep\n    within brackets a given leaf is. 0 means there are no enclosing brackets\n    that started on this line.\n\n    If a leaf is itself a closing bracket, it receives an `opening_bracket`\n    field that it forms a pair with. This is a one-directional link to\n    avoid reference cycles.\n\n    If a leaf is a delimiter (a token on which Black can split the line if\n    needed) and it's on depth 0, its `id()` is stored in the tracker's\n    `delimiters` field.\n    \"\"\"\n    if leaf.type == token.COMMENT:\n        return\n\n    self.maybe_decrement_after_for_loop_variable(leaf)\n    self.maybe_decrement_after_lambda_arguments(leaf)\n    if leaf.type in CLOSING_BRACKETS:\n        self.depth -= 1\n        opening_bracket = self.bracket_match.pop((self.depth, leaf.type))\n        leaf.opening_bracket = opening_bracket\n    leaf.bracket_depth = self.depth\n    if self.depth == 0:\n        delim = is_split_before_delimiter(leaf, self.previous)\n        if delim and self.previous is not None:\n            self.delimiters[id(self.previous)] = delim\n        else:\n            delim = is_split_after_delimiter(leaf, self.previous)\n            if delim:\n                self.delimiters[id(leaf)] = delim\n    if leaf.type in OPENING_BRACKETS:\n        self.bracket_match[self.depth, BRACKET[leaf.type]] = leaf\n        self.depth += 1\n    self.previous = leaf\n    self.maybe_increment_lambda_arguments(leaf)\n    self.maybe_increment_for_loop_variable(leaf)",
                "def any_open_brackets(self) -> bool:\n    \"\"\"Return True if there is an yet unmatched open bracket on the line.\"\"\"\n    return bool(self.bracket_match)",
                "def max_delimiter_priority(self, exclude: Iterable[LeafID] = ()) -> int:\n    \"\"\"Return the highest priority of a delimiter found on the line.\n\n    Values are consistent with what `is_split_*_delimiter()` return.\n    Raises ValueError on no delimiters.\n    \"\"\"\n    return max(v for k, v in self.delimiters.items() if k not in exclude)",
                "def delimiter_count_with_priority(self, priority: int = 0) -> int:\n    \"\"\"Return the number of delimiters with the given `priority`.\n\n    If no `priority` is passed, defaults to max priority on the line.\n    \"\"\"\n    if not self.delimiters:\n        return 0\n\n    priority = priority or self.max_delimiter_priority()\n    return sum(1 for p in self.delimiters.values() if p == priority)",
                "def maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool:\n    \"\"\"In a for loop, or comprehension, the variables are often unpacks.\n\n    To avoid splitting on the comma in this situation, increase the depth of\n    tokens between `for` and `in`.\n    \"\"\"\n    if leaf.type == token.NAME and leaf.value == \"for\":\n        self.depth += 1\n        self._for_loop_variable += 1\n        return True\n\n    return False",
                "def maybe_decrement_after_for_loop_variable(self, leaf: Leaf) -> bool:\n    \"\"\"See `maybe_increment_for_loop_variable` above for explanation.\"\"\"\n    if self._for_loop_variable and leaf.type == token.NAME and leaf.value == \"in\":\n        self.depth -= 1\n        self._for_loop_variable -= 1\n        return True\n\n    return False",
                "def maybe_increment_lambda_arguments(self, leaf: Leaf) -> bool:\n    \"\"\"In a lambda expression, there might be more than one argument.\n\n    To avoid splitting on the comma in this situation, increase the depth of\n    tokens between `lambda` and `:`.\n    \"\"\"\n    if leaf.type == token.NAME and leaf.value == \"lambda\":\n        self.depth += 1\n        self._lambda_arguments += 1\n        return True\n\n    return False",
                "def maybe_decrement_after_lambda_arguments(self, leaf: Leaf) -> bool:\n    \"\"\"See `maybe_increment_lambda_arguments` above for explanation.\"\"\"\n    if self._lambda_arguments and leaf.type == token.COLON:\n        self.depth -= 1\n        self._lambda_arguments -= 1\n        return True\n\n    return False",
                "def get_open_lsqb(self) -> Optional[Leaf]:\n    \"\"\"Return the most recent opening square bracket (if any).\"\"\"\n    return self.bracket_match.get((self.depth - 1, token.RSQB))",
                "def append(self, leaf: Leaf, preformatted: bool = False) -> None:\n    \"\"\"Add a new `leaf` to the end of the line.\n\n    Unless `preformatted` is True, the `leaf` will receive a new consistent\n    whitespace prefix and metadata applied by :class:`BracketTracker`.\n    Trailing commas are maybe removed, unpacked for loop variables are\n    demoted from being delimiters.\n\n    Inline comments are put aside.\n    \"\"\"\n    has_value = leaf.type in BRACKETS or bool(leaf.value.strip())\n    if not has_value:\n        return\n\n    if token.COLON == leaf.type and self.is_class_paren_empty:\n        del self.leaves[-2:]\n    if self.leaves and not preformatted:\n        # Note: at this point leaf.prefix should be empty except for\n        # imports, for which we only preserve newlines.\n        leaf.prefix += whitespace(\n            leaf, complex_subscript=self.is_complex_subscript(leaf)\n        )\n    if self.inside_brackets or not preformatted:\n        self.bracket_tracker.mark(leaf)\n        self.maybe_remove_trailing_comma(leaf)\n    if not self.append_comment(leaf):\n        self.leaves.append(leaf)",
                "def append_safe(self, leaf: Leaf, preformatted: bool = False) -> None:\n    \"\"\"Like :func:`append()` but disallow invalid standalone comment structure.\n\n    Raises ValueError when any `leaf` is appended after a standalone comment\n    or when a standalone comment is not the first leaf on the line.\n    \"\"\"\n    if self.bracket_tracker.depth == 0:\n        if self.is_comment:\n            raise ValueError(\"cannot append to standalone comments\")\n\n        if self.leaves and leaf.type == STANDALONE_COMMENT:\n            raise ValueError(\n                \"cannot append standalone comments to a populated line\"\n            )\n\n    self.append(leaf, preformatted=preformatted)",
                "@property\ndef is_comment(self) -> bool:\n    \"\"\"Is this line a standalone comment?\"\"\"\n    return len(self.leaves) == 1 and self.leaves[0].type == STANDALONE_COMMENT",
                "@property\ndef is_decorator(self) -> bool:\n    \"\"\"Is this line a decorator?\"\"\"\n    return bool(self) and self.leaves[0].type == token.AT",
                "@property\ndef is_import(self) -> bool:\n    \"\"\"Is this an import line?\"\"\"\n    return bool(self) and is_import(self.leaves[0])",
                "@property\ndef is_class(self) -> bool:\n    \"\"\"Is this line a class definition?\"\"\"\n    return (\n        bool(self)\n        and self.leaves[0].type == token.NAME\n        and self.leaves[0].value == \"class\"\n    )",
                "@property\ndef is_stub_class(self) -> bool:\n    \"\"\"Is this line a class definition with a body consisting only of \"...\"?\"\"\"\n    return self.is_class and self.leaves[-3:] == [\n        Leaf(token.DOT, \".\") for _ in range(3)\n    ]",
                "@property\ndef is_def(self) -> bool:\n    \"\"\"Is this a function definition? (Also returns True for async defs.)\"\"\"\n    try:\n        first_leaf = self.leaves[0]\n    except IndexError:\n        return False\n\n    try:\n        second_leaf: Optional[Leaf] = self.leaves[1]\n    except IndexError:\n        second_leaf = None\n    return (first_leaf.type == token.NAME and first_leaf.value == \"def\") or (\n        first_leaf.type == token.ASYNC\n        and second_leaf is not None\n        and second_leaf.type == token.NAME\n        and second_leaf.value == \"def\"\n    )",
                "@property\ndef is_class_paren_empty(self) -> bool:\n    \"\"\"Is this a class with no base classes but using parentheses?\n\n    Those are unnecessary and should be removed.\n    \"\"\"\n    return (\n        bool(self)\n        and len(self.leaves) == 4\n        and self.is_class\n        and self.leaves[2].type == token.LPAR\n        and self.leaves[2].value == \"(\"\n        and self.leaves[3].type == token.RPAR\n        and self.leaves[3].value == \")\"\n    )",
                "@property\ndef is_triple_quoted_string(self) -> bool:\n    \"\"\"Is the line a triple quoted string?\"\"\"\n    return (\n        bool(self)\n        and self.leaves[0].type == token.STRING\n        and self.leaves[0].value.startswith(('\"\"\"', \"'''\"))\n    )",
                "def contains_standalone_comments(self, depth_limit: int = sys.maxsize) -> bool:\n    \"\"\"If so, needs to be split before emitting.\"\"\"\n    for leaf in self.leaves:\n        if leaf.type == STANDALONE_COMMENT:\n            if leaf.bracket_depth <= depth_limit:\n                return True\n\n    return False",
                "def maybe_remove_trailing_comma(self, closing: Leaf) -> bool:\n    \"\"\"Remove trailing comma if there is one and it's safe.\"\"\"\n    if not (\n        self.leaves\n        and self.leaves[-1].type == token.COMMA\n        and closing.type in CLOSING_BRACKETS\n    ):\n        return False\n\n    if closing.type == token.RBRACE:\n        self.remove_trailing_comma()\n        return True\n\n    if closing.type == token.RSQB:\n        comma = self.leaves[-1]\n        if comma.parent and comma.parent.type == syms.listmaker:\n            self.remove_trailing_comma()\n            return True\n\n    # For parens let's check if it's safe to remove the comma.\n    # Imports are always safe.\n    if self.is_import:\n        self.remove_trailing_comma()\n        return True\n\n    # Otheriwsse, if the trailing one is the only one, we might mistakenly\n    # change a tuple into a different type by removing the comma.\n    depth = closing.bracket_depth + 1\n    commas = 0\n    opening = closing.opening_bracket\n    for _opening_index, leaf in enumerate(self.leaves):\n        if leaf is opening:\n            break\n\n    else:\n        return False\n\n    for leaf in self.leaves[_opening_index + 1 :]:\n        if leaf is closing:\n            break\n\n        bracket_depth = leaf.bracket_depth\n        if bracket_depth == depth and leaf.type == token.COMMA:\n            commas += 1\n            if leaf.parent and leaf.parent.type == syms.arglist:\n                commas += 1\n                break\n\n    if commas > 1:\n        self.remove_trailing_comma()\n        return True\n\n    return False",
                "def append_comment(self, comment: Leaf) -> bool:\n    \"\"\"Add an inline or standalone comment to the line.\"\"\"\n    if (\n        comment.type == STANDALONE_COMMENT\n        and self.bracket_tracker.any_open_brackets()\n    ):\n        comment.prefix = \"\"\n        return False\n\n    if comment.type != token.COMMENT:\n        return False\n\n    after = len(self.leaves) - 1\n    if after == -1:\n        comment.type = STANDALONE_COMMENT\n        comment.prefix = \"\"\n        return False\n\n    else:\n        self.comments.append((after, comment))\n        return True",
                "def comments_after(self, leaf: Leaf, _index: int = -1) -> Iterator[Leaf]:\n    \"\"\"Generate comments that should appear directly after `leaf`.\n\n    Provide a non-negative leaf `_index` to speed up the function.\n    \"\"\"\n    if _index == -1:\n        for _index, _leaf in enumerate(self.leaves):\n            if leaf is _leaf:\n                break\n\n        else:\n            return\n\n    for index, comment_after in self.comments:\n        if _index == index:\n            yield comment_after",
                "def remove_trailing_comma(self) -> None:\n    \"\"\"Remove the trailing comma and moves the comments attached to it.\"\"\"\n    comma_index = len(self.leaves) - 1\n    for i in range(len(self.comments)):\n        comment_index, comment = self.comments[i]\n        if comment_index == comma_index:\n            self.comments[i] = (comma_index - 1, comment)\n    self.leaves.pop()",
                "def is_complex_subscript(self, leaf: Leaf) -> bool:\n    \"\"\"Return True iff `leaf` is part of a slice with non-trivial exprs.\"\"\"\n    open_lsqb = (\n        leaf if leaf.type == token.LSQB else self.bracket_tracker.get_open_lsqb()\n    )\n    if open_lsqb is None:\n        return False\n\n    subscript_start = open_lsqb.next_sibling\n    if (\n        isinstance(subscript_start, Node)\n        and subscript_start.type == syms.subscriptlist\n    ):\n        subscript_start = child_towards(subscript_start, leaf)\n    return subscript_start is not None and any(\n        n.type in TEST_DESCENDANTS for n in subscript_start.pre_order()\n    )",
                "def __str__(self) -> str:\n    \"\"\"Render the line.\"\"\"\n    if not self:\n        return \"\\n\"\n\n    indent = \"    \" * self.depth\n    leaves = iter(self.leaves)\n    first = next(leaves)\n    res = f\"{first.prefix}{indent}{first.value}\"\n    for leaf in leaves:\n        res += str(leaf)\n    for _, comment in self.comments:\n        res += str(comment)\n    return res + \"\\n\"",
                "def __bool__(self) -> bool:\n    \"\"\"Return True if the line has leaves or comments.\"\"\"\n    return bool(self.leaves or self.comments)",
                "def append(self, leaf: Leaf, preformatted: bool = True) -> None:\n    \"\"\"Just add a new `leaf` to the end of the lines.\n\n    The `preformatted` argument is ignored.\n\n    Keeps track of indentation `depth`, which is useful when the user\n    says `# fmt: on`. Otherwise, doesn't do anything with the `leaf`.\n    \"\"\"\n    try:\n        list(generate_comments(leaf))\n    except FormatOn as f_on:\n        self.leaves.append(f_on.leaf_from_consumed(leaf))\n        raise\n\n    self.leaves.append(leaf)\n    if leaf.type == token.INDENT:\n        self.depth += 1\n    elif leaf.type == token.DEDENT:\n        self.depth -= 1",
                "def __str__(self) -> str:\n    \"\"\"Render unformatted lines from leaves which were added with `append()`.\n\n    `depth` is not used for indentation in this case.\n    \"\"\"\n    if not self:\n        return \"\\n\"\n\n    res = \"\"\n    for leaf in self.leaves:\n        res += str(leaf)\n    return res",
                "def append_comment(self, comment: Leaf) -> bool:\n    \"\"\"Not implemented in this class. Raises `NotImplementedError`.\"\"\"\n    raise NotImplementedError(\"Unformatted lines don't store comments separately.\")",
                "def maybe_remove_trailing_comma(self, closing: Leaf) -> bool:\n    \"\"\"Does nothing and returns False.\"\"\"\n    return False",
                "def maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool:\n    \"\"\"Does nothing and returns False.\"\"\"\n    return False",
                "def maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    \"\"\"Return the number of extra empty lines before and after the `current_line`.\n\n    This is for separating `def`, `async def` and `class` with extra empty\n    lines (two on module-level).\n    \"\"\"\n    if isinstance(current_line, UnformattedLines):\n        return 0, 0\n\n    before, after = self._maybe_empty_lines(current_line)\n    before -= self.previous_after\n    self.previous_after = after\n    self.previous_line = current_line\n    return before, after",
                "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    max_allowed = 1\n    if current_line.depth == 0:\n        max_allowed = 1 if self.is_pyi else 2\n    if current_line.leaves:\n        # Consume the first leaf's extra newlines.\n        first_leaf = current_line.leaves[0]\n        before = first_leaf.prefix.count(\"\\n\")\n        before = min(before, max_allowed)\n        first_leaf.prefix = \"\"\n    else:\n        before = 0\n    depth = current_line.depth\n    while self.previous_defs and self.previous_defs[-1] >= depth:\n        self.previous_defs.pop()\n        if self.is_pyi:\n            before = 0 if depth else 1\n        else:\n            before = 1 if depth else 2\n    is_decorator = current_line.is_decorator\n    if is_decorator or current_line.is_def or current_line.is_class:\n        if not is_decorator:\n            self.previous_defs.append(depth)\n        if self.previous_line is None:\n            # Don't insert empty lines before the first line in the file.\n            return 0, 0\n\n        if self.previous_line.is_decorator:\n            return 0, 0\n\n        if self.previous_line.depth < current_line.depth and (\n            self.previous_line.is_class or self.previous_line.is_def\n        ):\n            return 0, 0\n\n        if (\n            self.previous_line.is_comment\n            and self.previous_line.depth == current_line.depth\n            and before == 0\n        ):\n            return 0, 0\n\n        if self.is_pyi:\n            if self.previous_line.depth > current_line.depth:\n                newlines = 1\n            elif current_line.is_class or self.previous_line.is_class:\n                if current_line.is_stub_class and self.previous_line.is_stub_class:\n                    newlines = 0\n                else:\n                    newlines = 1\n            else:\n                newlines = 0\n        else:\n            newlines = 2\n        if current_line.depth and newlines:\n            newlines -= 1\n        return newlines, 0\n\n    if (\n        self.previous_line\n        and self.previous_line.is_import\n        and not current_line.is_import\n        and depth == self.previous_line.depth\n    ):\n        return (before or 1), 0\n\n    if (\n        self.previous_line\n        and self.previous_line.is_class\n        and current_line.is_triple_quoted_string\n    ):\n        return before, 1\n\n    return before, 0",
                "def line(self, indent: int = 0, type: Type[Line] = Line) -> Iterator[Line]:\n    \"\"\"Generate a line.\n\n    If the line is empty, only emit if it makes sense.\n    If the line is too long, split it first and then generate.\n\n    If any lines were generated, set up a new current_line.\n    \"\"\"\n    if not self.current_line:\n        if self.current_line.__class__ == type:\n            self.current_line.depth += indent\n        else:\n            self.current_line = type(depth=self.current_line.depth + indent)\n        return  # Line is empty, don't emit. Creating a new one unnecessary.\n\n    complete_line = self.current_line\n    self.current_line = type(depth=complete_line.depth + indent)\n    yield complete_line",
                "def visit(self, node: LN) -> Iterator[Line]:\n    \"\"\"Main method to visit `node` and its children.\n\n    Yields :class:`Line` objects.\n    \"\"\"\n    if isinstance(self.current_line, UnformattedLines):\n        # File contained `# fmt: off`\n        yield from self.visit_unformatted(node)\n\n    else:\n        yield from super().visit(node)",
                "def visit_default(self, node: LN) -> Iterator[Line]:\n    \"\"\"Default `visit_*()` implementation. Recurses to children of `node`.\"\"\"\n    if isinstance(node, Leaf):\n        any_open_brackets = self.current_line.bracket_tracker.any_open_brackets()\n        try:\n            for comment in generate_comments(node):\n                if any_open_brackets:\n                    # any comment within brackets is subject to splitting\n                    self.current_line.append(comment)\n                elif comment.type == token.COMMENT:\n                    # regular trailing comment\n                    self.current_line.append(comment)\n                    yield from self.line()\n\n                else:\n                    # regular standalone comment\n                    yield from self.line()\n\n                    self.current_line.append(comment)\n                    yield from self.line()\n\n        except FormatOff as f_off:\n            f_off.trim_prefix(node)\n            yield from self.line(type=UnformattedLines)\n            yield from self.visit(node)\n\n        except FormatOn as f_on:\n            # This only happens here if somebody says \"fmt: on\" multiple\n            # times in a row.\n            f_on.trim_prefix(node)\n            yield from self.visit_default(node)\n\n        else:\n            normalize_prefix(node, inside_brackets=any_open_brackets)\n            if self.normalize_strings and node.type == token.STRING:\n                normalize_string_prefix(node, remove_u_prefix=self.remove_u_prefix)\n                normalize_string_quotes(node)\n            if node.type not in WHITESPACE:\n                self.current_line.append(node)\n    yield from super().visit_default(node)",
                "def visit_INDENT(self, node: Node) -> Iterator[Line]:\n    \"\"\"Increase indentation level, maybe yield a line.\"\"\"\n    # In blib2to3 INDENT never holds comments.\n    yield from self.line(+1)\n    yield from self.visit_default(node)",
                "def visit_DEDENT(self, node: Node) -> Iterator[Line]:\n    \"\"\"Decrease indentation level, maybe yield a line.\"\"\"\n    # The current line might still wait for trailing comments.  At DEDENT time\n    # there won't be any (they would be prefixes on the preceding NEWLINE).\n    # Emit the line then.\n    yield from self.line()\n\n    # While DEDENT has no value, its prefix may contain standalone comments\n    # that belong to the current indentation level.  Get 'em.\n    yield from self.visit_default(node)\n\n    # Finally, emit the dedent.\n    yield from self.line(-1)",
                "def visit_stmt(\n    self, node: Node, keywords: Set[str], parens: Set[str]\n) -> Iterator[Line]:\n    \"\"\"Visit a statement.\n\n    This implementation is shared for `if`, `while`, `for`, `try`, `except`,\n    `def`, `with`, `class`, `assert` and assignments.\n\n    The relevant Python language `keywords` for a given statement will be\n    NAME leaves within it. This methods puts those on a separate line.\n\n    `parens` holds a set of string leaf values immediately after which\n    invisible parens should be put.\n    \"\"\"\n    normalize_invisible_parens(node, parens_after=parens)\n    for child in node.children:\n        if child.type == token.NAME and child.value in keywords:  # type: ignore\n            yield from self.line()\n\n        yield from self.visit(child)",
                "def visit_suite(self, node: Node) -> Iterator[Line]:\n    \"\"\"Visit a suite.\"\"\"\n    if self.is_pyi and is_stub_suite(node):\n        yield from self.visit(node.children[2])\n    else:\n        yield from self.visit_default(node)",
                "def visit_simple_stmt(self, node: Node) -> Iterator[Line]:\n    \"\"\"Visit a statement without nested statements.\"\"\"\n    is_suite_like = node.parent and node.parent.type in STATEMENT\n    if is_suite_like:\n        if self.is_pyi and is_stub_body(node):\n            yield from self.visit_default(node)\n        else:\n            yield from self.line(+1)\n            yield from self.visit_default(node)\n            yield from self.line(-1)\n\n    else:\n        if not self.is_pyi or not node.parent or not is_stub_suite(node.parent):\n            yield from self.line()\n        yield from self.visit_default(node)",
                "def visit_async_stmt(self, node: Node) -> Iterator[Line]:\n    \"\"\"Visit `async def`, `async for`, `async with`.\"\"\"\n    yield from self.line()\n\n    children = iter(node.children)\n    for child in children:\n        yield from self.visit(child)\n\n        if child.type == token.ASYNC:\n            break\n\n    internal_stmt = next(children)\n    for child in internal_stmt.children:\n        yield from self.visit(child)",
                "def visit_decorators(self, node: Node) -> Iterator[Line]:\n    \"\"\"Visit decorators.\"\"\"\n    for child in node.children:\n        yield from self.line()\n        yield from self.visit(child)",
                "def visit_SEMI(self, leaf: Leaf) -> Iterator[Line]:\n    \"\"\"Remove a semicolon and put the other statement on a separate line.\"\"\"\n    yield from self.line()",
                "def visit_ENDMARKER(self, leaf: Leaf) -> Iterator[Line]:\n    \"\"\"End of file. Process outstanding comments and end with a newline.\"\"\"\n    yield from self.visit_default(leaf)\n    yield from self.line()",
                "def visit_unformatted(self, node: LN) -> Iterator[Line]:\n    \"\"\"Used when file contained a `# fmt: off`.\"\"\"\n    if isinstance(node, Node):\n        for child in node.children:\n            yield from self.visit(child)\n\n    else:\n        try:\n            self.current_line.append(node)\n        except FormatOn as f_on:\n            f_on.trim_prefix(node)\n            yield from self.line()\n            yield from self.visit(node)\n\n        if node.type == token.ENDMARKER:\n            # somebody decided not to put a final `# fmt: on`\n            yield from self.line()",
                "def __attrs_post_init__(self) -> None:\n    \"\"\"You are in a twisty little maze of passages.\"\"\"\n    v = self.visit_stmt\n    \u00d8: Set[str] = set()\n    self.visit_assert_stmt = partial(v, keywords={\"assert\"}, parens={\"assert\", \",\"})\n    self.visit_if_stmt = partial(\n        v, keywords={\"if\", \"else\", \"elif\"}, parens={\"if\", \"elif\"}\n    )\n    self.visit_while_stmt = partial(v, keywords={\"while\", \"else\"}, parens={\"while\"})\n    self.visit_for_stmt = partial(v, keywords={\"for\", \"else\"}, parens={\"for\", \"in\"})\n    self.visit_try_stmt = partial(\n        v, keywords={\"try\", \"except\", \"else\", \"finally\"}, parens=\u00d8\n    )\n    self.visit_except_clause = partial(v, keywords={\"except\"}, parens=\u00d8)\n    self.visit_with_stmt = partial(v, keywords={\"with\"}, parens=\u00d8)\n    self.visit_funcdef = partial(v, keywords={\"def\"}, parens=\u00d8)\n    self.visit_classdef = partial(v, keywords={\"class\"}, parens=\u00d8)\n    self.visit_expr_stmt = partial(v, keywords=\u00d8, parens=ASSIGNMENTS)\n    self.visit_return_stmt = partial(v, keywords={\"return\"}, parens={\"return\"})\n    self.visit_import_from = partial(v, keywords=\u00d8, parens={\"import\"})\n    self.visit_async_funcdef = self.visit_async_stmt\n    self.visit_decorated = self.visit_decorators",
                "@wraps(split_func)\ndef split_wrapper(line: Line, py36: bool = False) -> Iterator[Line]:\n    for l in split_func(line, py36):\n        normalize_prefix(l.leaves[0], inside_brackets=True)\n        yield l",
                "def append_to_line(leaf: Leaf) -> Iterator[Line]:\n    \"\"\"Append `leaf` to current line or to new line if appending impossible.\"\"\"\n    nonlocal current_line\n    try:\n        current_line.append_safe(leaf, preformatted=True)\n    except ValueError as ve:\n        yield current_line\n\n        current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n        current_line.append(leaf)",
                "def append_to_line(leaf: Leaf) -> Iterator[Line]:\n    \"\"\"Append `leaf` to current line or to new line if appending impossible.\"\"\"\n    nonlocal current_line\n    try:\n        current_line.append_safe(leaf, preformatted=True)\n    except ValueError as ve:\n        yield current_line\n\n        current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n        current_line.append(leaf)",
                "def done(self, src: Path, changed: Changed) -> None:\n    \"\"\"Increment the counter for successful reformatting. Write out a message.\"\"\"\n    if changed is Changed.YES:\n        reformatted = \"would reformat\" if self.check else \"reformatted\"\n        if self.verbose or not self.quiet:\n            out(f\"{reformatted} {src}\")\n        self.change_count += 1\n    else:\n        if self.verbose:\n            if changed is Changed.NO:\n                msg = f\"{src} already well formatted, good job.\"\n            else:\n                msg = f\"{src} wasn't modified on disk since last run.\"\n            out(msg, bold=False)\n        self.same_count += 1",
                "def failed(self, src: Path, message: str) -> None:\n    \"\"\"Increment the counter for failed reformatting. Write out a message.\"\"\"\n    err(f\"error: cannot format {src}: {message}\")\n    self.failure_count += 1",
                "def path_ignored(self, path: Path, message: str) -> None:\n    if self.verbose:\n        out(f\"{path} ignored: {message}\", bold=False)",
                "@property\ndef return_code(self) -> int:\n    \"\"\"Return the exit code that the app should use.\n\n    This considers the current state of changed files and failures:\n    - if there were any failures, return 123;\n    - if any files were changed and --check is being used, return 1;\n    - otherwise return 0.\n    \"\"\"\n    # According to http://tldp.org/LDP/abs/html/exitcodes.html starting with\n    # 126 we have special returncodes reserved by the shell.\n    if self.failure_count:\n        return 123\n\n    elif self.change_count and self.check:\n        return 1\n\n    return 0",
                "def __str__(self) -> str:\n    \"\"\"Render a color report of the current state.\n\n    Use `click.unstyle` to remove colors.\n    \"\"\"\n    if self.check:\n        reformatted = \"would be reformatted\"\n        unchanged = \"would be left unchanged\"\n        failed = \"would fail to reformat\"\n    else:\n        reformatted = \"reformatted\"\n        unchanged = \"left unchanged\"\n        failed = \"failed to reformat\"\n    report = []\n    if self.change_count:\n        s = \"s\" if self.change_count > 1 else \"\"\n        report.append(\n            click.style(f\"{self.change_count} file{s} {reformatted}\", bold=True)\n        )\n    if self.same_count:\n        s = \"s\" if self.same_count > 1 else \"\"\n        report.append(f\"{self.same_count} file{s} {unchanged}\")\n    if self.failure_count:\n        s = \"s\" if self.failure_count > 1 else \"\"\n        report.append(\n            click.style(f\"{self.failure_count} file{s} {failed}\", fg=\"red\")\n        )\n    return \", \".join(report) + \".\"",
                "def _v(node: ast.AST, depth: int = 0) -> Iterator[str]:\n    \"\"\"Simple visitor generating strings to compare ASTs by content.\"\"\"\n    yield f\"{'  ' * depth}{node.__class__.__name__}(\"\n\n    for field in sorted(node._fields):\n        try:\n            value = getattr(node, field)\n        except AttributeError:\n            continue\n\n        yield f\"{'  ' * (depth+1)}{field}=\"\n\n        if isinstance(value, list):\n            for item in value:\n                if isinstance(item, ast.AST):\n                    yield from _v(item, depth + 2)\n\n        elif isinstance(value, ast.AST):\n            yield from _v(value, depth + 2)\n\n        else:\n            yield f\"{'  ' * (depth+2)}{value!r},  # {value.__class__.__name__}\"\n\n    yield f\"{'  ' * depth})  # /{node.__class__.__name__}\"",
                "def rhs(line: Line, py36: bool = False) -> Iterator[Line]:\n    for omit in generate_trailers_to_omit(line, line_length):\n        lines = list(right_hand_split(line, line_length, py36, omit=omit))\n        if is_line_short_enough(lines[0], line_length=line_length):\n            yield from lines\n            return\n\n    # All splits failed, best effort split with no omits.\n    # This mostly happens to multiline strings that are by definition\n    # reported as not fitting a single line.\n    yield from right_hand_split(line, py36)"
            ],
            "inscope_function_signatures": [
                "main(ctx: click.Context, line_length: int, check: bool, diff: bool, fast: bool, pyi: bool, py36: bool, skip_string_normalization: bool, quiet: bool, verbose: bool, include: str, exclude: str, src: List[str]) -> None",
                "reformat_one(src: Path, line_length: int, fast: bool, write_back: WriteBack, mode: FileMode, report: 'Report') -> None",
                "schedule_formatting(sources: List[Path], line_length: int, fast: bool, write_back: WriteBack, mode: FileMode, report: 'Report', loop: BaseEventLoop, executor: Executor) -> None",
                "format_file_in_place(src: Path, line_length: int, fast: bool, write_back: WriteBack=WriteBack.NO, mode: FileMode=FileMode.AUTO_DETECT, lock: Any=None) -> bool",
                "format_stdin_to_stdout(line_length: int, fast: bool, write_back: WriteBack=WriteBack.NO, mode: FileMode=FileMode.AUTO_DETECT) -> bool",
                "format_file_contents(src_contents: str) -> FileContent",
                "format_str(src_contents: str, line_length: int) -> FileContent",
                "lib2to3_parse(src_txt: str) -> Node",
                "lib2to3_unparse(node: Node) -> str",
                "whitespace(leaf: Leaf) -> str",
                "preceding_leaf(node: Optional[LN]) -> Optional[Leaf]",
                "child_towards(ancestor: Node, descendant: LN) -> Optional[LN]",
                "is_split_after_delimiter(leaf: Leaf, previous: Leaf=None) -> int",
                "is_split_before_delimiter(leaf: Leaf, previous: Leaf=None) -> int",
                "generate_comments(leaf: LN) -> Iterator[Leaf]",
                "make_comment(content: str) -> str",
                "split_line(line: Line, line_length: int, inner: bool=False, py36: bool=False) -> Iterator[Line]",
                "left_hand_split(line: Line, py36: bool=False) -> Iterator[Line]",
                "right_hand_split(line: Line, line_length: int, py36: bool=False, omit: Collection[LeafID]=()) -> Iterator[Line]",
                "bracket_split_succeeded_or_raise(head: Line, body: Line, tail: Line) -> None",
                "dont_increase_indentation(split_func: SplitFunc) -> SplitFunc",
                "delimiter_split(line: Line, py36: bool=False) -> Iterator[Line]",
                "standalone_comment_split(line: Line, py36: bool=False) -> Iterator[Line]",
                "is_import(leaf: Leaf) -> bool",
                "normalize_prefix(leaf: Leaf) -> None",
                "normalize_string_prefix(leaf: Leaf, remove_u_prefix: bool=False) -> None",
                "normalize_string_quotes(leaf: Leaf) -> None",
                "normalize_invisible_parens(node: Node, parens_after: Set[str]) -> None",
                "maybe_make_parens_invisible_in_atom(node: LN) -> bool",
                "is_empty_tuple(node: LN) -> bool",
                "is_one_tuple(node: LN) -> bool",
                "is_yield(node: LN) -> bool",
                "is_vararg(leaf: Leaf, within: Set[NodeType]) -> bool",
                "is_multiline_string(leaf: Leaf) -> bool",
                "is_stub_suite(node: Node) -> bool",
                "is_stub_body(node: LN) -> bool",
                "max_delimiter_priority_in_atom(node: LN) -> int",
                "ensure_visible(leaf: Leaf) -> None",
                "should_explode(line: Line, opening_bracket: Leaf) -> bool",
                "is_python36(node: Node) -> bool",
                "generate_trailers_to_omit(line: Line, line_length: int) -> Iterator[Set[LeafID]]",
                "get_future_imports(node: Node) -> Set[str]",
                "gen_python_files_in_dir(path: Path, root: Path, include: Pattern[str], exclude: Pattern[str], report: 'Report') -> Iterator[Path]",
                "find_project_root(srcs: List[str]) -> Path",
                "assert_equivalent(src: str, dst: str) -> None",
                "assert_stable(src: str, dst: str, line_length: int, mode: FileMode=FileMode.AUTO_DETECT) -> None",
                "dump_to_file(*output: str) -> str",
                "diff(a: str, b: str, a_name: str, b_name: str) -> str",
                "cancel(tasks: Iterable[asyncio.Task]) -> None",
                "shutdown(loop: BaseEventLoop) -> None",
                "sub_twice(regex: Pattern[str], replacement: str, original: str) -> str",
                "enumerate_reversed(sequence: Sequence[T]) -> Iterator[Tuple[Index, T]]",
                "enumerate_with_length(line: Line, reversed: bool=False) -> Iterator[Tuple[Index, Leaf, int]]",
                "is_line_short_enough(line: Line) -> bool",
                "can_omit_invisible_parens(line: Line, line_length: int) -> bool",
                "get_cache_file(line_length: int, mode: FileMode) -> Path",
                "read_cache(line_length: int, mode: FileMode) -> Cache",
                "get_cache_info(path: Path) -> CacheInfo",
                "filter_cached(cache: Cache, sources: Iterable[Path]) -> Tuple[List[Path], List[Path]]",
                "write_cache(cache: Cache, sources: List[Path], line_length: int, mode: FileMode) -> None",
                "__init__(self, consumed: int) -> None",
                "trim_prefix(self, leaf: Leaf) -> None",
                "leaf_from_consumed(self, leaf: Leaf) -> Leaf",
                "from_configuration(cls) -> 'WriteBack'",
                "from_configuration(cls) -> 'FileMode'",
                "visit(self, node: LN) -> Iterator[T]",
                "visit_default(self, node: LN) -> Iterator[T]",
                "visit_default(self, node: LN) -> Iterator[T]",
                "show(cls, code: str) -> None",
                "mark(self, leaf: Leaf) -> None",
                "any_open_brackets(self) -> bool",
                "max_delimiter_priority(self, exclude: Iterable[LeafID]=()) -> int",
                "delimiter_count_with_priority(self, priority: int=0) -> int",
                "maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool",
                "maybe_decrement_after_for_loop_variable(self, leaf: Leaf) -> bool",
                "maybe_increment_lambda_arguments(self, leaf: Leaf) -> bool",
                "maybe_decrement_after_lambda_arguments(self, leaf: Leaf) -> bool",
                "get_open_lsqb(self) -> Optional[Leaf]",
                "append(self, leaf: Leaf, preformatted: bool=False) -> None",
                "append_safe(self, leaf: Leaf, preformatted: bool=False) -> None",
                "is_comment(self) -> bool",
                "is_decorator(self) -> bool",
                "is_import(self) -> bool",
                "is_class(self) -> bool",
                "is_stub_class(self) -> bool",
                "is_def(self) -> bool",
                "is_class_paren_empty(self) -> bool",
                "is_triple_quoted_string(self) -> bool",
                "contains_standalone_comments(self, depth_limit: int=sys.maxsize) -> bool",
                "maybe_remove_trailing_comma(self, closing: Leaf) -> bool",
                "append_comment(self, comment: Leaf) -> bool",
                "comments_after(self, leaf: Leaf, _index: int=-1) -> Iterator[Leaf]",
                "remove_trailing_comma(self) -> None",
                "is_complex_subscript(self, leaf: Leaf) -> bool",
                "__str__(self) -> str",
                "__bool__(self) -> bool",
                "append(self, leaf: Leaf, preformatted: bool=True) -> None",
                "__str__(self) -> str",
                "append_comment(self, comment: Leaf) -> bool",
                "maybe_remove_trailing_comma(self, closing: Leaf) -> bool",
                "maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool",
                "maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]",
                "_maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]",
                "line(self, indent: int=0, type: Type[Line]=Line) -> Iterator[Line]",
                "visit(self, node: LN) -> Iterator[Line]",
                "visit_default(self, node: LN) -> Iterator[Line]",
                "visit_INDENT(self, node: Node) -> Iterator[Line]",
                "visit_DEDENT(self, node: Node) -> Iterator[Line]",
                "visit_stmt(self, node: Node, keywords: Set[str], parens: Set[str]) -> Iterator[Line]",
                "visit_suite(self, node: Node) -> Iterator[Line]",
                "visit_simple_stmt(self, node: Node) -> Iterator[Line]",
                "visit_async_stmt(self, node: Node) -> Iterator[Line]",
                "visit_decorators(self, node: Node) -> Iterator[Line]",
                "visit_SEMI(self, leaf: Leaf) -> Iterator[Line]",
                "visit_ENDMARKER(self, leaf: Leaf) -> Iterator[Line]",
                "visit_unformatted(self, node: LN) -> Iterator[Line]",
                "__attrs_post_init__(self) -> None",
                "split_wrapper(line: Line, py36: bool=False) -> Iterator[Line]",
                "append_to_line(leaf: Leaf) -> Iterator[Line]",
                "append_to_line(leaf: Leaf) -> Iterator[Line]",
                "done(self, src: Path, changed: Changed) -> None",
                "failed(self, src: Path, message: str) -> None",
                "path_ignored(self, path: Path, message: str) -> None",
                "return_code(self) -> int",
                "__str__(self) -> str",
                "_v(node: ast.AST, depth: int=0) -> Iterator[str]",
                "rhs(line: Line, py36: bool=False) -> Iterator[Line]"
            ],
            "variables_in_file": {
                "__version__": [
                    250,
                    53,
                    47
                ],
                "DEFAULT_LINE_LENGTH": [
                    48,
                    161
                ],
                "DEFAULT_EXCLUDES": [
                    49,
                    223
                ],
                "DEFAULT_INCLUDES": [
                    210,
                    52
                ],
                "CACHE_DIR": [
                    3296,
                    73,
                    3242,
                    53,
                    3295
                ],
                "Path": [
                    2816,
                    385,
                    2817,
                    2821,
                    280,
                    2846,
                    293,
                    3238,
                    2856,
                    2858,
                    53,
                    3265,
                    69,
                    454,
                    2886,
                    3272,
                    3273,
                    342,
                    2902,
                    3290,
                    2907
                ],
                "user_cache_dir": [
                    53
                ],
                "FileContent": [
                    552,
                    57,
                    530
                ],
                "str": [
                    2818,
                    2819,
                    525,
                    270,
                    271,
                    272,
                    2960,
                    1555,
                    2453,
                    2966,
                    3095,
                    2073,
                    668,
                    1180,
                    2846,
                    677,
                    1190,
                    551,
                    1192,
                    1584,
                    2224,
                    1461,
                    57,
                    58,
                    443,
                    573,
                    3135,
                    576,
                    578,
                    3141,
                    1223,
                    589,
                    3024,
                    337,
                    209,
                    1233,
                    2002,
                    2902,
                    2907,
                    2780,
                    222,
                    3041,
                    357,
                    617,
                    619,
                    3055,
                    2930,
                    2038,
                    381
                ],
                "Encoding": [
                    58
                ],
                "Depth": [
                    802,
                    59
                ],
                "int": [
                    386,
                    261,
                    654,
                    527,
                    2966,
                    1051,
                    924,
                    160,
                    801,
                    805,
                    806,
                    551,
                    2726,
                    3238,
                    3114,
                    3247,
                    1840,
                    59,
                    60,
                    61,
                    62,
                    63,
                    1854,
                    3135,
                    2882,
                    67,
                    2883,
                    2884,
                    455,
                    2637,
                    3149,
                    3024,
                    852,
                    2133,
                    343,
                    1368,
                    3290,
                    860,
                    96,
                    2912,
                    2022,
                    1261,
                    1262,
                    495,
                    1136,
                    1264,
                    1279
                ],
                "NodeType": [
                    802,
                    2579,
                    60
                ],
                "LeafID": [
                    803,
                    2726,
                    2736,
                    852,
                    2133,
                    2742,
                    2743,
                    61
                ],
                "Priority": [
                    803,
                    62
                ],
                "Index": [
                    3104,
                    3114,
                    3120,
                    926,
                    63
                ],
                "LN": [
                    64,
                    2621,
                    645,
                    2501,
                    2535,
                    1832,
                    2558,
                    1834,
                    1387,
                    2637,
                    656,
                    629,
                    1814,
                    1399,
                    1945,
                    2525,
                    1534
                ],
                "Union": [
                    64
                ],
                "Leaf": [
                    2311,
                    906,
                    1162,
                    1529,
                    915,
                    2323,
                    2579,
                    1814,
                    1945,
                    1819,
                    925,
                    926,
                    802,
                    931,
                    804,
                    1060,
                    808,
                    2344,
                    2474,
                    2475,
                    2602,
                    3114,
                    1584,
                    1840,
                    2808,
                    1203,
                    2100,
                    2101,
                    2102,
                    2358,
                    2487,
                    2488,
                    3128,
                    2491,
                    2493,
                    1854,
                    959,
                    64,
                    2494,
                    1986,
                    2498,
                    2787,
                    2376,
                    2633,
                    3120,
                    1236,
                    1240,
                    2392,
                    1114,
                    1244,
                    2653,
                    2146,
                    2147,
                    612,
                    100,
                    2148,
                    103,
                    871,
                    2277,
                    106,
                    2665,
                    1004,
                    2799,
                    1136,
                    2802,
                    884,
                    1525,
                    2677,
                    1016,
                    1401,
                    893
                ],
                "Node": [
                    1536,
                    647,
                    2696,
                    658,
                    1172,
                    2453,
                    1440,
                    1446,
                    1832,
                    2477,
                    2608,
                    1461,
                    2623,
                    64,
                    2496,
                    1481,
                    589,
                    1488,
                    2780,
                    1504,
                    613,
                    617,
                    1519
                ],
                "SplitFunc": [
                    65,
                    2236,
                    2045
                ],
                "Callable": [
                    3120,
                    65
                ],
                "bool": [
                    2050,
                    1027,
                    1033,
                    528,
                    1043,
                    2579,
                    1046,
                    1051,
                    1060,
                    3113,
                    2090,
                    2602,
                    560,
                    561,
                    562,
                    1584,
                    2608,
                    2621,
                    3135,
                    65,
                    3149,
                    2133,
                    1114,
                    2677,
                    123,
                    2696,
                    1162,
                    144,
                    3239,
                    3240,
                    1195,
                    1197,
                    1203,
                    2243,
                    2252,
                    1236,
                    1240,
                    1244,
                    1259,
                    262,
                    263,
                    264,
                    265,
                    266,
                    267,
                    268,
                    269,
                    2316,
                    2344,
                    2349,
                    2358,
                    2879,
                    2880,
                    2881,
                    2376,
                    848,
                    850,
                    1363,
                    1364,
                    1366,
                    344,
                    871,
                    884,
                    893,
                    387,
                    906,
                    928,
                    929,
                    931,
                    941,
                    959,
                    2501,
                    456,
                    460,
                    977,
                    982,
                    984,
                    987,
                    989,
                    2525,
                    992,
                    995,
                    2022,
                    2535,
                    1001,
                    496,
                    1008,
                    499,
                    2558
                ],
                "Iterator": [
                    2050,
                    645,
                    2821,
                    2316,
                    656,
                    2323,
                    2966,
                    1945,
                    1440,
                    3104,
                    1446,
                    2726,
                    2090,
                    3114,
                    3120,
                    1462,
                    65,
                    2243,
                    1481,
                    2252,
                    1488,
                    2134,
                    1368,
                    1504,
                    2277,
                    2023,
                    1387,
                    1519,
                    1136,
                    629,
                    1525,
                    1399,
                    1529,
                    1534
                ],
                "Timestamp": [
                    66,
                    68
                ],
                "float": [
                    66
                ],
                "FileSize": [
                    67,
                    68
                ],
                "CacheInfo": [
                    3265,
                    68,
                    69
                ],
                "Tuple": [
                    3104,
                    802,
                    68,
                    3273,
                    3114,
                    1264,
                    3120,
                    926,
                    1279
                ],
                "Cache": [
                    69,
                    3272,
                    3290,
                    363,
                    3247,
                    401,
                    3258
                ],
                "Dict": [
                    802,
                    803,
                    69
                ],
                "out": [
                    673,
                    674,
                    70,
                    2891,
                    2909,
                    304,
                    336,
                    2899,
                    660,
                    666,
                    669
                ],
                "partial": [
                    1568,
                    1569,
                    1570,
                    1571,
                    70,
                    71,
                    1556,
                    1557,
                    1560,
                    1561,
                    1562,
                    1565,
                    1566,
                    1567
                ],
                "click.secho": [
                    70,
                    71
                ],
                "click": [
                    258,
                    2947,
                    260,
                    2955,
                    156,
                    157,
                    165,
                    174,
                    182,
                    188,
                    197,
                    70,
                    71,
                    202,
                    207,
                    337,
                    220,
                    232,
                    241,
                    250,
                    251,
                    254
                ],
                "err": [
                    289,
                    71,
                    3068,
                    302,
                    2904,
                    284
                ],
                "pygram.initialize": [
                    73
                ],
                "pygram": [
                    583,
                    584,
                    73,
                    74,
                    585,
                    591
                ],
                "syms": [
                    2560,
                    2566,
                    2591,
                    1576,
                    1075,
                    2623,
                    1604,
                    1605,
                    1606,
                    2631,
                    74,
                    1104,
                    2643,
                    1628,
                    1629,
                    1630,
                    1631,
                    1635,
                    613,
                    1646,
                    1651,
                    2681,
                    1659,
                    1670,
                    1675,
                    3211,
                    1680,
                    1173,
                    1686,
                    2710,
                    2718,
                    1697,
                    1704,
                    690,
                    691,
                    692,
                    693,
                    694,
                    695,
                    696,
                    697,
                    1721,
                    1734,
                    1738,
                    1746,
                    727,
                    728,
                    729,
                    730,
                    731,
                    1753,
                    1757,
                    734,
                    735,
                    736,
                    737,
                    2784,
                    740,
                    1765,
                    741,
                    742,
                    743,
                    744,
                    1770,
                    745,
                    746,
                    747,
                    748,
                    749,
                    750,
                    751,
                    752,
                    753,
                    754,
                    1775,
                    2797,
                    2806,
                    1785,
                    1786,
                    1790,
                    1796,
                    1808,
                    2352,
                    2353,
                    1870,
                    1878,
                    1898,
                    1905,
                    1909,
                    1918,
                    1930,
                    2470,
                    2477,
                    2478,
                    2496,
                    2504,
                    2528,
                    2537,
                    2544
                ],
                "pygram.python_symbols": [
                    74
                ],
                "UserWarning": [
                    77
                ],
                "Exception": [
                    81,
                    2993,
                    89,
                    3003,
                    380
                ],
                "__init__": [
                    97
                ],
                "super": [
                    97,
                    1397,
                    1438
                ],
                "consumed": [
                    97,
                    98,
                    1989,
                    1993,
                    1997,
                    1971,
                    1974
                ],
                "self.consumed": [
                    105,
                    98,
                    101
                ],
                "self": [
                    2951,
                    1538,
                    1542,
                    1033,
                    1034,
                    1035,
                    1036,
                    1037,
                    1038,
                    1039,
                    1545,
                    1546,
                    1550,
                    1554,
                    1556,
                    1557,
                    1046,
                    1047,
                    1048,
                    1560,
                    1561,
                    1562,
                    1053,
                    1565,
                    1566,
                    1567,
                    1568,
                    1569,
                    1570,
                    1571,
                    1572,
                    1573,
                    1063,
                    1064,
                    1070,
                    1074,
                    1076,
                    1081,
                    1082,
                    1090,
                    1097,
                    1109,
                    1118,
                    98,
                    101,
                    1126,
                    105,
                    1133,
                    1142,
                    1149,
                    643,
                    1155,
                    1156,
                    1157,
                    1159,
                    1160,
                    649,
                    1165,
                    657,
                    661,
                    663,
                    665,
                    1182,
                    1185,
                    1186,
                    1191,
                    1197,
                    1214,
                    1217,
                    1219,
                    1221,
                    1228,
                    1232,
                    1273,
                    1274,
                    1275,
                    1276,
                    1282,
                    1292,
                    1293,
                    1294,
                    1301,
                    1302,
                    1306,
                    1309,
                    1310,
                    1315,
                    1316,
                    1321,
                    1322,
                    1324,
                    1325,
                    826,
                    827,
                    1338,
                    829,
                    830,
                    1339,
                    832,
                    833,
                    834,
                    835,
                    836,
                    1341,
                    838,
                    1346,
                    840,
                    1347,
                    842,
                    843,
                    844,
                    845,
                    846,
                    2889,
                    2890,
                    2892,
                    850,
                    2894,
                    2900,
                    2905,
                    858,
                    2908,
                    1376,
                    865,
                    1377,
                    1378,
                    868,
                    869,
                    1380,
                    1383,
                    1384,
                    2922,
                    2925,
                    878,
                    879,
                    1392,
                    1394,
                    886,
                    887,
                    888,
                    2935,
                    1402,
                    1407,
                    2944,
                    2945,
                    1410,
                    1411,
                    900,
                    901,
                    2947,
                    1415,
                    2949,
                    1417,
                    1418,
                    2950,
                    908,
                    909,
                    910,
                    1422,
                    1423,
                    2952,
                    2953,
                    2955,
                    917,
                    1429,
                    1433,
                    1434,
                    1437,
                    1443,
                    1444,
                    1451,
                    1455,
                    945,
                    946,
                    947,
                    1458,
                    951,
                    953,
                    954,
                    955,
                    956,
                    957,
                    965,
                    966,
                    1477,
                    1479,
                    969,
                    1483,
                    1484,
                    974,
                    1486,
                    979,
                    1492,
                    1493,
                    1495,
                    984,
                    1496,
                    1497,
                    1500,
                    989,
                    1501,
                    1502,
                    1506,
                    995,
                    996,
                    997,
                    1510,
                    1003,
                    1517,
                    1522,
                    1011,
                    1523,
                    1527,
                    1016,
                    1531,
                    1532
                ],
                "leaf.prefix": [
                    2370,
                    101,
                    2373,
                    2749,
                    105,
                    1964,
                    3124,
                    950,
                    2365
                ],
                "leaf": [
                    2587,
                    1053,
                    1054,
                    1055,
                    2590,
                    2604,
                    3123,
                    3124,
                    3125,
                    1593,
                    1594,
                    1595,
                    2105,
                    2108,
                    2109,
                    3129,
                    2112,
                    3132,
                    1090,
                    1091,
                    1602,
                    2114,
                    2115,
                    1097,
                    1610,
                    1098,
                    2122,
                    1101,
                    1102,
                    2123,
                    1104,
                    2124,
                    2633,
                    2656,
                    2657,
                    101,
                    2152,
                    105,
                    2154,
                    2156,
                    2158,
                    2159,
                    2160,
                    2671,
                    2672,
                    2673,
                    2674,
                    3182,
                    3183,
                    1143,
                    3190,
                    2175,
                    2176,
                    2177,
                    1165,
                    1175,
                    3225,
                    3227,
                    3231,
                    1189,
                    1190,
                    2744,
                    1212,
                    2749,
                    1214,
                    2750,
                    1217,
                    1218,
                    2753,
                    1220,
                    2755,
                    2757,
                    2758,
                    2759,
                    2760,
                    1232,
                    1233,
                    2768,
                    2771,
                    2777,
                    2281,
                    2286,
                    2288,
                    2289,
                    2291,
                    2294,
                    2295,
                    2296,
                    2807,
                    2808,
                    2299,
                    2809,
                    2327,
                    2332,
                    2334,
                    2335,
                    2337,
                    2346,
                    2347,
                    2348,
                    823,
                    1848,
                    826,
                    827,
                    828,
                    2365,
                    830,
                    831,
                    832,
                    834,
                    2370,
                    2373,
                    1862,
                    838,
                    840,
                    841,
                    842,
                    1868,
                    1869,
                    844,
                    845,
                    846,
                    1870,
                    2383,
                    2384,
                    1876,
                    1877,
                    1878,
                    2389,
                    1880,
                    1882,
                    1886,
                    2400,
                    1892,
                    1896,
                    1897,
                    1898,
                    877,
                    2413,
                    1903,
                    1904,
                    1905,
                    2417,
                    1909,
                    886,
                    2421,
                    1912,
                    1916,
                    1917,
                    1918,
                    899,
                    2436,
                    1928,
                    1929,
                    1930,
                    908,
                    2450,
                    1939,
                    1964,
                    941,
                    945,
                    950,
                    951,
                    954,
                    955,
                    956,
                    957,
                    1981,
                    969,
                    1995,
                    974,
                    1531
                ],
                "unformatted_prefix": [
                    105,
                    106
                ],
                "token.NEWLINE": [
                    2792,
                    106,
                    2612,
                    687
                ],
                "token": [
                    2563,
                    1731,
                    1036,
                    1548,
                    1038,
                    2573,
                    1047,
                    1064,
                    1577,
                    1069,
                    1581,
                    1073,
                    2612,
                    2613,
                    2614,
                    1599,
                    1603,
                    2633,
                    1102,
                    1616,
                    1617,
                    1620,
                    2648,
                    1625,
                    1123,
                    106,
                    1645,
                    2671,
                    2673,
                    1657,
                    1661,
                    640,
                    2688,
                    3204,
                    3205,
                    2183,
                    1672,
                    3209,
                    2186,
                    1165,
                    1677,
                    2704,
                    1685,
                    2712,
                    1689,
                    668,
                    1694,
                    1701,
                    1706,
                    1710,
                    687,
                    1712,
                    1715,
                    1718,
                    1723,
                    702,
                    703,
                    704,
                    705,
                    706,
                    707,
                    1218,
                    1220,
                    710,
                    711,
                    712,
                    713,
                    714,
                    715,
                    716,
                    717,
                    718,
                    719,
                    720,
                    721,
                    722,
                    723,
                    1743,
                    725,
                    1747,
                    1750,
                    1766,
                    2791,
                    2792,
                    1772,
                    2803,
                    1784,
                    2808,
                    1790,
                    1793,
                    2308,
                    1797,
                    1798,
                    2311,
                    1801,
                    779,
                    780,
                    781,
                    782,
                    783,
                    784,
                    785,
                    786,
                    787,
                    788,
                    789,
                    790,
                    791,
                    792,
                    2350,
                    823,
                    1848,
                    1868,
                    1886,
                    1888,
                    1892,
                    877,
                    886,
                    1805,
                    1408,
                    1921,
                    899,
                    908,
                    1933,
                    917,
                    1433,
                    2474,
                    2475,
                    945,
                    2481,
                    2485,
                    2487,
                    2488,
                    1981,
                    1982,
                    2493,
                    2494,
                    1476,
                    2514,
                    984,
                    2530,
                    2531,
                    996,
                    1512,
                    1004,
                    2543,
                    2545,
                    2549,
                    1728,
                    2554,
                    1019,
                    1020,
                    1022
                ],
                "FormatError": [
                    113,
                    109
                ],
                "Enum": [
                    130,
                    117
                ],
                "NO": [
                    1665,
                    1794,
                    131,
                    1668,
                    1799,
                    1673,
                    1678,
                    1806,
                    1809,
                    1683,
                    1687,
                    1695,
                    1702,
                    1707,
                    1713,
                    1716,
                    1590,
                    1719,
                    1724,
                    1597,
                    1729,
                    1732,
                    1608,
                    1736,
                    1740,
                    1614,
                    1744,
                    1618,
                    1748,
                    1621,
                    1751,
                    1760,
                    1633,
                    1763,
                    1768,
                    1643,
                    1773,
                    1647,
                    1780,
                    118,
                    1654,
                    1788,
                    1791
                ],
                "YES": [
                    133,
                    119
                ],
                "DIFF": [
                    120
                ],
                "check": [
                    275,
                    124,
                    2879,
                    279
                ],
                "diff": [
                    483,
                    3014,
                    521,
                    275,
                    3030,
                    3031,
                    124,
                    127
                ],
                "cls.NO": [
                    125
                ],
                "cls": [
                    146,
                    148,
                    150,
                    152,
                    125,
                    127
                ],
                "cls.DIFF": [
                    127
                ],
                "cls.YES": [
                    127
                ],
                "classmethod": [
                    122,
                    676,
                    142
                ],
                "CACHED": [
                    132
                ],
                "Flag": [
                    136
                ],
                "AUTO_DETECT": [
                    137
                ],
                "PYTHON36": [
                    138
                ],
                "PYI": [
                    139
                ],
                "NO_STRING_NORMALIZATION": [
                    140
                ],
                "mode": [
                    146,
                    403,
                    148,
                    276,
                    150,
                    152,
                    153,
                    540,
                    546,
                    3239,
                    424,
                    3240,
                    560,
                    561,
                    562,
                    3252,
                    314,
                    450,
                    327,
                    467,
                    3027,
                    472,
                    3293,
                    359,
                    365,
                    374,
                    378,
                    509
                ],
                "cls.AUTO_DETECT": [
                    146
                ],
                "py36": [
                    577,
                    2052,
                    2244,
                    3240,
                    3243,
                    2060,
                    561,
                    147,
                    564,
                    277,
                    2197,
                    2072,
                    2298,
                    2077
                ],
                "cls.PYTHON36": [
                    148
                ],
                "pyi": [
                    277,
                    3243,
                    149,
                    3239
                ],
                "cls.PYI": [
                    150
                ],
                "skip_string_normalization": [
                    277,
                    151
                ],
                "cls.NO_STRING_NORMALIZATION": [
                    152
                ],
                "click.Context": [
                    260
                ],
                "List": [
                    385,
                    2146,
                    2147,
                    2148,
                    3273,
                    1262,
                    2846,
                    272,
                    2045,
                    2100,
                    2101,
                    2070,
                    2102,
                    280,
                    3290,
                    925,
                    926
                ],
                "write_back": [
                    480,
                    449,
                    516,
                    326,
                    359,
                    423,
                    377,
                    518,
                    364,
                    402,
                    275,
                    373,
                    313,
                    411,
                    477
                ],
                "WriteBack.from_configuration": [
                    275
                ],
                "WriteBack": [
                    449,
                    388,
                    516,
                    518,
                    377,
                    457,
                    364,
                    497,
                    402,
                    275,
                    345,
                    411
                ],
                "FileMode.from_configuration": [
                    276
                ],
                "FileMode": [
                    389,
                    3238,
                    551,
                    3239,
                    3240,
                    458,
                    3290,
                    3247,
                    560,
                    529,
                    498,
                    467,
                    276,
                    561,
                    562,
                    3024,
                    346
                ],
                "report": [
                    2946,
                    2951,
                    296,
                    328,
                    2954,
                    2957,
                    337,
                    338,
                    379,
                    2834,
                    443,
                    406,
                    279,
                    2838,
                    315,
                    381,
                    446,
                    2943
                ],
                "Report": [
                    279
                ],
                "quiet": [
                    2880,
                    335,
                    279
                ],
                "verbose": [
                    2881,
                    279
                ],
                "sources": [
                    3297,
                    323,
                    295,
                    427,
                    300,
                    303,
                    3280,
                    308,
                    404,
                    310,
                    280,
                    409
                ],
                "include_regex": [
                    296,
                    282
                ],
                "re.compile": [
                    2418,
                    2419,
                    2420,
                    282,
                    287
                ],
                "re": [
                    288,
                    2383,
                    2418,
                    2419,
                    2420,
                    282,
                    283,
                    287
                ],
                "include": [
                    2841,
                    282,
                    284,
                    2838
                ],
                "re.error": [
                    288,
                    283
                ],
                "ctx.exit": [
                    305,
                    290,
                    338,
                    285
                ],
                "ctx": [
                    305,
                    290,
                    338,
                    285
                ],
                "exclude_regex": [
                    296,
                    287
                ],
                "exclude": [
                    2688,
                    289,
                    2689,
                    2832,
                    2834,
                    2838,
                    858,
                    287
                ],
                "root": [
                    291,
                    296,
                    2827,
                    2829,
                    2838
                ],
                "find_project_root": [
                    291
                ],
                "src": [
                    509,
                    521,
                    405,
                    406,
                    291,
                    292,
                    420,
                    426,
                    427,
                    2858,
                    2992,
                    439,
                    443,
                    445,
                    446,
                    2891,
                    2896,
                    3280,
                    466,
                    2898,
                    468,
                    3281,
                    3030,
                    3282,
                    2904,
                    3283,
                    3285,
                    478,
                    481,
                    482,
                    3297,
                    357,
                    366,
                    370,
                    506,
                    507,
                    378,
                    379,
                    381
                ],
                "s": [
                    2945,
                    2947,
                    292,
                    293,
                    2950,
                    2951,
                    2953,
                    298,
                    2955,
                    302
                ],
                "p": [
                    1796,
                    1670,
                    1675,
                    1680,
                    1808,
                    2599,
                    2590,
                    2591,
                    1697,
                    2594,
                    1700,
                    293,
                    294,
                    2597,
                    296,
                    1704,
                    298,
                    2346,
                    300,
                    1964,
                    1965,
                    1711,
                    1968,
                    2352,
                    2353,
                    1973,
                    1721,
                    1594,
                    1727,
                    1602,
                    1603,
                    1734,
                    1738,
                    1612,
                    1742,
                    1746,
                    1753,
                    1756,
                    1757,
                    869,
                    1765,
                    1770,
                    1775,
                    1778
                ],
                "p.is_dir": [
                    294
                ],
                "sources.extend": [
                    295
                ],
                "gen_python_files_in_dir": [
                    296,
                    2838
                ],
                "p.is_file": [
                    298
                ],
                "sources.append": [
                    300
                ],
                "len": [
                    1155,
                    1156,
                    2569,
                    1034,
                    3106,
                    303,
                    2224,
                    2611,
                    308,
                    3124,
                    1974,
                    3130,
                    2749,
                    2368,
                    2626,
                    3143,
                    2632,
                    979,
                    2518,
                    2529,
                    3170,
                    1126,
                    2790,
                    2538,
                    2421,
                    2549,
                    2553,
                    3196
                ],
                "reformat_one": [
                    309
                ],
                "line_length": [
                    2051,
                    2052,
                    2053,
                    403,
                    2195,
                    2197,
                    540,
                    2077,
                    3228,
                    546,
                    421,
                    3243,
                    3252,
                    311,
                    2746,
                    577,
                    450,
                    324,
                    3143,
                    3027,
                    472,
                    3293,
                    359,
                    365,
                    371,
                    3187,
                    2040,
                    378,
                    509
                ],
                "fast": [
                    544,
                    325,
                    422,
                    359,
                    472,
                    372,
                    312,
                    509
                ],
                "loop": [
                    448,
                    321,
                    417,
                    3077,
                    329,
                    3083,
                    3084,
                    334,
                    431,
                    432,
                    3092,
                    318
                ],
                "asyncio.get_event_loop": [
                    318
                ],
                "asyncio": [
                    448,
                    3077,
                    3084,
                    429,
                    437,
                    3066,
                    318
                ],
                "executor": [
                    418,
                    330,
                    319
                ],
                "ProcessPoolExecutor": [
                    319
                ],
                "os.cpu_count": [
                    319
                ],
                "os": [
                    319
                ],
                "loop.run_until_complete": [
                    321,
                    3083
                ],
                "schedule_formatting": [
                    322
                ],
                "shutdown": [
                    334
                ],
                "click.echo": [
                    337
                ],
                "report.return_code": [
                    338
                ],
                "click.command": [
                    156
                ],
                "click.option": [
                    165,
                    197,
                    232,
                    202,
                    174,
                    207,
                    241,
                    220,
                    182,
                    188,
                    157
                ],
                "click.version_option": [
                    250
                ],
                "click.argument": [
                    251
                ],
                "click.Path": [
                    254
                ],
                "click.pass_context": [
                    258
                ],
                "changed": [
                    356,
                    2888,
                    361,
                    2895,
                    368,
                    369,
                    376,
                    377,
                    379
                ],
                "Changed.NO": [
                    377,
                    356,
                    446,
                    2895
                ],
                "Changed": [
                    356,
                    2886,
                    2888,
                    361,
                    2895,
                    368,
                    369,
                    406,
                    376,
                    377,
                    446
                ],
                "src.is_file": [
                    357
                ],
                "format_stdin_to_stdout": [
                    358
                ],
                "Changed.YES": [
                    376,
                    361,
                    2888,
                    446
                ],
                "cache": [
                    3297,
                    450,
                    3258,
                    363,
                    365,
                    367,
                    401,
                    3282,
                    403,
                    404,
                    378,
                    3262
                ],
                "WriteBack.DIFF": [
                    402,
                    411,
                    364,
                    518
                ],
                "read_cache": [
                    403,
                    365
                ],
                "res_src": [
                    366,
                    367
                ],
                "src.resolve": [
                    3281,
                    3297,
                    366
                ],
                "get_cache_info": [
                    3297,
                    3282,
                    367
                ],
                "Changed.CACHED": [
                    368,
                    369,
                    406
                ],
                "format_file_in_place": [
                    369,
                    419
                ],
                "WriteBack.YES": [
                    377,
                    449,
                    516
                ],
                "write_cache": [
                    450,
                    378
                ],
                "report.done": [
                    379,
                    446,
                    406
                ],
                "report.failed": [
                    443,
                    381
                ],
                "exc": [
                    608,
                    610,
                    2998,
                    3004,
                    381,
                    3006
                ],
                "BaseEventLoop": [
                    3073,
                    391
                ],
                "Executor": [
                    392
                ],
                "cached": [
                    404,
                    405
                ],
                "filter_cached": [
                    404
                ],
                "cancelled": [
                    448,
                    441,
                    447,
                    407
                ],
                "formatted": [
                    408,
                    449,
                    450,
                    445
                ],
                "lock": [
                    484,
                    485,
                    425,
                    489,
                    490,
                    410,
                    415
                ],
                "manager": [
                    414,
                    415
                ],
                "Manager": [
                    414
                ],
                "manager.Lock": [
                    415
                ],
                "tasks": [
                    416,
                    3069,
                    429,
                    439
                ],
                "loop.run_in_executor": [
                    417
                ],
                "sorted": [
                    2970,
                    427
                ],
                "pending": [
                    429,
                    431,
                    432,
                    436,
                    437
                ],
                "Iterable": [
                    3272,
                    3066,
                    852,
                    429
                ],
                "asyncio.Task": [
                    3066,
                    429,
                    3077
                ],
                "tasks.keys": [
                    429
                ],
                "loop.add_signal_handler": [
                    432,
                    431
                ],
                "signal.SIGINT": [
                    431
                ],
                "signal": [
                    432,
                    431
                ],
                "cancel": [
                    432,
                    431
                ],
                "signal.SIGTERM": [
                    432
                ],
                "NotImplementedError": [
                    433,
                    1238
                ],
                "done": [
                    3279,
                    3285,
                    3286,
                    437,
                    438
                ],
                "_": [
                    1191,
                    1004,
                    437,
                    572,
                    575
                ],
                "asyncio.wait": [
                    437
                ],
                "asyncio.FIRST_COMPLETED": [
                    437
                ],
                "task": [
                    3077,
                    3081,
                    3082,
                    438,
                    439,
                    440,
                    441,
                    442,
                    443,
                    3070,
                    3069,
                    446
                ],
                "tasks.pop": [
                    439
                ],
                "task.cancelled": [
                    440
                ],
                "cancelled.append": [
                    441
                ],
                "task.exception": [
                    442,
                    443
                ],
                "formatted.append": [
                    445
                ],
                "task.result": [
                    446
                ],
                "asyncio.gather": [
                    448,
                    3084
                ],
                "Any": [
                    459
                ],
                "WriteBack.NO": [
                    457,
                    497
                ],
                "FileMode.AUTO_DETECT": [
                    551,
                    458,
                    3024,
                    529,
                    498
                ],
                "src.suffix": [
                    466
                ],
                "FileMode.PYI": [
                    560,
                    467,
                    3239
                ],
                "tokenize.open": [
                    468
                ],
                "tokenize": [
                    468
                ],
                "src_buffer": [
                    468,
                    469,
                    478
                ],
                "src_contents": [
                    545,
                    546,
                    483,
                    557,
                    469,
                    472,
                    537,
                    540,
                    541
                ],
                "src_buffer.read": [
                    469
                ],
                "dst_contents": [
                    576,
                    545,
                    546,
                    483,
                    547,
                    573,
                    578,
                    579,
                    558,
                    471,
                    540,
                    541,
                    479
                ],
                "format_file_contents": [
                    509,
                    471
                ],
                "NothingChanged": [
                    512,
                    474,
                    538,
                    542
                ],
                "write_back.YES": [
                    477
                ],
                "open": [
                    478
                ],
                "src_buffer.encoding": [
                    478
                ],
                "f": [
                    3047,
                    3049,
                    3051,
                    3052,
                    478,
                    479
                ],
                "f.write": [
                    3049,
                    3051,
                    479
                ],
                "write_back.DIFF": [
                    480
                ],
                "src_name": [
                    481,
                    483,
                    521,
                    519
                ],
                "dst_name": [
                    520,
                    521,
                    482,
                    483
                ],
                "diff_contents": [
                    483,
                    487
                ],
                "lock.acquire": [
                    485
                ],
                "sys.stdout.write": [
                    521,
                    517,
                    487
                ],
                "sys.stdout": [
                    521,
                    517,
                    487
                ],
                "sys": [
                    2274,
                    517,
                    487,
                    521,
                    2994,
                    506,
                    1051
                ],
                "lock.release": [
                    490
                ],
                "sys.stdin.read": [
                    506
                ],
                "sys.stdin": [
                    506
                ],
                "dst": [
                    517,
                    521,
                    3027,
                    3028,
                    3030,
                    3031,
                    3002,
                    507,
                    3004,
                    509
                ],
                "src_contents.strip": [
                    537
                ],
                "format_str": [
                    3027,
                    540
                ],
                "assert_equivalent": [
                    545
                ],
                "assert_stable": [
                    546
                ],
                "src_node": [
                    561,
                    571,
                    557,
                    559
                ],
                "lib2to3_parse": [
                    683,
                    557
                ],
                "future_imports": [
                    564,
                    559
                ],
                "get_future_imports": [
                    559
                ],
                "is_pyi": [
                    1259,
                    560,
                    1363,
                    565,
                    568
                ],
                "FileMode.PYTHON36": [
                    3240,
                    561
                ],
                "is_python36": [
                    561
                ],
                "normalize_strings": [
                    562,
                    1364,
                    566
                ],
                "FileMode.NO_STRING_NORMALIZATION": [
                    562
                ],
                "lines": [
                    2052,
                    2053,
                    2054,
                    3048,
                    3049,
                    3050,
                    563,
                    603,
                    571,
                    605
                ],
                "LineGenerator": [
                    563
                ],
                "elt": [
                    568,
                    574
                ],
                "EmptyLineTracker": [
                    568
                ],
                "empty_line": [
                    576,
                    569,
                    573
                ],
                "Line": [
                    2050,
                    2316,
                    2321,
                    2323,
                    2070,
                    2331,
                    1440,
                    2210,
                    1446,
                    2726,
                    3113,
                    2090,
                    1200,
                    2097,
                    2098,
                    2099,
                    1462,
                    569,
                    3135,
                    2243,
                    2303,
                    1481,
                    1356,
                    2252,
                    3149,
                    1488,
                    1365,
                    2133,
                    2134,
                    1368,
                    2143,
                    1504,
                    2144,
                    2145,
                    2273,
                    2277,
                    2022,
                    2023,
                    1387,
                    1260,
                    2285,
                    1519,
                    1264,
                    1525,
                    2677,
                    1399,
                    1529,
                    1534,
                    1279
                ],
                "after": [
                    1126,
                    1127,
                    1133,
                    1273,
                    570,
                    1275,
                    572,
                    1277,
                    574
                ],
                "current_line": [
                    2304,
                    1281,
                    1283,
                    2308,
                    1285,
                    2309,
                    2311,
                    2312,
                    1291,
                    2321,
                    1298,
                    1299,
                    2327,
                    2329,
                    2331,
                    2332,
                    1309,
                    1316,
                    2340,
                    2341,
                    1322,
                    1324,
                    1325,
                    1333,
                    571,
                    1340,
                    574,
                    577,
                    1348,
                    1365,
                    2273,
                    2281,
                    2283,
                    2285,
                    2286,
                    1270,
                    1273,
                    1276,
                    2301,
                    2303
                ],
                "lines.visit": [
                    571
                ],
                "range": [
                    1156,
                    572,
                    1004,
                    575
                ],
                "before": [
                    1317,
                    1286,
                    1287,
                    1343,
                    1350,
                    1290,
                    1352,
                    1295,
                    1297,
                    1273,
                    1274,
                    1277,
                    574,
                    575
                ],
                "elt.maybe_empty_lines": [
                    574
                ],
                "line": [
                    2177,
                    2689,
                    2051,
                    2052,
                    2060,
                    2189,
                    2062,
                    2318,
                    2192,
                    2321,
                    2197,
                    3223,
                    2072,
                    3225,
                    2331,
                    2334,
                    2337,
                    2087,
                    2097,
                    2098,
                    2099,
                    2739,
                    1973,
                    1974,
                    1975,
                    1976,
                    2105,
                    1978,
                    2744,
                    3123,
                    3129,
                    577,
                    578,
                    1985,
                    2244,
                    3141,
                    3145,
                    2124,
                    2764,
                    2687,
                    2259,
                    3156,
                    2263,
                    2143,
                    2144,
                    2145,
                    2273,
                    3170,
                    3172,
                    3173,
                    3174,
                    3175,
                    2152,
                    2285,
                    3181,
                    3182,
                    2288,
                    2034,
                    2035,
                    2291,
                    3059,
                    2038,
                    2039,
                    2040,
                    3060,
                    2042,
                    3196,
                    2046,
                    2303
                ],
                "split_line": [
                    577,
                    2077
                ],
                "GRAMMARS": [
                    595,
                    582
                ],
                "pygram.python_grammar_no_print_statement_no_exec_statement": [
                    583
                ],
                "pygram.python_grammar_no_print_statement": [
                    584,
                    591
                ],
                "pygram.python_grammar": [
                    585
                ],
                "grammar": [
                    595,
                    596,
                    591
                ],
                "src_txt": [
                    592,
                    593,
                    594,
                    598,
                    603
                ],
                "nl": [
                    593,
                    594
                ],
                "drv": [
                    596,
                    598
                ],
                "driver.Driver": [
                    596
                ],
                "driver": [
                    596
                ],
                "pytree.convert": [
                    596
                ],
                "pytree": [
                    596
                ],
                "result": [
                    2176,
                    2178,
                    2070,
                    2076,
                    2205,
                    2206,
                    2207,
                    2083,
                    2121,
                    2123,
                    2125,
                    2127,
                    2128,
                    2129,
                    598,
                    612,
                    613,
                    614,
                    2174
                ],
                "drv.parse_string": [
                    598
                ],
                "ParseError": [
                    601
                ],
                "lineno": [
                    608,
                    602,
                    605
                ],
                "column": [
                    608,
                    602
                ],
                "pe.context": [
                    602
                ],
                "pe": [
                    602
                ],
                "src_txt.splitlines": [
                    603
                ],
                "faulty_line": [
                    608,
                    605,
                    607
                ],
                "IndexError": [
                    1825,
                    2690,
                    2260,
                    1012,
                    1017,
                    606
                ],
                "ValueError": [
                    608,
                    2690,
                    2661,
                    967,
                    970,
                    2282,
                    2328,
                    2266
                ],
                "isinstance": [
                    1536,
                    647,
                    658,
                    1172,
                    1819,
                    2978,
                    2980,
                    2983,
                    2491,
                    2623,
                    2498,
                    2653,
                    2787,
                    612,
                    2799,
                    1392,
                    2034,
                    2802,
                    1270,
                    2808,
                    1401
                ],
                "syms.file_input": [
                    613
                ],
                "code": [
                    619,
                    620,
                    683
                ],
                "node": [
                    1536,
                    1537,
                    2560,
                    2563,
                    1542,
                    2566,
                    1544,
                    2569,
                    1546,
                    1548,
                    2572,
                    2611,
                    2612,
                    2613,
                    2614,
                    2618,
                    2623,
                    2626,
                    2629,
                    2643,
                    2646,
                    2647,
                    2652,
                    619,
                    639,
                    640,
                    642,
                    643,
                    647,
                    648,
                    2703,
                    658,
                    659,
                    662,
                    668,
                    670,
                    673,
                    674,
                    2783,
                    1816,
                    1817,
                    1828,
                    1834,
                    1835,
                    1836,
                    1837,
                    1394,
                    1397,
                    1401,
                    1404,
                    1421,
                    1423,
                    1428,
                    1429,
                    1432,
                    1433,
                    1434,
                    1435,
                    1436,
                    1437,
                    1438,
                    2463,
                    2968,
                    2970,
                    2972,
                    1444,
                    2468,
                    2477,
                    2478,
                    1455,
                    2989,
                    2484,
                    2487,
                    2488,
                    2496,
                    1474,
                    1475,
                    2504,
                    2505,
                    2506,
                    1483,
                    1484,
                    2507,
                    1486,
                    2508,
                    2512,
                    2513,
                    1490,
                    1492,
                    1493,
                    2518,
                    2519,
                    1496,
                    1500,
                    1502,
                    2528,
                    2529,
                    2530,
                    2531,
                    1508,
                    2537,
                    2538,
                    2541,
                    1521,
                    2552,
                    2553,
                    2554
                ],
                "T": [
                    3104,
                    645,
                    653,
                    623,
                    656,
                    626,
                    629
                ],
                "TypeVar": [
                    623
                ],
                "Generic": [
                    626
                ],
                "node.type": [
                    640,
                    2528,
                    642,
                    2560,
                    2563,
                    2566,
                    2504,
                    2537,
                    1548,
                    1436,
                    2478,
                    2623,
                    659,
                    2643,
                    2552,
                    1433,
                    668,
                    639
                ],
                "name": [
                    640,
                    642,
                    643
                ],
                "token.tok_name": [
                    640,
                    668
                ],
                "type_repr": [
                    642,
                    659
                ],
                "getattr": [
                    643,
                    2972
                ],
                "self.visit_default": [
                    643,
                    1444,
                    1486,
                    1455,
                    1429,
                    1493,
                    1496,
                    1531,
                    1502
                ],
                "child": [
                    1537,
                    1538,
                    648,
                    649,
                    2828,
                    2829,
                    2830,
                    2834,
                    2837,
                    662,
                    663,
                    2838,
                    2840,
                    2843,
                    2468,
                    2470,
                    2471,
                    2472,
                    2476,
                    2477,
                    2481,
                    2483,
                    2485,
                    2491,
                    2495,
                    2496,
                    2498,
                    1475,
                    1476,
                    2629,
                    1479,
                    2631,
                    2632,
                    2633,
                    2783,
                    2784,
                    2786,
                    1509,
                    1510,
                    2790,
                    1512,
                    2792,
                    1516,
                    1517,
                    1521,
                    1523
                ],
                "node.children": [
                    1537,
                    648,
                    2569,
                    2572,
                    662,
                    2468,
                    2611,
                    2484,
                    2612,
                    2613,
                    2614,
                    2618,
                    2626,
                    1475,
                    2629,
                    1484,
                    2512,
                    2513,
                    2518,
                    2519,
                    2646,
                    2647,
                    2652,
                    2783,
                    2529,
                    2530,
                    2531,
                    1508,
                    2538,
                    2541,
                    1521,
                    2553,
                    2554
                ],
                "self.visit": [
                    1538,
                    1510,
                    1479,
                    649,
                    1546,
                    1484,
                    1517,
                    1423,
                    1523,
                    663
                ],
                "Visitor": [
                    1356,
                    653
                ],
                "tree_depth": [
                    654
                ],
                "indent": [
                    1185,
                    1378,
                    1188,
                    1380,
                    1384,
                    657,
                    660,
                    666,
                    669
                ],
                "self.tree_depth": [
                    657,
                    665,
                    661
                ],
                "_type": [
                    659,
                    660,
                    666,
                    668,
                    669
                ],
                "token.tok_name.get": [
                    668
                ],
                "node.prefix": [
                    673,
                    670
                ],
                "node.value": [
                    674,
                    2563
                ],
                "v": [
                    1802,
                    1554,
                    1556,
                    1558,
                    1560,
                    1561,
                    1563,
                    1565,
                    1566,
                    1567,
                    1568,
                    1569,
                    1570,
                    1571,
                    682,
                    683,
                    2348,
                    2352,
                    2353,
                    1595,
                    858
                ],
                "DebugVisitor": [
                    682
                ],
                "list": [
                    2978,
                    2052,
                    2468,
                    2463,
                    683,
                    1262,
                    1212,
                    925,
                    926,
                    1823
                ],
                "v.visit": [
                    683
                ],
                "dataclass": [
                    1249,
                    1355,
                    652,
                    920,
                    2875,
                    797
                ],
                "KEYWORDS": [
                    686
                ],
                "set": [
                    2688,
                    1578,
                    1579,
                    686,
                    2736,
                    1555,
                    2742,
                    2743,
                    2782
                ],
                "keyword.kwlist": [
                    686
                ],
                "keyword": [
                    686
                ],
                "WHITESPACE": [
                    1996,
                    1436,
                    687
                ],
                "token.DEDENT": [
                    1220,
                    2614,
                    687
                ],
                "token.INDENT": [
                    1218,
                    2613,
                    687
                ],
                "FLOW_CONTROL": [
                    688
                ],
                "STATEMENT": [
                    689,
                    1490
                ],
                "syms.if_stmt": [
                    690
                ],
                "syms.while_stmt": [
                    691
                ],
                "syms.for_stmt": [
                    692
                ],
                "syms.try_stmt": [
                    693
                ],
                "syms.except_clause": [
                    694
                ],
                "syms.with_stmt": [
                    695
                ],
                "syms.funcdef": [
                    696
                ],
                "syms.classdef": [
                    697,
                    1746
                ],
                "STANDALONE_COMMENT": [
                    1984,
                    2309,
                    1128,
                    969,
                    1992,
                    2750,
                    1581,
                    979,
                    699,
                    1117,
                    1054
                ],
                "LOGIC_OPERATORS": [
                    1939,
                    700
                ],
                "COMPARATORS": [
                    1882,
                    701
                ],
                "token.LESS": [
                    702
                ],
                "token.GREATER": [
                    703
                ],
                "token.EQEQUAL": [
                    704
                ],
                "token.NOTEQUAL": [
                    705
                ],
                "token.LESSEQUAL": [
                    706
                ],
                "token.GREATEREQUAL": [
                    707
                ],
                "MATH_OPERATORS": [
                    1652,
                    709,
                    1876
                ],
                "token.VBAR": [
                    779,
                    710
                ],
                "token.CIRCUMFLEX": [
                    780,
                    711
                ],
                "token.AMPER": [
                    712,
                    781
                ],
                "token.LEFTSHIFT": [
                    713,
                    782
                ],
                "token.RIGHTSHIFT": [
                    1657,
                    714,
                    783
                ],
                "token.PLUS": [
                    784,
                    715
                ],
                "token.MINUS": [
                    785,
                    716
                ],
                "token.STAR": [
                    725,
                    786,
                    717,
                    2485
                ],
                "token.SLASH": [
                    787,
                    718
                ],
                "token.DOUBLESLASH": [
                    788,
                    719
                ],
                "token.PERCENT": [
                    720,
                    789
                ],
                "token.AT": [
                    984,
                    721,
                    790,
                    1743
                ],
                "token.TILDE": [
                    722,
                    791
                ],
                "token.DOUBLESTAR": [
                    792,
                    723,
                    1772,
                    725
                ],
                "STARS": [
                    2720,
                    1731,
                    1641,
                    725,
                    2587,
                    2715
                ],
                "VARARGS_PARENTS": [
                    2296,
                    1862,
                    1642,
                    726
                ],
                "syms.arglist": [
                    1670,
                    1104,
                    2710,
                    727,
                    1628
                ],
                "syms.argument": [
                    1790,
                    728,
                    1721,
                    1629,
                    2718
                ],
                "syms.trailer": [
                    752,
                    729,
                    3211,
                    1704
                ],
                "syms.typedargslist": [
                    1680,
                    730,
                    1635,
                    2710
                ],
                "syms.varargslist": [
                    731,
                    1675,
                    1631
                ],
                "UNPACKING_PARENTS": [
                    1642,
                    733,
                    1862
                ],
                "syms.atom": [
                    2496,
                    2528,
                    1765,
                    2470,
                    2566,
                    2504,
                    2537,
                    2631,
                    2477,
                    2643,
                    2681,
                    734
                ],
                "syms.dictsetmaker": [
                    1770,
                    735
                ],
                "syms.listmaker": [
                    736,
                    1075
                ],
                "syms.testlist_gexp": [
                    2544,
                    737
                ],
                "TEST_DESCENDANTS": [
                    1177,
                    739
                ],
                "syms.test": [
                    740,
                    1909
                ],
                "syms.lambdef": [
                    741
                ],
                "syms.or_test": [
                    742
                ],
                "syms.and_test": [
                    743
                ],
                "syms.not_test": [
                    744
                ],
                "syms.comparison": [
                    745,
                    1918
                ],
                "syms.star_expr": [
                    746,
                    2591,
                    1878,
                    1775
                ],
                "syms.expr": [
                    747
                ],
                "syms.xor_expr": [
                    748
                ],
                "syms.and_expr": [
                    749
                ],
                "syms.shift_expr": [
                    1659,
                    750
                ],
                "syms.arith_expr": [
                    751
                ],
                "syms.term": [
                    753
                ],
                "syms.power": [
                    754
                ],
                "ASSIGNMENTS": [
                    1569,
                    756
                ],
                "COMPREHENSION_PRIORITY": [
                    1900,
                    1907,
                    772
                ],
                "COMMA_PRIORITY": [
                    2307,
                    773,
                    2693,
                    2508,
                    1849
                ],
                "TERNARY_PRIORITY": [
                    1910,
                    774
                ],
                "LOGIC_PRIORITY": [
                    1940,
                    775
                ],
                "STRING_PRIORITY": [
                    776,
                    1890
                ],
                "COMPARATOR_PRIORITY": [
                    1925,
                    777,
                    1937,
                    1913,
                    1883
                ],
                "MATH_PRIORITIES": [
                    1880,
                    778
                ],
                "DOT_PRIORITY": [
                    1873,
                    794,
                    2269,
                    3166
                ],
                "depth": [
                    2976,
                    801,
                    2981,
                    2984,
                    1291,
                    1292,
                    2987,
                    1102,
                    1295,
                    2989,
                    1297,
                    1301,
                    2968,
                    924,
                    1341,
                    1087
                ],
                "bracket_match": [
                    802
                ],
                "Factory": [
                    802,
                    803,
                    1262,
                    1365,
                    925,
                    926,
                    927
                ],
                "dict": [
                    802,
                    803
                ],
                "delimiters": [
                    803
                ],
                "previous": [
                    1888,
                    1920,
                    1921,
                    1922,
                    804,
                    1932,
                    1933,
                    1934,
                    1871,
                    1887
                ],
                "Optional": [
                    804,
                    1832,
                    1834,
                    1260,
                    915,
                    1814,
                    1016,
                    3128
                ],
                "_for_loop_variable": [
                    805
                ],
                "_lambda_arguments": [
                    806
                ],
                "leaf.type": [
                    899,
                    908,
                    1165,
                    2587,
                    1054,
                    3231,
                    2347,
                    941,
                    945,
                    823,
                    1848,
                    1593,
                    828,
                    1981,
                    830,
                    2108,
                    2750,
                    1218,
                    2114,
                    1220,
                    2757,
                    2759,
                    841,
                    842,
                    969,
                    1868,
                    1102,
                    1876,
                    1880,
                    1882,
                    1886,
                    1892,
                    877,
                    2158,
                    2671,
                    3183,
                    2673,
                    886,
                    3190,
                    2808
                ],
                "token.COMMENT": [
                    1408,
                    1123,
                    823,
                    1982,
                    1599
                ],
                "self.maybe_decrement_after_for_loop_variable": [
                    826
                ],
                "self.maybe_decrement_after_lambda_arguments": [
                    827
                ],
                "CLOSING_BRACKETS": [
                    2757,
                    2759,
                    1065,
                    1579,
                    1580,
                    1581,
                    2108,
                    1871,
                    2158,
                    3179,
                    3183,
                    828
                ],
                "self.depth": [
                    832,
                    833,
                    1185,
                    1219,
                    900,
                    1221,
                    842,
                    843,
                    909,
                    878,
                    917,
                    887,
                    829,
                    830
                ],
                "opening_bracket": [
                    2180,
                    2183,
                    2184,
                    2202,
                    2204,
                    2740,
                    830,
                    831,
                    2754,
                    2755,
                    2756,
                    2761,
                    2771,
                    2150,
                    2154,
                    2159,
                    2680,
                    2681,
                    2682
                ],
                "self.bracket_match.pop": [
                    830
                ],
                "self.bracket_match": [
                    842,
                    850,
                    830,
                    917
                ],
                "leaf.opening_bracket": [
                    3183,
                    2159,
                    2771,
                    2109,
                    831
                ],
                "leaf.bracket_depth": [
                    832,
                    1101,
                    2294,
                    2295,
                    1055
                ],
                "delim": [
                    834,
                    835,
                    836,
                    838,
                    839,
                    840
                ],
                "is_split_before_delimiter": [
                    834
                ],
                "self.previous": [
                    834,
                    835,
                    836,
                    838,
                    844
                ],
                "self.delimiters": [
                    865,
                    836,
                    869,
                    840,
                    858
                ],
                "id": [
                    2688,
                    2753,
                    836,
                    2758,
                    840,
                    2761,
                    2158,
                    2768,
                    2194,
                    2773,
                    2265,
                    2299
                ],
                "is_split_after_delimiter": [
                    838
                ],
                "OPENING_BRACKETS": [
                    2114,
                    1667,
                    841,
                    1578,
                    3179,
                    1580,
                    1613,
                    2764,
                    3214,
                    1779,
                    3190,
                    3231
                ],
                "BRACKET": [
                    1577,
                    842,
                    1579,
                    1578
                ],
                "self.maybe_increment_lambda_arguments": [
                    845
                ],
                "self.maybe_increment_for_loop_variable": [
                    846
                ],
                "max": [
                    858
                ],
                "k": [
                    858
                ],
                "self.delimiters.items": [
                    858
                ],
                "priority": [
                    868,
                    869
                ],
                "self.max_delimiter_priority": [
                    868
                ],
                "sum": [
                    869
                ],
                "self.delimiters.values": [
                    869
                ],
                "token.NAME": [
                    1793,
                    1921,
                    899,
                    996,
                    1476,
                    1892,
                    2563,
                    1801,
                    877,
                    1933,
                    2350,
                    2803,
                    886,
                    2808,
                    1019,
                    1661,
                    1022
                ],
                "leaf.value": [
                    899,
                    2436,
                    1928,
                    2450,
                    1939,
                    2348,
                    941,
                    2604,
                    3124,
                    3125,
                    1595,
                    2749,
                    2760,
                    2383,
                    2384,
                    2389,
                    2400,
                    1896,
                    877,
                    2413,
                    1903,
                    2672,
                    2417,
                    2674,
                    1909,
                    886,
                    2421,
                    1912,
                    2809,
                    1916
                ],
                "self._for_loop_variable": [
                    888,
                    886,
                    879
                ],
                "self._lambda_arguments": [
                    908,
                    901,
                    910
                ],
                "token.COLON": [
                    1603,
                    908,
                    1645,
                    1616,
                    945,
                    1617,
                    1784
                ],
                "self.bracket_match.get": [
                    917
                ],
                "token.RSQB": [
                    1073,
                    3209,
                    917,
                    1577
                ],
                "leaves": [
                    1186,
                    1187,
                    1189,
                    2121,
                    2122,
                    925,
                    2174,
                    2175
                ],
                "comments": [
                    926
                ],
                "bracket_tracker": [
                    927
                ],
                "BracketTracker": [
                    2651,
                    927
                ],
                "inside_brackets": [
                    928,
                    2364
                ],
                "should_explode": [
                    929,
                    2204
                ],
                "has_value": [
                    941,
                    942
                ],
                "BRACKETS": [
                    1580,
                    941
                ],
                "leaf.value.strip": [
                    941
                ],
                "self.is_class_paren_empty": [
                    945
                ],
                "self.leaves": [
                    1155,
                    1160,
                    1034,
                    1036,
                    1037,
                    1038,
                    1039,
                    1047,
                    1048,
                    1053,
                    1186,
                    1063,
                    1064,
                    1197,
                    946,
                    947,
                    1074,
                    957,
                    1214,
                    1217,
                    1090,
                    969,
                    1097,
                    1232,
                    979,
                    984,
                    989,
                    996,
                    997,
                    1126,
                    1003,
                    1011,
                    1142,
                    1016
                ],
                "preformatted": [
                    953,
                    947,
                    974
                ],
                "whitespace": [
                    950
                ],
                "self.is_complex_subscript": [
                    951
                ],
                "self.inside_brackets": [
                    953
                ],
                "self.bracket_tracker.mark": [
                    954
                ],
                "self.bracket_tracker": [
                    1165,
                    954,
                    965,
                    1118
                ],
                "self.maybe_remove_trailing_comma": [
                    955
                ],
                "self.append_comment": [
                    956
                ],
                "self.leaves.append": [
                    1217,
                    957,
                    1214
                ],
                "self.bracket_tracker.depth": [
                    965
                ],
                "self.is_comment": [
                    966
                ],
                "self.append": [
                    974
                ],
                "type": [
                    2308,
                    2309,
                    1036,
                    1038,
                    1047,
                    2712,
                    1064,
                    2612,
                    2613,
                    2614,
                    2764,
                    979,
                    984,
                    1377,
                    2530,
                    2531,
                    996,
                    1380,
                    1384,
                    2792,
                    2549,
                    2554
                ],
                "property": [
                    1026,
                    1000,
                    1007,
                    976,
                    1042,
                    981,
                    2911,
                    986,
                    991
                ],
                "is_import": [
                    989
                ],
                "value": [
                    2400,
                    2401,
                    2978,
                    2979,
                    2404,
                    997,
                    2407,
                    2983,
                    2984,
                    2987,
                    2604,
                    1037,
                    2605,
                    1039,
                    2484,
                    1048,
                    2972
                ],
                "self.is_class": [
                    1035,
                    1003
                ],
                "token.DOT": [
                    1797,
                    1766,
                    1798,
                    2633,
                    1004,
                    1805,
                    1710,
                    1743,
                    1868
                ],
                "first_leaf": [
                    1285,
                    1286,
                    1288,
                    1011,
                    1019,
                    1020
                ],
                "second_leaf": [
                    1016,
                    1018,
                    1021,
                    1022,
                    1023
                ],
                "first_leaf.type": [
                    1019,
                    1020
                ],
                "first_leaf.value": [
                    1019
                ],
                "token.ASYNC": [
                    1512,
                    1020
                ],
                "second_leaf.type": [
                    1022
                ],
                "second_leaf.value": [
                    1023
                ],
                "token.LPAR": [
                    1728,
                    2530,
                    2183,
                    1577,
                    1706,
                    2474,
                    1036,
                    2573,
                    2543,
                    2671,
                    2481,
                    2514,
                    1747,
                    1750,
                    2487,
                    2648,
                    2493
                ],
                "token.RPAR": [
                    2531,
                    3204,
                    1577,
                    1706,
                    2475,
                    2186,
                    2573,
                    1038,
                    2648,
                    2545,
                    2514,
                    2673,
                    2488,
                    2494
                ],
                "token.STRING": [
                    1888,
                    2791,
                    2704,
                    1047,
                    1433,
                    1886
                ],
                "value.startswith": [
                    1048
                ],
                "sys.maxsize": [
                    2274,
                    1051
                ],
                "depth_limit": [
                    1055
                ],
                "token.COMMA": [
                    2688,
                    2308,
                    1701,
                    2311,
                    1064,
                    1672,
                    1581,
                    1102,
                    1677,
                    2712,
                    1620,
                    2549,
                    1718,
                    1848,
                    2554,
                    1694
                ],
                "closing.type": [
                    1065,
                    1069,
                    1073
                ],
                "closing": [
                    1089,
                    1065,
                    1098,
                    1069,
                    1073,
                    1087
                ],
                "token.RBRACE": [
                    1577,
                    1069,
                    3205
                ],
                "self.remove_trailing_comma": [
                    1082,
                    1076,
                    1109,
                    1070
                ],
                "comma": [
                    1074,
                    1075
                ],
                "comma.parent": [
                    1075
                ],
                "comma.parent.type": [
                    1075
                ],
                "self.is_import": [
                    1081
                ],
                "closing.bracket_depth": [
                    1087
                ],
                "commas": [
                    1088,
                    1105,
                    1108,
                    1103
                ],
                "opening": [
                    1089,
                    1091
                ],
                "closing.opening_bracket": [
                    1089
                ],
                "_opening_index": [
                    1097,
                    1090
                ],
                "enumerate": [
                    1090,
                    2468,
                    2288,
                    3121,
                    1973,
                    1142,
                    2334
                ],
                "bracket_depth": [
                    1101,
                    1102
                ],
                "leaf.parent": [
                    1929,
                    1930,
                    1939,
                    2587,
                    2590,
                    2346,
                    1594,
                    1869,
                    1870,
                    1104,
                    1877,
                    1878,
                    1897,
                    1898,
                    1904,
                    1905,
                    1909,
                    1917,
                    1918
                ],
                "leaf.parent.type": [
                    1898,
                    1930,
                    1870,
                    1104,
                    1905,
                    1909,
                    1878,
                    1918
                ],
                "comment.type": [
                    1128,
                    1408,
                    1123,
                    1117
                ],
                "comment": [
                    1408,
                    1410,
                    1157,
                    1159,
                    1417,
                    1191,
                    1192,
                    3128,
                    3129,
                    3130,
                    1985,
                    1986,
                    1988,
                    1991,
                    1117,
                    1120,
                    1123,
                    1128,
                    1129,
                    1133,
                    1404,
                    1407
                ],
                "self.bracket_tracker.any_open_brackets": [
                    1118
                ],
                "comment.prefix": [
                    1120,
                    1129
                ],
                "self.comments.append": [
                    1133
                ],
                "self.comments": [
                    1156,
                    1157,
                    1159,
                    1191,
                    1133,
                    1197,
                    1149
                ],
                "_index": [
                    3182,
                    1141,
                    1142,
                    3225,
                    3196,
                    1150
                ],
                "_leaf": [
                    1142,
                    1143
                ],
                "index": [
                    2334,
                    2337,
                    3106,
                    2468,
                    3108,
                    3109,
                    2477,
                    3123,
                    1973,
                    2487,
                    2744,
                    3129,
                    3132,
                    1981,
                    2495,
                    2496,
                    2764,
                    2288,
                    2291,
                    1149,
                    1150
                ],
                "comment_after": [
                    2177,
                    2178,
                    2337,
                    2338,
                    2124,
                    2125,
                    2291,
                    2292,
                    1149,
                    1151
                ],
                "comma_index": [
                    1155,
                    1158,
                    1159
                ],
                "i": [
                    1156,
                    1157,
                    1159
                ],
                "comment_index": [
                    1157,
                    1158
                ],
                "self.leaves.pop": [
                    1160
                ],
                "open_lsqb": [
                    1170,
                    1164,
                    1167
                ],
                "token.LSQB": [
                    1577,
                    1715,
                    1165
                ],
                "self.bracket_tracker.get_open_lsqb": [
                    1165
                ],
                "subscript_start": [
                    1170,
                    1172,
                    1173,
                    1175,
                    1176,
                    1177
                ],
                "open_lsqb.next_sibling": [
                    1170
                ],
                "subscript_start.type": [
                    1173
                ],
                "syms.subscriptlist": [
                    1757,
                    1605,
                    1173
                ],
                "child_towards": [
                    1175
                ],
                "any": [
                    1176
                ],
                "n.type": [
                    2704,
                    1177,
                    2710
                ],
                "n": [
                    2703,
                    2704,
                    2705,
                    2710,
                    2711,
                    2712,
                    1177,
                    2714
                ],
                "subscript_start.pre_order": [
                    1177
                ],
                "iter": [
                    1186,
                    1508
                ],
                "first": [
                    1187,
                    1188,
                    3172,
                    3179,
                    3183,
                    2512,
                    2514,
                    3218,
                    2516,
                    2646,
                    2648
                ],
                "next": [
                    1187,
                    1515
                ],
                "res": [
                    1188,
                    1190,
                    1192,
                    1193,
                    1231,
                    1233,
                    1234,
                    1817,
                    1818,
                    1819,
                    1820,
                    1823
                ],
                "first.prefix": [
                    1188
                ],
                "first.value": [
                    2516,
                    1188
                ],
                "generate_comments": [
                    1404,
                    1212,
                    2463
                ],
                "FormatOn": [
                    1989,
                    1425,
                    1213,
                    1543
                ],
                "f_on.leaf_from_consumed": [
                    1214
                ],
                "f_on": [
                    1544,
                    1428,
                    1214
                ],
                "previous_line": [
                    1260
                ],
                "previous_after": [
                    1261
                ],
                "previous_defs": [
                    1262
                ],
                "UnformattedLines": [
                    1392,
                    2034,
                    1422,
                    1270
                ],
                "self._maybe_empty_lines": [
                    1273
                ],
                "self.previous_after": [
                    1274,
                    1275
                ],
                "self.previous_line": [
                    1346,
                    1315,
                    1316,
                    1347,
                    1341,
                    1322,
                    1324,
                    1325,
                    1338,
                    1302,
                    1306,
                    1339,
                    1276,
                    1309,
                    1310
                ],
                "max_allowed": [
                    1280,
                    1282,
                    1287
                ],
                "current_line.depth": [
                    1281,
                    1316,
                    1322,
                    1291,
                    1333,
                    1309
                ],
                "self.is_pyi": [
                    1282,
                    1321,
                    1483,
                    1294,
                    1492,
                    1500
                ],
                "current_line.leaves": [
                    2309,
                    1283,
                    2308,
                    1285
                ],
                "first_leaf.prefix.count": [
                    1286
                ],
                "first_leaf.prefix": [
                    1288,
                    1286
                ],
                "min": [
                    2858,
                    2294,
                    1287
                ],
                "self.previous_defs": [
                    1301,
                    1292,
                    1293
                ],
                "self.previous_defs.pop": [
                    1293
                ],
                "is_decorator": [
                    1298,
                    1299,
                    1300
                ],
                "current_line.is_decorator": [
                    1298
                ],
                "current_line.is_def": [
                    1299
                ],
                "current_line.is_class": [
                    1299,
                    1324
                ],
                "self.previous_defs.append": [
                    1301
                ],
                "self.previous_line.is_decorator": [
                    1306
                ],
                "self.previous_line.depth": [
                    1322,
                    1341,
                    1316,
                    1309
                ],
                "self.previous_line.is_class": [
                    1347,
                    1324,
                    1310
                ],
                "self.previous_line.is_def": [
                    1310
                ],
                "self.previous_line.is_comment": [
                    1315
                ],
                "newlines": [
                    1323,
                    1326,
                    1328,
                    1330,
                    1332,
                    1333,
                    1334,
                    1335
                ],
                "current_line.is_stub_class": [
                    1325
                ],
                "self.previous_line.is_stub_class": [
                    1325
                ],
                "self.previous_line.is_import": [
                    1339
                ],
                "current_line.is_import": [
                    1340
                ],
                "current_line.is_triple_quoted_string": [
                    1348
                ],
                "remove_u_prefix": [
                    2387,
                    1366
                ],
                "Type": [
                    1368
                ],
                "self.current_line": [
                    1376,
                    1377,
                    1378,
                    1410,
                    1380,
                    1542,
                    1383,
                    1384,
                    1417,
                    1392,
                    1402,
                    1437,
                    1407
                ],
                "self.current_line.__class__": [
                    1377
                ],
                "self.current_line.depth": [
                    1378,
                    1380
                ],
                "complete_line": [
                    1384,
                    1385,
                    1383
                ],
                "complete_line.depth": [
                    1384
                ],
                "self.visit_unformatted": [
                    1394
                ],
                "visit": [
                    1397
                ],
                "any_open_brackets": [
                    1432,
                    1402,
                    1405
                ],
                "self.current_line.bracket_tracker.any_open_brackets": [
                    1402
                ],
                "self.current_line.bracket_tracker": [
                    1402
                ],
                "self.current_line.append": [
                    1410,
                    1542,
                    1417,
                    1437,
                    1407
                ],
                "self.line": [
                    1506,
                    1411,
                    1443,
                    1477,
                    1527,
                    1415,
                    1545,
                    1418,
                    1451,
                    1422,
                    1550,
                    1458,
                    1522,
                    1495,
                    1497,
                    1532,
                    1501
                ],
                "FormatOff": [
                    2464,
                    1993,
                    1420,
                    1997
                ],
                "f_off.trim_prefix": [
                    1421
                ],
                "f_off": [
                    1421
                ],
                "f_on.trim_prefix": [
                    1544,
                    1428
                ],
                "normalize_prefix": [
                    1432,
                    2245,
                    2167,
                    2119
                ],
                "self.normalize_strings": [
                    1433
                ],
                "normalize_string_prefix": [
                    1434
                ],
                "self.remove_u_prefix": [
                    1434
                ],
                "normalize_string_quotes": [
                    1435
                ],
                "visit_default": [
                    1438
                ],
                "Set": [
                    2726,
                    2743,
                    2736,
                    2579,
                    1555,
                    1461,
                    2453,
                    2742,
                    2780
                ],
                "normalize_invisible_parens": [
                    1474
                ],
                "parens": [
                    1474
                ],
                "child.type": [
                    2784,
                    1476,
                    2470,
                    2631,
                    1512,
                    2481,
                    2485
                ],
                "child.value": [
                    2498,
                    2483,
                    1476
                ],
                "keywords": [
                    1476
                ],
                "is_stub_suite": [
                    1483,
                    1500
                ],
                "is_suite_like": [
                    1490,
                    1491
                ],
                "node.parent": [
                    1828,
                    1835,
                    1836,
                    1490,
                    1500
                ],
                "node.parent.type": [
                    1490
                ],
                "is_stub_body": [
                    2618,
                    1492
                ],
                "children": [
                    1515,
                    1508,
                    1509
                ],
                "internal_stmt": [
                    1515,
                    1516
                ],
                "internal_stmt.children": [
                    1516
                ],
                "token.ENDMARKER": [
                    1548,
                    1981
                ],
                "self.visit_stmt": [
                    1554
                ],
                "\u00d8": [
                    1568,
                    1569,
                    1571,
                    1555,
                    1563,
                    1565,
                    1566,
                    1567
                ],
                "self.visit_assert_stmt": [
                    1556
                ],
                "self.visit_if_stmt": [
                    1557
                ],
                "self.visit_while_stmt": [
                    1560
                ],
                "self.visit_for_stmt": [
                    1561
                ],
                "self.visit_try_stmt": [
                    1562
                ],
                "self.visit_except_clause": [
                    1565
                ],
                "self.visit_with_stmt": [
                    1566
                ],
                "self.visit_funcdef": [
                    1567
                ],
                "self.visit_classdef": [
                    1568
                ],
                "self.visit_expr_stmt": [
                    1569
                ],
                "self.visit_return_stmt": [
                    1570
                ],
                "self.visit_import_from": [
                    1571
                ],
                "self.visit_async_funcdef": [
                    1572
                ],
                "self.visit_async_stmt": [
                    1572
                ],
                "self.visit_decorated": [
                    1573
                ],
                "self.visit_decorators": [
                    1573
                ],
                "IMPLICIT_TUPLE": [
                    1576,
                    2552
                ],
                "syms.testlist": [
                    1576
                ],
                "syms.testlist_star_expr": [
                    1576
                ],
                "syms.exprlist": [
                    1576
                ],
                "token.LBRACE": [
                    1577
                ],
                "BRACKET.keys": [
                    1578
                ],
                "BRACKET.values": [
                    1579
                ],
                "ALWAYS_NO_SPACE": [
                    1596,
                    1581
                ],
                "SPACE": [
                    1591,
                    1803,
                    1647,
                    1811,
                    1623,
                    1758
                ],
                "DOUBLESPACE": [
                    1592,
                    1600
                ],
                "t": [
                    1793,
                    1603,
                    1797,
                    1766,
                    1801,
                    1706,
                    2347,
                    1710,
                    2350,
                    1616,
                    1715,
                    1747,
                    1685,
                    1593,
                    1723,
                    1596,
                    1599
                ],
                "p.type": [
                    1796,
                    1670,
                    1675,
                    1680,
                    1808,
                    2591,
                    1697,
                    2599,
                    1704,
                    2352,
                    2353,
                    1721,
                    1603,
                    1734,
                    1738,
                    1746,
                    1753,
                    1765,
                    1770,
                    1775
                ],
                "syms.subscript": [
                    1753,
                    1604,
                    1785,
                    1646
                ],
                "syms.sliceop": [
                    1606,
                    1646,
                    1808,
                    1753,
                    1786
                ],
                "prev": [
                    1667,
                    1798,
                    1672,
                    1677,
                    1805,
                    1682,
                    1686,
                    1689,
                    1692,
                    1694,
                    1699,
                    1709,
                    1718,
                    1726,
                    1731,
                    1610,
                    1611,
                    1739,
                    1995,
                    1996,
                    1750,
                    1755,
                    1766,
                    1772,
                    1777
                ],
                "leaf.prev_sibling": [
                    1610
                ],
                "prevp": [
                    1700,
                    1701,
                    1790,
                    1711,
                    1712,
                    1727,
                    1728,
                    1612,
                    1613,
                    1742,
                    1743,
                    1617,
                    1620,
                    1625,
                    1626,
                    1627,
                    1635,
                    1639,
                    1641,
                    1642,
                    1645,
                    1646,
                    1650,
                    1651,
                    1652,
                    1778,
                    1779,
                    1782,
                    1784,
                    1657,
                    1658,
                    1659,
                    1660,
                    1661,
                    1662
                ],
                "preceding_leaf": [
                    1700,
                    1995,
                    1612,
                    1742,
                    1711,
                    1778,
                    1727
                ],
                "prevp.type": [
                    1728,
                    1701,
                    1641,
                    1613,
                    1645,
                    1743,
                    1712,
                    1617,
                    1657,
                    1779,
                    1620,
                    1652,
                    1784,
                    1625,
                    1790
                ],
                "complex_subscript": [
                    1762,
                    1620,
                    1647
                ],
                "token.EQUAL": [
                    1731,
                    1689,
                    1685,
                    1625,
                    1723,
                    1790
                ],
                "prevp.parent": [
                    1635,
                    1659,
                    1646,
                    1650,
                    1651,
                    1658,
                    1782,
                    1626,
                    1627
                ],
                "prevp.parent.type": [
                    1635,
                    1659,
                    1646,
                    1651,
                    1627
                ],
                "syms.parameters": [
                    1670,
                    1630
                ],
                "prevp.prefix": [
                    1639
                ],
                "is_vararg": [
                    1642,
                    1862,
                    2295
                ],
                "syms.factor": [
                    1651,
                    1878,
                    1775
                ],
                "prevp.prev_sibling": [
                    1660,
                    1661,
                    1662
                ],
                "prevp.prev_sibling.type": [
                    1661
                ],
                "prevp.prev_sibling.value": [
                    1662
                ],
                "prev.type": [
                    1667,
                    1731,
                    1798,
                    1672,
                    1772,
                    1677,
                    1805,
                    1996,
                    1686,
                    1718,
                    1750,
                    1689,
                    1694
                ],
                "syms.tname": [
                    1697,
                    1686
                ],
                "prev.prefix": [
                    1692
                ],
                "token.NUMBER": [
                    1712,
                    1793
                ],
                "syms.decorator": [
                    1734
                ],
                "syms.dotted_name": [
                    1738,
                    1870
                ],
                "p.parent": [
                    2594,
                    2597,
                    1756,
                    1757
                ],
                "p.parent.type": [
                    1757
                ],
                "prevp_parent": [
                    1784,
                    1790,
                    1782,
                    1783
                ],
                "prevp_parent.type": [
                    1784,
                    1790
                ],
                "syms.import_from": [
                    1796,
                    2797,
                    1870,
                    2478,
                    2353,
                    2681
                ],
                "node.prev_sibling": [
                    1817
                ],
                "res.leaves": [
                    1823
                ],
                "descendant": [
                    1834
                ],
                "ancestor": [
                    1835
                ],
                "previous.type": [
                    1888,
                    1921,
                    1933,
                    1871
                ],
                "syms.comp_for": [
                    1898
                ],
                "syms.old_comp_for": [
                    1898
                ],
                "syms.comp_if": [
                    1905
                ],
                "syms.old_comp_if": [
                    1905
                ],
                "syms.comp_op": [
                    1930,
                    1918
                ],
                "previous.value": [
                    1922,
                    1934
                ],
                "nlines": [
                    1977,
                    1986,
                    1972,
                    1999
                ],
                "p.split": [
                    1973
                ],
                "line.lstrip": [
                    1975
                ],
                "line.startswith": [
                    1978
                ],
                "comment_type": [
                    1984,
                    1986,
                    1982,
                    1992
                ],
                "make_comment": [
                    1985
                ],
                "content": [
                    2016,
                    2017,
                    2018,
                    2010,
                    2011,
                    2014,
                    2015
                ],
                "content.rstrip": [
                    2010
                ],
                "line.is_comment": [
                    2034
                ],
                "line_str": [
                    3140,
                    3141,
                    3143,
                    3144,
                    2038,
                    2040,
                    2073
                ],
                "strip": [
                    2224,
                    2073,
                    3141,
                    2038
                ],
                "line.should_explode": [
                    2039
                ],
                "is_line_short_enough": [
                    2053,
                    2039
                ],
                "split_funcs": [
                    2063,
                    2065,
                    2066,
                    2045,
                    2047
                ],
                "line.is_def": [
                    2046
                ],
                "left_hand_split": [
                    2047
                ],
                "omit": [
                    2051,
                    2052,
                    2158,
                    2736,
                    2737,
                    2194,
                    2197,
                    2773,
                    2774,
                    2776
                ],
                "generate_trailers_to_omit": [
                    2051
                ],
                "right_hand_split": [
                    2052,
                    2060,
                    2197
                ],
                "line.inside_brackets": [
                    2273,
                    2285,
                    2062,
                    2321,
                    2331,
                    2303
                ],
                "delimiter_split": [
                    2063
                ],
                "standalone_comment_split": [
                    2063
                ],
                "rhs": [
                    2065,
                    2063
                ],
                "split_func": [
                    2072,
                    2242,
                    2066,
                    2244
                ],
                "l": [
                    2244,
                    2245,
                    2246,
                    2072,
                    2073,
                    2077
                ],
                "CannotSplit": [
                    2271,
                    2267,
                    2319,
                    2227,
                    2261,
                    2230,
                    2199,
                    2074,
                    2171,
                    2079
                ],
                "result.extend": [
                    2076
                ],
                "head": [
                    2179,
                    2121,
                    2126,
                    2127,
                    2097,
                    2205,
                    2174,
                    2143
                ],
                "line.depth": [
                    2144,
                    2145,
                    2273,
                    2303,
                    2285,
                    3181,
                    2097,
                    2098,
                    2099,
                    2321,
                    2739,
                    3223,
                    2331,
                    2143
                ],
                "body": [
                    2432,
                    2433,
                    2179,
                    2435,
                    2436,
                    2442,
                    2195,
                    2204,
                    2205,
                    2225,
                    2098,
                    2121,
                    2126,
                    2127,
                    2144,
                    2421,
                    2423,
                    2429,
                    2174
                ],
                "tail": [
                    2145,
                    2179,
                    2121,
                    2126,
                    2127,
                    2224,
                    2099,
                    2205,
                    2174
                ],
                "tail_leaves": [
                    2146,
                    2149,
                    2121,
                    2155,
                    2157,
                    2162,
                    2100,
                    2174,
                    2111
                ],
                "body_leaves": [
                    2147,
                    2116,
                    2118,
                    2119,
                    2121,
                    2153,
                    2155,
                    2161,
                    2163,
                    2101,
                    2166,
                    2167,
                    2107,
                    2174,
                    2111
                ],
                "head_leaves": [
                    2113,
                    2148,
                    2121,
                    2155,
                    2164,
                    2102,
                    2103,
                    2168,
                    2174,
                    2111
                ],
                "current_leaves": [
                    2112,
                    2113,
                    2116,
                    2149,
                    2153,
                    2155,
                    2156,
                    2157,
                    2161,
                    2103,
                    2107,
                    2111
                ],
                "matching_bracket": [
                    2104,
                    2115,
                    2109
                ],
                "line.leaves": [
                    3170,
                    3172,
                    3173,
                    3174,
                    3175,
                    2152,
                    2764,
                    2288,
                    2259,
                    3123,
                    2105,
                    3196,
                    2334,
                    2687
                ],
                "current_leaves.append": [
                    2112,
                    2156
                ],
                "result.append": [
                    2176,
                    2178,
                    2123,
                    2125
                ],
                "line.comments_after": [
                    2177,
                    2337,
                    2124,
                    2291,
                    3129
                ],
                "bracket_split_succeeded_or_raise": [
                    2179,
                    2126
                ],
                "Collection": [
                    2133
                ],
                "closing_bracket": [
                    2180,
                    2151,
                    2186,
                    2187,
                    2160,
                    2194,
                    2772,
                    2741,
                    2773,
                    2777,
                    2203
                ],
                "reversed": [
                    2152,
                    3121,
                    3107
                ],
                "tail_leaves.reverse": [
                    2162
                ],
                "body_leaves.reverse": [
                    2163
                ],
                "head_leaves.reverse": [
                    2164
                ],
                "opening_bracket.type": [
                    2183
                ],
                "opening_bracket.value": [
                    2184,
                    2682
                ],
                "closing_bracket.type": [
                    2186
                ],
                "closing_bracket.value": [
                    2187
                ],
                "line.contains_standalone_comments": [
                    3145,
                    2189,
                    2318
                ],
                "line.is_import": [
                    2192
                ],
                "can_omit_invisible_parens": [
                    2195
                ],
                "ensure_visible": [
                    2202,
                    2203
                ],
                "body.should_explode": [
                    2204
                ],
                "tail_len": [
                    2224,
                    2226,
                    2229,
                    2232
                ],
                "l.leaves": [
                    2245
                ],
                "wraps": [
                    2242
                ],
                "split_wrapper": [
                    2248
                ],
                "last_leaf": [
                    2688,
                    2265,
                    2259,
                    2687
                ],
                "bt": [
                    3161,
                    2657,
                    2659,
                    2654,
                    2299,
                    3156,
                    3157,
                    2263,
                    2265,
                    3162,
                    2651,
                    2270
                ],
                "line.bracket_tracker": [
                    2689,
                    3156,
                    2263
                ],
                "delimiter_priority": [
                    2307,
                    2265,
                    2300,
                    2269,
                    2270
                ],
                "bt.max_delimiter_priority": [
                    3161,
                    2265,
                    2659
                ],
                "bt.delimiter_count_with_priority": [
                    3162,
                    2270
                ],
                "lowest_depth": [
                    2274,
                    2294,
                    2295
                ],
                "trailing_comma_safe": [
                    2306,
                    2298,
                    2275
                ],
                "current_line.append_safe": [
                    2281,
                    2327
                ],
                "current_line.append": [
                    2332,
                    2286,
                    2311
                ],
                "append_to_line": [
                    2289,
                    2338,
                    2292,
                    2335
                ],
                "leaf_priority": [
                    2299,
                    2300
                ],
                "bt.delimiters.get": [
                    2299
                ],
                "bt.delimiters": [
                    2299,
                    3157
                ],
                "dont_increase_indentation": [
                    2315,
                    2251
                ],
                "syms.import_name": [
                    2352
                ],
                "spl": [
                    2368,
                    2365,
                    2366,
                    2367
                ],
                "leaf.prefix.split": [
                    2365
                ],
                "nl_count": [
                    2369,
                    2370,
                    2367
                ],
                "count": [
                    2367
                ],
                "match": [
                    2384,
                    2385,
                    2389,
                    2383
                ],
                "re.match": [
                    2383
                ],
                "re.DOTALL": [
                    2383
                ],
                "orig_prefix": [
                    2385,
                    2386
                ],
                "match.group": [
                    2385,
                    2389
                ],
                "new_prefix": [
                    2386,
                    2388,
                    2389
                ],
                "orig_prefix.lower": [
                    2386
                ],
                "new_prefix.replace": [
                    2388
                ],
                "leaf.value.lstrip": [
                    2400,
                    2604
                ],
                "orig_quote": [
                    2436,
                    2405,
                    2437,
                    2408,
                    2411,
                    2413,
                    2447,
                    2420,
                    2421
                ],
                "new_quote": [
                    2432,
                    2406,
                    2438,
                    2439,
                    2409,
                    2412,
                    2418,
                    2419,
                    2450
                ],
                "first_quote_pos": [
                    2417,
                    2421,
                    2413,
                    2414
                ],
                "leaf.value.find": [
                    2413
                ],
                "prefix": [
                    2417,
                    2450,
                    2436,
                    2422
                ],
                "unescaped_new_quote": [
                    2418,
                    2438,
                    2423
                ],
                "escaped_new_quote": [
                    2432,
                    2419
                ],
                "escaped_orig_quote": [
                    2420,
                    2437
                ],
                "prefix.casefold": [
                    2422
                ],
                "unescaped_new_quote.search": [
                    2423
                ],
                "new_body": [
                    2432,
                    2433,
                    2435,
                    2437,
                    2438,
                    2439,
                    2441,
                    2443,
                    2450,
                    2429
                ],
                "sub_twice": [
                    2432,
                    2437,
                    2438
                ],
                "orig_escape_count": [
                    2442,
                    2444,
                    2447
                ],
                "body.count": [
                    2442
                ],
                "new_escape_count": [
                    2443,
                    2444,
                    2447
                ],
                "new_body.count": [
                    2443
                ],
                "check_lpar": [
                    2498,
                    2467,
                    2469
                ],
                "maybe_make_parens_invisible_in_atom": [
                    2519,
                    2471
                ],
                "is_one_tuple": [
                    2472,
                    2506
                ],
                "lpar": [
                    2496,
                    2474,
                    2572,
                    2541,
                    2477,
                    2543,
                    2573,
                    2493
                ],
                "rpar": [
                    2496,
                    2475,
                    2572,
                    2541,
                    2477,
                    2573,
                    2545,
                    2494
                ],
                "child.remove": [
                    2476,
                    2495
                ],
                "node.insert_child": [
                    2496,
                    2477,
                    2487
                ],
                "node.append_child": [
                    2488
                ],
                "is_multiline_string": [
                    3218,
                    2491
                ],
                "parens_after": [
                    2498
                ],
                "is_empty_tuple": [
                    2505
                ],
                "is_yield": [
                    2507,
                    2574
                ],
                "max_delimiter_priority_in_atom": [
                    2508
                ],
                "last": [
                    3204,
                    3205,
                    3175,
                    3209,
                    3210,
                    3211,
                    2513,
                    2514,
                    2517,
                    2647,
                    2648,
                    3227
                ],
                "first.type": [
                    2648,
                    2514,
                    3179
                ],
                "last.type": [
                    3204,
                    3205,
                    3209,
                    2514,
                    2648
                ],
                "last.value": [
                    2517
                ],
                "gexp": [
                    2544,
                    2549,
                    2541
                ],
                "lpar.type": [
                    2573,
                    2543
                ],
                "gexp.type": [
                    2544
                ],
                "rpar.type": [
                    2545,
                    2573
                ],
                "gexp.children": [
                    2549
                ],
                "syms.yield_expr": [
                    2560
                ],
                "expr": [
                    2572,
                    2574
                ],
                "within": [
                    2599
                ],
                "syms.simple_stmt": [
                    2784,
                    2623
                ],
                "child.children": [
                    2786,
                    2790,
                    2632,
                    2633,
                    2792
                ],
                "all": [
                    2633
                ],
                "c": [
                    2656,
                    2652,
                    2653,
                    2654
                ],
                "bt.mark": [
                    2657,
                    2654
                ],
                "c.leaves": [
                    2656
                ],
                "opening_bracket.parent": [
                    2680,
                    2681
                ],
                "opening_bracket.parent.type": [
                    2681
                ],
                "last_leaf.type": [
                    2688
                ],
                "max_priority": [
                    2689,
                    2693,
                    3161,
                    3162,
                    3166
                ],
                "line.bracket_tracker.max_delimiter_priority": [
                    2689
                ],
                "node.pre_order": [
                    2703
                ],
                "value_head": [
                    2705,
                    2706
                ],
                "n.value": [
                    2705
                ],
                "n.children": [
                    2712,
                    2714,
                    2711
                ],
                "ch": [
                    2714,
                    2715,
                    2718,
                    2719
                ],
                "ch.type": [
                    2715,
                    2718
                ],
                "argch": [
                    2720,
                    2719
                ],
                "ch.children": [
                    2719
                ],
                "argch.type": [
                    2720
                ],
                "length": [
                    3226,
                    3181,
                    3228,
                    3186,
                    2739,
                    3124,
                    3187,
                    3223,
                    2746,
                    2745,
                    3130,
                    3132
                ],
                "optional_brackets": [
                    2753,
                    2761,
                    2742
                ],
                "inner_brackets": [
                    2758,
                    2743,
                    2768,
                    2774,
                    2775
                ],
                "leaf_length": [
                    3225,
                    3182,
                    3186,
                    2744,
                    2745,
                    3226,
                    2749
                ],
                "enumerate_with_length": [
                    2744,
                    3225,
                    3182
                ],
                "has_inline_comment": [
                    2749,
                    2750
                ],
                "optional_brackets.discard": [
                    2753
                ],
                "inner_brackets.add": [
                    2768,
                    2758
                ],
                "optional_brackets.add": [
                    2761
                ],
                "omit.add": [
                    2773
                ],
                "omit.update": [
                    2774
                ],
                "inner_brackets.clear": [
                    2775
                ],
                "imports": [
                    2809,
                    2804,
                    2782,
                    2812
                ],
                "first_child": [
                    2786,
                    2787,
                    2791,
                    2797,
                    2798,
                    2801
                ],
                "first_child.type": [
                    2797,
                    2791
                ],
                "module_name": [
                    2798,
                    2799
                ],
                "first_child.children": [
                    2801,
                    2798
                ],
                "module_name.value": [
                    2799
                ],
                "import_from_child": [
                    2801,
                    2802,
                    2803,
                    2804,
                    2806,
                    2807
                ],
                "import_from_child.type": [
                    2803,
                    2806
                ],
                "imports.add": [
                    2809,
                    2804
                ],
                "import_from_child.value": [
                    2804
                ],
                "syms.import_as_names": [
                    2806
                ],
                "import_from_child.children": [
                    2807
                ],
                "Pattern": [
                    2818,
                    2819,
                    3095
                ],
                "root.is_absolute": [
                    2827
                ],
                "path.iterdir": [
                    2828
                ],
                "path": [
                    3267,
                    2828,
                    2909
                ],
                "normalized_path": [
                    2832,
                    2841,
                    2829,
                    2831
                ],
                "as_posix": [
                    2829
                ],
                "relative_to": [
                    2829
                ],
                "child.resolve": [
                    2829
                ],
                "child.is_dir": [
                    2837,
                    2830
                ],
                "exclude_match": [
                    2832,
                    2833
                ],
                "exclude.search": [
                    2832
                ],
                "exclude_match.group": [
                    2833
                ],
                "report.path_ignored": [
                    2834
                ],
                "exclude.pattern": [
                    2834
                ],
                "child.is_file": [
                    2840
                ],
                "include_match": [
                    2841,
                    2842
                ],
                "include.search": [
                    2841
                ],
                "srcs": [
                    2858,
                    2855
                ],
                "resolve": [
                    2856,
                    2858
                ],
                "common_base": [
                    2858,
                    2859,
                    2861,
                    2862
                ],
                "common_base.is_dir": [
                    2859
                ],
                "directory": [
                    2862,
                    2863,
                    2864,
                    2866,
                    2867,
                    2869,
                    2870,
                    2872
                ],
                "common_base.parents": [
                    2862
                ],
                "is_dir": [
                    2866,
                    2863
                ],
                "is_file": [
                    2869
                ],
                "change_count": [
                    2882
                ],
                "same_count": [
                    2883
                ],
                "failure_count": [
                    2884
                ],
                "reformatted": [
                    2947,
                    2889,
                    2891,
                    2936,
                    2940
                ],
                "self.check": [
                    2889,
                    2925,
                    2935
                ],
                "self.verbose": [
                    2890,
                    2908,
                    2894
                ],
                "self.quiet": [
                    2890
                ],
                "self.change_count": [
                    2944,
                    2945,
                    2947,
                    2892,
                    2925
                ],
                "msg": [
                    2896,
                    2898,
                    2899
                ],
                "self.same_count": [
                    2900,
                    2949,
                    2950,
                    2951
                ],
                "message": [
                    2904,
                    2909
                ],
                "self.failure_count": [
                    2952,
                    2953,
                    2922,
                    2955,
                    2905
                ],
                "unchanged": [
                    2937,
                    2941,
                    2951
                ],
                "failed": [
                    2938,
                    2955,
                    2942
                ],
                "report.append": [
                    2946,
                    2954,
                    2951
                ],
                "click.style": [
                    2947,
                    2955
                ],
                "join": [
                    3011,
                    3012,
                    2957,
                    3061,
                    3004
                ],
                "ast.AST": [
                    2980,
                    2966,
                    2983
                ],
                "ast": [
                    2980,
                    2983,
                    2992,
                    2966,
                    3002
                ],
                "node.__class__.__name__": [
                    2968,
                    2989
                ],
                "node.__class__": [
                    2968,
                    2989
                ],
                "field": [
                    2976,
                    2970,
                    2972
                ],
                "node._fields": [
                    2970
                ],
                "AttributeError": [
                    2973
                ],
                "item": [
                    2979,
                    2980,
                    2981
                ],
                "_v": [
                    2984,
                    3011,
                    3012,
                    2981
                ],
                "value.__class__.__name__": [
                    2987
                ],
                "value.__class__": [
                    2987
                ],
                "src_ast": [
                    2992,
                    3011
                ],
                "ast.parse": [
                    2992,
                    3002
                ],
                "major": [
                    2994,
                    2997
                ],
                "minor": [
                    2994,
                    2997
                ],
                "sys.version_info": [
                    2994
                ],
                "AssertionError": [
                    3033,
                    2995,
                    3005,
                    3015
                ],
                "dst_ast": [
                    3002,
                    3012
                ],
                "log": [
                    3008,
                    3014,
                    3019,
                    3029,
                    3004,
                    3037
                ],
                "dump_to_file": [
                    3004,
                    3029,
                    3014
                ],
                "traceback.format_tb": [
                    3004
                ],
                "traceback": [
                    3004
                ],
                "exc.__traceback__": [
                    3004
                ],
                "src_ast_str": [
                    3011,
                    3013,
                    3014
                ],
                "dst_ast_str": [
                    3012,
                    3013,
                    3014
                ],
                "newdst": [
                    3027,
                    3028,
                    3031
                ],
                "tempfile.NamedTemporaryFile": [
                    3045
                ],
                "tempfile": [
                    3045
                ],
                "output": [
                    3048
                ],
                "f.name": [
                    3052
                ],
                "a_lines": [
                    3059,
                    3062
                ],
                "a.split": [
                    3059
                ],
                "a": [
                    3059
                ],
                "b_lines": [
                    3060,
                    3062
                ],
                "b.split": [
                    3060
                ],
                "b": [
                    3060
                ],
                "difflib.unified_diff": [
                    3062
                ],
                "difflib": [
                    3062
                ],
                "a_name": [
                    3062
                ],
                "b_name": [
                    3062
                ],
                "task.cancel": [
                    3082,
                    3070
                ],
                "to_cancel": [
                    3081,
                    3084,
                    3077,
                    3078
                ],
                "asyncio.Task.all_tasks": [
                    3077
                ],
                "task.done": [
                    3077
                ],
                "cf_logger": [
                    3090,
                    3091
                ],
                "logging.getLogger": [
                    3090
                ],
                "logging": [
                    3090,
                    3091
                ],
                "cf_logger.setLevel": [
                    3091
                ],
                "logging.CRITICAL": [
                    3091
                ],
                "loop.close": [
                    3092
                ],
                "regex.sub": [
                    3101
                ],
                "regex": [
                    3101
                ],
                "replacement": [
                    3101
                ],
                "original": [
                    3101
                ],
                "Sequence": [
                    3104,
                    3120
                ],
                "sequence": [
                    3106,
                    3107
                ],
                "element": [
                    3107,
                    3108
                ],
                "op": [
                    3123,
                    3119
                ],
                "cast": [
                    3119
                ],
                "enumerate_reversed": [
                    3121
                ],
                "comment.value": [
                    3130
                ],
                "second": [
                    3179,
                    3173
                ],
                "penultimate": [
                    3214,
                    3174
                ],
                "second.type": [
                    3179
                ],
                "remainder": [
                    3184,
                    3185,
                    3180,
                    3192
                ],
                "last.parent": [
                    3210,
                    3211
                ],
                "last.parent.type": [
                    3211
                ],
                "penultimate.type": [
                    3214
                ],
                "seen_other_brackets": [
                    3224,
                    3233,
                    3228
                ],
                "last.opening_bracket": [
                    3227
                ],
                "cache_file": [
                    3298,
                    3252,
                    3253,
                    3256,
                    3293
                ],
                "get_cache_file": [
                    3252,
                    3293
                ],
                "cache_file.exists": [
                    3253
                ],
                "cache_file.open": [
                    3256,
                    3298
                ],
                "fobj": [
                    3256,
                    3258,
                    3299,
                    3298
                ],
                "pickle.load": [
                    3258
                ],
                "pickle": [
                    3258,
                    3259,
                    3299
                ],
                "pickle.UnpicklingError": [
                    3259
                ],
                "stat": [
                    3267,
                    3268
                ],
                "path.stat": [
                    3267
                ],
                "stat.st_mtime": [
                    3268
                ],
                "stat.st_size": [
                    3268
                ],
                "todo": [
                    3283,
                    3286,
                    3279
                ],
                "cache.get": [
                    3282
                ],
                "todo.append": [
                    3283
                ],
                "done.append": [
                    3285
                ],
                "CACHE_DIR.exists": [
                    3295
                ],
                "CACHE_DIR.mkdir": [
                    3296
                ],
                "new_cache": [
                    3297,
                    3299
                ],
                "pickle.dump": [
                    3299
                ],
                "pickle.HIGHEST_PROTOCOL": [
                    3299
                ],
                "OSError": [
                    3300
                ],
                "__name__": [
                    3304
                ],
                "main": [
                    3305
                ]
            },
            "filtered_variables_in_file": {
                "__version__": [
                    250,
                    53,
                    47
                ],
                "DEFAULT_LINE_LENGTH": [
                    48,
                    161
                ],
                "DEFAULT_EXCLUDES": [
                    49,
                    223
                ],
                "DEFAULT_INCLUDES": [
                    210,
                    52
                ],
                "CACHE_DIR": [
                    3296,
                    73,
                    3242,
                    53,
                    3295
                ],
                "Path": [
                    2816,
                    385,
                    2817,
                    2821,
                    280,
                    2846,
                    293,
                    3238,
                    2856,
                    2858,
                    53,
                    3265,
                    69,
                    454,
                    2886,
                    3272,
                    3273,
                    342,
                    2902,
                    3290,
                    2907
                ],
                "user_cache_dir": [
                    53
                ],
                "FileContent": [
                    552,
                    57,
                    530
                ],
                "Encoding": [
                    58
                ],
                "Depth": [
                    802,
                    59
                ],
                "NodeType": [
                    802,
                    2579,
                    60
                ],
                "LeafID": [
                    803,
                    2726,
                    2736,
                    852,
                    2133,
                    2742,
                    2743,
                    61
                ],
                "Priority": [
                    803,
                    62
                ],
                "Index": [
                    3104,
                    3114,
                    3120,
                    926,
                    63
                ],
                "LN": [
                    64,
                    2621,
                    645,
                    2501,
                    2535,
                    1832,
                    2558,
                    1834,
                    1387,
                    2637,
                    656,
                    629,
                    1814,
                    1399,
                    1945,
                    2525,
                    1534
                ],
                "Union": [
                    64
                ],
                "Leaf": [
                    2311,
                    906,
                    1162,
                    1529,
                    915,
                    2323,
                    2579,
                    1814,
                    1945,
                    1819,
                    925,
                    926,
                    802,
                    931,
                    804,
                    1060,
                    808,
                    2344,
                    2474,
                    2475,
                    2602,
                    3114,
                    1584,
                    1840,
                    2808,
                    1203,
                    2100,
                    2101,
                    2102,
                    2358,
                    2487,
                    2488,
                    3128,
                    2491,
                    2493,
                    1854,
                    959,
                    64,
                    2494,
                    1986,
                    2498,
                    2787,
                    2376,
                    2633,
                    3120,
                    1236,
                    1240,
                    2392,
                    1114,
                    1244,
                    2653,
                    2146,
                    2147,
                    612,
                    100,
                    2148,
                    103,
                    871,
                    2277,
                    106,
                    2665,
                    1004,
                    2799,
                    1136,
                    2802,
                    884,
                    1525,
                    2677,
                    1016,
                    1401,
                    893
                ],
                "Node": [
                    1536,
                    647,
                    2696,
                    658,
                    1172,
                    2453,
                    1440,
                    1446,
                    1832,
                    2477,
                    2608,
                    1461,
                    2623,
                    64,
                    2496,
                    1481,
                    589,
                    1488,
                    2780,
                    1504,
                    613,
                    617,
                    1519
                ],
                "SplitFunc": [
                    65,
                    2236,
                    2045
                ],
                "Callable": [
                    3120,
                    65
                ],
                "Iterator": [
                    2050,
                    645,
                    2821,
                    2316,
                    656,
                    2323,
                    2966,
                    1945,
                    1440,
                    3104,
                    1446,
                    2726,
                    2090,
                    3114,
                    3120,
                    1462,
                    65,
                    2243,
                    1481,
                    2252,
                    1488,
                    2134,
                    1368,
                    1504,
                    2277,
                    2023,
                    1387,
                    1519,
                    1136,
                    629,
                    1525,
                    1399,
                    1529,
                    1534
                ],
                "Timestamp": [
                    66,
                    68
                ],
                "FileSize": [
                    67,
                    68
                ],
                "CacheInfo": [
                    3265,
                    68,
                    69
                ],
                "Tuple": [
                    3104,
                    802,
                    68,
                    3273,
                    3114,
                    1264,
                    3120,
                    926,
                    1279
                ],
                "Cache": [
                    69,
                    3272,
                    3290,
                    363,
                    3247,
                    401,
                    3258
                ],
                "Dict": [
                    802,
                    803,
                    69
                ],
                "out": [
                    673,
                    674,
                    70,
                    2891,
                    2909,
                    304,
                    336,
                    2899,
                    660,
                    666,
                    669
                ],
                "partial": [
                    1568,
                    1569,
                    1570,
                    1571,
                    70,
                    71,
                    1556,
                    1557,
                    1560,
                    1561,
                    1562,
                    1565,
                    1566,
                    1567
                ],
                "click.secho": [
                    70,
                    71
                ],
                "click": [
                    258,
                    2947,
                    260,
                    2955,
                    156,
                    157,
                    165,
                    174,
                    182,
                    188,
                    197,
                    70,
                    71,
                    202,
                    207,
                    337,
                    220,
                    232,
                    241,
                    250,
                    251,
                    254
                ],
                "err": [
                    289,
                    71,
                    3068,
                    302,
                    2904,
                    284
                ],
                "pygram.initialize": [
                    73
                ],
                "pygram": [
                    583,
                    584,
                    73,
                    74,
                    585,
                    591
                ],
                "syms": [
                    2560,
                    2566,
                    2591,
                    1576,
                    1075,
                    2623,
                    1604,
                    1605,
                    1606,
                    2631,
                    74,
                    1104,
                    2643,
                    1628,
                    1629,
                    1630,
                    1631,
                    1635,
                    613,
                    1646,
                    1651,
                    2681,
                    1659,
                    1670,
                    1675,
                    3211,
                    1680,
                    1173,
                    1686,
                    2710,
                    2718,
                    1697,
                    1704,
                    690,
                    691,
                    692,
                    693,
                    694,
                    695,
                    696,
                    697,
                    1721,
                    1734,
                    1738,
                    1746,
                    727,
                    728,
                    729,
                    730,
                    731,
                    1753,
                    1757,
                    734,
                    735,
                    736,
                    737,
                    2784,
                    740,
                    1765,
                    741,
                    742,
                    743,
                    744,
                    1770,
                    745,
                    746,
                    747,
                    748,
                    749,
                    750,
                    751,
                    752,
                    753,
                    754,
                    1775,
                    2797,
                    2806,
                    1785,
                    1786,
                    1790,
                    1796,
                    1808,
                    2352,
                    2353,
                    1870,
                    1878,
                    1898,
                    1905,
                    1909,
                    1918,
                    1930,
                    2470,
                    2477,
                    2478,
                    2496,
                    2504,
                    2528,
                    2537,
                    2544
                ],
                "pygram.python_symbols": [
                    74
                ],
                "__init__": [
                    97
                ],
                "consumed": [
                    97,
                    98,
                    1989,
                    1993,
                    1997,
                    1971,
                    1974
                ],
                "self.consumed": [
                    105,
                    98,
                    101
                ],
                "self": [
                    2951,
                    1538,
                    1542,
                    1033,
                    1034,
                    1035,
                    1036,
                    1037,
                    1038,
                    1039,
                    1545,
                    1546,
                    1550,
                    1554,
                    1556,
                    1557,
                    1046,
                    1047,
                    1048,
                    1560,
                    1561,
                    1562,
                    1053,
                    1565,
                    1566,
                    1567,
                    1568,
                    1569,
                    1570,
                    1571,
                    1572,
                    1573,
                    1063,
                    1064,
                    1070,
                    1074,
                    1076,
                    1081,
                    1082,
                    1090,
                    1097,
                    1109,
                    1118,
                    98,
                    101,
                    1126,
                    105,
                    1133,
                    1142,
                    1149,
                    643,
                    1155,
                    1156,
                    1157,
                    1159,
                    1160,
                    649,
                    1165,
                    657,
                    661,
                    663,
                    665,
                    1182,
                    1185,
                    1186,
                    1191,
                    1197,
                    1214,
                    1217,
                    1219,
                    1221,
                    1228,
                    1232,
                    1273,
                    1274,
                    1275,
                    1276,
                    1282,
                    1292,
                    1293,
                    1294,
                    1301,
                    1302,
                    1306,
                    1309,
                    1310,
                    1315,
                    1316,
                    1321,
                    1322,
                    1324,
                    1325,
                    826,
                    827,
                    1338,
                    829,
                    830,
                    1339,
                    832,
                    833,
                    834,
                    835,
                    836,
                    1341,
                    838,
                    1346,
                    840,
                    1347,
                    842,
                    843,
                    844,
                    845,
                    846,
                    2889,
                    2890,
                    2892,
                    850,
                    2894,
                    2900,
                    2905,
                    858,
                    2908,
                    1376,
                    865,
                    1377,
                    1378,
                    868,
                    869,
                    1380,
                    1383,
                    1384,
                    2922,
                    2925,
                    878,
                    879,
                    1392,
                    1394,
                    886,
                    887,
                    888,
                    2935,
                    1402,
                    1407,
                    2944,
                    2945,
                    1410,
                    1411,
                    900,
                    901,
                    2947,
                    1415,
                    2949,
                    1417,
                    1418,
                    2950,
                    908,
                    909,
                    910,
                    1422,
                    1423,
                    2952,
                    2953,
                    2955,
                    917,
                    1429,
                    1433,
                    1434,
                    1437,
                    1443,
                    1444,
                    1451,
                    1455,
                    945,
                    946,
                    947,
                    1458,
                    951,
                    953,
                    954,
                    955,
                    956,
                    957,
                    965,
                    966,
                    1477,
                    1479,
                    969,
                    1483,
                    1484,
                    974,
                    1486,
                    979,
                    1492,
                    1493,
                    1495,
                    984,
                    1496,
                    1497,
                    1500,
                    989,
                    1501,
                    1502,
                    1506,
                    995,
                    996,
                    997,
                    1510,
                    1003,
                    1517,
                    1522,
                    1011,
                    1523,
                    1527,
                    1016,
                    1531,
                    1532
                ],
                "leaf.prefix": [
                    2370,
                    101,
                    2373,
                    2749,
                    105,
                    1964,
                    3124,
                    950,
                    2365
                ],
                "leaf": [
                    2587,
                    1053,
                    1054,
                    1055,
                    2590,
                    2604,
                    3123,
                    3124,
                    3125,
                    1593,
                    1594,
                    1595,
                    2105,
                    2108,
                    2109,
                    3129,
                    2112,
                    3132,
                    1090,
                    1091,
                    1602,
                    2114,
                    2115,
                    1097,
                    1610,
                    1098,
                    2122,
                    1101,
                    1102,
                    2123,
                    1104,
                    2124,
                    2633,
                    2656,
                    2657,
                    101,
                    2152,
                    105,
                    2154,
                    2156,
                    2158,
                    2159,
                    2160,
                    2671,
                    2672,
                    2673,
                    2674,
                    3182,
                    3183,
                    1143,
                    3190,
                    2175,
                    2176,
                    2177,
                    1165,
                    1175,
                    3225,
                    3227,
                    3231,
                    1189,
                    1190,
                    2744,
                    1212,
                    2749,
                    1214,
                    2750,
                    1217,
                    1218,
                    2753,
                    1220,
                    2755,
                    2757,
                    2758,
                    2759,
                    2760,
                    1232,
                    1233,
                    2768,
                    2771,
                    2777,
                    2281,
                    2286,
                    2288,
                    2289,
                    2291,
                    2294,
                    2295,
                    2296,
                    2807,
                    2808,
                    2299,
                    2809,
                    2327,
                    2332,
                    2334,
                    2335,
                    2337,
                    2346,
                    2347,
                    2348,
                    823,
                    1848,
                    826,
                    827,
                    828,
                    2365,
                    830,
                    831,
                    832,
                    834,
                    2370,
                    2373,
                    1862,
                    838,
                    840,
                    841,
                    842,
                    1868,
                    1869,
                    844,
                    845,
                    846,
                    1870,
                    2383,
                    2384,
                    1876,
                    1877,
                    1878,
                    2389,
                    1880,
                    1882,
                    1886,
                    2400,
                    1892,
                    1896,
                    1897,
                    1898,
                    877,
                    2413,
                    1903,
                    1904,
                    1905,
                    2417,
                    1909,
                    886,
                    2421,
                    1912,
                    1916,
                    1917,
                    1918,
                    899,
                    2436,
                    1928,
                    1929,
                    1930,
                    908,
                    2450,
                    1939,
                    1964,
                    941,
                    945,
                    950,
                    951,
                    954,
                    955,
                    956,
                    957,
                    1981,
                    969,
                    1995,
                    974,
                    1531
                ],
                "unformatted_prefix": [
                    105,
                    106
                ],
                "token.NEWLINE": [
                    2792,
                    106,
                    2612,
                    687
                ],
                "token": [
                    2563,
                    1731,
                    1036,
                    1548,
                    1038,
                    2573,
                    1047,
                    1064,
                    1577,
                    1069,
                    1581,
                    1073,
                    2612,
                    2613,
                    2614,
                    1599,
                    1603,
                    2633,
                    1102,
                    1616,
                    1617,
                    1620,
                    2648,
                    1625,
                    1123,
                    106,
                    1645,
                    2671,
                    2673,
                    1657,
                    1661,
                    640,
                    2688,
                    3204,
                    3205,
                    2183,
                    1672,
                    3209,
                    2186,
                    1165,
                    1677,
                    2704,
                    1685,
                    2712,
                    1689,
                    668,
                    1694,
                    1701,
                    1706,
                    1710,
                    687,
                    1712,
                    1715,
                    1718,
                    1723,
                    702,
                    703,
                    704,
                    705,
                    706,
                    707,
                    1218,
                    1220,
                    710,
                    711,
                    712,
                    713,
                    714,
                    715,
                    716,
                    717,
                    718,
                    719,
                    720,
                    721,
                    722,
                    723,
                    1743,
                    725,
                    1747,
                    1750,
                    1766,
                    2791,
                    2792,
                    1772,
                    2803,
                    1784,
                    2808,
                    1790,
                    1793,
                    2308,
                    1797,
                    1798,
                    2311,
                    1801,
                    779,
                    780,
                    781,
                    782,
                    783,
                    784,
                    785,
                    786,
                    787,
                    788,
                    789,
                    790,
                    791,
                    792,
                    2350,
                    823,
                    1848,
                    1868,
                    1886,
                    1888,
                    1892,
                    877,
                    886,
                    1805,
                    1408,
                    1921,
                    899,
                    908,
                    1933,
                    917,
                    1433,
                    2474,
                    2475,
                    945,
                    2481,
                    2485,
                    2487,
                    2488,
                    1981,
                    1982,
                    2493,
                    2494,
                    1476,
                    2514,
                    984,
                    2530,
                    2531,
                    996,
                    1512,
                    1004,
                    2543,
                    2545,
                    2549,
                    1728,
                    2554,
                    1019,
                    1020,
                    1022
                ],
                "FormatError": [
                    113,
                    109
                ],
                "Enum": [
                    130,
                    117
                ],
                "NO": [
                    1665,
                    1794,
                    131,
                    1668,
                    1799,
                    1673,
                    1678,
                    1806,
                    1809,
                    1683,
                    1687,
                    1695,
                    1702,
                    1707,
                    1713,
                    1716,
                    1590,
                    1719,
                    1724,
                    1597,
                    1729,
                    1732,
                    1608,
                    1736,
                    1740,
                    1614,
                    1744,
                    1618,
                    1748,
                    1621,
                    1751,
                    1760,
                    1633,
                    1763,
                    1768,
                    1643,
                    1773,
                    1647,
                    1780,
                    118,
                    1654,
                    1788,
                    1791
                ],
                "YES": [
                    133,
                    119
                ],
                "DIFF": [
                    120
                ],
                "check": [
                    275,
                    124,
                    2879,
                    279
                ],
                "diff": [
                    483,
                    3014,
                    521,
                    275,
                    3030,
                    3031,
                    124,
                    127
                ],
                "cls.NO": [
                    125
                ],
                "cls": [
                    146,
                    148,
                    150,
                    152,
                    125,
                    127
                ],
                "cls.DIFF": [
                    127
                ],
                "cls.YES": [
                    127
                ],
                "CACHED": [
                    132
                ],
                "Flag": [
                    136
                ],
                "AUTO_DETECT": [
                    137
                ],
                "PYTHON36": [
                    138
                ],
                "PYI": [
                    139
                ],
                "NO_STRING_NORMALIZATION": [
                    140
                ],
                "mode": [
                    146,
                    403,
                    148,
                    276,
                    150,
                    152,
                    153,
                    540,
                    546,
                    3239,
                    424,
                    3240,
                    560,
                    561,
                    562,
                    3252,
                    314,
                    450,
                    327,
                    467,
                    3027,
                    472,
                    3293,
                    359,
                    365,
                    374,
                    378,
                    509
                ],
                "cls.AUTO_DETECT": [
                    146
                ],
                "py36": [
                    577,
                    2052,
                    2244,
                    3240,
                    3243,
                    2060,
                    561,
                    147,
                    564,
                    277,
                    2197,
                    2072,
                    2298,
                    2077
                ],
                "cls.PYTHON36": [
                    148
                ],
                "pyi": [
                    277,
                    3243,
                    149,
                    3239
                ],
                "cls.PYI": [
                    150
                ],
                "skip_string_normalization": [
                    277,
                    151
                ],
                "cls.NO_STRING_NORMALIZATION": [
                    152
                ],
                "click.Context": [
                    260
                ],
                "List": [
                    385,
                    2146,
                    2147,
                    2148,
                    3273,
                    1262,
                    2846,
                    272,
                    2045,
                    2100,
                    2101,
                    2070,
                    2102,
                    280,
                    3290,
                    925,
                    926
                ],
                "write_back": [
                    480,
                    449,
                    516,
                    326,
                    359,
                    423,
                    377,
                    518,
                    364,
                    402,
                    275,
                    373,
                    313,
                    411,
                    477
                ],
                "WriteBack.from_configuration": [
                    275
                ],
                "WriteBack": [
                    449,
                    388,
                    516,
                    518,
                    377,
                    457,
                    364,
                    497,
                    402,
                    275,
                    345,
                    411
                ],
                "FileMode.from_configuration": [
                    276
                ],
                "FileMode": [
                    389,
                    3238,
                    551,
                    3239,
                    3240,
                    458,
                    3290,
                    3247,
                    560,
                    529,
                    498,
                    467,
                    276,
                    561,
                    562,
                    3024,
                    346
                ],
                "report": [
                    2946,
                    2951,
                    296,
                    328,
                    2954,
                    2957,
                    337,
                    338,
                    379,
                    2834,
                    443,
                    406,
                    279,
                    2838,
                    315,
                    381,
                    446,
                    2943
                ],
                "Report": [
                    279
                ],
                "quiet": [
                    2880,
                    335,
                    279
                ],
                "verbose": [
                    2881,
                    279
                ],
                "sources": [
                    3297,
                    323,
                    295,
                    427,
                    300,
                    303,
                    3280,
                    308,
                    404,
                    310,
                    280,
                    409
                ],
                "include_regex": [
                    296,
                    282
                ],
                "re.compile": [
                    2418,
                    2419,
                    2420,
                    282,
                    287
                ],
                "re": [
                    288,
                    2383,
                    2418,
                    2419,
                    2420,
                    282,
                    283,
                    287
                ],
                "include": [
                    2841,
                    282,
                    284,
                    2838
                ],
                "re.error": [
                    288,
                    283
                ],
                "ctx.exit": [
                    305,
                    290,
                    338,
                    285
                ],
                "ctx": [
                    305,
                    290,
                    338,
                    285
                ],
                "exclude_regex": [
                    296,
                    287
                ],
                "exclude": [
                    2688,
                    289,
                    2689,
                    2832,
                    2834,
                    2838,
                    858,
                    287
                ],
                "root": [
                    291,
                    296,
                    2827,
                    2829,
                    2838
                ],
                "find_project_root": [
                    291
                ],
                "src": [
                    509,
                    521,
                    405,
                    406,
                    291,
                    292,
                    420,
                    426,
                    427,
                    2858,
                    2992,
                    439,
                    443,
                    445,
                    446,
                    2891,
                    2896,
                    3280,
                    466,
                    2898,
                    468,
                    3281,
                    3030,
                    3282,
                    2904,
                    3283,
                    3285,
                    478,
                    481,
                    482,
                    3297,
                    357,
                    366,
                    370,
                    506,
                    507,
                    378,
                    379,
                    381
                ],
                "s": [
                    2945,
                    2947,
                    292,
                    293,
                    2950,
                    2951,
                    2953,
                    298,
                    2955,
                    302
                ],
                "p": [
                    1796,
                    1670,
                    1675,
                    1680,
                    1808,
                    2599,
                    2590,
                    2591,
                    1697,
                    2594,
                    1700,
                    293,
                    294,
                    2597,
                    296,
                    1704,
                    298,
                    2346,
                    300,
                    1964,
                    1965,
                    1711,
                    1968,
                    2352,
                    2353,
                    1973,
                    1721,
                    1594,
                    1727,
                    1602,
                    1603,
                    1734,
                    1738,
                    1612,
                    1742,
                    1746,
                    1753,
                    1756,
                    1757,
                    869,
                    1765,
                    1770,
                    1775,
                    1778
                ],
                "p.is_dir": [
                    294
                ],
                "sources.extend": [
                    295
                ],
                "gen_python_files_in_dir": [
                    296,
                    2838
                ],
                "p.is_file": [
                    298
                ],
                "sources.append": [
                    300
                ],
                "reformat_one": [
                    309
                ],
                "line_length": [
                    2051,
                    2052,
                    2053,
                    403,
                    2195,
                    2197,
                    540,
                    2077,
                    3228,
                    546,
                    421,
                    3243,
                    3252,
                    311,
                    2746,
                    577,
                    450,
                    324,
                    3143,
                    3027,
                    472,
                    3293,
                    359,
                    365,
                    371,
                    3187,
                    2040,
                    378,
                    509
                ],
                "fast": [
                    544,
                    325,
                    422,
                    359,
                    472,
                    372,
                    312,
                    509
                ],
                "loop": [
                    448,
                    321,
                    417,
                    3077,
                    329,
                    3083,
                    3084,
                    334,
                    431,
                    432,
                    3092,
                    318
                ],
                "asyncio.get_event_loop": [
                    318
                ],
                "asyncio": [
                    448,
                    3077,
                    3084,
                    429,
                    437,
                    3066,
                    318
                ],
                "executor": [
                    418,
                    330,
                    319
                ],
                "ProcessPoolExecutor": [
                    319
                ],
                "os.cpu_count": [
                    319
                ],
                "os": [
                    319
                ],
                "loop.run_until_complete": [
                    321,
                    3083
                ],
                "schedule_formatting": [
                    322
                ],
                "shutdown": [
                    334
                ],
                "click.echo": [
                    337
                ],
                "report.return_code": [
                    338
                ],
                "click.command": [
                    156
                ],
                "click.option": [
                    165,
                    197,
                    232,
                    202,
                    174,
                    207,
                    241,
                    220,
                    182,
                    188,
                    157
                ],
                "click.version_option": [
                    250
                ],
                "click.argument": [
                    251
                ],
                "click.Path": [
                    254
                ],
                "click.pass_context": [
                    258
                ],
                "changed": [
                    356,
                    2888,
                    361,
                    2895,
                    368,
                    369,
                    376,
                    377,
                    379
                ],
                "Changed.NO": [
                    377,
                    356,
                    446,
                    2895
                ],
                "Changed": [
                    356,
                    2886,
                    2888,
                    361,
                    2895,
                    368,
                    369,
                    406,
                    376,
                    377,
                    446
                ],
                "src.is_file": [
                    357
                ],
                "format_stdin_to_stdout": [
                    358
                ],
                "Changed.YES": [
                    376,
                    361,
                    2888,
                    446
                ],
                "cache": [
                    3297,
                    450,
                    3258,
                    363,
                    365,
                    367,
                    401,
                    3282,
                    403,
                    404,
                    378,
                    3262
                ],
                "WriteBack.DIFF": [
                    402,
                    411,
                    364,
                    518
                ],
                "read_cache": [
                    403,
                    365
                ],
                "res_src": [
                    366,
                    367
                ],
                "src.resolve": [
                    3281,
                    3297,
                    366
                ],
                "get_cache_info": [
                    3297,
                    3282,
                    367
                ],
                "Changed.CACHED": [
                    368,
                    369,
                    406
                ],
                "format_file_in_place": [
                    369,
                    419
                ],
                "WriteBack.YES": [
                    377,
                    449,
                    516
                ],
                "write_cache": [
                    450,
                    378
                ],
                "report.done": [
                    379,
                    446,
                    406
                ],
                "report.failed": [
                    443,
                    381
                ],
                "exc": [
                    608,
                    610,
                    2998,
                    3004,
                    381,
                    3006
                ],
                "BaseEventLoop": [
                    3073,
                    391
                ],
                "Executor": [
                    392
                ],
                "cached": [
                    404,
                    405
                ],
                "filter_cached": [
                    404
                ],
                "cancelled": [
                    448,
                    441,
                    447,
                    407
                ],
                "formatted": [
                    408,
                    449,
                    450,
                    445
                ],
                "lock": [
                    484,
                    485,
                    425,
                    489,
                    490,
                    410,
                    415
                ],
                "manager": [
                    414,
                    415
                ],
                "Manager": [
                    414
                ],
                "manager.Lock": [
                    415
                ],
                "tasks": [
                    416,
                    3069,
                    429,
                    439
                ],
                "loop.run_in_executor": [
                    417
                ],
                "pending": [
                    429,
                    431,
                    432,
                    436,
                    437
                ],
                "Iterable": [
                    3272,
                    3066,
                    852,
                    429
                ],
                "asyncio.Task": [
                    3066,
                    429,
                    3077
                ],
                "tasks.keys": [
                    429
                ],
                "loop.add_signal_handler": [
                    432,
                    431
                ],
                "signal.SIGINT": [
                    431
                ],
                "signal": [
                    432,
                    431
                ],
                "cancel": [
                    432,
                    431
                ],
                "signal.SIGTERM": [
                    432
                ],
                "done": [
                    3279,
                    3285,
                    3286,
                    437,
                    438
                ],
                "_": [
                    1191,
                    1004,
                    437,
                    572,
                    575
                ],
                "asyncio.wait": [
                    437
                ],
                "asyncio.FIRST_COMPLETED": [
                    437
                ],
                "task": [
                    3077,
                    3081,
                    3082,
                    438,
                    439,
                    440,
                    441,
                    442,
                    443,
                    3070,
                    3069,
                    446
                ],
                "tasks.pop": [
                    439
                ],
                "task.cancelled": [
                    440
                ],
                "cancelled.append": [
                    441
                ],
                "task.exception": [
                    442,
                    443
                ],
                "formatted.append": [
                    445
                ],
                "task.result": [
                    446
                ],
                "asyncio.gather": [
                    448,
                    3084
                ],
                "Any": [
                    459
                ],
                "WriteBack.NO": [
                    457,
                    497
                ],
                "FileMode.AUTO_DETECT": [
                    551,
                    458,
                    3024,
                    529,
                    498
                ],
                "src.suffix": [
                    466
                ],
                "FileMode.PYI": [
                    560,
                    467,
                    3239
                ],
                "tokenize.open": [
                    468
                ],
                "tokenize": [
                    468
                ],
                "src_buffer": [
                    468,
                    469,
                    478
                ],
                "src_contents": [
                    545,
                    546,
                    483,
                    557,
                    469,
                    472,
                    537,
                    540,
                    541
                ],
                "src_buffer.read": [
                    469
                ],
                "dst_contents": [
                    576,
                    545,
                    546,
                    483,
                    547,
                    573,
                    578,
                    579,
                    558,
                    471,
                    540,
                    541,
                    479
                ],
                "format_file_contents": [
                    509,
                    471
                ],
                "NothingChanged": [
                    512,
                    474,
                    538,
                    542
                ],
                "write_back.YES": [
                    477
                ],
                "src_buffer.encoding": [
                    478
                ],
                "f": [
                    3047,
                    3049,
                    3051,
                    3052,
                    478,
                    479
                ],
                "f.write": [
                    3049,
                    3051,
                    479
                ],
                "write_back.DIFF": [
                    480
                ],
                "src_name": [
                    481,
                    483,
                    521,
                    519
                ],
                "dst_name": [
                    520,
                    521,
                    482,
                    483
                ],
                "diff_contents": [
                    483,
                    487
                ],
                "lock.acquire": [
                    485
                ],
                "sys.stdout.write": [
                    521,
                    517,
                    487
                ],
                "sys.stdout": [
                    521,
                    517,
                    487
                ],
                "sys": [
                    2274,
                    517,
                    487,
                    521,
                    2994,
                    506,
                    1051
                ],
                "lock.release": [
                    490
                ],
                "sys.stdin.read": [
                    506
                ],
                "sys.stdin": [
                    506
                ],
                "dst": [
                    517,
                    521,
                    3027,
                    3028,
                    3030,
                    3031,
                    3002,
                    507,
                    3004,
                    509
                ],
                "src_contents.strip": [
                    537
                ],
                "format_str": [
                    3027,
                    540
                ],
                "assert_equivalent": [
                    545
                ],
                "assert_stable": [
                    546
                ],
                "src_node": [
                    561,
                    571,
                    557,
                    559
                ],
                "lib2to3_parse": [
                    683,
                    557
                ],
                "future_imports": [
                    564,
                    559
                ],
                "get_future_imports": [
                    559
                ],
                "is_pyi": [
                    1259,
                    560,
                    1363,
                    565,
                    568
                ],
                "FileMode.PYTHON36": [
                    3240,
                    561
                ],
                "is_python36": [
                    561
                ],
                "normalize_strings": [
                    562,
                    1364,
                    566
                ],
                "FileMode.NO_STRING_NORMALIZATION": [
                    562
                ],
                "lines": [
                    2052,
                    2053,
                    2054,
                    3048,
                    3049,
                    3050,
                    563,
                    603,
                    571,
                    605
                ],
                "LineGenerator": [
                    563
                ],
                "elt": [
                    568,
                    574
                ],
                "EmptyLineTracker": [
                    568
                ],
                "empty_line": [
                    576,
                    569,
                    573
                ],
                "Line": [
                    2050,
                    2316,
                    2321,
                    2323,
                    2070,
                    2331,
                    1440,
                    2210,
                    1446,
                    2726,
                    3113,
                    2090,
                    1200,
                    2097,
                    2098,
                    2099,
                    1462,
                    569,
                    3135,
                    2243,
                    2303,
                    1481,
                    1356,
                    2252,
                    3149,
                    1488,
                    1365,
                    2133,
                    2134,
                    1368,
                    2143,
                    1504,
                    2144,
                    2145,
                    2273,
                    2277,
                    2022,
                    2023,
                    1387,
                    1260,
                    2285,
                    1519,
                    1264,
                    1525,
                    2677,
                    1399,
                    1529,
                    1534,
                    1279
                ],
                "after": [
                    1126,
                    1127,
                    1133,
                    1273,
                    570,
                    1275,
                    572,
                    1277,
                    574
                ],
                "current_line": [
                    2304,
                    1281,
                    1283,
                    2308,
                    1285,
                    2309,
                    2311,
                    2312,
                    1291,
                    2321,
                    1298,
                    1299,
                    2327,
                    2329,
                    2331,
                    2332,
                    1309,
                    1316,
                    2340,
                    2341,
                    1322,
                    1324,
                    1325,
                    1333,
                    571,
                    1340,
                    574,
                    577,
                    1348,
                    1365,
                    2273,
                    2281,
                    2283,
                    2285,
                    2286,
                    1270,
                    1273,
                    1276,
                    2301,
                    2303
                ],
                "lines.visit": [
                    571
                ],
                "before": [
                    1317,
                    1286,
                    1287,
                    1343,
                    1350,
                    1290,
                    1352,
                    1295,
                    1297,
                    1273,
                    1274,
                    1277,
                    574,
                    575
                ],
                "elt.maybe_empty_lines": [
                    574
                ],
                "line": [
                    2177,
                    2689,
                    2051,
                    2052,
                    2060,
                    2189,
                    2062,
                    2318,
                    2192,
                    2321,
                    2197,
                    3223,
                    2072,
                    3225,
                    2331,
                    2334,
                    2337,
                    2087,
                    2097,
                    2098,
                    2099,
                    2739,
                    1973,
                    1974,
                    1975,
                    1976,
                    2105,
                    1978,
                    2744,
                    3123,
                    3129,
                    577,
                    578,
                    1985,
                    2244,
                    3141,
                    3145,
                    2124,
                    2764,
                    2687,
                    2259,
                    3156,
                    2263,
                    2143,
                    2144,
                    2145,
                    2273,
                    3170,
                    3172,
                    3173,
                    3174,
                    3175,
                    2152,
                    2285,
                    3181,
                    3182,
                    2288,
                    2034,
                    2035,
                    2291,
                    3059,
                    2038,
                    2039,
                    2040,
                    3060,
                    2042,
                    3196,
                    2046,
                    2303
                ],
                "split_line": [
                    577,
                    2077
                ],
                "GRAMMARS": [
                    595,
                    582
                ],
                "pygram.python_grammar_no_print_statement_no_exec_statement": [
                    583
                ],
                "pygram.python_grammar_no_print_statement": [
                    584,
                    591
                ],
                "pygram.python_grammar": [
                    585
                ],
                "grammar": [
                    595,
                    596,
                    591
                ],
                "src_txt": [
                    592,
                    593,
                    594,
                    598,
                    603
                ],
                "nl": [
                    593,
                    594
                ],
                "drv": [
                    596,
                    598
                ],
                "driver.Driver": [
                    596
                ],
                "driver": [
                    596
                ],
                "pytree.convert": [
                    596
                ],
                "pytree": [
                    596
                ],
                "result": [
                    2176,
                    2178,
                    2070,
                    2076,
                    2205,
                    2206,
                    2207,
                    2083,
                    2121,
                    2123,
                    2125,
                    2127,
                    2128,
                    2129,
                    598,
                    612,
                    613,
                    614,
                    2174
                ],
                "drv.parse_string": [
                    598
                ],
                "ParseError": [
                    601
                ],
                "lineno": [
                    608,
                    602,
                    605
                ],
                "column": [
                    608,
                    602
                ],
                "pe.context": [
                    602
                ],
                "pe": [
                    602
                ],
                "src_txt.splitlines": [
                    603
                ],
                "faulty_line": [
                    608,
                    605,
                    607
                ],
                "syms.file_input": [
                    613
                ],
                "code": [
                    619,
                    620,
                    683
                ],
                "node": [
                    1536,
                    1537,
                    2560,
                    2563,
                    1542,
                    2566,
                    1544,
                    2569,
                    1546,
                    1548,
                    2572,
                    2611,
                    2612,
                    2613,
                    2614,
                    2618,
                    2623,
                    2626,
                    2629,
                    2643,
                    2646,
                    2647,
                    2652,
                    619,
                    639,
                    640,
                    642,
                    643,
                    647,
                    648,
                    2703,
                    658,
                    659,
                    662,
                    668,
                    670,
                    673,
                    674,
                    2783,
                    1816,
                    1817,
                    1828,
                    1834,
                    1835,
                    1836,
                    1837,
                    1394,
                    1397,
                    1401,
                    1404,
                    1421,
                    1423,
                    1428,
                    1429,
                    1432,
                    1433,
                    1434,
                    1435,
                    1436,
                    1437,
                    1438,
                    2463,
                    2968,
                    2970,
                    2972,
                    1444,
                    2468,
                    2477,
                    2478,
                    1455,
                    2989,
                    2484,
                    2487,
                    2488,
                    2496,
                    1474,
                    1475,
                    2504,
                    2505,
                    2506,
                    1483,
                    1484,
                    2507,
                    1486,
                    2508,
                    2512,
                    2513,
                    1490,
                    1492,
                    1493,
                    2518,
                    2519,
                    1496,
                    1500,
                    1502,
                    2528,
                    2529,
                    2530,
                    2531,
                    1508,
                    2537,
                    2538,
                    2541,
                    1521,
                    2552,
                    2553,
                    2554
                ],
                "T": [
                    3104,
                    645,
                    653,
                    623,
                    656,
                    626,
                    629
                ],
                "TypeVar": [
                    623
                ],
                "Generic": [
                    626
                ],
                "node.type": [
                    640,
                    2528,
                    642,
                    2560,
                    2563,
                    2566,
                    2504,
                    2537,
                    1548,
                    1436,
                    2478,
                    2623,
                    659,
                    2643,
                    2552,
                    1433,
                    668,
                    639
                ],
                "name": [
                    640,
                    642,
                    643
                ],
                "token.tok_name": [
                    640,
                    668
                ],
                "type_repr": [
                    642,
                    659
                ],
                "self.visit_default": [
                    643,
                    1444,
                    1486,
                    1455,
                    1429,
                    1493,
                    1496,
                    1531,
                    1502
                ],
                "child": [
                    1537,
                    1538,
                    648,
                    649,
                    2828,
                    2829,
                    2830,
                    2834,
                    2837,
                    662,
                    663,
                    2838,
                    2840,
                    2843,
                    2468,
                    2470,
                    2471,
                    2472,
                    2476,
                    2477,
                    2481,
                    2483,
                    2485,
                    2491,
                    2495,
                    2496,
                    2498,
                    1475,
                    1476,
                    2629,
                    1479,
                    2631,
                    2632,
                    2633,
                    2783,
                    2784,
                    2786,
                    1509,
                    1510,
                    2790,
                    1512,
                    2792,
                    1516,
                    1517,
                    1521,
                    1523
                ],
                "node.children": [
                    1537,
                    648,
                    2569,
                    2572,
                    662,
                    2468,
                    2611,
                    2484,
                    2612,
                    2613,
                    2614,
                    2618,
                    2626,
                    1475,
                    2629,
                    1484,
                    2512,
                    2513,
                    2518,
                    2519,
                    2646,
                    2647,
                    2652,
                    2783,
                    2529,
                    2530,
                    2531,
                    1508,
                    2538,
                    2541,
                    1521,
                    2553,
                    2554
                ],
                "self.visit": [
                    1538,
                    1510,
                    1479,
                    649,
                    1546,
                    1484,
                    1517,
                    1423,
                    1523,
                    663
                ],
                "Visitor": [
                    1356,
                    653
                ],
                "tree_depth": [
                    654
                ],
                "indent": [
                    1185,
                    1378,
                    1188,
                    1380,
                    1384,
                    657,
                    660,
                    666,
                    669
                ],
                "self.tree_depth": [
                    657,
                    665,
                    661
                ],
                "_type": [
                    659,
                    660,
                    666,
                    668,
                    669
                ],
                "token.tok_name.get": [
                    668
                ],
                "node.prefix": [
                    673,
                    670
                ],
                "node.value": [
                    674,
                    2563
                ],
                "v": [
                    1802,
                    1554,
                    1556,
                    1558,
                    1560,
                    1561,
                    1563,
                    1565,
                    1566,
                    1567,
                    1568,
                    1569,
                    1570,
                    1571,
                    682,
                    683,
                    2348,
                    2352,
                    2353,
                    1595,
                    858
                ],
                "DebugVisitor": [
                    682
                ],
                "v.visit": [
                    683
                ],
                "dataclass": [
                    1249,
                    1355,
                    652,
                    920,
                    2875,
                    797
                ],
                "KEYWORDS": [
                    686
                ],
                "keyword.kwlist": [
                    686
                ],
                "keyword": [
                    686
                ],
                "WHITESPACE": [
                    1996,
                    1436,
                    687
                ],
                "token.DEDENT": [
                    1220,
                    2614,
                    687
                ],
                "token.INDENT": [
                    1218,
                    2613,
                    687
                ],
                "FLOW_CONTROL": [
                    688
                ],
                "STATEMENT": [
                    689,
                    1490
                ],
                "syms.if_stmt": [
                    690
                ],
                "syms.while_stmt": [
                    691
                ],
                "syms.for_stmt": [
                    692
                ],
                "syms.try_stmt": [
                    693
                ],
                "syms.except_clause": [
                    694
                ],
                "syms.with_stmt": [
                    695
                ],
                "syms.funcdef": [
                    696
                ],
                "syms.classdef": [
                    697,
                    1746
                ],
                "STANDALONE_COMMENT": [
                    1984,
                    2309,
                    1128,
                    969,
                    1992,
                    2750,
                    1581,
                    979,
                    699,
                    1117,
                    1054
                ],
                "LOGIC_OPERATORS": [
                    1939,
                    700
                ],
                "COMPARATORS": [
                    1882,
                    701
                ],
                "token.LESS": [
                    702
                ],
                "token.GREATER": [
                    703
                ],
                "token.EQEQUAL": [
                    704
                ],
                "token.NOTEQUAL": [
                    705
                ],
                "token.LESSEQUAL": [
                    706
                ],
                "token.GREATEREQUAL": [
                    707
                ],
                "MATH_OPERATORS": [
                    1652,
                    709,
                    1876
                ],
                "token.VBAR": [
                    779,
                    710
                ],
                "token.CIRCUMFLEX": [
                    780,
                    711
                ],
                "token.AMPER": [
                    712,
                    781
                ],
                "token.LEFTSHIFT": [
                    713,
                    782
                ],
                "token.RIGHTSHIFT": [
                    1657,
                    714,
                    783
                ],
                "token.PLUS": [
                    784,
                    715
                ],
                "token.MINUS": [
                    785,
                    716
                ],
                "token.STAR": [
                    725,
                    786,
                    717,
                    2485
                ],
                "token.SLASH": [
                    787,
                    718
                ],
                "token.DOUBLESLASH": [
                    788,
                    719
                ],
                "token.PERCENT": [
                    720,
                    789
                ],
                "token.AT": [
                    984,
                    721,
                    790,
                    1743
                ],
                "token.TILDE": [
                    722,
                    791
                ],
                "token.DOUBLESTAR": [
                    792,
                    723,
                    1772,
                    725
                ],
                "STARS": [
                    2720,
                    1731,
                    1641,
                    725,
                    2587,
                    2715
                ],
                "VARARGS_PARENTS": [
                    2296,
                    1862,
                    1642,
                    726
                ],
                "syms.arglist": [
                    1670,
                    1104,
                    2710,
                    727,
                    1628
                ],
                "syms.argument": [
                    1790,
                    728,
                    1721,
                    1629,
                    2718
                ],
                "syms.trailer": [
                    752,
                    729,
                    3211,
                    1704
                ],
                "syms.typedargslist": [
                    1680,
                    730,
                    1635,
                    2710
                ],
                "syms.varargslist": [
                    731,
                    1675,
                    1631
                ],
                "UNPACKING_PARENTS": [
                    1642,
                    733,
                    1862
                ],
                "syms.atom": [
                    2496,
                    2528,
                    1765,
                    2470,
                    2566,
                    2504,
                    2537,
                    2631,
                    2477,
                    2643,
                    2681,
                    734
                ],
                "syms.dictsetmaker": [
                    1770,
                    735
                ],
                "syms.listmaker": [
                    736,
                    1075
                ],
                "syms.testlist_gexp": [
                    2544,
                    737
                ],
                "TEST_DESCENDANTS": [
                    1177,
                    739
                ],
                "syms.test": [
                    740,
                    1909
                ],
                "syms.lambdef": [
                    741
                ],
                "syms.or_test": [
                    742
                ],
                "syms.and_test": [
                    743
                ],
                "syms.not_test": [
                    744
                ],
                "syms.comparison": [
                    745,
                    1918
                ],
                "syms.star_expr": [
                    746,
                    2591,
                    1878,
                    1775
                ],
                "syms.expr": [
                    747
                ],
                "syms.xor_expr": [
                    748
                ],
                "syms.and_expr": [
                    749
                ],
                "syms.shift_expr": [
                    1659,
                    750
                ],
                "syms.arith_expr": [
                    751
                ],
                "syms.term": [
                    753
                ],
                "syms.power": [
                    754
                ],
                "ASSIGNMENTS": [
                    1569,
                    756
                ],
                "COMPREHENSION_PRIORITY": [
                    1900,
                    1907,
                    772
                ],
                "COMMA_PRIORITY": [
                    2307,
                    773,
                    2693,
                    2508,
                    1849
                ],
                "TERNARY_PRIORITY": [
                    1910,
                    774
                ],
                "LOGIC_PRIORITY": [
                    1940,
                    775
                ],
                "STRING_PRIORITY": [
                    776,
                    1890
                ],
                "COMPARATOR_PRIORITY": [
                    1925,
                    777,
                    1937,
                    1913,
                    1883
                ],
                "MATH_PRIORITIES": [
                    1880,
                    778
                ],
                "DOT_PRIORITY": [
                    1873,
                    794,
                    2269,
                    3166
                ],
                "depth": [
                    2976,
                    801,
                    2981,
                    2984,
                    1291,
                    1292,
                    2987,
                    1102,
                    1295,
                    2989,
                    1297,
                    1301,
                    2968,
                    924,
                    1341,
                    1087
                ],
                "bracket_match": [
                    802
                ],
                "Factory": [
                    802,
                    803,
                    1262,
                    1365,
                    925,
                    926,
                    927
                ],
                "delimiters": [
                    803
                ],
                "previous": [
                    1888,
                    1920,
                    1921,
                    1922,
                    804,
                    1932,
                    1933,
                    1934,
                    1871,
                    1887
                ],
                "Optional": [
                    804,
                    1832,
                    1834,
                    1260,
                    915,
                    1814,
                    1016,
                    3128
                ],
                "_for_loop_variable": [
                    805
                ],
                "_lambda_arguments": [
                    806
                ],
                "leaf.type": [
                    899,
                    908,
                    1165,
                    2587,
                    1054,
                    3231,
                    2347,
                    941,
                    945,
                    823,
                    1848,
                    1593,
                    828,
                    1981,
                    830,
                    2108,
                    2750,
                    1218,
                    2114,
                    1220,
                    2757,
                    2759,
                    841,
                    842,
                    969,
                    1868,
                    1102,
                    1876,
                    1880,
                    1882,
                    1886,
                    1892,
                    877,
                    2158,
                    2671,
                    3183,
                    2673,
                    886,
                    3190,
                    2808
                ],
                "token.COMMENT": [
                    1408,
                    1123,
                    823,
                    1982,
                    1599
                ],
                "self.maybe_decrement_after_for_loop_variable": [
                    826
                ],
                "self.maybe_decrement_after_lambda_arguments": [
                    827
                ],
                "CLOSING_BRACKETS": [
                    2757,
                    2759,
                    1065,
                    1579,
                    1580,
                    1581,
                    2108,
                    1871,
                    2158,
                    3179,
                    3183,
                    828
                ],
                "self.depth": [
                    832,
                    833,
                    1185,
                    1219,
                    900,
                    1221,
                    842,
                    843,
                    909,
                    878,
                    917,
                    887,
                    829,
                    830
                ],
                "opening_bracket": [
                    2180,
                    2183,
                    2184,
                    2202,
                    2204,
                    2740,
                    830,
                    831,
                    2754,
                    2755,
                    2756,
                    2761,
                    2771,
                    2150,
                    2154,
                    2159,
                    2680,
                    2681,
                    2682
                ],
                "self.bracket_match.pop": [
                    830
                ],
                "self.bracket_match": [
                    842,
                    850,
                    830,
                    917
                ],
                "leaf.opening_bracket": [
                    3183,
                    2159,
                    2771,
                    2109,
                    831
                ],
                "leaf.bracket_depth": [
                    832,
                    1101,
                    2294,
                    2295,
                    1055
                ],
                "delim": [
                    834,
                    835,
                    836,
                    838,
                    839,
                    840
                ],
                "is_split_before_delimiter": [
                    834
                ],
                "self.previous": [
                    834,
                    835,
                    836,
                    838,
                    844
                ],
                "self.delimiters": [
                    865,
                    836,
                    869,
                    840,
                    858
                ],
                "is_split_after_delimiter": [
                    838
                ],
                "OPENING_BRACKETS": [
                    2114,
                    1667,
                    841,
                    1578,
                    3179,
                    1580,
                    1613,
                    2764,
                    3214,
                    1779,
                    3190,
                    3231
                ],
                "BRACKET": [
                    1577,
                    842,
                    1579,
                    1578
                ],
                "self.maybe_increment_lambda_arguments": [
                    845
                ],
                "self.maybe_increment_for_loop_variable": [
                    846
                ],
                "k": [
                    858
                ],
                "self.delimiters.items": [
                    858
                ],
                "priority": [
                    868,
                    869
                ],
                "self.max_delimiter_priority": [
                    868
                ],
                "self.delimiters.values": [
                    869
                ],
                "token.NAME": [
                    1793,
                    1921,
                    899,
                    996,
                    1476,
                    1892,
                    2563,
                    1801,
                    877,
                    1933,
                    2350,
                    2803,
                    886,
                    2808,
                    1019,
                    1661,
                    1022
                ],
                "leaf.value": [
                    899,
                    2436,
                    1928,
                    2450,
                    1939,
                    2348,
                    941,
                    2604,
                    3124,
                    3125,
                    1595,
                    2749,
                    2760,
                    2383,
                    2384,
                    2389,
                    2400,
                    1896,
                    877,
                    2413,
                    1903,
                    2672,
                    2417,
                    2674,
                    1909,
                    886,
                    2421,
                    1912,
                    2809,
                    1916
                ],
                "self._for_loop_variable": [
                    888,
                    886,
                    879
                ],
                "self._lambda_arguments": [
                    908,
                    901,
                    910
                ],
                "token.COLON": [
                    1603,
                    908,
                    1645,
                    1616,
                    945,
                    1617,
                    1784
                ],
                "self.bracket_match.get": [
                    917
                ],
                "token.RSQB": [
                    1073,
                    3209,
                    917,
                    1577
                ],
                "leaves": [
                    1186,
                    1187,
                    1189,
                    2121,
                    2122,
                    925,
                    2174,
                    2175
                ],
                "comments": [
                    926
                ],
                "bracket_tracker": [
                    927
                ],
                "BracketTracker": [
                    2651,
                    927
                ],
                "inside_brackets": [
                    928,
                    2364
                ],
                "should_explode": [
                    929,
                    2204
                ],
                "has_value": [
                    941,
                    942
                ],
                "BRACKETS": [
                    1580,
                    941
                ],
                "leaf.value.strip": [
                    941
                ],
                "self.is_class_paren_empty": [
                    945
                ],
                "self.leaves": [
                    1155,
                    1160,
                    1034,
                    1036,
                    1037,
                    1038,
                    1039,
                    1047,
                    1048,
                    1053,
                    1186,
                    1063,
                    1064,
                    1197,
                    946,
                    947,
                    1074,
                    957,
                    1214,
                    1217,
                    1090,
                    969,
                    1097,
                    1232,
                    979,
                    984,
                    989,
                    996,
                    997,
                    1126,
                    1003,
                    1011,
                    1142,
                    1016
                ],
                "preformatted": [
                    953,
                    947,
                    974
                ],
                "whitespace": [
                    950
                ],
                "self.is_complex_subscript": [
                    951
                ],
                "self.inside_brackets": [
                    953
                ],
                "self.bracket_tracker.mark": [
                    954
                ],
                "self.bracket_tracker": [
                    1165,
                    954,
                    965,
                    1118
                ],
                "self.maybe_remove_trailing_comma": [
                    955
                ],
                "self.append_comment": [
                    956
                ],
                "self.leaves.append": [
                    1217,
                    957,
                    1214
                ],
                "self.bracket_tracker.depth": [
                    965
                ],
                "self.is_comment": [
                    966
                ],
                "self.append": [
                    974
                ],
                "is_import": [
                    989
                ],
                "value": [
                    2400,
                    2401,
                    2978,
                    2979,
                    2404,
                    997,
                    2407,
                    2983,
                    2984,
                    2987,
                    2604,
                    1037,
                    2605,
                    1039,
                    2484,
                    1048,
                    2972
                ],
                "self.is_class": [
                    1035,
                    1003
                ],
                "token.DOT": [
                    1797,
                    1766,
                    1798,
                    2633,
                    1004,
                    1805,
                    1710,
                    1743,
                    1868
                ],
                "first_leaf": [
                    1285,
                    1286,
                    1288,
                    1011,
                    1019,
                    1020
                ],
                "second_leaf": [
                    1016,
                    1018,
                    1021,
                    1022,
                    1023
                ],
                "first_leaf.type": [
                    1019,
                    1020
                ],
                "first_leaf.value": [
                    1019
                ],
                "token.ASYNC": [
                    1512,
                    1020
                ],
                "second_leaf.type": [
                    1022
                ],
                "second_leaf.value": [
                    1023
                ],
                "token.LPAR": [
                    1728,
                    2530,
                    2183,
                    1577,
                    1706,
                    2474,
                    1036,
                    2573,
                    2543,
                    2671,
                    2481,
                    2514,
                    1747,
                    1750,
                    2487,
                    2648,
                    2493
                ],
                "token.RPAR": [
                    2531,
                    3204,
                    1577,
                    1706,
                    2475,
                    2186,
                    2573,
                    1038,
                    2648,
                    2545,
                    2514,
                    2673,
                    2488,
                    2494
                ],
                "token.STRING": [
                    1888,
                    2791,
                    2704,
                    1047,
                    1433,
                    1886
                ],
                "value.startswith": [
                    1048
                ],
                "sys.maxsize": [
                    2274,
                    1051
                ],
                "depth_limit": [
                    1055
                ],
                "token.COMMA": [
                    2688,
                    2308,
                    1701,
                    2311,
                    1064,
                    1672,
                    1581,
                    1102,
                    1677,
                    2712,
                    1620,
                    2549,
                    1718,
                    1848,
                    2554,
                    1694
                ],
                "closing.type": [
                    1065,
                    1069,
                    1073
                ],
                "closing": [
                    1089,
                    1065,
                    1098,
                    1069,
                    1073,
                    1087
                ],
                "token.RBRACE": [
                    1577,
                    1069,
                    3205
                ],
                "self.remove_trailing_comma": [
                    1082,
                    1076,
                    1109,
                    1070
                ],
                "comma": [
                    1074,
                    1075
                ],
                "comma.parent": [
                    1075
                ],
                "comma.parent.type": [
                    1075
                ],
                "self.is_import": [
                    1081
                ],
                "closing.bracket_depth": [
                    1087
                ],
                "commas": [
                    1088,
                    1105,
                    1108,
                    1103
                ],
                "opening": [
                    1089,
                    1091
                ],
                "closing.opening_bracket": [
                    1089
                ],
                "_opening_index": [
                    1097,
                    1090
                ],
                "bracket_depth": [
                    1101,
                    1102
                ],
                "leaf.parent": [
                    1929,
                    1930,
                    1939,
                    2587,
                    2590,
                    2346,
                    1594,
                    1869,
                    1870,
                    1104,
                    1877,
                    1878,
                    1897,
                    1898,
                    1904,
                    1905,
                    1909,
                    1917,
                    1918
                ],
                "leaf.parent.type": [
                    1898,
                    1930,
                    1870,
                    1104,
                    1905,
                    1909,
                    1878,
                    1918
                ],
                "comment.type": [
                    1128,
                    1408,
                    1123,
                    1117
                ],
                "comment": [
                    1408,
                    1410,
                    1157,
                    1159,
                    1417,
                    1191,
                    1192,
                    3128,
                    3129,
                    3130,
                    1985,
                    1986,
                    1988,
                    1991,
                    1117,
                    1120,
                    1123,
                    1128,
                    1129,
                    1133,
                    1404,
                    1407
                ],
                "self.bracket_tracker.any_open_brackets": [
                    1118
                ],
                "comment.prefix": [
                    1120,
                    1129
                ],
                "self.comments.append": [
                    1133
                ],
                "self.comments": [
                    1156,
                    1157,
                    1159,
                    1191,
                    1133,
                    1197,
                    1149
                ],
                "_index": [
                    3182,
                    1141,
                    1142,
                    3225,
                    3196,
                    1150
                ],
                "_leaf": [
                    1142,
                    1143
                ],
                "index": [
                    2334,
                    2337,
                    3106,
                    2468,
                    3108,
                    3109,
                    2477,
                    3123,
                    1973,
                    2487,
                    2744,
                    3129,
                    3132,
                    1981,
                    2495,
                    2496,
                    2764,
                    2288,
                    2291,
                    1149,
                    1150
                ],
                "comment_after": [
                    2177,
                    2178,
                    2337,
                    2338,
                    2124,
                    2125,
                    2291,
                    2292,
                    1149,
                    1151
                ],
                "comma_index": [
                    1155,
                    1158,
                    1159
                ],
                "i": [
                    1156,
                    1157,
                    1159
                ],
                "comment_index": [
                    1157,
                    1158
                ],
                "self.leaves.pop": [
                    1160
                ],
                "open_lsqb": [
                    1170,
                    1164,
                    1167
                ],
                "token.LSQB": [
                    1577,
                    1715,
                    1165
                ],
                "self.bracket_tracker.get_open_lsqb": [
                    1165
                ],
                "subscript_start": [
                    1170,
                    1172,
                    1173,
                    1175,
                    1176,
                    1177
                ],
                "open_lsqb.next_sibling": [
                    1170
                ],
                "subscript_start.type": [
                    1173
                ],
                "syms.subscriptlist": [
                    1757,
                    1605,
                    1173
                ],
                "child_towards": [
                    1175
                ],
                "n.type": [
                    2704,
                    1177,
                    2710
                ],
                "n": [
                    2703,
                    2704,
                    2705,
                    2710,
                    2711,
                    2712,
                    1177,
                    2714
                ],
                "subscript_start.pre_order": [
                    1177
                ],
                "first": [
                    1187,
                    1188,
                    3172,
                    3179,
                    3183,
                    2512,
                    2514,
                    3218,
                    2516,
                    2646,
                    2648
                ],
                "res": [
                    1188,
                    1190,
                    1192,
                    1193,
                    1231,
                    1233,
                    1234,
                    1817,
                    1818,
                    1819,
                    1820,
                    1823
                ],
                "first.prefix": [
                    1188
                ],
                "first.value": [
                    2516,
                    1188
                ],
                "generate_comments": [
                    1404,
                    1212,
                    2463
                ],
                "FormatOn": [
                    1989,
                    1425,
                    1213,
                    1543
                ],
                "f_on.leaf_from_consumed": [
                    1214
                ],
                "f_on": [
                    1544,
                    1428,
                    1214
                ],
                "previous_line": [
                    1260
                ],
                "previous_after": [
                    1261
                ],
                "previous_defs": [
                    1262
                ],
                "UnformattedLines": [
                    1392,
                    2034,
                    1422,
                    1270
                ],
                "self._maybe_empty_lines": [
                    1273
                ],
                "self.previous_after": [
                    1274,
                    1275
                ],
                "self.previous_line": [
                    1346,
                    1315,
                    1316,
                    1347,
                    1341,
                    1322,
                    1324,
                    1325,
                    1338,
                    1302,
                    1306,
                    1339,
                    1276,
                    1309,
                    1310
                ],
                "max_allowed": [
                    1280,
                    1282,
                    1287
                ],
                "current_line.depth": [
                    1281,
                    1316,
                    1322,
                    1291,
                    1333,
                    1309
                ],
                "self.is_pyi": [
                    1282,
                    1321,
                    1483,
                    1294,
                    1492,
                    1500
                ],
                "current_line.leaves": [
                    2309,
                    1283,
                    2308,
                    1285
                ],
                "first_leaf.prefix.count": [
                    1286
                ],
                "first_leaf.prefix": [
                    1288,
                    1286
                ],
                "self.previous_defs": [
                    1301,
                    1292,
                    1293
                ],
                "self.previous_defs.pop": [
                    1293
                ],
                "is_decorator": [
                    1298,
                    1299,
                    1300
                ],
                "current_line.is_decorator": [
                    1298
                ],
                "current_line.is_def": [
                    1299
                ],
                "current_line.is_class": [
                    1299,
                    1324
                ],
                "self.previous_defs.append": [
                    1301
                ],
                "self.previous_line.is_decorator": [
                    1306
                ],
                "self.previous_line.depth": [
                    1322,
                    1341,
                    1316,
                    1309
                ],
                "self.previous_line.is_class": [
                    1347,
                    1324,
                    1310
                ],
                "self.previous_line.is_def": [
                    1310
                ],
                "self.previous_line.is_comment": [
                    1315
                ],
                "newlines": [
                    1323,
                    1326,
                    1328,
                    1330,
                    1332,
                    1333,
                    1334,
                    1335
                ],
                "current_line.is_stub_class": [
                    1325
                ],
                "self.previous_line.is_stub_class": [
                    1325
                ],
                "self.previous_line.is_import": [
                    1339
                ],
                "current_line.is_import": [
                    1340
                ],
                "current_line.is_triple_quoted_string": [
                    1348
                ],
                "remove_u_prefix": [
                    2387,
                    1366
                ],
                "Type": [
                    1368
                ],
                "self.current_line": [
                    1376,
                    1377,
                    1378,
                    1410,
                    1380,
                    1542,
                    1383,
                    1384,
                    1417,
                    1392,
                    1402,
                    1437,
                    1407
                ],
                "self.current_line.__class__": [
                    1377
                ],
                "self.current_line.depth": [
                    1378,
                    1380
                ],
                "complete_line": [
                    1384,
                    1385,
                    1383
                ],
                "complete_line.depth": [
                    1384
                ],
                "self.visit_unformatted": [
                    1394
                ],
                "visit": [
                    1397
                ],
                "any_open_brackets": [
                    1432,
                    1402,
                    1405
                ],
                "self.current_line.bracket_tracker.any_open_brackets": [
                    1402
                ],
                "self.current_line.bracket_tracker": [
                    1402
                ],
                "self.current_line.append": [
                    1410,
                    1542,
                    1417,
                    1437,
                    1407
                ],
                "self.line": [
                    1506,
                    1411,
                    1443,
                    1477,
                    1527,
                    1415,
                    1545,
                    1418,
                    1451,
                    1422,
                    1550,
                    1458,
                    1522,
                    1495,
                    1497,
                    1532,
                    1501
                ],
                "FormatOff": [
                    2464,
                    1993,
                    1420,
                    1997
                ],
                "f_off.trim_prefix": [
                    1421
                ],
                "f_off": [
                    1421
                ],
                "f_on.trim_prefix": [
                    1544,
                    1428
                ],
                "normalize_prefix": [
                    1432,
                    2245,
                    2167,
                    2119
                ],
                "self.normalize_strings": [
                    1433
                ],
                "normalize_string_prefix": [
                    1434
                ],
                "self.remove_u_prefix": [
                    1434
                ],
                "normalize_string_quotes": [
                    1435
                ],
                "visit_default": [
                    1438
                ],
                "Set": [
                    2726,
                    2743,
                    2736,
                    2579,
                    1555,
                    1461,
                    2453,
                    2742,
                    2780
                ],
                "normalize_invisible_parens": [
                    1474
                ],
                "parens": [
                    1474
                ],
                "child.type": [
                    2784,
                    1476,
                    2470,
                    2631,
                    1512,
                    2481,
                    2485
                ],
                "child.value": [
                    2498,
                    2483,
                    1476
                ],
                "keywords": [
                    1476
                ],
                "is_stub_suite": [
                    1483,
                    1500
                ],
                "is_suite_like": [
                    1490,
                    1491
                ],
                "node.parent": [
                    1828,
                    1835,
                    1836,
                    1490,
                    1500
                ],
                "node.parent.type": [
                    1490
                ],
                "is_stub_body": [
                    2618,
                    1492
                ],
                "children": [
                    1515,
                    1508,
                    1509
                ],
                "internal_stmt": [
                    1515,
                    1516
                ],
                "internal_stmt.children": [
                    1516
                ],
                "token.ENDMARKER": [
                    1548,
                    1981
                ],
                "self.visit_stmt": [
                    1554
                ],
                "\u00d8": [
                    1568,
                    1569,
                    1571,
                    1555,
                    1563,
                    1565,
                    1566,
                    1567
                ],
                "self.visit_assert_stmt": [
                    1556
                ],
                "self.visit_if_stmt": [
                    1557
                ],
                "self.visit_while_stmt": [
                    1560
                ],
                "self.visit_for_stmt": [
                    1561
                ],
                "self.visit_try_stmt": [
                    1562
                ],
                "self.visit_except_clause": [
                    1565
                ],
                "self.visit_with_stmt": [
                    1566
                ],
                "self.visit_funcdef": [
                    1567
                ],
                "self.visit_classdef": [
                    1568
                ],
                "self.visit_expr_stmt": [
                    1569
                ],
                "self.visit_return_stmt": [
                    1570
                ],
                "self.visit_import_from": [
                    1571
                ],
                "self.visit_async_funcdef": [
                    1572
                ],
                "self.visit_async_stmt": [
                    1572
                ],
                "self.visit_decorated": [
                    1573
                ],
                "self.visit_decorators": [
                    1573
                ],
                "IMPLICIT_TUPLE": [
                    1576,
                    2552
                ],
                "syms.testlist": [
                    1576
                ],
                "syms.testlist_star_expr": [
                    1576
                ],
                "syms.exprlist": [
                    1576
                ],
                "token.LBRACE": [
                    1577
                ],
                "BRACKET.keys": [
                    1578
                ],
                "BRACKET.values": [
                    1579
                ],
                "ALWAYS_NO_SPACE": [
                    1596,
                    1581
                ],
                "SPACE": [
                    1591,
                    1803,
                    1647,
                    1811,
                    1623,
                    1758
                ],
                "DOUBLESPACE": [
                    1592,
                    1600
                ],
                "t": [
                    1793,
                    1603,
                    1797,
                    1766,
                    1801,
                    1706,
                    2347,
                    1710,
                    2350,
                    1616,
                    1715,
                    1747,
                    1685,
                    1593,
                    1723,
                    1596,
                    1599
                ],
                "p.type": [
                    1796,
                    1670,
                    1675,
                    1680,
                    1808,
                    2591,
                    1697,
                    2599,
                    1704,
                    2352,
                    2353,
                    1721,
                    1603,
                    1734,
                    1738,
                    1746,
                    1753,
                    1765,
                    1770,
                    1775
                ],
                "syms.subscript": [
                    1753,
                    1604,
                    1785,
                    1646
                ],
                "syms.sliceop": [
                    1606,
                    1646,
                    1808,
                    1753,
                    1786
                ],
                "prev": [
                    1667,
                    1798,
                    1672,
                    1677,
                    1805,
                    1682,
                    1686,
                    1689,
                    1692,
                    1694,
                    1699,
                    1709,
                    1718,
                    1726,
                    1731,
                    1610,
                    1611,
                    1739,
                    1995,
                    1996,
                    1750,
                    1755,
                    1766,
                    1772,
                    1777
                ],
                "leaf.prev_sibling": [
                    1610
                ],
                "prevp": [
                    1700,
                    1701,
                    1790,
                    1711,
                    1712,
                    1727,
                    1728,
                    1612,
                    1613,
                    1742,
                    1743,
                    1617,
                    1620,
                    1625,
                    1626,
                    1627,
                    1635,
                    1639,
                    1641,
                    1642,
                    1645,
                    1646,
                    1650,
                    1651,
                    1652,
                    1778,
                    1779,
                    1782,
                    1784,
                    1657,
                    1658,
                    1659,
                    1660,
                    1661,
                    1662
                ],
                "preceding_leaf": [
                    1700,
                    1995,
                    1612,
                    1742,
                    1711,
                    1778,
                    1727
                ],
                "prevp.type": [
                    1728,
                    1701,
                    1641,
                    1613,
                    1645,
                    1743,
                    1712,
                    1617,
                    1657,
                    1779,
                    1620,
                    1652,
                    1784,
                    1625,
                    1790
                ],
                "complex_subscript": [
                    1762,
                    1620,
                    1647
                ],
                "token.EQUAL": [
                    1731,
                    1689,
                    1685,
                    1625,
                    1723,
                    1790
                ],
                "prevp.parent": [
                    1635,
                    1659,
                    1646,
                    1650,
                    1651,
                    1658,
                    1782,
                    1626,
                    1627
                ],
                "prevp.parent.type": [
                    1635,
                    1659,
                    1646,
                    1651,
                    1627
                ],
                "syms.parameters": [
                    1670,
                    1630
                ],
                "prevp.prefix": [
                    1639
                ],
                "is_vararg": [
                    1642,
                    1862,
                    2295
                ],
                "syms.factor": [
                    1651,
                    1878,
                    1775
                ],
                "prevp.prev_sibling": [
                    1660,
                    1661,
                    1662
                ],
                "prevp.prev_sibling.type": [
                    1661
                ],
                "prevp.prev_sibling.value": [
                    1662
                ],
                "prev.type": [
                    1667,
                    1731,
                    1798,
                    1672,
                    1772,
                    1677,
                    1805,
                    1996,
                    1686,
                    1718,
                    1750,
                    1689,
                    1694
                ],
                "syms.tname": [
                    1697,
                    1686
                ],
                "prev.prefix": [
                    1692
                ],
                "token.NUMBER": [
                    1712,
                    1793
                ],
                "syms.decorator": [
                    1734
                ],
                "syms.dotted_name": [
                    1738,
                    1870
                ],
                "p.parent": [
                    2594,
                    2597,
                    1756,
                    1757
                ],
                "p.parent.type": [
                    1757
                ],
                "prevp_parent": [
                    1784,
                    1790,
                    1782,
                    1783
                ],
                "prevp_parent.type": [
                    1784,
                    1790
                ],
                "syms.import_from": [
                    1796,
                    2797,
                    1870,
                    2478,
                    2353,
                    2681
                ],
                "node.prev_sibling": [
                    1817
                ],
                "res.leaves": [
                    1823
                ],
                "descendant": [
                    1834
                ],
                "ancestor": [
                    1835
                ],
                "previous.type": [
                    1888,
                    1921,
                    1933,
                    1871
                ],
                "syms.comp_for": [
                    1898
                ],
                "syms.old_comp_for": [
                    1898
                ],
                "syms.comp_if": [
                    1905
                ],
                "syms.old_comp_if": [
                    1905
                ],
                "syms.comp_op": [
                    1930,
                    1918
                ],
                "previous.value": [
                    1922,
                    1934
                ],
                "nlines": [
                    1977,
                    1986,
                    1972,
                    1999
                ],
                "p.split": [
                    1973
                ],
                "line.lstrip": [
                    1975
                ],
                "line.startswith": [
                    1978
                ],
                "comment_type": [
                    1984,
                    1986,
                    1982,
                    1992
                ],
                "make_comment": [
                    1985
                ],
                "content": [
                    2016,
                    2017,
                    2018,
                    2010,
                    2011,
                    2014,
                    2015
                ],
                "content.rstrip": [
                    2010
                ],
                "line.is_comment": [
                    2034
                ],
                "line_str": [
                    3140,
                    3141,
                    3143,
                    3144,
                    2038,
                    2040,
                    2073
                ],
                "strip": [
                    2224,
                    2073,
                    3141,
                    2038
                ],
                "line.should_explode": [
                    2039
                ],
                "is_line_short_enough": [
                    2053,
                    2039
                ],
                "split_funcs": [
                    2063,
                    2065,
                    2066,
                    2045,
                    2047
                ],
                "line.is_def": [
                    2046
                ],
                "left_hand_split": [
                    2047
                ],
                "omit": [
                    2051,
                    2052,
                    2158,
                    2736,
                    2737,
                    2194,
                    2197,
                    2773,
                    2774,
                    2776
                ],
                "generate_trailers_to_omit": [
                    2051
                ],
                "right_hand_split": [
                    2052,
                    2060,
                    2197
                ],
                "line.inside_brackets": [
                    2273,
                    2285,
                    2062,
                    2321,
                    2331,
                    2303
                ],
                "delimiter_split": [
                    2063
                ],
                "standalone_comment_split": [
                    2063
                ],
                "rhs": [
                    2065,
                    2063
                ],
                "split_func": [
                    2072,
                    2242,
                    2066,
                    2244
                ],
                "l": [
                    2244,
                    2245,
                    2246,
                    2072,
                    2073,
                    2077
                ],
                "CannotSplit": [
                    2271,
                    2267,
                    2319,
                    2227,
                    2261,
                    2230,
                    2199,
                    2074,
                    2171,
                    2079
                ],
                "result.extend": [
                    2076
                ],
                "head": [
                    2179,
                    2121,
                    2126,
                    2127,
                    2097,
                    2205,
                    2174,
                    2143
                ],
                "line.depth": [
                    2144,
                    2145,
                    2273,
                    2303,
                    2285,
                    3181,
                    2097,
                    2098,
                    2099,
                    2321,
                    2739,
                    3223,
                    2331,
                    2143
                ],
                "body": [
                    2432,
                    2433,
                    2179,
                    2435,
                    2436,
                    2442,
                    2195,
                    2204,
                    2205,
                    2225,
                    2098,
                    2121,
                    2126,
                    2127,
                    2144,
                    2421,
                    2423,
                    2429,
                    2174
                ],
                "tail": [
                    2145,
                    2179,
                    2121,
                    2126,
                    2127,
                    2224,
                    2099,
                    2205,
                    2174
                ],
                "tail_leaves": [
                    2146,
                    2149,
                    2121,
                    2155,
                    2157,
                    2162,
                    2100,
                    2174,
                    2111
                ],
                "body_leaves": [
                    2147,
                    2116,
                    2118,
                    2119,
                    2121,
                    2153,
                    2155,
                    2161,
                    2163,
                    2101,
                    2166,
                    2167,
                    2107,
                    2174,
                    2111
                ],
                "head_leaves": [
                    2113,
                    2148,
                    2121,
                    2155,
                    2164,
                    2102,
                    2103,
                    2168,
                    2174,
                    2111
                ],
                "current_leaves": [
                    2112,
                    2113,
                    2116,
                    2149,
                    2153,
                    2155,
                    2156,
                    2157,
                    2161,
                    2103,
                    2107,
                    2111
                ],
                "matching_bracket": [
                    2104,
                    2115,
                    2109
                ],
                "line.leaves": [
                    3170,
                    3172,
                    3173,
                    3174,
                    3175,
                    2152,
                    2764,
                    2288,
                    2259,
                    3123,
                    2105,
                    3196,
                    2334,
                    2687
                ],
                "current_leaves.append": [
                    2112,
                    2156
                ],
                "result.append": [
                    2176,
                    2178,
                    2123,
                    2125
                ],
                "line.comments_after": [
                    2177,
                    2337,
                    2124,
                    2291,
                    3129
                ],
                "bracket_split_succeeded_or_raise": [
                    2179,
                    2126
                ],
                "Collection": [
                    2133
                ],
                "closing_bracket": [
                    2180,
                    2151,
                    2186,
                    2187,
                    2160,
                    2194,
                    2772,
                    2741,
                    2773,
                    2777,
                    2203
                ],
                "tail_leaves.reverse": [
                    2162
                ],
                "body_leaves.reverse": [
                    2163
                ],
                "head_leaves.reverse": [
                    2164
                ],
                "opening_bracket.type": [
                    2183
                ],
                "opening_bracket.value": [
                    2184,
                    2682
                ],
                "closing_bracket.type": [
                    2186
                ],
                "closing_bracket.value": [
                    2187
                ],
                "line.contains_standalone_comments": [
                    3145,
                    2189,
                    2318
                ],
                "line.is_import": [
                    2192
                ],
                "can_omit_invisible_parens": [
                    2195
                ],
                "ensure_visible": [
                    2202,
                    2203
                ],
                "body.should_explode": [
                    2204
                ],
                "tail_len": [
                    2224,
                    2226,
                    2229,
                    2232
                ],
                "l.leaves": [
                    2245
                ],
                "wraps": [
                    2242
                ],
                "split_wrapper": [
                    2248
                ],
                "last_leaf": [
                    2688,
                    2265,
                    2259,
                    2687
                ],
                "bt": [
                    3161,
                    2657,
                    2659,
                    2654,
                    2299,
                    3156,
                    3157,
                    2263,
                    2265,
                    3162,
                    2651,
                    2270
                ],
                "line.bracket_tracker": [
                    2689,
                    3156,
                    2263
                ],
                "delimiter_priority": [
                    2307,
                    2265,
                    2300,
                    2269,
                    2270
                ],
                "bt.max_delimiter_priority": [
                    3161,
                    2265,
                    2659
                ],
                "bt.delimiter_count_with_priority": [
                    3162,
                    2270
                ],
                "lowest_depth": [
                    2274,
                    2294,
                    2295
                ],
                "trailing_comma_safe": [
                    2306,
                    2298,
                    2275
                ],
                "current_line.append_safe": [
                    2281,
                    2327
                ],
                "current_line.append": [
                    2332,
                    2286,
                    2311
                ],
                "append_to_line": [
                    2289,
                    2338,
                    2292,
                    2335
                ],
                "leaf_priority": [
                    2299,
                    2300
                ],
                "bt.delimiters.get": [
                    2299
                ],
                "bt.delimiters": [
                    2299,
                    3157
                ],
                "dont_increase_indentation": [
                    2315,
                    2251
                ],
                "syms.import_name": [
                    2352
                ],
                "spl": [
                    2368,
                    2365,
                    2366,
                    2367
                ],
                "leaf.prefix.split": [
                    2365
                ],
                "nl_count": [
                    2369,
                    2370,
                    2367
                ],
                "count": [
                    2367
                ],
                "match": [
                    2384,
                    2385,
                    2389,
                    2383
                ],
                "re.match": [
                    2383
                ],
                "re.DOTALL": [
                    2383
                ],
                "orig_prefix": [
                    2385,
                    2386
                ],
                "match.group": [
                    2385,
                    2389
                ],
                "new_prefix": [
                    2386,
                    2388,
                    2389
                ],
                "orig_prefix.lower": [
                    2386
                ],
                "new_prefix.replace": [
                    2388
                ],
                "leaf.value.lstrip": [
                    2400,
                    2604
                ],
                "orig_quote": [
                    2436,
                    2405,
                    2437,
                    2408,
                    2411,
                    2413,
                    2447,
                    2420,
                    2421
                ],
                "new_quote": [
                    2432,
                    2406,
                    2438,
                    2439,
                    2409,
                    2412,
                    2418,
                    2419,
                    2450
                ],
                "first_quote_pos": [
                    2417,
                    2421,
                    2413,
                    2414
                ],
                "leaf.value.find": [
                    2413
                ],
                "prefix": [
                    2417,
                    2450,
                    2436,
                    2422
                ],
                "unescaped_new_quote": [
                    2418,
                    2438,
                    2423
                ],
                "escaped_new_quote": [
                    2432,
                    2419
                ],
                "escaped_orig_quote": [
                    2420,
                    2437
                ],
                "prefix.casefold": [
                    2422
                ],
                "unescaped_new_quote.search": [
                    2423
                ],
                "new_body": [
                    2432,
                    2433,
                    2435,
                    2437,
                    2438,
                    2439,
                    2441,
                    2443,
                    2450,
                    2429
                ],
                "sub_twice": [
                    2432,
                    2437,
                    2438
                ],
                "orig_escape_count": [
                    2442,
                    2444,
                    2447
                ],
                "body.count": [
                    2442
                ],
                "new_escape_count": [
                    2443,
                    2444,
                    2447
                ],
                "new_body.count": [
                    2443
                ],
                "check_lpar": [
                    2498,
                    2467,
                    2469
                ],
                "maybe_make_parens_invisible_in_atom": [
                    2519,
                    2471
                ],
                "is_one_tuple": [
                    2472,
                    2506
                ],
                "lpar": [
                    2496,
                    2474,
                    2572,
                    2541,
                    2477,
                    2543,
                    2573,
                    2493
                ],
                "rpar": [
                    2496,
                    2475,
                    2572,
                    2541,
                    2477,
                    2573,
                    2545,
                    2494
                ],
                "child.remove": [
                    2476,
                    2495
                ],
                "node.insert_child": [
                    2496,
                    2477,
                    2487
                ],
                "node.append_child": [
                    2488
                ],
                "is_multiline_string": [
                    3218,
                    2491
                ],
                "parens_after": [
                    2498
                ],
                "is_empty_tuple": [
                    2505
                ],
                "is_yield": [
                    2507,
                    2574
                ],
                "max_delimiter_priority_in_atom": [
                    2508
                ],
                "last": [
                    3204,
                    3205,
                    3175,
                    3209,
                    3210,
                    3211,
                    2513,
                    2514,
                    2517,
                    2647,
                    2648,
                    3227
                ],
                "first.type": [
                    2648,
                    2514,
                    3179
                ],
                "last.type": [
                    3204,
                    3205,
                    3209,
                    2514,
                    2648
                ],
                "last.value": [
                    2517
                ],
                "gexp": [
                    2544,
                    2549,
                    2541
                ],
                "lpar.type": [
                    2573,
                    2543
                ],
                "gexp.type": [
                    2544
                ],
                "rpar.type": [
                    2545,
                    2573
                ],
                "gexp.children": [
                    2549
                ],
                "syms.yield_expr": [
                    2560
                ],
                "expr": [
                    2572,
                    2574
                ],
                "within": [
                    2599
                ],
                "syms.simple_stmt": [
                    2784,
                    2623
                ],
                "child.children": [
                    2786,
                    2790,
                    2632,
                    2633,
                    2792
                ],
                "c": [
                    2656,
                    2652,
                    2653,
                    2654
                ],
                "bt.mark": [
                    2657,
                    2654
                ],
                "c.leaves": [
                    2656
                ],
                "opening_bracket.parent": [
                    2680,
                    2681
                ],
                "opening_bracket.parent.type": [
                    2681
                ],
                "last_leaf.type": [
                    2688
                ],
                "max_priority": [
                    2689,
                    2693,
                    3161,
                    3162,
                    3166
                ],
                "line.bracket_tracker.max_delimiter_priority": [
                    2689
                ],
                "node.pre_order": [
                    2703
                ],
                "value_head": [
                    2705,
                    2706
                ],
                "n.value": [
                    2705
                ],
                "n.children": [
                    2712,
                    2714,
                    2711
                ],
                "ch": [
                    2714,
                    2715,
                    2718,
                    2719
                ],
                "ch.type": [
                    2715,
                    2718
                ],
                "argch": [
                    2720,
                    2719
                ],
                "ch.children": [
                    2719
                ],
                "argch.type": [
                    2720
                ],
                "length": [
                    3226,
                    3181,
                    3228,
                    3186,
                    2739,
                    3124,
                    3187,
                    3223,
                    2746,
                    2745,
                    3130,
                    3132
                ],
                "optional_brackets": [
                    2753,
                    2761,
                    2742
                ],
                "inner_brackets": [
                    2758,
                    2743,
                    2768,
                    2774,
                    2775
                ],
                "leaf_length": [
                    3225,
                    3182,
                    3186,
                    2744,
                    2745,
                    3226,
                    2749
                ],
                "enumerate_with_length": [
                    2744,
                    3225,
                    3182
                ],
                "has_inline_comment": [
                    2749,
                    2750
                ],
                "optional_brackets.discard": [
                    2753
                ],
                "inner_brackets.add": [
                    2768,
                    2758
                ],
                "optional_brackets.add": [
                    2761
                ],
                "omit.add": [
                    2773
                ],
                "omit.update": [
                    2774
                ],
                "inner_brackets.clear": [
                    2775
                ],
                "imports": [
                    2809,
                    2804,
                    2782,
                    2812
                ],
                "first_child": [
                    2786,
                    2787,
                    2791,
                    2797,
                    2798,
                    2801
                ],
                "first_child.type": [
                    2797,
                    2791
                ],
                "module_name": [
                    2798,
                    2799
                ],
                "first_child.children": [
                    2801,
                    2798
                ],
                "module_name.value": [
                    2799
                ],
                "import_from_child": [
                    2801,
                    2802,
                    2803,
                    2804,
                    2806,
                    2807
                ],
                "import_from_child.type": [
                    2803,
                    2806
                ],
                "imports.add": [
                    2809,
                    2804
                ],
                "import_from_child.value": [
                    2804
                ],
                "syms.import_as_names": [
                    2806
                ],
                "import_from_child.children": [
                    2807
                ],
                "Pattern": [
                    2818,
                    2819,
                    3095
                ],
                "root.is_absolute": [
                    2827
                ],
                "path.iterdir": [
                    2828
                ],
                "path": [
                    3267,
                    2828,
                    2909
                ],
                "normalized_path": [
                    2832,
                    2841,
                    2829,
                    2831
                ],
                "as_posix": [
                    2829
                ],
                "relative_to": [
                    2829
                ],
                "child.resolve": [
                    2829
                ],
                "child.is_dir": [
                    2837,
                    2830
                ],
                "exclude_match": [
                    2832,
                    2833
                ],
                "exclude.search": [
                    2832
                ],
                "exclude_match.group": [
                    2833
                ],
                "report.path_ignored": [
                    2834
                ],
                "exclude.pattern": [
                    2834
                ],
                "child.is_file": [
                    2840
                ],
                "include_match": [
                    2841,
                    2842
                ],
                "include.search": [
                    2841
                ],
                "srcs": [
                    2858,
                    2855
                ],
                "resolve": [
                    2856,
                    2858
                ],
                "common_base": [
                    2858,
                    2859,
                    2861,
                    2862
                ],
                "common_base.is_dir": [
                    2859
                ],
                "directory": [
                    2862,
                    2863,
                    2864,
                    2866,
                    2867,
                    2869,
                    2870,
                    2872
                ],
                "common_base.parents": [
                    2862
                ],
                "is_dir": [
                    2866,
                    2863
                ],
                "is_file": [
                    2869
                ],
                "change_count": [
                    2882
                ],
                "same_count": [
                    2883
                ],
                "failure_count": [
                    2884
                ],
                "reformatted": [
                    2947,
                    2889,
                    2891,
                    2936,
                    2940
                ],
                "self.check": [
                    2889,
                    2925,
                    2935
                ],
                "self.verbose": [
                    2890,
                    2908,
                    2894
                ],
                "self.quiet": [
                    2890
                ],
                "self.change_count": [
                    2944,
                    2945,
                    2947,
                    2892,
                    2925
                ],
                "msg": [
                    2896,
                    2898,
                    2899
                ],
                "self.same_count": [
                    2900,
                    2949,
                    2950,
                    2951
                ],
                "message": [
                    2904,
                    2909
                ],
                "self.failure_count": [
                    2952,
                    2953,
                    2922,
                    2955,
                    2905
                ],
                "unchanged": [
                    2937,
                    2941,
                    2951
                ],
                "failed": [
                    2938,
                    2955,
                    2942
                ],
                "report.append": [
                    2946,
                    2954,
                    2951
                ],
                "click.style": [
                    2947,
                    2955
                ],
                "join": [
                    3011,
                    3012,
                    2957,
                    3061,
                    3004
                ],
                "ast.AST": [
                    2980,
                    2966,
                    2983
                ],
                "ast": [
                    2980,
                    2983,
                    2992,
                    2966,
                    3002
                ],
                "node.__class__.__name__": [
                    2968,
                    2989
                ],
                "node.__class__": [
                    2968,
                    2989
                ],
                "field": [
                    2976,
                    2970,
                    2972
                ],
                "node._fields": [
                    2970
                ],
                "item": [
                    2979,
                    2980,
                    2981
                ],
                "_v": [
                    2984,
                    3011,
                    3012,
                    2981
                ],
                "value.__class__.__name__": [
                    2987
                ],
                "value.__class__": [
                    2987
                ],
                "src_ast": [
                    2992,
                    3011
                ],
                "ast.parse": [
                    2992,
                    3002
                ],
                "major": [
                    2994,
                    2997
                ],
                "minor": [
                    2994,
                    2997
                ],
                "sys.version_info": [
                    2994
                ],
                "dst_ast": [
                    3002,
                    3012
                ],
                "log": [
                    3008,
                    3014,
                    3019,
                    3029,
                    3004,
                    3037
                ],
                "dump_to_file": [
                    3004,
                    3029,
                    3014
                ],
                "traceback.format_tb": [
                    3004
                ],
                "traceback": [
                    3004
                ],
                "exc.__traceback__": [
                    3004
                ],
                "src_ast_str": [
                    3011,
                    3013,
                    3014
                ],
                "dst_ast_str": [
                    3012,
                    3013,
                    3014
                ],
                "newdst": [
                    3027,
                    3028,
                    3031
                ],
                "tempfile.NamedTemporaryFile": [
                    3045
                ],
                "tempfile": [
                    3045
                ],
                "output": [
                    3048
                ],
                "f.name": [
                    3052
                ],
                "a_lines": [
                    3059,
                    3062
                ],
                "a.split": [
                    3059
                ],
                "a": [
                    3059
                ],
                "b_lines": [
                    3060,
                    3062
                ],
                "b.split": [
                    3060
                ],
                "b": [
                    3060
                ],
                "difflib.unified_diff": [
                    3062
                ],
                "difflib": [
                    3062
                ],
                "a_name": [
                    3062
                ],
                "b_name": [
                    3062
                ],
                "task.cancel": [
                    3082,
                    3070
                ],
                "to_cancel": [
                    3081,
                    3084,
                    3077,
                    3078
                ],
                "asyncio.Task.all_tasks": [
                    3077
                ],
                "task.done": [
                    3077
                ],
                "cf_logger": [
                    3090,
                    3091
                ],
                "logging.getLogger": [
                    3090
                ],
                "logging": [
                    3090,
                    3091
                ],
                "cf_logger.setLevel": [
                    3091
                ],
                "logging.CRITICAL": [
                    3091
                ],
                "loop.close": [
                    3092
                ],
                "regex.sub": [
                    3101
                ],
                "regex": [
                    3101
                ],
                "replacement": [
                    3101
                ],
                "original": [
                    3101
                ],
                "Sequence": [
                    3104,
                    3120
                ],
                "sequence": [
                    3106,
                    3107
                ],
                "element": [
                    3107,
                    3108
                ],
                "op": [
                    3123,
                    3119
                ],
                "cast": [
                    3119
                ],
                "enumerate_reversed": [
                    3121
                ],
                "comment.value": [
                    3130
                ],
                "second": [
                    3179,
                    3173
                ],
                "penultimate": [
                    3214,
                    3174
                ],
                "second.type": [
                    3179
                ],
                "remainder": [
                    3184,
                    3185,
                    3180,
                    3192
                ],
                "last.parent": [
                    3210,
                    3211
                ],
                "last.parent.type": [
                    3211
                ],
                "penultimate.type": [
                    3214
                ],
                "seen_other_brackets": [
                    3224,
                    3233,
                    3228
                ],
                "last.opening_bracket": [
                    3227
                ],
                "cache_file": [
                    3298,
                    3252,
                    3253,
                    3256,
                    3293
                ],
                "get_cache_file": [
                    3252,
                    3293
                ],
                "cache_file.exists": [
                    3253
                ],
                "cache_file.open": [
                    3256,
                    3298
                ],
                "fobj": [
                    3256,
                    3258,
                    3299,
                    3298
                ],
                "pickle.load": [
                    3258
                ],
                "pickle": [
                    3258,
                    3259,
                    3299
                ],
                "pickle.UnpicklingError": [
                    3259
                ],
                "stat": [
                    3267,
                    3268
                ],
                "path.stat": [
                    3267
                ],
                "stat.st_mtime": [
                    3268
                ],
                "stat.st_size": [
                    3268
                ],
                "todo": [
                    3283,
                    3286,
                    3279
                ],
                "cache.get": [
                    3282
                ],
                "todo.append": [
                    3283
                ],
                "done.append": [
                    3285
                ],
                "CACHE_DIR.exists": [
                    3295
                ],
                "CACHE_DIR.mkdir": [
                    3296
                ],
                "new_cache": [
                    3297,
                    3299
                ],
                "pickle.dump": [
                    3299
                ],
                "pickle.HIGHEST_PROTOCOL": [
                    3299
                ],
                "main": [
                    3305
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/black_18/tests/test_black.py",
                "test_function": "test_preserves_line_endings",
                "test_function_code": "    def test_preserves_line_endings(self) -> None:\n        with TemporaryDirectory() as workspace:\n            test_file = Path(workspace) / \"test.py\"\n            for nl in [\"\\n\", \"\\r\\n\"]:\n                contents = nl.join([\"def f(  ):\", \"    pass\"])\n                test_file.write_bytes(contents.encode())\n                ff(test_file, write_back=black.WriteBack.YES)\n                updated_contents: bytes = test_file.read_bytes()\n                self.assertIn(nl.encode(), updated_contents)  # type: ignore\n                if nl == \"\\n\":\n                    self.assertNotIn(b\"\\r\\n\", updated_contents)  # type: ignore",
                "test_error": "AssertionError: b'\\r\\n' not found in b'def f():\\n    pass\\n'",
                "full_test_error": "self = <test_black.BlackTestCase testMethod=test_preserves_line_endings>\n\n    def test_preserves_line_endings(self) -> None:\n        with TemporaryDirectory() as workspace:\n            test_file = Path(workspace) / \"test.py\"\n            for nl in [\"\\n\", \"\\r\\n\"]:\n                contents = nl.join([\"def f(  ):\", \"    pass\"])\n                test_file.write_bytes(contents.encode())\n                ff(test_file, write_back=black.WriteBack.YES)\n                updated_contents: bytes = test_file.read_bytes()\n>               self.assertIn(nl.encode(), updated_contents)  # type: ignore\nE               AssertionError: b'\\r\\n' not found in b'def f():\\n    pass\\n'\n\ntests/test_black.py:1121: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}